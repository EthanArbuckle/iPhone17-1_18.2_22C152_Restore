uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setBuffer_impl<AGXBuffer>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v7 = result;
  if (a4 <= 0x22) {
    *(void *)(result + 8 * a4 + 15248) = 0;
  }
  v8 = (_DWORD *)(result + 4 * a4);
  if (!a2)
  {
    v16 = *(void *)(result + 1896);
    v17 = 8 * a4;
    v18 = (void *)(result + v17);
    v18[1941] = v16;
    v18[2006] = 0;
    v19 = (void *)(*(void *)(result + 1936) + v17);
    v19[67] = v16;
    *v19 = 0;
    v8[2682] = 0;
    v8[2747] = 0;
    v8[2812] = *(void *)(result + 1896) >> 8;
    v18[1457] = 0;
    if (a4 > 0x22) {
      return result;
    }
    goto LABEL_7;
  }
  v9 = (int *)MEMORY[0x263F4B188];
  v10 = a2 + (int)*MEMORY[0x263F4B188];
  v11 = *(void *)(v10 + 8);
  v12 = *(void *)(v10 + 24);
  LODWORD(v10) = *(_DWORD *)(v10 + 16);
  v13 = 8 * a4;
  v14 = (void *)(result + v13);
  v14[1941] = v11;
  v14[2006] = v12;
  v15 = (void *)(*(void *)(result + 1936) + v13);
  v15[67] = v11 + a3;
  *v15 = v12 + a3;
  v8[2682] = v10;
  v8[2747] = v10;
  v8[2812] = v11 >> 8;
  v14[1457] = a2 + *v9;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), a2, 0, a4);
  *(void *)(v7 + 16624 + 8 * (a4 > 0x3F)) |= 1 << a4;
  *(_DWORD *)(v7 + 16656) |= 1u;
  result = *(void *)(v7 + 1480);
  if (result) {
    result = MTLResourceListAddResource();
  }
  if (a4 <= 0x22) {
LABEL_7:
  }
    v8[2647] = a5;
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::prepareForEnqueue(uint64_t a1, int a2)
{
  v3 = (_DWORD *)(a1 + 16656);
  *(unsigned char *)(a1 + 17162) &= ~1u;
  uint64_t v4 = *(void *)(*(void *)(a1 + 1456) + 808);
  int v5 = *(_DWORD *)(v4 + 6064);
  int v6 = *(_DWORD *)(a1 + 16664);
  if (*(unsigned char *)(a1 + 16676)) {
    int v7 = 1;
  }
  else {
    int v7 = a2;
  }
  if (a2 & 1) == 0 && (*(unsigned char *)(*(void *)(*(void *)(a1 + 1920) + 16) + 1952))
  {
    uint64_t v8 = *(void *)(a1 + 1936);
    long long v9 = *(_OWORD *)(v8 + 816);
    uint64_t v10 = *(void *)(v8 + 856);
    uint64_t v11 = *(void *)(a1 + 160);
    uint64_t v12 = v11 + 47;
    if ((unint64_t)(v11 + 47) > *(void *)(a1 + 152))
    {
      long long v52 = v9;
      int v51 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
      uint64_t v11 = *(void *)(a1 + 160);
      if (!v51)
      {
        long long v9 = v52;
        goto LABEL_8;
      }
      uint64_t v12 = v11 + 47;
      long long v9 = v52;
      if ((unint64_t)(v11 + 47) > *(void *)(a1 + 152)) {
        abort();
      }
    }
    *(void *)(a1 + 168) = v12;
LABEL_8:
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v14 = v13 + *(void *)(a1 + 176);
    *(void *)(a1 + 160) = v13 + 32;
    *(void *)(a1 + 16632) |= 1uLL;
    *v3 |= 1u;
    *(void *)(*(void *)(a1 + 1936) + 1048) = v14;
    *(void *)(a1 + 12168) = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
    *(_DWORD *)(a1 + 10984) = 24;
    *(_DWORD *)(a1 + 11244) = 24;
    *(_DWORD *)(a1 + 11504) = v14 >> 8;
    *(_OWORD *)unint64_t v13 = v9;
    *(void *)(v13 + 16) = v10;
  }
  if (v6 != v5)
  {
    v3[2] = v5;
    uint64_t v15 = *(void *)(a1 + 1936);
    v53[0] = v15 + 872;
    v53[1] = a1 + 11992;
    v53[2] = v15 + 880;
    v53[3] = a1 + 12000;
    v53[4] = v15 + 904;
    v53[5] = a1 + 12024;
    if (AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::addToResourceList(v4 + 6072, (uint64_t)v53))
    {
      if (v7)
      {
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
      }
      *(void *)(a1 + 16624) |= 0x4C0000000000uLL;
      *v3 |= 1u;
    }
    uint64_t v16 = *(void *)(a1 + 1936);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 6256));
    v17 = (int *)MEMORY[0x263F4B188];
    uint64_t v18 = (int)*MEMORY[0x263F4B188];
    uint64_t v19 = *(void *)(v4 + 6224) + v18;
    uint64_t v20 = *(void *)(v19 + 8);
    if (*(void *)(v16 + 1008) == v20
      && ((*(void *)(v19 + 40) ^ *(void *)(*(void *)(a1 + 12128) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6256));
    }
    else
    {
      *(void *)(v16 + 1008) = v20;
      *(void *)(a1 + 12128) = *(void *)(v4 + 6224) + v18;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6256));
      if (v7) {
        IOGPUResourceListAddResource();
      }
      *(void *)(a1 + 16624) |= 0x800000000000000uLL;
      *v3 |= 1u;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 6448));
    uint64_t v21 = *v17;
    uint64_t v22 = *(void *)(v4 + 6416) + v21;
    uint64_t v23 = *(void *)(v22 + 8);
    if (*(void *)(a1 + 17224) == v23
      && ((*(void *)(v22 + 40) ^ *(void *)(*(void *)(a1 + 17232) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6448));
    }
    else
    {
      *(void *)(a1 + 17224) = v23;
      *(void *)(a1 + 17232) = *(void *)(v4 + 6416) + v21;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6448));
      IOGPUResourceListAddResource();
    }
    **(void **)(a1 + 17216) = *(void *)(a1 + 17224);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 6384));
    uint64_t v24 = *v17;
    uint64_t v25 = *(void *)(v4 + 6352) + v24;
    uint64_t v26 = *(void *)(v25 + 8);
    if (*(void *)(a1 + 17240) == v26
      && ((*(void *)(v25 + 40) ^ *(void *)(*(void *)(a1 + 17248) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6384));
    }
    else
    {
      *(void *)(a1 + 17240) = v26;
      *(void *)(a1 + 17248) = *(void *)(v4 + 6352) + v24;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6384));
      IOGPUResourceListAddResource();
    }
    *(void *)(*(void *)(a1 + 17216) + 8) = *(void *)(a1 + 17240);
    uint64_t v27 = *(void *)(a1 + 1872);
    uint64_t v28 = *(void *)(a1 + 1936);
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 40));
    uint64_t v29 = *v17;
    uint64_t v30 = *(void *)(v27 + 8) + v29;
    uint64_t v31 = *(void *)(v30 + 8);
    if (*(void *)(v28 + 936) == v31
      && ((*(void *)(v30 + 40) ^ *(void *)(*(void *)(a1 + 12056) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 40));
    }
    else
    {
      *(void *)(v28 + 936) = v31;
      *(void *)(a1 + 12056) = *(void *)(v27 + 8) + v29;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 40));
      if (v7) {
        IOGPUResourceListAddResource();
      }
      *(void *)(a1 + 16624) |= 0x4000000000000uLL;
      *v3 |= 1u;
    }
    uint64_t v32 = *(void *)(a1 + 1864);
    uint64_t v33 = *(void *)(a1 + 1936);
    os_unfair_lock_lock((os_unfair_lock_t)(v32 + 40));
    uint64_t v34 = *v17;
    uint64_t v35 = *(void *)(v32 + 8) + v34;
    uint64_t v36 = *(void *)(v35 + 8);
    if (*(void *)(v33 + 944) == v36
      && ((*(void *)(v35 + 40) ^ *(void *)(*(void *)(a1 + 12064) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 40));
    }
    else
    {
      *(void *)(v33 + 944) = v36;
      *(void *)(a1 + 12064) = *(void *)(v32 + 8) + v34;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 40));
      if (v7) {
        IOGPUResourceListAddResource();
      }
      *(void *)(a1 + 16624) |= 0x8000000000000uLL;
      *v3 |= 1u;
    }
  }
  int v37 = *(_DWORD *)(v4 + 6196);
  if (v37) {
    int v38 = v37 + 1;
  }
  else {
    int v38 = 0;
  }
  if (v3[3] != v38)
  {
    uint64_t v39 = *(void *)(a1 + 1936);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 6192));
    uint64_t v40 = (int)*MEMORY[0x263F4B188];
    uint64_t v41 = *(void *)(v4 + 6160) + v40;
    uint64_t v42 = *(void *)(v41 + 8);
    if (*(void *)(v39 + 912) == v42
      && ((*(void *)(v41 + 40) ^ *(void *)(*(void *)(a1 + 12032) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      int v43 = 0;
    }
    else
    {
      *(void *)(v39 + 912) = v42;
      *(void *)(a1 + 12032) = *(void *)(v4 + 6160) + v40;
      MTLResourceListAddResource();
      int v43 = 1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 6192));
    uint64_t v44 = *(void *)(a1 + 1912);
    *(void *)(v44 + 152) = *(void *)(*(void *)(a1 + 1936) + 912);
    int v45 = *(_DWORD *)(v4 + 6196);
    int v46 = v45 ? v45 + 1 : 0;
    *(_DWORD *)(v44 + 160) = v46;
    if (v43)
    {
      if (v7) {
        IOGPUResourceListAddResource();
      }
      *(void *)(a1 + 16624) |= 0x800000000000uLL;
      *v3 |= 1u;
    }
  }
  int v47 = *(_DWORD *)(v4 + 5176);
  if (v3[4] != v47)
  {
    v3[4] = v47;
    uint64_t v48 = *(void *)(*(void *)(a1 + 1456) + 808);
    v49 = *(void **)(v48 + 5688);
    if (v49)
    {
      do
      {
        IOGPUResourceListAddResource();
        v49 = (void *)*v49;
      }
      while (v49);
      uint64_t v48 = *(void *)(*(void *)(a1 + 1456) + 808);
    }
    for (i = *(void **)(v48 + 5520); i; i = (void *)*i)
      IOGPUResourceListAddResource();
  }
}

void sub_242A679F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::insertIndirectTGOptKernel(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  int v5 = (_DWORD *)(a1 + 16656);
  if (*(unsigned char *)(a1 + 17272)) {
    return;
  }
  if (*a4 && !*(_WORD *)*a4)
  {
    uint64_t v11 = *a5;
    *(void *)&long long v12 = 0x6000000060000000;
    *((void *)&v12 + 1) = 0x6000000060000000;
    *(_OWORD *)uint64_t v11 = v12;
    *(_OWORD *)(v11 + 16) = v12;
    *(void *)(v11 + 32) = 0x6000000060000000;
  }
  uint64_t v13 = *(void *)(a1 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7912));
  if (*(_DWORD *)(a1 + 1880) == 1) {
    uint64_t v14 = 4608;
  }
  else {
    uint64_t v14 = 48;
  }
  uint64_t v15 = v14 | 0xF;
  uint64_t v16 = *(void *)(a1 + 160);
  unint64_t v17 = v16 + (v14 | 0xF);
  if (v17 <= *(void *)(a1 + 152))
  {
LABEL_10:
    *(void *)(a1 + 168) = v17;
    goto LABEL_11;
  }
  int v27 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v16 = *(void *)(a1 + 160);
  if (v27)
  {
    unint64_t v17 = v16 + v15;
    if ((unint64_t)(v16 + v15) > *(void *)(a1 + 152)) {
      goto LABEL_27;
    }
    goto LABEL_10;
  }
LABEL_11:
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v19 = v18 + *(void *)(a1 + 176);
  *(void *)(a1 + 160) = v18 + v14;
  *(void *)(a1 + 16624) |= 0x4000000000uLL;
  *v5 |= 1u;
  *(void *)(*(void *)(a1 + 1936) + 840) = v19;
  uint64_t v20 = (int *)MEMORY[0x263F4B188];
  *(void *)(a1 + 11960) = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(_DWORD *)(a1 + 10880) = v14;
  *(_DWORD *)(a1 + 11140) = v14;
  *(_DWORD *)(a1 + 11400) = v19 >> 8;
  *a3 = v18;
  uint64_t v21 = *(void *)(a1 + 160);
  uint64_t v22 = v21 + 31;
  if ((unint64_t)(v21 + 31) <= *(void *)(a1 + 152))
  {
LABEL_12:
    *(void *)(a1 + 168) = v22;
    goto LABEL_13;
  }
  int v28 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v21 = *(void *)(a1 + 160);
  if (v28)
  {
    uint64_t v22 = v21 + 31;
    if ((unint64_t)(v21 + 31) <= *(void *)(a1 + 152)) {
      goto LABEL_12;
    }
LABEL_27:
    abort();
  }
LABEL_13:
  uint64_t v23 = (_WORD *)((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = (unint64_t)v23 + *(void *)(a1 + 176);
  *v5 |= 1u;
  uint64_t v25 = *v20;
  *uint64_t v23 = 0;
  *(void *)(a1 + 160) = v23 + 8;
  *(void *)(a1 + 16624) |= 0x8000000000uLL;
  *(void *)(*(void *)(a1 + 1936) + 848) = v24;
  *(void *)(a1 + 11968) = *(void *)(*(void *)(a1 + 40) + 224) + v25;
  *(_DWORD *)(a1 + 10884) = 2;
  *(_DWORD *)(a1 + 11144) = 2;
  *(_DWORD *)(a1 + 11404) = v24 >> 8;
  *a4 = v23;
  long long v31 = xmmword_242EA7FB0;
  uint64_t v32 = 1;
  long long v29 = xmmword_242EA7FC0;
  uint64_t v30 = 1;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(a1, a2, (int *)&v31, &v29);
  uint64_t v26 = a1 + 16;
  if (((1 << a2) & 0x3B39E0480) != 0 && !*(void *)(v26 + 32 * a2 + 48)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
  }
  *a5 = *(void *)(v26 + 32 * a2 + 48) - 40;
  if (*(_DWORD *)(a1 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, a2);
  }
  if (v13)
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v13);
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 1920) = a2;
  *(_WORD *)(a1 + 1889) = *(unsigned __int8 *)(*(void *)(a2 + 16) + 784);
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1616), (unsigned int *)(a2 + 224));
  uint64_t v3 = **(void **)(a1 + 1920);
  if (v3)
  {
    unint64_t v4 = *(void *)(v3 + 56);
    uint64_t v5 = *(void *)(v3 + 64);
    int v6 = *(_DWORD *)(v3 + 72);
    *(void *)(a1 + 16024) = v4;
    *(void *)(a1 + 16544) = v5;
    uint64_t v7 = *(void *)(a1 + 1936);
    *(void *)(v7 + 1032) = v4;
    *(void *)(v7 + 496) = v5;
    *(_DWORD *)(a1 + 10976) = v6;
    *(_DWORD *)(a1 + 11236) = v6;
    *(_DWORD *)(a1 + 11496) = v4 >> 8;
    if (*(unsigned char *)(v3 + 80))
    {
      *(void *)(a1 + 12152) = *(void *)(v3 + 48);
      *(void *)(a1 + 16624) |= 0x4000000000000000uLL;
      *(_DWORD *)(a1 + 16656) |= 1u;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 1896);
    *(void *)(a1 + 16024) = v8;
    *(void *)(a1 + 16544) = 0;
    uint64_t v9 = *(void *)(a1 + 1936);
    *(void *)(v9 + 1032) = v8;
    *(void *)(v9 + 496) = 0;
    *(_DWORD *)(a1 + 10976) = 0;
    *(_DWORD *)(a1 + 11236) = 0;
    *(_DWORD *)(a1 + 11496) = *(void *)(a1 + 1896) >> 8;
  }
  uint64_t v10 = *(void *)(a1 + 1920);
  if ((*(unsigned char *)(*(void *)(v10 + 16) + 1948) & 0x20) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7880);
    if (v11)
    {
      uint64_t v12 = v11 + (int)*MEMORY[0x263F4B188];
      unint64_t v13 = *(void *)(v12 + 8);
      uint64_t v14 = *(void *)(v12 + 24);
      int v15 = *(_DWORD *)(v12 + 16);
      *(void *)(a1 + 15824) = v13;
      *(void *)(a1 + 16344) = v14;
      uint64_t v16 = *(void *)(a1 + 1936);
      *(void *)(v16 + 832) = v13;
      *(void *)(v16 + 296) = v14;
      *(_DWORD *)(a1 + 10876) = v15;
      *(_DWORD *)(a1 + 11136) = v15;
      *(_DWORD *)(a1 + 11396) = v13 >> 8;
      *(void *)(a1 + 11952) = v12;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(a1 + 1592), v11, 0, 0x25u);
      *(void *)(a1 + 16624) |= 0x2000000000uLL;
      *(_DWORD *)(a1 + 16656) |= 1u;
      if (*(void *)(a1 + 1480)) {
        MTLResourceListAddResource();
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 1896);
      *(void *)(a1 + 15824) = v17;
      *(void *)(a1 + 16344) = 0;
      uint64_t v18 = *(void *)(a1 + 1936);
      *(void *)(v18 + 832) = v17;
      *(void *)(v18 + 296) = 0;
      *(_DWORD *)(a1 + 10876) = 0;
      *(_DWORD *)(a1 + 11136) = 0;
      *(_DWORD *)(a1 + 11396) = *(void *)(a1 + 1896) >> 8;
      *(void *)(a1 + 11952) = 0;
    }
    uint64_t v10 = *(void *)(a1 + 1920);
  }
  if (*(unsigned char *)(v10 + 25))
  {
    uint64_t v19 = *(void *)(a1 + 1896);
    *(void *)(a1 + 1896) = 0;
    uint64_t v20 = *(void *)(v10 + 128);
    if (v20)
    {
      unint64_t v21 = *(void *)(v20 + 56);
      uint64_t v22 = *(void *)(v20 + 64);
      int v23 = *(_DWORD *)(v20 + 72);
      *(void *)(a1 + 15976) = v21;
      *(void *)(a1 + 16496) = v22;
      uint64_t v24 = *(void *)(a1 + 1936);
      *(void *)(v24 + 984) = v21;
      *(void *)(v24 + 448) = v22;
      *(_DWORD *)(a1 + 10952) = v23;
      *(_DWORD *)(a1 + 11212) = v23;
      *(_DWORD *)(a1 + 11472) = v21 >> 8;
      if (*(unsigned char *)(v20 + 80))
      {
        *(void *)(a1 + 12104) = *(void *)(v20 + 48);
        *(void *)(a1 + 16624) |= 0x100000000000000uLL;
        *(_DWORD *)(a1 + 16656) |= 1u;
      }
    }
    else
    {
      *(void *)(a1 + 15976) = 0;
      *(void *)(a1 + 16496) = 0;
      uint64_t v25 = *(void *)(a1 + 1936);
      *(void *)(v25 + 984) = 0;
      *(void *)(v25 + 448) = 0;
      *(_DWORD *)(a1 + 10952) = 0;
      *(_DWORD *)(a1 + 11212) = 0;
      *(_DWORD *)(a1 + 11472) = *(void *)(a1 + 1896) >> 8;
    }
    uint64_t v26 = *(void *)(*(void *)(a1 + 1920) + 144);
    if (v26)
    {
      unint64_t v27 = *(void *)(v26 + 56);
      uint64_t v28 = *(void *)(v26 + 64);
      int v29 = *(_DWORD *)(v26 + 72);
      *(void *)(a1 + 15992) = v27;
      *(void *)(a1 + 16512) = v28;
      uint64_t v30 = *(void *)(a1 + 1936);
      *(void *)(v30 + 1000) = v27;
      *(void *)(v30 + 464) = v28;
      *(_DWORD *)(a1 + 10960) = v29;
      *(_DWORD *)(a1 + 11220) = v29;
      *(_DWORD *)(a1 + 11480) = v27 >> 8;
      if (*(unsigned char *)(v26 + 80))
      {
        *(void *)(a1 + 12120) = *(void *)(v26 + 48);
        *(void *)(a1 + 16624) |= 0x400000000000000uLL;
        *(_DWORD *)(a1 + 16656) |= 1u;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a1 + 1896);
      *(void *)(a1 + 15992) = v31;
      *(void *)(a1 + 16512) = 0;
      uint64_t v32 = *(void *)(a1 + 1936);
      *(void *)(v32 + 1000) = v31;
      *(void *)(v32 + 464) = 0;
      *(_DWORD *)(a1 + 10960) = 0;
      *(_DWORD *)(a1 + 11220) = 0;
      *(_DWORD *)(a1 + 11480) = *(void *)(a1 + 1896) >> 8;
    }
    *(void *)(a1 + 1896) = v19;
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(uint64_t a1, uint64_t a2, int *a3, void *a4)
{
  if (a4[1] * *a4 * a4[2] > (unint64_t)*(unsigned int *)(*(void *)(a1 + 1920) + 440)) {
    return;
  }
  unsigned int v6 = a2;
  if (*(unsigned char *)(a1 + 1889)) {
    uint64_t v8 = (_DWORD *)AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, a2, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7928));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v10 = v9 + 24;
  if ((unint64_t)(v9 + 24) <= *(void *)(a1 + 152))
  {
LABEL_5:
    *(void *)(a1 + 168) = v10;
    goto LABEL_6;
  }
  int v32 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v9 = *(void *)(a1 + 160);
  if (v32)
  {
    uint64_t v10 = v9 + 24;
    if ((unint64_t)(v9 + 24) > *(void *)(a1 + 152)) {
      goto LABEL_21;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v11 = *(void *)(a1 + 176) + v9;
  *(void *)(a1 + 160) = v9 + 24;
  int v12 = *a3;
  int v13 = a3[2];
  int v14 = a3[4];
  *(_DWORD *)uint64_t v9 = *a3;
  *(_DWORD *)(v9 + 4) = v13;
  *(_DWORD *)(v9 + 8) = v14;
  *(void *)(a1 + 15808) = v11;
  uint64_t v15 = *(void *)(a1 + 1936);
  *(void *)(v15 + 816) = v11;
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 11936) = v16;
  *(void *)(a1 + 16624) |= 0x800000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  v11 += 12;
  *(void *)(v9 + 12) = 0x100000001;
  *(_DWORD *)(v9 + 20) = 1;
  *(void *)(a1 + 15816) = v11;
  *(void *)(v15 + 824) = v11;
  *(void *)(a1 + 11944) = v16;
  *(void *)(a1 + 16624) |= 0x1000000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  LODWORD(v15) = *((_DWORD *)a4 + 4);
  *(_DWORD *)(a1 + 1972) = *a4;
  *(_DWORD *)(a1 + 1976) = v18;
  *(_DWORD *)(a1 + 1980) = v15;
  unsigned __int16 v19 = v18 * v17;
  *(_WORD *)(a1 + 1984) = v15 * v19;
  *(_WORD *)(a1 + 1986) = v19;
  if (v19 == 1)
  {
    __int16 v20 = 0;
    LOWORD(v21) = -1;
  }
  else
  {
    unsigned int v22 = v19;
    int v23 = v19 - 1;
    unsigned int v24 = __clz((unsigned __int16)(v19 - 1)) - 16;
    if ((_WORD)v22 == 1) {
      LOWORD(v24) = 16;
    }
    char v25 = 16 - v24;
    __int16 v20 = 15 - v24;
    unsigned int v21 = ((0x8000 << v25) + v23) / v22 - 1;
  }
  *(_WORD *)(a1 + 1988) = v20;
  *(_WORD *)(a1 + 1990) = v21;
  if ((unsigned __int16)v17 == 1)
  {
    __int16 v26 = 0;
    LOWORD(v27) = -1;
  }
  else
  {
    unsigned int v28 = (unsigned __int16)v17;
    int v29 = (unsigned __int16)v17 - 1;
    unsigned int v30 = __clz((unsigned __int16)(v17 - 1)) - 16;
    if ((_WORD)v28 == 1) {
      LOWORD(v30) = 16;
    }
    char v31 = 16 - v30;
    __int16 v26 = 15 - v30;
    unsigned int v27 = ((0x8000 << v31) + v29) / v28 - 1;
  }
  *(_WORD *)(a1 + 1992) = v26;
  *(_WORD *)(a1 + 1994) = v27;
  *(_DWORD *)(a1 + 1996) = v12;
  *(_DWORD *)(a1 + 2000) = v13;
  *(_DWORD *)(a1 + 2004) = v14;
  *(void *)(a1 + 1960) = 0;
  *(_DWORD *)(a1 + 1968) = 0;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(a1, v6, 0, *(void *)(a1 + 1920), 3);
  if (*(unsigned char *)(a1 + 1889))
  {
    long long v33 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
    uint64_t v34 = *(void *)(a1 + 224);
    uint64_t v35 = v34 + 39;
    if ((unint64_t)(v34 + 39) <= *(void *)(a1 + 216)) {
      goto LABEL_23;
    }
    long long v41 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
    int v40 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
    uint64_t v34 = *(void *)(a1 + 224);
    if (!v40)
    {
      long long v33 = v41;
      goto LABEL_24;
    }
    uint64_t v35 = v34 + 39;
    long long v33 = v41;
    if ((unint64_t)(v34 + 39) <= *(void *)(a1 + 216))
    {
LABEL_23:
      *(void *)(a1 + 232) = v35;
LABEL_24:
      unint64_t v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      int v37 = v36 + *(_DWORD *)(a1 + 240);
      *(void *)(a1 + 224) = v36 + 32;
      *(void *)unint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 1920) + 16) + 2432);
      *(_OWORD *)(v36 + 8) = v33;
      *uint64_t v8 = v37;
      int v38 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v39 = &v38[*(void *)(a1 + 176)];
      *(void *)(a1 + 160) = v38 + 280;
      memcpy(v38, (const void *)(*(void *)(a1 + 1936) + 536), 0x118uLL);
      *(void *)(v36 + 24) = v39;
      return;
    }
LABEL_21:
    abort();
  }
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 160);
  uint64_t v7 = v6 + 4;
  if ((unint64_t)(v6 + 4) <= *(void *)(a1 + 152))
  {
LABEL_2:
    *(void *)(a1 + 168) = v7;
    goto LABEL_3;
  }
  int v12 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v6 = *(void *)(a1 + 160);
  if (v12)
  {
    uint64_t v7 = v6 + 4;
    if ((unint64_t)(v6 + 4) > *(void *)(a1 + 152)) {
      abort();
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a1 + 176) + v6;
  *(void *)(a1 + 160) = v6 + 4;
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 15856) = v8;
  *(void *)(*(void *)(a1 + 1936) + 864) = v8;
  *(void *)(a1 + 11984) = v9;
  *(void *)(a1 + 16624) |= 0x20000000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  uint64_t v10 = *(void *)(a1 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, a3);
  int64x2_t v15 = vdupq_n_s64(1uLL);
  uint64_t v16 = 1;
  int64x2_t v13 = v15;
  uint64_t v14 = 1;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(a1, a2, v15.i64, v13.i32);
  if (*(_DWORD *)(a1 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, a2);
  }
  if (v10) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v10);
  }
  return v6;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = a1 + 16656;
  int v101 = a5;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::prepareForEnqueue(a1, 0);
  unsigned int v93 = a2;
  if (*(unsigned char *)(v9 + 616)) {
    uint64_t v10 = 32;
  }
  else {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::HAL200::ComputePipeline const*,unsigned int,unsigned long long *)::brk_handler_end_of_shader_alloc = 0;
  }
  if (AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::HAL200::ComputePipeline const*,unsigned int,unsigned long long *)::brk_handler_end_of_shader_alloc)
  {
    {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::HAL200::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space = 0;
    }
    if (AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::HAL200::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space) {
      *(void *)(*(void *)(a1 + 1912) + 168) = (*(void *)(v11 + 1200)
    }
                                                   - AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(eAGXDataBufferPools,unsigned long long,AGX::HAL200::ComputePipeline const*,unsigned int,unsigned long long *)::per_shader_brk_space
                                                   + *(void *)(v11 + 1424)
                                                   + 4095) & 0xFFFFFFFFFFFFF000;
  }
  int v12 = 4 * *(_DWORD *)(v11 + 3376);
  *(_DWORD *)(v9 + 224) = v12;
  if (*(_DWORD *)(v11 + 3380))
  {
    unint64_t v13 = 0;
    uint64_t v14 = v11 + 3384;
    do
    {
      *(_DWORD *)(a1 + 4 * *(unsigned int *)(v14 + 4 * v13) + 10448) = v12 | 0x80000000;
      int v12 = *(_DWORD *)(v9 + 224) + *(_DWORD *)(a1 + 4 * *(unsigned int *)(v14 + 4 * v13) + 11512);
      *(_DWORD *)(v9 + 224) = v12;
      ++v13;
    }
    while (v13 < *(unsigned int *)(v11 + 3380));
  }
  if (*(void *)(a4 + 344)) {
    *(_DWORD *)(v9 + 224) = v12
  }
                          + *(_DWORD *)(a1 + 1972)
                          * *(_DWORD *)(a4 + 344)
                          * *(_DWORD *)(a1 + 1976)
                          * *(_DWORD *)(a1 + 1980)
                          + ((unsigned __int16)*(_DWORD *)(*(void *)(a4 + 16) + 3532) >> 5) * *(_DWORD *)(a4 + 348);
  if (!a3)
  {
    uint64_t v28 = *(void *)(a4 + 16);
    if (*(unsigned char *)(v28 + 3552))
    {
      if (!*(unsigned char *)(a4 + 330) && !*(_DWORD *)(v28 + 3380) && !*(_DWORD *)(v28 + 3376)) {
        AGX::ComputeUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::directTGSizeOptimization(a1 + 1720, v11, a1 + 1944, &v101);
      }
    }
  }
  int64x2_t v15 = *(_OWORD **)(a1 + 1928);
  if ((_OWORD *)v11 == v15) {
    goto LABEL_37;
  }
  if (v15)
  {
    int8x16_t v16 = *((int8x16_t *)v15 + 66);
    int8x16_t v18 = *(int8x16_t *)((char *)v15 + 1944);
    int8x16_t v17 = *(int8x16_t *)((char *)v15 + 1960);
    int8x16_t v19 = *((int8x16_t *)v15 + 67);
  }
  else
  {
    int8x16_t v19 = 0uLL;
    int8x16_t v17 = 0uLL;
    int8x16_t v16 = 0uLL;
    int8x16_t v18 = 0uLL;
  }
  *(void *)(a1 + 1928) = v11;
  int8x16_t v20 = vorrq_s8(vbicq_s8(*(int8x16_t *)(v11 + 1056), v16), vbicq_s8(*(int8x16_t *)(v11 + 1944), v18));
  if (*(_OWORD *)&v20 != 0)
  {
    *(int8x16_t *)(a1 + 16624) = vorrq_s8(*(int8x16_t *)(a1 + 16624), v20);
    *(_DWORD *)v9 |= 1u;
  }
  int8x16_t v21 = vorrq_s8(vbicq_s8(*(int8x16_t *)(v11 + 1072), v19), vbicq_s8(*(int8x16_t *)(v11 + 1960), v17));
  if (*(_OWORD *)&v21 != 0)
  {
    *(int8x16_t *)(a1 + 16640) = vorrq_s8(*(int8x16_t *)(a1 + 16640), v21);
    *(_DWORD *)v9 |= 2u;
  }
  AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(*(void *)(a1 + 1920));
  uint64_t v22 = *(void *)(a1 + 1920);
  unsigned int v23 = *(_DWORD *)(v22 + 212) + *(_DWORD *)(v22 + 180);
  uint64_t v24 = *(void *)(v22 + 16);
  unsigned int v25 = *(_DWORD *)(v24 + 1000);
  int v26 = *(_DWORD *)(v22 + 192);
  if (*(_DWORD *)(a1 + 2000) * *(_DWORD *)(a1 + 1996) * *(_DWORD *)(a1 + 2004)) {
    int v27 = *(_DWORD *)(a1 + 1976) * *(_DWORD *)(a1 + 1972) * *(_DWORD *)(a1 + 1980);
  }
  else {
    int v27 = 0;
  }
  unsigned int v29 = (*(_DWORD *)(v24 + 3548) + 3) >> 2;
  unsigned int v30 = *(_DWORD *)(a1 + 1744);
  int v31 = *(_DWORD *)(a1 + 1736);
  int v32 = *(_DWORD *)(a1 + 1740);
  if (v30 <= 1) {
    unsigned int v30 = 1;
  }
  int v33 = 4 * v30 * v29;
  if (v33 * v31 * v32) {
    int v34 = v33 * (1 << -(char)__clz(v31 - 1) << -(char)__clz(v32 - 1));
  }
  else {
    int v34 = 0;
  }
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(a1 + 16760, v23, v25, v26, *(_DWORD *)(v9 + 224), v34, v27))
  {
    *(void *)(a1 + 17256) |= 0x200000000000uLL;
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(a1 + 16760, (__n128 *)(*(void *)(a1 + 1912) + 320), 0);
    if (!v23) {
      goto LABEL_37;
    }
LABEL_117:
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    goto LABEL_37;
  }
  if (v23) {
    goto LABEL_117;
  }
LABEL_37:
  int v35 = *(_DWORD *)v9;
  if ((*(_DWORD *)v9 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v36 = *(void *)(a1 + 1920);
  if (*(unsigned char *)(v36 + 24))
  {
    uint64_t v37 = v10;
    if (*(void *)(v36 + 144)) {
      unint64_t v38 = ((unint64_t)(*(void *)(v36 + 128) != 0) << 56) | 0x400000000000000;
    }
    else {
      unint64_t v38 = (unint64_t)(*(void *)(v36 + 128) != 0) << 56;
    }
    if (*(void *)v36) {
      uint64_t v39 = v38 | 0x4000000000000000;
    }
    else {
      uint64_t v39 = v38;
    }
  }
  else
  {
    uint64_t v37 = v10;
    uint64_t v39 = 0;
  }
  unint64_t v40 = *(void *)(a1 + 16624) & *(void *)(v11 + 1944) & ~v39;
  unint64_t v99 = *(void *)(a1 + 16632) & *(void *)(v11 + 1952);
  unint64_t v100 = v40;
  long long v98 = *(_OWORD *)(v11 + 1056);
  while (1)
  {
    if (v40)
    {
      unsigned int v41 = __clz(__rbit64(v40));
      uint64_t v42 = &v100;
      unsigned int v43 = v41;
      goto LABEL_48;
    }
    unint64_t v40 = v99;
    if (!v99) {
      break;
    }
    unsigned int v41 = __clz(__rbit64(v99));
    unsigned int v43 = v41 | 0x40;
    uint64_t v42 = &v99;
LABEL_48:
    *uint64_t v42 = v40 & ~(1 << v41);
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindBufferResourceToCommand(a1, v43, (*(void *)((unint64_t)&v98 | (8 * (v43 > 0x3F))) >> v43) & 1);
    unint64_t v40 = v100;
  }
  int v35 = *(_DWORD *)v9;
  uint64_t v10 = v37;
LABEL_53:
  uint64_t v44 = v10;
  if ((v35 & 2) != 0)
  {
    uint64_t v91 = v10;
    uint64_t v94 = v10;
    uint64_t v96 = a3;
    unint64_t v45 = *(void *)(v11 + 1960) & *(void *)(a1 + 9184) & *(void *)(a1 + 16640);
    unint64_t v99 = *(void *)(v11 + 1968) & *(void *)(a1 + 9192) & *(void *)(a1 + 16648);
    unint64_t v100 = v45;
    uint64_t v46 = *(void *)(v11 + 1072);
    uint64_t v47 = *(void *)(v11 + 1080);
    *(void *)&long long v98 = v46;
    *((void *)&v98 + 1) = v47;
    uint64_t v48 = *(void *)(a1 + 9200);
    uint64_t v49 = *(void *)(a1 + 9208);
    while (1)
    {
      if (v45)
      {
        unsigned int v50 = __clz(__rbit64(v45));
        int v51 = &v100;
        unsigned int v52 = v50;
      }
      else
      {
        unint64_t v45 = v99;
        if (!v99)
        {
          uint64_t v53 = *(void *)(a1 + 1912);
          uint64_t v54 = (*(unsigned char *)(v53 + 458) | ((v48 & v46 | v47 & v49) != 0));
          *(unsigned char *)(v53 + 458) = v54;
          *(unsigned char *)(v53 + 459) |= v54;
          uint64_t v10 = v94;
          a3 = v96;
          uint64_t v44 = v91;
          break;
        }
        unsigned int v50 = __clz(__rbit64(v99));
        unsigned int v52 = v50 | 0x40;
        int v51 = &v99;
      }
      *int v51 = v45 & ~(1 << v50);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::bindTextureResourceToCommand(a1, v52, (*((void *)&v98 + (v52 > 0x3F)) >> v52) & 1);
      unint64_t v45 = v100;
    }
  }
  *(_DWORD *)(a1 + 16656) = 0;
  *(_OWORD *)(a1 + 16624) = 0u;
  *(_OWORD *)(a1 + 16640) = 0u;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(a1, v44, a3 != 0);
  if (!*(void *)(*(void *)(a1 + 1496) + 520))
  {
    if (*(void *)(a1 + 17152)
      || (AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::restartComputePass(a1, v93), *(unsigned char *)(v9 + 506) &= ~1u, AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(a1, v44, a3 != 0), !*(void *)(*(void *)(a1 + 1496) + 520)))
    {
      *(unsigned char *)(v9 + 506) |= 2u;
    }
  }
  char v55 = *(unsigned char *)(a1 + 1506);
  if (v55) {
    char v55 = *(unsigned char *)(a4 + 332);
  }
  uint64_t v56 = *(void *)(a1 + 1912);
  char v57 = *(unsigned char *)(v56 + 458) | v55;
  *(unsigned char *)(v56 + 458) = v57;
  *(unsigned char *)(v56 + 459) |= v57;
  int v58 = v101;
  if (v101 != 2
    && !*(unsigned char *)(v11 + 3544)
    && ((*(_DWORD *)(a1 + 1976)
       * *(_DWORD *)(a1 + 1972)
       * *(_DWORD *)(a1 + 1980)) & 0x1F) != 0)
  {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  v59 = (void *)(a1 + 16);
  unsigned int v60 = v44;
  uint64_t v92 = a1 + 16;
  uint64_t v95 = (1 << v44) & 0x3B39E0480;
  uint64_t v61 = a3;
  if (v95)
  {
    v62 = &v59[4 * v10];
    v63 = v62 + 6;
    uint64_t v64 = v62[6];
    if (v64)
    {
      uint64_t v67 = v62[8];
      v66 = v62 + 8;
      uint64_t v65 = v67;
      goto LABEL_71;
    }
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
    uint64_t v64 = *v63;
    uint64_t v89 = v62[8];
    v66 = v62 + 8;
    uint64_t v97 = v89 + *v63;
    if (!*v63)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v92);
      uint64_t v64 = *v63;
    }
    v59 = (void *)(a1 + 16);
  }
  else
  {
    v68 = &v59[4 * v10];
    uint64_t v69 = v68[6];
    v63 = v68 + 6;
    uint64_t v64 = v69;
    v66 = v63 + 2;
    uint64_t v65 = v63[2];
LABEL_71:
    uint64_t v97 = v65 + v64;
  }
  AGX::ComputeUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitComputeProgramVariantAndArguments((char ***)(a1 + 1720), v60, v59, v11, *(void **)(a1 + 1936), a1 + 1944, *(_DWORD *)(v9 + 224), v61, v58, v90, *(_WORD *)(v9 + 504), (_DWORD *)(a1 + 1524));
  if (*(_DWORD *)*MEMORY[0x263F4B1E8] && *(unsigned char *)(v11 + 1044) && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  ++*(_DWORD *)(v9 + 260);
  if (*(unsigned char *)(v9 + 616))
  {
    uint64_t v70 = *v63;
    if (v95 && !v70)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v92);
      uint64_t v70 = *v63;
    }
    uint64_t v71 = *v66 - v97 + v70;
    v72 = *(char **)(a1 + 17288);
    unint64_t v73 = *(void *)(a1 + 17296);
    if ((unint64_t)v72 >= v73)
    {
      v75 = *(char **)(a1 + 17280);
      uint64_t v76 = (v72 - v75) >> 5;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 59) {
        abort();
      }
      uint64_t v78 = v73 - (void)v75;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79)
      {
        if (v79 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v80 = (char *)operator new(32 * v79);
      }
      else
      {
        v80 = 0;
      }
      v81 = &v80[32 * v76];
      *(void *)v81 = v64;
      *((void *)v81 + 1) = v97;
      *((void *)v81 + 2) = v71;
      *((_WORD *)v81 + 12) = 0;
      v74 = v81 + 32;
      if (v72 != v75)
      {
        do
        {
          long long v82 = *((_OWORD *)v72 - 2);
          *(_OWORD *)(v81 - 22) = *(_OWORD *)(v72 - 22);
          *((_OWORD *)v81 - 2) = v82;
          v81 -= 32;
          v72 -= 32;
        }
        while (v72 != v75);
        v72 = *(char **)(a1 + 17280);
      }
      *(void *)(a1 + 17280) = v81;
      *(void *)(a1 + 17288) = v74;
      *(void *)(a1 + 17296) = &v80[32 * v79];
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *(void *)v72 = v64;
      *((void *)v72 + 1) = v97;
      *((void *)v72 + 2) = v71;
      v74 = v72 + 32;
      *((_WORD *)v72 + 12) = 0;
    }
    *(void *)(a1 + 17288) = v74;
    uint64_t v83 = *(void *)(a1 + 17312);
    if (*(_DWORD *)(v83 - 64) == -1) {
      *(_DWORD *)(v83 - 64) = (((unint64_t)v74 - *(void *)(a1 + 17280)) >> 5) - 1;
    }
    ++*(_DWORD *)(v83 - 60);
  }
  if (!*(_DWORD *)(a1 + 1880))
  {
    if (*(void *)(a1 + 1824))
    {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, v93);
    }
    else if (*(unsigned char *)(v9 + 616))
    {
      uint64_t v84 = *(void *)(a1 + 17288);
      if (*(void *)(a1 + 17280) != v84)
      {
        *(unsigned char *)(v84 - 8) = 1;
        *(unsigned char *)(v84 - 7) = *(unsigned char *)(*(void *)(a1 + 1912) + 458);
      }
    }
    else if (v93 - 22 <= 3)
    {
      if (*(unsigned char *)(*(void *)(a1 + 1912) + 458)) {
        int v85 = 1610618208;
      }
      else {
        int v85 = 1610613088;
      }
      uint64_t v86 = v92 + 32 * v93;
      v87 = *(int **)(v86 + 48);
      int *v87 = v85;
      *(void *)(v86 + 48) = v87 + 1;
      unsigned int v88 = *(_DWORD *)(v9 + 260);
      if (*(_DWORD *)(v9 + 256) < v88) {
        *(_DWORD *)(v9 + 256) = v88;
      }
      *(_DWORD *)(v9 + 260) = 0;
    }
    *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0;
  }
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::reserveEnqueueDatabufferSpace(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (unsigned __int8 *)(a1 + 16677);
  uint64_t v7 = a1 + 16;
  int v8 = *(_DWORD *)(a1 + 16688);
  uint64_t v9 = *(void *)(*(void *)(a1 + 1920) + 16);
  uint64_t v10 = *(unsigned int *)(v9 + 608);
  uint64_t v11 = *(void *)(a1 + 384);
  if (!v11)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0)) {
      goto LABEL_24;
    }
    uint64_t v11 = *(void *)(a1 + 384);
  }
  uint64_t v12 = v10 + 31;
  unint64_t v13 = v11 + v12;
  if (v13 <= *(void *)(a1 + 376))
  {
LABEL_3:
    *(void *)(a1 + 392) = v13;
    goto LABEL_4;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v7, 10, 0))
  {
    unint64_t v13 = *(void *)(a1 + 384) + v12;
    if (v13 > *(void *)(a1 + 376)) {
      goto LABEL_24;
    }
    goto LABEL_3;
  }
LABEL_4:
  uint64_t v14 = (*(_DWORD *)(*(void *)(v9 + 1936) + 8) - **(_DWORD **)(v9 + 1936)) + 63;
  unint64_t v15 = *(void *)(a1 + 224) + v14;
  if (v15 <= *(void *)(a1 + 216))
  {
LABEL_5:
    *(void *)(a1 + 232) = v15;
    goto LABEL_6;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v7, 5, 0))
  {
    unint64_t v15 = *(void *)(a1 + 224) + v14;
    if (v15 > *(void *)(a1 + 216)) {
      goto LABEL_24;
    }
    goto LABEL_5;
  }
LABEL_6:
  if (a3) {
    uint64_t v16 = 36;
  }
  else {
    uint64_t v16 = 40;
  }
  int v17 = *v6;
  int v18 = *(_DWORD *)(v6 + 15);
  int v32 = 0;
  uint64_t result = agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(a2, v7, v16, v17, v8 != 0, v18, &v32);
  if (v6[595])
  {
    BOOL v20 = *(_DWORD *)(v6 + 11) != 0;
    int v21 = *(_DWORD *)(v6 + 15);
    int v32 = 1;
    uint64_t result = agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, v7, v16 + 4, 0, v20, v21, &v32);
    if (!*(_DWORD *)(a1 + 1880))
    {
      uint64_t v22 = *(void *)(a1 + 17312);
      int v23 = *(_DWORD *)(v22 - 32);
      int v24 = *(_DWORD *)(v22 - 36) + 1;
      *(_DWORD *)(v22 - 36) = v24;
      if (*(_DWORD *)(a1 + 17332) < (v23 + v24))
      {
        BOOL v25 = *(_DWORD *)(v6 + 11) != 0;
        int v26 = *(_DWORD *)(v6 + 15);
        int v32 = 1;
        uint64_t result = agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(33, v7, 24, 0, v25, v26, &v32);
        ++*(_DWORD *)(a1 + 17332);
      }
    }
  }
  else if (!*(_DWORD *)(a1 + 1880))
  {
    int v27 = *v6;
    int v28 = *(_DWORD *)(v6 + 15);
    int v32 = 1;
    uint64_t result = agxaReserveCDMTokenSpace<AGX::HAL200::Encoders,AGX::HAL200::DataBufferAllocator>(a2, v7, 4, v27, v8 != 0, v28, &v32);
  }
  if (*(unsigned char *)(a1 + 1889))
  {
    uint64_t v29 = *(void *)(a1 + 168);
    unint64_t v30 = v29 + 287;
    if ((unint64_t)(v29 + 287) <= *(void *)(a1 + 152)) {
      goto LABEL_26;
    }
    uint64_t v31 = *(void *)(a1 + 160);
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v7, 3, 0);
    if (!result) {
      return result;
    }
    unint64_t v30 = *(void *)(a1 + 160) + v29 - v31 + 287;
    if (v30 <= *(void *)(a1 + 152))
    {
LABEL_26:
      *(void *)(a1 + 168) = v30;
      return result;
    }
LABEL_24:
    abort();
  }
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(uint64_t a1, unsigned int a2, uint64_t *a3, int *a4)
{
  int v8 = *(int **)(a1 + 160);
  uint64_t v9 = v8 + 6;
  if ((unint64_t)(v8 + 6) <= *(void *)(a1 + 152))
  {
LABEL_2:
    *(void *)(a1 + 168) = v9;
    goto LABEL_3;
  }
  int v30 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  int v8 = *(int **)(a1 + 160);
  if (v30)
  {
    uint64_t v9 = v8 + 6;
    if ((unint64_t)(v8 + 6) > *(void *)(a1 + 152)) {
      abort();
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v10 = (char *)v8 + *(void *)(a1 + 176);
  *(void *)(a1 + 160) = v8 + 6;
  int v11 = *a4;
  int v12 = a4[2];
  int v13 = a4[4];
  *int v8 = *a4;
  v8[1] = v12;
  v8[2] = v13;
  *(void *)(a1 + 15808) = v10;
  uint64_t v14 = *(void *)(a1 + 1936);
  *(void *)(v14 + 816) = v10;
  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 11936) = v15;
  *(void *)(a1 + 16624) |= 0x800000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  uint64_t v16 = v10 + 12;
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  int v19 = *((_DWORD *)a3 + 4);
  v8[3] = *a3;
  v8[4] = v18;
  v8[5] = v19;
  *(void *)(a1 + 15816) = v16;
  *(void *)(v14 + 824) = v16;
  *(void *)(a1 + 11944) = v15;
  *(void *)(a1 + 16624) |= 0x1000000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  *(_DWORD *)(a1 + 1972) = v17;
  *(_DWORD *)(a1 + 1976) = v18;
  *(_DWORD *)(a1 + 1980) = v19;
  *(_WORD *)(a1 + 1984) = v19 * v18 * v17;
  *(_WORD *)(a1 + 1986) = v18 * v17;
  if ((unsigned __int16)(v18 * v17) == 1)
  {
    __int16 v20 = 0;
    LOWORD(v21) = -1;
  }
  else
  {
    unsigned int v22 = (unsigned __int16)(v18 * v17);
    unsigned int v23 = __clz((unsigned __int16)(v18 * v17 - 1)) - 16;
    if ((_WORD)v22 == 1) {
      LOWORD(v23) = 16;
    }
    char v24 = 16 - v23;
    __int16 v20 = 15 - v23;
    unsigned int v21 = ((0x8000 << v24) + (unsigned __int16)(v18 * v17) - 1) / v22 - 1;
  }
  *(_WORD *)(a1 + 1988) = v20;
  *(_WORD *)(a1 + 1990) = v21;
  if ((unsigned __int16)v17 == 1)
  {
    __int16 v25 = 0;
    LOWORD(v26) = -1;
  }
  else
  {
    unsigned int v27 = __clz((unsigned __int16)(v17 - 1)) - 16;
    if ((_WORD)v17 == 1) {
      LOWORD(v27) = 16;
    }
    char v28 = 16 - v27;
    __int16 v25 = 15 - v27;
    unsigned int v26 = ((0x8000 << v28) + (unsigned __int16)v17 - 1) / (unsigned __int16)v17 - 1;
  }
  *(_WORD *)(a1 + 1992) = v25;
  *(_WORD *)(a1 + 1994) = v26;
  *(_DWORD *)(a1 + 1996) = v17 * v11;
  *(_DWORD *)(a1 + 2000) = v18 * v12;
  *(_DWORD *)(a1 + 2004) = v19 * v13;
  *(_DWORD *)(a1 + 1960) = v11;
  *(_DWORD *)(a1 + 1964) = v12;
  *(_DWORD *)(a1 + 1968) = v13;
  uint64_t v29 = *(void *)(a1 + 1920);

  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(a1, a2, 0, v29, 0);
}

void std::deque<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)uint64_t v5 = v8;
      goto LABEL_89;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v33 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v33 = 1;
      }
      if (!(v33 >> 61))
      {
        unint64_t v34 = v33 >> 2;
        uint64_t v35 = 8 * v33;
        uint64_t v36 = (char *)operator new(8 * v33);
        uint64_t v37 = &v36[8 * v34];
        unint64_t v38 = &v36[v35];
        int64_t v40 = v5 - v7;
        BOOL v39 = v5 == v7;
        uint64_t v5 = v37;
        if (!v39)
        {
          uint64_t v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            uint64_t v83 = &v36[8 * v34];
            uint64_t v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              uint64_t v84 = (v41 >> 3) + 1;
              uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v42 = &v37[v85];
              uint64_t v86 = (long long *)(v6 + 3);
              v87 = v83 + 16;
              uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                _OWORD *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v85;
            }
          }
          else
          {
            uint64_t v42 = &v36[8 * v34];
          }
          do
          {
            uint64_t v90 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_81;
      }
LABEL_106:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  uint64_t v17 = *(char **)(a1 + 24);
  __int16 v20 = *(char **)a1;
  int v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    char v24 = operator new(0x1000uLL);
    __int16 v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      unsigned int v43 = v19;
      goto LABEL_87;
    }
    unint64_t v68 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v68 = 1;
    }
    if (v68 >> 61) {
      goto LABEL_106;
    }
    unint64_t v69 = (v68 + 3) >> 2;
    uint64_t v70 = 8 * v68;
    uint64_t v71 = (char *)operator new(8 * v68);
    unsigned int v43 = &v71[8 * v69];
    v72 = &v71[v70];
    unint64_t v73 = v43;
    if (v18 != v19)
    {
      unint64_t v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        uint64_t v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          unint64_t v79 = (long long *)(v19 + 16);
          v80 = v76 + 16;
          uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            _OWORD *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v71;
            *(void *)(a1 + 8) = v43;
            *(void *)(a1 + 16) = v73;
            *(void *)(a1 + 24) = v72;
LABEL_86:
            operator delete(v19);
            unsigned int v43 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v43 - 1) = v25;
            uint64_t v7 = *(char **)(a1 + 8);
            uint64_t v5 = *(char **)(a1 + 16);
            *(void *)(a1 + 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            uint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v92 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v92 = 1;
              }
              if (!(v92 >> 61))
              {
                unint64_t v93 = v92 >> 2;
                uint64_t v94 = 8 * v92;
                uint64_t v36 = (char *)operator new(8 * v92);
                uint64_t v37 = &v36[8 * v93];
                unint64_t v38 = &v36[v94];
                int64_t v95 = v5 - v7;
                BOOL v39 = v5 == v7;
                uint64_t v5 = v37;
                if (!v39)
                {
                  uint64_t v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    long long v98 = &v36[8 * v93];
                    uint64_t v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      uint64_t v99 = (v96 >> 3) + 1;
                      uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v97 = &v37[v100];
                      int v101 = (long long *)(v7 + 16);
                      v102 = v98 + 16;
                      uint64_t v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        _OWORD *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v100;
                    }
                  }
                  else
                  {
                    uint64_t v97 = &v36[8 * v93];
                  }
                  do
                  {
                    uint64_t v105 = *(void *)v7;
                    v7 += 8;
                    *(void *)uint64_t v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_81:
                *(void *)a1 = v36;
                *(void *)(a1 + 8) = v37;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  uint64_t v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_106;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        uint64_t v91 = *(void *)v75;
        v75 += 8;
        *(void *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(void *)a1 = v71;
    *(void *)(a1 + 8) = v43;
    *(void *)(a1 + 16) = v73;
    *(void *)(a1 + 24) = v72;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_106;
  }
  char v28 = (char *)operator new(8 * v27);
  uint64_t v29 = operator new(0x1000uLL);
  int v30 = &v28[8 * v22];
  uint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v44 = 1;
      }
      else {
        unint64_t v44 = v21 >> 2;
      }
      if (v44 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v30 = (char *)operator new(8 * v44);
      uint64_t v31 = &v30[8 * v44];
      operator delete(v28);
      int v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      char v28 = v30;
    }
    else
    {
      unint64_t v32 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v32 = v22 + 1;
      }
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(void *)int v30 = v29;
  unint64_t v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      uint64_t v49 = v30;
      uint64_t v47 = v45;
LABEL_43:
      uint64_t v50 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v49 - 1) = v50;
      uint64_t v46 = v49 - 8;
      unint64_t v45 = v47;
      int v30 = v46;
      if (v18 == *(char **)(a1 + 8)) {
        goto LABEL_38;
      }
    }
    if (v45 < v31)
    {
      uint64_t v51 = (v31 - v45) >> 3;
      if (v51 >= -1) {
        unint64_t v52 = v51 + 1;
      }
      else {
        unint64_t v52 = v51 + 2;
      }
      uint64_t v47 = &v45[8 * (v52 >> 1)];
      uint64_t v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        char v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        char v28 = v30;
      }
      goto LABEL_43;
    }
    if (v31 == v30) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = (v31 - v30) >> 2;
    }
    if (v53 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    char v28 = v54;
    unint64_t v55 = (v53 + 3) >> 2;
    uint64_t v49 = &v54[8 * v55];
    uint64_t v47 = v49;
    int64_t v56 = v45 - v30;
    if (v45 != v30)
    {
      uint64_t v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      int v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        uint64_t v60 = 8 * v55;
        int v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          uint64_t v61 = (v57 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          int v58 = &v49[v62];
          v63 = (long long *)(v30 + 16);
          uint64_t v64 = &v54[v60 + 16];
          uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)uint64_t v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_63;
          }
          v59 = &v30[v62];
        }
      }
      do
      {
        uint64_t v67 = *(void *)v59;
        v59 += 8;
        *(void *)int v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_63:
    uint64_t v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_43;
  }
  uint64_t v46 = v30;
  uint64_t v47 = v30 + 8;
LABEL_38:
  uint64_t v48 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v46;
  *(void *)(a1 + 16) = v47;
  *(void *)(a1 + 24) = v31;
  if (v48)
  {
    operator delete(v48);
  }
}

void sub_242A6A1EC(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithImprovedIndirectBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 16688;
  if (*(unsigned char *)(a1 + 1889)) {
    uint64_t v7 = (_DWORD *)AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, 22, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7928));
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 1920);
  if (*(_DWORD *)(a1 + 1880) == 1 && *(_DWORD *)v6
    || *(unsigned char *)(v6 + 584)
    || (uint64_t v9 = *(void *)(v8 + 16), !*(unsigned char *)(v9 + 3552))
    || *(unsigned char *)(v8 + 330)
    || *(_DWORD *)(v9 + 3380)
    || *(_DWORD *)(v9 + 3376))
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithImprovedIndirectCommon(a1, a2, a3, 0);
    if (*(unsigned char *)(a1 + 1889)) {
      goto LABEL_13;
    }
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeIndirectKernelWithThreadgroupOptimization(a1, a2, a3, 1, v19);
    if (*(unsigned char *)(a1 + 1889))
    {
LABEL_13:
      long long v10 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
      uint64_t v11 = *(void *)(a1 + 224);
      uint64_t v12 = v11 + 39;
      if ((unint64_t)(v11 + 39) > *(void *)(a1 + 216))
      {
        long long v18 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
        int v17 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
        uint64_t v11 = *(void *)(a1 + 224);
        if (!v17)
        {
          long long v10 = v18;
          goto LABEL_15;
        }
        uint64_t v12 = v11 + 39;
        long long v10 = v18;
        if ((unint64_t)(v11 + 39) > *(void *)(a1 + 216)) {
          abort();
        }
      }
      *(void *)(a1 + 232) = v12;
LABEL_15:
      unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
      int v14 = v13 + *(_DWORD *)(a1 + 240);
      *(void *)(a1 + 224) = v13 + 32;
      *(void *)unint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 1920) + 16) + 2432);
      *(_OWORD *)(v13 + 8) = v10;
      *uint64_t v7 = v14;
      uint64_t v15 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
      int64_t v16 = &v15[*(void *)(a1 + 176)];
      *(void *)(a1 + 160) = v15 + 280;
      memcpy(v15, (const void *)(*(void *)(a1 + 1936) + 536), 0x118uLL);
      *(void *)(v13 + 24) = v16;
    }
  }
}

void AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeIndirectKernelWithThreadgroupOptimization(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  long long v10 = (_DWORD *)(a1 + 16688);
  if (!*(_DWORD *)(a1 + 1880))
  {
    uint64_t v26 = 0;
    uint64_t v12 = (unint64_t *)(a1 + 17352);
    uint64_t v11 = (void *)(a1 + 17360);
    unint64_t v13 = &v26;
    goto LABEL_6;
  }
  if (**(_WORD **)(a1 + 17360) == 96)
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
    *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0;
    if (!*v10)
    {
      uint64_t v11 = (void *)(a1 + 17360);
      uint64_t v12 = (unint64_t *)(a1 + 17352);
      unint64_t v13 = (uint64_t *)(a1 + 17368);
LABEL_6:
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::insertIndirectTGOptKernel(a1, 22, v12, v11, v13);
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 1920) + 16);
  uint64_t v15 = *(_WORD **)(a1 + 17360);
  unsigned int v16 = (unsigned __int16)*v15;
  *uint64_t v15 = v16 + 1;
  int v17 = (_WORD *)(*(void *)(a1 + 17352) + 48 * v16);
  uint64_t v18 = a5[1];
  v17[14] = *a5;
  v17[15] = v18;
  v17[16] = a5[2];
  v17[17] = *(_DWORD *)(v14 + 3528);
  v17[18] = *(_DWORD *)(v14 + 3532);
  v17[19] = 96;
  v17[20] = v10[164];
  if (*(void *)(a1 + 1480)) {
    MTLResourceListAddResource();
  }
  int v19 = (int *)MEMORY[0x263F4B188];
  IOGPUResourceListAddResource();
  uint64_t v20 = *(void *)(a1 + 17352) + 48 * v16;
  *(void *)uint64_t v20 = *(void *)(a2 + *v19 + 8) + a3;
  *(unsigned char *)(v20 + 44) = a4;
  uint64_t v21 = *(void *)(a1 + 384);
  if (!v21)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0)) {
      goto LABEL_19;
    }
    uint64_t v21 = *(void *)(a1 + 384);
  }
  uint64_t v22 = v21 + 47;
  if ((unint64_t)(v21 + 47) <= *(void *)(a1 + 376))
  {
LABEL_11:
    *(void *)(a1 + 392) = v22;
    goto LABEL_12;
  }
  int v25 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0);
  uint64_t v21 = *(void *)(a1 + 384);
  if (v25)
  {
    uint64_t v22 = v21 + 47;
    if ((unint64_t)(v21 + 47) <= *(void *)(a1 + 376)) {
      goto LABEL_11;
    }
LABEL_19:
    abort();
  }
LABEL_12:
  unint64_t v23 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v24 = v23 + *(void *)(a1 + 400);
  *(void *)(a1 + 384) = v23 + 32;
  *(void *)(*(void *)(a1 + 17352) + 48 * v16 + 8) = v24;

  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithImprovedIndirectCommon(a1, 0, 0, v24);
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithImprovedIndirectCommon(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a1 + 1960;
  uint64_t v6 = (int *)MEMORY[0x263F4B188];
  if (a2)
  {
    uint64_t v7 = *(void *)(a2 + (int)*MEMORY[0x263F4B188] + 8) + a3;
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeIndirectComputeParameters(a1, a2, a3, 0x23u);
  }
  else
  {
    uint64_t v7 = a4;
    *(void *)(a1 + 16624) |= 0x800000000uLL;
    *(_DWORD *)(a1 + 16656) |= 1u;
    *(void *)(*(void *)(a1 + 1936) + 816) = a4;
    *(void *)(a1 + 11936) = *(void *)(*(void *)(a1 + 40) + 224) + *v6;
    *(_DWORD *)(a1 + 10868) = 24;
    *(_DWORD *)(a1 + 11128) = 24;
    *(_DWORD *)(a1 + 11388) = a4 >> 8;
  }
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = v8 + 12;
  if ((unint64_t)(v8 + 12) <= *(void *)(a1 + 152))
  {
LABEL_5:
    *(void *)(a1 + 168) = v9;
    goto LABEL_6;
  }
  int v12 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v8 = *(void *)(a1 + 160);
  if (v12)
  {
    uint64_t v9 = v8 + 12;
    if ((unint64_t)(v8 + 12) > *(void *)(a1 + 152)) {
      abort();
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 176) + v8;
  *(void *)(a1 + 160) = v8 + 12;
  *(void *)uint64_t v8 = 0x100000001;
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(a1 + 15816) = v10;
  *(void *)(*(void *)(a1 + 1936) + 824) = v10;
  *(void *)(a1 + 11944) = *(void *)(*(void *)(a1 + 40) + 224) + *v6;
  *(void *)(a1 + 16624) |= 0x1000000000uLL;
  *(_DWORD *)(v5 + 14696) |= 1u;
  *(void *)(a1 + 1976) = 0x100000001;
  *(void *)(a1 + 1984) = 0xFFFF000000010001;
  *(_WORD *)(a1 + 1992) = 0;
  *(_WORD *)(a1 + 1994) = -1;
  *(_DWORD *)(a1 + 1996) = 0;
  *(void *)(a1 + 2000) = 0;
  *(_OWORD *)uint64_t v5 = xmmword_242EA7E10;
  uint64_t v11 = *(void *)(a1 + 1920);

  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(a1, 0x16u, v7, v11, 2);
}

float *AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeIndirectComputeParameters(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setBuffer_impl<AGXBuffer>(a1, a2, a3, a4, 0);
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), a2, 1);
  uint64_t v6 = (int *)MEMORY[0x263F4B188];
  uint64_t result = (float *)IOGPUResourceListAddResource();
  if (*(_DWORD *)(a1 + 1880) == 1)
  {
    uint64_t v8 = *(void *)(a1 + 16680);
    if (!v8) {
      operator new();
    }
    unsigned int v9 = *(_DWORD *)(a2 + *v6 + 48);
    int v10 = 1;
    return ResourceTracker<_ResourceTrackerBinding>::addResource((float *)(v8 + 8), (float *)&v10, v9, 1);
  }
  return result;
}

void sub_242A6B398(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithIndirectBuffer(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 1920);
  if (a4[1] * *a4 * a4[2] > (unint64_t)*(unsigned int *)(v4 + 440)) {
    return;
  }
  uint64_t v9 = a1 + 16656;
  if (*(unsigned char *)(a1 + 1889))
  {
    int v10 = (_DWORD *)AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, 22, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7928));
    uint64_t v4 = *(void *)(a1 + 1920);
  }
  else
  {
    int v10 = 0;
  }
  if (*(_DWORD *)(a1 + 1880) == 1 && *(_DWORD *)(v9 + 32)
    || *(unsigned char *)(v9 + 616)
    || (uint64_t v30 = *(void *)(v4 + 16), !*(unsigned char *)(v30 + 3552))
    || *(unsigned char *)(v4 + 330)
    || *(_DWORD *)(v30 + 3380)
    || *(_DWORD *)(v30 + 3376))
  {
    uint64_t v11 = (int *)MEMORY[0x263F4B188];
    uint64_t v12 = *(void *)(a2 + (int)*MEMORY[0x263F4B188] + 8);
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeIndirectComputeParameters(a1, a2, a3, 0x23u);
    unint64_t v13 = *(_DWORD **)(a1 + 160);
    uint64_t v14 = v13 + 3;
    if ((unint64_t)(v13 + 3) > *(void *)(a1 + 152))
    {
      int v38 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
      unint64_t v13 = *(_DWORD **)(a1 + 160);
      if (!v38)
      {
LABEL_9:
        uint64_t v15 = (char *)v13 + *(void *)(a1 + 176);
        *(void *)(a1 + 160) = v13 + 3;
        uint64_t v16 = *a4;
        uint64_t v17 = a4[1];
        int v18 = *((_DWORD *)a4 + 4);
        *unint64_t v13 = *a4;
        v13[1] = v17;
        v13[2] = v18;
        *(void *)(a1 + 15816) = v15;
        *(void *)(*(void *)(a1 + 1936) + 824) = v15;
        *(void *)(a1 + 11944) = *(void *)(*(void *)(a1 + 40) + 224) + *v11;
        *(void *)(a1 + 16624) |= 0x1000000000uLL;
        *(_DWORD *)v9 |= 1u;
        *(_DWORD *)(a1 + 1972) = v16;
        *(_DWORD *)(a1 + 1976) = v17;
        *(_DWORD *)(a1 + 1980) = v18;
        *(_WORD *)(a1 + 1984) = v18 * v17 * v16;
        *(_WORD *)(a1 + 1986) = v17 * v16;
        if ((unsigned __int16)(v17 * v16) == 1)
        {
          __int16 v19 = 0;
          LOWORD(v20) = -1;
        }
        else
        {
          unsigned int v21 = (unsigned __int16)(v17 * v16);
          unsigned int v22 = __clz((unsigned __int16)(v17 * v16 - 1)) - 16;
          if ((_WORD)v21 == 1) {
            LOWORD(v22) = 16;
          }
          char v23 = 16 - v22;
          __int16 v19 = 15 - v22;
          unsigned int v20 = ((0x8000 << v23) + v21 - 1) / v21 - 1;
        }
        *(_WORD *)(a1 + 1988) = v19;
        *(_WORD *)(a1 + 1990) = v20;
        if ((unsigned __int16)v16 == 1)
        {
          __int16 v24 = 0;
          LOWORD(v25) = -1;
        }
        else
        {
          unsigned int v26 = (unsigned __int16)v16;
          int v27 = (unsigned __int16)v16 - 1;
          unsigned int v28 = __clz((unsigned __int16)(v16 - 1)) - 16;
          if ((_WORD)v26 == 1) {
            LOWORD(v28) = 16;
          }
          char v29 = 16 - v28;
          __int16 v24 = 15 - v28;
          unsigned int v25 = ((0x8000 << v29) + v27) / v26 - 1;
        }
        *(_WORD *)(a1 + 1992) = v24;
        *(_WORD *)(a1 + 1994) = v25;
        *(_DWORD *)(a1 + 1996) = 0;
        *(void *)(a1 + 2000) = 0;
        *(void *)(a1 + 1960) = 0;
        *(_DWORD *)(a1 + 1968) = 0;
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(a1, 0x16u, v12 + a3, *(void *)(a1 + 1920), 1);
        if (*(unsigned char *)(a1 + 1889)) {
          goto LABEL_26;
        }
        return;
      }
      uint64_t v14 = v13 + 3;
      if ((unint64_t)(v13 + 3) > *(void *)(a1 + 152)) {
        goto LABEL_32;
      }
    }
    *(void *)(a1 + 168) = v14;
    goto LABEL_9;
  }
  long long v41 = *(_OWORD *)a4;
  uint64_t v42 = a4[2];
  AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeIndirectKernelWithThreadgroupOptimization(a1, a2, a3, 0, &v41);
  if (*(unsigned char *)(a1 + 1889))
  {
LABEL_26:
    long long v31 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
    uint64_t v32 = *(void *)(a1 + 224);
    uint64_t v33 = v32 + 39;
    if ((unint64_t)(v32 + 39) <= *(void *)(a1 + 216)) {
      goto LABEL_27;
    }
    long long v40 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
    int v39 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
    uint64_t v32 = *(void *)(a1 + 224);
    if (!v39)
    {
      long long v31 = v40;
      goto LABEL_28;
    }
    uint64_t v33 = v32 + 39;
    long long v31 = v40;
    if ((unint64_t)(v32 + 39) <= *(void *)(a1 + 216))
    {
LABEL_27:
      *(void *)(a1 + 232) = v33;
LABEL_28:
      unint64_t v34 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
      int v35 = v34 + *(_DWORD *)(a1 + 240);
      *(void *)(a1 + 224) = v34 + 32;
      *(void *)unint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 1920) + 16) + 2432);
      *(_OWORD *)(v34 + 8) = v31;
      *int v10 = v35;
      uint64_t v36 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v37 = &v36[*(void *)(a1 + 176)];
      *(void *)(a1 + 160) = v36 + 280;
      memcpy(v36, (const void *)(*(void *)(a1 + 1936) + 536), 0x118uLL);
      *(void *)(v34 + 24) = v37;
      return;
    }
LABEL_32:
    abort();
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernel(uint64_t a1, long long *a2, long long *a3)
{
  if (*(unsigned char *)(a1 + 1889)) {
    uint64_t v6 = (_DWORD *)AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeGPUGatherOrPatchUpKernel(a1, 22, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7928));
  }
  else {
    uint64_t v6 = 0;
  }
  long long v18 = *a2;
  uint64_t v19 = *((void *)a2 + 2);
  long long v16 = *a3;
  uint64_t v17 = *((void *)a3 + 2);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(a1, 0x16u, (uint64_t *)&v18, (int *)&v16);
  if (*(unsigned char *)(a1 + 1889))
  {
    long long v7 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
    uint64_t v8 = *(void *)(a1 + 224);
    uint64_t v9 = v8 + 39;
    if ((unint64_t)(v8 + 39) > *(void *)(a1 + 216))
    {
      long long v15 = *(_OWORD *)(*(void *)(a1 + 1936) + 1576);
      int v14 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
      uint64_t v8 = *(void *)(a1 + 224);
      if (!v14)
      {
        long long v7 = v15;
        goto LABEL_8;
      }
      uint64_t v9 = v8 + 39;
      long long v7 = v15;
      if ((unint64_t)(v8 + 39) > *(void *)(a1 + 216)) {
        abort();
      }
    }
    *(void *)(a1 + 232) = v9;
LABEL_8:
    unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v11 = v10 + *(_DWORD *)(a1 + 240);
    *(void *)(a1 + 224) = v10 + 32;
    *(void *)unint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 1920) + 16) + 2432);
    *(_OWORD *)(v10 + 8) = v7;
    *uint64_t v6 = v11;
    uint64_t v12 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = &v12[*(void *)(a1 + 176)];
    *(void *)(a1 + 160) = v12 + 280;
    memcpy(v12, (const void *)(*(void *)(a1 + 1936) + 536), 0x118uLL);
    *(void *)(v10 + 24) = v13;
  }
}

void sub_242A6BD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242A6BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setBuffers_impl<AGXBuffer>(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  if (a5 && *(void *)(result + 1480))
  {
    uint64_t v12 = a5;
    unint64_t v13 = a2;
    do
    {
      if (*v13) {
        uint64_t result = MTLResourceListAddResource();
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  unsigned int v38 = a5;
  if (a5)
  {
    uint64_t v14 = a5;
    long long v15 = (int *)MEMORY[0x263F4B188];
    long long v16 = a6;
    unsigned int v17 = a4;
    do
    {
      uint64_t v18 = *v10;
      if (a4 <= 0x22) {
        *(void *)(v11 + 8 * a4 + 15248) = 0;
      }
      uint64_t v19 = (_DWORD *)(v11 + 4 * v17);
      if (v18)
      {
        uint64_t v20 = v18 + *v15;
        unint64_t v21 = *(void *)(v20 + 8);
        uint64_t v22 = *(void *)(v20 + 24);
        LODWORD(v20) = *(_DWORD *)(v20 + 16);
        uint64_t v23 = 8 * v17;
        __int16 v24 = (void *)(v11 + v23);
        v24[1941] = v21;
        v24[2006] = v22;
        uint64_t v25 = *a3;
        unsigned int v26 = (void *)(*(void *)(v11 + 1936) + v23);
        v26[67] = *a3 + v21;
        *unsigned int v26 = v22 + v25;
        v19[2682] = v20;
        v19[2747] = v20;
        v19[2812] = v21 >> 8;
        v24[1457] = v18 + *v15;
        uint64_t result = (uint64_t)AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v11 + 1592), v18, 0, v17);
        if (a6) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(v11 + 1896);
        uint64_t v29 = 8 * v17;
        uint64_t v30 = (void *)(v11 + v29);
        v30[1941] = v28;
        v30[2006] = 0;
        long long v31 = (void *)(*(void *)(v11 + 1936) + v29);
        v31[67] = v28;
        *long long v31 = 0;
        v19[2682] = 0;
        v19[2747] = 0;
        v19[2812] = *(void *)(v11 + 1896) >> 8;
        v30[1457] = 0;
        if (a6)
        {
LABEL_14:
          uint64_t v27 = *v16;
          if (v17 <= 0x22) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      LODWORD(v27) = 0;
      if (v17 <= 0x22) {
LABEL_18:
      }
        v19[2647] = v27;
LABEL_9:
      ++v17;
      ++v16;
      ++a3;
      ++v10;
      --v14;
    }
    while (v14);
  }
  unsigned int v32 = v38 + a4;
  if (v38 + a4 == 128) {
    uint64_t v33 = -1;
  }
  else {
    uint64_t v33 = ~(-1 << (v38 + a4));
  }
  BOOL v34 = v32 >= 0x40;
  if (v32 < 0x40) {
    uint64_t v35 = ~(-1 << (v38 + a4));
  }
  else {
    uint64_t v35 = -1;
  }
  if (!v34) {
    uint64_t v33 = 0;
  }
  uint64_t v36 = -1 << a4;
  if (a4 < 0x40) {
    uint64_t v36 = -1;
  }
  uint64_t v37 = -1 << a4;
  if (a4 >= 0x40) {
    uint64_t v37 = 0;
  }
  *(void *)(v11 + 16624) |= v35 & v37;
  *(void *)(v11 + 16632) |= v33 & v36;
  *(_DWORD *)(v11 + 16656) |= 1u;
  return result;
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setIntersectionFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 296);
    uint64_t v6 = *(unsigned int *)(v5 + 24);
    uint64_t v7 = 8 * a3;
    uint64_t v8 = (void *)(*(void *)(result + 1936) + v7);
    v8[67] = *(int *)(v5 + 160);
    v8[132] = v6;
    *uint64_t v8 = 0;
    uint64_t v9 = (void *)(result + v7);
    v9[1941] = *(void *)(result + 1896);
    v9[2006] = 0;
    unint64_t v10 = (_DWORD *)(result + 4 * a3);
    v10[2682] = 0;
    v10[2747] = 0;
    v10[2812] = 0;
    uint64_t v11 = *(void *)(*(void *)(v5 + 136) + 296);
    v9[1457] = v11 + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), v11, 0, a3);
    uint64_t result = *(void *)(v4 + 1480);
    if (result)
    {
      MTLResourceListAddResource();
      uint64_t result = *(void *)(v4 + 1480);
      *(void *)(v4 + 8 * a3 + 15248) = *(void *)(v5 + 96);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
    }
    else
    {
      *(void *)(v4 + 8 * a3 + 15248) = *(void *)(v5 + 96);
    }
  }
  else
  {
    uint64_t v12 = 8 * a3;
    unint64_t v13 = (void *)(result + v12);
    v13[1457] = 0;
    v13[1906] = 0;
    uint64_t v14 = (void *)(*(void *)(result + 1936) + v12);
    v14[67] = 0;
    *uint64_t v14 = 0;
    v13[1941] = *(void *)(result + 1896);
    v13[2006] = 0;
    uint64_t v15 = result + 4 * a3;
    *(_DWORD *)(v15 + 10728) = 0;
    *(_DWORD *)(v15 + 10988) = 0;
  }
  *(void *)(v4 + 16624 + 8 * (a3 > 0x3F)) |= 1 << a3;
  *(_DWORD *)(v4 + 16656) |= 1u;
  return result;
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setBuffer(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v5 = 8 * a3;
    uint64_t v6 = (void *)(*(void *)(result + 1936) + v5);
    v6[67] = *(unsigned int *)(a2 + 352);
    uint64_t v7 = (void *)(result + v5);
    uint64_t v8 = (int *)MEMORY[0x263F4B188];
    v7[1906] = 0;
    uint64_t v9 = a2 + *v8;
    unint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 24);
    LODWORD(v9) = *(_DWORD *)(v9 + 16);
    v7[1941] = v10;
    v7[2006] = v11;
    *uint64_t v6 = v11;
    uint64_t v12 = (_DWORD *)(result + 4 * a3);
    v12[2682] = v9;
    v12[2747] = v9;
    v12[2812] = v10 >> 8;
    v7[1457] = a2 + *v8;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), a2, 0, a3);
    *(void *)(v4 + 16624 + 8 * (a3 > 0x3F)) |= 1 << a3;
    *(_DWORD *)(v4 + 16656) |= 1u;
    uint64_t result = *(void *)(v4 + 1480);
    if (result)
    {
      return MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v13 = 8 * a3;
    uint64_t v14 = (void *)(*(void *)(result + 1936) + v13);
    v14[67] = 0;
    uint64_t v15 = (void *)(result + v13);
    v15[1906] = 0;
    v15[1457] = 0;
    *uint64_t v14 = 0;
    v15[1941] = *(void *)(result + 1896);
    v15[2006] = 0;
    uint64_t v16 = result + 4 * a3;
    *(_DWORD *)(v16 + 10728) = 0;
    *(_DWORD *)(v16 + 10988) = 0;
  }
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::issueProgressMarkerDispatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 1456);
  uint64_t v7 = *(void *)(v6 + 808);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE47createComputeProgressMarkerDriverShaderIfNeededEP18AGXG17FamilyDevice_block_invoke;
  block[3] = &unk_26516E950;
  block[4] = v6;
  block[5] = v7;
  if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createComputeProgressMarkerDriverShaderIfNeeded(AGXG17FamilyDevice *)::dispatch_once_pred == -1)
  {
    if (!*(void *)(v7 + 8008)) {
      return;
    }
  }
  else
  {
    dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createComputeProgressMarkerDriverShaderIfNeeded(AGXG17FamilyDevice *)::dispatch_once_pred, block);
    if (!*(void *)(v7 + 8008)) {
      return;
    }
  }
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(unsigned char **)(a1 + 704);
  if (!v9)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 20, 0)) {
      goto LABEL_36;
    }
    uint64_t v9 = *(unsigned char **)(a1 + 704);
  }
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) <= *(void *)(a1 + 696))
  {
LABEL_5:
    *(void *)(a1 + 712) = v10;
    goto LABEL_6;
  }
  int v25 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 20, 0);
  uint64_t v9 = *(unsigned char **)(a1 + 704);
  if (v25)
  {
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > *(void *)(a1 + 696)) {
      goto LABEL_36;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v11 = *(void *)(a1 + 720);
  *(void *)(a1 + 704) = v9 + 1;
  *uint64_t v9 = 0;
  uint64_t v12 = *(void **)(*(void *)a1 + 688);
  uint64_t v13 = (void *)v12[69];
  unint64_t v14 = v12[70];
  if ((unint64_t)v13 >= v14)
  {
    uint64_t v16 = (void *)v12[68];
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v13 - v16) + 1;
    if (v17 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v16) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = (char *)operator new(24 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      unint64_t v21 = &v20[8 * (v13 - v16)];
      *(void *)unint64_t v21 = v9;
      *((void *)v21 + 1) = a3;
      *((void *)v21 + 2) = a2;
      uint64_t v15 = v21 + 24;
      if (v13 != v16)
      {
        do
        {
          long long v22 = *(_OWORD *)(v13 - 3);
          *((void *)v21 - 1) = *(v13 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v13 -= 3;
        }
        while (v13 != v16);
        uint64_t v13 = (void *)v12[68];
      }
      v12[68] = v21;
      v12[69] = v15;
      v12[70] = &v20[24 * v19];
      uint64_t v8 = a1 + 16;
      if (v13) {
        operator delete(v13);
      }
      goto LABEL_23;
    }
LABEL_36:
    abort();
  }
  *uint64_t v13 = v9;
  v13[1] = a3;
  uint64_t v15 = v13 + 3;
  v13[2] = a2;
LABEL_23:
  uint64_t v23 = &v9[v11];
  v12[69] = v15;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 8008));
  if (!*(void *)(a1 + 704)) {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v8);
  }
  uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 1312) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 15984) = v23;
  *(void *)(*(void *)(a1 + 1936) + 992) = v23;
  *(void *)(a1 + 12112) = v24;
  *(void *)(a1 + 16624) |= 0x200000000000000uLL;
  *(_DWORD *)(a1 + 16656) |= 1u;
  if (*(_DWORD *)(a1 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
  }
  int64x2_t v28 = vdupq_n_s64(1uLL);
  uint64_t v29 = 1;
  int64x2_t v26 = v28;
  uint64_t v27 = 1;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernel(a1, (long long *)v28.i8, (long long *)v26.i8);
  if (*(_DWORD *)(a1 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
  }
}

void sub_242A6DFFC(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void **std::vector<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream,std::allocator<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 32;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 64;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_242A6EFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14)
{
  std::vector<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream,std::allocator<AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::VirtualSubstream>>::~vector[abi:nn180100](v17);
  uint64_t v20 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 17288) = v20;
    operator delete(v20);
  }
  std::deque<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](v15);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*v18);
  AGX::HAL200::RenderUSCStateLoader::~RenderUSCStateLoader(a14);
  AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~ContextCommon(v14);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::handleControlFlowEpilogue(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 1496) + 520)) {
    *(unsigned char *)(result + 17162) |= 2u;
  }
  *(void *)(result + 1928) = 0;
  return result;
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::handleControlFlowPrologue(uint64_t result)
{
  *(void *)(result + 1928) = 0;
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::handleLastControlFlowEpilogue(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 17162) & 2) != 0) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::restartComputePass(a1, 22);
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::handleFirstControlFlowPrologue(uint64_t a1)
{
  uint64_t v1 = (char *)(a1 + 17162);
  char v2 = *(unsigned char *)(a1 + 17162);
  if ((v2 & 1) != 0
    || (AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::restartComputePass(a1, 22), char v2 = *v1, (*v1 & 1) != 0))
  {
    char *v1 = v2 | 1;
  }
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::handleControlFlowFailure(uint64_t result)
{
  *(unsigned char *)(result + 17162) |= 2u;
  return result;
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelInternal(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v7 = *(void *)(a1 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, a2);
  long long v10 = *a4;
  uint64_t v11 = *((void *)a4 + 2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(a1, 0x16u, (uint64_t *)&v10, (int *)&v8);
  if (*(_DWORD *)(a1 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
  }
  if (v7)
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v7);
  }
}

void AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::insertBarrierForCoalescingImpl(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 1880) == 1 || *(_DWORD *)(a1 + 16688) >= 2u)
  {
    char v2 = *(void **)(a1 + 16680);
    if (!v2) {
      operator new();
    }
    *char v2 = *(void *)(a1 + 768);
  }
  else
  {
    BOOL v3 = *(void **)(a1 + 16680);
    if (v3[4])
    {
      unint64_t v4 = (void *)v3[3];
      if (v4)
      {
        do
        {
          unint64_t v5 = (void *)*v4;
          operator delete(v4);
          unint64_t v4 = v5;
        }
        while (v5);
      }
      v3[3] = 0;
      uint64_t v6 = v3[2];
      if (v6)
      {
        for (uint64_t i = 0; i != v6; ++i)
          *(void *)(v3[1] + 8 * i) = 0;
      }
      v3[4] = 0;
    }
    if (v3[9])
    {
      long long v8 = (void *)v3[8];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void *)*v8;
          operator delete(v8);
          long long v8 = v9;
        }
        while (v9);
      }
      v3[8] = 0;
      uint64_t v10 = v3[7];
      if (v10)
      {
        for (uint64_t j = 0; j != v10; ++j)
          *(void *)(v3[6] + 8 * j) = 0;
      }
      v3[9] = 0;
    }
  }

  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, 22);
}

void sub_242A6F2DC(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

uint64_t AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::getComputeCoalescingResourceTrackerImpl(uint64_t a1)
{
  if (!*(void *)(a1 + 16680)) {
    operator new();
  }
  return *(void *)(a1 + 16680);
}

void sub_242A6F364(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10A0C40B4CCAB04);
  _Unwind_Resume(a1);
}

void AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1960;
  uint64_t v10 = *(void *)(a1 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, a3);
  *(void *)(a1 + 15808) = a4;
  *(void *)(*(void *)(a1 + 1936) + 816) = a4;
  *(void *)(a1 + 11936) = a5;
  *(void *)(a1 + 16624) |= 0x800000000uLL;
  *(_DWORD *)(v9 + 14696) |= 1u;
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = v11 + 12;
  if ((unint64_t)(v11 + 12) > *(void *)(a1 + 152))
  {
    int v14 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
    uint64_t v11 = *(void *)(a1 + 160);
    if (!v14) {
      goto LABEL_3;
    }
    uint64_t v12 = v11 + 12;
    if ((unint64_t)(v11 + 12) > *(void *)(a1 + 152)) {
      abort();
    }
  }
  *(void *)(a1 + 168) = v12;
LABEL_3:
  uint64_t v13 = *(void *)(a1 + 176) + v11;
  *(void *)(a1 + 160) = v11 + 12;
  *(void *)uint64_t v11 = 0x100000001;
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(a1 + 15816) = v13;
  *(void *)(*(void *)(a1 + 1936) + 824) = v13;
  *(void *)(a1 + 11944) = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 16624) |= 0x1000000000uLL;
  *(_DWORD *)(v9 + 14696) |= 1u;
  *(void *)(a1 + 1976) = 0x100000001;
  *(void *)(a1 + 1984) = 0xFFFF000000010001;
  *(_WORD *)(a1 + 1992) = 0;
  *(_WORD *)(a1 + 1994) = -1;
  *(_DWORD *)(a1 + 1996) = 0;
  *(void *)(a1 + 2000) = 0;
  *(_OWORD *)uint64_t v9 = xmmword_242EA7E10;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::performEnqueueKernel(a1, a2, a4, *(void *)(a1 + 1920), 2);
  if (*(_DWORD *)(a1 + 1880) == 1
    && (AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(a1, a2), *(unsigned char *)(*(void *)(a1 + 1912) + 458) = 0, !*(_DWORD *)(v9 + 14728)))
  {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::insertIndirectTGOptKernel(a1, a2, (unint64_t *)(a1 + 17352), (void *)(a1 + 17360), (uint64_t *)(a1 + 17368));
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }

  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(a1, v10);
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendLdshdr(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168) == 20) {
    return;
  }
  BOOL v3 = *(char **)a1;
  char v2 = *(char **)(a1 + 8);
  unint64_t v4 = (unint64_t)&v2[-*(void *)a1];
  *(_WORD *)(a1 + 244) = v4;
  int v5 = *(_DWORD *)(a1 + 240);
  if (v5 == 1)
  {
    size_t v6 = 20;
  }
  else if (v5)
  {
    size_t v6 = 0;
  }
  else
  {
    size_t v6 = 28;
  }
  unint64_t v7 = v6 + v4;
  if (v4 < v6 + v4)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v2 >= v6)
    {
      bzero(v2, v6);
      *(void *)(a1 + 8) = &v2[v6];
      return;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      abort();
    }
    unint64_t v9 = v8 - (void)v3;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v7) {
      uint64_t v10 = v6 + v4;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t v12 = (char *)operator new(v11);
    uint64_t v13 = &v12[v4];
    int v14 = &v12[v11];
    uint64_t v15 = &v12[v7];
    bzero(&v12[v4], v6);
    if (v2 == v3) {
      goto LABEL_36;
    }
    if (v4 < 8 || (unint64_t)(v3 - v12) < 0x20) {
      goto LABEL_33;
    }
    if (v4 >= 0x20)
    {
      unint64_t v16 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v17 = v2 - 16;
      unint64_t v18 = &v12[v2 - 16 - v3];
      unint64_t v19 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)unint64_t v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v4 == v16) {
        goto LABEL_35;
      }
      if ((v4 & 0x18) == 0)
      {
        v13 -= v16;
        v2 -= v16;
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v21 = v16 - (v4 & 0xFFFFFFFFFFFFFFF8);
    long long v22 = &v2[-v16 - 8];
    uint64_t v23 = (char *)(v22 - v3);
    do
    {
      uint64_t v24 = *(void *)v22;
      v22 -= 8;
      *(void *)&v23[(void)v12] = v24;
      v23 -= 8;
      v21 += 8;
    }
    while (v21);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_35;
    }
    v13 -= v4 & 0xFFFFFFFFFFFFFFF8;
    v2 -= v4 & 0xFFFFFFFFFFFFFFF8;
LABEL_33:
    int v25 = v13 - 1;
    do
    {
      char v26 = *--v2;
      *v25-- = v26;
    }
    while (v2 != v3);
LABEL_35:
    char v2 = v3;
    uint64_t v13 = v12;
LABEL_36:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v2)
    {
      operator delete(v2);
    }
    return;
  }
  if (v4 > v6 + v4) {
    *(void *)(a1 + 8) = &v3[v7];
  }
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::addBufferPointerLoad(uint64_t a1, unint64_t a2, unsigned int a3, int a4, int a5)
{
  unint64_t v8 = a2;
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)a1;
  unint64_t v12 = a2 & 0xFFFFFFFF00000000;
  unint64_t v13 = HIDWORD(a2);
  unint64_t v14 = 0x500000000;
  unint64_t v15 = 0x200000000;
  switch(HIDWORD(a2))
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 8:
      unsigned __int8 v16 = a2;
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      int v51 = 0;
      unsigned int v17 = 3;
      unsigned int v18 = 1;
      v48[0] = 0;
LABEL_17:
      unsigned __int8 v19 = v16;
      LOBYTE(v22) = BYTE1(a2);
      goto LABEL_18;
    case 3:
      goto LABEL_8;
    case 4:
      unint64_t v15 = 0x300000000;
LABEL_8:
      unsigned __int8 v16 = a2;
      unsigned __int8 v19 = a2;
      unint64_t v20 = (unsigned __int16)a2 | v15;
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      unint64_t v21 = HIDWORD(v15);
      int v51 = 0;
      v48[0] = 0;
      goto LABEL_9;
    case 6:
      goto LABEL_11;
    case 7:
      unint64_t v14 = 0x600000000;
LABEL_11:
      unsigned __int8 v19 = a2;
      unint64_t v20 = (unsigned __int16)a2 | v14;
      unint64_t v21 = HIDWORD(v14);
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      int v51 = 0;
      v48[0] = 0;
      unsigned __int8 v16 = a2;
      unsigned int v17 = 7;
      goto LABEL_14;
    case 9:
      unsigned __int8 v19 = a2;
      unint64_t v20 = (unsigned __int16)a2 | 0x800000000;
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      int v51 = 0;
      v48[0] = 0;
      LODWORD(v21) = 8;
      unsigned __int8 v16 = a2;
      goto LABEL_13;
    default:
      unsigned __int8 v19 = a2;
      unint64_t v20 = a2 & 0xFFFFFFFF0000FFFFLL;
      unint64_t v21 = HIDWORD(v12);
      uint64_t v50 = 0;
      uint64_t v49 = 0;
      int v51 = 0;
      v48[0] = 0;
      unsigned int v17 = 3;
      if (HIDWORD(v12) > 9)
      {
        unsigned __int8 v16 = a2;
      }
      else if (((1 << SBYTE4(v12)) & 0x1C) != 0)
      {
        unsigned __int8 v16 = a2;
LABEL_9:
        unsigned int v17 = 2;
      }
      else if (((1 << SBYTE4(v12)) & 0xE0) != 0)
      {
        unsigned __int8 v16 = a2;
        unsigned int v17 = 7;
      }
      else
      {
        unsigned __int8 v16 = a2;
        if (((1 << SBYTE4(v12)) & 0x300) != 0) {
LABEL_13:
        }
          unsigned int v17 = 4;
      }
LABEL_14:
      if ((v21 - 1) > 8)
      {
        unsigned int v18 = 1;
        if (v21 > 9)
        {
LABEL_21:
          LOBYTE(v22) = 0;
          unsigned __int8 v19 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        unsigned int v18 = dword_242EAA74C[(v21 - 1)];
      }
      switch((int)v21)
      {
        case 0:
        case 1:
        case 8:
        case 9:
          goto LABEL_17;
        case 2:
        case 3:
        case 4:
          LOBYTE(v22) = 0;
          unsigned __int8 v19 = v16;
          break;
        case 5:
        case 6:
        case 7:
          unint64_t v22 = v20 >> 8;
          break;
        default:
          goto LABEL_21;
      }
LABEL_18:
      v48[1] = v19 | (v22 << 8);
      v48[2] = 0;
      v48[3] = v17;
      v48[4] = v18;
      v48[5] = 0;
      v48[6] = a3;
      v48[7] = 0;
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendInstruction<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate32>(a1, v48);
      unint64_t v23 = 0x500000000;
      __int16 v24 = 1;
      switch((int)v13)
      {
        case 0:
        case 1:
        case 2:
        case 5:
        case 8:
          LOWORD(v8) = v8 + 1;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          int v47 = 0;
          v44[0] = 0;
          unsigned int v25 = 3;
          unsigned int v26 = 1;
LABEL_41:
          unsigned __int8 v27 = v8;
          LOBYTE(v31) = BYTE1(v8);
          goto LABEL_42;
        case 3:
          LOWORD(v8) = v8 + 1;
          unint64_t v30 = 0x200000000;
          goto LABEL_31;
        case 4:
          LOWORD(v8) = v8 + 2;
          unint64_t v30 = 0x300000000;
LABEL_31:
          unsigned __int8 v27 = v8;
          unint64_t v28 = (unsigned __int16)v8 | v30;
          unint64_t v29 = HIDWORD(v30);
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          int v47 = 0;
          v44[0] = 0;
          goto LABEL_32;
        case 6:
          goto LABEL_34;
        case 7:
          unint64_t v23 = 0x600000000;
          __int16 v24 = 2;
LABEL_34:
          LOWORD(v8) = v24 + v8;
          unsigned __int8 v27 = v8;
          unint64_t v28 = (unsigned __int16)v8 | v23;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          unint64_t v29 = HIDWORD(v23);
          int v47 = 0;
          v44[0] = 0;
          goto LABEL_35;
        case 9:
          LOWORD(v8) = v8 + 1;
          unsigned __int8 v27 = v8;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          unint64_t v28 = (unsigned __int16)v8 | 0x800000000;
          int v47 = 0;
          v44[0] = 0;
          LODWORD(v29) = 8;
          goto LABEL_37;
        default:
          unsigned __int8 v27 = v8;
          unint64_t v28 = v8 & 0xFFFFFFFF0000FFFFLL;
          unint64_t v29 = HIDWORD(v12);
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          int v47 = 0;
          v44[0] = 0;
          unsigned int v25 = 3;
          if (HIDWORD(v12) > 9) {
            goto LABEL_38;
          }
          if (((1 << SBYTE4(v12)) & 0x1C) != 0)
          {
LABEL_32:
            unsigned int v25 = 2;
          }
          else if (((1 << SBYTE4(v12)) & 0xE0) != 0)
          {
LABEL_35:
            unsigned int v25 = 7;
          }
          else if (((1 << SBYTE4(v12)) & 0x300) != 0)
          {
LABEL_37:
            unsigned int v25 = 4;
          }
LABEL_38:
          if ((v29 - 1) > 8)
          {
            unsigned int v26 = 1;
            if (v29 > 9)
            {
LABEL_54:
              LOBYTE(v31) = 0;
              unsigned __int8 v27 = 0;
              goto LABEL_42;
            }
          }
          else
          {
            unsigned int v26 = dword_242EAA74C[(v29 - 1)];
          }
          switch((int)v29)
          {
            case 0:
            case 1:
            case 8:
            case 9:
              goto LABEL_41;
            case 2:
            case 3:
            case 4:
              LOBYTE(v31) = 0;
              unsigned __int8 v27 = v8;
              break;
            case 5:
            case 6:
            case 7:
              unint64_t v31 = v28 >> 8;
              break;
            default:
              goto LABEL_54;
          }
LABEL_42:
          int v32 = v10 - v11;
          v44[1] = v27 | (v31 << 8);
          v44[2] = 0;
          v44[3] = v25;
          v44[4] = v26;
          v44[5] = 0;
          v44[6] = a3;
          v44[7] = 0;
          AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendInstruction<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate32>(a1, v44);
          BOOL v34 = *(_DWORD **)(a1 + 184);
          unint64_t v33 = *(void *)(a1 + 192);
          if ((unint64_t)v34 >= v33)
          {
            uint64_t v36 = *(_DWORD **)(a1 + 176);
            unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (v34 - v36) + 1;
            if (v37 > 0x1555555555555555) {
              abort();
            }
            unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v36) >> 2);
            if (2 * v38 > v37) {
              unint64_t v37 = 2 * v38;
            }
            if (v38 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v39 = 0x1555555555555555;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              if (v39 > 0x1555555555555555) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v40 = (char *)operator new(12 * v39);
            }
            else
            {
              long long v40 = 0;
            }
            long long v41 = &v40[4 * (v34 - v36)];
            *(_DWORD *)long long v41 = a4;
            *((_DWORD *)v41 + 1) = a5;
            *((_DWORD *)v41 + 2) = v32;
            uint64_t v35 = v41 + 12;
            if (v34 != v36)
            {
              do
              {
                uint64_t v42 = *(void *)(v34 - 3);
                v34 -= 3;
                int v43 = v34[2];
                *(void *)(v41 - 12) = v42;
                v41 -= 12;
                *((_DWORD *)v41 + 2) = v43;
              }
              while (v34 != v36);
              BOOL v34 = *(_DWORD **)(a1 + 176);
            }
            *(void *)(a1 + 176) = v41;
            *(void *)(a1 + 184) = v35;
            *(void *)(a1 + 192) = &v40[12 * v39];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *BOOL v34 = a4;
            v34[1] = a5;
            uint64_t v35 = v34 + 3;
            v34[2] = v32;
          }
          *(void *)(a1 + 184) = v35;
          return;
      }
  }
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendInstruction<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate32>(uint64_t a1, unsigned int *a2)
{
  v66[3] = *MEMORY[0x263EF8340];
  memset(v66, 0, 24);
  if (a2[7]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = a2[6] == 8 && a2[3] == 2;
  }
  LOWORD(v4) = 0;
  unsigned int v6 = a2[9];
  unsigned int v5 = a2[10];
  unsigned int v7 = a2[11];
  BOOL v8 = v5 == 2;
  if (v6) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v5 == 1;
  }
  if (v6) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v5 == 2;
  }
  BOOL v11 = v6 == 1 && v5 == 0;
  BOOL v12 = v6 == 1 && v5 == 1;
  BOOL v13 = v6 == 1 && v5 == 2;
  BOOL v14 = v6 == 2 && v5 == 0;
  BOOL v15 = v6 == 2 && v5 == 1;
  if (v6 != 2) {
    BOOL v8 = 0;
  }
  int v16 = v5 | v6;
  if (v7) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v11;
  }
  if (v7) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v14;
  }
  if (v7) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v9;
  }
  if (v7) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = v12;
  }
  if (v7) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v15;
  }
  if (v7) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = v10;
  }
  if (v7) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v13;
  }
  if (v7) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v8;
  }
  BOOL v25 = v7 == 1 && v11;
  BOOL v26 = v7 == 1 && v14;
  BOOL v27 = v7 == 1 && v9;
  BOOL v28 = v7 == 1 && v12;
  BOOL v29 = v7 == 1 && v15;
  BOOL v30 = v7 == 1 && v10;
  BOOL v31 = v7 == 1 && v13;
  BOOL v63 = v31;
  BOOL v32 = v7 == 1 && v8;
  if (v7 != 2)
  {
    BOOL v11 = 0;
    BOOL v14 = 0;
    BOOL v9 = 0;
  }
  BOOL v62 = v9;
  BOOL v33 = v7 == 2 && v12;
  BOOL v61 = v33;
  BOOL v34 = v7 == 2 && v15;
  BOOL v58 = v34;
  BOOL v35 = v7 == 2 && v10;
  BOOL v36 = v7 == 2 && v13;
  BOOL v59 = v35;
  BOOL v60 = v36;
  BOOL v37 = v7 == 2 && v8;
  BOOL v38 = v16 == 0;
  if (v16) {
    BOOL v39 = 0;
  }
  else {
    BOOL v39 = v7 == 1;
  }
  if (v16) {
    BOOL v40 = 0;
  }
  else {
    BOOL v40 = v7 == 2;
  }
  unsigned __int16 v41 = -32764;
  unsigned int v42 = 2;
  if (v2)
  {
    unsigned int v43 = a2[4];
    uint64_t v44 = 0;
    if (v43 - 1 <= 1)
    {
      unsigned int v45 = *a2;
      int v46 = (v45 >> 1) & 0xC00 | (v45 >> 6) & 0x1F;
      if (v7) {
        BOOL v47 = 0;
      }
      else {
        BOOL v47 = v38;
      }
      int v48 = (v45 >> 13) & 0xFFF;
      unsigned int v49 = *((unsigned __int8 *)a2 + 4);
      __int16 v50 = (8 * v49) & 0xF0 | ((_WORD)v45 << 8);
      unsigned int v42 = HIWORD(*a2) & 0xFE00 | (4 * (v49 & 1)) & 0x1F | (v49 >> 4) & 8 | (((v49 >> 5) & 3) << 6) | (32 * (a2[5] & 1)) | 2;
      unsigned int v51 = *((unsigned __int8 *)a2 + 48);
      unsigned int v52 = v51 >> 5;
      unsigned int v4 = v46 & 0xFFE01FFE | a2[8] & 1 | ((v51 & 1) << 13) & 0x3FFF | (((v51 >> 1) & 1) << 14) & 0xFFE07FFF | (v51 >> 2 << 15);
      unsigned int v53 = v48 & 0xFFFFDFFF | (((v51 >> 3) & 1) << 13);
      unsigned int v54 = v51 >> 4;
      if (v43 == 2) {
        __int16 v55 = -32756;
      }
      else {
        __int16 v55 = -32764;
      }
      unsigned __int16 v41 = v50 | v55;
      uint64_t v44 = v53 & 0xFFFC3FFF | ((v54 & 1) << 14) & 0x7FFF | ((v52 & 7) << 15);
      if (v47)
      {
        LOWORD(v4) = v4 & 0xFC1F;
      }
      else if (v17)
      {
        LOWORD(v4) = v4 & 0xFC1F | 0x20;
      }
      else if (v18)
      {
        LOWORD(v4) = v4 & 0xFC1F | 0x40;
      }
      else if (v19)
      {
        LOWORD(v4) = v4 & 0xFC1F | 0x60;
      }
      else if (v20)
      {
        LOWORD(v4) = v4 & 0xFC1F | 0x80;
      }
      else
      {
        if (v21)
        {
          __int16 v56 = v4 & 0xFC3F;
          __int16 v57 = 160;
        }
        else
        {
          if (v22)
          {
            LOWORD(v4) = v4 & 0xFC1F | 0xC0;
            goto LABEL_131;
          }
          if (v23)
          {
            LOWORD(v4) = v4 & 0xFC1F | 0xE0;
            goto LABEL_131;
          }
          if (v24)
          {
            LOWORD(v4) = v4 & 0xFC1F | 0x100;
            goto LABEL_131;
          }
          if (v39)
          {
            __int16 v56 = v4 & 0xFC3F;
            __int16 v57 = 288;
          }
          else if (v25)
          {
            __int16 v56 = v4 & 0xFC1F;
            __int16 v57 = 320;
          }
          else if (v26)
          {
            __int16 v56 = v4 & 0xFC7F;
            __int16 v57 = 352;
          }
          else
          {
            if (v27)
            {
              LOWORD(v4) = v4 & 0xFC1F | 0x180;
              goto LABEL_131;
            }
            if (v28)
            {
              __int16 v56 = v4 & 0xFC3F;
              __int16 v57 = 416;
            }
            else
            {
              if (v29)
              {
                LOWORD(v4) = v4 & 0xFC1F | 0x1C0;
                goto LABEL_131;
              }
              if (v30)
              {
                LOWORD(v4) = v4 & 0xFC1F | 0x1E0;
                goto LABEL_131;
              }
              if (v63)
              {
                LOWORD(v4) = v4 & 0xFC1F | 0x200;
                goto LABEL_131;
              }
              if (v32)
              {
                __int16 v56 = v4 & 0xFC3F;
                __int16 v57 = 544;
              }
              else if (v40)
              {
                __int16 v56 = v4 & 0xFC1F;
                __int16 v57 = 576;
              }
              else if (v11)
              {
                __int16 v56 = v4 & 0xFC7F;
                __int16 v57 = 608;
              }
              else if (v14)
              {
                __int16 v56 = v4 & 0xFC1F;
                __int16 v57 = 640;
              }
              else if (v62)
              {
                __int16 v56 = v4 & 0xFC3F;
                __int16 v57 = 672;
              }
              else if (v61)
              {
                __int16 v56 = v4 & 0xFC1F;
                __int16 v57 = 704;
              }
              else if (v58)
              {
                __int16 v56 = v4 & 0xFCFF;
                __int16 v57 = 736;
              }
              else
              {
                if (v59)
                {
                  LOWORD(v4) = v4 & 0xFC1F | 0x300;
                  goto LABEL_131;
                }
                if (v60)
                {
                  __int16 v56 = v4 & 0xFC3F;
                  __int16 v57 = 800;
                }
                else
                {
                  if (!v37) {
                    goto LABEL_131;
                  }
                  __int16 v56 = v4 & 0xFC1F;
                  __int16 v57 = 832;
                }
              }
            }
          }
        }
        LOWORD(v4) = v56 | v57;
      }
    }
  }
  else
  {
    uint64_t v44 = 0;
  }
LABEL_131:
  unint64_t __src = ((unint64_t)(unsigned __int16)v4 << 32) | (v44 << 48) | ((unint64_t)v42 << 16) | v41;
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)v66, 8);
}

void std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  BOOL v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    BOOL v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    BOOL v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v33 = v15;
    BOOL v34 = &v13[v15];
    memcpy(&v13[v15], __src, a5);
    if (v11 == __dst)
    {
      BOOL v35 = v34;
LABEL_44:
      unsigned int v43 = &v34[a5];
      if (v10 != __dst) {
        memmove(v43, __dst, v10 - __dst);
      }
      uint64_t v44 = *(char **)a1;
      *(void *)a1 = v35;
      *(void *)(a1 + 8) = &v43[v10 - __dst];
      *(void *)(a1 + 16) = v33 + v16;
      if (v44)
      {
        operator delete(v44);
      }
      return;
    }
    if ((unint64_t)v13 >= 0x20)
    {
      unint64_t v37 = __dst - v11;
      BOOL v36 = __dst;
      BOOL v35 = v34;
      if ((unint64_t)&v11[-v33] >= 0x20)
      {
        BOOL v36 = &__dst[-(v37 & 0xFFFFFFFFFFFFFFE0)];
        BOOL v38 = __dst - 16;
        BOOL v39 = (_OWORD *)(v33 + __dst - 16 - v11);
        unint64_t v40 = v37 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v41 = *(_OWORD *)v38;
          *(v39 - 1) = *((_OWORD *)v38 - 1);
          *BOOL v39 = v41;
          v38 -= 32;
          v39 -= 2;
          v40 -= 32;
        }
        while (v40);
        BOOL v35 = &v34[-(v37 & 0xFFFFFFFFFFFFFFE0)];
        if (v37 == (v37 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      BOOL v36 = __dst;
      BOOL v35 = v34;
    }
    do
    {
      char v42 = *--v36;
      *--BOOL v35 = v42;
    }
    while (v36 != v11);
    BOOL v10 = *(char **)(a1 + 8);
    goto LABEL_44;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    BOOL v18 = &__src[a5];
    BOOL v20 = *(char **)(a1 + 8);
LABEL_17:
    BOOL v21 = &__dst[a5];
    BOOL v22 = &v20[-a5];
    BOOL v23 = v20;
    if (&v20[-a5] < v10)
    {
      unint64_t v24 = &v10[a5] - v20;
      BOOL v25 = v24 >= 0x20 && (unint64_t)a5 > 0x1F;
      BOOL v26 = &v20[-a5];
      BOOL v23 = v20;
      if (!v25) {
        goto LABEL_54;
      }
      unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFE0;
      BOOL v26 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
      BOOL v28 = (long long *)(v22 + 16);
      BOOL v29 = v20 + 16;
      unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v31 = *v28;
        *(v29 - 1) = *(v28 - 1);
        *BOOL v29 = v31;
        v28 += 2;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      BOOL v23 = &v20[v27];
      if (v24 != v27)
      {
LABEL_54:
        do
        {
          char v32 = *v26++;
          *v23++ = v32;
        }
        while (v26 != v10);
      }
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[a5], __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
    return;
  }
  BOOL v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  BOOL v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(uint64_t a1)
{
  uint64_t v501 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 56) = 16;
  unint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  unsigned int v5 = (char *)(v3 + 8 * (v2 >> 6));
  uint64_t v450 = a1;
  if (v4 == v3)
  {
    unsigned int v6 = 0;
    BOOL v10 = 0;
    unsigned int v7 = (void *)(a1 + 104);
    uint64_t v9 = (char *)(v3 + 8 * ((*(void *)(a1 + 104) + v2) >> 6));
  }
  else
  {
    unsigned int v6 = (unsigned __int16 *)(*(void *)v5 + ((v2 & 0x3F) << 6));
    unsigned int v7 = (void *)(a1 + 104);
    unint64_t v8 = *(void *)(a1 + 104) + v2;
    uint64_t v9 = (char *)(v3 + 8 * (v8 >> 6));
    BOOL v10 = (unsigned __int16 *)(*(void *)v9 + ((v8 & 0x3F) << 6));
    if (v10 != v6)
    {
      uint64_t v11 = ((uint64_t)((v8 & 0x3F) << 6) >> 6) + 8 * (v9 - v5);
      uint64_t v12 = ((uint64_t)v6 - *(void *)v5) >> 6;
      if (v11 != v12)
      {
        unint64_t v13 = 63 - __clz(v11 - v12);
        goto LABEL_8;
      }
    }
  }
  unint64_t v13 = 0;
LABEL_8:
  v425 = (void **)(a1 + 64);
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEELb0EEEvT1_SL_SB_NS_15iterator_traitsISL_E15difference_typeEb((unint64_t)v5, v6, v9, v10, 2 * v13, 1);
  unint64_t v14 = *(void *)(v450 + 96);
  uint64_t v15 = *(void *)(v450 + 72);
  uint64_t v16 = *(void *)(v450 + 80);
  uint64_t v17 = (void *)(v15 + 8 * (v14 >> 6));
  if (v16 == v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *v17 + ((*(void *)(v450 + 96) & 0x3FLL) << 6);
  }
  v430 = v7;
  while (1)
  {
    unint64_t v19 = v14 + *v7;
    unint64_t v20 = v19 >> 6;
    if (v16 == v15) {
      break;
    }
    if (v18 == *(void *)(v15 + 8 * v20) + ((v19 & 0x3F) << 6)) {
      goto LABEL_665;
    }
LABEL_17:
    uint64_t v21 = v18 - *v17;
    uint64_t v22 = v21 >> 6;
    if (v21 < -63) {
      uint64_t v23 = v17[-((unint64_t)(62 - v22) >> 6)] + ((unint64_t)(~(62 - (_BYTE)v22) & 0x3F) << 6);
    }
    else {
      uint64_t v23 = *(void *)((char *)v17 + (((unint64_t)(v22 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
    }
          + (((v22 + 1) & 0x3F) << 6);
    unsigned int v24 = *(_DWORD *)(v18 + 20);
    BOOL v25 = ((0x125u >> v24) & 1) == 0 && v24 < 0xA;
    if (v24 - 5 >= 0xFFFFFFFD)
    {
      unsigned int v28 = *(unsigned __int16 *)(v18 + 16);
      if (v28 < 0x20 || v28 == 32 && (!v25 || ((v24 < 0xA) & (0x90u >> v24)) == 0 && *(int *)(v18 + 24) < 8))
      {
        int v29 = 0;
        goto LABEL_51;
      }
    }
    if (v16 == v15)
    {
      if (!v23)
      {
LABEL_31:
        int v29 = 1;
        goto LABEL_51;
      }
    }
    else if (v23 == *(void *)(v15 + 8 * v20) + ((v19 & 0x3F) << 6))
    {
      goto LABEL_31;
    }
    int v26 = *(_DWORD *)(v23 + 20);
    if ((v26 - 2) > 7) {
      int v27 = 3;
    }
    else {
      int v27 = dword_242EAA72C[v26 - 2];
    }
    if (v24 - 2 > 7) {
      int v30 = 3;
    }
    else {
      int v30 = dword_242EAA72C[v24 - 2];
    }
    unsigned int v31 = v26 - 1;
    if (v31 > 8) {
      int v32 = 1;
    }
    else {
      int v32 = dword_242EAA74C[v31];
    }
    unsigned int v33 = v24 - 1;
    if (v33 > 8) {
      int v34 = 1;
    }
    else {
      int v34 = dword_242EAA74C[v33];
    }
    int v29 = 1;
    if (v27 == v30 && v32 == v34 && *(unsigned __int16 *)(v23 + 16) == *(unsigned __int16 *)(v18 + 16)) {
      int v29 = *(_DWORD *)(v23 + 24) != *(_DWORD *)(v18 + 24);
    }
LABEL_51:
    if (*(unsigned char *)(v18 + 52)) {
      char v35 = 2;
    }
    else {
      char v35 = *(unsigned char *)(v18 + 35);
    }
    unsigned int v36 = 0xFu >> (4 - v35);
    uint64_t v38 = *(void *)(v18 + 16);
    uint64_t v37 = *(void *)(v18 + 24);
    uint64_t v39 = 0x100000000;
    if (!v29) {
      uint64_t v39 = 0;
    }
    unint64_t __p = v39;
    uint64_t v40 = *(void *)(v450 + 48);
    unsigned int v41 = *(_DWORD *)(v18 + 8);
    unsigned int v42 = *(unsigned __int16 *)(v18 + 32);
    uint64_t v43 = HIDWORD(*(void *)v18);
    unsigned int v44 = v43 - 2;
    if (!*(unsigned char *)(v18 + 34))
    {
      unsigned int v439 = *(unsigned __int16 *)(v18 + 32);
      if (v44 <= 7)
      {
        int v47 = dword_242EAA72C[v44];
        int v48 = v43 - 1;
        goto LABEL_72;
      }
      int v48 = v43 - 1;
      int v47 = 3;
      if ((v43 - 1) > 8)
      {
        unsigned int v56 = 1;
        if (v43 <= 9) {
          goto LABEL_73;
        }
LABEL_177:
        int v57 = 0;
      }
      else
      {
LABEL_72:
        unsigned int v56 = dword_242EAA74C[v48];
LABEL_73:
        switch((int)v43)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            int v57 = *(void *)v18;
            break;
          default:
            goto LABEL_177;
        }
      }
      if ((HIDWORD(v38) - 2) <= 7)
      {
        int v445 = dword_242EAA72C[HIDWORD(v38) - 2];
        int v58 = HIDWORD(v38) - 1;
        goto LABEL_78;
      }
      int v58 = HIDWORD(v38) - 1;
      int v445 = 3;
      if ((HIDWORD(v38) - 1) > 8)
      {
        int v59 = 1;
        if (HIDWORD(v38) <= 9) {
          goto LABEL_79;
        }
LABEL_179:
        int v431 = 0;
        unsigned int v433 = 0;
      }
      else
      {
LABEL_78:
        int v59 = dword_242EAA74C[v58];
LABEL_79:
        switch(HIDWORD(v38))
        {
          case 0:
          case 1:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
            int v431 = BYTE1(v38);
            unsigned int v433 = *(void *)(v18 + 16);
            break;
          case 2:
          case 3:
          case 4:
            int v431 = 0;
            unsigned int v433 = *(void *)(v18 + 16);
            break;
          default:
            goto LABEL_179;
        }
      }
      if (v37 >= 6) {
        unsigned int v91 = 0;
      }
      else {
        unsigned int v91 = 0x201008040201uLL >> (8 * v37);
      }
      unsigned int v434 = v91;
      memset((char *)&__src[1] + 6, 0, 18);
      uint64_t v442 = v40;
      v436 = v17;
      if (v36)
      {
        BOOL v93 = v41 < 4 || (v41 & 0xFFFFFFFE) == 4;
        unsigned int v94 = v36 - 1;
        __int16 v95 = v57;
        switch(v94)
        {
          case 0u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v111 = v47 == 2 && v93;
            break;
          case 1u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v100 = v47 == 2 && v93;
            break;
          case 2u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v107 = v47 == 2 && v93;
            break;
          case 3u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v99 = v47 == 2 && v93;
            break;
          case 4u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v108 = v47 == 2 && v93;
            break;
          case 5u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v98 = v47 == 2 && v93;
            break;
          case 6u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v110 = 0;
            BOOL v109 = v47 == 2 && v93;
            break;
          case 7u:
            int v96 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v97 = v47 == 2 && v93;
            break;
          case 8u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = v47 == 2 && v93;
            break;
          case 9u:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v103 = v47 == 2 && v93;
            break;
          case 0xAu:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v104 = v47 == 2 && v93;
            break;
          case 0xBu:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v102 = v47 == 2 && v93;
            break;
          case 0xCu:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v105 = v47 == 2 && v93;
            break;
          case 0xDu:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v101 = v47 == 2 && v93;
            break;
          case 0xEu:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            BOOL v106 = v47 == 2 && v93;
            break;
          default:
            int v96 = 0;
            BOOL v97 = 0;
            BOOL v98 = 0;
            BOOL v99 = 0;
            BOOL v100 = 0;
            BOOL v101 = 0;
            BOOL v102 = 0;
            BOOL v103 = 0;
            BOOL v111 = 0;
            BOOL v104 = 0;
            BOOL v105 = 0;
            BOOL v106 = 0;
            BOOL v107 = 0;
            BOOL v108 = 0;
            BOOL v109 = 0;
            BOOL v110 = 0;
            break;
        }
      }
      else
      {
        BOOL v97 = 0;
        BOOL v98 = 0;
        BOOL v99 = 0;
        BOOL v100 = 0;
        BOOL v101 = 0;
        BOOL v102 = 0;
        BOOL v103 = 0;
        BOOL v111 = 0;
        BOOL v104 = 0;
        BOOL v105 = 0;
        BOOL v106 = 0;
        BOOL v107 = 0;
        BOOL v108 = 0;
        BOOL v109 = 0;
        BOOL v110 = 0;
        __int16 v95 = v57;
        if (v57) {
          BOOL v112 = 0;
        }
        else {
          BOOL v112 = v41 == 8;
        }
        int v96 = v112 && v47 == 0;
      }
      LOWORD(v114) = 0;
      int v115 = (v445 == 3) & ~v29;
      if (v445 == 2) {
        int v116 = 1;
      }
      else {
        int v116 = (v445 == 3) & ~v29;
      }
      LOWORD(v117) = 103;
      if (v59 == 3
        && v56 <= 2
        && ((v96 | v111 | (v103 || v104) | (v102 || v105 || v101) | (v106 || v100 || v107 || v99) | (v108 || v98 || v109 || v97 || v110)) & 1) != 0)
      {
        LOWORD(v118) = 0;
        __int16 v119 = 0;
        LOWORD(v120) = 0;
        __int16 v121 = 0;
        if (v116)
        {
          __int16 v119 = (_WORD)v439 << 13;
          unsigned int v122 = v434;
          int v114 = ((unsigned __int16)(v434 & 0x1F0) >> 4) | 0x54;
          unsigned int v123 = v56;
          if (v96) {
            goto LABEL_211;
          }
          int v124 = v115;
          if (v111)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x41u;
                  break;
                case 2u:
                  v119 |= 0x81u;
                  break;
                case 3u:
                  v119 |= 0xC1u;
                  break;
                case 4u:
                  v119 |= 0x101u;
                  break;
                default:
                  v119 |= 0x141u;
                  break;
              }
            }
            else
            {
              v119 |= 1u;
            }
            goto LABEL_212;
          }
          if (v103)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x42u;
                  break;
                case 2u:
                  v119 |= 0x82u;
                  break;
                case 3u:
                  v119 |= 0xC2u;
                  break;
                case 4u:
                  v119 |= 0x102u;
                  break;
                default:
                  v119 |= 0x142u;
                  break;
              }
            }
            else
            {
              v119 |= 2u;
            }
            goto LABEL_212;
          }
          if (v104)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x43u;
                  break;
                case 2u:
                  v119 |= 0x83u;
                  break;
                case 3u:
                  v119 |= 0xC3u;
                  break;
                case 4u:
                  v119 |= 0x103u;
                  break;
                default:
                  v119 |= 0x143u;
                  break;
              }
            }
            else
            {
              v119 |= 3u;
            }
            goto LABEL_212;
          }
          if (v102)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x44u;
                  break;
                case 2u:
                  v119 |= 0x84u;
                  break;
                case 3u:
                  v119 |= 0xC4u;
                  break;
                case 4u:
                  v119 |= 0x104u;
                  break;
                default:
                  v119 |= 0x144u;
                  break;
              }
            }
            else
            {
              v119 |= 4u;
            }
            goto LABEL_212;
          }
          if (v105)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x45u;
                  break;
                case 2u:
                  v119 |= 0x85u;
                  break;
                case 3u:
                  v119 |= 0xC5u;
                  break;
                case 4u:
                  v119 |= 0x105u;
                  break;
                default:
                  v119 |= 0x145u;
                  break;
              }
            }
            else
            {
              v119 |= 5u;
            }
            goto LABEL_212;
          }
          if (v101)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x46u;
                  break;
                case 2u:
                  v119 |= 0x86u;
                  break;
                case 3u:
                  v119 |= 0xC6u;
                  break;
                case 4u:
                  v119 |= 0x106u;
                  break;
                default:
                  v119 |= 0x146u;
                  break;
              }
            }
            else
            {
              v119 |= 6u;
            }
            goto LABEL_212;
          }
          if (v106)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x47u;
                  break;
                case 2u:
                  v119 |= 0x87u;
                  break;
                case 3u:
                  v119 |= 0xC7u;
                  break;
                case 4u:
                  v119 |= 0x107u;
                  break;
                default:
                  v119 |= 0x147u;
                  break;
              }
            }
            else
            {
              v119 |= 7u;
            }
            goto LABEL_212;
          }
          if (v100)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x48u;
                  break;
                case 2u:
                  v119 |= 0x88u;
                  break;
                case 3u:
                  v119 |= 0xC8u;
                  break;
                case 4u:
                  v119 |= 0x108u;
                  break;
                default:
                  v119 |= 0x148u;
                  break;
              }
            }
            else
            {
              v119 |= 8u;
            }
            goto LABEL_212;
          }
          if (v107)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x49u;
                  break;
                case 2u:
                  v119 |= 0x89u;
                  break;
                case 3u:
                  v119 |= 0xC9u;
                  break;
                case 4u:
                  v119 |= 0x109u;
                  break;
                default:
                  v119 |= 0x149u;
                  break;
              }
            }
            else
            {
              v119 |= 9u;
            }
            goto LABEL_212;
          }
          if (v99)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x4Au;
                  break;
                case 2u:
                  v119 |= 0x8Au;
                  break;
                case 3u:
                  v119 |= 0xCAu;
                  break;
                case 4u:
                  v119 |= 0x10Au;
                  break;
                default:
                  v119 |= 0x14Au;
                  break;
              }
            }
            else
            {
              v119 |= 0xAu;
            }
            goto LABEL_212;
          }
          if (v108)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 >= 0xFFFFFFFB)
            {
              switch(v41)
              {
                case 1u:
                  v119 |= 0x4Bu;
                  break;
                case 2u:
                  v119 |= 0x8Bu;
                  break;
                case 3u:
                  v119 |= 0xCBu;
                  break;
                case 4u:
                  v119 |= 0x10Bu;
                  break;
                default:
                  v119 |= 0x14Bu;
                  break;
              }
            }
            else
            {
              v119 |= 0xBu;
            }
            goto LABEL_212;
          }
          if (v98)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 < 0xFFFFFFFB)
            {
              v119 |= 0xCu;
              goto LABEL_212;
            }
            switch(v41)
            {
              case 1u:
                v119 |= 0x4Cu;
                goto LABEL_212;
              case 2u:
                v119 |= 0x8Cu;
                goto LABEL_212;
              case 3u:
                v119 |= 0xCCu;
                goto LABEL_212;
              case 4u:
                __int16 v144 = 268;
                break;
              default:
                __int16 v144 = 332;
                break;
            }
          }
          else if (v109)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 < 0xFFFFFFFB)
            {
              v119 |= 0xDu;
              goto LABEL_212;
            }
            switch(v41)
            {
              case 1u:
                v119 |= 0x4Du;
                goto LABEL_212;
              case 2u:
                v119 |= 0x8Du;
                goto LABEL_212;
              case 3u:
                __int16 v144 = 205;
                break;
              case 4u:
                __int16 v144 = 269;
                break;
              default:
                __int16 v144 = 333;
                break;
            }
          }
          else if (v97)
          {
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 < 0xFFFFFFFB)
            {
              v119 |= 0xEu;
              goto LABEL_212;
            }
            switch(v41)
            {
              case 1u:
                v119 |= 0x4Eu;
                goto LABEL_212;
              case 2u:
                __int16 v144 = 142;
                break;
              case 3u:
                __int16 v144 = 206;
                break;
              case 4u:
                __int16 v144 = 270;
                break;
              default:
                __int16 v144 = 334;
                break;
            }
          }
          else
          {
            if (!v110) {
              goto LABEL_212;
            }
            LOWORD(v114) = v114 | (v95 << 8);
            if (v41 - 6 < 0xFFFFFFFB)
            {
              v119 |= 0xFu;
              goto LABEL_212;
            }
            switch(v41)
            {
              case 1u:
                __int16 v144 = 79;
                break;
              case 2u:
                __int16 v144 = 143;
                break;
              case 3u:
                __int16 v144 = 207;
                break;
              case 4u:
                __int16 v144 = 271;
                break;
              default:
                __int16 v144 = 335;
                break;
            }
          }
          v119 |= v144;
          unsigned int v123 = v56;
          unsigned int v122 = v434;
LABEL_211:
          int v124 = v115;
LABEL_212:
          if (v123 == 1)
          {
            unsigned int v125 = v439;
          }
          else
          {
            unsigned int v125 = v439;
            if (v123 == 2) {
              v119 |= 0x10u;
            }
            else {
              v119 |= 0x20u;
            }
          }
          unsigned int v117 = ((((v122 >> 1) & 1) << 13) | ((v122 & 1) << 12)) & 0xFFF03FFF | (((v122 >> 2) & 1) << 14) & 0xFFF07FFF | (v122 >> 3 << 15) | 0x67;
          int v120 = (v125 >> 3) | 0x4000;
          if (v124)
          {
            unsigned int v118 = ((v433 | (v431 << 8)) >> 2) & 0x7F;
            goto LABEL_234;
          }
          if (v445 == 2)
          {
            unsigned int v118 = v433 >> 1;
            __int16 v119 = v119 & 0xF9FF | (__p >> 22);
            __int16 v121 = 38;
          }
          else
          {
            LOWORD(v118) = 0;
LABEL_234:
            __int16 v121 = 6;
          }
        }
      }
      else
      {
        LOWORD(v118) = 0;
        __int16 v119 = 0;
        LOWORD(v120) = 0;
        __int16 v121 = 0;
      }
      LOWORD(__src[0]) = v117;
      WORD1(__src[0]) = v114;
      HIDWORD(__src[0]) = (unsigned __int16)v118;
      LOWORD(__src[1]) = v119;
      WORD1(__src[1]) = v120;
      WORD2(__src[1]) = v121;
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v442, *(char **)(v442 + 8), (char *)__src, (char *)&__src[1] + 6, 14);
      unsigned int v7 = v430;
      uint64_t v17 = v436;
      goto LABEL_658;
    }
    if (v44 <= 7)
    {
      int v45 = dword_242EAA72C[v44];
      int v46 = v43 - 1;
LABEL_62:
      unsigned int v49 = dword_242EAA74C[v46];
      goto LABEL_63;
    }
    int v46 = v43 - 1;
    int v45 = 3;
    if ((v43 - 1) <= 8) {
      goto LABEL_62;
    }
    unsigned int v49 = 1;
    if (v43 > 9)
    {
LABEL_83:
      int v50 = 0;
      goto LABEL_65;
    }
LABEL_63:
    switch((int)v43)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        int v50 = *(void *)v18;
        break;
      default:
        goto LABEL_83;
    }
LABEL_65:
    if ((HIDWORD(v38) - 2) <= 7)
    {
      int v51 = dword_242EAA72C[HIDWORD(v38) - 2];
      int v52 = HIDWORD(v38) - 1;
LABEL_68:
      int v53 = dword_242EAA74C[v52];
      goto LABEL_69;
    }
    int v52 = HIDWORD(v38) - 1;
    int v51 = 3;
    if ((HIDWORD(v38) - 1) <= 8) {
      goto LABEL_68;
    }
    int v53 = 1;
    if (HIDWORD(v38) > 9)
    {
LABEL_85:
      unsigned __int16 v54 = 0;
      char v55 = 0;
      goto LABEL_86;
    }
LABEL_69:
    switch(HIDWORD(v38))
    {
      case 0:
      case 1:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        unsigned __int16 v54 = *(void *)(v18 + 16);
        char v55 = BYTE1(*(void *)(v18 + 16));
        break;
      case 2:
      case 3:
      case 4:
        char v55 = 0;
        unsigned __int16 v54 = *(void *)(v18 + 16);
        break;
      default:
        goto LABEL_85;
    }
LABEL_86:
    if (v37 >= 6) {
      unsigned int v60 = 0;
    }
    else {
      unsigned int v60 = 0x201008040201uLL >> (8 * v37);
    }
    memset((char *)&__src[1] + 6, 0, 18);
    BOOL v61 = v45 == 2;
    if (v36 - 1 > 0xD)
    {
      BOOL v68 = v45 == 2;
      BOOL v69 = v36 == 7 || v36 == 15;
      char v70 = v69;
      if (!v69) {
        BOOL v68 = 0;
      }
      if (v41) {
        int v71 = 0;
      }
      else {
        int v71 = v68;
      }
      BOOL v64 = v41 == 1 && v68;
      BOOL v65 = v41 == 2 && v68;
      BOOL v66 = v41 == 3 && v68;
      int v72 = v41 == 4 && v68;
    }
    else
    {
      unsigned int v62 = 0x3FBFu >> (v36 - 1);
      if (v62)
      {
        BOOL v63 = v41 == 0;
        BOOL v64 = v41 == 1;
        BOOL v65 = v41 == 2;
        BOOL v66 = v41 == 3;
        BOOL v67 = v45 == 2;
      }
      else
      {
        BOOL v63 = v41 == 0;
        BOOL v64 = v41 == 1;
        BOOL v65 = v41 == 2;
        BOOL v66 = v41 == 3;
        BOOL v67 = (v36 == 7 || v36 == 15) && v45 == 2;
        BOOL v61 = v67;
      }
      int v71 = v67 && v63;
      if (!v67)
      {
        BOOL v64 = 0;
        BOOL v65 = 0;
        BOOL v66 = 0;
      }
      int v72 = v41 == 4 && v61;
      BOOL v75 = v36 == 7 || v36 == 15;
      char v70 = v62 | v75;
    }
    int v76 = (v45 == 2) & v70;
    if (v41 == 5) {
      int v77 = v76;
    }
    else {
      int v77 = 0;
    }
    if (v50) {
      BOOL v78 = 0;
    }
    else {
      BOOL v78 = v41 == 8 && v45 == 0;
    }
    LOWORD(v80) = 0;
    BOOL v82 = v51 == 1 || v51 == 3;
    int v83 = v82 & ~v29;
    if (v51 == 2) {
      int v84 = 1;
    }
    else {
      int v84 = v82 & ~v29;
    }
    LOWORD(v85) = 607;
    if (v49 > 2 || (v53 - 1) > 1 || ((v71 | v64 | (v65 || v66) | v72 | v77 | v78) & 1) == 0)
    {
      unsigned __int16 v86 = 0;
      __int16 v87 = 0;
      LOWORD(v88) = 0;
      __int16 v89 = 0;
      goto LABEL_657;
    }
    unsigned __int16 v86 = 0;
    __int16 v87 = 0;
    LOWORD(v88) = 0;
    __int16 v89 = 0;
    if (v84)
    {
      __int16 v90 = (_WORD)v42 << 15;
      if (v49 == 1) {
        goto LABEL_163;
      }
      if (v49 == 2)
      {
        v90 |= 0x40u;
LABEL_163:
        if (v53 != 2)
        {
LABEL_164:
          if (v53 == 1) {
            v90 &= ~0x100u;
          }
LABEL_169:
          unsigned int v88 = v42 >> 1;
          unsigned int v85 = ((((v60 >> 1) & 1) << 13) | ((v60 & 1) << 12)) & 0xFFF03FFF | (((v60 >> 2) & 1) << 14) & 0xFFF07FFF | (v60 >> 3 << 15) | 0x25F;
          int v80 = ((unsigned __int16)(v60 & 0x1F0) >> 4) | 0x54;
          if (v71)
          {
            LOWORD(v80) = v80 | ((_WORD)v50 << 8);
            switch(v36)
            {
              case 1u:
                v90 &= 0xF1C3u;
LABEL_646:
                __int16 v87 = v90 & 0xFFFE;
                if (v83)
                {
                  if ((v51 | 2) != 3) {
                    goto LABEL_656;
                  }
                  if (v51 == 1)
                  {
                    __int16 v87 = v90 & 0xEFFE;
                  }
                  else
                  {
                    if (v51 != 3)
                    {
LABEL_656:
                      unsigned __int16 v86 = 0;
                      __int16 v89 = 6;
                      goto LABEL_657;
                    }
                    __int16 v87 = v90 & 0xEFFE | 0x1000;
                    unsigned __int16 v54 = v54 & 0xFEFF | ((v55 & 1) << 8);
                  }
                  __int16 v89 = 6;
                }
                else
                {
                  if (v51 != 2) {
                    goto LABEL_656;
                  }
                  __int16 v87 = v90 & 0xEFFE | (__p >> 20);
                  __int16 v89 = 38;
                }
                unsigned __int16 v86 = v54;
                goto LABEL_657;
              case 2u:
                __int16 v126 = -3645;
LABEL_352:
                __int16 v90 = v90 & v126 | 4;
                goto LABEL_646;
              case 4u:
                __int16 v127 = -3645;
LABEL_377:
                __int16 v90 = v90 & v127 | 8;
                goto LABEL_646;
              case 8u:
                __int16 v128 = -3645;
LABEL_402:
                __int16 v90 = v90 & v128 | 0xC;
                goto LABEL_646;
              case 0xAu:
                __int16 v129 = -3645;
LABEL_427:
                __int16 v90 = v90 & v129 | 0x10;
                goto LABEL_646;
              case 0xCu:
                __int16 v130 = -3645;
LABEL_452:
                __int16 v90 = v90 & v130 | 0x14;
                goto LABEL_646;
              case 3u:
                __int16 v131 = -3645;
LABEL_477:
                __int16 v90 = v90 & v131 | 0x18;
                goto LABEL_646;
              case 5u:
                __int16 v132 = -3645;
LABEL_502:
                __int16 v90 = v90 & v132 | 0x1C;
                goto LABEL_646;
              case 6u:
                __int16 v133 = -3645;
LABEL_527:
                __int16 v90 = v90 & v133 | 0x20;
                goto LABEL_646;
              case 9u:
                __int16 v134 = -3645;
LABEL_552:
                __int16 v90 = v90 & v134 | 0x24;
                goto LABEL_646;
              case 0xBu:
                __int16 v135 = -3645;
LABEL_577:
                __int16 v90 = v90 & v135 | 0x28;
                goto LABEL_646;
              case 0xDu:
                __int16 v136 = -3645;
LABEL_580:
                __int16 v90 = v90 & v136 | 0x2C;
                goto LABEL_646;
              case 0xEu:
                __int16 v137 = -3645;
LABEL_583:
                __int16 v90 = v90 & v137 | 0x30;
                goto LABEL_646;
              case 7u:
                __int16 v138 = -3645;
LABEL_586:
                __int16 v90 = v90 & v138 | 0x34;
                goto LABEL_646;
            }
            if (v36 != 15)
            {
              v90 &= 0xF1FFu;
              goto LABEL_646;
            }
            __int16 v139 = -3645;
            goto LABEL_607;
          }
          if (v64)
          {
            __int16 v90 = v90 & 0xF1FF | 0x200;
            LOWORD(v80) = v80 | ((_WORD)v50 << 8);
            switch(v36)
            {
              case 1u:
                v90 &= 0xF3C3u;
                goto LABEL_646;
              case 2u:
                __int16 v126 = -3133;
                goto LABEL_352;
              case 4u:
                __int16 v127 = -3133;
                goto LABEL_377;
              case 8u:
                __int16 v128 = -3133;
                goto LABEL_402;
              case 0xAu:
                __int16 v129 = -3133;
                goto LABEL_427;
              case 0xCu:
                __int16 v130 = -3133;
                goto LABEL_452;
              case 3u:
                __int16 v131 = -3133;
                goto LABEL_477;
              case 5u:
                __int16 v132 = -3133;
                goto LABEL_502;
              case 6u:
                __int16 v133 = -3133;
                goto LABEL_527;
              case 9u:
                __int16 v134 = -3133;
                goto LABEL_552;
              case 0xBu:
                __int16 v135 = -3133;
                goto LABEL_577;
              case 0xDu:
                __int16 v136 = -3133;
                goto LABEL_580;
              case 0xEu:
                __int16 v137 = -3133;
                goto LABEL_583;
              case 7u:
                __int16 v138 = -3133;
                goto LABEL_586;
            }
            if (v36 != 15) {
              goto LABEL_646;
            }
            __int16 v139 = -3133;
LABEL_607:
            __int16 v90 = v90 & v139 | 0x38;
            goto LABEL_646;
          }
          if (v65)
          {
            __int16 v90 = v90 & 0xF1FF | 0x400;
            LOWORD(v80) = v80 | ((_WORD)v50 << 8);
            switch(v36)
            {
              case 1u:
                v90 &= 0xF5C3u;
                goto LABEL_646;
              case 2u:
                __int16 v126 = -2621;
                goto LABEL_352;
              case 4u:
                __int16 v127 = -2621;
                goto LABEL_377;
              case 8u:
                __int16 v128 = -2621;
                goto LABEL_402;
              case 0xAu:
                __int16 v129 = -2621;
                goto LABEL_427;
              case 0xCu:
                __int16 v130 = -2621;
                goto LABEL_452;
              case 3u:
                __int16 v131 = -2621;
                goto LABEL_477;
              case 5u:
                __int16 v132 = -2621;
                goto LABEL_502;
              case 6u:
                __int16 v133 = -2621;
                goto LABEL_527;
              case 9u:
                __int16 v134 = -2621;
                goto LABEL_552;
              case 0xBu:
                __int16 v135 = -2621;
                goto LABEL_577;
              case 0xDu:
                __int16 v136 = -2621;
                goto LABEL_580;
              case 0xEu:
                __int16 v137 = -2621;
                goto LABEL_583;
              case 7u:
                __int16 v138 = -2621;
                goto LABEL_586;
            }
            if (v36 != 15) {
              goto LABEL_646;
            }
            __int16 v139 = -2621;
            goto LABEL_607;
          }
          if (v66)
          {
            __int16 v90 = v90 & 0xF1FF | 0x600;
            LOWORD(v80) = v80 | ((_WORD)v50 << 8);
            switch(v36)
            {
              case 1u:
                v90 &= 0xF7C3u;
                goto LABEL_646;
              case 2u:
                __int16 v126 = -2109;
                goto LABEL_352;
              case 4u:
                __int16 v127 = -2109;
                goto LABEL_377;
              case 8u:
                __int16 v128 = -2109;
                goto LABEL_402;
              case 0xAu:
                __int16 v129 = -2109;
                goto LABEL_427;
              case 0xCu:
                __int16 v130 = -2109;
                goto LABEL_452;
              case 3u:
                __int16 v131 = -2109;
                goto LABEL_477;
              case 5u:
                __int16 v132 = -2109;
                goto LABEL_502;
              case 6u:
                __int16 v133 = -2109;
                goto LABEL_527;
              case 9u:
                __int16 v134 = -2109;
                goto LABEL_552;
              case 0xBu:
                __int16 v135 = -2109;
                goto LABEL_577;
              case 0xDu:
                __int16 v136 = -2109;
                goto LABEL_580;
              case 0xEu:
                __int16 v137 = -2109;
                goto LABEL_583;
              case 7u:
                __int16 v143 = -2109;
                goto LABEL_633;
              case 0xFu:
                __int16 v145 = -2109;
                goto LABEL_644;
            }
LABEL_645:
            unsigned int v7 = v430;
            goto LABEL_646;
          }
          if (v72)
          {
            __int16 v90 = v90 & 0xF1FF | 0x800;
            LOWORD(v80) = v80 | ((_WORD)v50 << 8);
            switch(v36)
            {
              case 1u:
                v90 &= 0xF9C3u;
                goto LABEL_646;
              case 2u:
                __int16 v126 = -1597;
                goto LABEL_352;
              case 4u:
                __int16 v127 = -1597;
                goto LABEL_377;
              case 8u:
                __int16 v128 = -1597;
                goto LABEL_402;
              case 0xAu:
                __int16 v129 = -1597;
                goto LABEL_427;
              case 0xCu:
                __int16 v130 = -1597;
                goto LABEL_452;
              case 3u:
                __int16 v131 = -1597;
                goto LABEL_477;
              case 5u:
                __int16 v132 = -1597;
                goto LABEL_502;
              case 6u:
                __int16 v133 = -1597;
                goto LABEL_527;
              case 9u:
                __int16 v134 = -1597;
                goto LABEL_552;
              case 0xBu:
                __int16 v135 = -1597;
                goto LABEL_577;
              case 0xDu:
                __int16 v136 = -1597;
                goto LABEL_580;
              case 0xEu:
                __int16 v142 = -1597;
LABEL_619:
                __int16 v90 = v90 & v142 | 0x30;
                goto LABEL_645;
              case 7u:
                __int16 v143 = -1597;
                goto LABEL_633;
            }
            if (v36 != 15) {
              goto LABEL_645;
            }
            __int16 v145 = -1597;
LABEL_644:
            __int16 v90 = v90 & v145 | 0x38;
            goto LABEL_645;
          }
          if (!v77)
          {
            if (v78)
            {
              __int16 v90 = v90 & 0xF1FF | 0xC00;
              LOWORD(v80) = v80 | ((_WORD)v36 << 8);
            }
            goto LABEL_646;
          }
          __int16 v90 = v90 & 0xF1FF | 0xA00;
          LOWORD(v80) = v80 | ((_WORD)v50 << 8);
          switch(v36)
          {
            case 1u:
              v90 &= 0xFBC3u;
              goto LABEL_646;
            case 2u:
              __int16 v126 = -1085;
              goto LABEL_352;
            case 4u:
              __int16 v127 = -1085;
              goto LABEL_377;
            case 8u:
              __int16 v128 = -1085;
              goto LABEL_402;
            case 0xAu:
              __int16 v129 = -1085;
              goto LABEL_427;
            case 0xCu:
              __int16 v130 = -1085;
              goto LABEL_452;
            case 3u:
              __int16 v131 = -1085;
              goto LABEL_477;
            case 5u:
              __int16 v132 = -1085;
              goto LABEL_502;
            case 6u:
              __int16 v133 = -1085;
              goto LABEL_527;
            case 9u:
              __int16 v134 = -1085;
              goto LABEL_552;
            case 0xBu:
              __int16 v135 = -1085;
              goto LABEL_577;
            case 0xDu:
              __int16 v140 = v90 & 0xFBC3;
              __int16 v141 = 44;
              break;
            case 0xEu:
              __int16 v142 = -1085;
              goto LABEL_619;
            case 7u:
              __int16 v143 = -1085;
LABEL_633:
              __int16 v140 = v90 & v143;
              __int16 v141 = 52;
              break;
            case 0xFu:
              __int16 v145 = -1085;
              goto LABEL_644;
            default:
              goto LABEL_645;
          }
          __int16 v90 = v140 | v141;
          goto LABEL_645;
        }
      }
      else
      {
        v90 |= 0x80u;
        if (v53 != 2) {
          goto LABEL_164;
        }
      }
      v90 |= 0x100u;
      goto LABEL_169;
    }
LABEL_657:
    LOWORD(__src[0]) = v85;
    WORD1(__src[0]) = v80;
    HIDWORD(__src[0]) = v86;
    LOWORD(__src[1]) = v87;
    WORD1(__src[1]) = v88;
    WORD2(__src[1]) = v89;
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v40, *(char **)(v40 + 8), (char *)__src, (char *)&__src[1] + 6, 14);
LABEL_658:
    v18 += 64;
    if (v18 - *v17 == 4096)
    {
      uint64_t v146 = v17[1];
      ++v17;
      uint64_t v18 = v146;
    }
    unint64_t v14 = *(void *)(v450 + 96);
    uint64_t v15 = *(void *)(v450 + 72);
    uint64_t v16 = *(void *)(v450 + 80);
  }
  if (v18) {
    goto LABEL_17;
  }
LABEL_665:
  uint64_t v147 = v450;
  if (*(unsigned char *)(v450 + 114))
  {
    if (!*(unsigned char *)(v450 + 115))
    {
LABEL_669:
      AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::appendStateLoaderInstructions((void *)AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::instance, *(unsigned __int8 **)(v147 + 120), *(void *)(v147 + 48));
      uint64_t v147 = v450;
      *(unsigned char *)(v450 + 115) = 1;
    }
  }
  else
  {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendLdshdr(*(void *)(v450 + 48));
    uint64_t v147 = v450;
    *(unsigned char *)(v450 + 114) = 1;
    if (!*(unsigned char *)(v450 + 115)) {
      goto LABEL_669;
    }
  }
  long long v498 = 0u;
  memset(__src, 0, sizeof(__src));
  uint64_t v148 = *(void *)(v147 + 72);
  if (*(void *)(v147 + 80) != v148)
  {
    unint64_t v149 = *(void *)(v450 + 96);
    v150 = (void *)(v148 + 8 * (v149 >> 6));
    v151 = (unsigned __int16 *)(*v150 + ((v149 & 0x3F) << 6));
    uint64_t v152 = *(void *)(v148 + (((*v7 + v149) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((*v7 + v149) & 0x3F) << 6);
    if (v151 != (unsigned __int16 *)v152)
    {
      int v153 = 0;
      uint64_t v426 = v152;
      while (*((unsigned char *)v151 + 52))
      {
        unsigned int v154 = *((unsigned __int8 *)v151 + 35);
        if (v154 <= 2) {
          LOBYTE(v154) = 2;
        }
        unsigned int v155 = (v154 + (*v151 >> 1));
        if (*(unsigned __int8 *)(v450 + 56) > v155) {
          LOBYTE(v155) = *(unsigned char *)(v450 + 56);
        }
        *(unsigned char *)(v450 + 56) = v155;
        long long v495 = *(_OWORD *)v151;
        __int16 v493 = *(unsigned __int16 *)((char *)v151 + 29);
        char v494 = *((unsigned char *)v151 + 31);
        LOBYTE(v500) = *((unsigned char *)v151 + 51);
        long long v499 = *(_OWORD *)((char *)v151 + 35);
        *(_DWORD *)((char *)v496 + 7) = *((_DWORD *)v151 + 15);
        v496[0] = *(void *)((char *)v151 + 53);
        uint64_t v156 = *(void *)((char *)v151 + 5);
        *(void *)&long long v495 = *(void *)v151;
        *(void *)((char *)&v495 + 5) = v156;
        uint64_t v157 = *(void *)v151;
        unint64_t v158 = *(void *)v151 & 0xFFFFFFFF00000000;
        uint64_t v159 = HIDWORD(*(void *)v151);
        if v159 <= 8 && ((0x16Du >> v159)) {
          unint64_t v158 = qword_242EAA448[v157 >> 32];
        }
        uint64_t v160 = *((void *)v151 + 1);
        v161 = (char *)__src[1];
        int64_t v162 = 8 * ((char *)__src[2] - (char *)__src[1]) - 1;
        int v163 = *((_DWORD *)v151 + 14);
        if (__src[2] == __src[1]) {
          int64_t v162 = 0;
        }
        unint64_t v164 = *((void *)&v498 + 1) + v498;
        if (v162 == *((void *)&v498 + 1) + (void)v498)
        {
          std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity((uint64_t)__src);
          v161 = (char *)__src[1];
          unint64_t v164 = *((void *)&v498 + 1) + v498;
        }
        unint64_t v165 = *(void *)&v161[(v164 >> 3) & 0x1FFFFFFFFFFFFFF8] + ((v164 & 0x3F) << 6);
        *(_OWORD *)unint64_t v165 = v495;
        *(void *)(v165 + 16) = v158 | v157;
        *(unsigned char *)(v165 + 28) = BYTE4(v160);
        *(_DWORD *)(v165 + 24) = v160;
        *(_WORD *)(v165 + 29) = v493;
        *(unsigned char *)(v165 + 31) = v494;
        *(_WORD *)(v165 + 32) = v163;
        *(unsigned char *)(v165 + 34) = 0;
        *(_OWORD *)(v165 + 35) = v499;
        *(unsigned char *)(v165 + 51) = v500;
        *(unsigned char *)(v165 + 52) = 0;
        *(void *)(v165 + 53) = v496[0];
        *(_DWORD *)(v165 + 60) = *(_DWORD *)((char *)v496 + 7);
        ++*((void *)&v498 + 1);
LABEL_822:
        v151 += 32;
        if ((unsigned __int16 *)((char *)v151 - *v150) == (unsigned __int16 *)4096)
        {
          v226 = (unsigned __int16 *)v150[1];
          ++v150;
          v151 = v226;
        }
        if (v151 == (unsigned __int16 *)v152) {
          goto LABEL_824;
        }
      }
      unsigned int v166 = *((unsigned __int8 *)v151 + 60);
      unsigned __int16 v446 = v151[31];
      unint64_t __pa = *(void *)v151;
      uint64_t v167 = *((void *)v151 + 1);
      switch((int)v167)
      {
        case 0:
          if (v153) {
            LODWORD(v167) = 8;
          }
          int v168 = 1;
          break;
        case 1:
          if ((v153 & 2) != 0) {
            LODWORD(v167) = 8;
          }
          int v168 = 2;
          break;
        case 2:
          if ((v153 & 4) != 0) {
            LODWORD(v167) = 8;
          }
          int v168 = 4;
          break;
        case 3:
          int v168 = 8;
          if ((v153 & 8) != 0) {
            LODWORD(v167) = 8;
          }
          break;
        case 4:
          if ((v153 & 0x10) != 0) {
            LODWORD(v167) = 8;
          }
          int v168 = 16;
          break;
        case 5:
          if ((v153 & 0x20) != 0) {
            LODWORD(v167) = 8;
          }
          int v168 = 32;
          break;
        default:
          int v168 = 0;
          break;
      }
      v153 |= v168;
      if (!*((unsigned char *)v151 + 35)) {
        goto LABEL_822;
      }
      int v427 = v153;
      v428 = v150;
      __int16 v169 = 0;
      __int16 v170 = 0;
      unsigned int v171 = 0;
      uint64_t v440 = HIDWORD(__pa) - 2;
      __int16 v443 = *(void *)v151;
      uint64_t v437 = HIDWORD(__pa) - 1;
      v429 = v151;
      while (1)
      {
        unint64_t v172 = *(void *)(v151 + 18);
        unint64_t v173 = HIDWORD(v172);
        if (HIDWORD(v172) <= 9)
        {
          if (((1 << SBYTE4(v172)) & 0x125) != 0)
          {
            LOWORD(v172) = v171 + v172;
          }
          else if (((1 << SBYTE4(v172)) & 0x24A) != 0)
          {
            LOWORD(v172) = v169 + v172;
          }
          else
          {
            LOWORD(v172) = v170 + v172;
          }
        }
        unsigned __int16 v174 = __pa;
        if (HIDWORD(__pa) <= 9)
        {
          if (((1 << SBYTE4(__pa)) & 0x125) != 0)
          {
            unsigned __int16 v174 = v171 + v443;
          }
          else if (((1 << SBYTE4(__pa)) & 0x24A) != 0)
          {
            unsigned __int16 v174 = v443 + v169;
          }
          else
          {
            unsigned __int16 v174 = __pa + v170;
          }
        }
        uint64_t v175 = *(void *)(v450 + 48);
        uint64_t v176 = *(void *)(v151 + 22);
        int v492 = -1;
        uint64_t v489 = 0;
        uint64_t v490 = 0;
        int v491 = 0;
        if ((v173 - 2) <= 7) {
          break;
        }
        int v178 = v173 - 1;
        int v177 = 3;
        if ((v173 - 1) <= 8) {
          goto LABEL_727;
        }
        int v179 = 1;
        if (v173 > 9)
        {
LABEL_733:
          LODWORD(v181) = 0;
          unsigned __int8 v180 = 0;
          goto LABEL_734;
        }
LABEL_728:
        switch((int)v173)
        {
          case 0:
          case 1:
          case 8:
          case 9:
            unsigned __int8 v180 = v172;
            LODWORD(v181) = BYTE1(v172);
            break;
          case 2:
          case 3:
          case 4:
            LODWORD(v181) = 0;
            unsigned __int8 v180 = v172;
            break;
          case 5:
          case 6:
          case 7:
            unsigned __int8 v180 = v172;
            unint64_t v181 = (unint64_t)(unsigned __int16)v172 >> 8;
            break;
          default:
            goto LABEL_733;
        }
LABEL_734:
        int v482 = v180 | (v181 << 8);
        int v483 = 0;
        int v484 = v177;
        int v485 = v179;
        int v486 = 0;
        int v487 = v176;
        int v488 = 0;
        if (v440 > 7) {
          int v182 = 3;
        }
        else {
          int v182 = dword_242EAA72C[v440];
        }
        if (v437 > 8) {
          int v183 = 1;
        }
        else {
          int v183 = dword_242EAA74C[v437];
        }
        switch(HIDWORD(__pa))
        {
          case 0:
          case 1:
          case 8:
          case 9:
            unsigned __int8 v184 = v174;
            LODWORD(v185) = HIBYTE(v174);
            break;
          case 2:
          case 3:
          case 4:
            LODWORD(v185) = 0;
            unsigned __int8 v184 = v174;
            break;
          case 5:
          case 6:
          case 7:
            unsigned __int8 v184 = v174;
            unint64_t v185 = (unint64_t)v174 >> 8;
            break;
          default:
            unsigned __int8 v184 = 0;
            LODWORD(v185) = 0;
            break;
        }
        v477[0] = v184 | (v185 << 8);
        v477[1] = 0;
        v477[2] = v182;
        v477[3] = v183;
        uint64_t v478 = 0x800000000;
        BOOL v479 = (v166 & 3) == 0;
        __int16 v480 = 0;
        char v481 = 0;
        if (v167 >= 6) {
          char v186 = 0;
        }
        else {
          char v186 = 0x201008040201uLL >> (8 * v167);
        }
        LOBYTE(v491) = v186;
        long long v499 = 0u;
        long long v500 = 0u;
        v187 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v477, (unsigned __int8 *)&v499);
        std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v175, *(char **)(v175 + 8), (char *)&v499, (char *)v187, v187 - (unsigned __int8 *)&v499);
        if ((v166 & 3) == 0) {
          goto LABEL_711;
        }
        unsigned __int16 v189 = __pa;
        if (HIDWORD(__pa) <= 9)
        {
          if (((1 << SBYTE4(__pa)) & 0x125) != 0)
          {
            unsigned __int16 v189 = v171 + v443;
          }
          else if (((1 << SBYTE4(__pa)) & 0x24A) != 0)
          {
            unsigned __int16 v189 = v443 + v169;
          }
          else
          {
            unsigned __int16 v189 = __pa + v170;
          }
        }
        __int16 v190 = (v166 & 1) == 0;
        unsigned __int16 v191 = v189;
        switch(HIDWORD(__pa))
        {
          case 0:
          case 1:
          case 2:
          case 5:
          case 8:
            unint64_t v192 = 0;
            unsigned __int16 v191 = v190 + v189;
            break;
          case 3:
            unsigned __int16 v191 = v190 + v189;
            unint64_t v192 = 0x200000000;
            break;
          case 4:
            unsigned __int16 v191 = v189 + 2 * v190;
            unint64_t v192 = 0x300000000;
            break;
          case 6:
            unsigned __int16 v191 = v190 + v189;
            unint64_t v192 = 0x500000000;
            break;
          case 7:
            unsigned __int16 v191 = 2 * v190 + v189;
            unint64_t v192 = 0x600000000;
            break;
          case 9:
            unsigned __int16 v191 = v190 + v189;
            unint64_t v192 = 0x800000000;
            break;
          default:
            unint64_t v192 = __pa & 0xFFFFFFFF00000000;
            break;
        }
        int v193 = (v166 & 3) >> v190;
        unsigned __int16 v194 = v191;
        unint64_t v195 = v191 | v192;
        if ((v446 & 2) == 0 && v193 == 3)
        {
          uint64_t v196 = *(void *)(v450 + 48);
          unint64_t v197 = HIDWORD(v192);
          unint64_t v198 = 0x600000000;
          unint64_t v199 = 0x300000000;
          int v200 = 1;
          int v201 = 3;
          uint64_t v202 = 0x100000000;
          switch((int)v197)
          {
            case 0:
              goto LABEL_782;
            case 2:
              goto LABEL_761;
            case 3:
              unint64_t v199 = 0x400000000;
LABEL_761:
              unint64_t v195 = v199 | v191;
              int v476 = -1;
              unint64_t v197 = HIDWORD(v199);
              uint64_t v473 = 0;
              uint64_t v474 = 0;
              int v475 = 0;
              unsigned int v470 = (v446 + 16) >> 1;
              long long v471 = xmmword_242EA7FE0;
              uint64_t v472 = 5;
              goto LABEL_762;
            case 5:
              goto LABEL_788;
            case 6:
              unint64_t v198 = 0x700000000;
LABEL_788:
              unint64_t v195 = v198 | v191;
              int v476 = -1;
              unint64_t v197 = HIDWORD(v198);
              uint64_t v473 = 0;
              uint64_t v474 = 0;
              int v475 = 0;
              unsigned int v470 = (v446 + 16) >> 1;
              long long v471 = xmmword_242EA7FE0;
              uint64_t v472 = 5;
              goto LABEL_789;
            case 8:
              int v200 = 9;
              int v201 = 4;
              uint64_t v202 = 0x900000000;
LABEL_782:
              unint64_t v195 = v191 | (unint64_t)v202;
              int v476 = -1;
              uint64_t v473 = 0;
              uint64_t v474 = 0;
              int v475 = 0;
              unsigned int v470 = (v446 + 16) >> 1;
              long long v471 = xmmword_242EA7FE0;
              LODWORD(v197) = v200;
              uint64_t v472 = 5;
              goto LABEL_792;
            default:
              int v476 = -1;
              uint64_t v473 = 0;
              uint64_t v474 = 0;
              int v475 = 0;
              unsigned int v470 = (v446 + 16) >> 1;
              long long v471 = xmmword_242EA7FE0;
              uint64_t v472 = 5;
              switch(v197)
              {
                case 9:
                  int v201 = 4;
LABEL_792:
                  int v214 = 2;
                  goto LABEL_795;
                case 7:
LABEL_789:
                  int v201 = 7;
                  break;
                case 4:
LABEL_762:
                  int v201 = 2;
                  break;
                default:
                  int v201 = 3;
                  break;
              }
              int v214 = 1;
              if (v197 <= 9)
              {
                if (((1 << v197) & 0x24A) != 0) {
                  goto LABEL_792;
                }
                if (((1 << v197) & 0x90) != 0) {
                  int v214 = 3;
                }
              }
LABEL_795:
              switch((int)v197)
              {
                case 0:
                case 1:
                case 8:
                case 9:
                  LOBYTE(v215) = HIBYTE(v191);
                  break;
                case 2:
                case 3:
                case 4:
                  LOBYTE(v215) = 0;
                  break;
                case 5:
                case 6:
                case 7:
                  unint64_t v215 = v195 >> 8;
                  break;
                default:
                  LOBYTE(v195) = 0;
                  LOBYTE(v215) = 0;
                  break;
              }
              v465[0] = v195 | (v215 << 8);
              v465[1] = 0;
              v465[2] = v201;
              v465[3] = v214;
              uint64_t v466 = 0x800000000;
              char v467 = 1;
              __int16 v468 = 0;
              char v469 = 0;
              LOBYTE(v475) = 0;
              long long v499 = 0u;
              long long v500 = 0u;
              v216 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v465, (unsigned __int8 *)&v499);
              std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v196, *(char **)(v196 + 8), (char *)&v499, (char *)v216, v216 - (unsigned __int8 *)&v499);
              __int16 v204 = 2;
              break;
          }
          goto LABEL_710;
        }
        v188.i32[0] = v193;
        uint8x8_t v203 = (uint8x8_t)vcnt_s8(v188);
        v203.i16[0] = vaddlv_u8(v203);
        __int16 v204 = v203.i16[0];
        if (!v193) {
          goto LABEL_710;
        }
        unsigned int v432 = v203.i32[0];
        unint64_t v205 = HIDWORD(v192);
        unsigned __int16 v206 = v195;
        if (HIDWORD(v192) <= 9) {
          unsigned __int16 v206 = v194;
        }
        uint64_t v207 = *(void *)(v450 + 48);
        int v464 = -1;
        uint64_t v461 = 0;
        uint64_t v462 = 0;
        int v463 = 0;
        unsigned int v458 = (v446 + 16) >> 1;
        long long v459 = xmmword_242EA7FD0;
        uint64_t v460 = 5;
        if ((HIDWORD(v192) - 2) > 7)
        {
          int v209 = HIDWORD(v192) - 1;
          int v208 = 3;
          if ((v205 - 1) > 8)
          {
            int v210 = 1;
            goto LABEL_777;
          }
        }
        else
        {
          int v208 = dword_242EAA72C[HIDWORD(v192) - 2];
          int v209 = HIDWORD(v192) - 1;
        }
        int v210 = dword_242EAA74C[v209];
LABEL_777:
        switch((int)v205)
        {
          case 0:
          case 1:
          case 8:
          case 9:
            unsigned int v211 = (v446 + 16) >> 1;
            unsigned __int8 v212 = v206;
            LODWORD(v213) = HIBYTE(v206);
            break;
          case 2:
          case 3:
          case 4:
            unsigned int v211 = (v446 + 16) >> 1;
            LODWORD(v213) = 0;
            unsigned __int8 v212 = v206;
            break;
          case 5:
          case 6:
          case 7:
            unsigned int v211 = (v446 + 16) >> 1;
            unsigned __int8 v212 = v206;
            unint64_t v213 = (unint64_t)v206 >> 8;
            break;
          default:
            unsigned int v211 = (v446 + 16) >> 1;
            unsigned __int8 v212 = 0;
            LODWORD(v213) = 0;
            break;
        }
        v451[0] = v212 | (v213 << 8);
        v451[1] = 0;
        int v452 = v208;
        int v453 = v210;
        uint64_t v454 = 0x800000000;
        char v455 = 1;
        __int16 v456 = 0;
        char v457 = 0;
        long long v499 = 0u;
        long long v500 = 0u;
        v217 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v451, (unsigned __int8 *)&v499);
        std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v207, *(char **)(v207 + 8), (char *)&v499, (char *)v217, v217 - (unsigned __int8 *)&v499);
        __int16 v204 = v432;
        if (v432 >= 2)
        {
          if (v205 > 9) {
            goto LABEL_808;
          }
          if (((1 << v205) & 0x125) == 0)
          {
            if (((1 << v205) & 0x24A) != 0)
            {
              LOWORD(v195) = v194 + 2;
              goto LABEL_808;
            }
            LOWORD(v195) = v194 + 4;
            unint64_t v218 = (unsigned __int16)(v194 + 4);
            uint64_t v461 = 0;
            uint64_t v462 = 0;
            int v463 = 0;
            unsigned int v458 = v211 + 1;
            uint64_t v460 = 5;
            int v219 = v205 - 2;
LABEL_812:
            int v221 = dword_242EAA72C[v219];
            int v220 = v205 - 1;
            goto LABEL_813;
          }
          LOWORD(v195) = v194 + 1;
LABEL_808:
          unint64_t v218 = (unsigned __int16)v195;
          uint64_t v461 = 0;
          uint64_t v462 = 0;
          int v463 = 0;
          unsigned int v458 = v211 + 1;
          uint64_t v460 = 5;
          int v219 = v205 - 2;
          if ((v205 - 2) <= 7) {
            goto LABEL_812;
          }
          int v220 = v205 - 1;
          int v221 = 3;
          if ((v205 - 1) <= 8) {
LABEL_813:
          }
            int v222 = dword_242EAA74C[v220];
          else {
            int v222 = 1;
          }
          uint64_t v223 = *(void *)(v450 + 48);
          switch((int)v205)
          {
            case 0:
            case 1:
            case 8:
            case 9:
              LOBYTE(v218) = v195;
              LODWORD(v224) = BYTE1(v195);
              break;
            case 2:
            case 3:
            case 4:
              LODWORD(v224) = 0;
              LOBYTE(v218) = v195;
              break;
            case 5:
            case 6:
            case 7:
              unint64_t v224 = v218 >> 8;
              break;
            default:
              LOBYTE(v218) = 0;
              LODWORD(v224) = 0;
              break;
          }
          v451[0] = v218 | (v224 << 8);
          int v452 = v221;
          int v453 = v222;
          char v455 = 1;
          __int16 v456 = 0;
          char v457 = 0;
          long long v499 = 0u;
          long long v500 = 0u;
          v225 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v451, (unsigned __int8 *)&v499);
          std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v223, *(char **)(v223 + 8), (char *)&v499, (char *)v225, v225 - (unsigned __int8 *)&v499);
          v151 = v429;
          __int16 v204 = v432;
          goto LABEL_710;
        }
        v151 = v429;
LABEL_710:
        v446 += 2 * v204;
LABEL_711:
        v166 >>= 2;
        ++v171;
        v170 += 4;
        v169 += 2;
        LODWORD(v167) = 8;
        if (v171 >= *((unsigned __int8 *)v151 + 35))
        {
          v150 = v428;
          uint64_t v152 = v426;
          int v153 = v427;
          goto LABEL_822;
        }
      }
      int v177 = dword_242EAA72C[(v173 - 2)];
      int v178 = v173 - 1;
LABEL_727:
      int v179 = dword_242EAA74C[v178];
      goto LABEL_728;
    }
  }
LABEL_824:
  if (v425 == __src) {
    goto LABEL_1056;
  }
  v227 = (const void **)((char *)__src[1] + 8 * ((unint64_t)v498 >> 6));
  if (__src[2] == __src[1])
  {
    v228 = 0;
    goto LABEL_832;
  }
  v228 = (char *)*v227 + 64 * (unint64_t)(v498 & 0x3F);
  v229 = (char *)__src[1] + 8 * ((*((void *)&v498 + 1) + (void)v498) >> 6);
  if ((unsigned char *)(*(void *)v229 + (((*((void *)&v498 + 1) + (void)v498) & 0x3FLL) << 6)) == v228)
  {
LABEL_832:
    unint64_t v231 = 0;
    v237 = (void *)v450;
    v233 = (uint64_t *)(v450 + 104);
    goto LABEL_834;
  }
  uint64_t v230 = (uint64_t)((unint64_t)(v498 & 0x3F) << 6) >> 6;
  unint64_t v231 = (((*((void *)&v498 + 1) + (void)v498) & 0x3FLL) << 6 >> 6) + 8 * (v229 - (char *)v227) - v230;
  v233 = (uint64_t *)(v450 + 104);
  unint64_t v232 = *(void *)(v450 + 104);
  if (v232 < v231)
  {
    if (v232)
    {
      uint64_t v234 = v230 + v232;
      if (v234 < 1)
      {
        unint64_t v256 = 63 - v234;
        v235 = &v227[-(v256 >> 6)];
        unint64_t v236 = (unint64_t)*v235 + 64 * (unint64_t)(~(_BYTE)v256 & 0x3F);
      }
      else
      {
        v235 = &v227[(unint64_t)v234 >> 6];
        unint64_t v236 = (unint64_t)*v235 + 64 * (unint64_t)(v234 & 0x3F);
      }
    }
    else
    {
      unint64_t v236 = (unint64_t)*v227 + 64 * (unint64_t)(v498 & 0x3F);
      v235 = (const void **)((char *)__src[1] + 8 * ((unint64_t)v498 >> 6));
    }
    uint64_t v257 = *(void *)(v450 + 72);
    if (*(void *)(v450 + 80) == v257) {
      uint64_t v258 = 0;
    }
    else {
      uint64_t v258 = *(void *)(v257 + 8 * (*(void *)(v450 + 96) >> 6)) + ((*(void *)(v450 + 96) & 0x3FLL) << 6);
    }
    *(void *)&long long v499 = v257 + 8 * (*(void *)(v450 + 96) >> 6);
    *((void *)&v499 + 1) = v258;
    std::__for_each_segment[abi:nn180100]<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad**,long,64l>>>(v227, v228, v235, (unsigned char *)v236, (uint64_t)&v499);
    v259 = *(char **)(v450 + 72);
    v260 = *(char **)(v450 + 80);
    uint64_t v261 = v260 - v259;
    if (v260 == v259) {
      uint64_t v262 = 0;
    }
    else {
      uint64_t v262 = 8 * (v260 - v259) - 1;
    }
    unint64_t v263 = *(void *)(v450 + 96);
    uint64_t v264 = *(void *)(v450 + 104);
    uint64_t v265 = v231 - v264;
    unint64_t v266 = v264 + v263;
    unint64_t v267 = v262 - (v264 + v263);
    BOOL v268 = v231 - v264 >= v267;
    unint64_t v269 = v231 - v264 - v267;
    if (v269 == 0 || !v268)
    {
      uint64_t v278 = *(void *)(v450 + 104);
LABEL_1036:
      v406 = &v259[8 * (v266 >> 6)];
      if (v260 == v259) {
        v407 = 0;
      }
      else {
        v407 = (_OWORD *)(*(void *)v406 + ((v266 & 0x3F) << 6));
      }
      uint64_t v408 = (uint64_t)v407;
      v409 = v406;
      if (v231 != v264)
      {
        uint64_t v410 = v265 + (((uint64_t)v407 - *(void *)v406) >> 6);
        if (v410 < 1)
        {
          unint64_t v411 = 63 - v410;
          LOBYTE(v410) = ~(63 - v410);
          v409 = &v406[-8 * (v411 >> 6)];
        }
        else
        {
          v409 = &v406[8 * ((unint64_t)v410 >> 6)];
        }
        uint64_t v408 = *(void *)v409 + ((unint64_t)(v410 & 0x3F) << 6);
      }
      while (v407 != (_OWORD *)v408)
      {
        uint64_t v412 = v408;
        if (v406 != v409) {
          uint64_t v412 = *(void *)v406 + 4096;
        }
        if (v407 == (_OWORD *)v412)
        {
          uint64_t v412 = (uint64_t)v407;
        }
        else
        {
          v413 = v407;
          do
          {
            long long v414 = *(_OWORD *)v236;
            long long v415 = *(_OWORD *)(v236 + 16);
            long long v416 = *(_OWORD *)(v236 + 48);
            v413[2] = *(_OWORD *)(v236 + 32);
            v413[3] = v416;
            _OWORD *v413 = v414;
            v413[1] = v415;
            v236 += 64;
            if (v236 - (void)*v235 == 4096)
            {
              unint64_t v417 = (unint64_t)v235[1];
              ++v235;
              unint64_t v236 = v417;
            }
            v413 += 4;
          }
          while (v413 != (_OWORD *)v412);
          uint64_t v278 = *v233;
        }
        v278 += (v412 - (uint64_t)v407) >> 6;
        uint64_t *v233 = v278;
        if (v406 == v409) {
          break;
        }
        v418 = (_OWORD *)*((void *)v406 + 1);
        v406 += 8;
        v407 = v418;
      }
      goto LABEL_1056;
    }
    uint64_t v438 = *(void *)(v450 + 104);
    uint64_t v441 = v231 - v264;
    if (v260 == v259) {
      unint64_t v270 = v269 + 1;
    }
    else {
      unint64_t v270 = v269;
    }
    if ((v270 & 0x3F) != 0) {
      unint64_t v271 = (v270 >> 6) + 1;
    }
    else {
      unint64_t v271 = v270 >> 6;
    }
    if (v271 >= v263 >> 6) {
      unint64_t v272 = v263 >> 6;
    }
    else {
      unint64_t v272 = v271;
    }
    *(void *)v444 = v231;
    if (v271 > v263 >> 6)
    {
      unint64_t v273 = v271 - v272;
      uint64_t v274 = *(void *)(v450 + 88) - *(void *)(v450 + 64);
      uint64_t v275 = v261 >> 3;
      if (v273 > (v274 >> 3) - (v261 >> 3))
      {
        if (v274 >> 2 <= v273 + v275) {
          unint64_t v276 = v273 + v275;
        }
        else {
          unint64_t v276 = v274 >> 2;
        }
        if (v276)
        {
          if (v276 >> 61) {
LABEL_1070:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          v277 = (char *)operator new(8 * v276);
        }
        else
        {
          v277 = 0;
        }
        uint64_t v435 = v272 << 6;
        v306 = &v277[8 * (v275 - v272)];
        __pb = v277;
        v307 = &v277[8 * v276];
        v260 = v306;
        while (1)
        {
          v308 = operator new(0x1000uLL);
          if (v260 == v307) {
            break;
          }
LABEL_916:
          *(void *)v260 = v308;
          v260 += 8;
          if (!--v273)
          {
            v330 = *(void **)(v450 + 72);
            if (!v272)
            {
              v331 = v306;
LABEL_944:
              v332 = *(void **)(v450 + 80);
              if (v332 != v330)
              {
                v333 = __pb;
                while (v331 != v333)
                {
LABEL_974:
                  uint64_t v354 = *--v332;
                  *((void *)v331 - 1) = v354;
                  v331 -= 8;
                  if (v332 == *(void **)(v450 + 72)) {
                    goto LABEL_998;
                  }
                }
                if (v260 < v307)
                {
                  uint64_t v355 = (v307 - v260) >> 3;
                  if (v355 >= -1) {
                    uint64_t v356 = v355 + 1;
                  }
                  else {
                    uint64_t v356 = v355 + 2;
                  }
                  uint64_t v357 = v356 >> 1;
                  v331 = &v333[8 * (v356 >> 1)];
                  v358 = v333;
                  if (v260 != v333)
                  {
                    memmove(v331, v333, v260 - v333);
                    v358 = v260;
                  }
                  v260 = &v358[8 * v357];
                  goto LABEL_974;
                }
                if (v307 == v333) {
                  unint64_t v359 = 1;
                }
                else {
                  unint64_t v359 = (v307 - v333) >> 2;
                }
                if (v359 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v360 = (char *)operator new(8 * v359);
                v361 = v360;
                unint64_t v362 = (v359 + 3) >> 2;
                v331 = &v360[8 * v362];
                v307 = &v360[8 * v359];
                int64_t v363 = v260 - v333;
                BOOL v67 = v260 == v333;
                v260 = v331;
                if (!v67)
                {
                  v260 = &v331[v363 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v364 = v363 - 8;
                  v365 = &v360[8 * v362];
                  v366 = v333;
                  if (v364 >= 0x38)
                  {
                    uint64_t v367 = 8 * v362;
                    v365 = &v360[8 * v362];
                    v366 = v333;
                    if ((unint64_t)(v365 - v333) >= 0x20)
                    {
                      uint64_t v368 = (v364 >> 3) + 1;
                      uint64_t v369 = 8 * (v368 & 0x3FFFFFFFFFFFFFFCLL);
                      v365 = &v331[v369];
                      v370 = (long long *)(v333 + 16);
                      v371 = &v360[v367 + 16];
                      uint64_t v372 = v368 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v373 = *v370;
                        *((_OWORD *)v371 - 1) = *(v370 - 1);
                        *(_OWORD *)v371 = v373;
                        v370 += 2;
                        v371 += 32;
                        v372 -= 4;
                      }
                      while (v372);
                      if (v368 != (v368 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        v366 = &v333[v369];
                        goto LABEL_993;
                      }
LABEL_995:
                      operator delete(v333);
LABEL_996:
                      v333 = v361;
                      goto LABEL_974;
                    }
                  }
                  do
                  {
LABEL_993:
                    uint64_t v374 = *(void *)v366;
                    v366 += 8;
                    *(void *)v365 = v374;
                    v365 += 8;
                  }
                  while (v365 != v260);
                }
                if (v333) {
                  goto LABEL_995;
                }
                goto LABEL_996;
              }
              v333 = __pb;
LABEL_998:
              v279 = (void *)v450;
              v375 = *(void **)(v450 + 64);
              *(void *)(v450 + 64) = v333;
              *(void *)(v450 + 72) = v331;
              *(void *)(v450 + 80) = v260;
              *(void *)(v450 + 88) = v307;
              *(void *)(v450 + 96) -= v435;
              if (v375)
              {
                operator delete(v375);
                v260 = *(char **)(v450 + 80);
              }
LABEL_1035:
              uint64_t v278 = v279[13];
              v259 = (char *)v279[9];
              unint64_t v266 = v279[12] + v278;
              unint64_t v231 = *(void *)v444;
              v233 = (uint64_t *)(v450 + 104);
              uint64_t v264 = v438;
              uint64_t v265 = v441;
              goto LABEL_1036;
            }
            while (2)
            {
              if (v260 != v307)
              {
                v331 = v306;
                goto LABEL_947;
              }
              if (v306 > __pb)
              {
                uint64_t v334 = (v306 - __pb) >> 3;
                if (v334 >= -1) {
                  uint64_t v335 = v334 + 1;
                }
                else {
                  uint64_t v335 = v334 + 2;
                }
                uint64_t v336 = v335 >> 1;
                v337 = &v306[-8 * (v335 >> 1)];
                v338 = v307;
                if (v307 != v306)
                {
                  memmove(v337, v306, v307 - v306);
                  v338 = v306;
                }
                v260 = &v337[v307 - v306];
                v331 = &v338[-8 * v336];
                goto LABEL_947;
              }
              if (v307 == __pb) {
                unint64_t v339 = 1;
              }
              else {
                unint64_t v339 = (v307 - __pb) >> 2;
              }
              if (v339 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v340 = (char *)operator new(8 * v339);
              v341 = v340;
              unint64_t v342 = v339 >> 2;
              v331 = &v340[8 * (v339 >> 2)];
              v260 = v331;
              int64_t v343 = v307 - v306;
              if (v307 != v306)
              {
                v260 = &v331[v343 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v344 = v343 - 8;
                if (v344 >= 0x38)
                {
                  uint64_t v346 = 8 * v342;
                  if ((unint64_t)(&v340[8 * v342] - v306) < 0x20)
                  {
                    v345 = &v340[8 * (v339 >> 2)];
                    goto LABEL_969;
                  }
                  uint64_t v347 = (v344 >> 3) + 1;
                  uint64_t v348 = 8 * (v347 & 0x3FFFFFFFFFFFFFFCLL);
                  v345 = &v331[v348];
                  v349 = (long long *)(v306 + 16);
                  v350 = &v340[v346 + 16];
                  uint64_t v351 = v347 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v352 = *v349;
                    *((_OWORD *)v350 - 1) = *(v349 - 1);
                    *(_OWORD *)v350 = v352;
                    v349 += 2;
                    v350 += 32;
                    v351 -= 4;
                  }
                  while (v351);
                  if (v347 != (v347 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v306 += v348;
                    goto LABEL_969;
                  }
                }
                else
                {
                  v345 = &v340[8 * (v339 >> 2)];
                  do
                  {
LABEL_969:
                    uint64_t v353 = *(void *)v306;
                    v306 += 8;
                    *(void *)v345 = v353;
                    v345 += 8;
                  }
                  while (v345 != v260);
                }
              }
              v307 = &v340[8 * v339];
              if (__pb) {
                operator delete(__pb);
              }
              __pb = v341;
LABEL_947:
              *(void *)v260 = *v330;
              v260 += 8;
              v330 = (void *)(*(void *)(v450 + 72) + 8);
              *(void *)(v450 + 72) = v330;
              v306 = v331;
              if (!--v272) {
                goto LABEL_944;
              }
              continue;
            }
          }
        }
        if (v306 > __pb)
        {
          uint64_t v309 = (v306 - __pb) >> 3;
          if (v309 >= -1) {
            uint64_t v310 = v309 + 1;
          }
          else {
            uint64_t v310 = v309 + 2;
          }
          uint64_t v311 = v310 >> 1;
          v312 = &v306[-8 * (v310 >> 1)];
          v313 = v307;
          if (v307 != v306)
          {
            memmove(v312, v306, v307 - v306);
            v313 = v306;
          }
          v260 = &v312[v307 - v306];
          v306 = &v313[-8 * v311];
          goto LABEL_916;
        }
        if (v307 == __pb) {
          unint64_t v314 = 1;
        }
        else {
          unint64_t v314 = (v307 - __pb) >> 2;
        }
        if (v314 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v315 = (char *)operator new(8 * v314);
        v316 = v315;
        unint64_t v317 = v314 >> 2;
        v318 = &v315[8 * (v314 >> 2)];
        v260 = v318;
        int64_t v319 = v307 - v306;
        if (v307 != v306)
        {
          v260 = &v318[v319 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v320 = v319 - 8;
          if (v320 < 0x38)
          {
            v321 = &v315[8 * (v314 >> 2)];
            goto LABEL_937;
          }
          uint64_t v322 = 8 * v317;
          if ((unint64_t)(&v315[8 * v317] - v306) < 0x20)
          {
            v321 = &v315[8 * (v314 >> 2)];
            goto LABEL_937;
          }
          uint64_t v323 = (v320 >> 3) + 1;
          uint64_t v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
          v321 = &v318[v324];
          v325 = (long long *)(v306 + 16);
          v326 = &v315[v322 + 16];
          uint64_t v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v328 = *v325;
            *((_OWORD *)v326 - 1) = *(v325 - 1);
            *(_OWORD *)v326 = v328;
            v325 += 2;
            v326 += 32;
            v327 -= 4;
          }
          while (v327);
          if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v306 += v324;
            do
            {
LABEL_937:
              uint64_t v329 = *(void *)v306;
              v306 += 8;
              *(void *)v321 = v329;
              v321 += 8;
            }
            while (v321 != v260);
          }
        }
        v307 = &v315[8 * v314];
        if (__pb)
        {
          v306 = &v315[8 * (v314 >> 2)];
          operator delete(__pb);
        }
        else
        {
          v306 = v318;
        }
        __pb = v316;
        goto LABEL_916;
      }
      if (v273)
      {
        while (*(void *)(v450 + 88) != *(void *)(v450 + 80))
        {
          *(void *)&long long v499 = operator new(0x1000uLL);
          std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_back((char **)v425, &v499);
          if (!--v273)
          {
            v260 = *(char **)(v450 + 80);
            goto LABEL_1006;
          }
        }
        for (uint64_t i = 0; i != v273; ++i)
        {
          *(void *)&long long v499 = operator new(0x1000uLL);
          std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_front(v425, &v499);
          v260 = *(char **)(v450 + 80);
          if (&v260[-*(void *)(v450 + 72)] == (char *)8) {
            uint64_t v377 = 63;
          }
          else {
            uint64_t v377 = 64;
          }
          uint64_t v378 = v377 + *(void *)(v450 + 96);
          *(void *)(v450 + 96) = v378;
        }
        v272 += v273;
        uint64_t v379 = v450;
      }
      else
      {
LABEL_1006:
        uint64_t v379 = v450;
        uint64_t v378 = *(void *)(v450 + 96);
      }
      *(void *)(v379 + 96) = v378 - (v272 << 6);
      if (v272)
      {
        v279 = (void *)v450;
        while (1)
        {
          v380 = (void *)v279[9];
          v382 = (char *)(v380 + 1);
          uint64_t v381 = *v380;
          v279[9] = v380 + 1;
          if (v260 == (char *)v279[11])
          {
            v383 = (char *)*v425;
            if (v382 <= *v425)
            {
              if (v260 == v383) {
                unint64_t v390 = 1;
              }
              else {
                unint64_t v390 = (v260 - v383) >> 2;
              }
              if (v390 >> 61) {
                goto LABEL_1070;
              }
              v391 = operator new(8 * v390);
              unint64_t v392 = v390 >> 2;
              v393 = &v391[8 * (v390 >> 2)];
              int64_t v394 = v260 - v382;
              BOOL v67 = v260 == v382;
              v260 = v393;
              if (!v67)
              {
                v260 = &v393[v394 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v395 = v394 - 8;
                if (v395 >= 0x38)
                {
                  uint64_t v397 = 8 * v392;
                  unint64_t v398 = &v391[8 * v392] - v382;
                  v396 = &v391[8 * (v390 >> 2)];
                  if (v398 < 0x20) {
                    goto LABEL_1031;
                  }
                  uint64_t v399 = (v395 >> 3) + 1;
                  uint64_t v400 = 8 * (v399 & 0x3FFFFFFFFFFFFFFCLL);
                  v396 = &v393[v400];
                  v401 = (long long *)(v380 + 3);
                  v402 = &v391[v397 + 16];
                  uint64_t v403 = v399 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v404 = *v401;
                    *(v402 - 1) = *(v401 - 1);
                    _OWORD *v402 = v404;
                    v401 += 2;
                    v402 += 2;
                    v403 -= 4;
                  }
                  while (v403);
                  if (v399 != (v399 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v382 += v400;
                    goto LABEL_1031;
                  }
                }
                else
                {
                  v396 = &v391[8 * (v390 >> 2)];
                  do
                  {
LABEL_1031:
                    uint64_t v405 = *(void *)v382;
                    v382 += 8;
                    *(void *)v396 = v405;
                    v396 += 8;
                  }
                  while (v396 != v260);
                }
              }
              v279 = (void *)v450;
              *(void *)(v450 + 64) = v391;
              *(void *)(v450 + 72) = v393;
              *(void *)(v450 + 80) = v260;
              *(void *)(v450 + 88) = &v391[8 * v390];
              if (v383)
              {
                operator delete(v383);
                v260 = *(char **)(v450 + 80);
              }
              goto LABEL_1010;
            }
            uint64_t v384 = (v382 - (unsigned char *)*v425) >> 3;
            if (v384 >= -1) {
              uint64_t v385 = v384 + 1;
            }
            else {
              uint64_t v385 = v384 + 2;
            }
            uint64_t v386 = v385 >> 1;
            v387 = &v382[-8 * (v385 >> 1)];
            int64_t v388 = v260 - v382;
            v279 = (void *)v450;
            if (v260 != v382)
            {
              memmove(&v382[-8 * (v385 >> 1)], v382, v260 - v382);
              v260 = *(char **)(v450 + 72);
            }
            v389 = &v260[-8 * v386];
            v260 = &v387[v388];
            *(void *)(v450 + 72) = v389;
            *(void *)(v450 + 80) = &v387[v388];
          }
          else
          {
            v279 = (void *)v450;
          }
LABEL_1010:
          *(void *)v260 = v381;
          v260 = (char *)(v279[10] + 8);
          v279[10] = v260;
          if (!--v272) {
            goto LABEL_1035;
          }
        }
      }
LABEL_1034:
      v279 = (void *)v450;
      goto LABEL_1035;
    }
    *(void *)(v450 + 96) = v263 - (v272 << 6);
    if (!v272) {
      goto LABEL_1034;
    }
    v279 = (void *)v450;
    while (1)
    {
      v280 = (void *)v279[9];
      v282 = (char *)(v280 + 1);
      uint64_t v281 = *v280;
      v279[9] = v280 + 1;
      if (v260 == (char *)v279[11])
      {
        v283 = (char *)*v425;
        if (v282 <= *v425)
        {
          if (v260 == v283) {
            unint64_t v290 = 1;
          }
          else {
            unint64_t v290 = (v260 - v283) >> 2;
          }
          if (v290 >> 61) {
            goto LABEL_1070;
          }
          v291 = operator new(8 * v290);
          unint64_t v292 = v290 >> 2;
          v293 = &v291[8 * (v290 >> 2)];
          int64_t v294 = v260 - v282;
          BOOL v67 = v260 == v282;
          v260 = v293;
          if (!v67)
          {
            v260 = &v293[v294 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v295 = v294 - 8;
            if (v295 >= 0x38)
            {
              uint64_t v297 = 8 * v292;
              unint64_t v298 = &v291[8 * v292] - v282;
              v296 = &v291[8 * (v290 >> 2)];
              if (v298 < 0x20) {
                goto LABEL_906;
              }
              uint64_t v299 = (v295 >> 3) + 1;
              uint64_t v300 = 8 * (v299 & 0x3FFFFFFFFFFFFFFCLL);
              v296 = &v293[v300];
              v301 = (long long *)(v280 + 3);
              v302 = &v291[v297 + 16];
              uint64_t v303 = v299 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v304 = *v301;
                *(v302 - 1) = *(v301 - 1);
                _OWORD *v302 = v304;
                v301 += 2;
                v302 += 2;
                v303 -= 4;
              }
              while (v303);
              if (v299 != (v299 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v282 += v300;
                goto LABEL_906;
              }
            }
            else
            {
              v296 = &v291[8 * (v290 >> 2)];
              do
              {
LABEL_906:
                uint64_t v305 = *(void *)v282;
                v282 += 8;
                *(void *)v296 = v305;
                v296 += 8;
              }
              while (v296 != v260);
            }
          }
          v279 = (void *)v450;
          *(void *)(v450 + 64) = v291;
          *(void *)(v450 + 72) = v293;
          *(void *)(v450 + 80) = v260;
          *(void *)(v450 + 88) = &v291[8 * v290];
          if (v283)
          {
            operator delete(v283);
            v260 = *(char **)(v450 + 80);
          }
          goto LABEL_885;
        }
        uint64_t v284 = (v282 - (unsigned char *)*v425) >> 3;
        if (v284 >= -1) {
          uint64_t v285 = v284 + 1;
        }
        else {
          uint64_t v285 = v284 + 2;
        }
        uint64_t v286 = v285 >> 1;
        v287 = &v282[-8 * (v285 >> 1)];
        int64_t v288 = v260 - v282;
        v279 = (void *)v450;
        if (v260 != v282)
        {
          memmove(&v282[-8 * (v285 >> 1)], v282, v260 - v282);
          v260 = *(char **)(v450 + 72);
        }
        v289 = &v260[-8 * v286];
        v260 = &v287[v288];
        *(void *)(v450 + 72) = v289;
        *(void *)(v450 + 80) = &v287[v288];
      }
      else
      {
        v279 = (void *)v450;
      }
LABEL_885:
      *(void *)v260 = v281;
      v260 = (char *)(v279[10] + 8);
      v279[10] = v260;
      if (!--v272) {
        goto LABEL_1035;
      }
    }
  }
  v237 = (void *)v450;
LABEL_834:
  uint64_t v238 = v237[9];
  v239 = (void *)(v238 + 8 * (v237[12] >> 6));
  if (v237[10] == v238)
  {
    uint64_t v240 = 0;
    if (v231)
    {
LABEL_836:
      uint64_t v241 = v231 + ((v228 - (unsigned char *)*v227) >> 6);
      if (v241 < 1)
      {
        unint64_t v244 = 63 - v241;
        v242 = &v227[-(v244 >> 6)];
        v243 = (char *)*v242 + 64 * (unint64_t)(~(_BYTE)v244 & 0x3F);
      }
      else
      {
        v242 = &v227[(unint64_t)v241 >> 6];
        v243 = (char *)*v242 + 64 * (unint64_t)(v241 & 0x3F);
      }
      goto LABEL_841;
    }
  }
  else
  {
    uint64_t v240 = *v239 + ((v237[12] & 0x3FLL) << 6);
    if (v231) {
      goto LABEL_836;
    }
  }
  v243 = v228;
  v242 = (const void **)((char *)__src[1] + 8 * ((unint64_t)v498 >> 6));
LABEL_841:
  *(void *)&long long v499 = v239;
  *((void *)&v499 + 1) = v240;
  std::__for_each_segment[abi:nn180100]<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad**,long,64l>>>(v227, v228, v242, v243, (uint64_t)&v499);
  uint64_t v245 = *(void *)(v450 + 96);
  uint64_t v246 = *(void *)(v450 + 104);
  uint64_t v248 = *(void *)(v450 + 72);
  uint64_t v247 = *(void *)(v450 + 80);
  v249 = (void *)(v248 + 8 * ((unint64_t)(v245 + v246) >> 6));
  if (v247 == v248)
  {
    unint64_t v250 = 0;
    if (!*((void *)&v499 + 1)) {
      goto LABEL_1056;
    }
  }
  else
  {
    unint64_t v250 = *v249 + ((unint64_t)(((_BYTE)v245 + (_BYTE)v246) & 0x3F) << 6);
    if (v250 == *((void *)&v499 + 1)) {
      goto LABEL_1056;
    }
  }
  uint64_t v251 = ((uint64_t)(v250 - *v249) >> 6)
       + 8 * ((void)v249 - v499)
       - ((uint64_t)(*((void *)&v499 + 1) - *(void *)v499) >> 6);
  if (v251 >= 1)
  {
    if (v247 == v248) {
      uint64_t v252 = 0;
    }
    else {
      uint64_t v252 = 8 * (v247 - v248) - 1;
    }
    uint64_t v253 = v246 - v251;
    uint64_t *v233 = v253;
    uint64_t v254 = v252 - v245;
    while ((unint64_t)(v254 - v253) >= 0x80)
    {
      operator delete(*(void **)(v247 - 8));
      uint64_t v255 = *(void *)(v450 + 72);
      uint64_t v247 = *(void *)(v450 + 80) - 8;
      *(void *)(v450 + 80) = v247;
      if (v247 == v255) {
        uint64_t v254 = 0;
      }
      else {
        uint64_t v254 = 8 * (v247 - v255) - 1;
      }
      uint64_t v253 = *(void *)(v450 + 104) + *(void *)(v450 + 96);
    }
  }
LABEL_1056:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v450 + 8));
  *(void *)uint64_t v450 = v450 + 8;
  *(void *)(v450 + 16) = 0;
  *(void *)(v450 + 8) = 0;
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v450 + 32));
  *(void *)(v450 + 24) = v450 + 32;
  *(void *)(v450 + 40) = 0;
  *(void *)(v450 + 32) = 0;
  v419 = (void **)__src[1];
  v420 = (void **)__src[2];
  *((void *)&v498 + 1) = 0;
  unint64_t v421 = (char *)__src[2] - (char *)__src[1];
  if ((void *)((char *)__src[2] - (char *)__src[1]) >= (void *)0x11)
  {
    do
    {
      operator delete(*v419);
      v420 = (void **)__src[2];
      v419 = (void **)((char *)__src[1] + 8);
      __src[1] = v419;
      unint64_t v421 = (char *)__src[2] - (char *)v419;
    }
    while ((void *)((char *)__src[2] - (char *)v419) > (void *)0x10);
  }
  unint64_t v422 = v421 >> 3;
  if (v422 == 1)
  {
    uint64_t v423 = 32;
    goto LABEL_1062;
  }
  if (v422 == 2)
  {
    uint64_t v423 = 64;
LABEL_1062:
    *(void *)&long long v498 = v423;
  }
  if (v419 != v420)
  {
    do
    {
      v424 = *v419++;
      operator delete(v424);
    }
    while (v419 != v420);
    if (__src[2] != __src[1]) {
      __src[2] = (char *)__src[2] + (((char *)__src[1] - (char *)__src[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__src[0]) {
    operator delete(__src[0]);
  }
}

void sub_242A73D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](v34 - 208);
  _Unwind_Resume(a1);
}

void AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::appendStateLoaderInstructions(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 && a2[3])
  {
    int v4 = a2[1];
    if (a2[1])
    {
      unsigned int v5 = *(_DWORD *)(a3 + 168) - 1;
      if (v5 > 0x13) {
        int v4 = 0;
      }
      else {
        int v4 = dword_242EAA580[v5];
      }
    }
    int v10 = a2[2];
    v12[0] = *a2;
    v12[1] = v4;
    v12[2] = v10;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    int v15 = 0;
    *(_OWORD *)unint64_t __src = 0u;
    long long v17 = 0u;
    uint64_t v9 = AGXIotoInstruction_SETPROFILECTL_0::emit((AGXIotoInstruction_SETPROFILECTL_0 *)v12, __src);
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a3 + 168) - 1;
    if (v6 > 0x13) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = qword_242EAA490[v6];
    }
    uint64_t v8 = a1[v7 + 8] + *a1;
    v11[1] = 0;
    v11[2] = 0;
    v11[0] = (2 * (v8 & 0xFFFFFFFFFFFFLL)) | 1;
    *(_OWORD *)unint64_t __src = 0u;
    long long v17 = 0u;
    uint64_t v9 = AGXIotoInstruction_BL_0::emit((AGXIotoInstruction_BL_0 *)v11, __src);
  }
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a3, *(char **)(a3 + 8), (char *)__src, (char *)v9, v9 - __src);
}

unsigned __int8 *AGXIotoInstruction_SETPROFILECTL_0::emit(AGXIotoInstruction_SETPROFILECTL_0 *this, unsigned __int8 *a2)
{
  LOWORD(v2) = 1015;
  if (*((unsigned char *)this + 12))
  {
    unsigned __int16 v12 = 0;
  }
  else
  {
    int v4 = *((_DWORD *)this + 4);
    int v3 = *((_DWORD *)this + 5);
    int v5 = *((_DWORD *)this + 6);
    unsigned int v6 = *((unsigned __int8 *)this + 28);
    unsigned int v2 = ((((v6 >> 1) & 1) << 12) | ((v6 & 1) << 11)) & 0xFFF81FFF | (((v6 >> 2) & 1) << 13) & 0xFFF83FFF | (((v6 >> 3) & 1) << 14) & 0xFFF87FFF | (v6 >> 4 << 15) | 0x3F7;
    int v7 = ((v6 >> 5) | (*((unsigned __int16 *)this + 2) << 9)) & 0x201 | ((*((_WORD *)this + 4) & 1) << 10);
    unsigned __int16 v8 = v7 | 4;
    if (!v5) {
      LOWORD(v7) = v7 | 2;
    }
    if (v5 == 1) {
      unsigned __int16 v9 = v8;
    }
    else {
      unsigned __int16 v9 = v7;
    }
    unsigned __int16 v10 = v9 & 0xFFE7 | 8;
    unsigned __int16 v11 = v9 & 0xFFE7 | 0x10;
    if (v3 == 2) {
      v9 &= 0xFFE7u;
    }
    if (v3 == 1) {
      unsigned __int16 v9 = v11;
    }
    if (v3) {
      unsigned __int16 v12 = v9;
    }
    else {
      unsigned __int16 v12 = v10;
    }
    unsigned __int16 v13 = v12 & 0xFF9F | 0x20;
    unsigned __int16 v14 = v12 & 0xFF9F | 0x40;
    if (v4 == 2) {
      v12 &= 0xFF9Fu;
    }
    if (v4 == 1) {
      unsigned __int16 v12 = v14;
    }
    if (!v4) {
      unsigned __int16 v12 = v13;
    }
    switch(*(_DWORD *)this)
    {
      case 0:
        unsigned __int16 v12 = v12 & 0xFE7F | 0x100;
        break;
      case 1:
        v12 &= 0xFE7Fu;
        break;
      case 2:
        unsigned __int16 v12 = v12 & 0xFE7F | 0x80;
        break;
      case 3:
        v12 |= 0x180u;
        break;
      default:
        break;
    }
  }
  *(_DWORD *)a2 = (unsigned __int16)v2 | (v12 << 16);
  return a2 + 4;
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEELb0EEEvT1_SL_SB_NS_15iterator_traitsISL_E15difference_typeEb(unint64_t a1, unsigned __int16 *a2, char *a3, unsigned __int16 *a4, uint64_t a5, char a6)
{
  uint64_t v508 = *MEMORY[0x263EF8340];
  long long v499 = a2;
  BOOL v6 = a4 > a2;
  if (a4 == a2) {
    return;
  }
  unsigned __int16 v8 = a4;
  while (1)
  {
    uint64_t v10 = 8 * (void)&a3[-a1];
    unsigned __int16 v11 = *(unsigned __int16 **)a3;
    uint64_t v12 = (uint64_t)v8 - *(void *)a3;
    uint64_t v13 = v12 >> 6;
    unsigned __int16 v14 = *(unsigned __int16 **)a1;
    uint64_t v15 = (uint64_t)v499 - *(void *)a1;
    uint64_t v16 = v15 >> 6;
    uint64_t v17 = (v12 >> 6) + v10 - (v15 >> 6);
    if (!v6) {
      break;
    }
    if (v17 <= 23)
    {
      if (a6)
      {
        if (v499 == v8) {
          return;
        }
        v283 = v499 + 32;
        while (2)
        {
          if ((char *)v283 - (char *)v14 == 4096)
          {
            uint64_t v286 = *(unsigned __int16 **)(a1 + 8);
            a1 += 8;
            unsigned __int16 v14 = v286;
            v283 = v286;
          }
          if (v283 == v8) {
            return;
          }
          v287 = (unsigned __int16 **)a1;
          uint64_t v288 = (uint64_t)v283;
          if (v283 == v14)
          {
            v287 = (unsigned __int16 **)(a1 - 8);
            uint64_t v288 = *(void *)(a1 - 8) + 4096;
          }
          v289 = (unsigned __int16 *)(v288 - 64);
          if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v283 + 8, (unsigned __int16 *)(v288 - 64), (unsigned __int16 *)(v288 - 48), v283))
          {
            unsigned int v290 = *v283;
            unsigned __int16 v291 = v283[1];
            int v292 = *((_DWORD *)v283 + 1);
            uint64_t v293 = *((void *)v283 + 1);
            unsigned int v294 = v283[8];
            unsigned __int16 v295 = v283[9];
            int v296 = *((_DWORD *)v283 + 5);
            int v297 = *((_DWORD *)v283 + 6);
            long long v298 = *(_OWORD *)(v283 + 14);
            LODWORD(v506) = *((_DWORD *)v283 + 15);
            long long v299 = *(_OWORD *)(v283 + 22);
            long long v504 = v298;
            long long v505 = v299;
            long long v300 = *(_OWORD *)v289;
            long long v301 = *((_OWORD *)v289 + 1);
            long long v302 = *((_OWORD *)v289 + 3);
            *((_OWORD *)v283 + 2) = *((_OWORD *)v289 + 2);
            *((_OWORD *)v283 + 3) = v302;
            uint64_t v303 = v499;
            *(_OWORD *)v283 = v300;
            *((_OWORD *)v283 + 1) = v301;
            if (v289 != v499)
            {
              uint64_t v304 = v296 - 2;
              uint64_t v305 = v296 - 1;
              uint64_t v306 = v292 - 2;
              uint64_t v307 = v292 - 1;
              do
              {
                uint64_t v303 = v289;
                if (v289 == *v287)
                {
                  uint64_t v313 = (uint64_t)*--v287;
                  uint64_t v311 = (_OWORD *)(v313 + 4096);
                  if (v304 <= 7)
                  {
LABEL_384:
                    unsigned int v312 = dword_242EAA72C[v304];
                    goto LABEL_387;
                  }
                }
                else
                {
                  uint64_t v311 = v289;
                  if (v304 <= 7) {
                    goto LABEL_384;
                  }
                }
                unsigned int v312 = 3;
LABEL_387:
                int v314 = *((_DWORD *)v311 - 11);
                unsigned int v315 = v314 - 2;
                if ((v314 - 2) > 7)
                {
                  unsigned int v316 = 3;
                  if (v305 > 8)
                  {
LABEL_389:
                    unsigned int v317 = 1;
                    goto LABEL_392;
                  }
                }
                else
                {
                  unsigned int v316 = dword_242EAA72C[v315];
                  if (v305 > 8) {
                    goto LABEL_389;
                  }
                }
                unsigned int v317 = dword_242EAA74C[v305];
LABEL_392:
                unsigned int v318 = v314 - 1;
                if (v318 <= 8) {
                  unsigned int v319 = dword_242EAA74C[v318];
                }
                else {
                  unsigned int v319 = 1;
                }
                v289 = (unsigned __int16 *)(v311 - 4);
                if (v312 < v316) {
                  goto LABEL_381;
                }
                if (v316 >= v312)
                {
                  unsigned int v320 = *((unsigned __int16 *)v311 - 24);
                  if (v294 < v320 || v320 >= v294 && (v317 < v319 || v319 >= v317 && v297 < *((_DWORD *)v311 - 10))) {
                    goto LABEL_381;
                  }
                }
                if (v315 > 7)
                {
                  unsigned int v321 = 3;
                  if (v304 > 7)
                  {
LABEL_404:
                    unsigned int v322 = 3;
                    if (v318 > 8) {
                      goto LABEL_405;
                    }
                    goto LABEL_409;
                  }
                }
                else
                {
                  unsigned int v321 = dword_242EAA72C[v315];
                  if (v304 > 7) {
                    goto LABEL_404;
                  }
                }
                unsigned int v322 = dword_242EAA72C[v304];
                if (v318 > 8)
                {
LABEL_405:
                  unsigned int v323 = 1;
                  if (v305 <= 8) {
                    goto LABEL_410;
                  }
                  goto LABEL_406;
                }
LABEL_409:
                unsigned int v323 = dword_242EAA74C[v318];
                if (v305 <= 8)
                {
LABEL_410:
                  unsigned int v324 = dword_242EAA74C[v305];
                  goto LABEL_411;
                }
LABEL_406:
                unsigned int v324 = 1;
LABEL_411:
                if (v321 < v322) {
                  break;
                }
                if (v322 >= v321)
                {
                  unsigned int v325 = *((unsigned __int16 *)v311 - 24);
                  if (v325 < v294 || v294 >= v325 && (v323 < v324 || v324 >= v323 && *((_DWORD *)v311 - 10) < v297)) {
                    break;
                  }
                }
                int v326 = *((_DWORD *)v311 - 15);
                if ((v326 - 2) > 7)
                {
                  unsigned int v327 = 3;
                  if (v306 > 7)
                  {
LABEL_420:
                    unsigned int v328 = 3;
                    goto LABEL_423;
                  }
                }
                else
                {
                  unsigned int v327 = dword_242EAA72C[v326 - 2];
                  if (v306 > 7) {
                    goto LABEL_420;
                  }
                }
                unsigned int v328 = dword_242EAA72C[v306];
LABEL_423:
                unsigned int v329 = v326 - 1;
                if (v329 > 8)
                {
                  unsigned int v330 = 1;
                  if (v307 > 8)
                  {
LABEL_425:
                    unsigned int v331 = 1;
                    if (v327 < v328) {
                      goto LABEL_381;
                    }
                    goto LABEL_429;
                  }
                }
                else
                {
                  unsigned int v330 = dword_242EAA74C[v329];
                  if (v307 > 8) {
                    goto LABEL_425;
                  }
                }
                unsigned int v331 = dword_242EAA74C[v307];
                if (v327 < v328) {
                  goto LABEL_381;
                }
LABEL_429:
                if (v328 < v327) {
                  break;
                }
                unsigned int v332 = *v289;
                if (v332 >= v290
                  && (v290 < v332 || v330 >= v331 && (v331 < v330 || *((_DWORD *)v311 - 14) >= (int)v293)))
                {
                  break;
                }
LABEL_381:
                long long v308 = *(_OWORD *)v289;
                long long v309 = *(v311 - 3);
                long long v310 = *(v311 - 1);
                *((_OWORD *)v303 + 2) = *(v311 - 2);
                *((_OWORD *)v303 + 3) = v310;
                *(_OWORD *)uint64_t v303 = v308;
                *((_OWORD *)v303 + 1) = v309;
                uint64_t v303 = v499;
              }
              while (v289 != v499);
            }
            *uint64_t v303 = v290;
            v303[1] = v291;
            *((_DWORD *)v303 + 1) = v292;
            *((void *)v303 + 1) = v293;
            v303[8] = v294;
            v303[9] = v295;
            *((_DWORD *)v303 + 5) = v296;
            *((_DWORD *)v303 + 6) = v297;
            int v284 = v506;
            long long v285 = v505;
            *(_OWORD *)(v303 + 14) = v504;
            *(_OWORD *)(v303 + 22) = v285;
            *((_DWORD *)v303 + 15) = v284;
            unsigned __int16 v14 = *(unsigned __int16 **)a1;
          }
          v283 += 32;
          continue;
        }
      }
      if (v499 == v8) {
        return;
      }
      if (v15 >= -63)
      {
        uint64_t v438 = (unsigned __int16 **)(a1 + 8 * ((unint64_t)(v16 + 1) >> 6));
        unsigned int v439 = *v438;
        uint64_t v440 = ((_BYTE)v16 + 1) & 0x3F;
      }
      else
      {
        uint64_t v438 = (unsigned __int16 **)(a1 - 8 * ((unint64_t)(62 - v16) >> 6));
        unsigned int v439 = *v438;
        uint64_t v440 = ~(62 - (int)v16) & 0x3FLL;
      }
      uint64_t v441 = &v439[32 * v440];
      if (v441 == v8) {
        return;
      }
      while (1)
      {
        uint64_t v442 = ((char *)v441 - (char *)v439) >> 6;
        if ((char *)v441 - (char *)v439 < 65)
        {
          unint64_t v446 = 64 - v442;
          v444 = &v438[-(v446 >> 6)];
          int v445 = &(*v444)[32 * (unint64_t)(~(_BYTE)v446 & 0x3F)];
        }
        else
        {
          unint64_t v443 = v442 - 1;
          v444 = &v438[v443 >> 6];
          int v445 = &(*v444)[32 * (v443 & 0x3F)];
        }
        if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v441 + 8, v445, v445 + 8, v441))
        {
          break;
        }
LABEL_608:
        v441 += 32;
        if ((char *)v441 - (char *)v439 == 4096)
        {
          int v491 = v438[1];
          ++v438;
          unsigned int v439 = v491;
          uint64_t v441 = v491;
        }
        if (v441 == v8) {
          return;
        }
      }
      v447 = v8;
      unsigned int v448 = *v441;
      unsigned __int16 v449 = v441[1];
      int v450 = *((_DWORD *)v441 + 1);
      uint64_t v451 = *((void *)v441 + 1);
      unsigned int v452 = v441[8];
      unsigned __int16 v453 = v441[9];
      int v454 = *((_DWORD *)v441 + 5);
      int v455 = *((_DWORD *)v441 + 6);
      long long v456 = *(_OWORD *)(v441 + 14);
      long long v457 = *(_OWORD *)(v441 + 22);
      uint64_t v458 = v454 - 2;
      LODWORD(v506) = *((_DWORD *)v441 + 15);
      uint64_t v459 = v454 - 1;
      uint64_t v460 = v450 - 2;
      uint64_t v461 = v450 - 1;
      uint64_t v462 = v441;
      long long v504 = v456;
      long long v505 = v457;
      while (2)
      {
        while (2)
        {
          while (2)
          {
            int v463 = v445;
            long long v464 = *(_OWORD *)v445;
            long long v465 = *((_OWORD *)v445 + 1);
            long long v466 = *((_OWORD *)v445 + 3);
            *((_OWORD *)v462 + 2) = *((_OWORD *)v445 + 2);
            *((_OWORD *)v462 + 3) = v466;
            *(_OWORD *)uint64_t v462 = v464;
            *((_OWORD *)v462 + 1) = v465;
            if (v445 == *v444)
            {
              uint64_t v469 = (uint64_t)*--v444;
              char v467 = (unsigned __int16 *)(v469 + 4096);
              if (v458 > 7) {
                goto LABEL_557;
              }
LABEL_555:
              unsigned int v468 = dword_242EAA72C[v458];
            }
            else
            {
              char v467 = v445;
              if (v458 <= 7) {
                goto LABEL_555;
              }
LABEL_557:
              unsigned int v468 = 3;
            }
            int v470 = *((_DWORD *)v467 - 11);
            unsigned int v471 = v470 - 2;
            if ((v470 - 2) > 7)
            {
              unsigned int v472 = 3;
              if (v459 <= 8) {
                goto LABEL_562;
              }
LABEL_560:
              unsigned int v473 = 1;
            }
            else
            {
              unsigned int v472 = dword_242EAA72C[v471];
              if (v459 > 8) {
                goto LABEL_560;
              }
LABEL_562:
              unsigned int v473 = dword_242EAA74C[v459];
            }
            unsigned int v474 = v470 - 1;
            if (v474 > 8) {
              unsigned int v475 = 1;
            }
            else {
              unsigned int v475 = dword_242EAA74C[v474];
            }
            int v445 = v467 - 32;
            uint64_t v462 = v463;
            if (v468 < v472) {
              continue;
            }
            break;
          }
          if (v472 >= v468)
          {
            unsigned int v480 = *(v467 - 24);
            uint64_t v462 = v463;
            if (v452 < v480) {
              continue;
            }
            if (v480 >= v452)
            {
              uint64_t v462 = v463;
              if (v473 < v475) {
                continue;
              }
              if (v475 >= v473)
              {
                uint64_t v462 = v463;
                if (v455 < *((_DWORD *)v467 - 10)) {
                  continue;
                }
              }
            }
          }
          break;
        }
        if (v471 > 7)
        {
          unsigned int v476 = 3;
          if (v458 <= 7) {
            goto LABEL_581;
          }
LABEL_570:
          unsigned int v477 = 3;
          if (v474 > 8) {
            goto LABEL_571;
          }
LABEL_582:
          unsigned int v478 = dword_242EAA74C[v474];
          if (v459 <= 8) {
            goto LABEL_583;
          }
LABEL_572:
          unsigned int v479 = 1;
          if (v476 < v477) {
            goto LABEL_607;
          }
        }
        else
        {
          unsigned int v476 = dword_242EAA72C[v471];
          if (v458 > 7) {
            goto LABEL_570;
          }
LABEL_581:
          unsigned int v477 = dword_242EAA72C[v458];
          if (v474 <= 8) {
            goto LABEL_582;
          }
LABEL_571:
          unsigned int v478 = 1;
          if (v459 > 8) {
            goto LABEL_572;
          }
LABEL_583:
          unsigned int v479 = dword_242EAA74C[v459];
          if (v476 < v477) {
            goto LABEL_607;
          }
        }
        if (v477 >= v476)
        {
          unsigned int v481 = *(v467 - 24);
          if (v481 < v452 || v452 >= v481 && (v478 < v479 || v479 >= v478 && *((_DWORD *)v467 - 10) < v455))
          {
LABEL_607:
            *int v463 = v448;
            v463[1] = v449;
            *((_DWORD *)v463 + 1) = v450;
            *((void *)v463 + 1) = v451;
            v463[8] = v452;
            v463[9] = v453;
            *((_DWORD *)v463 + 5) = v454;
            *((_DWORD *)v463 + 6) = v455;
            int v489 = v506;
            long long v490 = v505;
            *(_OWORD *)(v463 + 14) = v504;
            *(_OWORD *)(v463 + 22) = v490;
            *((_DWORD *)v463 + 15) = v489;
            unsigned int v439 = *v438;
            unsigned __int16 v8 = v447;
            goto LABEL_608;
          }
        }
        int v482 = *((_DWORD *)v467 - 15);
        if ((v482 - 2) > 7)
        {
          unsigned int v483 = 3;
          if (v460 <= 7) {
            goto LABEL_594;
          }
LABEL_592:
          unsigned int v484 = 3;
        }
        else
        {
          unsigned int v483 = dword_242EAA72C[v482 - 2];
          if (v460 > 7) {
            goto LABEL_592;
          }
LABEL_594:
          unsigned int v484 = dword_242EAA72C[v460];
        }
        unsigned int v485 = v482 - 1;
        if (v485 > 8)
        {
          unsigned int v486 = 1;
          if (v461 <= 8) {
            goto LABEL_599;
          }
LABEL_597:
          unsigned int v487 = 1;
        }
        else
        {
          unsigned int v486 = dword_242EAA74C[v485];
          if (v461 > 8) {
            goto LABEL_597;
          }
LABEL_599:
          unsigned int v487 = dword_242EAA74C[v461];
        }
        uint64_t v462 = v463;
        if (v483 >= v484)
        {
          if (v484 < v483) {
            goto LABEL_607;
          }
          unsigned int v488 = *v445;
          uint64_t v462 = v463;
          if (v488 >= v448)
          {
            if (v448 < v488) {
              goto LABEL_607;
            }
            uint64_t v462 = v463;
            if (v486 >= v487)
            {
              if (v487 < v486) {
                goto LABEL_607;
              }
              uint64_t v462 = v463;
              if (*((_DWORD *)v467 - 14) >= (int)v451) {
                goto LABEL_607;
              }
            }
          }
        }
        continue;
      }
    }
    if (!a5)
    {
      if (v499 == v8) {
        return;
      }
      int64_t v333 = (unint64_t)(v17 - 2) >> 1;
      v497 = v8;
      uint64_t v334 = v333;
      while (1)
      {
        unint64_t v339 = v499;
        uint64_t v340 = ((uint64_t)v499 - *(void *)a1) >> 6;
        uint64_t v494 = v334;
        if (!v334) {
          break;
        }
        unint64_t v341 = v340 + v334;
        if (v340 + v334 >= 1)
        {
          unint64_t v344 = (void *)(a1 + 8 * (v341 >> 6));
        }
        else
        {
          unint64_t v343 = 63 - v341;
          LOBYTE(v341) = ~(63 - v341);
          unint64_t v344 = (void *)(a1 - 8 * (v343 >> 6));
        }
        unint64_t v339 = (unsigned __int16 *)(*v344 + ((v341 & 0x3F) << 6));
        unint64_t v342 = v499;
        if (v339 == v499)
        {
          uint64_t v334 = 0;
          goto LABEL_448;
        }
        uint64_t v334 = ((uint64_t)((v341 & 0x3F) << 6) >> 6) + 8 * ((void)v344 - a1) - v340;
        unint64_t v342 = v339;
        if (v333 >= v334) {
          goto LABEL_448;
        }
LABEL_439:
        uint64_t v334 = v494 - 1;
        uint64_t v338 = (uint64_t)v497;
        if (v494 <= 0)
        {
          uint64_t v381 = v10 + (((uint64_t)v497 - *(void *)a3) >> 6) - (((uint64_t)v499 - *(void *)a1) >> 6);
          if (v381 < 2) {
            return;
          }
          while (2)
          {
            uint64_t v382 = v338;
            uint64_t v383 = 0;
            uint64_t v385 = a3;
            unint64_t v384 = (unint64_t)v499;
            long long v386 = *(_OWORD *)v499;
            long long v387 = *((_OWORD *)v499 + 1);
            long long v388 = *((_OWORD *)v499 + 3);
            long long v502 = *((_OWORD *)v499 + 2);
            long long v503 = v388;
            long long v500 = v386;
            long long v501 = v387;
            uint64_t v389 = v381 - 2;
            if (v381 < 2) {
              uint64_t v389 = v381 - 1;
            }
            uint64_t v390 = v389 >> 1;
            v391 = (uint64_t *)a1;
            do
            {
              unint64_t v395 = (_OWORD *)v384;
              if (v383 != -1)
              {
                uint64_t v396 = v383 + 1 + ((uint64_t)(v384 - *v391) >> 6);
                if (v396 < 1)
                {
                  unint64_t v397 = 63 - v396;
                  v391 -= v397 >> 6;
                  unint64_t v384 = *v391 + ((unint64_t)(~(_BYTE)v397 & 0x3F) << 6);
                }
                else
                {
                  v391 += (unint64_t)v396 >> 6;
                  unint64_t v384 = *v391 + ((unint64_t)(v396 & 0x3F) << 6);
                }
              }
              uint64_t v398 = (2 * v383) | 1;
              uint64_t v383 = 2 * v383 + 2;
              if (v383 >= v381)
              {
                uint64_t v383 = v398;
              }
              else
              {
                uint64_t v399 = *v391;
                uint64_t v400 = v384 - *v391;
                uint64_t v401 = v400 >> 6;
                if (v400 < -63) {
                  v402 = (unsigned __int16 *)(v391[-((unint64_t)(62 - v401) >> 6)]
                }
                                            + ((unint64_t)(~(62 - (_BYTE)v401) & 0x3F) << 6));
                else {
                  v402 = (unsigned __int16 *)(*(uint64_t *)((char *)v391
                }
                                                         + (((unint64_t)(v401 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                                            + (((v401 + 1) & 0x3F) << 6));
                if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)(v384 + 16), v402, v402 + 8, (unsigned __int16 *)v384))
                {
                  v384 += 64;
                  if (v384 - v399 == 4096)
                  {
                    unint64_t v403 = v391[1];
                    ++v391;
                    unint64_t v384 = v403;
                  }
                }
                else
                {
                  uint64_t v383 = v398;
                }
                uint64_t v385 = a3;
              }
              long long v392 = *(_OWORD *)v384;
              long long v393 = *(_OWORD *)(v384 + 16);
              long long v394 = *(_OWORD *)(v384 + 48);
              v395[2] = *(_OWORD *)(v384 + 32);
              v395[3] = v394;
              *unint64_t v395 = v392;
              v395[1] = v393;
            }
            while (v383 <= v390);
            uint64_t v404 = v382;
            uint64_t v405 = v382;
            if (*(void *)v385 == v382) {
              uint64_t v405 = *((void *)v385 - 1) + 4096;
            }
            v406 = (long long *)(v405 - 64);
            if (v405 - 64 == v384)
            {
              long long v425 = v500;
              long long v426 = v501;
              long long v427 = v503;
              *(_OWORD *)(v384 + 32) = v502;
              *(_OWORD *)(v384 + 48) = v427;
              *(_OWORD *)unint64_t v384 = v425;
              *(_OWORD *)(v384 + 16) = v426;
            }
            else
            {
              long long v407 = *v406;
              long long v408 = *(_OWORD *)(v405 - 48);
              long long v409 = *(_OWORD *)(v405 - 16);
              *(_OWORD *)(v384 + 32) = *(_OWORD *)(v405 - 32);
              *(_OWORD *)(v384 + 48) = v409;
              *(_OWORD *)unint64_t v384 = v407;
              *(_OWORD *)(v384 + 16) = v408;
              uint64_t v410 = v384 + 64;
              if (v384 + 64 - *v391 == 4096)
              {
                uint64_t v411 = v391[1];
                ++v391;
                uint64_t v410 = v411;
              }
              long long v412 = v500;
              long long v413 = v501;
              long long v414 = v503;
              v406[2] = v502;
              v406[3] = v414;
              long long *v406 = v412;
              v406[1] = v413;
              if ((unsigned __int16 *)v410 != v499)
              {
                uint64_t v415 = *v391;
                uint64_t v416 = ((uint64_t)v499 - *(void *)a1) >> 6;
                uint64_t v417 = ((v410 - *v391) >> 6) + 8 * ((void)v391 - a1) - v416;
                BOOL v6 = v417 < 2;
                unint64_t v418 = v417 - 2;
                if (!v6)
                {
                  unint64_t v419 = v418 >> 1;
                  unint64_t v420 = (unint64_t)v499;
                  if (v418 < 2) {
                    goto LABEL_522;
                  }
                  uint64_t v421 = v416 + v419;
                  if (v421 < 1)
                  {
                    unint64_t v420 = *(void *)(a1 - 8 * ((unint64_t)(63 - v421) >> 6))
                         + ((unint64_t)(~(63 - (_BYTE)v421) & 0x3F) << 6);
                    if (v415 == v410) {
                      goto LABEL_523;
                    }
                  }
                  else
                  {
                    unint64_t v420 = *(void *)(a1 + (((unint64_t)v421 >> 3) & 0x1FFFFFFFFFFFFFF8))
                         + ((unint64_t)(v421 & 0x3F) << 6);
LABEL_522:
                    if (v415 == v410) {
LABEL_523:
                    }
                      uint64_t v410 = *(v391 - 1) + 4096;
                  }
                  unint64_t v422 = (long long *)(v410 - 64);
                  if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)(v420 + 16), (unsigned __int16 *)(v410 - 64), (unsigned __int16 *)(v410 - 48), (unsigned __int16 *)v420))
                  {
                    long long v423 = v422[1];
                    long long v504 = *v422;
                    long long v505 = v423;
                    long long v424 = v422[3];
                    long long v506 = v422[2];
                    long long v507 = v424;
                    do
                    {
                      v428 = (long long *)v420;
                      long long v429 = *(_OWORD *)v420;
                      long long v430 = *(_OWORD *)(v420 + 16);
                      long long v431 = *(_OWORD *)(v420 + 48);
                      v422[2] = *(_OWORD *)(v420 + 32);
                      v422[3] = v431;
                      *unint64_t v422 = v429;
                      v422[1] = v430;
                      if (!v419) {
                        break;
                      }
                      unint64_t v420 = (unint64_t)v499;
                      if (v419 >= 3)
                      {
                        int64_t v432 = ((v419 - 1) >> 1) + (((uint64_t)v499 - *(void *)a1) >> 6);
                        if (v432 < 1) {
                          unint64_t v420 = *(void *)(a1 - 8 * ((unint64_t)(63 - v432) >> 6))
                        }
                               + ((unint64_t)(~(63 - (_BYTE)v432) & 0x3F) << 6);
                        else {
                          unint64_t v420 = *(void *)(a1 + (((unint64_t)v432 >> 3) & 0x1FFFFFFFFFFFFFF8))
                        }
                               + ((unint64_t)(v432 & 0x3F) << 6);
                      }
                      unint64_t v422 = v428;
                      unint64_t v419 = (v419 - 1) >> 1;
                    }
                    while (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)(v420 + 16), (unsigned __int16 *)&v504, (unsigned __int16 *)&v505, (unsigned __int16 *)v420));
                    long long v433 = v504;
                    long long v434 = v505;
                    long long v435 = v507;
                    v428[2] = v506;
                    v428[3] = v435;
                    long long *v428 = v433;
                    v428[1] = v434;
                  }
                }
              }
            }
            if (v382 == *(void *)v385)
            {
              a3 = v385 - 8;
              uint64_t v404 = *((void *)v385 - 1) + 4096;
            }
            uint64_t v338 = v404 - 64;
            BOOL v6 = v381-- <= 2;
            if (v6) {
              return;
            }
            continue;
          }
        }
      }
      unint64_t v342 = v499;
LABEL_448:
      uint64_t v345 = (2 * v334) | 1;
      uint64_t v346 = v340 + v345;
      if (v346 >= 1)
      {
        uint64_t v348 = (uint64_t *)(a1 + 8 * ((unint64_t)v346 >> 6));
        uint64_t v349 = *v348;
        uint64_t v350 = v346 & 0x3F;
      }
      else
      {
        unint64_t v347 = 63 - v346;
        uint64_t v348 = (uint64_t *)(a1 - 8 * (v347 >> 6));
        uint64_t v349 = *v348;
        uint64_t v350 = ~v347 & 0x3FLL;
      }
      uint64_t v351 = (unsigned __int16 *)(v349 + (v350 << 6));
      uint64_t v352 = 2 * v334 + 2;
      if (v352 < v17
        && ((uint64_t v353 = v350 << 6 >> 6, (uint64_t)v351 - v349 >= -63)
          ? (uint64_t v354 = (unsigned __int16 *)(*(uint64_t *)((char *)v348
                                                    + (((unint64_t)(v353 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                                       + (((v353 + 1) & 0x3F) << 6)))
          : (uint64_t v354 = (unsigned __int16 *)(v348[-((unint64_t)(62 - v353) >> 6)]
                                       + ((unint64_t)(~(62 - (_BYTE)v353) & 0x3F) << 6))),
            std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v351 + 8, v354, v354 + 8, v351)))
      {
        v351 += 32;
        if ((unsigned __int16 *)((char *)v351 - v349) == (unsigned __int16 *)4096) {
          uint64_t v351 = (unsigned __int16 *)v348[1];
        }
      }
      else
      {
        uint64_t v352 = v345;
      }
      int64_t v333 = (unint64_t)(v17 - 2) >> 1;
      if (!std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v351 + 8, v339, v342 + 8, v351))
      {
        long long v355 = *(_OWORD *)v342;
        long long v356 = *((_OWORD *)v342 + 1);
        long long v357 = *((_OWORD *)v342 + 3);
        long long v506 = *((_OWORD *)v342 + 2);
        long long v507 = v357;
        long long v504 = v355;
        long long v505 = v356;
        do
        {
          v358 = v342;
          unint64_t v342 = v351;
          long long v359 = *(_OWORD *)v351;
          long long v360 = *((_OWORD *)v351 + 1);
          long long v361 = *((_OWORD *)v351 + 3);
          *((_OWORD *)v358 + 2) = *((_OWORD *)v351 + 2);
          *((_OWORD *)v358 + 3) = v361;
          *(_OWORD *)v358 = v359;
          *((_OWORD *)v358 + 1) = v360;
          if ((uint64_t)((unint64_t)(v17 - 2) >> 1) < v352) {
            break;
          }
          uint64_t v362 = (2 * v352) | 1;
          uint64_t v363 = v362 + (((uint64_t)v499 - *(void *)a1) >> 6);
          if (v363 >= 1)
          {
            v365 = (uint64_t *)(a1 + 8 * ((unint64_t)v363 >> 6));
            uint64_t v366 = *v365;
            uint64_t v367 = v363 & 0x3F;
          }
          else
          {
            unint64_t v364 = 63 - v363;
            v365 = (uint64_t *)(a1 - 8 * (v364 >> 6));
            uint64_t v366 = *v365;
            uint64_t v367 = ~v364 & 0x3FLL;
          }
          uint64_t v351 = (unsigned __int16 *)(v366 + (v367 << 6));
          uint64_t v352 = 2 * v352 + 2;
          if (v352 < v17
            && ((uint64_t v368 = v367 << 6 >> 6, (uint64_t)v351 - v366 >= -63)
              ? (uint64_t v369 = (unsigned __int16 *)(*(uint64_t *)((char *)v365
                                                        + (((unint64_t)(v368 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                                           + (((v368 + 1) & 0x3F) << 6)))
              : (uint64_t v369 = (unsigned __int16 *)(v365[-((unint64_t)(62 - v368) >> 6)]
                                           + ((unint64_t)(~(62 - (_BYTE)v368) & 0x3F) << 6))),
                std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v351 + 8, v369, v369 + 8, v351)))
          {
            v351 += 32;
            if ((unsigned __int16 *)((char *)v351 - v366) == (unsigned __int16 *)4096) {
              uint64_t v351 = (unsigned __int16 *)v365[1];
            }
          }
          else
          {
            uint64_t v352 = v362;
          }
        }
        while (!std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v351 + 8, (unsigned __int16 *)&v504, (unsigned __int16 *)&v505, v351));
        long long v335 = v504;
        long long v336 = v505;
        long long v337 = v507;
        *((_OWORD *)v342 + 2) = v506;
        *((_OWORD *)v342 + 3) = v337;
        *(_OWORD *)unint64_t v342 = v335;
        *((_OWORD *)v342 + 1) = v336;
      }
      goto LABEL_439;
    }
    unint64_t v18 = (unint64_t)v17 >> 1;
    uint64_t v19 = v16 + ((unint64_t)v17 >> 1);
    if ((unint64_t)v17 < 0x81)
    {
      uint64_t v21 = a3;
      unint64_t v20 = v499;
      if (v19 < 1)
      {
        unint64_t v39 = 63 - v19;
        int v26 = (void *)(a1 - 8 * (v39 >> 6));
        int v27 = (unsigned __int16 *)(*v26 + ((unint64_t)(~(_BYTE)v39 & 0x3F) << 6));
        if (v12 < 65) {
          goto LABEL_24;
        }
LABEL_15:
        unsigned int v28 = &a3[8 * ((unint64_t)(v13 - 1) >> 6)];
        int v29 = (unsigned __int16 *)(*(void *)v28 + (((v13 - 1) & 0x3F) << 6));
      }
      else
      {
        int v26 = (void *)(a1 + 8 * ((unint64_t)v19 >> 6));
        int v27 = (unsigned __int16 *)(*v26 + ((unint64_t)(v19 & 0x3F) << 6));
        if (v12 >= 65) {
          goto LABEL_15;
        }
LABEL_24:
        unsigned int v28 = &a3[-8 * ((unint64_t)(64 - v13) >> 6)];
        int v29 = (unsigned __int16 *)(*(void *)v28 + ((unint64_t)(~(64 - (_BYTE)v13) & 0x3F) << 6));
      }
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)v26, v27, a1, v499, (uint64_t)v28, v29);
      goto LABEL_52;
    }
    uint64_t v21 = a3;
    unint64_t v20 = v499;
    if (v19 < 1)
    {
      unint64_t v30 = 63 - v19;
      uint64_t v22 = (void *)(a1 - 8 * (v30 >> 6));
      uint64_t v23 = (unsigned __int16 *)(*v22 + ((unint64_t)(~(_BYTE)v30 & 0x3F) << 6));
      if (v12 < 65)
      {
LABEL_17:
        unsigned int v24 = &a3[-8 * ((unint64_t)(64 - v13) >> 6)];
        BOOL v25 = (unsigned __int16 *)(*(void *)v24 + ((unint64_t)(~(64 - (_BYTE)v13) & 0x3F) << 6));
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = (void *)(a1 + 8 * ((unint64_t)v19 >> 6));
      uint64_t v23 = (unsigned __int16 *)(*v22 + ((unint64_t)(v19 & 0x3F) << 6));
      if (v12 < 65) {
        goto LABEL_17;
      }
    }
    unsigned int v24 = &a3[8 * ((unint64_t)(v13 - 1) >> 6)];
    BOOL v25 = (unsigned __int16 *)(*(void *)v24 + (((v13 - 1) & 0x3F) << 6));
LABEL_18:
    _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_(a1, v499, (uint64_t)v22, v23, (uint64_t)v24, v25);
    uint64_t v31 = (uint64_t)v499 - *(void *)a1;
    uint64_t v32 = v31 >> 6;
    if (v31 < -63)
    {
      unsigned int v33 = (void *)(a1 - 8 * ((unint64_t)(62 - v32) >> 6));
      uint64_t v34 = (unsigned __int16 *)(*v33 + ((unint64_t)(~(62 - (_BYTE)v32) & 0x3F) << 6));
    }
    else
    {
      unsigned int v33 = (void *)(a1 + 8 * ((unint64_t)(v32 + 1) >> 6));
      uint64_t v34 = (unsigned __int16 *)(*v33 + (((v32 + 1) & 0x3F) << 6));
    }
    unint64_t v35 = v18 - 1;
    uint64_t v36 = v32 + v18 - 1;
    if (v36 < 1)
    {
      unint64_t v40 = 63 - v36;
      uint64_t v37 = (void *)(a1 - 8 * (v40 >> 6));
      uint64_t v38 = (unsigned __int16 *)(*v37 + ((unint64_t)(~(_BYTE)v40 & 0x3F) << 6));
    }
    else
    {
      uint64_t v37 = (void *)(a1 + 8 * ((unint64_t)v36 >> 6));
      uint64_t v38 = (unsigned __int16 *)(*v37 + ((unint64_t)(v36 & 0x3F) << 6));
    }
    uint64_t v41 = (uint64_t)v8 - *(void *)a3;
    uint64_t v42 = v41 >> 6;
    if (v41 < 129)
    {
      unint64_t v46 = 65 - v42;
      unsigned int v44 = &a3[-8 * (v46 >> 6)];
      int v45 = (unsigned __int16 *)(*(void *)v44 + ((unint64_t)(~(_BYTE)v46 & 0x3F) << 6));
    }
    else
    {
      unint64_t v43 = v42 - 2;
      unsigned int v44 = &a3[8 * (v43 >> 6)];
      int v45 = (unsigned __int16 *)(*(void *)v44 + ((v43 & 0x3F) << 6));
    }
    _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)v33, v34, (uint64_t)v37, v38, (uint64_t)v44, v45);
    uint64_t v47 = (uint64_t)v499 - *(void *)a1;
    uint64_t v48 = v47 >> 6;
    if (v47 < -127)
    {
      unsigned int v49 = (void *)(a1 - 8 * ((unint64_t)(61 - v48) >> 6));
      int v50 = (unsigned __int16 *)(*v49 + ((unint64_t)(~(61 - (_BYTE)v48) & 0x3F) << 6));
    }
    else
    {
      unsigned int v49 = (void *)(a1 + 8 * ((unint64_t)(v48 + 2) >> 6));
      int v50 = (unsigned __int16 *)(*v49 + (((v48 + 2) & 0x3F) << 6));
    }
    uint64_t v51 = v48 + v18 + 1;
    if (v51 < 1)
    {
      unint64_t v54 = 63 - v51;
      int v52 = (void *)(a1 - 8 * (v54 >> 6));
      int v53 = (unsigned __int16 *)(*v52 + ((unint64_t)(~(_BYTE)v54 & 0x3F) << 6));
    }
    else
    {
      int v52 = (void *)(a1 + 8 * ((unint64_t)v51 >> 6));
      int v53 = (unsigned __int16 *)(*v52 + ((unint64_t)(v51 & 0x3F) << 6));
    }
    uint64_t v55 = (uint64_t)v8 - *(void *)a3;
    uint64_t v56 = v55 >> 6;
    if (v55 < 193)
    {
      unint64_t v60 = 66 - v56;
      int v58 = &a3[-8 * (v60 >> 6)];
      int v59 = (unsigned __int16 *)(*(void *)v58 + ((unint64_t)(~(_BYTE)v60 & 0x3F) << 6));
    }
    else
    {
      unint64_t v57 = v56 - 3;
      int v58 = &a3[8 * (v57 >> 6)];
      int v59 = (unsigned __int16 *)(*(void *)v58 + ((v57 & 0x3F) << 6));
    }
    _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)v49, v50, (uint64_t)v52, v53, (uint64_t)v58, v59);
    uint64_t v61 = ((uint64_t)v499 - *(void *)a1) >> 6;
    unint64_t v62 = v61 + v35;
    if ((uint64_t)(v61 + v35) < 1)
    {
      unint64_t v65 = 63 - v62;
      BOOL v63 = (void *)(a1 - 8 * (v65 >> 6));
      BOOL v64 = (unsigned __int16 *)(*v63 + ((unint64_t)(~(_BYTE)v65 & 0x3F) << 6));
    }
    else
    {
      BOOL v63 = (void *)(a1 + 8 * (v62 >> 6));
      BOOL v64 = (unsigned __int16 *)(*v63 + ((v62 & 0x3F) << 6));
    }
    unint64_t v66 = v61 + v18;
    if ((uint64_t)(v61 + v18) < 1)
    {
      unint64_t v69 = 63 - v66;
      BOOL v67 = (void *)(a1 - 8 * (v69 >> 6));
      BOOL v68 = (unsigned __int16 *)(*v67 + ((unint64_t)(~(_BYTE)v69 & 0x3F) << 6));
    }
    else
    {
      BOOL v67 = (void *)(a1 + 8 * (v66 >> 6));
      BOOL v68 = (unsigned __int16 *)(*v67 + ((v66 & 0x3F) << 6));
    }
    uint64_t v70 = v61 + v18 + 1;
    if (v70 < 1)
    {
      unint64_t v73 = 63 - v70;
      int v71 = (void *)(a1 - 8 * (v73 >> 6));
      int v72 = (unsigned __int16 *)(*v71 + ((unint64_t)(~(_BYTE)v73 & 0x3F) << 6));
    }
    else
    {
      int v71 = (void *)(a1 + 8 * ((unint64_t)v70 >> 6));
      int v72 = (unsigned __int16 *)(*v71 + ((unint64_t)(v70 & 0x3F) << 6));
    }
    _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)v63, v64, (uint64_t)v67, v68, (uint64_t)v71, v72);
    uint64_t v74 = v18 + (((uint64_t)v499 - *(void *)a1) >> 6);
    if (v74 < 1) {
      BOOL v75 = (long long *)(*(void *)(a1 - 8 * ((unint64_t)(63 - v74) >> 6))
    }
                       + ((unint64_t)(~(63 - (_BYTE)v74) & 0x3F) << 6));
    else {
      BOOL v75 = (long long *)(*(void *)(a1 + (((unint64_t)v74 >> 3) & 0x1FFFFFFFFFFFFFF8))
    }
                       + ((unint64_t)(v74 & 0x3F) << 6));
    long long v76 = *(_OWORD *)v499;
    long long v77 = *((_OWORD *)v499 + 1);
    long long v78 = *((_OWORD *)v499 + 3);
    long long v506 = *((_OWORD *)v499 + 2);
    long long v507 = v78;
    long long v504 = v76;
    long long v505 = v77;
    long long v79 = *v75;
    long long v80 = v75[1];
    long long v81 = v75[3];
    *((_OWORD *)v499 + 2) = v75[2];
    *((_OWORD *)v499 + 3) = v81;
    *(_OWORD *)long long v499 = v79;
    *((_OWORD *)v499 + 1) = v80;
    long long v82 = v505;
    long long *v75 = v504;
    v75[1] = v82;
    long long v83 = v507;
    v75[2] = v506;
    v75[3] = v83;
LABEL_52:
    uint64_t v495 = a5 - 1;
    if ((a6 & 1) == 0)
    {
      uint64_t v84 = (uint64_t)v20 - *(void *)a1;
      uint64_t v85 = v84 >> 6;
      unsigned __int16 v86 = (unsigned __int16 *)(v84 < 65
                               ? *(void *)(a1 - 8 * ((unint64_t)(64 - v85) >> 6))
                               + ((unint64_t)(~(64 - (_BYTE)v85) & 0x3F) << 6)
                               : *(void *)(a1 + (((unint64_t)(v85 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                               + (((v85 - 1) & 0x3F) << 6));
      if (!std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v86 + 8, v20, v20 + 8, v86))
      {
        long long v104 = *(_OWORD *)v20;
        long long v105 = *((_OWORD *)v20 + 1);
        long long v106 = *((_OWORD *)v20 + 3);
        long long v502 = *((_OWORD *)v20 + 2);
        long long v503 = v106;
        long long v500 = v104;
        long long v501 = v105;
        BOOL v107 = *(unsigned __int16 **)v21;
        uint64_t v108 = (uint64_t)v8 - *(void *)v21;
        uint64_t v109 = v108 >> 6;
        if (v108 < 65) {
          BOOL v110 = (unsigned __int16 *)(*(void *)&v21[-8 * ((unint64_t)(64 - v109) >> 6)]
        }
                                    + ((unint64_t)(~(64 - (_BYTE)v109) & 0x3F) << 6));
        else {
          BOOL v110 = (unsigned __int16 *)(*(void *)&v21[((unint64_t)(v109 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8]
        }
                                    + (((v109 - 1) & 0x3F) << 6));
        BOOL v111 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)&v501, v110, v110 + 8, (unsigned __int16 *)&v500);
        BOOL v112 = *(unsigned __int16 **)a1;
        if (v111)
        {
          do
          {
            v20 += 32;
            if ((char *)v20 - (char *)v112 == 4096)
            {
              v113 = *(unsigned __int16 **)(a1 + 8);
              a1 += 8;
              BOOL v112 = v113;
              unint64_t v20 = v113;
            }
          }
          while (!std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)&v501, v20, v20 + 8, (unsigned __int16 *)&v500));
        }
        else
        {
          do
          {
            v20 += 32;
            if ((char *)v20 - (char *)v112 == 4096)
            {
              int v114 = *(unsigned __int16 **)(a1 + 8);
              a1 += 8;
              BOOL v112 = v114;
              unint64_t v20 = v114;
            }
          }
          while ((a1 < (unint64_t)v21 || (char *)a1 == v21 && v20 < v8)
               && !std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)&v501, v20, v20 + 8, (unsigned __int16 *)&v500));
        }
        BOOL v115 = a1 == (void)v21;
        if (a1 < (unint64_t)v21 || (int v116 = a3, v117 = v8, v115) && (int v116 = a3, v117 = v8, v20 < v8))
        {
          int v116 = a3;
          unsigned int v118 = v8;
          do
          {
            if (v118 == v107)
            {
              int v120 = (unsigned __int16 *)*((void *)v116 - 1);
              v116 -= 8;
              BOOL v107 = v120;
              unsigned int v118 = v120 + 2048;
            }
            unsigned int v117 = v118 - 32;
            BOOL v119 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)&v501, v118 - 32, v118 - 24, (unsigned __int16 *)&v500);
            unsigned int v118 = v117;
          }
          while (v119);
        }
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (a1 >= (unint64_t)v116 && ((char *)a1 != v116 || v20 >= v117))
              {
                uint64_t v178 = ((char *)v20 - (char *)v112) >> 6;
                if ((char *)v20 - (char *)v112 < 65) {
                  int v179 = (unsigned __int16 *)(*(void *)(a1 - 8 * ((unint64_t)(64 - v178) >> 6))
                }
                                            + ((unint64_t)(~(64 - (_BYTE)v178) & 0x3F) << 6));
                else {
                  int v179 = (unsigned __int16 *)(*(void *)(a1
                }
                                                        + (((unint64_t)(v178 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                                            + (((v178 - 1) & 0x3F) << 6));
                a5 = v495;
                if (v179 != v499)
                {
                  long long v180 = *(_OWORD *)v179;
                  long long v181 = *((_OWORD *)v179 + 1);
                  long long v182 = *((_OWORD *)v179 + 3);
                  *((_OWORD *)v499 + 2) = *((_OWORD *)v179 + 2);
                  *((_OWORD *)v499 + 3) = v182;
                  *(_OWORD *)long long v499 = v180;
                  *((_OWORD *)v499 + 1) = v181;
                }
                a6 = 0;
                long long v183 = v501;
                *(_OWORD *)int v179 = v500;
                *((_OWORD *)v179 + 1) = v183;
                long long v184 = v503;
                *((_OWORD *)v179 + 2) = v502;
                *((_OWORD *)v179 + 3) = v184;
                goto LABEL_4;
              }
              long long v121 = *(_OWORD *)v20;
              long long v122 = *((_OWORD *)v20 + 1);
              long long v123 = *((_OWORD *)v20 + 3);
              long long v506 = *((_OWORD *)v20 + 2);
              long long v507 = v123;
              long long v504 = v121;
              long long v505 = v122;
              long long v124 = *(_OWORD *)v117;
              long long v125 = *((_OWORD *)v117 + 1);
              long long v126 = *((_OWORD *)v117 + 3);
              *((_OWORD *)v20 + 2) = *((_OWORD *)v117 + 2);
              *((_OWORD *)v20 + 3) = v126;
              *(_OWORD *)unint64_t v20 = v124;
              *((_OWORD *)v20 + 1) = v125;
              long long v127 = v504;
              long long v128 = v505;
              long long v129 = v507;
              *((_OWORD *)v117 + 2) = v506;
              *((_OWORD *)v117 + 3) = v129;
              *(_OWORD *)unsigned int v117 = v127;
              *((_OWORD *)v117 + 1) = v128;
              BOOL v112 = *(unsigned __int16 **)a1;
              uint64_t v130 = DWORD1(v501) - 2;
              uint64_t v131 = DWORD1(v501) - 1;
              uint64_t v132 = DWORD1(v500) - 2;
              uint64_t v133 = DWORD1(v500) - 1;
              while (2)
              {
                v20 += 32;
                if ((char *)v20 - (char *)v112 == 4096)
                {
                  __int16 v134 = *(unsigned __int16 **)(a1 + 8);
                  a1 += 8;
                  BOOL v112 = v134;
                  unint64_t v20 = v134;
                }
                if (v130 > 7) {
                  unsigned int v135 = 3;
                }
                else {
                  unsigned int v135 = dword_242EAA72C[v130];
                }
                int v136 = *((_DWORD *)v20 + 5);
                unsigned int v137 = v136 - 2;
                if ((v136 - 2) > 7)
                {
                  unsigned int v138 = 3;
                  if (v131 <= 8) {
                    goto LABEL_109;
                  }
LABEL_107:
                  unsigned int v139 = 1;
                }
                else
                {
                  unsigned int v138 = dword_242EAA72C[v137];
                  if (v131 > 8) {
                    goto LABEL_107;
                  }
LABEL_109:
                  unsigned int v139 = dword_242EAA74C[v131];
                }
                unsigned int v140 = v136 - 1;
                if (v140 > 8)
                {
                  unsigned int v141 = 1;
                  if (v135 < v138) {
                    break;
                  }
                }
                else
                {
                  unsigned int v141 = dword_242EAA74C[v140];
                  if (v135 < v138) {
                    break;
                  }
                }
                if (v138 < v135
                  || (unsigned int v142 = v20[8], (unsigned __int16)v501 >= v142)
                  && (v142 < (unsigned __int16)v501
                   || v139 >= v141 && (v141 < v139 || SDWORD2(v501) >= *((_DWORD *)v20 + 6))))
                {
                  if (v137 > 7)
                  {
                    unsigned int v143 = 3;
                    if (v130 <= 7) {
                      goto LABEL_127;
                    }
LABEL_122:
                    unsigned int v144 = 3;
                    if (v140 > 8) {
                      goto LABEL_123;
                    }
LABEL_128:
                    unsigned int v145 = dword_242EAA74C[v140];
                    if (v131 <= 8) {
                      goto LABEL_129;
                    }
LABEL_124:
                    unsigned int v146 = 1;
                    if (v143 < v144) {
                      continue;
                    }
                  }
                  else
                  {
                    unsigned int v143 = dword_242EAA72C[v137];
                    if (v130 > 7) {
                      goto LABEL_122;
                    }
LABEL_127:
                    unsigned int v144 = dword_242EAA72C[v130];
                    if (v140 <= 8) {
                      goto LABEL_128;
                    }
LABEL_123:
                    unsigned int v145 = 1;
                    if (v131 > 8) {
                      goto LABEL_124;
                    }
LABEL_129:
                    unsigned int v146 = dword_242EAA74C[v131];
                    if (v143 < v144) {
                      continue;
                    }
                  }
                  if (v144 >= v143)
                  {
                    unsigned int v147 = v20[8];
                    if (v147 < (unsigned __int16)v501
                      || (unsigned __int16)v501 >= v147
                      && (v145 < v146 || v146 >= v145 && *((_DWORD *)v20 + 6) < SDWORD2(v501)))
                    {
                      continue;
                    }
                  }
                  int v148 = *((_DWORD *)v20 + 1);
                  if ((v148 - 2) > 7)
                  {
                    unsigned int v149 = 3;
                    if (v132 <= 7) {
                      goto LABEL_140;
                    }
LABEL_138:
                    unsigned int v150 = 3;
                  }
                  else
                  {
                    unsigned int v149 = dword_242EAA72C[v148 - 2];
                    if (v132 > 7) {
                      goto LABEL_138;
                    }
LABEL_140:
                    unsigned int v150 = dword_242EAA72C[v132];
                  }
                  unsigned int v151 = v148 - 1;
                  if (v151 > 8)
                  {
                    unsigned int v152 = 1;
                    if (v133 > 8) {
                      goto LABEL_143;
                    }
                  }
                  else
                  {
                    unsigned int v152 = dword_242EAA74C[v151];
                    if (v133 > 8)
                    {
LABEL_143:
                      unsigned int v153 = 1;
                      if (v149 < v150) {
                        break;
                      }
                      goto LABEL_147;
                    }
                  }
                  unsigned int v153 = dword_242EAA74C[v133];
                  if (v149 < v150) {
                    break;
                  }
LABEL_147:
                  if (v150 >= v149)
                  {
                    unsigned int v154 = *v20;
                    if (v154 < (unsigned __int16)v500
                      || (unsigned __int16)v500 >= v154
                      && (v152 < v153 || v153 >= v152 && *((_DWORD *)v20 + 2) < SDWORD2(v500)))
                    {
                      break;
                    }
                  }
                  continue;
                }
                break;
              }
              unsigned int v155 = *(unsigned __int16 **)v116;
LABEL_154:
              while (2)
              {
                while (2)
                {
                  if (v117 == v155)
                  {
                    unint64_t v158 = (unsigned __int16 *)*((void *)v116 - 1);
                    v116 -= 8;
                    unsigned int v155 = v158;
                    uint64_t v156 = v158 + 2048;
                    if (v130 > 7) {
                      goto LABEL_158;
                    }
LABEL_156:
                    unsigned int v157 = dword_242EAA72C[v130];
                  }
                  else
                  {
                    uint64_t v156 = v117;
                    if (v130 <= 7) {
                      goto LABEL_156;
                    }
LABEL_158:
                    unsigned int v157 = 3;
                  }
                  int v159 = *((_DWORD *)v156 - 11);
                  unsigned int v160 = v159 - 2;
                  if ((v159 - 2) > 7)
                  {
                    unsigned int v161 = 3;
                    if (v131 <= 8) {
                      goto LABEL_163;
                    }
LABEL_161:
                    unsigned int v162 = 1;
                  }
                  else
                  {
                    unsigned int v161 = dword_242EAA72C[v160];
                    if (v131 > 8) {
                      goto LABEL_161;
                    }
LABEL_163:
                    unsigned int v162 = dword_242EAA74C[v131];
                  }
                  unsigned int v163 = v159 - 1;
                  if (v163 > 8) {
                    unsigned int v164 = 1;
                  }
                  else {
                    unsigned int v164 = dword_242EAA74C[v163];
                  }
                  unsigned int v117 = v156 - 32;
                  if (v157 < v161) {
                    continue;
                  }
                  break;
                }
                if (v161 >= v157)
                {
                  unsigned int v169 = *(v156 - 24);
                  if ((unsigned __int16)v501 < v169
                    || v169 >= (unsigned __int16)v501
                    && (v162 < v164 || v164 >= v162 && SDWORD2(v501) < *((_DWORD *)v156 - 10)))
                  {
                    continue;
                  }
                }
                break;
              }
              if (v160 > 7)
              {
                unsigned int v165 = 3;
                if (v130 <= 7) {
                  goto LABEL_182;
                }
LABEL_171:
                unsigned int v166 = 3;
                if (v163 > 8) {
                  goto LABEL_172;
                }
LABEL_183:
                unsigned int v167 = dword_242EAA74C[v163];
                if (v131 <= 8) {
                  goto LABEL_184;
                }
LABEL_173:
                unsigned int v168 = 1;
                if (v165 < v166) {
                  continue;
                }
              }
              else
              {
                unsigned int v165 = dword_242EAA72C[v160];
                if (v130 > 7) {
                  goto LABEL_171;
                }
LABEL_182:
                unsigned int v166 = dword_242EAA72C[v130];
                if (v163 <= 8) {
                  goto LABEL_183;
                }
LABEL_172:
                unsigned int v167 = 1;
                if (v131 > 8) {
                  goto LABEL_173;
                }
LABEL_184:
                unsigned int v168 = dword_242EAA74C[v131];
                if (v165 < v166) {
                  continue;
                }
              }
              break;
            }
            if (v166 >= v165)
            {
              unsigned int v170 = *(v156 - 24);
              if (v170 < (unsigned __int16)v501
                || (unsigned __int16)v501 >= v170
                && (v167 < v168 || v168 >= v167 && *((_DWORD *)v156 - 10) < SDWORD2(v501)))
              {
                continue;
              }
            }
            break;
          }
          int v171 = *((_DWORD *)v156 - 15);
          if ((v171 - 2) > 7)
          {
            unsigned int v172 = 3;
            if (v132 <= 7) {
              goto LABEL_195;
            }
LABEL_193:
            unsigned int v173 = 3;
          }
          else
          {
            unsigned int v172 = dword_242EAA72C[v171 - 2];
            if (v132 > 7) {
              goto LABEL_193;
            }
LABEL_195:
            unsigned int v173 = dword_242EAA72C[v132];
          }
          unsigned int v174 = v171 - 1;
          if (v174 > 8)
          {
            unsigned int v175 = 1;
            if (v133 > 8) {
              goto LABEL_198;
            }
          }
          else
          {
            unsigned int v175 = dword_242EAA74C[v174];
            if (v133 > 8)
            {
LABEL_198:
              unsigned int v176 = 1;
              if (v172 < v173) {
                goto LABEL_154;
              }
LABEL_202:
              if (v173 < v172) {
                continue;
              }
              unsigned int v177 = *v117;
              if (v177 >= (unsigned __int16)v500
                && ((unsigned __int16)v500 < v177
                 || v175 >= v176 && (v176 < v175 || *((_DWORD *)v156 - 14) >= SDWORD2(v500))))
              {
                continue;
              }
              goto LABEL_154;
            }
          }
          break;
        }
        unsigned int v176 = dword_242EAA74C[v133];
        if (v172 < v173) {
          goto LABEL_154;
        }
        goto LABEL_202;
      }
    }
    uint64_t v496 = (uint64_t)v8;
    long long v87 = *(_OWORD *)v20;
    long long v88 = *((_OWORD *)v20 + 1);
    long long v89 = *((_OWORD *)v20 + 3);
    long long v502 = *((_OWORD *)v20 + 2);
    long long v503 = v89;
    long long v500 = v87;
    long long v501 = v88;
    __int16 v90 = *(unsigned __int16 **)a1;
    unsigned int v91 = (unsigned __int16 **)a1;
    do
    {
      v20 += 32;
      if ((char *)v20 - (char *)v90 == 4096)
      {
        unint64_t v92 = v91[1];
        ++v91;
        __int16 v90 = v92;
        unint64_t v20 = v92;
      }
    }
    while (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v20 + 8, (unsigned __int16 *)&v500, (unsigned __int16 *)&v501, v20));
    uint64_t v93 = ((char *)v20 - (char *)v90) >> 6;
    if ((char *)v20 - (char *)v90 < 65) {
      uint64_t v94 = (uint64_t)&v91[-((unint64_t)(64 - v93) >> 6)][32 * (unint64_t)(~(64 - (_BYTE)v93) & 0x3F)];
    }
    else {
      uint64_t v94 = (uint64_t)&(*(unsigned __int16 **)((char *)v91 + (((unint64_t)(v93 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)))[32 * ((v93 - 1) & 0x3F)];
    }
    __int16 v95 = v21;
    int v96 = (unsigned __int16 *)v496;
    if ((unsigned __int16 *)v94 == v499)
    {
      while (1)
      {
        if (v91 >= (unsigned __int16 **)v95)
        {
          if (v91 != (unsigned __int16 **)v95)
          {
            BOOL v99 = v96;
            goto LABEL_217;
          }
          if (v20 >= v96) {
            break;
          }
        }
        if (v96 == *(unsigned __int16 **)v95)
        {
          uint64_t v103 = *((void *)v95 - 1);
          v95 -= 8;
          int v96 = (unsigned __int16 *)(v103 + 4096);
        }
        BOOL v99 = v96 - 32;
        BOOL v102 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v96 - 24, (unsigned __int16 *)&v500, (unsigned __int16 *)&v501, v96 - 32);
        int v96 = v99;
        if (v102) {
          goto LABEL_217;
        }
      }
      BOOL v99 = v96;
      BOOL v185 = v91 == (unsigned __int16 **)v95;
      if (v91 < (unsigned __int16 **)v95)
      {
LABEL_218:
        int v186 = 0;
        goto LABEL_226;
      }
    }
    else
    {
      BOOL v97 = (unsigned __int16 *)v496;
      __int16 v95 = a3;
      BOOL v98 = *(unsigned __int16 **)a3;
      do
      {
        if (v97 == v98)
        {
          BOOL v101 = (unsigned __int16 *)*((void *)v95 - 1);
          v95 -= 8;
          BOOL v98 = v101;
          BOOL v97 = v101 + 2048;
        }
        BOOL v99 = v97 - 32;
        BOOL v100 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v97 - 24, (unsigned __int16 *)&v500, (unsigned __int16 *)&v501, v97 - 32);
        BOOL v97 = v99;
      }
      while (!v100);
LABEL_217:
      BOOL v185 = v91 == (unsigned __int16 **)v95;
      if (v91 < (unsigned __int16 **)v95) {
        goto LABEL_218;
      }
    }
    int v186 = !v185 || v20 >= v99;
LABEL_226:
    if (v91 < (unsigned __int16 **)v95 || v91 == (unsigned __int16 **)v95 && v20 < v99)
    {
      long long v188 = *(_OWORD *)v20;
      long long v189 = *((_OWORD *)v20 + 1);
      long long v190 = *((_OWORD *)v20 + 3);
      long long v506 = *((_OWORD *)v20 + 2);
      long long v507 = v190;
      long long v504 = v188;
      long long v505 = v189;
      long long v191 = *(_OWORD *)v99;
      long long v192 = *((_OWORD *)v99 + 1);
      long long v193 = *((_OWORD *)v99 + 3);
      *((_OWORD *)v20 + 2) = *((_OWORD *)v99 + 2);
      *((_OWORD *)v20 + 3) = v193;
      *(_OWORD *)unint64_t v20 = v191;
      *((_OWORD *)v20 + 1) = v192;
      long long v194 = v504;
      long long v195 = v505;
      long long v196 = v507;
      *((_OWORD *)v99 + 2) = v506;
      *((_OWORD *)v99 + 3) = v196;
      *(_OWORD *)BOOL v99 = v194;
      *((_OWORD *)v99 + 1) = v195;
      __int16 v90 = *v91;
      uint64_t v197 = DWORD1(v501) - 2;
      uint64_t v198 = DWORD1(v501) - 1;
      uint64_t v199 = DWORD1(v500) - 2;
      uint64_t v200 = DWORD1(v500) - 1;
      while (1)
      {
        v20 += 32;
        if ((char *)v20 - (char *)v90 == 4096)
        {
          int v201 = v91[1];
          ++v91;
          __int16 v90 = v201;
          unint64_t v20 = v201;
        }
        int v202 = *((_DWORD *)v20 + 5);
        unsigned int v203 = v202 - 2;
        if ((v202 - 2) > 7)
        {
          unsigned int v204 = 3;
          if (v197 <= 7)
          {
LABEL_236:
            unsigned int v205 = dword_242EAA72C[v197];
            goto LABEL_237;
          }
        }
        else
        {
          unsigned int v204 = dword_242EAA72C[v203];
          if (v197 <= 7) {
            goto LABEL_236;
          }
        }
        unsigned int v205 = 3;
LABEL_237:
        unsigned int v206 = v202 - 1;
        if (v206 > 8)
        {
          unsigned int v207 = 1;
          if (v198 > 8) {
            goto LABEL_239;
          }
LABEL_242:
          unsigned int v208 = dword_242EAA74C[v198];
          if (v204 >= v205) {
            goto LABEL_243;
          }
        }
        else
        {
          unsigned int v207 = dword_242EAA74C[v206];
          if (v198 <= 8) {
            goto LABEL_242;
          }
LABEL_239:
          unsigned int v208 = 1;
          if (v204 >= v205)
          {
LABEL_243:
            if (v205 < v204
              || (unsigned int v213 = v20[8], v213 >= (unsigned __int16)v501)
              && ((unsigned __int16)v501 < v213 || v207 >= v208
                                                && (v208 < v207 || *((_DWORD *)v20 + 6) >= SDWORD2(v501))))
            {
              if (v197 > 7)
              {
                unsigned int v209 = 3;
                if (v203 > 7)
                {
LABEL_246:
                  unsigned int v210 = 3;
                  if (v198 > 8) {
                    goto LABEL_247;
                  }
                  goto LABEL_258;
                }
              }
              else
              {
                unsigned int v209 = dword_242EAA72C[v197];
                if (v203 > 7) {
                  goto LABEL_246;
                }
              }
              unsigned int v210 = dword_242EAA72C[v203];
              if (v198 > 8)
              {
LABEL_247:
                unsigned int v211 = 1;
                if (v206 > 8) {
                  goto LABEL_248;
                }
                goto LABEL_259;
              }
LABEL_258:
              unsigned int v211 = dword_242EAA74C[v198];
              if (v206 > 8)
              {
LABEL_248:
                unsigned int v212 = 1;
                if (v209 < v210) {
                  goto LABEL_284;
                }
                goto LABEL_260;
              }
LABEL_259:
              unsigned int v212 = dword_242EAA74C[v206];
              if (v209 < v210) {
                goto LABEL_284;
              }
LABEL_260:
              if (v210 >= v209)
              {
                unsigned int v214 = v20[8];
                if ((unsigned __int16)v501 < v214
                  || v214 >= (unsigned __int16)v501
                  && (v211 < v212 || v212 >= v211 && SDWORD2(v501) < *((_DWORD *)v20 + 6)))
                {
LABEL_284:
                  int v222 = *(unsigned __int16 **)v95;
                  while (1)
                  {
                    if (v99 == v222)
                    {
                      unint64_t v224 = (unsigned __int16 *)*((void *)v95 - 1);
                      v95 -= 8;
                      int v222 = v224;
                      uint64_t v223 = v224 + 2048;
                    }
                    else
                    {
                      uint64_t v223 = v99;
                    }
                    int v225 = *((_DWORD *)v223 - 11);
                    unsigned int v226 = v225 - 2;
                    if ((v225 - 2) > 7)
                    {
                      unsigned int v227 = 3;
                      if (v197 > 7)
                      {
LABEL_290:
                        unsigned int v228 = 3;
                        goto LABEL_293;
                      }
                    }
                    else
                    {
                      unsigned int v227 = dword_242EAA72C[v226];
                      if (v197 > 7) {
                        goto LABEL_290;
                      }
                    }
                    unsigned int v228 = dword_242EAA72C[v197];
LABEL_293:
                    unsigned int v229 = v225 - 1;
                    if (v229 > 8)
                    {
                      unsigned int v230 = 1;
                      if (v198 > 8)
                      {
LABEL_295:
                        unsigned int v231 = 1;
                        goto LABEL_298;
                      }
                    }
                    else
                    {
                      unsigned int v230 = dword_242EAA74C[v229];
                      if (v198 > 8) {
                        goto LABEL_295;
                      }
                    }
                    unsigned int v231 = dword_242EAA74C[v198];
LABEL_298:
                    BOOL v99 = v223 - 32;
                    if (v227 < v228) {
                      goto LABEL_226;
                    }
                    if (v228 >= v227)
                    {
                      unsigned int v232 = *(v223 - 24);
                      if (v232 < (unsigned __int16)v501
                        || (unsigned __int16)v501 >= v232
                        && (v230 < v231 || v231 >= v230 && *((_DWORD *)v223 - 10) < SDWORD2(v501)))
                      {
                        goto LABEL_226;
                      }
                    }
                    if (v197 > 7)
                    {
                      unsigned int v233 = 3;
                      if (v226 <= 7) {
                        goto LABEL_312;
                      }
LABEL_307:
                      unsigned int v234 = 3;
                      if (v198 > 8) {
                        goto LABEL_308;
                      }
LABEL_313:
                      unsigned int v235 = dword_242EAA74C[v198];
                      if (v229 > 8) {
                        goto LABEL_309;
                      }
LABEL_314:
                      unsigned int v236 = dword_242EAA74C[v229];
                      if (v233 >= v234) {
                        goto LABEL_315;
                      }
                    }
                    else
                    {
                      unsigned int v233 = dword_242EAA72C[v197];
                      if (v226 > 7) {
                        goto LABEL_307;
                      }
LABEL_312:
                      unsigned int v234 = dword_242EAA72C[v226];
                      if (v198 <= 8) {
                        goto LABEL_313;
                      }
LABEL_308:
                      unsigned int v235 = 1;
                      if (v229 <= 8) {
                        goto LABEL_314;
                      }
LABEL_309:
                      unsigned int v236 = 1;
                      if (v233 >= v234)
                      {
LABEL_315:
                        if (v234 < v233
                          || (unsigned int v238 = *(v223 - 24), (unsigned __int16)v501 >= v238)
                          && (v238 < (unsigned __int16)v501
                           || v235 >= v236 && (v236 < v235 || SDWORD2(v501) >= *((_DWORD *)v223 - 10))))
                        {
                          if (v199 > 7) {
                            unsigned int v237 = 3;
                          }
                          else {
                            unsigned int v237 = dword_242EAA72C[v199];
                          }
                          int v239 = *((_DWORD *)v223 - 15);
                          if ((v239 - 2) > 7)
                          {
                            unsigned int v240 = 3;
                            if (v200 <= 8)
                            {
LABEL_329:
                              unsigned int v241 = dword_242EAA74C[v200];
                              goto LABEL_330;
                            }
                          }
                          else
                          {
                            unsigned int v240 = dword_242EAA72C[v239 - 2];
                            if (v200 <= 8) {
                              goto LABEL_329;
                            }
                          }
                          unsigned int v241 = 1;
LABEL_330:
                          unsigned int v242 = v239 - 1;
                          if (v242 > 8)
                          {
                            unsigned int v243 = 1;
                            if (v237 < v240) {
                              goto LABEL_226;
                            }
                          }
                          else
                          {
                            unsigned int v243 = dword_242EAA74C[v242];
                            if (v237 < v240) {
                              goto LABEL_226;
                            }
                          }
                          if (v240 >= v237)
                          {
                            unsigned int v244 = *v99;
                            if ((unsigned __int16)v500 < v244
                              || v244 >= (unsigned __int16)v500
                              && (v241 < v243 || v243 >= v241 && SDWORD2(v500) < *((_DWORD *)v223 - 14)))
                            {
                              goto LABEL_226;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v199 > 7) {
                unsigned int v215 = 3;
              }
              else {
                unsigned int v215 = dword_242EAA72C[v199];
              }
              int v216 = *((_DWORD *)v20 + 1);
              if ((v216 - 2) > 7)
              {
                unsigned int v217 = 3;
                if (v200 <= 8)
                {
LABEL_273:
                  unsigned int v218 = dword_242EAA74C[v200];
                  goto LABEL_274;
                }
              }
              else
              {
                unsigned int v217 = dword_242EAA72C[v216 - 2];
                if (v200 <= 8) {
                  goto LABEL_273;
                }
              }
              unsigned int v218 = 1;
LABEL_274:
              unsigned int v219 = v216 - 1;
              if (v219 > 8)
              {
                unsigned int v220 = 1;
                if (v215 >= v217) {
                  goto LABEL_278;
                }
              }
              else
              {
                unsigned int v220 = dword_242EAA74C[v219];
                if (v215 >= v217)
                {
LABEL_278:
                  if (v217 < v215) {
                    goto LABEL_284;
                  }
                  unsigned int v221 = *v20;
                  if ((unsigned __int16)v500 >= v221
                    && (v221 < (unsigned __int16)v500
                     || v218 >= v220 && (v220 < v218 || SDWORD2(v500) >= *((_DWORD *)v20 + 2))))
                  {
                    goto LABEL_284;
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v245 = ((char *)v20 - (char *)v90) >> 6;
    if ((char *)v20 - (char *)v90 < 65)
    {
      unint64_t v248 = 64 - v245;
      uint64_t v247 = (char *)&v91[-(v248 >> 6)];
      unsigned __int16 v8 = (unsigned __int16 *)(*(void *)v247 + ((unint64_t)(~(_BYTE)v248 & 0x3F) << 6));
    }
    else
    {
      unint64_t v246 = v245 - 1;
      uint64_t v247 = (char *)&v91[v246 >> 6];
      unsigned __int16 v8 = (unsigned __int16 *)(*(void *)v247 + ((v246 & 0x3F) << 6));
    }
    unint64_t v20 = v499;
    a5 = v495;
    if (v8 != v499)
    {
      long long v249 = *(_OWORD *)v8;
      long long v250 = *((_OWORD *)v8 + 1);
      long long v251 = *((_OWORD *)v8 + 3);
      *((_OWORD *)v499 + 2) = *((_OWORD *)v8 + 2);
      *((_OWORD *)v499 + 3) = v251;
      *(_OWORD *)long long v499 = v249;
      *((_OWORD *)v499 + 1) = v250;
    }
    long long v252 = v501;
    *(_OWORD *)unsigned __int16 v8 = v500;
    *((_OWORD *)v8 + 1) = v252;
    long long v253 = v503;
    *((_OWORD *)v8 + 2) = v502;
    *((_OWORD *)v8 + 3) = v253;
    if (!v186) {
      goto LABEL_354;
    }
    BOOL EncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB_((char *)a1, (long long *)v499, v247, (uint64_t)v8);
    uint64_t v255 = (uint64_t)v8 - *(void *)v247;
    uint64_t v256 = v255 >> 6;
    if (v255 < -63)
    {
      unint64_t v260 = 62 - v256;
      uint64_t v258 = &v247[-8 * (v260 >> 6)];
      v259 = (long long *)(*(void *)v258 + ((unint64_t)(~(_BYTE)v260 & 0x3F) << 6));
    }
    else
    {
      unint64_t v257 = v256 + 1;
      uint64_t v258 = &v247[8 * (v257 >> 6)];
      v259 = (long long *)(*(void *)v258 + ((v257 & 0x3F) << 6));
    }
    if (!_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB_(v258, v259, a3, v496))
    {
      if (!EncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB)
      {
LABEL_354:
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEELb0EEEvT1_SL_SB_NS_15iterator_traitsISL_E15difference_typeEb(a1, v499, v247, v8, v495, a6 & 1);
        a6 = 0;
      }
      unint64_t v20 = v8 + 32;
      if ((unsigned __int16 *)((char *)v8 - *(void *)v247 + 64) == (unsigned __int16 *)4096)
      {
        uint64_t v261 = (unsigned __int16 *)*((void *)v247 + 1);
        v247 += 8;
        unint64_t v20 = v261;
      }
      a1 = (unint64_t)v247;
      unsigned __int16 v8 = (unsigned __int16 *)v496;
      goto LABEL_4;
    }
    a3 = v247;
    if (EncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB) {
      return;
    }
LABEL_4:
    long long v499 = v20;
    BOOL v6 = v8 > v20;
    if (v8 == v20) {
      return;
    }
  }
  switch(v17)
  {
    case 0:
    case 1:
      return;
    case 2:
      if (v8 == v11) {
        unsigned __int16 v8 = (unsigned __int16 *)(*((void *)a3 - 1) + 4096);
      }
      uint64_t v262 = v8 - 32;
      if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v8 - 24, v499, v499 + 8, v8 - 32))
      {
        long long v263 = *(_OWORD *)v499;
        long long v264 = *((_OWORD *)v499 + 1);
        long long v265 = *((_OWORD *)v499 + 3);
        long long v506 = *((_OWORD *)v499 + 2);
        long long v507 = v265;
        long long v504 = v263;
        long long v505 = v264;
        long long v266 = *(_OWORD *)v262;
        long long v267 = *((_OWORD *)v8 - 3);
        long long v268 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v499 + 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v499 + 3) = v268;
        *(_OWORD *)long long v499 = v266;
        *((_OWORD *)v499 + 1) = v267;
        long long v269 = v504;
        long long v270 = v505;
        long long v271 = v507;
        *((_OWORD *)v8 - 2) = v506;
        *((_OWORD *)v8 - 1) = v271;
        *(_OWORD *)uint64_t v262 = v269;
        *((_OWORD *)v8 - 3) = v270;
      }
      return;
    case 3:
      if (v15 < -63)
      {
        unint64_t v370 = 62 - v16;
        unint64_t v273 = (void *)(a1 - 8 * (v370 >> 6));
        uint64_t v274 = (unsigned __int16 *)(*v273 + ((unint64_t)(~(_BYTE)v370 & 0x3F) << 6));
      }
      else
      {
        unint64_t v272 = v16 + 1;
        unint64_t v273 = (void *)(a1 + 8 * (v272 >> 6));
        uint64_t v274 = (unsigned __int16 *)(*v273 + ((v272 & 0x3F) << 6));
      }
      uint64_t v371 = (uint64_t)a3;
      if (v8 == v11)
      {
        uint64_t v371 = (uint64_t)(a3 - 8);
        unsigned __int16 v8 = (unsigned __int16 *)(*((void *)a3 - 1) + 4096);
      }
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_(a1, v499, (uint64_t)v273, v274, v371, v8 - 32);
      return;
    case 4:
      if (v15 >= -63)
      {
        uint64_t v275 = (void *)(a1 + 8 * ((unint64_t)(v16 + 1) >> 6));
        unint64_t v276 = (unsigned __int16 *)(*v275 + (((v16 + 1) & 0x3F) << 6));
        unint64_t v277 = v16 + 2;
        uint64_t v278 = v499;
LABEL_480:
        uint64_t v372 = (void *)(a1 + 8 * (v277 >> 6));
        long long v373 = (unsigned __int16 *)(*v372 + ((v277 & 0x3F) << 6));
        goto LABEL_539;
      }
      uint64_t v275 = (void *)(a1 - 8 * ((unint64_t)(62 - v16) >> 6));
      unint64_t v276 = (unsigned __int16 *)(*v275 + ((unint64_t)(~(62 - (_BYTE)v16) & 0x3F) << 6));
      uint64_t v278 = v499;
      if ((unint64_t)v15 >= 0xFFFFFFFFFFFFFF81)
      {
        unint64_t v277 = 1;
        goto LABEL_480;
      }
      unint64_t v436 = 61 - v16;
      uint64_t v372 = (void *)(a1 - 8 * (v436 >> 6));
      long long v373 = (unsigned __int16 *)(*v372 + ((unint64_t)(~(_BYTE)v436 & 0x3F) << 6));
LABEL_539:
      uint64_t v437 = (uint64_t)a3;
      if (v8 == v11)
      {
        uint64_t v437 = (uint64_t)(a3 - 8);
        unsigned __int16 v8 = (unsigned __int16 *)(*((void *)a3 - 1) + 4096);
      }
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SB_(a1, v278, (uint64_t)v275, v276, (uint64_t)v372, v373, v437, v8 - 32);
      return;
    case 5:
      if (v15 >= -63)
      {
        v279 = (void *)(a1 + 8 * ((unint64_t)(v16 + 1) >> 6));
        v280 = (unsigned __int16 *)(*v279 + (((v16 + 1) & 0x3F) << 6));
        unint64_t v281 = v16 + 2;
        v282 = v499;
LABEL_483:
        uint64_t v374 = (void *)(a1 + 8 * (v281 >> 6));
        v375 = (unsigned __int16 *)(*v374 + ((v281 & 0x3F) << 6));
        unint64_t v376 = v16 + 3;
        goto LABEL_484;
      }
      v279 = (void *)(a1 - 8 * ((unint64_t)(62 - v16) >> 6));
      v280 = (unsigned __int16 *)(*v279 + ((unint64_t)(~(62 - (_BYTE)v16) & 0x3F) << 6));
      v282 = v499;
      if ((unint64_t)v15 >= 0xFFFFFFFFFFFFFF81)
      {
        unint64_t v281 = 1;
        goto LABEL_483;
      }
      uint64_t v374 = (void *)(a1 - 8 * ((unint64_t)(61 - v16) >> 6));
      v375 = (unsigned __int16 *)(*v374 + ((unint64_t)(~(61 - (_BYTE)v16) & 0x3F) << 6));
      if ((unint64_t)v15 >= 0xFFFFFFFFFFFFFF41)
      {
        unint64_t v376 = 1;
LABEL_484:
        uint64_t v377 = (uint64_t)a3;
        uint64_t v378 = (void *)(a1 + 8 * (v376 >> 6));
        uint64_t v379 = (unsigned __int16 *)(*v378 + ((v376 & 0x3F) << 6));
        if (v8 != v11) {
          goto LABEL_486;
        }
        goto LABEL_485;
      }
      unint64_t v492 = 60 - v16;
      uint64_t v378 = (void *)(a1 - 8 * (v492 >> 6));
      uint64_t v379 = (unsigned __int16 *)(*v378 + ((unint64_t)(~(_BYTE)v492 & 0x3F) << 6));
      uint64_t v377 = (uint64_t)a3;
      if (v8 == v11)
      {
LABEL_485:
        uint64_t v380 = *(void *)(v377 - 8);
        v377 -= 8;
        unsigned __int16 v8 = (unsigned __int16 *)(v380 + 4096);
      }
LABEL_486:
      _ZNSt3__17__sort5B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SL_SB_(a1, v282, (uint64_t)v279, v280, (uint64_t)v374, v375, (uint64_t)v378, v379, v377, v8 - 32);
      break;
    default:
      JUMPOUT(0);
  }
}

void std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    BOOL v6 = *(void **)(a1 + 8);
    int v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_79:
      *(void *)int v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unsigned __int16 v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v30 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v30 = 1;
      }
      if (!(v30 >> 61))
      {
        unint64_t v31 = v30 >> 2;
        uint64_t v32 = 8 * v30;
        unsigned int v33 = (char *)operator new(8 * v30);
        uint64_t v34 = &v33[8 * v31];
        unint64_t v35 = &v33[v32];
        int64_t v37 = v5 - v7;
        BOOL v36 = v5 == v7;
        int v5 = v34;
        if (!v36)
        {
          int v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            int v71 = &v33[8 * v31];
            unint64_t v39 = v71;
            if ((unint64_t)(v71 - v7) >= 0x20)
            {
              uint64_t v72 = (v38 >> 3) + 1;
              uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v39 = &v34[v73];
              uint64_t v74 = (long long *)(v6 + 3);
              BOOL v75 = v71 + 16;
              uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v77 = *v74;
                *(v75 - 1) = *(v74 - 1);
                _OWORD *v75 = v77;
                v74 += 2;
                v75 += 2;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v73;
            }
          }
          else
          {
            unint64_t v39 = &v33[8 * v31];
          }
          do
          {
            uint64_t v78 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v39 = v78;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_77;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    int v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_79;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v87 = operator new(0x1000uLL);
      std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_back((char **)a1, &v87);
      return;
    }
    long long v87 = operator new(0x1000uLL);
    std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_front((void **)a1, &v87);
    unint64_t v40 = *(void **)(a1 + 8);
    int v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v40 + 1);
    uint64_t v8 = *v40;
    *(void *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_79;
    }
    unsigned __int16 v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v41 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v41 = 1;
      }
      if (!(v41 >> 61))
      {
        unint64_t v42 = v41 >> 2;
        uint64_t v43 = 8 * v41;
        unsigned int v33 = (char *)operator new(8 * v41);
        uint64_t v34 = &v33[8 * v42];
        unint64_t v35 = &v33[v43];
        int64_t v44 = v5 - v7;
        BOOL v36 = v5 == v7;
        int v5 = v34;
        if (!v36)
        {
          int v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            long long v79 = &v33[8 * v42];
            unint64_t v46 = v79;
            if ((unint64_t)(v79 - v7) >= 0x20)
            {
              uint64_t v80 = (v45 >> 3) + 1;
              uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v46 = &v34[v81];
              long long v82 = (long long *)(v40 + 3);
              long long v83 = v79 + 16;
              uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v85 = *v82;
                *(v83 - 1) = *(v82 - 1);
                *long long v83 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v81;
            }
          }
          else
          {
            unint64_t v46 = &v33[8 * v42];
          }
          do
          {
            uint64_t v86 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v46 = v86;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_77:
        *(void *)a1 = v33;
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          int v5 = *(char **)(a1 + 16);
        }
        goto LABEL_79;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  BOOL v25 = (char *)operator new(8 * v24);
  int v26 = operator new(0x1000uLL);
  int v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = v20 >> 2;
      }
      if (v47 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v27 = (char *)operator new(8 * v47);
      unsigned int v28 = &v27[8 * v47];
      operator delete(v25);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      BOOL v25 = v27;
    }
    else
    {
      unint64_t v29 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v29 = v21 + 1;
      }
      v27 -= 8 * (v29 >> 1);
    }
  }
  *(void *)int v27 = v26;
  uint64_t v48 = v27 + 8;
  if (v18 != v19)
  {
    while (v27 != v25)
    {
      int v52 = v27;
      int v50 = v48;
LABEL_49:
      uint64_t v53 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v52 - 1) = v53;
      unsigned int v49 = v52 - 8;
      uint64_t v48 = v50;
      int v27 = v49;
      if (v18 == *(void *)(a1 + 8)) {
        goto LABEL_44;
      }
    }
    if (v48 < v28)
    {
      uint64_t v54 = (v28 - v48) >> 3;
      if (v54 >= -1) {
        unint64_t v55 = v54 + 1;
      }
      else {
        unint64_t v55 = v54 + 2;
      }
      int v50 = &v48[8 * (v55 >> 1)];
      int v52 = &v27[8 * (v55 >> 1)];
      if (v48 == v27)
      {
        BOOL v25 = v48;
      }
      else
      {
        memmove(&v27[8 * (v55 >> 1)], v27, v48 - v27);
        BOOL v25 = v27;
      }
      goto LABEL_49;
    }
    if (v28 == v27) {
      unint64_t v56 = 1;
    }
    else {
      unint64_t v56 = (v28 - v27) >> 2;
    }
    if (v56 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v57 = (char *)operator new(8 * v56);
    BOOL v25 = v57;
    unint64_t v58 = (v56 + 3) >> 2;
    int v52 = &v57[8 * v58];
    int v50 = v52;
    int64_t v59 = v48 - v27;
    if (v48 != v27)
    {
      int v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v60 = v59 - 8;
      uint64_t v61 = &v57[8 * v58];
      unint64_t v62 = v27;
      if (v60 >= 0x38)
      {
        uint64_t v63 = 8 * v58;
        uint64_t v61 = &v57[8 * v58];
        unint64_t v62 = v27;
        if ((unint64_t)(v61 - v27) >= 0x20)
        {
          uint64_t v64 = (v60 >> 3) + 1;
          uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v61 = &v52[v65];
          unint64_t v66 = (long long *)(v27 + 16);
          BOOL v67 = &v57[v63 + 16];
          uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v69 = *v66;
            *((_OWORD *)v67 - 1) = *(v66 - 1);
            *(_OWORD *)BOOL v67 = v69;
            v66 += 2;
            v67 += 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_69;
          }
          unint64_t v62 = &v27[v65];
        }
      }
      do
      {
        uint64_t v70 = *(void *)v62;
        v62 += 8;
        *(void *)uint64_t v61 = v70;
        v61 += 8;
      }
      while (v61 != v50);
    }
LABEL_69:
    unsigned int v28 = &v57[8 * v56];
    operator delete(v27);
    goto LABEL_49;
  }
  unsigned int v49 = v27;
  int v50 = v27 + 8;
LABEL_44:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v49;
  *(void *)(a1 + 16) = v50;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_242A76B78(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *AGXIotoInstruction_COPY::emit(AGXIotoInstruction_COPY *this, unsigned __int8 *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 19);
  if (v4 == 1)
  {
    long long v8 = *((_OWORD *)this + 3);
    long long v37 = *((_OWORD *)this + 2);
    v38[0] = v8;
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)this + 60);
    long long v9 = *((_OWORD *)this + 1);
    long long v35 = *(_OWORD *)this;
    long long v36 = v9;
    return AGXIotoInstruction_COPY_1::emit((AGXIotoInstruction_COPY_1 *)&v35, a2);
  }
  if (!v4)
  {
    long long v5 = *((_OWORD *)this + 3);
    long long v37 = *((_OWORD *)this + 2);
    v38[0] = v5;
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)this + 60);
    long long v6 = *((_OWORD *)this + 1);
    long long v35 = *(_OWORD *)this;
    long long v36 = v6;
    return AGXIotoInstruction_COPY_0::emit((AGXIotoInstruction_COPY_0 *)&v35, a2);
  }
  long long v10 = *((_OWORD *)this + 3);
  long long v33 = *((_OWORD *)this + 2);
  v34[0] = v10;
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)this + 60);
  long long v11 = *((_OWORD *)this + 1);
  long long v31 = *(_OWORD *)this;
  long long v32 = v11;
  AGXIotoInstruction_COPY_0::emit((AGXIotoInstruction_COPY_0 *)&v31, v39);
  if ((v39[2] & 7) == 1 && (v39[0] & 7) == 3)
  {
    long long v37 = 0u;
    memset(v38, 0, 28);
    long long v35 = 0u;
    long long v36 = 0u;
    DWORD1(v36) = 8;
    char v12 = 1;
    HIDWORD(v38[0]) = 0;
    switch((unint64_t)*(unsigned __int16 *)&v39[2] >> 13)
    {
      case 1uLL:
        goto LABEL_14;
      case 2uLL:
        char v12 = 2;
        goto LABEL_14;
      case 3uLL:
        char v12 = 4;
        goto LABEL_14;
      case 4uLL:
        char v12 = 8;
        goto LABEL_14;
      case 5uLL:
        char v12 = 16;
        goto LABEL_14;
      case 6uLL:
        char v12 = 32;
        goto LABEL_14;
      case 7uLL:
        char v12 = 3;
LABEL_14:
        BYTE8(v38[1]) = v12;
        break;
      default:
        break;
    }
    if ((v39[0] & 8) != 0) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    HIDWORD(v35) = v13;
    DWORD2(v37) = v13;
    if ((*(_WORD *)&v39[2] & 0x200) != 0)
    {
      DWORD1(v37) = 4;
      HIDWORD(v36) = (*(unsigned __int16 *)v39 >> 3) & 0x1E | (((*(unsigned __int16 *)&v39[2] >> 5) & 1) << 16) | (*(unsigned __int16 *)&v39[2] >> 1) & 0x60 | v39[3] & 1 | (((*(unsigned __int16 *)&v39[2] >> 10) & 1) << 15);
    }
    else
    {
      if ((*(_WORD *)&v39[2] & 0x400) == 0)
      {
        *(void *)&v38[0] = 8;
        DWORD1(v37) = 2;
        BYTE12(v36) = (*(unsigned __int16 *)&v39[2] >> 1) & 0x60 | v39[3] & 1 | (*(unsigned __int16 *)v39 >> 3) & 0x1E;
        BYTE12(v37) = (v39[2] & 0x20) != 0;
        if ((*(_WORD *)&v39[2] & 0x800) != 0) {
          goto LABEL_27;
        }
LABEL_24:
        DWORD2(v35) = 2;
        LOBYTE(v35) = (*(unsigned __int16 *)&v39[2] >> 5) & 0x80 | v39[1] & 0x7F;
        LOBYTE(v36) = *(unsigned __int16 *)v39 >> 15;
        BYTE8(v36) = (v39[2] & 8) != 0;
        goto LABEL_31;
      }
      if ((v39[2] & 0x20) == 0)
      {
        *(void *)&v38[0] = 8;
        DWORD1(v37) = 3;
        WORD6(v36) = (*(_WORD *)&v39[2] >> 1) & 0x60 | v39[3] & 1 | (*(_WORD *)v39 >> 3) & 0x1E;
        BYTE12(v37) = 0;
        if ((*(_WORD *)&v39[2] & 0x800) == 0) {
          goto LABEL_24;
        }
        goto LABEL_27;
      }
      DWORD1(v37) = 5;
      WORD6(v36) = (*(_WORD *)&v39[2] >> 1) & 0x60 | v39[3] & 1 | (*(_WORD *)v39 >> 3) & 0x1E;
    }
    BYTE12(v37) = 0;
    *(void *)&v38[0] = 0;
    if ((*(_WORD *)&v39[2] & 0x800) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    LOBYTE(v36) = 0;
    BYTE8(v36) = 0;
    int v14 = v39[1] & 0x7F;
    int v15 = (16 * *(unsigned __int16 *)&v39[2]) & 0x80;
    if ((*(_WORD *)v39 & 0x8000) != 0)
    {
      DWORD2(v35) = 1;
      LOWORD(v16) = v14 | v15;
    }
    else
    {
      DWORD2(v35) = 3;
      int v16 = v15 | (*(unsigned __int16 *)&v39[2] >> 4) & 0x100 | v14;
    }
    LOWORD(v35) = v16;
LABEL_31:
    if (operator==((unsigned __int8 *)&v35, (unsigned __int8 *)&v31))
    {
      *(_DWORD *)a2 = *(_DWORD *)v39;
      return a2 + 4;
    }
  }
  long long v17 = *((_OWORD *)this + 3);
  long long v33 = *((_OWORD *)this + 2);
  v34[0] = v17;
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)this + 60);
  long long v18 = *((_OWORD *)this + 1);
  long long v31 = *(_OWORD *)this;
  long long v32 = v18;
  AGXIotoInstruction_COPY_1::emit((AGXIotoInstruction_COPY_1 *)&v31, v39);
  if ((v39[4] & 3 | (4 * ((*(unsigned __int16 *)&v39[4] >> 11) & 1))) != 2
    || (~*(unsigned __int16 *)&v39[2] & 7) != 0
    || (v39[0] & 7) != 3)
  {
    return 0;
  }
  long long v37 = 0u;
  memset(v38, 0, 28);
  long long v35 = 0u;
  long long v36 = 0u;
  BYTE8(v38[0]) = v39[6] & 1;
  BYTE8(v38[1]) = (*(unsigned __int16 *)&v39[6] >> 10) & 0x38 | (*(unsigned __int16 *)&v39[4] >> 13);
  int v19 = (v39[0] & 8) != 0 ? 2 : 1;
  DWORD2(v37) = v19;
  int v20 = (*(_WORD *)v39 & 0x100) != 0 ? 2 : 1;
  DWORD1(v36) = 8;
  HIDWORD(v35) = v20;
  if ((v39[4] & 0x20) != 0)
  {
    DWORD1(v37) = 4;
    HIDWORD(v36) = (*(unsigned __int16 *)v39 >> 3) & 0x1E | (((*(unsigned __int16 *)&v39[2] >> 5) & 1) << 16) | (*(unsigned __int16 *)&v39[2] >> 1) & 0x60 | (*(unsigned __int16 *)&v39[4] >> 2) & 1 | (((*(unsigned __int16 *)&v39[4] >> 6) & 1) << 15) | (*(unsigned __int16 *)&v39[4] >> 5) & 0x80 | (((*(unsigned __int16 *)&v39[6] >> 2) & 0xF) << 8) | (v40 << 9) & 0x3000 | (4 * v40) & 0x4000;
    switch((*(unsigned __int16 *)&v39[6] >> 10) & 7)
    {
      case 1:
LABEL_46:
        int v21 = 1;
        goto LABEL_56;
      case 2:
LABEL_51:
        int v21 = 2;
        goto LABEL_56;
      case 3:
LABEL_52:
        int v21 = 3;
        goto LABEL_56;
      case 4:
LABEL_53:
        int v21 = 4;
        goto LABEL_56;
      case 5:
LABEL_54:
        int v21 = 5;
        goto LABEL_56;
      case 7:
LABEL_55:
        int v21 = 8;
LABEL_56:
        LODWORD(v38[0]) = v21;
        break;
      default:
        break;
    }
  }
  else if ((v39[4] & 0x40) != 0)
  {
    if ((v39[2] & 0x20) != 0)
    {
      WORD6(v36) = (*(_WORD *)&v39[2] >> 1) & 0x60 | (v39[0] >> 3) & 0xFE | (*(_WORD *)&v39[4] >> 2) & 1 | (*(_WORD *)&v39[4] >> 5) & 0x80 | (((*(_WORD *)&v39[6] >> 2) & 0xF) << 8) & 0xEFFF | (((v40 >> 3) & 1) << 12);
      DWORD1(v37) = 5;
      DWORD1(v38[0]) = (v40 >> 4) & 1;
      switch(((unint64_t)*(unsigned __int16 *)&v39[6] >> 10) & 7)
      {
        case 1uLL:
          goto LABEL_46;
        case 2uLL:
          goto LABEL_51;
        case 3uLL:
          goto LABEL_52;
        case 4uLL:
          goto LABEL_53;
        case 5uLL:
          goto LABEL_54;
        case 7uLL:
          goto LABEL_55;
        default:
          break;
      }
    }
    else
    {
      LODWORD(v38[0]) = 8;
      DWORD1(v37) = 3;
      WORD6(v36) = (*(_WORD *)&v39[2] >> 1) & 0x60 | (v39[0] >> 3) & 0xFE | (*(_WORD *)&v39[4] >> 2) & 1 | (*(_WORD *)&v39[4] >> 5) & 0x80 | (((*(_WORD *)&v39[6] >> 2) & 1) << 8);
    }
  }
  else
  {
    LODWORD(v38[0]) = 8;
    DWORD1(v37) = 2;
    BYTE12(v36) = (*(unsigned __int16 *)&v39[2] >> 1) & 0x60 | (v39[0] >> 3) & 0xFE | ((v39[4] & 4) != 0) | (*(unsigned __int16 *)&v39[4] >> 5) & 0x80;
    BYTE12(v37) = (v39[2] & 0x20) != 0;
  }
  if ((v39[4] & 0x80) != 0)
  {
    LOBYTE(v36) = 0;
    BYTE8(v36) = 0;
    int v22 = v39[1] & 0x7E | (((*(unsigned __int16 *)&v39[2] >> 3) & 1) << 7);
    int v23 = (*(unsigned __int16 *)&v39[4] >> 3) & 1;
    if ((*(_WORD *)v39 & 0x8000) != 0)
    {
      DWORD2(v35) = 1;
      __int16 v24 = v22 | v23;
    }
    else
    {
      DWORD2(v35) = 3;
      __int16 v24 = v22 | *(_WORD *)&v39[4] & 0x100 | v23;
    }
    LOWORD(v35) = v24;
  }
  else
  {
    DWORD2(v35) = 2;
    LOBYTE(v35) = (*(unsigned __int16 *)&v39[4] >> 1) & 0x80 | ((v39[4] & 8) != 0) | v39[1] & 0x7E;
    LOBYTE(v36) = *(unsigned __int16 *)v39 >> 15;
    BYTE8(v36) = (v39[2] & 8) != 0;
  }
  unsigned __int16 v25 = v40;
  unint64_t v26 = ((unint64_t)v40 >> 5) & 0x1F;
  if (v26 <= 0x1A)
  {
    uint64_t v27 = 4 * v26;
    unsigned int v28 = *(_DWORD *)((char *)&unk_242EAA5D0 + v27);
    unsigned int v29 = *(_DWORD *)((char *)&unk_242EAA63C + v27);
    LODWORD(v27) = *(_DWORD *)((char *)&unk_242EAA6A8 + v27);
    *(void *)&v38[1] = __PAIR64__(v28, v29);
    HIDWORD(v38[0]) = v27;
  }
  if ((operator==((unsigned __int8 *)&v35, (unsigned __int8 *)&v31) & 1) == 0) {
    return 0;
  }
  *(void *)a2 = *(void *)v39;
  *((_WORD *)a2 + 4) = v25;
  return a2 + 10;
}

unsigned __int8 *AGXIotoInstruction_COPY_0::emit(AGXIotoInstruction_COPY_0 *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 17)) {
    int v2 = 1;
  }
  else {
    int v2 = *(void *)((char *)this + 60) != 0;
  }
  unsigned int v3 = *((unsigned char *)this + 72) & 0x3F;
  BOOL v9 = v3 < 2 || (*((unsigned char *)this + 72) & 0x3E) == 2 || v3 == 32 || v3 == 4 || v3 == 8 || v3 == 16;
  int v10 = *((_DWORD *)this + 2);
  int v11 = *((_DWORD *)this + 3);
  int v12 = *((_DWORD *)this + 9);
  int v13 = *((_DWORD *)this + 10);
  int v15 = *((_DWORD *)this + 12);
  int v14 = *((_DWORD *)this + 13);
  if (v14) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v15 == 8;
  }
  int v17 = v16;
  if (v12 == 2) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  int v19 = *((unsigned char *)this + 44) & 1;
  BOOL v21 = v12 == 3 && v19 == 0;
  BOOL v22 = v17 == 1 && v21;
  BOOL v24 = v12 == 5 && (v14 | v19) == 0 && v15 == 0;
  int v25 = v24;
  int v26 = v24 || v22;
  int v27 = v18 | v26;
  BOOL v30 = v12 == 4 && v19 == 0 && v15 == 0;
  if (v14) {
    BOOL v31 = 0;
  }
  else {
    BOOL v31 = v30;
  }
  BOOL v32 = (*((unsigned char *)this + 24) & 1) == 0;
  BOOL v33 = v10 == 3 && (*((unsigned char *)this + 24) & 1) == 0;
  if (v10 != 1) {
    BOOL v32 = 0;
  }
  if (*((unsigned char *)this + 16))
  {
    BOOL v33 = 0;
    BOOL v32 = 0;
  }
  int v34 = v10 == 2 || v33 || v32;
  int v35 = ((*((unsigned char *)this + 56) & 1) == 0) & ~v2;
  if (*((_DWORD *)this + 5) != 8) {
    int v35 = 0;
  }
  unsigned int v36 = v35 & v9;
  if ((v11 - 1) >= 2) {
    unsigned int v36 = 0;
  }
  if ((v13 - 1) >= 2) {
    unsigned int v36 = 0;
  }
  int v37 = v36 & (v27 | v31);
  LOWORD(v36) = 3;
  if (v37 != 1 || v34 == 0)
  {
    LOWORD(v39) = 1;
    goto LABEL_143;
  }
  BOOL v40 = v3 == 4;
  if (v3 < 3) {
    BOOL v40 = 1;
  }
  if (v3 == 3) {
    int v41 = -8191;
  }
  else {
    int v41 = 1;
  }
  if (v3 == 4) {
    int v42 = 24577;
  }
  else {
    int v42 = -32767;
  }
  if (v3 == 1) {
    int v43 = 8193;
  }
  else {
    int v43 = 16385;
  }
  if (v3 == 8) {
    BOOL v40 = 1;
  }
  if (v3 - 1 < 2) {
    int v42 = v43;
  }
  if ((*((unsigned char *)this + 72) & 0x3F) == 0) {
    int v42 = 1;
  }
  int v44 = v3 == 16 || v40;
  if (v3 == 16) {
    int v45 = -24575;
  }
  else {
    int v45 = -16383;
  }
  if (v3 == 32) {
    int v46 = 1;
  }
  else {
    int v46 = v44;
  }
  if (v40) {
    unsigned int v47 = v42;
  }
  else {
    unsigned int v47 = v45;
  }
  if (v46) {
    unsigned int v39 = v47;
  }
  else {
    unsigned int v39 = v41;
  }
  if (v11 == 2) {
    unsigned int v36 = 11;
  }
  else {
    unsigned int v36 = 3;
  }
  if (v13 != 2)
  {
    if (v13 == 1) {
      unsigned int v36 = 3;
    }
    if (v27) {
      goto LABEL_125;
    }
LABEL_128:
    if (v31)
    {
      unsigned int v36 = v36 & 0xFFFFFF0F | (16 * ((*((_DWORD *)this + 7) >> 1) & 0xF));
      v39 |= (*((_DWORD *)this + 7) >> 11) & 0x20 | (((*((_DWORD *)this + 7) >> 5) & 3) << 6) & 0xFFFFFEFF | ((*((_DWORD *)this + 7) & 1) << 8) | (*((_DWORD *)this + 7) >> 5) & 0x400 | 0x200;
    }
    goto LABEL_136;
  }
  unsigned int v36 = 11;
  if (!v27) {
    goto LABEL_128;
  }
LABEL_125:
  if (v18)
  {
    unsigned int v48 = *((unsigned __int8 *)this + 28);
    unsigned int v36 = v36 & 0xFFFFFF0F | (16 * ((v48 >> 1) & 0xF));
    v39 |= (2 * v48) & 0xC0 | ((v48 & 1) << 8) | (32 * v19);
  }
  else if (v26)
  {
    if (v22)
    {
      unsigned int v49 = *((unsigned __int16 *)this + 14);
      unsigned int v36 = v36 & 0xFFFFFF0F | (16 * ((v49 >> 1) & 0xF));
      unsigned int v39 = v39 & 0xFFFFFA1F | 0x400 | (((v49 >> 5) & 3) << 6) & 0xFFFFFEFF | ((v49 & 1) << 8);
    }
    else if (v25)
    {
      unsigned int v50 = *((unsigned __int16 *)this + 14);
      unsigned int v36 = v36 & 0xFFFFFF0F | (16 * ((v50 >> 1) & 0xF));
      v39 |= (2 * v50) & 0xC0 | ((v50 & 1) << 8) | 0x420;
    }
    else
    {
      v39 |= 0x400u;
    }
  }
LABEL_136:
  if (v10 == 2)
  {
    unsigned int v51 = *(unsigned __int8 *)this;
    LOWORD(v36) = v36 & 0x80FF | ((v51 & 0x7F) << 8) | ((*((unsigned char *)this + 16) & 1) << 15);
    unsigned int v39 = v39 & 0xFFFFE7F7 | (((v51 >> 7) & 1) << 12) | (8 * (*((unsigned char *)this + 24) & 1));
  }
  else if (v33 || v32)
  {
    v39 |= 0x800u;
    if (v33)
    {
      LOWORD(v36) = v36 & 0x80FF | ((*(_WORD *)this & 0x7F) << 8);
      unsigned int v39 = (*(unsigned __int16 *)this >> 4) & 8 | v39 & 0xFFFFEFF7 | ((HIBYTE(*(unsigned __int16 *)this) & 1) << 12);
    }
    else if (v32)
    {
      unsigned int v52 = *(unsigned __int16 *)this;
      LOWORD(v36) = v36 | ((_WORD)v52 << 8) | 0x8000;
      unsigned int v39 = v39 & 0xFFFFFFF7 | (8 * ((v52 >> 7) & 1));
    }
  }
LABEL_143:
  *(_DWORD *)a2 = (unsigned __int16)v36 | ((unsigned __int16)v39 << 16);
  return a2 + 4;
}

unsigned __int8 *AGXIotoInstruction_COPY_1::emit(AGXIotoInstruction_COPY_1 *this, unsigned __int8 *a2)
{
  int v2 = *((_DWORD *)this + 3);
  int v3 = *((_DWORD *)this + 13);
  int v4 = *((_DWORD *)this + 9);
  int v5 = *((_DWORD *)this + 10);
  if (v3) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *((_DWORD *)this + 12) == 8;
  }
  int v7 = v6;
  if (v4 == 2) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  int v9 = *((unsigned char *)this + 44) & 1;
  BOOL v11 = v7 == 1 && v4 == 3 && v9 == 0;
  int v102 = *((_DWORD *)this + 12);
  BOOL v12 = v4 == 5;
  if (v3) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v4 == 4;
  }
  int v14 = v13;
  BOOL v15 = (*((unsigned char *)this + 44) & 1) == 0 && v12;
  int v16 = v8 | (v11 || v15);
  if (*((unsigned char *)this + 44)) {
    int v17 = 0;
  }
  else {
    int v17 = v14;
  }
  int v18 = v16 | v17;
  int v19 = *((_DWORD *)this + 2);
  if (*((unsigned char *)this + 16))
  {
    BOOL v20 = 0;
    BOOL v21 = 0;
  }
  else
  {
    BOOL v20 = v19 == 3 && (*((unsigned char *)this + 24) & 1) == 0;
    BOOL v21 = v19 == 1 && (*((unsigned char *)this + 24) & 1) == 0;
  }
  LOWORD(v22) = 0;
  BOOL v100 = v20;
  BOOL v98 = v21;
  int v23 = v20 || v21;
  int v103 = v23;
  if (v19 == 2) {
    int v23 = 1;
  }
  int v25 = *((_DWORD *)this + 16);
  int v24 = *((_DWORD *)this + 17);
  int v26 = *((_DWORD *)this + 15);
  int v27 = v25 | v26;
  BOOL v28 = v25 == 0;
  BOOL v105 = (v24 | v25 | v26) == 0;
  BOOL v29 = v25 == 1;
  BOOL v30 = v25 == 2;
  if (v26) {
    BOOL v31 = 0;
  }
  else {
    BOOL v31 = v29;
  }
  if (v26) {
    BOOL v32 = 0;
  }
  else {
    BOOL v32 = v30;
  }
  BOOL v33 = v26 == 1 && v28;
  BOOL v34 = v26 == 1 && v29;
  BOOL v35 = v26 == 1 && v30;
  if (v26 != 2)
  {
    BOOL v28 = 0;
    BOOL v29 = 0;
    BOOL v30 = 0;
  }
  if (v24) {
    BOOL v36 = 0;
  }
  else {
    BOOL v36 = v33;
  }
  BOOL v104 = v36;
  if (v24) {
    BOOL v37 = 0;
  }
  else {
    BOOL v37 = v28;
  }
  BOOL v101 = v37;
  if (v24) {
    BOOL v38 = 0;
  }
  else {
    BOOL v38 = v31;
  }
  BOOL v99 = v38;
  if (v24) {
    BOOL v39 = 0;
  }
  else {
    BOOL v39 = v34;
  }
  BOOL v97 = v39;
  if (v24) {
    BOOL v40 = 0;
  }
  else {
    BOOL v40 = v29;
  }
  BOOL v96 = v40;
  if (v24) {
    BOOL v41 = 0;
  }
  else {
    BOOL v41 = v32;
  }
  BOOL v95 = v41;
  if (v24) {
    BOOL v42 = 0;
  }
  else {
    BOOL v42 = v35;
  }
  BOOL v94 = v42;
  if (v24) {
    BOOL v43 = 0;
  }
  else {
    BOOL v43 = v30;
  }
  BOOL v93 = v43;
  BOOL v44 = v24 == 1;
  BOOL v45 = v24 == 1 && v33;
  BOOL v92 = v45;
  BOOL v46 = v24 == 1 && v28;
  BOOL v91 = v46;
  BOOL v47 = v24 == 1 && v31;
  BOOL v90 = v47;
  BOOL v48 = v24 == 1 && v34;
  BOOL v89 = v48;
  BOOL v49 = v24 == 1 && v29;
  BOOL v88 = v49;
  BOOL v50 = v24 == 1 && v32;
  BOOL v87 = v50;
  BOOL v51 = v24 == 1 && v35;
  BOOL v86 = v51;
  BOOL v52 = v24 == 1 && v30;
  BOOL v53 = v24 == 2;
  BOOL v54 = v24 == 2 && v33;
  BOOL v84 = v54;
  BOOL v85 = v52;
  BOOL v55 = v53 && v28;
  BOOL v56 = v53 && v31;
  BOOL v57 = v53 && v34;
  BOOL v58 = v53 && v29;
  if (v53)
  {
    BOOL v59 = v35;
  }
  else
  {
    BOOL v32 = 0;
    BOOL v59 = 0;
  }
  BOOL v60 = v53 && v30;
  int v61 = v53;
  BOOL v62 = v27 == 0;
  if (v27) {
    BOOL v63 = 0;
  }
  else {
    BOOL v63 = v44;
  }
  if (v62) {
    int v64 = v61;
  }
  else {
    int v64 = 0;
  }
  if (*((_DWORD *)this + 5) != 8 || (v5 - 1) >= 2 || (v2 - 1) >= 2) {
    int v18 = 0;
  }
  LOWORD(v67) = 2;
  LOWORD(v68) = 7;
  LOWORD(v69) = 3;
  if (v18 != 1)
  {
    LOWORD(v70) = 0;
    goto LABEL_206;
  }
  LOWORD(v70) = 0;
  if (v23)
  {
    unsigned int v71 = *((unsigned __int8 *)this + 72);
    unsigned int v67 = ((((v71 >> 1) & 1) << 14) | ((v71 & 1) << 13)) & 0xFFE07FFF | (v71 >> 2 << 15) | 2;
    unsigned int v22 = *((unsigned char *)this + 56) & 1 | (((v71 >> 3) & 1) << 13) & 0xFFFC3FFF | (((v71 >> 4) & 1) << 14) & 0xFFFC7FFF | (v71 >> 5 << 15);
    if (v5 == 2) {
      unsigned int v69 = 11;
    }
    else {
      unsigned int v69 = 3;
    }
    if (v2 == 2) {
      v69 |= 0x100u;
    }
    if (v16)
    {
      if (v8)
      {
        LOWORD(v70) = 0;
        int v72 = *((unsigned __int8 *)this + 28);
        v69 |= (8 * v72) & 0xF0;
        v67 |= ((32 * v72) | (4 * v72)) & 0xFFFFF007;
        int v68 = (2 * v72) & 0xC0 | (32 * v9) | 7;
LABEL_168:
        int v76 = *((_DWORD *)this + 2);
        BOOL v74 = v105;
        goto LABEL_169;
      }
      if (v11 || v15)
      {
        v67 |= 0x40u;
        if (v11)
        {
          LOWORD(v70) = 0;
          unsigned int v77 = *((unsigned __int16 *)this + 14);
          v69 |= (8 * v77) & 0xF0;
          int v68 = (((v77 >> 5) & 3) << 6) | 7;
          v67 |= (32 * v77) & 0x1000 | (4 * (v77 & 1));
          v22 |= (v77 >> 6) & 4;
          goto LABEL_168;
        }
        if (v15)
        {
          unsigned int v78 = *((unsigned __int16 *)this + 14);
          v69 |= (8 * v78) & 0xF0;
          int v68 = (((v78 >> 5) & 3) << 6) | 0x27;
          v67 |= (32 * v78) & 0x1000 | (4 * (v78 & 1));
          v22 |= (v78 >> 6) & 0x3C;
          int v70 = (v78 >> 9) & 8 | (16 * (*((_DWORD *)this + 13) & 1));
          int v76 = *((_DWORD *)this + 2);
          int v75 = *((_DWORD *)this + 12);
          if (!v102)
          {
            BOOL v74 = v105;
            goto LABEL_169;
          }
          BOOL v74 = v105;
          if (v102 != 1)
          {
LABEL_165:
            switch(v75)
            {
              case 2:
                LOWORD(v22) = v22 | 0x800;
                break;
              case 3:
                LOWORD(v22) = v22 | 0xC00;
                break;
              case 4:
                LOWORD(v22) = v22 | 0x1000;
                break;
              case 5:
                LOWORD(v22) = v22 | 0x1400;
                break;
              case 8:
                LOWORD(v22) = v22 | 0x1C00;
                break;
            }
LABEL_169:
            if (v76 == 2)
            {
              unsigned int v79 = *(unsigned __int8 *)this;
              unsigned int v67 = v67 & 0xFFFFFE77 | (8 * (v79 & 1)) | (((v79 >> 7) & 1) << 8);
              unsigned int v69 = v69 & 0xFFFF81FF | (((v79 >> 1) & 0x3F) << 9) | ((*((unsigned char *)this + 16) & 1) << 15);
              LOWORD(v68) = v68 & 0xFFF7 | (8 * (*((unsigned char *)this + 24) & 1));
              goto LABEL_177;
            }
            if (v103)
            {
              LOWORD(v67) = v67 | 0x80;
              if (v100)
              {
                unsigned int v80 = *(unsigned __int16 *)this;
                unsigned int v69 = v69 & 0xFFFF81FF | (((v80 >> 1) & 0x3F) << 9);
                int v68 = (v80 >> 4) & 8 | v68 & 0xFFFFFFF7;
                LOWORD(v67) = v80 & 0x100 | v67 & 0xFEF7;
              }
              else
              {
                if (!v98) {
                  goto LABEL_177;
                }
                unsigned int v80 = *(unsigned __int16 *)this;
                LOWORD(v69) = v69 & 0x81FF | (((*(_WORD *)this >> 1) & 0x3F) << 9) | 0x8000;
                int v68 = (v80 >> 4) & 8 | v68 & 0xFFFFFFF7;
              }
              LOWORD(v67) = v67 & 0xFFF7 | (8 * (v80 & 1));
            }
LABEL_177:
            if (v74)
            {
              LOWORD(v70) = v70 & 0xFC1F;
            }
            else if (v104)
            {
              LOWORD(v70) = v70 & 0xFC1F | 0x20;
            }
            else if (v101)
            {
              LOWORD(v70) = v70 & 0xFC1F | 0x40;
            }
            else if (v99)
            {
              LOWORD(v70) = v70 & 0xFC1F | 0x60;
            }
            else if (v97)
            {
              LOWORD(v70) = v70 & 0xFC1F | 0x80;
            }
            else
            {
              if (v96)
              {
                __int16 v81 = v70 & 0xFC3F;
                __int16 v82 = 160;
              }
              else
              {
                if (v95)
                {
                  LOWORD(v70) = v70 & 0xFC1F | 0xC0;
                  goto LABEL_206;
                }
                if (v94)
                {
                  LOWORD(v70) = v70 & 0xFC1F | 0xE0;
                  goto LABEL_206;
                }
                if (v93)
                {
                  LOWORD(v70) = v70 & 0xFC1F | 0x100;
                  goto LABEL_206;
                }
                if (v63)
                {
                  __int16 v81 = v70 & 0xFC3F;
                  __int16 v82 = 288;
                }
                else if (v92)
                {
                  __int16 v81 = v70 & 0xFC1F;
                  __int16 v82 = 320;
                }
                else if (v91)
                {
                  __int16 v81 = v70 & 0xFC7F;
                  __int16 v82 = 352;
                }
                else
                {
                  if (v90)
                  {
                    LOWORD(v70) = v70 & 0xFC1F | 0x180;
                    goto LABEL_206;
                  }
                  if (v89)
                  {
                    __int16 v81 = v70 & 0xFC3F;
                    __int16 v82 = 416;
                  }
                  else
                  {
                    if (v88)
                    {
                      LOWORD(v70) = v70 & 0xFC1F | 0x1C0;
                      goto LABEL_206;
                    }
                    if (v87)
                    {
                      LOWORD(v70) = v70 & 0xFC1F | 0x1E0;
                      goto LABEL_206;
                    }
                    if (v86)
                    {
                      LOWORD(v70) = v70 & 0xFC1F | 0x200;
                      goto LABEL_206;
                    }
                    if (v85)
                    {
                      __int16 v81 = v70 & 0xFC3F;
                      __int16 v82 = 544;
                    }
                    else if (v64)
                    {
                      __int16 v81 = v70 & 0xFC1F;
                      __int16 v82 = 576;
                    }
                    else if (v84)
                    {
                      __int16 v81 = v70 & 0xFC7F;
                      __int16 v82 = 608;
                    }
                    else if (v55)
                    {
                      __int16 v81 = v70 & 0xFC1F;
                      __int16 v82 = 640;
                    }
                    else if (v56)
                    {
                      __int16 v81 = v70 & 0xFC3F;
                      __int16 v82 = 672;
                    }
                    else if (v57)
                    {
                      __int16 v81 = v70 & 0xFC1F;
                      __int16 v82 = 704;
                    }
                    else if (v58)
                    {
                      __int16 v81 = v70 & 0xFCFF;
                      __int16 v82 = 736;
                    }
                    else
                    {
                      if (v32)
                      {
                        LOWORD(v70) = v70 & 0xFC1F | 0x300;
                        goto LABEL_206;
                      }
                      if (v59)
                      {
                        __int16 v81 = v70 & 0xFC3F;
                        __int16 v82 = 800;
                      }
                      else
                      {
                        if (!v60) {
                          goto LABEL_206;
                        }
                        __int16 v81 = v70 & 0xFC1F;
                        __int16 v82 = 832;
                      }
                    }
                  }
                }
              }
              LOWORD(v70) = v81 | v82;
            }
            goto LABEL_206;
          }
LABEL_157:
          LOWORD(v22) = v22 | 0x400;
          goto LABEL_169;
        }
      }
    }
    else if (v17)
    {
      unsigned int v73 = *((_DWORD *)this + 7);
      v69 |= (8 * v73) & 0xF0;
      int v68 = (v73 >> 11) & 0x20 | (((v73 >> 5) & 3) << 6) | 7;
      v67 |= ((unsigned __int16)v73 >> 9) & 0x40 | (4 * (v73 & 1)) | (((v73 >> 7) & 1) << 12) | 0x20;
      v22 |= (v73 >> 6) & 0x3C;
      int v70 = (v73 >> 2) & 0x1000 | ((unsigned __int16)v73 >> 9) & 0x18;
      BOOL v74 = v105;
      int v75 = *((_DWORD *)this + 12);
      if (!v102)
      {
        int v76 = *((_DWORD *)this + 2);
        goto LABEL_169;
      }
      int v76 = *((_DWORD *)this + 2);
      if (v102 != 1) {
        goto LABEL_165;
      }
      goto LABEL_157;
    }
    LOWORD(v70) = 0;
    int v68 = 7;
    goto LABEL_168;
  }
LABEL_206:
  *(_WORD *)a2 = v69;
  *((_WORD *)a2 + 1) = v68;
  *((_WORD *)a2 + 2) = v67;
  *((_WORD *)a2 + 3) = v22;
  uint64_t result = a2 + 10;
  *((_WORD *)a2 + 4) = v70;
  return result;
}

uint64_t operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a2 + 2);
  if (v2 == v3)
  {
    switch(v2)
    {
      case 0:
      case 2:
      case 6:
        BOOL v4 = *a1 == *a2;
        goto LABEL_11;
      case 1:
      case 3:
      case 5:
        BOOL v4 = *(unsigned __int16 *)a1 == *(unsigned __int16 *)a2;
        goto LABEL_11;
      case 4:
        BOOL v4 = *(_DWORD *)a1 == *(_DWORD *)a2;
        goto LABEL_11;
      case 7:
        BOOL v4 = ((a2[4] ^ a1[4]) & 7) == 0 && *(_DWORD *)a1 == *(_DWORD *)a2;
LABEL_11:
        int v5 = v4;
        break;
      default:
        int v5 = 0;
        break;
    }
  }
  else
  {
    int v5 = 1;
  }
  int v6 = *((_DWORD *)a1 + 9);
  int v7 = *((_DWORD *)a2 + 9);
  if (v6 == v7)
  {
    switch(v6)
    {
      case 0:
      case 2:
      case 6:
        BOOL v8 = a1[28] == a2[28];
        goto LABEL_24;
      case 1:
      case 3:
      case 5:
        BOOL v8 = *((unsigned __int16 *)a1 + 14) == *((unsigned __int16 *)a2 + 14);
        goto LABEL_24;
      case 4:
        BOOL v8 = *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7);
        goto LABEL_24;
      case 7:
        BOOL v8 = ((a2[32] ^ a1[32]) & 7) == 0 && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7);
LABEL_24:
        int v9 = v8;
        break;
      default:
        int v9 = 0;
        break;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (*((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3)) {
    int v5 = 0;
  }
  if ((a2[16] ^ a1[16])) {
    int v5 = 0;
  }
  if (*((_DWORD *)a1 + 5) != *((_DWORD *)a2 + 5)) {
    int v5 = 0;
  }
  if ((a2[24] ^ a1[24])) {
    int v5 = 0;
  }
  if (*((_DWORD *)a1 + 10) == *((_DWORD *)a2 + 10)) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if ((a2[44] ^ a1[44])) {
    int v10 = 0;
  }
  if (*((_DWORD *)a1 + 12) != *((_DWORD *)a2 + 12)) {
    int v10 = 0;
  }
  if (*((_DWORD *)a1 + 13) != *((_DWORD *)a2 + 13)) {
    int v10 = 0;
  }
  if (v6 == v7) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  unsigned int v12 = v5 & v11;
  if ((a2[56] ^ a1[56])) {
    unsigned int v12 = 0;
  }
  if (*((_DWORD *)a1 + 15) != *((_DWORD *)a2 + 15)
    || *((_DWORD *)a1 + 16) != *((_DWORD *)a2 + 16)
    || *((_DWORD *)a1 + 17) != *((_DWORD *)a2 + 17))
  {
    unsigned int v12 = 0;
  }
  if (((a2[72] ^ a1[72]) & 0x3F) != 0) {
    unsigned int v12 = 0;
  }
  if (v2 == v3) {
    return v12;
  }
  else {
    return 0;
  }
}

void std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_back(char **a1, void *a2)
{
  BOOL v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_23;
  }
  int v6 = *a1;
  int v5 = a1[1];
  if (v5 > *a1)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    int v11 = &v5[-8 * v9];
    int64_t v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      BOOL v4 = a1[1];
    }
    BOOL v13 = &v4[8 * v10];
    BOOL v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  unint64_t v14 = (v4 - v6) >> 2;
  if (v4 == v6) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  int v17 = (char *)operator new(8 * v14);
  int v18 = &v17[8 * v15];
  int64_t v20 = v4 - v5;
  BOOL v19 = v4 == v5;
  BOOL v4 = v18;
  if (!v19)
  {
    BOOL v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      unsigned int v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    int v23 = &v17[8 * v15];
    unsigned int v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        uint64_t v30 = *(void *)v5;
        v5 += 8;
        *(void *)unsigned int v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v22 = &v18[v25];
    int v26 = (long long *)(v5 + 16);
    int v27 = v23 + 16;
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *int v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    BOOL v4 = a1[2];
  }
LABEL_23:
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad *>>::push_front(void **a1, void *a2)
{
  BOOL v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    int v5 = (char *)a1[1];
    goto LABEL_25;
  }
  uint64_t v7 = a1[2];
  int v6 = a1[3];
  if (v7 >= v6)
  {
    uint64_t v13 = v6 - v4;
    BOOL v12 = v13 == 0;
    unint64_t v14 = v13 >> 2;
    if (v12) {
      unint64_t v14 = 1;
    }
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v15 = (v14 + 3) >> 2;
    uint64_t v16 = 8 * v14;
    int v17 = (char *)operator new(8 * v14);
    int v5 = &v17[8 * v15];
    int v18 = &v17[v16];
    BOOL v19 = v5;
    uint64_t v20 = v7 - v4;
    if (v7 != v4)
    {
      BOOL v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = v20 - 8;
      unsigned int v22 = &v17[8 * v15];
      int v23 = v4;
      if (v21 > 0x37)
      {
        uint64_t v24 = &v17[8 * v15];
        unsigned int v22 = v24;
        int v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          uint64_t v25 = (v21 >> 3) + 1;
          uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v22 = &v5[v26];
          int v27 = (long long *)(v4 + 16);
          uint64_t v28 = v24 + 16;
          uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *uint64_t v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          int v23 = &v4[v26];
        }
      }
      do
      {
        uint64_t v31 = *(void *)v23;
        v23 += 8;
        *(void *)unsigned int v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4) {
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v4);
    int v5 = (char *)a1[1];
    goto LABEL_25;
  }
  uint64_t v8 = (v6 - v7) >> 3;
  if (v8 >= -1) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = v8 + 2;
  }
  uint64_t v10 = v9 >> 1;
  int v11 = &v7[8 * (v9 >> 1)];
  int v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    BOOL v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

const void **std::__for_each_segment[abi:nn180100]<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad const* const*,long,64l>,std::__deque_iterator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad&,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad**,long,64l>>>(const void **result, unsigned char *__src, const void **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = __src;
  uint64_t v9 = *(void **)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (result == a3)
  {
    if (__src == a4) {
      goto LABEL_48;
    }
    uint64_t v31 = (char *)*v9;
    while (1)
    {
      uint64_t v32 = (v31 - v8 + 4096) >> 6;
      if ((a4 - v7) >> 6 >= v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = (a4 - v7) >> 6;
      }
      if (v33) {
        uint64_t result = (const void **)memmove(v8, v7, v33 << 6);
      }
      v7 += 64 * v33;
      if (v7 == a4) {
        break;
      }
      BOOL v34 = (char *)v9[1];
      ++v9;
      uint64_t v31 = v34;
      uint64_t v8 = v34;
    }
    v8 += 64 * v33;
    goto LABEL_46;
  }
  int v11 = result;
  BOOL v12 = (char *)*result + 4096;
  if (v12 != __src)
  {
    uint64_t v13 = (char *)*v9;
    while (1)
    {
      uint64_t v14 = (v13 - v8 + 4096) >> 6;
      if ((v12 - v7) >> 6 >= v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = (v12 - v7) >> 6;
      }
      if (v15) {
        uint64_t result = (const void **)memmove(v8, v7, v15 << 6);
      }
      v7 += 64 * v15;
      if (v7 == v12) {
        break;
      }
      uint64_t v16 = (char *)v9[1];
      ++v9;
      uint64_t v13 = v16;
      uint64_t v8 = v16;
    }
    v8 += 64 * v15;
    if ((char *)(*v9 + 4096) == v8)
    {
      int v17 = (char *)v9[1];
      ++v9;
      uint64_t v8 = v17;
    }
  }
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v8;
  for (uint64_t i = v11 + 1; i != a3; ++i)
  {
    uint64_t v19 = 0;
    uint64_t v20 = (char *)*i;
    unint64_t v21 = (char *)*v9;
    while (1)
    {
      uint64_t v22 = (v21 - v8 + 4096) >> 6;
      if ((4096 - (v19 << 6)) >> 6 >= v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = (4096 - (v19 << 6)) >> 6;
      }
      if (v23) {
        uint64_t result = (const void **)memmove(v8, &v20[64 * v19], v23 << 6);
      }
      v19 += v23;
      if (v19 == 64) {
        break;
      }
      uint64_t v24 = (char *)v9[1];
      ++v9;
      unint64_t v21 = v24;
      uint64_t v8 = v24;
    }
    v8 += 64 * v23;
    if ((char *)(*v9 + 4096) == v8)
    {
      uint64_t v25 = (char *)v9[1];
      ++v9;
      uint64_t v8 = v25;
    }
    *(void *)a5 = v9;
    *(void *)(a5 + 8) = v8;
  }
  uint64_t v26 = *a3;
  if (v26 != a4)
  {
    int v27 = (char *)*v9;
    while (1)
    {
      uint64_t v28 = (v27 - v8 + 4096) >> 6;
      if ((a4 - v26) >> 6 >= v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = (a4 - v26) >> 6;
      }
      if (v29) {
        uint64_t result = (const void **)memmove(v8, v26, v29 << 6);
      }
      v26 += 64 * v29;
      if (v26 == a4) {
        break;
      }
      long long v30 = (char *)v9[1];
      ++v9;
      int v27 = v30;
      uint64_t v8 = v30;
    }
    v8 += 64 * v29;
LABEL_46:
    if ((char *)(*v9 + 4096) == v8)
    {
      BOOL v35 = (char *)v9[1];
      ++v9;
      uint64_t v8 = v35;
    }
  }
LABEL_48:
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v8;
  return result;
}

BOOL std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v4 = *((_DWORD *)a1 + 1);
  unsigned int v5 = v4 - 2;
  if ((v4 - 2) > 7) {
    unsigned int v6 = 3;
  }
  else {
    unsigned int v6 = dword_242EAA72C[v5];
  }
  int v7 = *((_DWORD *)a3 + 1);
  unsigned int v8 = v7 - 2;
  if ((v7 - 2) > 7) {
    unsigned int v9 = 3;
  }
  else {
    unsigned int v9 = dword_242EAA72C[v8];
  }
  unsigned int v10 = v4 - 1;
  if (v10 > 8) {
    unsigned int v11 = 1;
  }
  else {
    unsigned int v11 = dword_242EAA74C[v10];
  }
  unsigned int v12 = v7 - 1;
  if (v12 <= 8)
  {
    unsigned int v13 = dword_242EAA74C[v12];
    if (v6 >= v9) {
      goto LABEL_12;
    }
    return 1;
  }
  unsigned int v13 = 1;
  if (v6 < v9) {
    return 1;
  }
LABEL_12:
  if (v9 >= v6)
  {
    unsigned int v14 = *a1;
    unsigned int v15 = *a3;
    if (v14 < v15) {
      return 1;
    }
    if (v15 >= v14)
    {
      if (v11 < v13) {
        return 1;
      }
      if (v13 >= v11 && *((_DWORD *)a1 + 2) < *((_DWORD *)a3 + 2)) {
        return 1;
      }
    }
  }
  if (v8 > 7)
  {
    unsigned int v17 = 3;
    if (v5 > 7)
    {
LABEL_20:
      unsigned int v18 = 3;
      if (v12 > 8) {
        goto LABEL_21;
      }
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v17 = dword_242EAA72C[v8];
    if (v5 > 7) {
      goto LABEL_20;
    }
  }
  unsigned int v18 = dword_242EAA72C[v5];
  if (v12 > 8)
  {
LABEL_21:
    unsigned int v19 = 1;
    if (v10 > 8) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
LABEL_26:
  unsigned int v19 = dword_242EAA74C[v12];
  if (v10 > 8)
  {
LABEL_22:
    unsigned int v20 = 1;
    if (v17 < v18) {
      return 0;
    }
    goto LABEL_28;
  }
LABEL_27:
  unsigned int v20 = dword_242EAA74C[v10];
  if (v17 < v18) {
    return 0;
  }
LABEL_28:
  if (v18 >= v17)
  {
    unsigned int v23 = *a3;
    unsigned int v24 = *a1;
    if (v23 < v24 || v24 >= v23 && (v19 < v20 || v20 >= v19 && *((_DWORD *)a3 + 2) < *((_DWORD *)a1 + 2))) {
      return 0;
    }
  }
  int v21 = *((_DWORD *)a2 + 1);
  if ((v21 - 2) > 7) {
    unsigned int v22 = 3;
  }
  else {
    unsigned int v22 = dword_242EAA72C[v21 - 2];
  }
  int v25 = *((_DWORD *)a4 + 1);
  if ((v25 - 2) > 7) {
    unsigned int v26 = 3;
  }
  else {
    unsigned int v26 = dword_242EAA72C[v25 - 2];
  }
  unsigned int v27 = v21 - 1;
  if (v27 > 8) {
    unsigned int v28 = 1;
  }
  else {
    unsigned int v28 = dword_242EAA74C[v27];
  }
  unsigned int v29 = v25 - 1;
  if (v29 <= 8)
  {
    unsigned int v30 = dword_242EAA74C[v29];
    if (v22 >= v26) {
      goto LABEL_48;
    }
    return 1;
  }
  unsigned int v30 = 1;
  if (v22 < v26) {
    return 1;
  }
LABEL_48:
  if (v26 < v22) {
    return 0;
  }
  unsigned int v31 = *a2;
  unsigned int v32 = *a4;
  if (v31 < v32) {
    return 1;
  }
  if (v32 < v31) {
    return 0;
  }
  if (v28 < v30) {
    return 1;
  }
  return v30 >= v28 && *((_DWORD *)a2 + 2) < *((_DWORD *)a4 + 2);
}

BOOL _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, unsigned __int16 *a6)
{
  unsigned int v9 = a4 + 8;
  unsigned int v10 = a2 + 8;
  BOOL v11 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a4 + 8, a2, a2 + 8, a4);
  BOOL result = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a6 + 8, a4, v9, a6);
  if (v11)
  {
    if (result)
    {
      long long v14 = *((_OWORD *)a2 + 2);
      long long v13 = *((_OWORD *)a2 + 3);
      long long v16 = *(_OWORD *)a2;
      long long v15 = *((_OWORD *)a2 + 1);
      long long v17 = *((_OWORD *)a6 + 3);
      long long v19 = *(_OWORD *)a6;
      long long v18 = *((_OWORD *)a6 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a6 + 2);
      *((_OWORD *)a2 + 3) = v17;
      *(_OWORD *)a2 = v19;
      *((_OWORD *)a2 + 1) = v18;
    }
    else
    {
      long long v35 = *((_OWORD *)a2 + 2);
      long long v34 = *((_OWORD *)a2 + 3);
      long long v37 = *(_OWORD *)a2;
      long long v36 = *((_OWORD *)a2 + 1);
      long long v38 = *((_OWORD *)a4 + 3);
      long long v40 = *(_OWORD *)a4;
      long long v39 = *((_OWORD *)a4 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a4 + 2);
      *((_OWORD *)a2 + 3) = v38;
      *(_OWORD *)a2 = v40;
      *((_OWORD *)a2 + 1) = v39;
      *(_OWORD *)a4 = v37;
      *((_OWORD *)a4 + 1) = v36;
      *((_OWORD *)a4 + 2) = v35;
      *((_OWORD *)a4 + 3) = v34;
      BOOL result = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a6 + 8, a4, v9, a6);
      if (!result) {
        return result;
      }
      long long v14 = *((_OWORD *)a4 + 2);
      long long v13 = *((_OWORD *)a4 + 3);
      long long v16 = *(_OWORD *)a4;
      long long v15 = *((_OWORD *)a4 + 1);
      long long v41 = *((_OWORD *)a6 + 3);
      long long v43 = *(_OWORD *)a6;
      long long v42 = *((_OWORD *)a6 + 1);
      *((_OWORD *)a4 + 2) = *((_OWORD *)a6 + 2);
      *((_OWORD *)a4 + 3) = v41;
      *(_OWORD *)a4 = v43;
      *((_OWORD *)a4 + 1) = v42;
    }
    *(_OWORD *)a6 = v16;
    *((_OWORD *)a6 + 1) = v15;
    *((_OWORD *)a6 + 2) = v14;
    *((_OWORD *)a6 + 3) = v13;
  }
  else if (result)
  {
    long long v21 = *((_OWORD *)a4 + 2);
    long long v20 = *((_OWORD *)a4 + 3);
    long long v23 = *(_OWORD *)a4;
    long long v22 = *((_OWORD *)a4 + 1);
    long long v24 = *((_OWORD *)a6 + 3);
    long long v26 = *(_OWORD *)a6;
    long long v25 = *((_OWORD *)a6 + 1);
    *((_OWORD *)a4 + 2) = *((_OWORD *)a6 + 2);
    *((_OWORD *)a4 + 3) = v24;
    *(_OWORD *)a4 = v26;
    *((_OWORD *)a4 + 1) = v25;
    *(_OWORD *)a6 = v23;
    *((_OWORD *)a6 + 1) = v22;
    *((_OWORD *)a6 + 2) = v21;
    *((_OWORD *)a6 + 3) = v20;
    BOOL result = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v9, a2, v10, a4);
    if (result)
    {
      long long v28 = *((_OWORD *)a2 + 2);
      long long v27 = *((_OWORD *)a2 + 3);
      long long v30 = *(_OWORD *)a2;
      long long v29 = *((_OWORD *)a2 + 1);
      long long v31 = *((_OWORD *)a4 + 3);
      long long v33 = *(_OWORD *)a4;
      long long v32 = *((_OWORD *)a4 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a4 + 2);
      *((_OWORD *)a2 + 3) = v31;
      *(_OWORD *)a2 = v33;
      *((_OWORD *)a2 + 1) = v32;
      *(_OWORD *)a4 = v30;
      *((_OWORD *)a4 + 1) = v29;
      *((_OWORD *)a4 + 2) = v28;
      *((_OWORD *)a4 + 3) = v27;
    }
  }
  return result;
}

__n128 _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SB_(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, unsigned __int16 *a8)
{
  _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_(a1, a2, a3, a4, a5, a6);
  if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a8 + 8, a6, a6 + 8, a8))
  {
    long long v14 = *((_OWORD *)a6 + 2);
    long long v13 = *((_OWORD *)a6 + 3);
    long long v16 = *(_OWORD *)a6;
    long long v15 = *((_OWORD *)a6 + 1);
    long long v17 = *((_OWORD *)a8 + 3);
    long long v19 = *(_OWORD *)a8;
    long long v18 = *((_OWORD *)a8 + 1);
    *((_OWORD *)a6 + 2) = *((_OWORD *)a8 + 2);
    *((_OWORD *)a6 + 3) = v17;
    *(_OWORD *)a6 = v19;
    *((_OWORD *)a6 + 1) = v18;
    *(_OWORD *)a8 = v16;
    *((_OWORD *)a8 + 1) = v15;
    *((_OWORD *)a8 + 2) = v14;
    *((_OWORD *)a8 + 3) = v13;
    if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a6 + 8, a4, a4 + 8, a6))
    {
      long long v21 = *((_OWORD *)a4 + 2);
      long long v20 = *((_OWORD *)a4 + 3);
      long long v23 = *(_OWORD *)a4;
      long long v22 = *((_OWORD *)a4 + 1);
      long long v24 = *((_OWORD *)a6 + 3);
      long long v26 = *(_OWORD *)a6;
      long long v25 = *((_OWORD *)a6 + 1);
      *((_OWORD *)a4 + 2) = *((_OWORD *)a6 + 2);
      *((_OWORD *)a4 + 3) = v24;
      *(_OWORD *)a4 = v26;
      *((_OWORD *)a4 + 1) = v25;
      *(_OWORD *)a6 = v23;
      *((_OWORD *)a6 + 1) = v22;
      *((_OWORD *)a6 + 2) = v21;
      *((_OWORD *)a6 + 3) = v20;
      if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a4 + 8, a2, a2 + 8, a4))
      {
        long long v27 = *((_OWORD *)a2 + 2);
        __n128 result = *((__n128 *)a2 + 3);
        long long v29 = *(_OWORD *)a2;
        long long v28 = *((_OWORD *)a2 + 1);
        long long v30 = *((_OWORD *)a4 + 3);
        long long v32 = *(_OWORD *)a4;
        long long v31 = *((_OWORD *)a4 + 1);
        *((_OWORD *)a2 + 2) = *((_OWORD *)a4 + 2);
        *((_OWORD *)a2 + 3) = v30;
        *(_OWORD *)a2 = v32;
        *((_OWORD *)a2 + 1) = v31;
        *(_OWORD *)a4 = v29;
        *((_OWORD *)a4 + 1) = v28;
        *((_OWORD *)a4 + 2) = v27;
        *((__n128 *)a4 + 3) = result;
      }
    }
  }
  return result;
}

__n128 _ZNSt3__17__sort5B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SL_SB_(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, unsigned __int16 *a10)
{
  _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SB_(a1, a2, a3, a4, a5, a6, a7, a8);
  if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a10 + 8, a8, a8 + 8, a10))
  {
    long long v16 = *((_OWORD *)a8 + 2);
    long long v15 = *((_OWORD *)a8 + 3);
    long long v18 = *(_OWORD *)a8;
    long long v17 = *((_OWORD *)a8 + 1);
    long long v19 = *((_OWORD *)a10 + 3);
    long long v21 = *(_OWORD *)a10;
    long long v20 = *((_OWORD *)a10 + 1);
    *((_OWORD *)a8 + 2) = *((_OWORD *)a10 + 2);
    *((_OWORD *)a8 + 3) = v19;
    *(_OWORD *)a8 = v21;
    *((_OWORD *)a8 + 1) = v20;
    *(_OWORD *)a10 = v18;
    *((_OWORD *)a10 + 1) = v17;
    *((_OWORD *)a10 + 2) = v16;
    *((_OWORD *)a10 + 3) = v15;
    if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a8 + 8, a6, a6 + 8, a8))
    {
      long long v23 = *((_OWORD *)a6 + 2);
      long long v22 = *((_OWORD *)a6 + 3);
      long long v25 = *(_OWORD *)a6;
      long long v24 = *((_OWORD *)a6 + 1);
      long long v26 = *((_OWORD *)a8 + 3);
      long long v28 = *(_OWORD *)a8;
      long long v27 = *((_OWORD *)a8 + 1);
      *((_OWORD *)a6 + 2) = *((_OWORD *)a8 + 2);
      *((_OWORD *)a6 + 3) = v26;
      *(_OWORD *)a6 = v28;
      *((_OWORD *)a6 + 1) = v27;
      *(_OWORD *)a8 = v25;
      *((_OWORD *)a8 + 1) = v24;
      *((_OWORD *)a8 + 2) = v23;
      *((_OWORD *)a8 + 3) = v22;
      if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a6 + 8, a4, a4 + 8, a6))
      {
        long long v30 = *((_OWORD *)a4 + 2);
        long long v29 = *((_OWORD *)a4 + 3);
        long long v32 = *(_OWORD *)a4;
        long long v31 = *((_OWORD *)a4 + 1);
        long long v33 = *((_OWORD *)a6 + 3);
        long long v35 = *(_OWORD *)a6;
        long long v34 = *((_OWORD *)a6 + 1);
        *((_OWORD *)a4 + 2) = *((_OWORD *)a6 + 2);
        *((_OWORD *)a4 + 3) = v33;
        *(_OWORD *)a4 = v35;
        *((_OWORD *)a4 + 1) = v34;
        *(_OWORD *)a6 = v32;
        *((_OWORD *)a6 + 1) = v31;
        *((_OWORD *)a6 + 2) = v30;
        *((_OWORD *)a6 + 3) = v29;
        if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(a4 + 8, a2, a2 + 8, a4))
        {
          long long v36 = *((_OWORD *)a2 + 2);
          __n128 result = *((__n128 *)a2 + 3);
          long long v38 = *(_OWORD *)a2;
          long long v37 = *((_OWORD *)a2 + 1);
          long long v39 = *((_OWORD *)a4 + 3);
          long long v41 = *(_OWORD *)a4;
          long long v40 = *((_OWORD *)a4 + 1);
          *((_OWORD *)a2 + 2) = *((_OWORD *)a4 + 2);
          *((_OWORD *)a2 + 3) = v39;
          *(_OWORD *)a2 = v41;
          *((_OWORD *)a2 + 1) = v40;
          *(_OWORD *)a4 = v38;
          *((_OWORD *)a4 + 1) = v37;
          *((_OWORD *)a4 + 2) = v36;
          *((__n128 *)a4 + 3) = result;
        }
      }
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEbT1_SL_SB_(char *a1, long long *a2, char *a3, uint64_t a4)
{
  if ((long long *)a4 == a2) {
    return 1;
  }
  uint64_t v4 = a4;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v7 = *(void *)a3;
  uint64_t v8 = (uint64_t)a2 - *(void *)a1;
  uint64_t v9 = v8 >> 6;
  uint64_t v10 = 1;
  switch(((a4 - *(void *)a3) >> 6) + 8 * (a3 - a1) - (v8 >> 6))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4) {
        uint64_t v4 = *((void *)a3 - 1) + 4096;
      }
      BOOL v11 = (long long *)(v4 - 64);
      if (!std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)(v4 - 48), (unsigned __int16 *)a2, (unsigned __int16 *)a2 + 8, (unsigned __int16 *)(v4 - 64)))return 1; {
      long long v13 = a2[2];
      }
      long long v12 = a2[3];
      long long v15 = *a2;
      long long v14 = a2[1];
      long long v16 = *(_OWORD *)(v4 - 16);
      long long v18 = *v11;
      long long v17 = *(_OWORD *)(v4 - 48);
      a2[2] = *(_OWORD *)(v4 - 32);
      a2[3] = v16;
      *a2 = v18;
      a2[1] = v17;
      *BOOL v11 = v15;
      *(_OWORD *)(v4 - 48) = v14;
      uint64_t v10 = 1;
      *(_OWORD *)(v4 - 32) = v13;
      *(_OWORD *)(v4 - 16) = v12;
      return v10;
    case 3:
      if (v8 < -63)
      {
        long long v23 = &a1[-8 * ((unint64_t)(62 - v9) >> 6)];
        long long v24 = (unsigned __int16 *)(*(void *)v23 + ((unint64_t)(~(62 - (_BYTE)v9) & 0x3F) << 6));
        if (v7 == v4)
        {
LABEL_20:
          uint64_t v33 = *(void *)(v5 - 8);
          v5 -= 8;
          uint64_t v4 = v33 + 4096;
        }
      }
      else
      {
        long long v23 = &a1[8 * ((unint64_t)(v9 + 1) >> 6)];
        long long v24 = (unsigned __int16 *)(*(void *)v23 + ((unint64_t)(((_BYTE)v9 + 1) & 0x3F) << 6));
        if (v7 == v4) {
          goto LABEL_20;
        }
      }
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)a1, (unsigned __int16 *)a2, (uint64_t)v23, v24, v5, (unsigned __int16 *)(v4 - 64));
      return 1;
    case 4:
      if (v8 >= -63)
      {
        long long v28 = &a1[8 * ((unint64_t)(v9 + 1) >> 6)];
        long long v29 = (unsigned __int16 *)(*(void *)v28 + (((v9 + 1) & 0x3F) << 6));
        unint64_t v30 = v9 + 2;
        goto LABEL_30;
      }
      long long v28 = &a1[-8 * ((unint64_t)(62 - v9) >> 6)];
      long long v29 = (unsigned __int16 *)(*(void *)v28 + ((unint64_t)(~(62 - (_BYTE)v9) & 0x3F) << 6));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFF81)
      {
        unint64_t v30 = 1;
LABEL_30:
        long long v40 = &a1[8 * (v30 >> 6)];
        long long v41 = (unsigned __int16 *)(*(void *)v40 + ((v30 & 0x3F) << 6));
        if (v7 != v4) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      long long v40 = &a1[-8 * ((unint64_t)(61 - v9) >> 6)];
      long long v41 = (unsigned __int16 *)(*(void *)v40 + ((unint64_t)(~(61 - (_BYTE)v9) & 0x3F) << 6));
      if (v7 == v4)
      {
LABEL_31:
        uint64_t v42 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v42 + 4096;
      }
LABEL_32:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SB_((uint64_t)a1, (unsigned __int16 *)a2, (uint64_t)v28, v29, (uint64_t)v40, v41, v5, (unsigned __int16 *)(v4 - 64));
      return 1;
    case 5:
      if (v8 >= -63)
      {
        long long v25 = &a1[8 * ((unint64_t)(v9 + 1) >> 6)];
        long long v26 = (unsigned __int16 *)(*(void *)v25 + (((v9 + 1) & 0x3F) << 6));
        unint64_t v27 = v9 + 2;
LABEL_24:
        long long v34 = &a1[8 * (v27 >> 6)];
        long long v35 = (unsigned __int16 *)(*(void *)v34 + ((v27 & 0x3F) << 6));
        unint64_t v36 = v9 + 3;
        goto LABEL_25;
      }
      long long v25 = &a1[-8 * ((unint64_t)(62 - v9) >> 6)];
      long long v26 = (unsigned __int16 *)(*(void *)v25 + ((unint64_t)(~(62 - (_BYTE)v9) & 0x3F) << 6));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFF81)
      {
        unint64_t v27 = 1;
        goto LABEL_24;
      }
      long long v34 = &a1[-8 * ((unint64_t)(61 - v9) >> 6)];
      long long v35 = (unsigned __int16 *)(*(void *)v34 + ((unint64_t)(~(61 - (_BYTE)v9) & 0x3F) << 6));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFF41)
      {
        unint64_t v36 = 1;
LABEL_25:
        long long v37 = &a1[8 * (v36 >> 6)];
        long long v38 = (unsigned __int16 *)(*(void *)v37 + ((v36 & 0x3F) << 6));
        if (v7 != v4) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      long long v37 = &a1[-8 * ((unint64_t)(60 - v9) >> 6)];
      long long v38 = (unsigned __int16 *)(*(void *)v37 + ((unint64_t)(~(60 - (_BYTE)v9) & 0x3F) << 6));
      if (v7 == v4)
      {
LABEL_26:
        uint64_t v39 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v39 + 4096;
      }
LABEL_27:
      _ZNSt3__17__sort5B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEvT1_SL_SL_SL_SL_SB_((uint64_t)a1, (unsigned __int16 *)a2, (uint64_t)v25, v26, (uint64_t)v34, v35, (uint64_t)v37, v38, v5, (unsigned __int16 *)(v4 - 64));
      return 1;
    default:
      if (v8 <= -128)
      {
        long long v19 = &a1[-8 * ((unint64_t)(61 - v9) >> 6)];
        uint64_t v20 = *(void *)v19 + ((unint64_t)(~(61 - (_BYTE)v9) & 0x3F) << 6);
        unint64_t v22 = 62 - v9;
        goto LABEL_18;
      }
      long long v19 = &a1[8 * ((unint64_t)(v9 + 2) >> 6)];
      uint64_t v20 = *(void *)v19 + (((v9 + 2) & 0x3F) << 6);
      unint64_t v21 = v9 + 1;
      if (v9 == -1)
      {
        unint64_t v22 = 63;
LABEL_18:
        long long v31 = &a1[-8 * (v22 >> 6)];
        long long v32 = (unsigned __int16 *)(*(void *)v31 + ((unint64_t)(~(_BYTE)v22 & 0x3F) << 6));
        goto LABEL_34;
      }
      long long v31 = &a1[8 * (v21 >> 6)];
      long long v32 = (unsigned __int16 *)(*(void *)v31 + ((v21 & 0x3F) << 6));
LABEL_34:
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN3AGX23ESLStateLoadEncoderGen2INS2_6HAL2007ClassesENS4_8EncodersEE10EslBuilder11finishRoundEvEUlRT_RT0_E_NS_16__deque_iteratorINS8_12InflightLoadEPSG_RSG_PSH_lLl64EEEEEjT1_SL_SL_SB_((uint64_t)a1, (unsigned __int16 *)a2, (uint64_t)v31, v32, (uint64_t)v19, (unsigned __int16 *)v20);
      uint64_t v43 = v20 - *(void *)v19;
      uint64_t v44 = v43 >> 6;
      if (v43 < -63)
      {
        unint64_t v47 = 62 - v44;
        char v45 = ~(_BYTE)v47;
        BOOL v46 = (unsigned __int16 **)&v19[-8 * (v47 >> 6)];
      }
      else
      {
        char v45 = v44 + 1;
        BOOL v46 = (unsigned __int16 **)&v19[8 * ((unint64_t)(v44 + 1) >> 6)];
      }
      BOOL v48 = *v46;
      BOOL v49 = &(*v46)[32 * (unint64_t)(v45 & 0x3F)];
      if (v49 == (unsigned __int16 *)v4) {
        return 1;
      }
      int v50 = 0;
      break;
  }
  while (1)
  {
    BOOL v51 = v49;
    BOOL v52 = v46;
    if (std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>(v49 + 8, (unsigned __int16 *)v20, (unsigned __int16 *)(v20 + 16), v49))
    {
      break;
    }
LABEL_50:
    BOOL v49 = v51 + 32;
    BOOL v46 = v52;
    if ((char *)(v51 + 32) - (char *)v48 == 4096)
    {
      BOOL v46 = v52 + 1;
      BOOL v48 = v52[1];
      BOOL v49 = v48;
    }
    long long v19 = (char *)v52;
    uint64_t v20 = (uint64_t)v51;
    if (v49 == (unsigned __int16 *)v4) {
      return 1;
    }
  }
  long long v53 = *(_OWORD *)v51;
  long long v54 = *((_OWORD *)v51 + 1);
  long long v55 = *((_OWORD *)v51 + 3);
  long long v71 = *((_OWORD *)v51 + 2);
  long long v72 = v55;
  long long v69 = v53;
  long long v70 = v54;
  BOOL v56 = v51;
  while (1)
  {
    long long v60 = *(_OWORD *)v20;
    long long v61 = *(_OWORD *)(v20 + 16);
    long long v62 = *(_OWORD *)(v20 + 48);
    *((_OWORD *)v56 + 2) = *(_OWORD *)(v20 + 32);
    *((_OWORD *)v56 + 3) = v62;
    *(_OWORD *)BOOL v56 = v60;
    *((_OWORD *)v56 + 1) = v61;
    if ((long long *)v20 == a2) {
      break;
    }
    BOOL v63 = (unsigned __int16 *)v20;
    if (v20 == *(void *)v19)
    {
      uint64_t v57 = *((void *)v19 - 1);
      v19 -= 8;
      uint64_t v58 = v57 + 4096;
    }
    else
    {
      uint64_t v58 = v20;
    }
    uint64_t v20 = v58 - 64;
    BOOL v59 = std::__tuple_less<2ul>::operator()[abi:nn180100]<std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>,std::tuple<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &,AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Register &>>((unsigned __int16 *)&v70, (unsigned __int16 *)(v58 - 64), (unsigned __int16 *)(v58 - 48), (unsigned __int16 *)&v69);
    BOOL v56 = v63;
    if (!v59) {
      goto LABEL_48;
    }
  }
  BOOL v63 = (unsigned __int16 *)a2;
LABEL_48:
  long long v64 = v69;
  long long v65 = v70;
  long long v66 = v72;
  *((_OWORD *)v63 + 2) = v71;
  *((_OWORD *)v63 + 3) = v66;
  *(_OWORD *)BOOL v63 = v64;
  *((_OWORD *)v63 + 1) = v65;
  if (++v50 != 8)
  {
    BOOL v48 = *v52;
    goto LABEL_50;
  }
  int v68 = v51 + 32;
  if ((char *)(v51 + 32) - (char *)*v52 == 4096) {
    int v68 = v52[1];
  }
  return v68 == (unsigned __int16 *)v4;
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadImmediate(uint64_t a1, int a2, int a3, unint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a3)
  {
    int v5 = a3;
    int v7 = 2 * a2;
    do
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v28 = 0;
      int v22 = a4;
      long long v23 = xmmword_242EA7FF0;
      uint64_t v24 = 0x800000000;
      int v29 = -1;
      int v25 = 0;
      long long __src = 0u;
      long long v31 = 0u;
      uint64_t v9 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v22, (unsigned __int8 *)&__src);
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v8, *(char **)(v8 + 8), (char *)&__src, (char *)v9, v9 - (unsigned __int8 *)&__src);
      uint64_t v10 = *(void *)(a1 + 48);
      int v21 = -1;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      int v20 = 0;
      long long v16 = xmmword_242EA8000;
      uint64_t v17 = 8;
      long long v12 = xmmword_242EA7FF0;
      uint64_t v13 = 0x800000000;
      int v14 = 0;
      int v15 = v7 & 0xFFFE;
      long long __src = 0u;
      long long v31 = 0u;
      BOOL v11 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)&v12, (unsigned __int8 *)&__src);
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v10, *(char **)(v10 + 8), (char *)&__src, (char *)v11, v11 - (unsigned __int8 *)&__src);
      a4 >>= 32;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadAbsolute(uint64_t a1, __int16 a2, unsigned int a3, unint64_t a4, char a5, __int16 a6)
{
  char v9 = a3;
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (a3 <= 2) {
    int v12 = 2;
  }
  else {
    int v12 = a3;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
  if (v12 + v13 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v12 + v13 > 0x60);
  }
  uint64_t v43 = 2 * v13;
  *(unsigned char *)(a1 + 56) = v13 + v12;
  int v15 = (uint64_t **)(a1 + 32);
  int v14 = *(void **)(a1 + 32);
  long long v16 = (uint64_t *)(a1 + 32);
  if (v14)
  {
    uint64_t v17 = a1 + 32;
    do
    {
      unint64_t v18 = v14[4];
      BOOL v19 = v18 >= a4;
      if (v18 >= a4) {
        int v20 = v14;
      }
      else {
        int v20 = v14 + 1;
      }
      if (v19) {
        uint64_t v17 = (uint64_t)v14;
      }
      int v14 = (void *)*v20;
    }
    while (*v20);
    long long v16 = (uint64_t *)(a1 + 32);
    if ((uint64_t **)v17 != v15)
    {
      uint64_t v21 = *(void *)(v17 + 32);
      long long v16 = (uint64_t *)v17;
      if (a4 - v21 == (__int16)(a4 - v21)) {
        goto LABEL_23;
      }
    }
  }
  if (v16 == *(uint64_t **)(a1 + 24)) {
    goto LABEL_24;
  }
  uint64_t v22 = *v16;
  if (*v16)
  {
    do
    {
      uint64_t v17 = v22;
      uint64_t v22 = *(void *)(v22 + 8);
    }
    while (v22);
  }
  else
  {
    do
    {
      uint64_t v17 = v16[2];
      BOOL v23 = *(void *)v17 == (void)v16;
      long long v16 = (uint64_t *)v17;
    }
    while (v23);
  }
  uint64_t v21 = *(void *)(v17 + 32);
  if ((a4 - v21 + 0x8000) >> 16)
  {
LABEL_24:
    uint64_t v29 = *(void *)(a1 + 48);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unint64_t v49 = 0xFFFFFFFF00000000;
    v44[0] = a4;
    v44[1] = v43 & 0xFE;
    long long v45 = xmmword_242EA8010;
    uint64_t v46 = 8;
    memset(__src, 0, sizeof(__src));
    unint64_t v30 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)v44, (unsigned __int8 *)__src);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v29, *(char **)(v29 + 8), (char *)__src, (char *)v30, v30 - (unsigned __int8 *)__src);
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0xFFFFFFFF00000000;
    LODWORD(__src[0]) = HIDWORD(a4);
    DWORD1(__src[0]) = ((_BYTE)v43 + 2) & 0xFE;
    *(_OWORD *)((char *)__src + 8) = xmmword_242EA8010;
    *((void *)&__src[1] + 1) = 8;
    *(_OWORD *)long long v54 = 0u;
    long long v55 = 0u;
    uint64_t v32 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)__src, v54);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v31, *(char **)(v31 + 8), (char *)v54, (char *)v32, v32 - v54);
    uint64_t v33 = *(uint64_t **)(a1 + 32);
    long long v34 = (uint64_t **)(a1 + 32);
    if (v33)
    {
      while (1)
      {
        while (1)
        {
          long long v34 = (uint64_t **)v33;
          unint64_t v35 = v33[4];
          if (v35 <= a4) {
            break;
          }
          uint64_t v33 = *v34;
          int v15 = v34;
          if (!*v34) {
            goto LABEL_31;
          }
        }
        if (v35 >= a4) {
          break;
        }
        uint64_t v33 = v34[1];
        if (!v33)
        {
          int v15 = v34 + 1;
          goto LABEL_31;
        }
      }
      int v25 = v34;
    }
    else
    {
LABEL_31:
      int v25 = operator new(0x38uLL);
      v25[4] = a4;
      *((_WORD *)v25 + 20) = 0;
      *(void *)((char *)v25 + 44) = 0x800000003;
      *((unsigned char *)v25 + 52) = 0;
      *int v25 = 0;
      v25[1] = 0;
      v25[2] = v34;
      *int v15 = v25;
      uint64_t v36 = **(void **)(a1 + 24);
      long long v37 = v25;
      if (v36)
      {
        *(void *)(a1 + 24) = v36;
        long long v37 = *v15;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v37);
      ++*(void *)(a1 + 40);
    }
    LOWORD(v26) = 0;
    __int16 v24 = 0;
    char v28 = 0;
    v25[5] = v43 | 0x400000000;
    *((unsigned char *)v25 + 52) = 0;
    *((_DWORD *)v25 + 12) = 8;
    uint64_t v27 = 0x800000004;
    LOWORD(v25) = v43;
  }
  else
  {
LABEL_23:
    __int16 v24 = a4 - v21;
    LODWORD(v25) = *(_DWORD *)(v17 + 40);
    unsigned int v26 = v25 >> 16;
    uint64_t v27 = *(void *)(v17 + 44);
    char v28 = *(unsigned char *)(v17 + 52);
  }
  uint64_t v38 = *(void *)(a1 + 80);
  uint64_t v39 = *(void *)(a1 + 72);
  uint64_t v40 = 8 * (v38 - v39) - 1;
  if (v38 == v39) {
    uint64_t v40 = 0;
  }
  unint64_t v41 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v40 == v41)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v39 = *(void *)(a1 + 72);
    unint64_t v41 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v42 = *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v41 & 0x3F) << 6);
  *(_WORD *)unint64_t v42 = v43;
  *(_WORD *)(v42 + 2) = 0;
  *(void *)(v42 + 4) = 0x100000003;
  *(unsigned char *)(v42 + 12) = 0;
  *(_WORD *)(v42 + 16) = (_WORD)v25;
  *(_WORD *)(v42 + 18) = v26;
  *(void *)(v42 + 20) = v27;
  *(unsigned char *)(v42 + 28) = v28;
  *(_WORD *)(v42 + 32) = v24;
  *(unsigned char *)(v42 + 34) = 0;
  *(unsigned char *)(v42 + 35) = v9;
  *(_WORD *)(v42 + 36) = 2 * a2;
  *(void *)(v42 + 40) = 0x800000001;
  *(unsigned char *)(v42 + 48) = 0;
  *(unsigned char *)(v42 + 52) = 0;
  *(unsigned char *)(v42 + 60) = a5;
  *(_WORD *)(v42 + 62) = a6;
  ++*(void *)(a1 + 104);
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromGatherBuffer(uint64_t a1, __int16 a2, unsigned int a3, __int16 a4, char a5, __int16 a6)
{
  char v9 = a3;
  if (a3 <= 2) {
    int v12 = 2;
  }
  else {
    int v12 = a3;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
  if (v12 + v13 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v12 + v13 > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v13 + v12;
  if (!*(unsigned char *)(a1 + 112))
  {
    uint64_t v14 = *(void *)(a1 + 48);
    *(unsigned char *)(v14 + 200) = 1;
    *(_DWORD *)(v14 + 204) = *(_DWORD *)(v14 + 8) - *(_DWORD *)v14;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    v25[0] = xmmword_242EA8020;
    v25[1] = xmmword_242EA7F50;
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendInstruction<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate32>(v14, (unsigned int *)v25);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    v21[0] = xmmword_242EA8030;
    v21[1] = xmmword_242EA7F50;
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendInstruction<AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate32>(v14, (unsigned int *)v21);
    *(unsigned char *)(a1 + 112) = 1;
  }
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = 8 * (v15 - v16) - 1;
  if (v15 == v16) {
    uint64_t v17 = 0;
  }
  unint64_t v18 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v17 == v18)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    unint64_t v18 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v19 = *(void *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v18 & 0x3F) << 6);
  *(void *)unint64_t v19 = (2 * v13) | 0x300000000;
  *(unsigned char *)(v19 + 12) = 0;
  *(_DWORD *)(v19 + 8) = 1;
  *(_DWORD *)(v19 + 16) = 4;
  *(void *)(v19 + 20) = 0x800000004;
  *(unsigned char *)(v19 + 28) = 0;
  *(_WORD *)(v19 + 32) = a4;
  *(unsigned char *)(v19 + 34) = 0;
  *(unsigned char *)(v19 + 35) = v9;
  *(_WORD *)(v19 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v19 + 40) = 0x800000001;
  *(unsigned char *)(v19 + 48) = 0;
  *(unsigned char *)(v19 + 52) = 0;
  *(unsigned char *)(v19 + 60) = a5;
  *(_WORD *)(v19 + 62) = a6;
  ++*(void *)(a1 + 104);
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromUserBuffer(uint64_t a1, __int16 a2, unsigned int a3, unsigned int a4, unsigned int a5, char a6, __int16 a7)
{
  char v11 = a3;
  if (a3 <= 2) {
    int v14 = 2;
  }
  else {
    int v14 = a3;
  }
  int v15 = *(unsigned __int8 *)(a1 + 56);
  if ((v14 + v15) >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      int v15 = *(unsigned __int8 *)(a1 + 56);
    }
    while ((v14 + v15) > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v15 + v14;
  v28[0] = (2 * v15) | 0x400000000;
  v28[1] = 8;
  AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadBufferPointer((uint64_t)v29, (uint64_t **)a1, v28, a4, a5);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = 8 * (v16 - v17) - 1;
  __int16 v19 = 2 * v15;
  __int16 v20 = v29[0];
  __int16 v21 = v29[1];
  uint64_t v22 = v30;
  char v23 = v31;
  __int16 v24 = v32;
  if (v16 == v17) {
    uint64_t v18 = 0;
  }
  unint64_t v25 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v18 == v25)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 72);
    unint64_t v25 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v26 = *(void *)(v17 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v25 & 0x3F) << 6);
  *(_WORD *)unint64_t v26 = v19;
  *(_WORD *)(v26 + 2) = 0;
  *(void *)(v26 + 4) = 0x100000003;
  *(unsigned char *)(v26 + 12) = 0;
  *(_WORD *)(v26 + 16) = v20;
  *(_WORD *)(v26 + 18) = v21;
  *(void *)(v26 + 20) = v22;
  *(unsigned char *)(v26 + 28) = v23;
  *(_WORD *)(v26 + 32) = v24;
  *(unsigned char *)(v26 + 34) = 0;
  *(unsigned char *)(v26 + 35) = v11;
  *(_WORD *)(v26 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v26 + 40) = 0x800000001;
  *(unsigned char *)(v26 + 48) = 0;
  *(unsigned char *)(v26 + 52) = 0;
  *(unsigned char *)(v26 + 60) = a6;
  *(_WORD *)(v26 + 62) = a7;
  ++*(void *)(a1 + 104);
  return result;
}

__n128 AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadBufferPointer(uint64_t a1, uint64_t **a2, unint64_t *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v6 = a3;
  if (HIWORD(a4))
  {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::addBufferPointerLoad((uint64_t)a2[6], *a3, a3[1], a4, a5);
    __int16 v9 = 0;
  }
  else
  {
    __int16 v9 = a4 ^ 0x8000;
    char v11 = a2 + 1;
    uint64_t v10 = a2[1];
    if (!v10) {
      goto LABEL_13;
    }
    int v12 = a2 + 1;
    do
    {
      unsigned int v13 = *((_DWORD *)v10 + 7);
      BOOL v14 = v13 >= a5;
      if (v13 >= a5) {
        int v15 = (uint64_t **)v10;
      }
      else {
        int v15 = (uint64_t **)(v10 + 1);
      }
      if (v14) {
        int v12 = (uint64_t **)v10;
      }
      uint64_t v10 = *v15;
    }
    while (*v15);
    if (v12 != v11 && *((_DWORD *)v12 + 7) <= a5)
    {
      unsigned int v6 = (unint64_t *)(v12 + 4);
    }
    else
    {
LABEL_13:
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::addBufferPointerLoad((uint64_t)a2[6], *a3, a3[1], 0x8000, a5);
      uint64_t v16 = a2[1];
      uint64_t v17 = a2 + 1;
      if (v16)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v17 = v16;
            unsigned int v18 = *((_DWORD *)v16 + 7);
            if (v18 <= a5) {
              break;
            }
            uint64_t v16 = (uint64_t *)*v17;
            char v11 = (uint64_t **)v17;
            if (!*v17) {
              goto LABEL_20;
            }
          }
          if (v18 >= a5) {
            break;
          }
          uint64_t v16 = (uint64_t *)v17[1];
          if (!v16)
          {
            char v11 = (uint64_t **)(v17 + 1);
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        __int16 v19 = v17;
        uint64_t v17 = operator new(0x30uLL);
        *((_DWORD *)v17 + 7) = a5;
        *((_WORD *)v17 + 16) = 0;
        *(void *)((char *)v17 + 36) = 0x800000003;
        *((unsigned char *)v17 + 44) = 0;
        void *v17 = 0;
        v17[1] = 0;
        v17[2] = v19;
        *char v11 = v17;
        __int16 v20 = (uint64_t *)**a2;
        __int16 v21 = v17;
        if (v20)
        {
          *a2 = v20;
          __int16 v21 = *v11;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a2[1], v21);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
      }
      unint64_t v22 = *v6;
      *(void *)((char *)v17 + 37) = *(unint64_t *)((char *)v6 + 5);
      v17[4] = v22;
    }
  }
  __n128 result = *(__n128 *)v6;
  *(_OWORD *)a1 = *(_OWORD *)v6;
  *(_WORD *)(a1 + 16) = v9;
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromABIBuffer(uint64_t a1, __int16 a2, unsigned int a3, __int16 a4, int a5, char a6, __int16 a7)
{
  char v11 = a3;
  if (a3 <= 2) {
    int v14 = 2;
  }
  else {
    int v14 = a3;
  }
  unsigned int v15 = *(unsigned __int8 *)(a1 + 56);
  if (v14 + v15 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v15 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v14 + v15 > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v15 + v14;
  uint64_t v16 = 0x400000004;
  switch(a5)
  {
    case 4:
      uint64_t v16 = 0x400000008;
      *(unsigned char *)(a1 + 113) = 0;
      break;
    case 6:
      uint64_t v16 = 0x40000000CLL;
      break;
    case 8:
      uint64_t v16 = 0x400000010;
      break;
    case 12:
      uint64_t v16 = 0x400000018;
      break;
    case 14:
      uint64_t v16 = 0x40000001CLL;
      break;
    default:
      break;
  }
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = 8 * (v17 - v18) - 1;
  if (v17 == v18) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v19 == v20)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    unint64_t v20 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v21 = *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v20 & 0x3F) << 6);
  *(void *)unint64_t v21 = (2 * v15) | 0x300000000;
  *(unsigned char *)(v21 + 12) = 0;
  *(_DWORD *)(v21 + 8) = 1;
  *(void *)(v21 + 16) = v16;
  *(unsigned char *)(v21 + 28) = 0;
  *(_DWORD *)(v21 + 24) = 8;
  *(_WORD *)(v21 + 32) = a4;
  *(unsigned char *)(v21 + 34) = 0;
  *(unsigned char *)(v21 + 35) = v11;
  *(_WORD *)(v21 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v21 + 40) = 0x800000001;
  *(unsigned char *)(v21 + 48) = 0;
  *(unsigned char *)(v21 + 52) = 0;
  *(unsigned char *)(v21 + 60) = a6;
  *(_WORD *)(v21 + 62) = a7;
  ++*(void *)(a1 + 104);
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromIndirectBuffer(uint64_t a1, __int16 a2, unsigned int a3, __int16 a4, int a5, int a6, char a7, __int16 a8)
{
  char v12 = a3;
  if (a3 <= 2) {
    int v15 = 2;
  }
  else {
    int v15 = a3;
  }
  unsigned int v16 = *(unsigned __int8 *)(a1 + 56);
  if (v15 + v16 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v16 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v15 + v16 > 0x60);
  }
  __int16 v17 = 0;
  *(unsigned char *)(a1 + 56) = v16 + v15;
  int v18 = 3;
  switch(a6)
  {
    case 2:
      __int16 v17 = 4;
      int v18 = 4;
      break;
    case 4:
      *(unsigned char *)(a1 + 113) = 0;
      int v18 = 4;
      __int16 v17 = 8;
      break;
    case 6:
      int v18 = 4;
      __int16 v17 = 12;
      break;
    case 8:
      int v18 = 4;
      __int16 v17 = 16;
      break;
    default:
      break;
  }
  uint64_t v19 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v21 = 8 * (v19 - v20) - 1;
  if (v19 == v20) {
    uint64_t v21 = 0;
  }
  unint64_t v22 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v21 == v22)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 72);
    unint64_t v22 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v23 = *(void *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v22 & 0x3F) << 6);
  *(void *)unint64_t v23 = (2 * v16) | 0x300000000;
  *(unsigned char *)(v23 + 12) = 0;
  *(_DWORD *)(v23 + 8) = 1;
  *(_WORD *)(v23 + 16) = v17;
  *(_WORD *)(v23 + 18) = 0;
  *(_DWORD *)(v23 + 20) = v18;
  *(_DWORD *)(v23 + 24) = 8;
  *(unsigned char *)(v23 + 28) = 0;
  *(_WORD *)(v23 + 32) = a4;
  *(unsigned char *)(v23 + 34) = 0;
  *(unsigned char *)(v23 + 35) = v12;
  *(_WORD *)(v23 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v23 + 40) = 0x800000001;
  *(unsigned char *)(v23 + 48) = 0;
  *(unsigned char *)(v23 + 52) = 1;
  *(_DWORD *)(v23 + 56) = a5;
  *(unsigned char *)(v23 + 60) = a7;
  *(_WORD *)(v23 + 62) = a8;
  ++*(void *)(a1 + 104);
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromIndirectUserBuffer(uint64_t a1, __int16 a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6, char a7, __int16 a8)
{
  char v12 = a3;
  if (a3 <= 2) {
    int v15 = 2;
  }
  else {
    int v15 = a3;
  }
  int v16 = *(unsigned __int8 *)(a1 + 56);
  if ((v15 + v16) >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      int v16 = *(unsigned __int8 *)(a1 + 56);
    }
    while ((v15 + v16) > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v16 + v15;
  v30[0] = (2 * v16) | 0x400000000;
  v30[1] = 8;
  AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadBufferPointer((uint64_t)v31, (uint64_t **)a1, v30, a4, a6);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = 8 * (v17 - v18) - 1;
  __int16 v20 = 2 * v16;
  __int16 v21 = v31[0];
  __int16 v22 = v31[1];
  uint64_t v23 = v32;
  char v24 = v33;
  __int16 v25 = v34;
  if (v17 == v18) {
    uint64_t v19 = 0;
  }
  unint64_t v26 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v19 == v26)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    unint64_t v26 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v27 = *(void *)(v18 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v26 & 0x3F) << 6);
  *(_WORD *)unint64_t v27 = v20;
  *(_WORD *)(v27 + 2) = 0;
  *(void *)(v27 + 4) = 0x100000003;
  *(unsigned char *)(v27 + 12) = 0;
  *(_WORD *)(v27 + 16) = v21;
  *(_WORD *)(v27 + 18) = v22;
  *(void *)(v27 + 20) = v23;
  *(unsigned char *)(v27 + 28) = v24;
  *(_WORD *)(v27 + 32) = v25;
  *(unsigned char *)(v27 + 34) = 0;
  *(unsigned char *)(v27 + 35) = v12;
  *(_WORD *)(v27 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v27 + 40) = 0x800000001;
  *(unsigned char *)(v27 + 48) = 0;
  *(unsigned char *)(v27 + 52) = 1;
  *(_DWORD *)(v27 + 56) = a5;
  *(unsigned char *)(v27 + 60) = a7;
  *(_WORD *)(v27 + 62) = a8;
  ++*(void *)(a1 + 104);
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromSCS(uint64_t a1, __int16 a2, unsigned int a3, __int16 a4, char a5, __int16 a6)
{
  char v9 = a3;
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a3 <= 2) {
    int v12 = 2;
  }
  else {
    int v12 = a3;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
  if (v12 + v13 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v13 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v12 + v13 > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v13 + v12;
  if (!*(unsigned char *)(a1 + 113))
  {
    *(void *)&__src[0] = 0x1000000;
    int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)__src, 1);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unint64_t v29 = 0xFFFFFFFF00000000;
    int v23 = SectionEnd;
    long long v24 = xmmword_242EA7EE0;
    uint64_t v25 = 0x800000000;
    int v26 = 0;
    memset(__src, 0, sizeof(__src));
    int v16 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v23, (unsigned __int8 *)__src);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v15, *(char **)(v15 + 8), (char *)__src, (char *)v16, v16 - (unsigned __int8 *)__src);
    *(unsigned char *)(a1 + 113) = 1;
  }
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = 8 * (v17 - v18) - 1;
  if (v17 == v18) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v19 == v20)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    unint64_t v20 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v21 = *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v20 & 0x3F) << 6);
  *(void *)unint64_t v21 = (2 * v13) | 0x300000000;
  *(unsigned char *)(v21 + 12) = 0;
  *(_DWORD *)(v21 + 8) = 1;
  *(_DWORD *)(v21 + 16) = 8;
  *(void *)(v21 + 20) = 0x800000003;
  *(unsigned char *)(v21 + 28) = 0;
  *(_WORD *)(v21 + 32) = a4;
  *(unsigned char *)(v21 + 34) = 1;
  *(unsigned char *)(v21 + 35) = v9;
  *(_WORD *)(v21 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v21 + 40) = 0x800000001;
  *(unsigned char *)(v21 + 48) = 0;
  *(unsigned char *)(v21 + 52) = 0;
  *(unsigned char *)(v21 + 60) = a5;
  *(_WORD *)(v21 + 62) = a6;
  ++*(void *)(a1 + 104);
  return result;
}

double AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadFromIndirectSCS(uint64_t a1, __int16 a2, unsigned int a3, __int16 a4, int a5, char a6, __int16 a7)
{
  char v11 = a3;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a3 <= 2) {
    int v14 = 2;
  }
  else {
    int v14 = a3;
  }
  unsigned int v15 = *(unsigned __int8 *)(a1 + 56);
  if (v14 + v15 >= 0x61)
  {
    do
    {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::finishRound(a1);
      unsigned int v15 = *(unsigned __int8 *)(a1 + 56);
    }
    while (v14 + v15 > 0x60);
  }
  *(unsigned char *)(a1 + 56) = v15 + v14;
  if (!*(unsigned char *)(a1 + 113))
  {
    *(void *)&__src[0] = 0x1000000;
    int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)__src, 1);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0xFFFFFFFF00000000;
    int v25 = SectionEnd;
    long long v26 = xmmword_242EA7EE0;
    uint64_t v27 = 0x800000000;
    int v28 = 0;
    memset(__src, 0, sizeof(__src));
    uint64_t v18 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)&v25, (unsigned __int8 *)__src);
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v17, *(char **)(v17 + 8), (char *)__src, (char *)v18, v18 - (unsigned __int8 *)__src);
    *(unsigned char *)(a1 + 113) = 1;
  }
  uint64_t v19 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 72);
  uint64_t v21 = 8 * (v19 - v20) - 1;
  if (v19 == v20) {
    uint64_t v21 = 0;
  }
  unint64_t v22 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  if (v21 == v22)
  {
    std::deque<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::InflightLoad>>::__add_back_capacity(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 72);
    unint64_t v22 = *(void *)(a1 + 104) + *(void *)(a1 + 96);
  }
  unint64_t v23 = *(void *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v22 & 0x3F) << 6);
  *(void *)unint64_t v23 = (2 * v15) | 0x300000000;
  *(unsigned char *)(v23 + 12) = 0;
  *(_DWORD *)(v23 + 8) = 1;
  *(_DWORD *)(v23 + 16) = 8;
  *(void *)(v23 + 20) = 0x800000003;
  *(unsigned char *)(v23 + 28) = 0;
  *(_WORD *)(v23 + 32) = a4;
  *(unsigned char *)(v23 + 34) = 1;
  *(unsigned char *)(v23 + 35) = v11;
  *(_WORD *)(v23 + 36) = 2 * a2;
  *(void *)&double result = 0x800000001;
  *(void *)(v23 + 40) = 0x800000001;
  *(unsigned char *)(v23 + 48) = 0;
  *(unsigned char *)(v23 + 52) = 1;
  *(_DWORD *)(v23 + 56) = a5;
  *(unsigned char *)(v23 + 60) = a6;
  *(_WORD *)(v23 + 62) = a7;
  ++*(void *)(a1 + 104);
  return result;
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::loadABIBufferBase(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = 4;
  switch(a3)
  {
    case 4:
      *(unsigned char *)(a1 + 113) = 0;
      uint64_t v4 = 8;
      break;
    case 6:
      uint64_t v4 = 12;
      break;
    case 8:
      uint64_t v4 = 16;
      break;
    case 12:
      uint64_t v4 = 24;
      break;
    case 14:
      uint64_t v4 = 28;
      break;
    default:
      break;
  }
  unint64_t v5 = (unsigned __int16)(2 * a2 + 2) & 0xFFFE | 0x100000000;
  uint64_t v6 = *(void *)(a1 + 48);
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Copy::Copy((uint64_t)v11, (2 * (a2 & 0x7FFF)) | 0x100000000, 8, v4 | 0x300000000, 8);
  long long __src = 0u;
  long long v13 = 0u;
  int v7 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v11, (unsigned __int8 *)&__src);
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v6, *(char **)(v6 + 8), (char *)&__src, (char *)v7, v7 - (unsigned __int8 *)&__src);
  uint64_t v8 = *(void *)(a1 + 48);
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Copy::Copy((uint64_t)v10, v5, 8, v4 | 0x300000002, 8);
  long long __src = 0u;
  long long v13 = 0u;
  char v9 = AGXIotoInstruction_COPY::emit((AGXIotoInstruction_COPY *)v10, (unsigned __int8 *)&__src);
  std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(v8, *(char **)(v8 + 8), (char *)&__src, (char *)v9, v9 - (unsigned __int8 *)&__src);
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 174) = 1;
  if (*(_DWORD *)(a1 + 168) == 20) {
    return;
  }
  int v2 = *(char **)a1;
  int v3 = *(char **)(a1 + 8);
  unint64_t v4 = (unint64_t)&v3[-*(void *)a1];
  unint64_t v5 = v4 + 16;
  if (*(void *)(a1 + 16) - *(void *)a1 >= v4 + 16)
  {
    uint64_t v8 = *(char **)a1;
    goto LABEL_26;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    abort();
  }
  uint64_t v6 = (char *)operator new(v4 + 16);
  int v7 = &v6[v4];
  uint64_t v8 = &v6[v4];
  if (v3 != v2)
  {
    if (v4 < 8)
    {
      char v9 = &v6[v4];
      goto LABEL_21;
    }
    char v9 = &v6[v4];
    if ((unint64_t)(v2 - v6) >= 0x20)
    {
      if (v4 >= 0x20)
      {
        unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFE0;
        char v11 = v3 - 16;
        int v12 = &v6[v3 - 16 - v2];
        unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v14 = *(_OWORD *)v11;
          *((_OWORD *)v12 - 1) = *((_OWORD *)v11 - 1);
          *(_OWORD *)int v12 = v14;
          v12 -= 32;
          v11 -= 32;
          v13 -= 32;
        }
        while (v13);
        if (v4 == v10) {
          goto LABEL_23;
        }
        if ((v4 & 0x18) == 0)
        {
          char v9 = &v7[-v10];
          v3 -= v10;
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      unint64_t v15 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
      int v16 = &v3[-v10 - 8];
      int64_t v17 = v16 - v2;
      do
      {
        uint64_t v18 = *(void *)v16;
        v16 -= 8;
        *(void *)&v6[v17] = v18;
        v17 -= 8;
        v15 += 8;
      }
      while (v15);
      if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_23;
      }
      char v9 = &v7[-(v4 & 0xFFFFFFFFFFFFFFF8)];
      v3 -= v4 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_21:
    uint64_t v19 = v9 - 1;
    do
    {
      char v20 = *--v3;
      *v19-- = v20;
    }
    while (v3 != v2);
LABEL_23:
    uint64_t v8 = v6;
  }
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &v6[v5];
  if (v2)
  {
    operator delete(v2);
    uint64_t v8 = *(char **)a1;
  }
LABEL_26:
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(a1 + 48), *(_DWORD *)(a1 + 240), (uint64_t)&v8[*(unsigned __int16 *)(a1 + 244)]);
  unsigned int v21 = *(unsigned __int16 *)(a1 + 172);
  if (*(_WORD *)(a1 + 172))
  {
    memset(&__src[12], 0, 20);
    *(_WORD *)long long __src = 519;
    *(_WORD *)&_OWORD __src[2] = ((_WORD)v21 << 8) | 0x54;
    *(void *)&__src[4] = (v21 >> 8) & 3;
    std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), (char *)__src, (char *)&__src[6], 6);
  }
  unint64_t v22 = *(char **)(a1 + 24);
  unint64_t v23 = *(unsigned char **)(a1 + 32);
  uint64_t v24 = v23 - v22;
  if (v23 == v22)
  {
    if (*(void *)(a1 + 216) == 0xFFFFFFFFLL)
    {
      memset(&__src[4], 0, 28);
      *(_DWORD *)long long __src = 14;
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), (char *)__src, (char *)&__src[4], 4);
    }
    else
    {
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      unint64_t v68 = 0xFFFFFFFF00000000;
      v65[0] = xmmword_242EA8040;
      v65[1] = xmmword_242EA7F50;
      memset(__src, 0, 32);
      uint64_t v33 = AGXIotoInstruction_LDIMM::emit((AGXIotoInstruction_LDIMM *)v65, __src);
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, *(char **)(a1 + 8), (char *)__src, (char *)v33, v33 - __src);
      __int16 v34 = *(char **)(a1 + 8);
      *(_WORD *)(a1 + 236) = (_WORD)v34 - *(_DWORD *)a1;
      uint64_t v35 = *(void *)(a1 + 216);
      v64[1] = 0;
      v64[2] = 0;
      v64[0] = (2 * (v35 & 0xFFFFFFFFFFFFLL)) | 1;
      memset(__src, 0, 32);
      uint64_t v36 = AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)v64, __src);
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1, v34, (char *)__src, (char *)v36, v36 - __src);
    }
    return;
  }
  long long v26 = *(char **)a1;
  int v25 = *(char **)(a1 + 8);
  uint64_t v27 = &v25[-*(void *)a1];
  *(_DWORD *)(a1 + 232) = v27;
  if (v24 < 1) {
    goto LABEL_77;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28 - (uint64_t)v25 >= v24)
  {
    if (v23 != v22) {
      memmove(v25, v22, v23 - v22);
    }
    *(void *)(a1 + 8) = &v25[v23 - v22];
    goto LABEL_77;
  }
  unint64_t v29 = (unint64_t)&v27[v24];
  if ((uint64_t)&v27[v24] < 0) {
    abort();
  }
  unint64_t v30 = v28 - (void)v26;
  if (2 * v30 > v29) {
    unint64_t v29 = 2 * v30;
  }
  if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v31 = v29;
  }
  if (v31) {
    uint64_t v32 = operator new(v31);
  }
  else {
    uint64_t v32 = 0;
  }
  long long v37 = &v27[(void)v32];
  uint64_t v38 = &v27[(void)v32 + v24];
  if ((unint64_t)v24 >= 8)
  {
    uint64_t v39 = &v27[(void)v32];
    if ((char *)(&v25[(void)v32] - &v22[(void)v26]) >= (char *)0x20)
    {
      if ((unint64_t)v24 >= 0x20)
      {
        uint64_t v40 = v24 & 0x7FFFFFFFFFFFFFE0;
        unint64_t v41 = (long long *)(v22 + 16);
        unint64_t v42 = (char *)v32 + (void)v27 + 16;
        unint64_t v43 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v44 = *v41;
          *((_OWORD *)v42 - 1) = *(v41 - 1);
          *(_OWORD *)unint64_t v42 = v44;
          v41 += 2;
          v42 += 32;
          v43 -= 32;
        }
        while (v43);
        if (v40 == v24)
        {
          long long v45 = v26;
          goto LABEL_63;
        }
        if ((v24 & 0x18) == 0)
        {
          v22 += v40;
          uint64_t v39 = &v37[v40];
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v46 = v24 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v39 = &v37[v24 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v47 = v40 - (v24 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v48 = (uint64_t *)&v22[v40];
      unint64_t v49 = (char *)v32 + &v25[v40] - v26;
      do
      {
        uint64_t v50 = *v48++;
        *(void *)unint64_t v49 = v50;
        v49 += 8;
        v47 += 8;
      }
      while (v47);
      long long v45 = v26;
      if (v46 == v24) {
        goto LABEL_63;
      }
      v22 += v46;
    }
  }
  else
  {
    uint64_t v39 = &v27[(void)v32];
  }
  do
  {
LABEL_61:
    char v51 = *v22++;
    *v39++ = v51;
  }
  while (v39 != v38);
  long long v45 = *(char **)a1;
LABEL_63:
  if (v45 == v25)
  {
    long long v54 = v25;
  }
  else
  {
    unint64_t v52 = v25 - v45;
    if ((unint64_t)(v25 - v45) < 0x20)
    {
      unint64_t v53 = v25;
      goto LABEL_71;
    }
    unint64_t v53 = v25;
    if ((unint64_t)(v26 - (unsigned char *)v32) < 0x20) {
      goto LABEL_84;
    }
    unint64_t v53 = &v25[-(v52 & 0xFFFFFFFFFFFFFFE0)];
    long long v55 = v25 - 16;
    uint64_t v56 = (char *)v32 + v25 - 16 - v26;
    unint64_t v57 = v52 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v58 = *(_OWORD *)v55;
      *((_OWORD *)v56 - 1) = *((_OWORD *)v55 - 1);
      *(_OWORD *)uint64_t v56 = v58;
      v55 -= 32;
      v56 -= 32;
      v57 -= 32;
    }
    while (v57);
    v37 -= v52 & 0xFFFFFFFFFFFFFFE0;
    long long v54 = v25;
    if (v52 != (v52 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_84:
      do
      {
LABEL_71:
        char v59 = *--v53;
        *--long long v37 = v59;
      }
      while (v53 != v45);
      long long v54 = *(unsigned char **)(a1 + 8);
    }
  }
  long long v60 = (char *)v32 + v31;
  uint64_t v61 = v54 - v25;
  if (v54 != v25) {
    memmove(&v27[(void)v32 + v24], v25, v54 - v25);
  }
  long long v62 = *(char **)a1;
  *(void *)a1 = v37;
  *(void *)(a1 + 8) = &v38[v61];
  *(void *)(a1 + 16) = v60;
  if (v62) {
    operator delete(v62);
  }
LABEL_77:
  BOOL v63 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v63;
  if (*(void **)(a1 + 40) != v63)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    if (v63) {
      operator delete(v63);
    }
  }
}

void AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12 = a2;
  if (a3 <= a2) {
    size_t v13 = a6 - a2;
  }
  else {
    size_t v13 = a3 - a2;
  }
  {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(unsigned int,unsigned int,unsigned int,unsigned long long,unsigned char const*,unsigned long,BOOL)::constCalcInlineThreshold = 256;
  }
  if (v13 <= AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(unsigned int,unsigned int,unsigned int,unsigned long long,unsigned char const*,unsigned long,BOOL)::constCalcInlineThreshold
    && (a7 & 1) == 0)
  {
    long long v14 = (char *)(a5 + v12);
    unint64_t v15 = &v14[v13];
    v36[0] = 0;
    v36[1] = 0;
    int v37 = 0;
    AGXIotoInstruction_NOP_0::emit((AGXIotoInstruction_NOP_0 *)v36, v35);
    do
    {
      int v16 = v15;
      if (v14 >= v15) {
        break;
      }
      v15 -= 2;
    }
    while (*(unsigned __int16 *)v35 == *((unsigned __int16 *)v16 - 1));
    int64_t v17 = *(unsigned char **)(a1 + 24);
    if (*(void *)(a1 + 40) - (void)v17 >= v13) {
      goto LABEL_32;
    }
    uint64_t v18 = *(unsigned char **)(a1 + 32);
    uint64_t v19 = operator new(v13);
    unint64_t v20 = v18 - v17;
    unsigned int v21 = &v19[v18 - v17];
    unint64_t v22 = v21;
    if (v18 == v17)
    {
LABEL_30:
      *(void *)(a1 + 24) = v22;
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = &v19[v13];
      if (v17) {
        operator delete(v17);
      }
LABEL_32:
      std::vector<unsigned char>::__insert_with_size[abi:nn180100]<unsigned char const*,unsigned char const*>(a1 + 24, *(char **)(a1 + 32), v14, v16, v16 - v14);
      *(void *)(a1 + 224) = v16 - v14;
      goto LABEL_33;
    }
    if (v20 < 8)
    {
      unint64_t v23 = &v19[v18 - v17];
      goto LABEL_27;
    }
    unint64_t v23 = &v19[v18 - v17];
    if ((unint64_t)(v17 - v19) >= 0x20)
    {
      if (v20 >= 0x20)
      {
        unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFE0;
        int v25 = (long long *)(v18 - 16);
        long long v26 = &v19[v18 - 16 - v17];
        unint64_t v27 = v20 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v28 = *v25;
          *(v26 - 1) = *(v25 - 1);
          *long long v26 = v28;
          v26 -= 2;
          v25 -= 2;
          v27 -= 32;
        }
        while (v27);
        if (v20 == v24) {
          goto LABEL_29;
        }
        if ((v20 & 0x18) == 0)
        {
          unint64_t v23 = &v21[-v24];
          v18 -= v24;
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v24 = 0;
      }
      unint64_t v29 = v24 - (v20 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v30 = &v18[-v24 - 8];
      int64_t v31 = v30 - v17;
      do
      {
        uint64_t v32 = *(void *)v30;
        v30 -= 8;
        *(void *)&v19[v31] = v32;
        v31 -= 8;
        v29 += 8;
      }
      while (v29);
      if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_29;
      }
      unint64_t v23 = &v21[-(v20 & 0xFFFFFFFFFFFFFFF8)];
      v18 -= v20 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_27:
    uint64_t v33 = v23 - 1;
    do
    {
      char v34 = *--v18;
      *v33-- = v34;
    }
    while (v18 != v17);
LABEL_29:
    unint64_t v22 = v19;
    goto LABEL_30;
  }
  *(void *)(a1 + 216) = v12 + a4;
LABEL_33:
  *(_DWORD *)(a1 + 208) = a2;
}

unsigned __int8 *AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::updateGlobalConfigurations(void *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)outputStruct = xmmword_242EAA428;
  *(_OWORD *)&outputStruct[16] = unk_242EAA438;
  size_t outputStructCnt = 32;
  mach_port_t Connect = IOGPUDeviceGetConnect();
  if (IOConnectCallStructMethod(Connect, 0x105u, outputStruct, 0x20uLL, outputStruct, &outputStructCnt))
  {
    int v3 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: %s:%d:%s: *** Error, failed to get global USC profile control setting from kernel!\n", "agxa_usc_profile_control_gen1_template.hpp", 135, "initializeWithKernelState");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v16 = "agxa_usc_profile_control_gen1_template.hpp";
      __int16 v17 = 1024;
      int v18 = 135;
      __int16 v19 = 2080;
      unint64_t v20 = "initializeWithKernelState";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Error, failed to get global USC profile control setting from kernel!\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      int v16 = "agxa_usc_profile_control_gen1_template.hpp";
      __int16 v17 = 1024;
      int v18 = 135;
      __int16 v19 = 2080;
      unint64_t v20 = "initializeWithKernelState";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Error, failed to get global USC profile control setting from kernel!\n", buf, 0x1Cu);
    }
    fwrite("AGX: Cannot determine the current kernel state of USC profile control. Falling back on default settings\n", 0x68uLL, 1uLL, *v3);
    int v4 = 0;
    int v5 = 0;
    uint64_t v12 = 0x1000000000002;
    int v6 = 2;
  }
  else
  {
    int v6 = outputStruct[8] & 3;
    int v5 = (outputStruct[8] >> 2) & 1;
    int v4 = (outputStruct[8] >> 3) & 1;
    HIWORD(v7) = 1;
    LOWORD(v7) = outputStruct[8] & 3;
    WORD1(v7) = (outputStruct[8] & 4) != 0;
    WORD2(v7) = (outputStruct[8] & 8) != 0;
    uint64_t v12 = v7;
  }
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[8];
  memset(&outputStruct[12], 0, 20);
  *(_DWORD *)buf = 0;
  *(_DWORD *)outputStruct = v6;
  *(_DWORD *)&outputStruct[4] = v5;
  *(_DWORD *)&outputStruct[8] = v4;
  AGXIotoInstruction_SETPROFILECTL_0::emit((AGXIotoInstruction_SETPROFILECTL_0 *)outputStruct, buf);
  *(_DWORD *)(v8 + v9) = *(_DWORD *)buf;
  uint64_t v10 = a1[9];
  *(void *)&outputStruct[20] = 0;
  *(_DWORD *)&outputStruct[16] = 0;
  *(_DWORD *)&outputStruct[28] = 0;
  *(_DWORD *)buf = 0;
  *(void *)outputStruct = v12;
  *(void *)&outputStruct[8] = BYTE4(v12);
  double result = AGXIotoInstruction_SETPROFILECTL_0::emit((AGXIotoInstruction_SETPROFILECTL_0 *)outputStruct, buf);
  *(_DWORD *)(v8 + v10) = *(_DWORD *)buf;
  return result;
}

uint64_t AGX::USCProfileControlStateLoaderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes>::appendProgramAddressTables(void *a1, void *a2, void *a3)
{
  objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *a1, a1[2], a1[7], @"usc-profile-ctl-sl"));
  id v5 = (id)[a3 objectForKey:@"usc-profile-ctl-sl"];
  if (!v5)
  {
    id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
    [a3 setObject:v5 forKeyedSubscript:@"usc-profile-ctl-sl"];
  }
  uint64_t v6 = [objc_alloc(MEMORY[0x263EFF8F8]) initWithBytes:a1[1] length:a1[2]];
  uint64_t v7 = [objc_alloc(MEMORY[0x263F12AF0]) initWithBinary:v6 uniqueIdentifier:a1[7] debugIdentifier:0];

  return [v5 addObject:v7];
}

uint64_t AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::Copy::Copy(uint64_t result, unint64_t a2, int a3, unint64_t a4, uint64_t a5)
{
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0xFFFFFFFF00000000;
  if ((HIDWORD(a2) - 2) <= 7)
  {
    int v5 = dword_242EAA72C[HIDWORD(a2) - 2];
    int v6 = HIDWORD(a2) - 1;
LABEL_4:
    int v7 = dword_242EAA74C[v6];
    goto LABEL_5;
  }
  int v6 = HIDWORD(a2) - 1;
  int v5 = 3;
  if ((HIDWORD(a2) - 1) <= 8) {
    goto LABEL_4;
  }
  int v7 = 1;
  if (HIDWORD(a2) > 9)
  {
LABEL_10:
    LOBYTE(v9) = 0;
    unsigned __int8 v8 = 0;
    goto LABEL_11;
  }
LABEL_5:
  switch(HIDWORD(a2))
  {
    case 0:
    case 1:
    case 8:
    case 9:
      unsigned __int8 v8 = a2;
      LOBYTE(v9) = BYTE1(a2);
      break;
    case 2:
    case 3:
    case 4:
      LOBYTE(v9) = 0;
      unsigned __int8 v8 = a2;
      break;
    case 5:
    case 6:
    case 7:
      unint64_t v9 = a2 >> 8;
      unsigned __int8 v8 = a2;
      break;
    default:
      goto LABEL_10;
  }
LABEL_11:
  *(void *)(result + 28) = v8 | (v9 << 8);
  *(_DWORD *)(result + 36) = v5;
  *(_DWORD *)(result + 40) = v7;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 52) = 0;
  if ((HIDWORD(a4) - 2) <= 7)
  {
    int v10 = dword_242EAA72C[HIDWORD(a4) - 2];
    int v11 = HIDWORD(a4) - 1;
LABEL_14:
    int v12 = dword_242EAA74C[v11];
    goto LABEL_15;
  }
  int v11 = HIDWORD(a4) - 1;
  int v10 = 3;
  if ((HIDWORD(a4) - 1) <= 8) {
    goto LABEL_14;
  }
  int v12 = 1;
  if (HIDWORD(a4) > 9)
  {
LABEL_20:
    unsigned __int8 v13 = 0;
    LOBYTE(v14) = 0;
    goto LABEL_21;
  }
LABEL_15:
  switch(HIDWORD(a4))
  {
    case 0:
    case 1:
    case 8:
    case 9:
      unsigned __int8 v13 = a4;
      LOBYTE(v14) = BYTE1(a4);
      break;
    case 2:
    case 3:
    case 4:
      LOBYTE(v14) = 0;
      unsigned __int8 v13 = a4;
      break;
    case 5:
    case 6:
    case 7:
      unint64_t v14 = a4 >> 8;
      unsigned __int8 v13 = a4;
      break;
    default:
      goto LABEL_20;
  }
LABEL_21:
  *(void *)double result = v13 | (v14 << 8);
  *(_DWORD *)(result + 8) = v10;
  *(_DWORD *)(result + 12) = v12;
  *(void *)(result + 16) = 0x800000000;
  *(unsigned char *)(result + 24) = BYTE4(a5);
  *(_WORD *)(result + 25) = 0;
  *(unsigned char *)(result + 27) = 0;
  unint64_t v15 = 0x201008040201uLL >> (8 * a5);
  if (a5 >= 6) {
    LOBYTE(v15) = 0;
  }
  *(unsigned char *)(result + 72) = v15;
  return result;
}

uint64_t AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0;
  if (a3 <= 63)
  {
    switch(a3)
    {
      case 2:
        uint64_t v4 = 1;
        if (a4 > 63) {
          goto LABEL_35;
        }
        goto LABEL_28;
      case 4:
        uint64_t v4 = 2;
        if (a4 > 63) {
          goto LABEL_35;
        }
        goto LABEL_28;
      case 8:
        uint64_t v4 = 3;
        if (a4 > 63) {
          goto LABEL_35;
        }
        goto LABEL_28;
      case 16:
        uint64_t v4 = 4;
        if (a4 > 63) {
          goto LABEL_35;
        }
        goto LABEL_28;
      case 32:
        uint64_t v4 = 5;
        if (a4 > 63) {
          goto LABEL_35;
        }
        goto LABEL_28;
      default:
        goto LABEL_27;
    }
  }
  if (a3 <= 255)
  {
    if (a3 == 64)
    {
      uint64_t v4 = 6;
      if (a4 > 63) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v4 = 7;
      if (a3 != 128) {
        uint64_t v4 = 0;
      }
      if (a4 > 63) {
        goto LABEL_35;
      }
    }
    goto LABEL_28;
  }
  if (a3 != 256)
  {
    if (a3 == 512)
    {
      uint64_t v4 = 9;
    }
    else if (a3 == 1024)
    {
      uint64_t v4 = 10;
      if (a4 > 63) {
        goto LABEL_35;
      }
      goto LABEL_28;
    }
LABEL_27:
    if (a4 > 63) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  uint64_t v4 = 8;
  if (a4 > 63)
  {
LABEL_35:
    if (a4 <= 255)
    {
      uint64_t v5 = 0x600000000;
      uint64_t v6 = 0x700000000;
      if (a4 != 128) {
        uint64_t v6 = 0;
      }
      if (a4 != 64) {
        uint64_t v5 = v6;
      }
    }
    else if (a4 == 256)
    {
      uint64_t v5 = 0x800000000;
    }
    else if (a4 == 512)
    {
      uint64_t v5 = 0x900000000;
    }
    else
    {
      uint64_t v5 = 0;
      if (a4 == 1024) {
        uint64_t v5 = 0xA00000000;
      }
    }
    return v5 | v4;
  }
LABEL_28:
  uint64_t v5 = 0;
  switch(a4)
  {
    case 2:
      uint64_t v5 = 0x100000000;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return v5 | v4;
    case 4:
      uint64_t v5 = 0x200000000;
      break;
    case 8:
      uint64_t v5 = 0x300000000;
      break;
    case 16:
      uint64_t v5 = 0x400000000;
      break;
    case 32:
      uint64_t v5 = 0x500000000;
      break;
    default:
      uint64_t v5 = 0;
      break;
  }
  return v5 | v4;
}

int *AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit(int *result, int a2, uint64_t a3)
{
  if (a2 == 1) {
    goto LABEL_222;
  }
  if (a2) {
    return result;
  }
  uint64_t v3 = 0;
  int v5 = result[21];
  unsigned int v4 = result[22];
  BOOL v6 = v5 == 10;
  if (!v5) {
    BOOL v6 = 1;
  }
  BOOL v7 = v4 == 7;
  if (v4 == 4) {
    BOOL v7 = 1;
  }
  BOOL v8 = v4 < 2 || v4 == 4;
  if (v4) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v6;
  }
  if (v4) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v4 == 8) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (v4 == 1)
  {
    int v11 = 1;
    unsigned int v10 = 1;
  }
  int v12 = v4 == 5 || v8;
  if (v4 == 5)
  {
    int v11 = 1;
    unsigned int v10 = 1;
  }
  unsigned int v13 = v4 & 0xFFFFFFFE;
  if (v4 == 2) {
    int v14 = 1;
  }
  else {
    int v14 = v12;
  }
  if (v4 == 2) {
    int v15 = 1;
  }
  else {
    int v15 = v11;
  }
  if (v4 == 2) {
    unsigned int v10 = 1;
  }
  BOOL v16 = v13 == 2 || v4 < 2;
  if (v13 == 2)
  {
    int v12 = 1;
    BOOL v8 = 1;
  }
  BOOL v17 = v5 == 7 && v16;
  BOOL v18 = v4 == 3 || v4 == 6;
  int v19 = v18 | v14;
  if (v5 == 4) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (v5) {
    int v21 = (v9 || v17) | v20;
  }
  else {
    int v21 = 1;
  }
  BOOL v22 = v5 == 8 && v4 < 3;
  if (v5 == 5) {
    int v23 = v12;
  }
  else {
    int v23 = 0;
  }
  BOOL v24 = v5 == 9 && v4 < 2;
  if (v5 != 6) {
    BOOL v8 = 0;
  }
  unsigned __int16 v25 = 119;
  if (result[25])
  {
    unsigned __int16 v29 = 0;
    LOWORD(v10) = 0;
  }
  else
  {
    int v26 = (v5 == 1) & ((v18 || v4 == 9) | v15);
    int v27 = (v5 == 2) & (v18 | v15);
    int v28 = (v5 == 3) & (v18 | v10);
    unsigned __int16 v29 = 0;
    LOWORD(v10) = 0;
    if ((v21 | v22 | v26 | v23 | v27 | (v24 || v8) | v28))
    {
      int v30 = result[26];
      int v31 = result[27];
      int v32 = result[28];
      unsigned int v33 = *((unsigned __int8 *)result + 116);
      unsigned int v34 = *(int *)((char *)result + 78);
      unsigned int v10 = ((v33 >> 5) | (*((unsigned __int8 *)result + 96) << 6)) & 0xFFFFFE01;
      if (v32 == 1)
      {
        LOWORD(v10) = v10 | 4;
      }
      else if (!v32)
      {
        LOWORD(v10) = v10 | 2;
      }
      int v35 = result[23];
      if (v31)
      {
        if (v31 == 1)
        {
          LOWORD(v10) = v10 & 0xFFE7 | 0x10;
        }
        else if (v31 == 2)
        {
          LOWORD(v10) = v10 & 0xFFE7;
        }
      }
      else
      {
        LOWORD(v10) = v10 & 0xFFE7 | 8;
      }
      __int16 v36 = ((((v33 >> 1) & 1) << 12) | ((v33 & 1) << 11)) & 0x1FFF | (((v33 >> 2) & 1) << 13) & 0x3FFF | (((v33 >> 3) & 1) << 14) & 0x7FFF | (((v33 >> 4) & 0xF) << 15);
      int v37 = (v34 >> 10) & 0x40 | (v34 >> 6 << 8);
      if (v30)
      {
        if (v30 == 1)
        {
          LOWORD(v10) = v10 & 0xFF9F | 0x40;
        }
        else if (v30 == 2)
        {
          LOWORD(v10) = v10 & 0xFF9F;
        }
      }
      else
      {
        LOWORD(v10) = v10 & 0xFF9F | 0x20;
      }
      uint64_t v3 = (unsigned __int16)v34 >> 14;
      unsigned __int16 v25 = v36 | 0x77;
      unsigned __int16 v29 = v37 & 0xFF7F | ((result[19] & 1) << 7);
      if (v35)
      {
        if (v35 == 2)
        {
          LOWORD(v10) = v10 & 0xFE7F | 0x80;
          if (!v9) {
            goto LABEL_91;
          }
          goto LABEL_88;
        }
        if (v35 == 1)
        {
          LOWORD(v10) = v10 & 0xFE7F;
          if (!v9)
          {
LABEL_91:
            if (v17)
            {
              if (v4 && (v4 == 1 || (v29 |= 8u, v4 != 2))) {
                LOWORD(v10) = v10 | 0xC000;
              }
              else {
                LOWORD(v10) = v10 & 0x3FFF | 0x8000;
              }
              goto LABEL_221;
            }
            if (v20)
            {
              unsigned __int16 v38 = v29 | 1;
              if (v4 == 4)
              {
LABEL_101:
                LOWORD(v10) = v10 & 0xBFFF;
                unsigned __int16 v29 = v38;
                goto LABEL_221;
              }
              if (v4)
              {
                switch(v4)
                {
                  case 1u:
                    LOWORD(v10) = v10 & 0xBFFF;
                    __int16 v39 = 9;
                    goto LABEL_220;
                  case 5u:
                    LOWORD(v10) = v10 | 0x4000;
                    __int16 v39 = 9;
                    goto LABEL_220;
                  case 2u:
                    LOWORD(v10) = v10 & 0xBFFF;
                    __int16 v39 = 17;
                    goto LABEL_220;
                  case 6u:
                    LOWORD(v10) = v10 | 0x4000;
                    __int16 v39 = 17;
                    goto LABEL_220;
                  case 3u:
                    LOWORD(v10) = v10 & 0xBFFF;
                    __int16 v39 = 25;
                    goto LABEL_220;
                }
LABEL_271:
                unsigned __int16 v29 = v38;
                goto LABEL_221;
              }
              goto LABEL_166;
            }
            if (v5)
            {
              if (v22)
              {
                unsigned __int16 v38 = v29 | 2;
                if (!v4) {
                  goto LABEL_101;
                }
                if (v4 == 1) {
                  goto LABEL_166;
                }
                LOWORD(v10) = v10 & 0xBFFF;
                __int16 v39 = 10;
LABEL_220:
                v29 |= v39;
                goto LABEL_221;
              }
              if (v26)
              {
                __int16 v42 = v10 | 0x8000;
                unsigned __int16 v43 = v29 | 2;
                if (v4 != 7)
                {
                  switch(v4)
                  {
                    case 4u:
LABEL_116:
                      LOWORD(v10) = v10 | 0xC000;
                      unsigned __int16 v29 = v43;
                      goto LABEL_221;
                    case 0u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 10;
                      goto LABEL_220;
                    case 8u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 10;
                      goto LABEL_220;
                    case 1u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 18;
                      goto LABEL_220;
                    case 5u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 18;
                      goto LABEL_220;
                    case 2u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 26;
                      goto LABEL_220;
                    case 9u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 26;
                      goto LABEL_220;
                    case 6u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 34;
                      goto LABEL_220;
                    case 3u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 34;
                      goto LABEL_220;
                  }
LABEL_214:
                  unsigned __int16 v29 = v43;
                  LOWORD(v10) = v42;
                  goto LABEL_221;
                }
                goto LABEL_132;
              }
              if (v23)
              {
                unsigned __int16 v38 = v29 | 3;
                if (v4 == 4) {
                  goto LABEL_101;
                }
                if (v4)
                {
                  switch(v4)
                  {
                    case 1u:
                      LOWORD(v10) = v10 & 0xBFFF;
                      __int16 v39 = 11;
                      goto LABEL_220;
                    case 5u:
                      LOWORD(v10) = v10 | 0x4000;
                      __int16 v39 = 11;
                      goto LABEL_220;
                    case 2u:
                      LOWORD(v10) = v10 & 0xBFFF;
                      __int16 v39 = 19;
                      goto LABEL_220;
                    case 3u:
                      LOWORD(v10) = v10 | 0x4000;
                      __int16 v39 = 19;
                      goto LABEL_220;
                  }
                  goto LABEL_271;
                }
LABEL_166:
                LOWORD(v10) = v10 | 0x4000;
                unsigned __int16 v29 = v38;
                goto LABEL_221;
              }
              if (v27)
              {
                __int16 v42 = v10 | 0x8000;
                unsigned __int16 v43 = v29 | 3;
                if (v4 != 7)
                {
                  switch(v4)
                  {
                    case 4u:
                      goto LABEL_116;
                    case 0u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 11;
                      goto LABEL_220;
                    case 8u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 11;
                      goto LABEL_220;
                    case 1u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 19;
                      goto LABEL_220;
                    case 5u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 19;
                      goto LABEL_220;
                    case 2u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 27;
                      goto LABEL_220;
                    case 6u:
                      LOWORD(v10) = v10 | 0xC000;
                      __int16 v39 = 27;
                      goto LABEL_220;
                    case 3u:
                      LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                      __int16 v39 = 35;
                      goto LABEL_220;
                  }
                  goto LABEL_214;
                }
LABEL_132:
                LOWORD(v10) = v42 & 0xBFFF;
                unsigned __int16 v29 = v43;
                goto LABEL_221;
              }
              if (v24)
              {
                v29 |= 4u;
                if (v4)
                {
                  LOWORD(v10) = v10 | 0x4000;
                  goto LABEL_221;
                }
                goto LABEL_89;
              }
              if (!v8)
              {
                if (!v28) {
                  goto LABEL_221;
                }
                unsigned __int16 v38 = v29 | 5;
                if (v4 == 7) {
                  goto LABEL_101;
                }
                if (v4 != 4)
                {
                  switch(v4)
                  {
                    case 0u:
                      LOWORD(v10) = v10 & 0xBFFF;
                      __int16 v39 = 13;
                      goto LABEL_220;
                    case 1u:
                      LOWORD(v10) = v10 | 0x4000;
                      __int16 v39 = 13;
                      goto LABEL_220;
                    case 5u:
                      LOWORD(v10) = v10 & 0xBFFF;
                      __int16 v39 = 21;
                      goto LABEL_220;
                    case 2u:
                      LOWORD(v10) = v10 | 0x4000;
                      __int16 v39 = 21;
                      goto LABEL_220;
                    case 6u:
                      LOWORD(v10) = v10 & 0xBFFF;
                      break;
                    case 3u:
                      LOWORD(v10) = v10 | 0x4000;
                      break;
                    default:
                      goto LABEL_271;
                  }
                  __int16 v39 = 29;
                  goto LABEL_220;
                }
                goto LABEL_166;
              }
              __int16 v40 = v10 | 0x8000;
              unsigned __int16 v41 = v29 | 4;
              if (v4 != 4)
              {
                if (v4)
                {
                  if (v4 == 1)
                  {
                    LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                    v29 |= 0xCu;
                    goto LABEL_221;
                  }
                  if (v4 == 2)
                  {
                    LOWORD(v10) = v10 | 0xC000;
                    v29 |= 0xCu;
                    goto LABEL_221;
                  }
                  LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                  __int16 v39 = 20;
                  goto LABEL_220;
                }
LABEL_118:
                LOWORD(v10) = v10 | 0xC000;
                unsigned __int16 v29 = v41;
                goto LABEL_221;
              }
            }
            else
            {
              __int16 v40 = v10 | 0x8000;
              unsigned __int16 v41 = v29 | 1;
              if (v4 != 10)
              {
                if (v4 != 7)
                {
                  if (v4 == 4)
                  {
                    LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                    __int16 v39 = 9;
                  }
                  else if (v4)
                  {
                    switch(v4)
                    {
                      case 8u:
                        LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                        __int16 v39 = 17;
                        break;
                      case 1u:
                        LOWORD(v10) = v10 | 0xC000;
                        __int16 v39 = 17;
                        break;
                      case 5u:
                        LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                        __int16 v39 = 25;
                        break;
                      case 2u:
                        LOWORD(v10) = v10 | 0xC000;
                        __int16 v39 = 25;
                        break;
                      case 9u:
                        LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                        __int16 v39 = 33;
                        break;
                      case 6u:
                        LOWORD(v10) = v10 | 0xC000;
                        __int16 v39 = 33;
                        break;
                      case 3u:
                        LOWORD(v10) = v10 & 0x3FFF | 0x8000;
                        __int16 v39 = 41;
                        break;
                      default:
                        v29 |= 1u;
                        LOWORD(v10) = v10 | 0x8000;
                        goto LABEL_221;
                    }
                  }
                  else
                  {
                    LOWORD(v10) = v10 | 0xC000;
                    __int16 v39 = 9;
                  }
                  goto LABEL_220;
                }
                goto LABEL_118;
              }
            }
            LOWORD(v10) = v40 & 0xBFFF;
            unsigned __int16 v29 = v41;
            goto LABEL_221;
          }
LABEL_88:
          if (v5 != 10)
          {
            if (!v5) {
              LOWORD(v10) = v10 | 0x4000;
            }
            goto LABEL_221;
          }
LABEL_89:
          LOWORD(v10) = v10 & 0xBFFF;
          goto LABEL_221;
        }
      }
      else
      {
        LOWORD(v10) = v10 & 0xFE7F | 0x100;
      }
      if (!v9) {
        goto LABEL_91;
      }
      goto LABEL_88;
    }
  }
LABEL_221:
  *(void *)a3 = (v3 << 48) | ((unint64_t)v29 << 32) | ((unint64_t)(unsigned __int16)v10 << 16) | v25;
  a3 += 8;
LABEL_222:
  __int16 v44 = 0;
  LOWORD(v45) = 375;
  if (result[5])
  {
    LOWORD(v46) = 0;
    LOWORD(v47) = 0;
    LOWORD(v48) = 0;
  }
  else
  {
    LOWORD(v46) = 0;
    LOWORD(v47) = 0;
    LOWORD(v48) = 0;
    if (result[4] == 1)
    {
      int v50 = result[6];
      int v49 = result[7];
      int v51 = *result;
      int v52 = result[8];
      unint64_t v53 = *((void *)result + 1);
      unsigned int v54 = *((unsigned __int8 *)result + 36);
      int v55 = (2 * v53) | (v54 >> 5);
      unint64_t v46 = v53 >> 15;
      unint64_t v47 = v53 >> 31;
      uint64_t v48 = (v53 >> 47) & 1;
      unsigned int v45 = ((((v54 >> 1) & 1) << 12) | ((v54 & 1) << 11)) & 0xFFF81FFF | (((v54 >> 2) & 1) << 13) & 0xFFF83FFF | (((v54 >> 3) & 1) << 14) & 0xFFF87FFF | (v54 >> 4 << 15) | 0x177;
      __int16 v56 = v55 & 0xFF81;
      __int16 v57 = v56 | 4;
      if (!v52) {
        v56 |= 2u;
      }
      if (v52 == 1) {
        __int16 v58 = v57;
      }
      else {
        __int16 v58 = v56;
      }
      __int16 v59 = v58 & 0xFFE7 | 8;
      __int16 v60 = v58 & 0xFFE7 | 0x10;
      if (v49 == 2) {
        v58 &= 0xFFE7u;
      }
      if (v49 == 1) {
        __int16 v58 = v60;
      }
      if (v49) {
        __int16 v44 = v58;
      }
      else {
        __int16 v44 = v59;
      }
      __int16 v61 = v44 & 0xFF9F | 0x20;
      __int16 v62 = v44 & 0xFF9F | 0x40;
      if (v50 == 2) {
        v44 &= 0xFF9Fu;
      }
      if (v50 == 1) {
        __int16 v44 = v62;
      }
      if (!v50) {
        __int16 v44 = v61;
      }
      if (v51)
      {
        if (v51 == 3)
        {
          LOWORD(v48) = v48 | 6;
        }
        else if (v51 == 2)
        {
          LOWORD(v48) = v48 | 2;
        }
      }
      else
      {
        LOWORD(v48) = v48 | 4;
      }
    }
  }
  *(_WORD *)a3 = v45;
  *(_WORD *)(a3 + 2) = v44;
  *(_WORD *)(a3 + 4) = v46;
  *(_WORD *)(a3 + 6) = v47;
  *(_WORD *)(a3 + 8) = v48;
  LOWORD(v46) = 247;
  if (result[14])
  {
    __int16 v77 = 0;
    LOWORD(v67) = 0;
    __int16 v68 = 0;
    __int16 v70 = 0;
  }
  else
  {
    int v63 = result[15];
    int v64 = result[16];
    int v65 = result[17];
    unint64_t v66 = *((void *)result + 5);
    int v67 = (v66 >> 34) & 0x3FF | (v66 << 10);
    uint64_t v69 = v66 << 16;
    __int16 v68 = v66 << 16 >> 22;
    __int16 v70 = WORD2(v69) >> 6;
    unsigned int v71 = *((unsigned __int8 *)result + 72);
    LODWORD(v46) = ((((v71 >> 1) & 1) << 12) | ((v71 & 1) << 11)) & 0xFFF81FFF | (((v71 >> 2) & 1) << 13) & 0xFFF83FFF | (((v71 >> 3) & 1) << 14) & 0xFFF87FFF | (v71 >> 4 << 15) | 0xF7;
    unsigned int v72 = ((HIDWORD(v66) << 14) | (*((unsigned __int8 *)result + 48) << 7)) & 0xFFFFBFFE | (v71 >> 5) & 1 | ((result[13] & 1) << 14);
    __int16 v73 = ((WORD2(v66) << 14) | (*((unsigned __int8 *)result + 48) << 7)) & 0xBFFE | (v71 >> 5) & 1 | ((result[13] & 1) << 14) | 4;
    if (!v65) {
      LOWORD(v72) = v72 | 2;
    }
    if (v65 == 1) {
      __int16 v74 = v73;
    }
    else {
      __int16 v74 = v72;
    }
    __int16 v75 = v74 & 0xFFE7 | 8;
    __int16 v76 = v74 & 0xFFE7 | 0x10;
    if (v64 == 2) {
      v74 &= 0xFFE7u;
    }
    if (v64 == 1) {
      __int16 v74 = v76;
    }
    if (v64) {
      __int16 v77 = v74;
    }
    else {
      __int16 v77 = v75;
    }
    if (v63)
    {
      if (v63 == 1)
      {
        __int16 v77 = v77 & 0xFF9F | 0x40;
      }
      else if (v63 == 2)
      {
        v77 &= 0xFF9Fu;
      }
    }
    else
    {
      __int16 v77 = v77 & 0xFF9F | 0x20;
    }
  }
  *(_WORD *)(a3 + 10) = v46;
  *(_WORD *)(a3 + 12) = v77;
  *(_WORD *)(a3 + 14) = v67;
  *(_WORD *)(a3 + 16) = v68;
  *(_WORD *)(a3 + 18) = v70;
  return result;
}

uint64_t AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  int v4 = *(_DWORD *)(result + 84);
  unsigned int v3 = *(_DWORD *)(result + 88);
  BOOL v5 = v4 == 10;
  if (!v4) {
    BOOL v5 = 1;
  }
  BOOL v6 = v3 == 7;
  if (v3 == 4) {
    BOOL v6 = 1;
  }
  BOOL v7 = v3 < 2 || v3 == 4;
  if (v3) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v5;
  }
  if (v3) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v3 == 8) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v3 == 1)
  {
    int v10 = 1;
    unsigned int v9 = 1;
  }
  int v11 = v3 == 5 || v7;
  if (v3 == 5)
  {
    int v10 = 1;
    unsigned int v9 = 1;
  }
  unsigned int v12 = v3 & 0xFFFFFFFE;
  if (v3 == 2) {
    int v13 = 1;
  }
  else {
    int v13 = v11;
  }
  if (v3 == 2) {
    int v14 = 1;
  }
  else {
    int v14 = v10;
  }
  if (v3 == 2) {
    unsigned int v9 = 1;
  }
  BOOL v15 = v12 == 2 || v3 < 2;
  if (v12 == 2)
  {
    int v11 = 1;
    BOOL v7 = 1;
  }
  BOOL v16 = v4 == 7 && v15;
  BOOL v17 = v3 == 3 || v3 == 6;
  int v18 = v17 | v13;
  if (v4 == 4) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  if (v4) {
    int v20 = (v8 || v16) | v19;
  }
  else {
    int v20 = 1;
  }
  BOOL v21 = v4 == 8 && v3 < 3;
  if (v4 == 5) {
    int v22 = v11;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = v4 == 9 && v3 < 2;
  if (v4 != 6) {
    BOOL v7 = 0;
  }
  unsigned __int16 v24 = 119;
  if (*(unsigned char *)(result + 100))
  {
    unsigned __int16 v28 = 0;
    LOWORD(v9) = 0;
    goto LABEL_219;
  }
  int v25 = (v4 == 1) & ((v17 || v3 == 9) | v14);
  int v26 = (v4 == 2) & (v17 | v14);
  int v27 = (v4 == 3) & (v17 | v9);
  unsigned __int16 v28 = 0;
  LOWORD(v9) = 0;
  if (((v20 | v21 | v25 | v22 | v26 | (v23 || v7) | v27) & 1) == 0) {
    goto LABEL_219;
  }
  int v29 = *(_DWORD *)(result + 104);
  int v30 = *(_DWORD *)(result + 108);
  int v31 = *(_DWORD *)(result + 112);
  unsigned int v32 = *(unsigned __int8 *)(result + 116);
  unsigned int v33 = *(_DWORD *)(result + 78);
  unsigned int v9 = ((v32 >> 5) | (*(unsigned __int8 *)(result + 96) << 6)) & 0xFFFFFE01;
  if (v31 == 1)
  {
    LOWORD(v9) = v9 | 4;
  }
  else if (!v31)
  {
    LOWORD(v9) = v9 | 2;
  }
  int v34 = *(_DWORD *)(result + 92);
  if (v30)
  {
    if (v30 == 1)
    {
      LOWORD(v9) = v9 & 0xFFE7 | 0x10;
    }
    else if (v30 == 2)
    {
      LOWORD(v9) = v9 & 0xFFE7;
    }
  }
  else
  {
    LOWORD(v9) = v9 & 0xFFE7 | 8;
  }
  __int16 v35 = ((((v32 >> 1) & 1) << 12) | ((v32 & 1) << 11)) & 0x1FFF | (((v32 >> 2) & 1) << 13) & 0x3FFF | (((v32 >> 3) & 1) << 14) & 0x7FFF | (((v32 >> 4) & 0xF) << 15);
  int v36 = (v33 >> 10) & 0x40 | (v33 >> 6 << 8);
  if (v29)
  {
    if (v29 == 1)
    {
      LOWORD(v9) = v9 & 0xFF9F | 0x40;
    }
    else if (v29 == 2)
    {
      LOWORD(v9) = v9 & 0xFF9F;
    }
  }
  else
  {
    LOWORD(v9) = v9 & 0xFF9F | 0x20;
  }
  uint64_t v2 = (unsigned __int16)v33 >> 14;
  unsigned __int16 v24 = v35 | 0x77;
  unsigned __int16 v28 = v36 & 0xFF7F | ((*(unsigned char *)(result + 76) & 1) << 7);
  if (!v34)
  {
    LOWORD(v9) = v9 & 0xFE7F | 0x100;
    goto LABEL_85;
  }
  if (v34 == 2)
  {
    LOWORD(v9) = v9 & 0xFE7F | 0x80;
    if (!v8) {
      goto LABEL_89;
    }
    goto LABEL_86;
  }
  if (v34 != 1)
  {
LABEL_85:
    if (!v8) {
      goto LABEL_89;
    }
    goto LABEL_86;
  }
  LOWORD(v9) = v9 & 0xFE7F;
  if (!v8)
  {
LABEL_89:
    if (v16)
    {
      if (v3 && (v3 == 1 || (v28 |= 8u, v3 != 2))) {
        LOWORD(v9) = v9 | 0xC000;
      }
      else {
        LOWORD(v9) = v9 & 0x3FFF | 0x8000;
      }
      goto LABEL_219;
    }
    if (v19)
    {
      unsigned __int16 v37 = v28 | 1;
      if (v3 == 4) {
        goto LABEL_99;
      }
      if (v3)
      {
        switch(v3)
        {
          case 1u:
            LOWORD(v9) = v9 & 0xBFFF;
            __int16 v38 = 9;
            goto LABEL_218;
          case 5u:
            LOWORD(v9) = v9 | 0x4000;
            __int16 v38 = 9;
            goto LABEL_218;
          case 2u:
            LOWORD(v9) = v9 & 0xBFFF;
            __int16 v38 = 17;
            goto LABEL_218;
          case 6u:
            LOWORD(v9) = v9 | 0x4000;
            __int16 v38 = 17;
            goto LABEL_218;
          case 3u:
            LOWORD(v9) = v9 & 0xBFFF;
            __int16 v38 = 25;
            goto LABEL_218;
        }
LABEL_265:
        unsigned __int16 v28 = v37;
        goto LABEL_219;
      }
      goto LABEL_164;
    }
    if (v4)
    {
      if (v21)
      {
        unsigned __int16 v37 = v28 | 2;
        if (!v3) {
          goto LABEL_99;
        }
        if (v3 != 1)
        {
          LOWORD(v9) = v9 & 0xBFFF;
          __int16 v38 = 10;
LABEL_218:
          v28 |= v38;
          goto LABEL_219;
        }
        goto LABEL_164;
      }
      if (v25)
      {
        __int16 v41 = v9 | 0x8000;
        unsigned __int16 v42 = v28 | 2;
        if (v3 != 7)
        {
          switch(v3)
          {
            case 4u:
LABEL_114:
              LOWORD(v9) = v9 | 0xC000;
              unsigned __int16 v28 = v42;
              goto LABEL_219;
            case 0u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 10;
              goto LABEL_218;
            case 8u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 10;
              goto LABEL_218;
            case 1u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 18;
              goto LABEL_218;
            case 5u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 18;
              goto LABEL_218;
            case 2u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 26;
              goto LABEL_218;
            case 9u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 26;
              goto LABEL_218;
            case 6u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 34;
              goto LABEL_218;
            case 3u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 34;
              goto LABEL_218;
          }
LABEL_212:
          unsigned __int16 v28 = v42;
          LOWORD(v9) = v41;
          goto LABEL_219;
        }
        goto LABEL_130;
      }
      if (v22)
      {
        unsigned __int16 v37 = v28 | 3;
        if (v3 == 4) {
          goto LABEL_99;
        }
        if (v3)
        {
          switch(v3)
          {
            case 1u:
              LOWORD(v9) = v9 & 0xBFFF;
              __int16 v38 = 11;
              goto LABEL_218;
            case 5u:
              LOWORD(v9) = v9 | 0x4000;
              __int16 v38 = 11;
              goto LABEL_218;
            case 2u:
              LOWORD(v9) = v9 & 0xBFFF;
              __int16 v38 = 19;
              goto LABEL_218;
            case 3u:
              LOWORD(v9) = v9 | 0x4000;
              __int16 v38 = 19;
              goto LABEL_218;
          }
          goto LABEL_265;
        }
LABEL_164:
        LOWORD(v9) = v9 | 0x4000;
        unsigned __int16 v28 = v37;
        goto LABEL_219;
      }
      if (v26)
      {
        __int16 v41 = v9 | 0x8000;
        unsigned __int16 v42 = v28 | 3;
        if (v3 != 7)
        {
          switch(v3)
          {
            case 4u:
              goto LABEL_114;
            case 0u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 11;
              goto LABEL_218;
            case 8u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 11;
              goto LABEL_218;
            case 1u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 19;
              goto LABEL_218;
            case 5u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 19;
              goto LABEL_218;
            case 2u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 27;
              goto LABEL_218;
            case 6u:
              LOWORD(v9) = v9 | 0xC000;
              __int16 v38 = 27;
              goto LABEL_218;
            case 3u:
              LOWORD(v9) = v9 & 0x3FFF | 0x8000;
              __int16 v38 = 35;
              goto LABEL_218;
          }
          goto LABEL_212;
        }
LABEL_130:
        LOWORD(v9) = v41 & 0xBFFF;
        unsigned __int16 v28 = v42;
        goto LABEL_219;
      }
      if (v23)
      {
        v28 |= 4u;
        if (v3)
        {
          LOWORD(v9) = v9 | 0x4000;
          goto LABEL_219;
        }
LABEL_87:
        LOWORD(v9) = v9 & 0xBFFF;
        goto LABEL_219;
      }
      if (!v7)
      {
        if (!v27) {
          goto LABEL_219;
        }
        unsigned __int16 v37 = v28 | 5;
        if (v3 == 7)
        {
LABEL_99:
          LOWORD(v9) = v9 & 0xBFFF;
          unsigned __int16 v28 = v37;
          goto LABEL_219;
        }
        if (v3 != 4)
        {
          switch(v3)
          {
            case 0u:
              LOWORD(v9) = v9 & 0xBFFF;
              __int16 v38 = 13;
              goto LABEL_218;
            case 1u:
              LOWORD(v9) = v9 | 0x4000;
              __int16 v38 = 13;
              goto LABEL_218;
            case 5u:
              LOWORD(v9) = v9 & 0xBFFF;
              __int16 v38 = 21;
              goto LABEL_218;
            case 2u:
              LOWORD(v9) = v9 | 0x4000;
              __int16 v38 = 21;
              goto LABEL_218;
            case 6u:
              LOWORD(v9) = v9 & 0xBFFF;
              break;
            case 3u:
              LOWORD(v9) = v9 | 0x4000;
              break;
            default:
              goto LABEL_265;
          }
          __int16 v38 = 29;
          goto LABEL_218;
        }
        goto LABEL_164;
      }
      __int16 v39 = v9 | 0x8000;
      unsigned __int16 v40 = v28 | 4;
      if (v3 != 4)
      {
        if (v3)
        {
          if (v3 == 1)
          {
            LOWORD(v9) = v9 & 0x3FFF | 0x8000;
            v28 |= 0xCu;
            goto LABEL_219;
          }
          if (v3 == 2)
          {
            LOWORD(v9) = v9 | 0xC000;
            v28 |= 0xCu;
            goto LABEL_219;
          }
          LOWORD(v9) = v9 & 0x3FFF | 0x8000;
          __int16 v38 = 20;
          goto LABEL_218;
        }
LABEL_116:
        LOWORD(v9) = v9 | 0xC000;
        unsigned __int16 v28 = v40;
        goto LABEL_219;
      }
    }
    else
    {
      __int16 v39 = v9 | 0x8000;
      unsigned __int16 v40 = v28 | 1;
      if (v3 != 10)
      {
        if (v3 != 7)
        {
          if (v3 == 4)
          {
            LOWORD(v9) = v9 & 0x3FFF | 0x8000;
            __int16 v38 = 9;
          }
          else if (v3)
          {
            switch(v3)
            {
              case 8u:
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                __int16 v38 = 17;
                break;
              case 1u:
                LOWORD(v9) = v9 | 0xC000;
                __int16 v38 = 17;
                break;
              case 5u:
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                __int16 v38 = 25;
                break;
              case 2u:
                LOWORD(v9) = v9 | 0xC000;
                __int16 v38 = 25;
                break;
              case 9u:
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                __int16 v38 = 33;
                break;
              case 6u:
                LOWORD(v9) = v9 | 0xC000;
                __int16 v38 = 33;
                break;
              case 3u:
                LOWORD(v9) = v9 & 0x3FFF | 0x8000;
                __int16 v38 = 41;
                break;
              default:
                v28 |= 1u;
                LOWORD(v9) = v9 | 0x8000;
                goto LABEL_219;
            }
          }
          else
          {
            LOWORD(v9) = v9 | 0xC000;
            __int16 v38 = 9;
          }
          goto LABEL_218;
        }
        goto LABEL_116;
      }
    }
    LOWORD(v9) = v39 & 0xBFFF;
    unsigned __int16 v28 = v40;
    goto LABEL_219;
  }
LABEL_86:
  if (v4 == 10) {
    goto LABEL_87;
  }
  if (!v4) {
    LOWORD(v9) = v9 | 0x4000;
  }
LABEL_219:
  LOWORD(v43) = 0;
  *(void *)a2 = (v2 << 48) | ((unint64_t)v28 << 32) | ((unint64_t)(unsigned __int16)v9 << 16) | v24;
  __int16 v44 = 375;
  if (*(unsigned char *)(result + 20))
  {
    LOWORD(v45) = 0;
    LOWORD(v46) = 0;
    LOWORD(v47) = 0;
    goto LABEL_245;
  }
  LOWORD(v45) = 0;
  LOWORD(v46) = 0;
  LOWORD(v47) = 0;
  if (*(_DWORD *)(result + 16) != 1) {
    goto LABEL_245;
  }
  int v49 = *(_DWORD *)(result + 24);
  int v48 = *(_DWORD *)(result + 28);
  int v50 = *(_DWORD *)(result + 32);
  unint64_t v51 = *(void *)(result + 8);
  unsigned int v52 = *(unsigned __int8 *)(result + 36);
  unsigned int v53 = v52 >> 4;
  unsigned int v54 = ((((v52 >> 1) & 1) << 12) | ((v52 & 1) << 11)) & 0xFFFF9FFF | (((v52 >> 2) & 1) << 13) & 0xFFFFBFFF | (((v52 >> 3) & 1) << 14);
  int v43 = ((2 * v51) | (v52 >> 5)) & 0xFFFFFF81;
  if (v50 == 1)
  {
    LOWORD(v43) = v43 | 4;
  }
  else if (!v50)
  {
    LOWORD(v43) = v43 | 2;
  }
  __int16 v55 = v54 & 0x7FFF | ((v53 & 0xF) << 15);
  int v56 = *(_DWORD *)result;
  if (v48)
  {
    if (v48 == 1)
    {
      LOWORD(v43) = v43 & 0xFFE7 | 0x10;
    }
    else if (v48 == 2)
    {
      LOWORD(v43) = v43 & 0xFFE7;
    }
  }
  else
  {
    LOWORD(v43) = v43 & 0xFFE7 | 8;
  }
  unint64_t v45 = v51 >> 15;
  unint64_t v46 = v51 >> 31;
  __int16 v44 = v55 | 0x177;
  uint64_t v47 = (v51 >> 47) & 1;
  if (!v49)
  {
    LOWORD(v43) = v43 & 0xFF9F | 0x20;
    goto LABEL_238;
  }
  if (v49 == 1)
  {
    LOWORD(v43) = v43 & 0xFF9F | 0x40;
    if (v56) {
      goto LABEL_239;
    }
LABEL_243:
    LOWORD(v47) = v47 | 4;
    goto LABEL_245;
  }
  if (v49 != 2)
  {
LABEL_238:
    if (v56) {
      goto LABEL_239;
    }
    goto LABEL_243;
  }
  LOWORD(v43) = v43 & 0xFF9F;
  if (!v56) {
    goto LABEL_243;
  }
LABEL_239:
  if (v56 == 3)
  {
    LOWORD(v47) = v47 | 6;
  }
  else if (v56 == 2)
  {
    LOWORD(v47) = v47 | 2;
  }
LABEL_245:
  *(_WORD *)(a2 + 8) = v44;
  *(_WORD *)(a2 + 10) = v43;
  *(_WORD *)(a2 + 12) = v45;
  *(_WORD *)(a2 + 14) = v46;
  *(_WORD *)(a2 + 16) = v47;
  __int16 v57 = 247;
  if (*(unsigned char *)(result + 56))
  {
    __int16 v66 = 0;
    __int16 v67 = 0;
    __int16 v68 = 0;
    __int16 v69 = 0;
    goto LABEL_264;
  }
  int v58 = *(_DWORD *)(result + 60);
  int v59 = *(_DWORD *)(result + 64);
  int v60 = *(_DWORD *)(result + 68);
  unint64_t v61 = *(void *)(result + 40);
  unint64_t v62 = v61 >> 16;
  unsigned int v63 = v61 << 16;
  unsigned int v64 = *(unsigned __int8 *)(result + 72);
  int v65 = (HIDWORD(v61) << 14) | (*(unsigned __int8 *)(result + 48) << 7) | (v64 >> 5) & 1;
  double result = (*(_WORD *)(result + 52) & 1) << 14;
  __int16 v66 = v65 & 0xBFFF | result;
  if (v60 == 1)
  {
    v66 |= 4u;
  }
  else if (!v60)
  {
    v66 |= 2u;
  }
  __int16 v67 = (v61 >> 34) & 0x3FF | ((_WORD)v61 << 10);
  __int16 v69 = WORD1(v61) >> 6;
  __int16 v57 = ((((v64 >> 1) & 1) << 12) | ((v64 & 1) << 11)) & 0x1FFF | (((v64 >> 2) & 1) << 13) & 0x3FFF | (((v64 >> 3) & 1) << 14) & 0x7FFF | (v64 >> 4 << 15) | 0xF7;
  __int16 v68 = __PAIR64__(v62, v63) >> 22;
  if (!v59)
  {
    __int16 v66 = v66 & 0xFFE7 | 8;
    goto LABEL_257;
  }
  if (v59 != 1)
  {
    if (v59 == 2)
    {
      v66 &= 0xFFE7u;
      if (!v58) {
        goto LABEL_262;
      }
      goto LABEL_258;
    }
LABEL_257:
    if (v58) {
      goto LABEL_258;
    }
LABEL_262:
    __int16 v66 = v66 & 0xFF9F | 0x20;
    goto LABEL_264;
  }
  __int16 v66 = v66 & 0xFFE7 | 0x10;
  if (!v58) {
    goto LABEL_262;
  }
LABEL_258:
  if (v58 == 1)
  {
    __int16 v66 = v66 & 0xFF9F | 0x40;
  }
  else if (v58 == 2)
  {
    v66 &= 0xFF9Fu;
  }
LABEL_264:
  *(_WORD *)(a2 + 18) = v57;
  *(_WORD *)(a2 + 20) = v66;
  *(_WORD *)(a2 + 22) = v67;
  *(_WORD *)(a2 + 24) = v68;
  *(_WORD *)(a2 + 26) = v69;
  return result;
}

uint64_t AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadImmediate::LoadImmediate(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v6 = 0uLL;
  *(void *)(a1 + 48) = 0xFFFFFFFF00000000;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  unsigned int v7 = *(unsigned __int16 *)a2;
  unsigned int v8 = v7 & 0xFFFF8007;
  if ((v7 & 0xFFFF8007) != 4)
  {
    int v12 = *((_WORD *)a2 + 1) & 3;
    if (v12 == 3)
    {
      if (v8 == 32772)
      {
        AGXIotoInstruction_LDIMM_2::AGXIotoInstruction_LDIMM_2((AGXIotoInstruction_LDIMM_2 *)&v18, a2);
        unsigned int v4 = v18;
        LOBYTE(v11) = v19;
        v17[0] = *(_DWORD *)v20;
        *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)&v20[3];
        long long v6 = v21;
        int v3 = v22;
        char v2 = v23;
        long long v13 = v24;
        __int16 v15 = v25;
        char v16 = v26;
        int v9 = 2;
        goto LABEL_12;
      }
    }
    else if (v12 == 2 && v8 == 32772)
    {
      AGXIotoInstruction_LDIMM_1::AGXIotoInstruction_LDIMM_1((AGXIotoInstruction_LDIMM_1 *)&v18, a2);
      unsigned int v4 = v18;
      LOBYTE(v11) = v19;
      v17[0] = *(_DWORD *)v20;
      *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)&v20[3];
      long long v6 = v21;
      int v3 = v22;
      char v2 = v23;
      long long v13 = v24;
      __int16 v15 = v25;
      char v16 = v26;
      int v9 = 1;
LABEL_12:
      long long v27 = v13;
      goto LABEL_14;
    }
    LOBYTE(v11) = 0;
    int v9 = -1;
    goto LABEL_14;
  }
  int v9 = 0;
  char v2 = 0;
  int v3 = 0;
  LODWORD(v6) = 2;
  if ((v7 & 8) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  memset(v17, 0, 7);
  DWORD1(v6) = v10;
  *((void *)&v6 + 1) = 0x800000000;
  unsigned int v4 = v7 >> 8;
  long long v27 = 0uLL;
  int v11 = (v7 >> 3) & 0x1E;
  __int16 v15 = 0;
  char v16 = 0;
LABEL_14:
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v11;
  *(_DWORD *)(a1 + 5) = v17[0];
  *(_DWORD *)(a1 + 8) = *(_DWORD *)((char *)v17 + 3);
  *(_OWORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 28) = v3;
  *(unsigned char *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 33) = v27;
  *(_WORD *)(a1 + 49) = v15;
  *(unsigned char *)(a1 + 51) = v16;
  *(_DWORD *)(a1 + 52) = v9;
  return a1;
}

unint64_t AGX::getDirtyArguments<AGX::HAL200::FragmentProgramVariantESLState>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v14 = a1[9];
  uint64_t v13 = a1[10];
  uint64_t v15 = a1[12];
  uint64_t v16 = a1[14];
  uint64_t v33 = a1[15];
  uint64_t v34 = a1[13];
  uint64_t v35 = a1[16];
  uint64_t v36 = a1[11];
  uint64_t v17 = a1[19];
  uint64_t v32 = a1[18];
  uint64_t v18 = a1[21];
  uint64_t v30 = a1[17];
  uint64_t v31 = a1[20];
  uint64_t v19 = a1[23];
  uint64_t v29 = a1[22];
  uint64_t v21 = a1[24];
  uint64_t v20 = a1[25];
  uint64_t v23 = a1[26];
  uint64_t v22 = a1[27];
  uint64_t v25 = a1[28];
  uint64_t v24 = a1[29];
  uint64_t v26 = a1[30];
  if (a1[33] & a4 | a1[31] & a2 | a1[35] & a6 | a1[37] & a8 || a1[36] & a7 | a1[38] & a9 | a1[34] & a5 | a1[32] & a3) {
    uint64_t v27 = 0x100000000;
  }
  else {
    uint64_t v27 = 0;
  }
  return ((v12 & a4 | v10 & a2 | v14 & a6 | v11 & a5 | v9 & a3 | v13 & a7) != 0) | ((unint64_t)((v34 & a4 | v36 & a2 | v33 & a6 | v16 & a5 | v15 & a3 | v35 & a7) != 0) << 8) | ((unint64_t)((v17 & a4 | v30 & a2 | v18 & a6 | v19 & a8 | v31 & a5 | v32 & a3 | v29 & a7 | v21 & a9) != 0) << 16) | ((unint64_t)((v22 & a4 | v20 & a2 | v24 & a6 | v25 & a5 | v23 & a3 | v26 & a7) != 0) << 24) | v27;
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::configurePBE(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8, char a9, char a10, char a11, char a12)
{
  uint64_t v19 = *(void *)(a2 + 208);
  if (a9) {
    int v20 = 8;
  }
  else {
    int v20 = 0;
  }
  int v59 = v20;
  if ((*(unsigned char *)(a7 + 1) & 1) == 0 || a9)
  {
    int v58 = *(_DWORD *)(v19 + 84);
    if (a12) {
      goto LABEL_7;
    }
  }
  else
  {
    int v58 = 0;
    if (a12)
    {
LABEL_7:
      unsigned int v55 = 181888;
      LOBYTE(v57) = 3;
      LOBYTE(v56) = 35;
      goto LABEL_12;
    }
  }
  int v56 = *(_DWORD *)(v19 + 40);
  uint64_t v57 = *(void *)(v19 + 16);
  int v21 = *(_DWORD *)(v19 + 68);
  if (*(_DWORD *)(v19 + 64) == 0x10000) {
    int v21 = 74880;
  }
  unsigned int v55 = v21;
LABEL_12:
  unsigned int v22 = *(_DWORD *)(v19 + 24);
  unsigned int v48 = *(_DWORD *)(a1 + 3912);
  int v46 = *(_DWORD *)(a2 + 144);
  int v54 = *(_DWORD *)(a2 + 192);
  unint64_t v53 = *(void *)(a2 + 380);
  uint64_t v52 = *(unsigned int *)(a2 + 388);
  int v50 = *(_DWORD *)(a2 + 312);
  unsigned int v51 = *(_DWORD *)(a2 + 308);
  int v49 = *(_DWORD *)(v19 + 72);
  unint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, a5, 0, a3, 0);
  if (v22 < 2) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, 0, 0, 0, 1u);
  }
  uint64_t v24 = *(void *)(a2 + 488);
  unint64_t v61 = (_DWORD *)a7;
  uint64_t v62 = a6;
  unint64_t v45 = v23;
  if (v24 && *(_DWORD *)(v24 + 1080)) {
    uint64_t v42 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v24, a5, 0, a3, 0);
  }
  else {
    uint64_t v42 = 0;
  }
  unsigned int v40 = a3;
  unsigned __int16 v41 = a5;
  uint64_t v63 = a1;
  int v44 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a2, 0);
  int v25 = 0;
  if (v22 >= 2) {
    int v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a2, 1u);
  }
  uint64_t v26 = *(void *)(a2 + 24);
  unsigned int v27 = *(_DWORD *)(a2 + 128);
  if (v26 == 9)
  {
    unsigned int v43 = (v27 + 0x3FFF) >> 14;
    LOWORD(v28) = 1;
  }
  else
  {
    int v28 = *(_DWORD *)(a2 + 136);
    unsigned int v43 = *(_DWORD *)(a2 + 132);
  }
  unsigned int v29 = *(_DWORD *)(a2 + 112);
  unsigned int v30 = *(_DWORD *)(a2 + 140);
  int v31 = *(_DWORD *)(a2 + 376);
  unint64_t v32 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a2, 0);
  char v33 = 0;
  if (a10) {
    char v33 = *(unsigned char *)(a2 + 304) != 0;
  }
  if (v27 >= 0x4000) {
    __int16 v34 = 0x4000;
  }
  else {
    __int16 v34 = v27;
  }
  if (v26 != 9) {
    __int16 v34 = v27;
  }
  uint64_t result = (uint64_t)AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::StateFields((unint64_t *)v64, 0, v56, v57, v54, v55, v53, v52, v58, v51, v50, v49, GPUVirtualAddress, v45, v42, v44, v25, v34, v43,
                      v28,
                      v29,
                      v46 + a4,
                      v30,
                      v31,
                      v32,
                      v48,
                      v33,
                      *(_DWORD *)(a2 + 236),
                      *(void *)(a2 + 32),
                      a11);
  uint64_t v36 = (v59 + a8);
  unsigned __int16 v37 = (_OWORD *)(v63 + 32 * v36 + 1480);
  long long v38 = v64[1];
  *unsigned __int16 v37 = v64[0];
  v37[1] = v38;
  if (*(unsigned char *)(a2 + 240))
  {
    uint64_t v39 = v63 + 448 + 8 * v36;
    *(void *)(v39 + 280) = *(void *)(a2 + 520);
    uint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, 0, 0, v40, 0);
    *(void *)(v39 + 152) = result;
    *(_DWORD *)(v63 + 448 + 4 * v36 + 496) = (unsigned __int16)a4 | (v41 << 16);
  }
  *(_DWORD *)(v63 + 4 * v36 + 880) = (*v61 >> 12) % (*(_WORD *)(v62 + 34) & 0x1FFu);
  return result;
}

uint64_t AGX::FramebufferDriverConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfig(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, int a8, unsigned __int8 a9)
{
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 108) = 3;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0x300000000;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = 3;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = 0x300000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = 0x300000000;
  *(unsigned char *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 508) = 3;
  *(unsigned char *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0x300000000;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0x300000000;
  *(unsigned char *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_DWORD *)(a1 + 748) = 3;
  *(unsigned char *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 828) = 3;
  *(unsigned char *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_DWORD *)(a1 + 908) = 3;
  *(unsigned char *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 988) = 3;
  *(unsigned char *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1068) = 3;
  *(unsigned char *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_DWORD *)(a1 + 1148) = 3;
  *(unsigned char *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1228) = 3;
  *(unsigned char *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1308) = 3;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1388) = 3;
  *(unsigned char *)(a1 + 1392) = 0;
  *(_DWORD *)(a1 + 1464) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_DWORD *)(a1 + 1468) = 3;
  *(unsigned char *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_DWORD *)(a1 + 1548) = 3;
  *(unsigned char *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_DWORD *)(a1 + 1628) = 3;
  *(unsigned char *)(a1 + 1632) = 0;
  *(void *)(a1 + 1719) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1728) = 1;
  *(_DWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  bzero((void *)(a1 + 1648), 0x28uLL);
  uint64_t v13 = a9;
  unsigned int v14 = 0;
  uint64_t v15 = 0;
  LOBYTE(v16) = 0;
  uint64_t v17 = 0;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1848) = 0x300000000;
  *(_DWORD *)(a1 + 1856) = 3;
  int v18 = a8 & ~a7;
  *(unsigned char *)(a1 + 1860) = 0;
  *(void *)(a1 + 1928) = 0;
  uint64_t v19 = a2;
  int32x4_t v38 = vdupq_n_s32(a6);
  int v36 = a7;
  do
  {
    *(void *)(a1 + 8 * v17 + 1744) = *(void *)(*(void *)(a4 + 8 * v17) + 208);
    uint64_t v24 = *(void *)(a4 + 8 * v17);
    char v25 = *(unsigned char *)(v24 + 112);
    *(unsigned char *)(a1 + 1732) = v25;
    *(unsigned char *)(a1 + 1733) = v25;
    if (a5) {
      int v26 = *(_DWORD *)(a5 + 4 * v17);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = a1 + v15;
    uint64_t v28 = a3 + 8 * v14;
    *(void *)(v27 + 56) = *(void *)v28;
    *(void *)(v27 + 64) = *(void *)(v28 + 8);
    *(void *)(v27 + 72) = *(void *)(v28 + 16);
    *(void *)(v27 + 80) = v24;
    *(void *)(v27 + 88) = 0;
    *(_DWORD *)(v27 + 96) = v26;
    *(void *)(v27 + 100) = 0;
    *(unsigned char *)(v27 + 112) = 0;
    if ((_BYTE)v16)
    {
      LOBYTE(v16) = 1;
      *(unsigned char *)(a1 + 1851) = 1;
      if (!a7) {
        goto LABEL_2;
      }
    }
    else
    {
      uint64_t v29 = a4;
      uint64_t v30 = a5;
      uint64_t v31 = v13;
      unint64_t v32 = [*(id *)v28 resourceOptions];
      uint64_t v13 = v31;
      a5 = v30;
      a4 = v29;
      a7 = v36;
      uint64_t v16 = (v32 >> 8) & 1;
      *(unsigned char *)(a1 + 1851) = v16;
      if (!v36) {
        goto LABEL_2;
      }
    }
    *(int32x4_t *)(v27 + 40) = v38;
LABEL_2:
    int v20 = 1 << v17;
    *(_DWORD *)(a1 + 1688) |= 1 << v17;
    if (a7) {
      int v21 = 1 << v17;
    }
    else {
      int v21 = 0;
    }
    *(_DWORD *)(a1 + 1704) |= v21;
    if (v18) {
      int v22 = 1 << v17;
    }
    else {
      int v22 = 0;
    }
    *(_DWORD *)(a1 + 1708) |= v22;
    if (v13) {
      int v23 = 1 << v17;
    }
    else {
      int v23 = 0;
    }
    *(_DWORD *)(a1 + 1712) |= v23;
    if (v13) {
      int v20 = 0;
    }
    *(_DWORD *)(a1 + 1700) |= v20;
    ++v17;
    v15 += 80;
    v14 += 3;
  }
  while (v19 != v17);
  return a1;
}

uint64_t AGX::FramebufferDriverConfigGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferDriverConfigGen3_3(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  long long v6 = (int8x16_t *)(a1 + 1700);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  unint64_t v158 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = 0u;
  int v159 = (void *)(a1 + 16);
  *(_DWORD *)(a1 + 108) = 3;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0x300000000;
  *(unsigned char *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = 3;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = 0x300000000;
  *(unsigned char *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = 0x300000000;
  *(unsigned char *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 508) = 3;
  *(unsigned char *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0x300000000;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0x300000000;
  *(unsigned char *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_DWORD *)(a1 + 748) = 3;
  *(unsigned char *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 828) = 3;
  *(unsigned char *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_DWORD *)(a1 + 908) = 3;
  *(unsigned char *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 988) = 3;
  *(unsigned char *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1068) = 3;
  *(unsigned char *)(a1 + 1072) = 0;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_DWORD *)(a1 + 1148) = 3;
  *(unsigned char *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1228) = 3;
  *(unsigned char *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_DWORD *)(a1 + 1308) = 3;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1388) = 3;
  *(unsigned char *)(a1 + 1392) = 0;
  *(_DWORD *)(a1 + 1464) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_DWORD *)(a1 + 1468) = 3;
  *(unsigned char *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_DWORD *)(a1 + 1548) = 3;
  *(unsigned char *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_DWORD *)(a1 + 1628) = 3;
  *(unsigned char *)(a1 + 1632) = 0;
  *(void *)(a1 + 1719) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1728) = 1;
  *(_WORD *)(a1 + 1732) = 0;
  unsigned int v154 = (char *)(a1 + 1733);
  unsigned int v155 = (char *)(a1 + 1732);
  *(_DWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  uint64_t v156 = a1 + 1648;
  bzero((void *)(a1 + 1648), 0x28uLL);
  unsigned int v160 = (_DWORD *)(a1 + 1840);
  *(_DWORD *)(a1 + 1848) = 0;
  *(void *)(a1 + 1840) = 0;
  unsigned int v162 = v6;
  v6[9].i64[1] = 0x300000003;
  *(unsigned char *)(a1 + 1860) = 0;
  *(void *)(a1 + 1928) = 0;
  unsigned int v157 = a2;
  uint64_t v7 = [a2 _descriptorPrivate];
  id v8 = *(id *)v7;
  unsigned int v152 = (void *)[*(id *)v7 _descriptorAtIndex:8];
  uint64_t v9 = [v8 _descriptorAtIndex:9];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int32x2_t v12 = 0;
  *(unsigned char *)(a1 + 1848) = *(unsigned char *)(v7 + 43);
  *(_WORD *)(a1 + 1849) = *(_WORD *)(v7 + 40);
  unsigned int v13 = *(_DWORD *)(v7 + 48);
  if (v13 <= 1) {
    unsigned int v13 = 1;
  }
  if (v13 >= 0x800) {
    unsigned int v13 = 2048;
  }
  *(_DWORD *)(a1 + 1728) = v13;
  *(void *)(a1 + 1928) = *(void *)(v7 + 160);
  unsigned int v151 = (void *)v9;
  uint64_t v163 = v7;
  do
  {
    uint64_t v15 = (void *)[v8 _descriptorAtIndex:v11];
    if (!v15) {
      goto LABEL_11;
    }
    uint64_t v16 = [v15 _descriptorPrivate];
    uint64_t v17 = *(void **)v16;
    if (!*(void *)v16) {
      goto LABEL_11;
    }
    uint64_t v18 = v16;
    uint64_t v19 = a1 + v10;
    int64x2_t v20 = *(int64x2_t *)(v16 + 8);
    __int32 v21 = *(_DWORD *)(v16 + 24);
    __int8 v22 = *(unsigned char *)(v7 + 42);
    uint64_t v23 = v17[67];
    if (v23)
    {
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(v23 + 496);
      *(void *)(v19 + 80) = v23;
    }
    else
    {
      *(void *)(v19 + 64) = 0;
      *(void *)(v19 + 72) = 0;
      *(void *)(v19 + 80) = 0;
    }
    uint64_t v24 = (int32x2_t *)(a1 + v10);
    v24[7] = (int32x2_t)v17;
    v24[11] = vrev64_s32(vmovn_s64(v20));
    v24[12].i32[1] = 0;
    v24[13].i32[0] = 0;
    v24[12].i32[0] = v21;
    v24[14].i8[0] = v22;
    if (*(unsigned char *)(a1 + 1851)) {
      LOBYTE(v25) = 1;
    }
    else {
      unint64_t v25 = ((unint64_t)[*(id *)v16 resourceOptions] >> 8) & 1;
    }
    *(unsigned char *)(a1 + 1851) = v25;
    unsigned int v26 = 1 << v11;
    *(_DWORD *)(a1 + 1688) |= 1 << v11;
    int32x2_t v27 = v24[10];
    if (*(void *)(*(void *)&v27 + 48) == 3) {
      *v160 |= v26;
    }
    if (!*(void *)v18)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      int32x2_t v30 = *(int32x2_t *)(v18 + 112);
      if (!*(void *)&v30) {
        goto LABEL_39;
      }
LABEL_29:
      int64x2_t v31 = *(int64x2_t *)(v18 + 120);
      __int32 v32 = *(_DWORD *)(v18 + 136);
      __int8 v33 = *(unsigned char *)(v163 + 42);
      uint64_t v34 = *(void *)(*(void *)&v30 + 536);
      if (v34)
      {
        uint64_t v35 = a1 + v10;
        *(_OWORD *)(v35 + 704) = *(_OWORD *)(v34 + 496);
        *(void *)(v35 + 720) = v34;
      }
      else
      {
        uint64_t v36 = a1 + v10;
        *(void *)(v36 + 720) = 0;
        *(_OWORD *)(v36 + 704) = 0u;
      }
      unsigned __int16 v37 = (int32x2_t *)(a1 + v10);
      v37[87] = v30;
      v37[91] = vrev64_s32(vmovn_s64(v31));
      v37[92].i32[0] = v32;
      *(void *)(a1 + v10 + 740) = 0;
      v37[94].i8[0] = v33;
      if (v25)
      {
        LOBYTE(v38) = 1;
      }
      else
      {
        unint64_t v38 = ((unint64_t)[*(id *)(v18 + 112) resourceOptions] >> 8) & 1;
        int32x2_t v27 = v24[10];
      }
      *(unsigned char *)(a1 + 1851) = v38;
      *(_DWORD *)(a1 + 1696) |= v26;
      if ((v29 & 0xFFFFFFFFFFFFFFFELL) == 2) {
        int v39 = 1 << v11;
      }
      else {
        int v39 = 0;
      }
      *(_DWORD *)(a1 + 1716) |= v39;
      goto LABEL_39;
    }
    uint64_t v28 = *(void *)(v18 + 32);
    if (((*(void *)(v18 + 40) == 2) & (a4 >> 4)) != 0) {
      uint64_t v29 = 3;
    }
    else {
      uint64_t v29 = *(void *)(v18 + 40);
    }
    int32x2_t v30 = *(int32x2_t *)(v18 + 112);
    if (v30) {
      goto LABEL_29;
    }
LABEL_39:
    v40.i64[0] = v29;
    v40.i64[1] = v28;
    v41.i64[0] = v28;
    v41.i64[1] = v29 & 0xFFFFFFFFFFFFFFFDLL;
    int8x16_t v42 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v40, (int64x2_t)xmmword_242EA8050), (int32x4_t)vceqq_s64(v41, vdupq_n_s64(1uLL)));
    int16x4_t v43 = vmovn_s32((int32x4_t)v42);
    *unsigned int v162 = vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(v26), v42), *v162);
    if (v29 == 4) {
      int v44 = 1 << v11;
    }
    else {
      int v44 = 0;
    }
    *(_DWORD *)(a1 + 1720) |= v44;
    uint64_t v45 = *(void *)(*(void *)&v27 + 208);
    *(void *)(a1 + 8 * v11 + 1744) = v45;
    if (v43.i8[2])
    {
      unsigned int v46 = *(_DWORD *)(v45 + 32);
      uint64_t v7 = v163;
      if (v46 <= 0x12)
      {
        int v47 = 1 << v46;
        if ((v47 & 0x40A20) != 0)
        {
          *(_DWORD *)(v19 + 40) = *(double *)(v18 + 56);
          unsigned int v48 = (_DWORD *)(a1 + v10);
          v48[11] = *(double *)(v18 + 64);
          v48[12] = *(double *)(v18 + 72);
          v48[13] = *(double *)(v18 + 80);
LABEL_49:
          double v56 = *(double *)(v18 + 56);
          double v55 = *(double *)(v18 + 64);
          double v57 = *(double *)(v18 + 72);
          double v58 = *(double *)(v18 + 80);
          int32x2_t v12 = v24[10];
          unsigned int v59 = *(_DWORD *)(*(void *)&v12 + 32) - 1;
          int v60 = &texFormatUnsupported;
          if (v59 <= 0x284) {
            int v60 = (uint64_t *)*(&off_26516F8A0 + v59);
          }
          unsigned int v61 = *((_DWORD *)v60 + 16);
          unsigned int v62 = ((v61 >> 6) & 6) - 2;
          unsigned int v63 = ((v61 >> 9) & 6) - 2;
          unsigned int v64 = ((v61 >> 12) & 6) - 6;
          unsigned int v65 = ((v61 >> 15) & 6) - 6;
          BOOL v67 = fabs(v56) >= 0.000001 && v62 < 4;
          if (fabs(v55) >= 0.000001 && v63 < 4) {
            BOOL v67 = 1;
          }
          if (v67
            || (fabs(v58) >= 0.000001 ? (BOOL v80 = v65 >= 0xFFFFFFFC) : (BOOL v80 = 0),
                v80 ? (char v81 = 0) : (char v81 = 1),
                fabs(v57) >= 0.000001 ? (BOOL v82 = v64 >= 0xFFFFFFFC) : (BOOL v82 = 0),
                v82 || (__int16 v76 = v159, (v81 & 1) == 0)))
          {
            BOOL v69 = fabs(v56 + -1.0) < 0.000001 || v62 >= 4;
            BOOL v70 = !v69;
            BOOL v71 = fabs(v55 + -1.0) < 0.000001 || v63 >= 4;
            BOOL v72 = !v71 || v70;
            if (v72
              || (fabs(v58) >= 0.000001 ? (BOOL v83 = v65 >= 0xFFFFFFFC) : (BOOL v83 = 0),
                  v83 ? (char v84 = 0) : (char v84 = 1),
                  fabs(v57 + -1.0) >= 0.000001 ? (BOOL v85 = v64 >= 0xFFFFFFFC) : (BOOL v85 = 0),
                  v85 || (__int16 v76 = (void *)(a1 + 24), (v84 & 1) == 0)))
            {
              if (v67
                || (fabs(v58 + -1.0) >= 0.000001 ? (BOOL v73 = v65 >= 0xFFFFFFFC) : (BOOL v73 = 0),
                    v73 ? (char v74 = 0) : (char v74 = 1),
                    fabs(v57) >= 0.000001 ? (BOOL v75 = v64 >= 0xFFFFFFFC) : (BOOL v75 = 0),
                    v75 || (__int16 v76 = (void *)a1, (v74 & 1) == 0)))
              {
                if (v72
                  || (fabs(v58 + -1.0) >= 0.000001 ? (BOOL v77 = v65 >= 0xFFFFFFFC) : (BOOL v77 = 0),
                      v77 ? (char v78 = 0) : (char v78 = 1),
                      fabs(v57 + -1.0) >= 0.000001 ? (BOOL v79 = v64 >= 0xFFFFFFFC) : (BOOL v79 = 0),
                      v79 || (__int16 v76 = (void *)(a1 + 8), (v78 & 1) == 0)))
                {
                  __int16 v76 = v158;
                }
              }
            }
          }
          ++*v76;
          goto LABEL_7;
        }
        if ((v47 & 0x510) != 0)
        {
          *(_DWORD *)(v19 + 40) = (int)*(double *)(v18 + 56);
          int v49 = (_DWORD *)(a1 + v10);
          v49[11] = (int)*(double *)(v18 + 64);
          v49[12] = (int)*(double *)(v18 + 72);
          v49[13] = (int)*(double *)(v18 + 80);
          goto LABEL_49;
        }
      }
      float v50 = *(double *)(v18 + 56);
      *(float *)(v19 + 40) = v50;
      float v51 = *(double *)(v18 + 64);
      uint64_t v52 = (float *)(a1 + v10);
      v52[11] = v51;
      float v53 = *(double *)(v18 + 72);
      v52[12] = v53;
      float v54 = *(double *)(v18 + 80);
      v52[13] = v54;
      goto LABEL_49;
    }
    int32x2_t v12 = v24[10];
    uint64_t v7 = v163;
LABEL_7:
    if (*(unsigned char *)(v18 + 168)) {
      int v14 = 1 << v11;
    }
    else {
      int v14 = 0;
    }
    *(_DWORD *)(a1 + 1844) |= v14;
LABEL_11:
    ++v11;
    v10 += 80;
  }
  while (v10 != 640);
  if (a3 < 0xA0000)
  {
    int v86 = *(_DWORD *)(a1 + 1700);
    if (v86 == *(unsigned __int8 *)(a1 + 1688))
    {
      int v87 = v86 & -v86;
      *(_DWORD *)(a1 + 1700) ^= v87;
      *(_DWORD *)(a1 + 1712) |= v87;
    }
  }
  if (v152)
  {
    uint64_t v88 = [v152 _descriptorPrivate];
    uint64_t v89 = v88;
    BOOL v90 = *(void **)v88;
    if (*(void *)v88)
    {
      unint64_t v91 = *(void *)(v88 + 32);
      if (((*(void *)(v88 + 40) == 2) & (a4 >> 4)) != 0) {
        uint64_t v92 = 3;
      }
      else {
        uint64_t v92 = *(void *)(v88 + 40);
      }
      int v93 = *(_DWORD *)(v88 + 16);
      int v94 = *(_DWORD *)(v88 + 8);
      int v95 = *(_DWORD *)(v88 + 24);
      uint64_t v96 = v90[67];
      if (v96)
      {
        long long v97 = *(_OWORD *)(v96 + 496);
        *(void *)(a1 + 1336) = v90;
        *(_OWORD *)(a1 + 1344) = v97;
        *(void *)(a1 + 1360) = v96;
        goto LABEL_139;
      }
    }
    else
    {
      uint64_t v92 = 0;
      unint64_t v91 = 0;
      int v93 = *(_DWORD *)(v88 + 16);
      int v94 = *(_DWORD *)(v88 + 8);
      int v95 = *(_DWORD *)(v88 + 24);
    }
    *(void *)(a1 + 1336) = v90;
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1360) = 0;
    *(void *)(a1 + 1352) = 0;
LABEL_139:
    *(_DWORD *)(a1 + 1368) = v93;
    *(_DWORD *)(a1 + 1372) = v94;
    *(_DWORD *)(a1 + 1376) = v95;
    *(void *)(a1 + 1380) = 0;
    *(unsigned char *)(a1 + 1392) = 0;
    if (*(unsigned char *)(a1 + 1851)) {
      LOBYTE(v100) = 1;
    }
    else {
      unint64_t v100 = ((unint64_t)[*(id *)v88 resourceOptions] >> 8) & 1;
    }
    *(unsigned char *)(a1 + 1851) = v100;
    int v98 = *(_DWORD *)(v89 + 144) + 1;
    double v101 = *(double *)(v89 + 88);
    if (a3 >= 0xD0000)
    {
      double v102 = 0.0;
      BOOL v99 = v151;
      if (v101 < 0.0) {
        goto LABEL_149;
      }
      double v102 = 1.0;
      if (v101 > 1.0) {
        goto LABEL_149;
      }
LABEL_148:
      double v102 = *(double *)(v89 + 88);
      goto LABEL_149;
    }
    double v102 = -3.40282347e38;
    BOOL v99 = v151;
    if (v101 >= -3.40282347e38)
    {
      double v102 = 3.40282347e38;
      if (v101 <= 3.40282347e38) {
        goto LABEL_148;
      }
    }
LABEL_149:
    float v103 = v102;
    *(float *)(a1 + 1320) = v103;
    *(_DWORD *)(a1 + 1688) |= 0x100u;
    uint64_t v104 = *(void *)(v89 + 112);
    if (v104)
    {
      *(_DWORD *)(a1 + 1696) |= 0x100u;
      int v105 = *(_DWORD *)(v89 + 128);
      int v106 = *(_DWORD *)(v89 + 120);
      int v107 = *(_DWORD *)(v89 + 136);
      uint64_t v108 = *(void *)(v104 + 536);
      if (v108)
      {
        *(_OWORD *)(a1 + 1424) = *(_OWORD *)(v108 + 496);
        *(void *)(a1 + 1440) = v108;
      }
      else
      {
        *(void *)(a1 + 1432) = 0;
        *(void *)(a1 + 1424) = 0;
        *(void *)(a1 + 1440) = 0;
      }
      *(void *)(a1 + 1416) = v104;
      *(_DWORD *)(a1 + 1448) = v105;
      *(_DWORD *)(a1 + 1452) = v106;
      *(_DWORD *)(a1 + 1456) = v107;
      *(_DWORD *)(a1 + 1460) = v98;
      *(_DWORD *)(a1 + 1464) = 0;
      *(unsigned char *)(a1 + 1472) = 0;
      if (v100) {
        LOBYTE(v109) = 1;
      }
      else {
        unint64_t v109 = ((unint64_t)[*(id *)(v89 + 112) resourceOptions] >> 8) & 1;
      }
      *(unsigned char *)(a1 + 1851) = v109;
    }
    *(_DWORD *)(a1 + 1700) |= (v92 == 0) << 8;
    *(int8x8_t *)(a1 + 1704) = vorr_s8(*(int8x8_t *)(a1 + 1704), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v91), (int64x2_t)xmmword_242EA8060)), (int8x8_t)0x10000000100));
    v110.i64[0] = v92 & 0xFFFFFFFFFFFFFFFBLL;
    v110.i64[1] = v92;
    *(int8x8_t *)(a1 + 1712) = vorr_s8(vorr_s8(*(int8x8_t *)(a1 + 1712), (int8x8_t)vdup_n_s32((v92 == 3) << 8)), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(v110, (int64x2_t)xmmword_242EA8070)), (int8x8_t)0x10000000100));
    *(_DWORD *)(a1 + 1720) |= (v92 == 4) << 8;
    if (v99)
    {
LABEL_158:
      uint64_t v111 = [v99 _descriptorPrivate];
      uint64_t v112 = v111;
      v113 = *(void **)v111;
      if (*(void *)v111)
      {
        unint64_t v114 = *(void *)(v111 + 32);
        if (((*(void *)(v111 + 40) == 2) & (a4 >> 4)) != 0) {
          unint64_t v115 = 3;
        }
        else {
          unint64_t v115 = *(void *)(v111 + 40);
        }
        int v116 = *(_DWORD *)(v111 + 16);
        int v117 = *(_DWORD *)(v111 + 8);
        int v118 = *(_DWORD *)(v111 + 24);
        uint64_t v119 = v113[67];
        if (v119)
        {
          long long v120 = *(_OWORD *)(v119 + 496);
          *(void *)(a1 + 1496) = v113;
          *(_OWORD *)(a1 + 1504) = v120;
          *(void *)(a1 + 1520) = v119;
          goto LABEL_166;
        }
      }
      else
      {
        unint64_t v115 = 0;
        unint64_t v114 = 0;
        int v116 = *(_DWORD *)(v111 + 16);
        int v117 = *(_DWORD *)(v111 + 8);
        int v118 = *(_DWORD *)(v111 + 24);
      }
      *(void *)(a1 + 1496) = v113;
      *(void *)(a1 + 1504) = 0;
      *(void *)(a1 + 1520) = 0;
      *(void *)(a1 + 1512) = 0;
LABEL_166:
      *(_DWORD *)(a1 + 1528) = v116;
      *(_DWORD *)(a1 + 1532) = v117;
      *(_DWORD *)(a1 + 1536) = v118;
      *(void *)(a1 + 1540) = 0;
      *(unsigned char *)(a1 + 1552) = 0;
      if (*(unsigned char *)(a1 + 1851)) {
        LOBYTE(v121) = 1;
      }
      else {
        unint64_t v121 = ((unint64_t)[*(id *)v111 resourceOptions] >> 8) & 1;
      }
      *(unsigned char *)(a1 + 1851) = v121;
      *(_DWORD *)(a1 + 1480) = *(_DWORD *)(v112 + 96);
      *(_DWORD *)(a1 + 1688) |= 0x200u;
      uint64_t v122 = *(void *)(v112 + 112);
      if (v122)
      {
        *(_DWORD *)(a1 + 1696) |= 0x200u;
        if (v98)
        {
          int v123 = *(_DWORD *)(v112 + 104) + 1;
          uint64_t v125 = *(void *)(v112 + 120);
          uint64_t v124 = *(void *)(v112 + 128);
          uint64_t v126 = *(void *)(v112 + 136);
          uint64_t v127 = *(void *)(v122 + 536);
          if (v127)
          {
            *(_OWORD *)(a1 + 1584) = *(_OWORD *)(v127 + 496);
            *(void *)(a1 + 1600) = v127;
            goto LABEL_178;
          }
          *(void *)(a1 + 1592) = 0;
          *(void *)(a1 + 1584) = 0;
LABEL_177:
          *(void *)(a1 + 1600) = 0;
        }
        else
        {
          uint64_t v125 = *(void *)(v112 + 120);
          uint64_t v124 = *(void *)(v112 + 128);
          uint64_t v126 = *(void *)(v112 + 136);
          uint64_t v128 = *(void *)(v122 + 536);
          if (!v128)
          {
            *(void *)(a1 + 1592) = 0;
            *(void *)(a1 + 1584) = 0;
            int v123 = 1;
            goto LABEL_177;
          }
          *(_OWORD *)(a1 + 1584) = *(_OWORD *)(v128 + 496);
          *(void *)(a1 + 1600) = v128;
          int v123 = 1;
        }
LABEL_178:
        *(void *)(a1 + 1576) = v122;
        *(_DWORD *)(a1 + 1608) = v124;
        *(_DWORD *)(a1 + 1612) = v125;
        *(_DWORD *)(a1 + 1616) = v126;
        *(_DWORD *)(a1 + 1620) = v98;
        *(_DWORD *)(a1 + 1624) = v123;
        *(unsigned char *)(a1 + 1632) = 0;
        if (v121) {
          LOBYTE(v129) = 1;
        }
        else {
          unint64_t v129 = ((unint64_t)[*(id *)(v112 + 112) resourceOptions] >> 8) & 1;
        }
        *(unsigned char *)(a1 + 1851) = v129;
      }
      *(_DWORD *)(a1 + 1700) |= (v115 == 0) << 9;
      *(int8x8_t *)(a1 + 1704) = vorr_s8(*(int8x8_t *)(a1 + 1704), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v114), (int64x2_t)xmmword_242EA8060)), (int8x8_t)0x20000000200));
      *(int8x8_t *)(a1 + 1712) = vorr_s8(vorr_s8(*(int8x8_t *)(a1 + 1712), (int8x8_t)vdup_n_s32((v115 == 3) << 9)), vand_s8((int8x8_t)vmovn_s64(vceqq_s64(vdupq_n_s64(v115), (int64x2_t)xmmword_242EA8070)), (int8x8_t)0x20000000200));
      *(_DWORD *)(a1 + 1720) |= (v115 == 4) << 9;
    }
  }
  else
  {
    int v98 = 0;
    BOOL v99 = v151;
    if (v151) {
      goto LABEL_158;
    }
  }
  uint64_t v130 = *(void *)(a1 + 1360);
  if (!v130) {
    uint64_t v130 = *(void *)(a1 + 1520);
  }
  unsigned int v131 = *(unsigned __int8 *)(v7 + 72);
  if (v12)
  {
    unsigned int v132 = *(unsigned __int8 *)(*(void *)&v12 + 112);
    *unsigned int v154 = v132;
    if (v130) {
      goto LABEL_187;
    }
  }
  else
  {
    unsigned int v132 = *(unsigned __int8 *)(v7 + 32);
    if (!*(unsigned char *)(v7 + 32)) {
      unsigned int v132 = *(unsigned __int8 *)(v7 + 72);
    }
    *unsigned int v154 = v132;
    if (v130) {
LABEL_187:
    }
      unsigned int v131 = *(unsigned __int8 *)(v130 + 112);
  }
  *unsigned int v155 = v131;
  if (!v131 || !v132)
  {
    if (v131 >= v132) {
      uint64_t v133 = v155;
    }
    else {
      uint64_t v133 = v154;
    }
    char v134 = *v133;
    *unsigned int v155 = v134;
    *unsigned int v154 = v134;
  }
  if (*(void *)([v157 _descriptorPrivate] + 128))
  {
    *(unsigned char *)(a1 + 1860) = 1;
    memcpy((void *)(a1 + 1864), (const void *)([v157 _descriptorPrivate] + 96), 8 * *(unsigned __int8 *)(a1 + 1732));
  }
  uint64_t v135 = *(void *)(a1 + 1360);
  if (v135)
  {
    unsigned int v136 = *(_DWORD *)(v135 + 236) ? 0 : *(_DWORD *)(a1 + 1372);
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v135, *(_DWORD *)(a1 + 1368), v136, 0, 0);
    uint64_t v137 = *(void *)(a1 + 1360);
    unint64_t v138 = *(void *)(v137 + 32) - 250;
    int v139 = v138 > 0xB ? 3 : dword_242EB2FA4[v138];
    v162[9].i32[2] = v139;
    if (*(void *)(v137 + 48) == 3) {
      *v160 |= 0x100u;
    }
  }
  uint64_t v140 = *(void *)(a1 + 1520);
  if (v140)
  {
    unsigned int v141 = *(_DWORD *)(v140 + 236) ? 0 : *(_DWORD *)(a1 + 1532);
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v140, *(_DWORD *)(a1 + 1528), v141, *(_DWORD *)(a1 + 1536), *(_DWORD *)(*(void *)(v140 + 208) + 24) - 1);
    uint64_t v142 = *(void *)(a1 + 1520);
    unint64_t v143 = *(void *)(v142 + 32) - 250;
    int v144 = v143 > 0xB ? 3 : dword_242EB2FA4[v143];
    *(_DWORD *)(a1 + 1856) = v144;
    if (*(void *)(v142 + 48) == 3) {
      *v160 |= 0x200u;
    }
  }
  if (a4 && !*(unsigned char *)(a1 + 1848))
  {
    int v145 = *(_DWORD *)(a1 + 1700);
    int v146 = *(_DWORD *)(a1 + 1840);
    *(_DWORD *)(a1 + 1720) |= v145 & ~v146;
    *(_DWORD *)(a1 + 1700) = v146 & v145;
  }
  *(void *)(a1 + 1640) = *(void *)(v7 + 8);
  *(_OWORD *)(a1 + 1936) = 0u;
  uint64_t v147 = [v157 _descriptorPrivate];
  int64x2_t v148 = *(int64x2_t *)(v147 + 80);
  *(int32x4_t *)(a1 + 1936) = vuzp1q_s32(*(int32x4_t *)(v147 + 56), (int32x4_t)v148);
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState(v156, vmovn_s64(v148).u32[0]);
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1952) = objc_msgSend((id)objc_msgSend(v157, "rasterizationRateMap"), "getImpl");
  bzero((void *)(a1 + 1960), 0x100uLL);
  uint64_t v149 = *(void *)(a1 + 1952);
  if (v149 && *(_DWORD *)(v149 + 16) >= 2u) {
    *(unsigned char *)(a1 + 1960) |= 2u;
  }
  return a1;
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(uint64_t a1, atomic_ullong *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  uint64_t v12 = a1 + 4760;
  *(void *)(a1 + 400) = a2;
  uint64_t v13 = a1 + 4456;
  *(void *)(a1 + 440) = 0;
  uint64_t v14 = a4 + 1700;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  uint64_t v461 = a1 + 408;
  *(_OWORD *)(a1 + 448) = xmmword_242EA7390;
  *(void *)(a1 + 464) = 0xDEADBEEFBAADC0DELL;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  bzero((void *)(a1 + 880), 0x45AuLL);
  *(unsigned char *)(a1 + 1994) = (*(_DWORD *)(a4 + 1696) & 0x3FF) != 0;
  uint64_t v444 = a1 + 2000;
  bzero((void *)(a1 + 2000), 0x240uLL);
  *(_DWORD *)(a1 + 2576) = a5;
  *(_DWORD *)(a1 + 2580) = a6;
  uint64_t v15 = *(unsigned __int8 *)(a4 + 1732);
  *(_DWORD *)(a1 + 2584) = v15;
  unsigned int v452 = *(unsigned __int8 *)(a4 + 1733);
  *(_DWORD *)(a1 + 2588) = v452;
  bzero((void *)(a1 + 2656), 0x328uLL);
  *(void *)(a1 + 3464) = -1;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3568) = 0u;
  *(_OWORD *)(a1 + 3584) = 0u;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(_OWORD *)(a1 + 3616) = 0u;
  *(_OWORD *)(a1 + 3632) = 0u;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(_OWORD *)(a1 + 3696) = 0u;
  *(_OWORD *)(a1 + 3712) = 0u;
  *(_OWORD *)(a1 + 3728) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3808) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(void *)(a1 + 3888) = 0;
  *(unsigned char *)(a1 + 3904) = 0;
  *(unsigned char *)(a1 + 3906) = *(unsigned char *)(a4 + 1850);
  *(_DWORD *)(a1 + 3912) = *(_DWORD *)(a4 + 1728);
  *(void *)(a1 + 3920) = *(void *)(a4 + 1640);
  *(void *)(a1 + 3928) = 1065353216;
  *(unsigned char *)(a1 + 3936) = 0;
  *(void *)(a1 + 3940) = 0;
  *(_DWORD *)(a1 + 3956) = *(unsigned __int8 *)(a4 + 1688);
  *(_DWORD *)(a1 + 3960) = *(unsigned __int8 *)(a4 + 1696);
  *(unsigned char *)(a1 + 3964) = 0;
  *(unsigned char *)(a1 + 3966) = *(unsigned char *)(a4 + 1851);
  *(unsigned char *)(a1 + 3968) = 0;
  *(_DWORD *)(a1 + 3976) = 0;
  *(_DWORD *)(a1 + 4368) = 0;
  *(_WORD *)(a1 + 4372) = 0;
  *(_DWORD *)(a1 + 4376) = 0;
  *(_WORD *)(a1 + 4380) = 0;
  *(_DWORD *)(a1 + 4424) = 13;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(void *)(a1 + 4432) = 0;
  uint64_t v438 = (void **)(a1 + 4416);
  *(void *)(a1 + 4416) = &unk_26F852AF8;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_DWORD *)(a1 + 4512) = 13;
  *(_OWORD *)(a1 + 4520) = 0u;
  long long v435 = (void *)(a1 + 4520);
  *(void *)(a1 + 4536) = 0;
  *(void *)(a1 + 4504) = &unk_26F852AF8;
  *(_OWORD *)(a1 + 4576) = 0u;
  *(_OWORD *)(a1 + 4560) = 0u;
  *(_OWORD *)(a1 + 4544) = 0u;
  *(_DWORD *)(a1 + 4600) = 19;
  *(void *)(a1 + 4624) = 0;
  *(_OWORD *)(a1 + 4608) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  uint64_t v439 = v13 + 176;
  *(void *)(a1 + 4592) = &unk_26F853C08;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 208) = 0u;
  *(_OWORD *)(v13 + 224) = 0u;
  *(_OWORD *)(v13 + 240) = 0u;
  uint64_t v442 = (int8x16_t *)v13;
  *(void *)(v13 + 254) = 0;
  *(_DWORD *)(a1 + 4728) = 19;
  *(void *)(a1 + 4752) = 0;
  *(_OWORD *)(a1 + 4736) = 0u;
  uint64_t v437 = (void **)(a1 + 4720);
  *(void *)(a1 + 4720) = &unk_26F853C08;
  *(void *)(v12 + 78) = 0;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  uint64_t v440 = v12;
  *(_OWORD *)uint64_t v12 = 0u;
  *(void *)(a1 + 4880) = 0;
  v16.i64[0] = 0x300000003;
  v16.i64[1] = 0x300000003;
  int8x16_t v17 = vandq_s8(*(int8x16_t *)v14, v16);
  *(int8x16_t *)(a1 + 4896) = vextq_s8(v17, v17, 4uLL);
  *(int8x8_t *)(a1 + 4912) = vand_s8(*(int8x8_t *)(v14 + 16), (int8x8_t)0x300000003);
  *(_DWORD *)(a1 + 4920) = *(unsigned __int8 *)(a4 + 1692);
  int v18 = *(_DWORD *)(a4 + 1840) & 0x3FF;
  *(_DWORD *)(a1 + 4924) = v18;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  unsigned int v473 = (char *)a1;
  *(_OWORD *)(a1 + 5024) = 0u;
  *(_OWORD *)(a1 + 5036) = 0u;
  uint64_t v467 = a4;
  if (*(unsigned char *)(a4 + 1860))
  {
    uint64_t v19 = (uint64_t *)(a4 + 1864);
    goto LABEL_11;
  }
  if (*(unsigned char *)(a4 + 1848))
  {
    if ((*(unsigned char *)(a4 + 1732) - 2) < 7u)
    {
      uint64_t v20 = (*(unsigned char *)(a4 + 1732) - 2);
      __int32 v21 = &off_26516F3A0;
LABEL_8:
      uint64_t v19 = (uint64_t *)v21[v20];
      goto LABEL_11;
    }
    uint64_t v19 = &msaa_agx_offsets_1;
  }
  else
  {
    if ((*(unsigned char *)(a4 + 1732) - 2) < 7u)
    {
      uint64_t v20 = (*(unsigned char *)(a4 + 1732) - 2);
      __int32 v21 = &off_26516F368;
      goto LABEL_8;
    }
    uint64_t v19 = &msaa_metal_offsets_1;
  }
LABEL_11:
  if (v15)
  {
    if (v15 > 7)
    {
      uint64_t v22 = v15 & 0xF8;
      uint64_t v23 = (float *)(a1 + 2624);
      uint64_t v24 = (const float *)(v19 + 4);
      __asm { FMOV            V0.4S, #16.0 }
      uint64_t v29 = v22;
      do
      {
        int32x2_t v30 = v24 - 8;
        float32x4x2_t v508 = vld2q_f32(v30);
        float32x4x2_t v509 = vld2q_f32(v24);
        v31.i64[0] = 0x3F0000003F000000;
        v31.i64[1] = 0x3F0000003F000000;
        v32.i64[0] = 0x3F0000003F000000;
        v32.i64[1] = 0x3F0000003F000000;
        v510.val[0] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v31, _Q0, v508.val[0]));
        v31.i64[0] = 0x3F0000003F000000;
        v31.i64[1] = 0x3F0000003F000000;
        v510.val[1] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v31, _Q0, v508.val[1]));
        v508.val[0] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v32, _Q0, v509.val[0]));
        v31.i64[0] = 0x3F0000003F000000;
        v31.i64[1] = 0x3F0000003F000000;
        __int8 v33 = v23 - 8;
        vst2q_f32(v33, v510);
        v508.val[1] = (float32x4_t)vcvtq_u32_f32(vmlaq_f32(v31, _Q0, v509.val[1]));
        vst2q_f32(v23, v508);
        v23 += 16;
        v24 += 16;
        v29 -= 8;
      }
      while (v29);
      if (v22 == v15) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v34 = v15 - v22;
    uint64_t v35 = v22;
    uint64_t v36 = (uint32x2_t *)(8 * v22 + a1 + 2592);
    unsigned __int16 v37 = (float32x2_t *)&v19[v35];
    __asm { FMOV            V0.2S, #16.0 }
    do
    {
      float32x2_t v39 = *v37++;
      *v36++ = vcvt_u32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, _D0, v39));
      --v34;
    }
    while (v34);
  }
LABEL_19:
  *(unsigned char *)(a1 + 3896) = *(unsigned char *)(a4 + 1704) != 0;
  long long v40 = *(_OWORD *)(a4 + 1648);
  long long v41 = *(_OWORD *)(a4 + 1664);
  *(void *)(v461 + 32) = *(void *)(a4 + 1680);
  *(_OWORD *)uint64_t v461 = v40;
  *(_OWORD *)(v461 + 16) = v41;
  *(unsigned char *)(a1 + 3965) = v18 != 0;
  *(_DWORD *)(a1 + 3972) = *(_DWORD *)(a4 + 1844) & 0x3FF;
  int v42 = *(unsigned __int8 *)(a4 + 1848);
  *(unsigned char *)(a1 + 3907) = v42;
  if (v42)
  {
    LOBYTE(v43) = 0;
  }
  else
  {
    BOOL v43 = *(_DWORD *)(a2[101] + 7764) >> 18 > 2u;
    int v18 = *(_DWORD *)(a1 + 4924);
  }
  long long v433 = (void *)(a1 + 4608);
  long long v434 = (void *)(a1 + 4736);
  *(unsigned char *)(a1 + 3908) = v43;
  unint64_t v44 = 74;
  if (!*(unsigned char *)(a4 + 1860)) {
    unint64_t v44 = 0;
  }
  *(void *)(a1 + 5056 + ((v44 >> 3) & 8)) |= 1 << (v44 & 0x3E);
  uint64_t v45 = 0x80000000000000;
  if ((v18 & 0x300) == 0) {
    uint64_t v45 = 1;
  }
  _ZF = v18 == 0;
  uint64_t v46 = 0x40000000000000;
  if (_ZF) {
    uint64_t v46 = 1;
  }
  *(void *)(a1 + 5056) |= v45 | v46;
  {
    AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled = *(unsigned char *)(a2[101] + 7805);
  }
  *(void *)(a1 + 3424) = *(void *)(*(void *)(*(void *)(a1 + 400) + 808) + 7280);
  atomic_fetch_add(a2 + 118, *(void *)a4);
  atomic_fetch_add(a2 + 119, *(void *)(a4 + 8));
  atomic_fetch_add(a2 + 120, *(void *)(a4 + 16));
  atomic_fetch_add(a2 + 121, *(void *)(a4 + 24));
  atomic_fetch_add(a2 + 122, *(void *)(a4 + 32));
  if (*(_DWORD *)(a1 + 3956))
  {
    unsigned int v47 = *(_DWORD *)(a1 + 3956);
    unsigned __int16 __src = 0;
    int v462 = 0;
    uint64_t v445 = 0;
    uint64_t v450 = a4 + 1648;
    uint64_t v443 = a1 + 2240;
    while (1)
    {
      unsigned int v456 = v47;
      uint64_t v48 = __clz(__rbit32(v47));
      uint64_t v49 = v467 + 80 * v48;
      uint64_t v50 = (3 * v48);
      *(void *)(v444 + 8 * v50) = *(void *)(v49 + 56);
      uint64_t v448 = (v50 + 1);
      *(void *)(v444 + 8 * v448) = *(void *)(v49 + 64);
      uint64_t v446 = (v50 + 2);
      *(void *)(v444 + 8 * v446) = *(void *)(v49 + 72);
      int v51 = *(unsigned __int8 *)(v49 + 112);
      int v468 = 1 << v48;
      if (*(unsigned char *)(v49 + 112)) {
        *(_DWORD *)(a1 + 3976) |= v468;
      }
      uint64_t v52 = v467 + 80 * v48;
      uint64_t v54 = *(void *)(v52 + 80);
      float v53 = (uint64_t *)(v52 + 80);
      int v55 = *(_DWORD *)(a1 + 3972);
      *(void *)(a1 + 8 * v48 + 2432) = v54;
      uint64_t v465 = v54;
      switch(*(void *)(v54 + 32))
      {
        case 0xF0:
        case 0xF1:
        case 0x1F4:
        case 0x1F5:
        case 0x1F6:
        case 0x1F9:
        case 0x1FALL:
        case 0x1FCLL:
        case 0x1FDLL:
        case 0x208:
        case 0x209:
        case 0x20ALL:
        case 0x20DLL:
        case 0x20ELL:
        case 0x210:
        case 0x211:
        case 0x21CLL:
        case 0x21DLL:
        case 0x21FLL:
        case 0x220:
        case 0x222:
        case 0x223:
        case 0x232:
        case 0x234:
        case 0x235:
        case 0x23ALL:
        case 0x23BLL:
        case 0x23DLL:
        case 0x23ELL:
        case 0x24CLL:
        case 0x24DLL:
        case 0x24FLL:
        case 0x250:
        case 0x252:
        case 0x253:
        case 0x255:
        case 0x256:
        case 0x258:
        case 0x259:
        case 0x283:
        case 0x285:
          *(unsigned char *)(a1 + 3965) = 1;
          break;
        default:
          break;
      }
      int v56 = v55 & v468;
      uint64_t v57 = v467 + 80 * v48;
      unsigned int v59 = *(_DWORD *)(v57 + 88);
      double v58 = (unsigned int *)(v57 + 88);
      AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::configurePBE(a1, *v53, v58[2], v58[1], v59, v450, v450 + 4 * v48, v48, 0, v51 != 0, (v55 & v468) != 0, (*(_DWORD *)(a1 + 4920) & v468) != 0);
      int v60 = (_WORD *)(a1 + 6 * v48);
      v60[2473] = *v58;
      v60[2472] = v58[1];
      unsigned __int16 v453 = v58 + 2;
      v60[2474] = v58[2];
      if ((*(_DWORD *)(a1 + 3960) & v468) != 0)
      {
        _ZF = v56 == 0;
        uint64_t v61 = v467 + 80 * v48;
        *(void *)(v443 + 8 * v50) = *(void *)(v61 + 696);
        *(void *)(v443 + 8 * v448) = *(void *)(v61 + 704);
        *(void *)(v443 + 8 * v446) = *(void *)(v61 + 712);
        char v62 = !_ZF;
        *(void *)(a1 + 8 * v48 + 2512) = *(void *)(v61 + 720);
        AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::configurePBE(a1, *(void *)(v61 + 720), *(_DWORD *)(v61 + 736), *(_DWORD *)(v61 + 732), *(_DWORD *)(v61 + 728), v450, v450 + 4 * v48, v48, 1, *(unsigned char *)(v61 + 752), v62, (*(_DWORD *)(a1 + 4920) & v468) != 0);
        unsigned int v63 = (_WORD *)(a1 + 6 * v48);
        v63[2497] = *(_DWORD *)(v61 + 728);
        v63[2496] = *(_DWORD *)(v61 + 732);
        v63[2498] = *(_DWORD *)(v61 + 736);
      }
      *(_OWORD *)(a1 + 16 * v48 + 3472) = *(_OWORD *)(v49 + 40);
      unsigned int v64 = v58[1];
      uint64_t v65 = *(void *)(v465 + 380);
      int v66 = *(_DWORD *)(v465 + 376);
      unint64_t v67 = *(void *)(v465 + 408);
      unint64_t v68 = *(void *)(v465 + 416);
      unint64_t v69 = *(void *)(v465 + 424);
      int v70 = *(_DWORD *)(v465 + 192);
      unsigned int v71 = *(_DWORD *)(v465 + 128);
      if (*(void *)(v465 + 24) == 9)
      {
        if (v71 >= 0x4000) {
          LOWORD(v72) = 0x4000;
        }
        else {
          LOWORD(v72) = *(_DWORD *)(v465 + 128);
        }
        unsigned int v73 = (v71 + 0x3FFF) >> 14;
        LOWORD(v74) = 1;
      }
      else
      {
        unsigned int v73 = *(_DWORD *)(v465 + 132);
        int v74 = *(_DWORD *)(v465 + 136);
        int v72 = *(_DWORD *)(v465 + 128);
      }
      if ((*(void *)(v465 + 380) & 0xFF00) == 0x400)
      {
        LOWORD(v66) = 6 * v66;
        LODWORD(v65) = v65 & 0xFF0000FF | 0x10200;
      }
      _ZF = v70 == 4 || (v70 & 0xFFFFFFFD) == 1;
      int v76 = _ZF;
      if ((_BYTE)v65) {
        BOOL v77 = BYTE1(v65) == 1;
      }
      else {
        BOOL v77 = 0;
      }
      if (v77)
      {
        if (BYTE2(v65) && (v65 & 0x10000) != 0)
        {
          uint64_t v80 = 1;
          goto LABEL_91;
        }
        goto LABEL_72;
      }
      int v78 = BYTE2(v65) & 3;
      if (BYTE1(v65) == 2 && v78 == 0)
      {
        uint64_t v80 = 2;
        goto LABEL_91;
      }
      if (!(_BYTE)v65) {
        break;
      }
      if (BYTE1(v65) != 2)
      {
        if (BYTE1(v65) == 3)
        {
          uint64_t v80 = 5;
          if (BYTE2(v65)) {
            uint64_t v80 = 0;
          }
          goto LABEL_91;
        }
        if (BYTE1(v65) == 4)
        {
          if (!BYTE2(v65))
          {
            uint64_t v80 = 6;
            goto LABEL_91;
          }
          if ((v65 & 0x10000) != 0)
          {
            uint64_t v80 = 7;
            goto LABEL_91;
          }
        }
        goto LABEL_72;
      }
      if (v78 != 3)
      {
        if ((v65 & 0x10000) != 0) {
          goto LABEL_86;
        }
        if ((v65 & 0x20000) != 0)
        {
          uint64_t v80 = 4;
          goto LABEL_91;
        }
        goto LABEL_72;
      }
      uint64_t v80 = 8;
LABEL_91:
      BOOL v81 = v76 == 0;
      if (v76) {
        __int16 v82 = v73;
      }
      else {
        __int16 v82 = v72;
      }
      if (!v81) {
        LOWORD(v73) = v72;
      }
      unint64_t v83 = *(void *)(v465 + 400) & 0xFF0000000FFFFFF0 | v80 | ((unint64_t)(((_WORD)v73 - 1) & 0x3FFF) << 42) | ((unint64_t)((v82 - 1) & 0x3FFF) << 28);
      if ((_BYTE)v65 && v65 != 3)
      {
        unint64_t v83 = *(void *)(v465 + 400) & 0xFB0000000FFFFFF0 | v80 & 0xFBFFFFFFFFFFFFFFLL | (((unint64_t)(((_WORD)v73 - 1) & 0x3FFF) << 42) | ((unint64_t)((v82 - 1) & 0x3FFF) << 28)) & 0xFBFFFFFFFFFFFFFFLL;
        if ((v65 & 0x10000) != 0) {
          LOWORD(v74) = v66;
        }
        unint64_t v67 = v67 & 0xC0003FFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v74 - 1) << 46);
      }
      else if ((*(void *)(v465 + 400) & 0x30 | v80 & 0x3F) == 3)
      {
        unint64_t v68 = v68 & 0xFFFFFFFFFFFFF800 | ((_WORD)v66 - 1) & 0x7FF;
      }
      unint64_t v84 = v67 & 0xFFFFF00000000000 | ((unint64_t)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v465, 0, 0, 0, 0) >> 4) & 0xFFFFFFFFFFFLL;
      if (*(_DWORD *)(v465 + 64) < 2u)
      {
        unint64_t v85 = v83 & 0xFBFFFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v85 = v83 | 0x400000000000000;
        unint64_t v68 = v68 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(v465 + 144) + v64) & 0xF | (16 * ((*(_DWORD *)(v465 + 144) + v64) & 0xF))) << 44);
        v84 |= 0x8000000000000000;
      }
      int v86 = (unint64_t *)(a1 + 2656 + 32 * v48);
      *int v86 = v85;
      v86[1] = v84;
      v86[2] = v68;
      v86[3] = v69;
      uint64_t v87 = *(unsigned int *)(v465 + 192);
      uint64_t v88 = (float *)(a1 + 24 * v48 + 3600);
      if (v87 == 4)
      {
        *(_OWORD *)uint64_t v88 = xmmword_242EA8080;
        *(_DWORD *)(a1 + 24 * v48 + 3616) = 0;
        float v89 = 1.0;
        float v90 = 0.0;
        float v91 = 0.0;
        float v92 = 0.0;
      }
      else
      {
        float v91 = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[v87];
        *uint64_t v88 = v91;
        *(float *)(a1 + 24 * v48 + 3604) = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[(v87 - 1) & 3];
        float v89 = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::rotation_elements[((_BYTE)v87 + 1) & 3];
        *(float *)(a1 + 24 * v48 + 3608) = v89;
        *(float *)(a1 + 24 * v48 + 3612) = v91;
        float v90 = 0.0;
        float v92 = 0.0;
        if ((v87 - 1) <= 1)
        {
          int v93 = (unsigned int *)(a1 + 2580);
          if (v87 != 1) {
            int v93 = (unsigned int *)(a1 + 2576);
          }
          float v92 = (float)*v93;
        }
        *(float *)(a1 + 24 * v48 + 3616) = v92;
        if ((v87 & 0xFFFFFFFE) == 2)
        {
          _ZF = v87 == 3;
          int v94 = (unsigned int *)(a1 + 2580);
          if (_ZF) {
            int v94 = (unsigned int *)(a1 + 2576);
          }
          float v90 = (float)*v94;
        }
      }
      *(float *)(a1 + 24 * v48 + 3620) = v90;
      if ((*(_DWORD *)(a1 + 3972) & v468) != 0)
      {
        float v95 = (float)*(unsigned int *)(a1 + 2580);
        *(float *)(a1 + 24 * v48 + 3616) = v92 + (float)(v89 * v95);
        *(float *)(a1 + 24 * v48 + 3620) = v90 + (float)(v91 * v95);
        *(float *)(a1 + 24 * v48 + 3608) = -v89;
        *(float *)(a1 + 24 * v48 + 3612) = -v91;
      }
      unint64_t v96 = *(void *)(v465 + 24);
      switch(v96)
      {
        case 0uLL:
          goto LABEL_123;
        case 1uLL:
          uint64_t v445 = v445 | v468;
          v462 |= v468;
LABEL_123:
          char v97 = 2 * v48;
          int v98 = 1;
          goto LABEL_124;
        case 3uLL:
        case 5uLL:
        case 6uLL:
        case 8uLL:
          uint64_t v445 = v445 | v468;
          v462 |= v468;
          goto LABEL_121;
        case 7uLL:
          int v99 = 3 << (2 * v48);
          v462 |= v468;
          goto LABEL_125;
        default:
LABEL_121:
          char v97 = 2 * v48;
          int v98 = 2;
LABEL_124:
          int v99 = v98 << v97;
LABEL_125:
          if ((v468 & v462) == 0 || v96 > 8) {
            goto LABEL_34;
          }
          if (((1 << v96) & 0x16A) != 0)
          {
            unsigned __int16 v453 = v58;
LABEL_33:
            *(float *)(a1 + 4 * v48 + 3864) = (float)*v453;
            goto LABEL_34;
          }
          if (v96 == 7) {
            goto LABEL_33;
          }
LABEL_34:
          __src |= v99;
          unsigned int v47 = v468 ^ v456;
          if (v468 == v456) {
            goto LABEL_132;
          }
          break;
      }
    }
    if (BYTE1(v65) == 2 && (v65 & 0x10000) != 0)
    {
LABEL_86:
      uint64_t v80 = 3;
      goto LABEL_91;
    }
LABEL_72:
    uint64_t v80 = 0;
    goto LABEL_91;
  }
  uint64_t v445 = 0;
  unsigned __int16 __src = 0;
  uint64_t v465 = 0;
LABEL_132:
  unint64_t v100 = (char *)a1;
  *(void *)(a1 + 2192) = *(void *)(v467 + 1336);
  *(void *)(a1 + 2200) = *(void *)(v467 + 1344);
  *(void *)(a1 + 2208) = *(void *)(v467 + 1352);
  *(void *)(a1 + 2496) = *(void *)(v467 + 1360);
  *(void *)(a1 + 2216) = *(void *)(v467 + 1496);
  *(void *)(a1 + 2224) = *(void *)(v467 + 1504);
  *(void *)(a1 + 2232) = *(void *)(v467 + 1512);
  *(void *)(a1 + 2504) = *(void *)(v467 + 1520);
  bzero((void *)a1, 0x190uLL);
  uint64_t v101 = *(void *)(a1 + 2496);
  if (!v101)
  {
    BOOL v105 = 0;
    LODWORD(v108) = 0;
    uint64_t v109 = 0;
    LODWORD(v110) = 0;
    uint64_t v463 = 0;
    uint64_t v111 = 0;
    LODWORD(v112) = 0;
    uint64_t v113 = 0;
    LODWORD(v114) = 0;
    uint64_t v469 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = *((void *)v473 + 313);
    uint32x2_t v457 = 0;
    if (!v116) {
      goto LABEL_226;
    }
LABEL_176:
    int v451 = v108;
    uint64_t v454 = v109;
    unsigned int v141 = *(_DWORD *)(v467 + 1528);
    *((_WORD *)v100 + 2524) = v141;
    int v142 = *(_DWORD *)(v467 + 1532);
    *((_WORD *)v100 + 2523) = v142;
    unsigned int v143 = *(_DWORD *)(v467 + 1536);
    *((_WORD *)v100 + 2525) = v143;
    uint64_t v144 = *(void *)(v116 + 208);
    unsigned int v145 = *(_DWORD *)(v144 + 24) - 1;
    if (*(_DWORD *)(v116 + 236))
    {
      uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v116, v141, 0, v143, *(_DWORD *)(v144 + 24) - 1);
      uint64_t v147 = *((void *)v473 + 313);
      uint64_t v469 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v147, *(_DWORD *)(v147 + 144) + *(_DWORD *)(v467 + 1532), v145);
    }
    else
    {
      uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v116, v141, *(_DWORD *)(v116 + 144) + v142, v143, *(_DWORD *)(v144 + 24) - 1);
      uint64_t v469 = 0;
      uint64_t v147 = *((void *)v473 + 313);
    }
    uint64_t v148 = *(void *)(v147 + 380);
    if ((v148 & 0xFF00) == 0x400)
    {
      int v149 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v147, v145);
      int v150 = *(_DWORD *)(v147 + 236);
      if (v150) {
        LODWORD(v114) = (v149 + v150 - 1) & -v150;
      }
      else {
        LODWORD(v114) = v149;
      }
      uint64_t v151 = *(void *)(v147 + 488);
      if (!v151) {
        goto LABEL_201;
      }
    }
    else if ((v148 & 0x10000) != 0)
    {
      if (*(void *)(v147 + 380))
      {
        unint64_t v152 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v147, v145);
        LODWORD(v114) = v152;
        uint64_t v153 = *(unsigned int *)(v147 + 236);
        if (v153) {
          uint64_t v114 = (v152 + v153 - 1) & -v153;
        }
        uint64_t v151 = *(void *)(v147 + 488);
        if (!v151) {
          goto LABEL_201;
        }
      }
      else
      {
        LODWORD(v114) = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v147, v145)* *(_DWORD *)(v147 + 132)+ 127) & 0xFFFFFF80;
        uint64_t v147 = *((void *)v473 + 313);
        uint64_t v151 = *(void *)(v147 + 488);
        if (!v151) {
          goto LABEL_201;
        }
      }
    }
    else
    {
      LODWORD(v114) = 0;
      uint64_t v151 = *(void *)(v147 + 488);
      if (!v151) {
        goto LABEL_201;
      }
    }
    unsigned int v154 = *(_DWORD *)(v147 + 144) + *(_DWORD *)(v467 + 1532);
    if (*(_DWORD *)(v151 + 1080) > v154)
    {
      uint64_t v113 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v151 + 536 * v145, *(_DWORD *)(v467 + 1528), v154, *(_DWORD *)(v467 + 1536), 0);
      uint64_t v155 = *((void *)v473 + 313);
      uint64_t v156 = *(void *)(v155 + 488);
      if (v156 && *(_DWORD *)(v156 + 1080))
      {
        uint64_t v157 = *(void *)(v155 + 380);
        if ((v157 & 0xFF00) == 0x400)
        {
          uint64_t v158 = v156 + 536 * v145;
          int v159 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v158, 0);
          int v160 = *(_DWORD *)(v158 + 236);
          if (v160) {
            LODWORD(v112) = (v159 + v160 - 1) & -v160;
          }
          else {
            LODWORD(v112) = v159;
          }
          goto LABEL_203;
        }
        if ((v157 & 0x10000) != 0)
        {
          uint64_t v252 = v156 + 536 * v145;
          if ((*(void *)(v252 + 380) & 0xFF00) == 0x400)
          {
            unint64_t v253 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v252, 0);
            uint64_t v254 = *(unsigned int *)(v252 + 236);
            uint64_t v255 = (v253 + v254 - 1) & -v254;
            if (!v254) {
              uint64_t v255 = v253;
            }
            uint64_t v112 = 6 * v255;
          }
          else
          {
            if (!*(void *)(v252 + 380))
            {
              LODWORD(v112) = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v252, 0)* *(_DWORD *)(v252 + 132)+ 127) & 0xFFFFFF80;
              goto LABEL_203;
            }
            uint64_t v112 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v252, 0);
            LODWORD(v254) = *(_DWORD *)(v252 + 236);
          }
          if (v254) {
            uint64_t v112 = (v112 + v254 - 1) & -(uint64_t)v254;
          }
          goto LABEL_203;
        }
      }
LABEL_202:
      LODWORD(v112) = 0;
LABEL_203:
      *((_WORD *)v473 + 2184) |= 0xCu;
      *((_WORD *)v473 + 2188) |= (*(_WORD *)(v467 + 1704) >> 6) & 8;
      *((_WORD *)v473 + 2189) |= ~(*(_WORD *)(v467 + 1708) >> 7) & 4;
      *((_WORD *)v473 + 2190) |= (*(_WORD *)(v467 + 1700) >> 6) & 8;
      v473[3936] = *(_DWORD *)(v467 + 1480);
      if (*(_DWORD *)(v467 + 1856) == 2)
      {
        uint64_t v115 = 4008574976;
        if (GPUVirtualAddress != 4008574976)
        {
          uint64_t v161 = GPUVirtualAddress;
          int32x2_t v162 = *(int32x2_t *)(v473 + 2576);
          uint32x2_t v447 = (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32(v162, (int32x2_t)-1)));
          int8x8_t v449 = (int8x8_t)vcgt_u32((uint32x2_t)0x1100000011, (uint32x2_t)v162);
          *(int8x8_t *)unsigned int v473 = vbsl_s8(v449, (int8x8_t)0x2000000020, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, v447));
          int v163 = *((_DWORD *)v473 + 646) * *(unsigned __int8 *)(v144 + v145 + 88);
          *((_DWORD *)v473 + 44) = v163;
          unsigned int v164 = [AGXG17FamilyBuffer alloc];
          char v165 = v447.i8[0];
          if (v449.i8[0]) {
            char v165 = 5;
          }
          int v166 = v163 << v165;
          if (v449.i8[4]) {
            char v167 = 5;
          }
          else {
            char v167 = v447.i8[4];
          }
          uint64_t v168 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v164, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", *((void *)v473 + 50), (v166 << v167), 0, AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled, 0);
          *((void *)v473 + 20) = v168;
          *((void *)v473 + 21) = v161;
          int v169 = (*(unsigned __int16 *)(v467 + 1708) >> 7) & 4 | *((unsigned __int16 *)v473 + 196);
          *((_WORD *)v473 + 196) |= (*(_WORD *)(v467 + 1708) >> 7) & 4;
          if ((*(unsigned char *)(v467 + 1713) & 2) != 0 || (*(_DWORD *)(v467 + 1720) & 0x200) != 0) {
            __int16 v170 = 8;
          }
          else {
            __int16 v170 = 0;
          }
          *((_WORD *)v473 + 196) = v170 | v169;
          uint64_t v115 = *(void *)(v168 + (int)*MEMORY[0x263F4B188] + 72);
        }
      }
      else
      {
        uint64_t v115 = GPUVirtualAddress;
      }
      unint64_t v100 = v473;
      if (*((void *)v473 + 312))
      {
        uint64_t v109 = v454;
        LODWORD(v108) = v451;
        goto LABEL_218;
      }
      uint32x2_t v457 = vmax_u32(vshl_u32(*(uint32x2_t *)(*((void *)v473 + 313) + 128), (uint32x2_t)vneg_s32(vdup_n_s32(*(_DWORD *)(*((void *)v473 + 313) + 144) + *(_DWORD *)(v467 + 1532)))), (uint32x2_t)0x100000001);
      uint64_t v109 = v454;
      LODWORD(v108) = v451;
LABEL_226:
      v100[3967] = 0;
      goto LABEL_227;
    }
LABEL_201:
    uint64_t v113 = 0;
    goto LABEL_202;
  }
  unsigned int v102 = *(_DWORD *)(v467 + 1368);
  *(_WORD *)(a1 + 5042) = v102;
  int v103 = *(_DWORD *)(v467 + 1372);
  *(_WORD *)(a1 + 5040) = v103;
  *(_WORD *)(a1 + 5044) = *(_DWORD *)(v467 + 1376);
  uint64_t v104 = *(void *)(v101 + 32);
  BOOL v105 = v104 == 250;
  if (*(_DWORD *)(v101 + 236))
  {
    uint64_t v106 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v101, v102, 0, 0, 0);
    uint64_t v107 = *((void *)v473 + 312);
    uint64_t v463 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v107, *(_DWORD *)(v107 + 144) + *(_DWORD *)(v467 + 1372), 0);
  }
  else
  {
    uint64_t v106 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v101, v102, *(_DWORD *)(v101 + 144) + v103, 0, 0);
    uint64_t v463 = 0;
    uint64_t v107 = *((void *)v473 + 312);
  }
  uint64_t v117 = *(void *)(v107 + 380);
  if ((v117 & 0xFF00) == 0x400)
  {
    int v118 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v107, 0);
    int v119 = *(_DWORD *)(v107 + 236);
    if (v119) {
      LODWORD(v110) = (v118 + v119 - 1) & -v119;
    }
    else {
      LODWORD(v110) = v118;
    }
    uint64_t v120 = *(void *)(v107 + 488);
    if (!v120) {
      goto LABEL_159;
    }
  }
  else if ((v117 & 0x10000) != 0)
  {
    if (*(void *)(v107 + 380))
    {
      unint64_t v121 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v107, 0);
      LODWORD(v110) = v121;
      uint64_t v122 = *(unsigned int *)(v107 + 236);
      if (v122) {
        size_t v110 = (v121 + v122 - 1) & -v122;
      }
      uint64_t v120 = *(void *)(v107 + 488);
      if (!v120) {
        goto LABEL_159;
      }
    }
    else
    {
      size_t v110 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v107, 0)* *(unsigned int *)(v107 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
      uint64_t v107 = *((void *)v473 + 312);
      uint64_t v120 = *(void *)(v107 + 488);
      if (!v120) {
        goto LABEL_159;
      }
    }
  }
  else
  {
    LODWORD(v110) = 0;
    uint64_t v120 = *(void *)(v107 + 488);
    if (!v120) {
      goto LABEL_159;
    }
  }
  unsigned int v123 = *(_DWORD *)(v107 + 144) + *(_DWORD *)(v467 + 1372);
  if (*(_DWORD *)(v120 + 1080) <= v123)
  {
LABEL_159:
    uint64_t v109 = 0;
LABEL_160:
    LODWORD(v108) = 0;
    goto LABEL_161;
  }
  uint64_t v109 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v120, *(_DWORD *)(v467 + 1368), v123, 0, 0);
  uint64_t v124 = *((void *)v473 + 312);
  uint64_t v125 = *(void *)(v124 + 488);
  if (!v125 || !*(_DWORD *)(v125 + 1080)) {
    goto LABEL_160;
  }
  uint64_t v126 = *(void *)(v124 + 380);
  if ((v126 & 0xFF00) == 0x400)
  {
    int v127 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v125, 0);
    int v128 = *(_DWORD *)(v125 + 236);
    if (v128) {
      LODWORD(v108) = (v127 + v128 - 1) & -v128;
    }
    else {
      LODWORD(v108) = v127;
    }
  }
  else
  {
    if ((v126 & 0x10000) == 0) {
      goto LABEL_160;
    }
    if ((*(void *)(v125 + 380) & 0xFF00) == 0x400)
    {
      unint64_t v249 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v125, 0);
      uint64_t v250 = *(unsigned int *)(v125 + 236);
      uint64_t v251 = (v249 + v250 - 1) & -v250;
      if (!v250) {
        uint64_t v251 = v249;
      }
      uint64_t v108 = 6 * v251;
    }
    else
    {
      if (!*(void *)(v125 + 380))
      {
        uint64_t v108 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v125, 0)* *(unsigned int *)(v125 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
        goto LABEL_161;
      }
      uint64_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v125, 0);
      LODWORD(v250) = *(_DWORD *)(v125 + 236);
    }
    if (v250) {
      uint64_t v108 = (v108 + v250 - 1) & -(uint64_t)v250;
    }
  }
LABEL_161:
  __int16 v129 = (*(_DWORD *)(v467 + 1708) & 0x100) == 0;
  *((_WORD *)v473 + 2184) |= 3u;
  *((_WORD *)v473 + 2188) |= (*(_WORD *)(v467 + 1704) >> 7) & 2;
  *((_WORD *)v473 + 2189) |= v129;
  *((_WORD *)v473 + 2190) |= (*(_WORD *)(v467 + 1700) >> 7) & 2;
  unsigned int v130 = (*(float *)(v467 + 1320) * 65535.0);
  if (v104 != 250) {
    unsigned int v130 = *(_DWORD *)(v467 + 1320);
  }
  *((_DWORD *)v473 + 982) = v130;
  *((_DWORD *)v473 + 983) = v104 == 250;
  if (*(_DWORD *)(v467 + 1852) == 2)
  {
    uint64_t v111 = 4008574976;
    if (v106 != 4008574976)
    {
      int32x2_t v131 = *(int32x2_t *)(v473 + 2576);
      int8x8_t v132 = (int8x8_t)vcgt_u32((uint32x2_t)0x1100000011, (uint32x2_t)v131);
      uint32x2_t v133 = (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32(v131, (int32x2_t)-1)));
      __int8 v472 = v132.i8[4];
      int8x8_t v134 = vbsl_s8(v132, (int8x8_t)0x2000000020, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, v133));
      char v455 = v133.i8[4];
      __int32 v458 = v134.i32[0];
      *(int8x8_t *)unsigned int v473 = v134;
      int v135 = *((_DWORD *)v473 + 646) * *(unsigned __int8 *)(*(void *)(*((void *)v473 + 312) + 208) + 88);
      *((_DWORD *)v473 + 6) = v135;
      unsigned int v136 = [AGXG17FamilyBuffer alloc];
      if (v472) {
        char v137 = 5;
      }
      else {
        char v137 = v455;
      }
      uint64_t v138 = -[AGXBuffer initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:](v136, "initWithDevice:length:options:isSuballocDisabled:pinnedGPULocation:", *((void *)v473 + 50), ((v458 << v137) * v135), 0, AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(AGXG17FamilyDevice *,AGX::HAL200::CommandBuffer *,AGX::HAL200::FramebufferDriverConfig const&,unsigned int,unsigned int,BOOL)::isSuballocDisabled, 0);
      *((void *)v473 + 1) = v138;
      *((void *)v473 + 2) = v106;
      int v139 = HIBYTE(*(unsigned __int16 *)(v467 + 1708)) & 1 | *((unsigned __int16 *)v473 + 196);
      *((_WORD *)v473 + 196) |= HIBYTE(*(_WORD *)(v467 + 1708)) & 1;
      if ((*(unsigned char *)(v467 + 1713) & 1) != 0 || (*(_DWORD *)(v467 + 1720) & 0x100) != 0) {
        __int16 v140 = 2;
      }
      else {
        __int16 v140 = 0;
      }
      *((_WORD *)v473 + 196) = v140 | v139;
      uint64_t v111 = *(void *)(v138 + (int)*MEMORY[0x263F4B188] + 72);
    }
  }
  else
  {
    uint64_t v111 = v106;
  }
  uint32x2_t v457 = vmax_u32(vshl_u32(*(uint32x2_t *)(*((void *)v473 + 312) + 128), (uint32x2_t)vneg_s32(vdup_n_s32(*(_DWORD *)(*((void *)v473 + 312) + 144) + *(_DWORD *)(v467 + 1372)))), (uint32x2_t)0x100000001);
  uint64_t v116 = *((void *)v473 + 313);
  if (v116)
  {
    unint64_t v100 = v473;
    goto LABEL_176;
  }
  LODWORD(v112) = 0;
  uint64_t v113 = 0;
  LODWORD(v114) = 0;
  uint64_t v469 = 0;
  uint64_t v115 = 0;
LABEL_218:
  if (v465) {
    BOOL v171 = 0;
  }
  else {
    BOOL v171 = *(_DWORD *)(v467 + 1944) == 0;
  }
  char v172 = v171;
  v473[3967] = v172;
LABEL_227:
  unint64_t v173 = v115 | v111;
  if (v115 | v111)
  {
    uint64_t v174 = ((v457.i32[1] << 15) + 536838144) & 0x1FFF8000 | (v457.i16[0] - 1) & 0x3FFFu;
    uint64_t v175 = 68;
    if (!v109) {
      uint64_t v175 = 0;
    }
    unint64_t v176 = v175 | ((unint64_t)(v113 != 0) << 8) | (16 * (v113 != 0));
    uint64_t v177 = 0x4000000;
    if (!v105) {
      uint64_t v177 = 0;
    }
    unint64_t v178 = v176 | v177;
  }
  else
  {
    unint64_t v178 = 0;
    uint64_t v174 = 0;
  }
  unsigned int v179 = v110 >> 14;
  int v180 = v108 << 7;
  if (v111)
  {
    uint64_t v181 = v111 & 0xFFFFFFFFFF80;
    uint64_t v182 = v463 & 0xFFFFFFFFFF80;
    if (v179) {
      unsigned int v183 = 0x4000;
    }
    else {
      unsigned int v183 = 128;
    }
    if (v179) {
      char v184 = 14;
    }
    else {
      char v184 = 7;
    }
    unsigned int v185 = ((v110 >> v184) - 1) & 0xFFFFF;
    if (v183 <= v110) {
      uint64_t v186 = v185;
    }
    else {
      uint64_t v186 = 0;
    }
    unint64_t v187 = (v179 != 0) | (unint64_t)(v186 << 14);
    uint64_t v188 = v109 & 0xFFFFFFFFFF80;
    if (v108 >= 0x80) {
      uint64_t v189 = (v180 & 0xFFFFC000) - 0x4000;
    }
    else {
      uint64_t v189 = 0;
    }
  }
  else
  {
    uint64_t v181 = 0;
    unint64_t v187 = 0;
    uint64_t v188 = 0;
    uint64_t v189 = 0;
    uint64_t v182 = 0;
  }
  uint64_t v190 = v109;
  unsigned int v191 = v114 >> 14;
  int v192 = v112 << 7;
  if (v115)
  {
    uint64_t v193 = v115 & 0xFFFFFFFFFF80;
    uint64_t v194 = v469 & 0xFFFFFFFFFF80;
    if (v191) {
      unsigned int v195 = 0x4000;
    }
    else {
      unsigned int v195 = 128;
    }
    if (v191) {
      char v196 = 14;
    }
    else {
      char v196 = 7;
    }
    unsigned int v197 = (v114 >> v196 << 14) - 0x4000;
    if (v195 <= v114) {
      unsigned int v198 = v197;
    }
    else {
      unsigned int v198 = 0;
    }
    uint64_t v199 = v198 | (v191 != 0);
    uint64_t v200 = v113 & 0xFFFFFFFFFF80;
    LODWORD(v201) = (v192 & 0xFFFFC000) - 0x4000;
    if (v112 >= 0x80) {
      uint64_t v201 = v201;
    }
    else {
      uint64_t v201 = 0;
    }
  }
  else
  {
    uint64_t v193 = 0;
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    uint64_t v194 = 0;
  }
  *((void *)v473 + 498) = v178;
  *((void *)v473 + 499) = 0;
  *((void *)v473 + 500) = v174;
  *((void *)v473 + 501) = v181;
  *((void *)v473 + 502) = v181;
  *((void *)v473 + 503) = v193;
  *((void *)v473 + 504) = v193;
  *((void *)v473 + 505) = v187;
  *((void *)v473 + 506) = v187;
  *((void *)v473 + 507) = v199;
  *((void *)v473 + 508) = v199;
  *((void *)v473 + 509) = v188;
  *((void *)v473 + 510) = v188;
  *((void *)v473 + 511) = v200;
  *((void *)v473 + 512) = v200;
  *((void *)v473 + 513) = v189;
  *((void *)v473 + 514) = v201;
  *((void *)v473 + 515) = v189;
  *((void *)v473 + 516) = v201;
  *((void *)v473 + 517) = 0;
  *((void *)v473 + 518) = v182;
  *((void *)v473 + 519) = v194;
  *((void *)v473 + 520) = v182;
  *((void *)v473 + 521) = v194;
  if (v173)
  {
    uint64_t v202 = ((v457.i32[1] << 15) + 536838144) & 0x1FFF8000 | (v457.i16[0] - 1) & 0x3FFFu;
    uint64_t v203 = 68;
    if (!v190) {
      uint64_t v203 = 0;
    }
    unint64_t v204 = v203 | ((unint64_t)(v113 != 0) << 8) | (16 * (v113 != 0));
    uint64_t v205 = 0x4000000;
    if (!v105) {
      uint64_t v205 = 0;
    }
    unint64_t v173 = v204 | v205;
    if (v111)
    {
LABEL_268:
      uint64_t v206 = v111 & 0xFFFFFFFFFF80;
      uint64_t v207 = v463 & 0xFFFFFFFFFF80;
      v173 |= 1uLL;
      BOOL v208 = v179 == 0;
      BOOL v209 = v179 != 0;
      if (v208) {
        unsigned int v210 = 128;
      }
      else {
        unsigned int v210 = 0x4000;
      }
      if (v208) {
        char v211 = 7;
      }
      else {
        char v211 = 14;
      }
      unsigned int v212 = ((v110 >> v211) - 1) & 0xFFFFF;
      if (v210 <= v110) {
        uint64_t v213 = v212;
      }
      else {
        uint64_t v213 = 0;
      }
      BOOL v214 = v209 | (v213 << 14);
      uint64_t v215 = v190 & 0xFFFFFFFFFF80;
      LODWORD(v216) = (v180 & 0xFFFFC000) - 0x4000;
      if (v108 >= 0x80) {
        uint64_t v216 = v216;
      }
      else {
        uint64_t v216 = 0;
      }
      if (v115) {
        goto LABEL_281;
      }
LABEL_295:
      uint64_t v217 = 0;
      uint64_t v224 = 0;
      uint64_t v225 = 0;
      uint64_t v226 = 0;
      goto LABEL_296;
    }
  }
  else
  {
    uint64_t v202 = 0;
    if (v111) {
      goto LABEL_268;
    }
  }
  uint64_t v206 = 0;
  BOOL v214 = 0;
  uint64_t v215 = 0;
  uint64_t v216 = 0;
  uint64_t v207 = 0;
  if (!v115) {
    goto LABEL_295;
  }
LABEL_281:
  uint64_t v217 = v115 & 0xFFFFFFFFFF80;
  uint64_t v115 = v469 & 0xFFFFFFFFFF80;
  BOOL v218 = v191 == 0;
  BOOL v219 = v191 != 0;
  if (v218) {
    unsigned int v220 = 128;
  }
  else {
    unsigned int v220 = 0x4000;
  }
  if (v218) {
    char v221 = 7;
  }
  else {
    char v221 = 14;
  }
  unsigned int v222 = (v114 >> v221 << 14) - 0x4000;
  if (v220 <= v114) {
    unsigned int v223 = v222;
  }
  else {
    unsigned int v223 = 0;
  }
  uint64_t v224 = v223 | v219;
  uint64_t v225 = v113 & 0xFFFFFFFFFF80;
  LODWORD(v226) = (v192 & 0xFFFFC000) - 0x4000;
  if (v112 >= 0x80) {
    uint64_t v226 = v226;
  }
  else {
    uint64_t v226 = 0;
  }
LABEL_296:
  *((void *)v473 + 522) = v173;
  *((void *)v473 + 523) = 0;
  *((void *)v473 + 524) = v202;
  *((void *)v473 + 525) = v206;
  *((void *)v473 + 526) = v206;
  *((void *)v473 + 527) = v217;
  *((void *)v473 + 528) = v217;
  *((void *)v473 + 529) = v214;
  *((void *)v473 + 530) = v214;
  *((void *)v473 + 531) = v224;
  *((void *)v473 + 532) = v224;
  *((void *)v473 + 533) = v215;
  *((void *)v473 + 534) = v215;
  *((void *)v473 + 535) = v225;
  *((void *)v473 + 536) = v225;
  *((void *)v473 + 537) = v216;
  *((void *)v473 + 538) = v226;
  *((void *)v473 + 539) = v216;
  *((void *)v473 + 540) = v226;
  *((void *)v473 + 541) = 0;
  *((void *)v473 + 542) = v207;
  *((void *)v473 + 543) = v115;
  *((void *)v473 + 544) = v207;
  *((void *)v473 + 545) = v115;
  LODWORD(v489) = 13;
  unint64_t v492 = 0;
  *(void *)int v491 = 0;
  long long v490 = 0;
  int8x16_t v227 = *(int8x16_t *)(v461 + 16);
  int8x16_t v493 = *(int8x16_t *)v461;
  int8x16_t v494 = v227;
  unint64_t v228 = *(void *)(v461 + 32);
  unsigned int v488 = &unk_26F852AF8;
  int8x16_t v495 = (int8x16_t)v228;
  unint64_t v229 = (v445 << 16) | ((unint64_t)*(unsigned __int8 *)(v467 + 1708) << 32);
  v495.i32[2] = __src | (v445 << 16) | (*(_DWORD *)(v467 + 1704) << 24);
  v495.i16[6] = WORD2(v229);
  uint64_t v230 = *(void *)(*((void *)v473 + 50) + 808);
  uint64_t v231 = *(void *)(v467 + 1928);
  unsigned int v232 = *(os_unfair_lock_s **)v230;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if ((areDriverUberShadersDisabled() & 1) != 0
    || ((int8x16_t v238 = vorrq_s8(v493, v494),
         int8x8_t v239 = vorr_s8(*(int8x8_t *)v238.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL)),
         !(v239.i32[0] | v495.i32[0] & 0xFFFF0FFF | v239.i32[1]))
      ? (BOOL v240 = v495.i64[1] == 0x10000000000)
      : (BOOL v240 = 0),
        v240 || (v495.i32[0] & 0x2000000) != 0))
  {
    int v480 = v489;
    int64x2_t v482 = 0uLL;
    unint64_t __p = 0;
    uint64_t v233 = 0;
    uint64_t v234 = 0;
    unsigned int v479 = &unk_26F852AF8;
    int8x16_t v483 = v493;
    int8x16_t v484 = v494;
    int8x16_t v485 = v495;
    int v235 = 1;
  }
  else
  {
    uint64_t v241 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(v230, v232, (uint64_t)&v488, v231);
    uint64_t v234 = v241;
    uint64_t v233 = v241;
    if ((v495.u8[0] & ~v495.u8[12]) != 0 && (!v241 || (uint64_t v233 = *(void *)(v241 + 2640)) == 0))
    {
      unsigned int v479 = &unk_26F852B38;
      int v480 = v489;
      int64x2_t v482 = 0uLL;
      unint64_t __p = 0;
      unsigned int v242 = v490;
      int64_t v243 = *(void *)v491 - (void)v490;
      if (*(void **)v491 != v490)
      {
        if (v243 < 0) {
          abort();
        }
        unint64_t __p = operator new(*(void *)v491 - (void)v490);
        v482.i64[1] = (uint64_t)__p + 4 * (v243 >> 2);
        memcpy(__p, v242, v243);
        v482.i64[0] = v482.i64[1];
      }
      int8x16_t v485 = v495;
      int8x16_t v483 = v493;
      unsigned int v479 = &unk_26F852AF8;
      int8x16_t v484 = v494;
      unint64_t v244 = (v485.u32[2] | ((unint64_t)v485.u16[6] << 32)) & 0xFFFFFF0000FFFFFFLL | ((unint64_t)v485.u8[0] << 32);
      v485.i32[2] = v495.i32[2] & 0xFFFFFF;
      v485.i16[6] = WORD2(v244);
      uint64_t v233 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::tryFindOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(v230, v232, (uint64_t)&v479, v231);
      unsigned int v479 = &unk_26F852B38;
      if (__p)
      {
        v482.i64[0] = (uint64_t)__p;
        operator delete(__p);
      }
      if (v233 && v234) {
        *(void *)(v234 + 2640) = v233;
      }
    }
    if (v234 && v233)
    {
      if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
        IOGPUDeviceTraceEvent();
      }
      goto LABEL_360;
    }
    int v235 = 0;
    uint64_t v231 = 0;
    int v480 = 13;
    int64x2_t v482 = 0uLL;
    unint64_t __p = 0;
    unsigned int v479 = &unk_26F852AF8;
    int8x16_t v485 = 0u;
    v485.i16[6] = 256;
    int8x16_t v483 = 0u;
    int8x16_t v484 = 0u;
    v485.i32[2] = 0;
    v485.i32[0] = v495.i16[0] & 0xF000;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v230 + 7712));
  if (v485.i64[1] == 0x10000000000)
  {
    int8x16_t v236 = vorrq_s8(v483, v484);
    int8x8_t v237 = vorr_s8(*(int8x8_t *)v236.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL));
    if (!(v237.i32[0] | v485.i32[0] & 0xFFFF0FFF | v237.i32[1])) {
      atomic_fetch_add((atomic_ullong *volatile)&AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::liveUberVariantUses, 1uLL);
    }
  }
  if (v234)
  {
    if (!v233) {
      goto LABEL_327;
    }
  }
  else
  {
    uint64_t v234 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(v230, v232, (uint64_t)&v479, v231);
    if (!v233)
    {
LABEL_327:
      uint64_t v233 = v234;
      if ((v495.u8[0] & ~v495.u8[12]) != 0)
      {
        uint64_t v233 = *(void *)(v234 + 2640);
        if (!v233)
        {
          uint64_t v470 = v231;
          long long v464 = v232;
          v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F852B38;
          int v245 = v489;
          LODWORD(v474.__end_) = v489;
          value = 0;
          unsigned int v476 = 0;
          v474.__end_cap_.__value_ = 0;
          unint64_t v246 = v490;
          int64_t v247 = *(void *)v491 - (void)v490;
          if (*(void **)v491 == v490)
          {
            unint64_t v248 = 0;
            __srca = 0;
          }
          else
          {
            if (v247 < 0) {
              abort();
            }
            v474.__end_cap_.__value_ = (unsigned int *)operator new(*(void *)v491 - (void)v490);
            unint64_t v248 = (char *)&v474.__end_cap_.__value_[v247 >> 2];
            unsigned int v476 = v248;
            __srca = v474.__end_cap_.__value_;
            memcpy(v474.__end_cap_.__value_, v246, v247);
            value = v248;
          }
          *(int8x16_t *)&v478[16] = v495;
          int8x16_t v477 = v493;
          v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F852AF8;
          *(int8x16_t *)unsigned int v478 = v494;
          unint64_t v256 = (*(unsigned int *)&v478[24] | ((unint64_t)*(unsigned __int16 *)&v478[28] << 32)) & 0xFFFFFF0000FFFFFFLL | ((unint64_t)v478[16] << 32);
          *(_DWORD *)&v478[24] = v495.i32[2] & 0xFFFFFF;
          *(_WORD *)&v478[28] = WORD2(v256);
          if (v235)
          {
            uint64_t v496 = &unk_26F852B38;
            LODWORD(v497) = v245;
            long long v499 = 0;
            long long v500 = 0;
            long long v498 = 0;
            int64_t v257 = v248 - (char *)__srca;
            uint64_t v258 = v470;
            if (v248 != (char *)__srca)
            {
              if (v257 < 0) {
                abort();
              }
              v259 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))operator new(v248 - (char *)__srca);
              unint64_t v260 = (uint64_t *)((char *)v259 + 4 * (v257 >> 2));
              long long v498 = v259;
              long long v500 = v260;
              memcpy(v259, __srca, v257);
              long long v499 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v260;
            }
            uint64_t v496 = &unk_26F852AF8;
            int8x16_t v501 = v477;
            long long v502 = *(_OWORD *)v478;
            long long v503 = *(_OWORD *)&v478[16];
            uint64_t v261 = v464;
          }
          else
          {
            LODWORD(v497) = 13;
            long long v499 = 0;
            long long v500 = 0;
            long long v498 = 0;
            uint64_t v496 = &unk_26F852AF8;
            long long v503 = 0u;
            int8x16_t v501 = 0u;
            long long v502 = 0u;
            WORD6(v503) = 256;
            DWORD2(v503) = 0;
            LODWORD(v503) = v495.i16[0] & 0xF000;
            uint64_t v261 = v464;
            uint64_t v258 = v470;
          }
          uint64_t v262 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(v230, v261, (uint64_t)&v496, v258);
          uint64_t v233 = v262;
          if ((*(unsigned char *)(v234 + 2632) != 0) == (*(unsigned char *)(v262 + 2632) != 0)) {
            *(void *)(v234 + 2640) = v262;
          }
          uint64_t v496 = &unk_26F852B38;
          if (v498)
          {
            long long v499 = v498;
            operator delete(v498);
          }
          v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F852B38;
          if (v474.__end_cap_.__value_)
          {
            value = (char *)v474.__end_cap_.__value_;
            operator delete(v474.__end_cap_.__value_);
          }
        }
      }
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v230 + 7712));
  unsigned int v479 = &unk_26F852B38;
  if (__p)
  {
    v482.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
LABEL_360:
  *((void *)v473 + 548) = v234;
  *((void *)v473 + 549) = v233;
  *((_DWORD *)v473 + 1106) = v489;
  if (v438 != &v488) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)v473 + 554, (char *)v490, *(char **)v491, (uint64_t)(*(void *)v491 - (void)v490) >> 2);
  }
  int8x16_t v263 = v494;
  *uint64_t v442 = v493;
  v442[1] = v263;
  v442[2] = v495;
  if ((v495.u8[0] & ~v495.u8[12]) != 0)
  {
    unsigned int v479 = &unk_26F852B38;
    int v264 = v489;
    int v480 = v489;
    int64x2_t v482 = 0uLL;
    unint64_t __p = 0;
    long long v265 = v490;
    int64_t v266 = *(void *)v491 - (void)v490;
    if (*(void **)v491 == v490)
    {
      unint64_t v268 = 0;
      long long v267 = 0;
      goto LABEL_370;
    }
    if ((v266 & 0x8000000000000000) == 0)
    {
      long long v267 = operator new(*(void *)v491 - (void)v490);
      unint64_t __p = v267;
      v482.i64[0] = (uint64_t)v267;
      unint64_t v268 = (unint64_t)v267 + 4 * (v266 >> 2);
      v482.i64[1] = v268;
      memcpy(v267, v265, v266);
      v482.i64[0] = v268;
LABEL_370:
      int8x16_t v485 = v495;
      int8x16_t v483 = v493;
      unsigned int v479 = &unk_26F852AF8;
      int8x16_t v484 = v494;
      unint64_t v270 = (v485.u32[2] | ((unint64_t)v485.u16[6] << 32)) & 0xFFFFFF0000FFFFFFLL | ((unint64_t)v485.u8[0] << 32);
      v485.i32[2] = v495.i32[2] & 0xFFFFFF;
      v485.i16[6] = WORD2(v270);
      goto LABEL_373;
    }
LABEL_590:
    abort();
  }
  unsigned int v479 = &unk_26F852B38;
  int v264 = v489;
  int v480 = v489;
  int64x2_t v482 = 0uLL;
  unint64_t __p = 0;
  long long v265 = v490;
  int64_t v269 = *(void *)v491 - (void)v490;
  if (*(void **)v491 == v490)
  {
    unint64_t v268 = 0;
    long long v267 = 0;
  }
  else
  {
    if (v269 < 0) {
      goto LABEL_590;
    }
    long long v267 = operator new(*(void *)v491 - (void)v490);
    unint64_t __p = v267;
    v482.i64[0] = (uint64_t)v267;
    unint64_t v268 = (unint64_t)v267 + 4 * (v269 >> 2);
    v482.i64[1] = v268;
    memcpy(v267, v265, v269);
    v482.i64[0] = v268;
  }
  unsigned int v479 = &unk_26F852AF8;
  int8x16_t v483 = v493;
  int8x16_t v484 = v494;
  int8x16_t v485 = v495;
LABEL_373:
  *((_DWORD *)v473 + 1128) = v264;
  long long v271 = (void *)*((void *)v473 + 565);
  if (v271)
  {
    *((void *)v473 + 566) = v271;
    operator delete(v271);
    *long long v435 = 0;
    v435[1] = 0;
    v435[2] = 0;
    long long v267 = __p;
    int64x2_t v272 = v482;
    long long v265 = v490;
  }
  else
  {
    int64x2_t v272 = vdupq_n_s64(v268);
  }
  *((void *)v473 + 565) = v267;
  *((int64x2_t *)v473 + 283) = v272;
  int8x16_t v273 = v485;
  int8x16_t v274 = v483;
  *((int8x16_t *)v473 + 285) = v484;
  *((int8x16_t *)v473 + 286) = v273;
  *((int8x16_t *)v473 + 284) = v274;
  uint64_t v275 = *((void *)v473 + 562);
  uint64_t v276 = *((void *)v473 + 573);
  int v277 = *((_DWORD *)v473 + 1144);
  int v278 = *((_DWORD *)v473 + 1122);
  unsigned int v279 = *((_DWORD *)v473 + 1233);
  v280 = (_DWORD *)*((void *)v473 + 548);
  unsigned int v281 = v280[98];
  unsigned int v282 = *((_DWORD *)v473 + 1232);
  uint64_t v283 = *((void *)v473 + 549);
  unsigned int v284 = *(_DWORD *)(v283 + 428);
  unsigned int v285 = v280[107];
  unsigned int v286 = *(_DWORD *)(v283 + 396);
  unsigned int v287 = v280[99];
  if (v287 <= v286) {
    unsigned int v287 = v286;
  }
  if (*((_DWORD *)v473 + 1234) <= v285) {
    unsigned int v288 = v285;
  }
  else {
    unsigned int v288 = *((_DWORD *)v473 + 1234);
  }
  if (v288 <= v284) {
    unsigned int v288 = v284;
  }
  *((_DWORD *)v473 + 1234) = v288;
  if (v282 > v287) {
    unsigned int v287 = v282;
  }
  *((_DWORD *)v473 + 1232) = v287;
  if (v281 > v279) {
    unsigned int v279 = v281;
  }
  *((_DWORD *)v473 + 1233) = v279;
  uint8x8_t v289 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*(int32x4_t *)v442, *((int32x4_t *)v473 + 284)), (int16x8_t)vceqq_s32((int32x4_t)v442[1], *((int32x4_t *)v473 + 285)))));
  v289.i8[0] = vmaxv_u8(v289);
  int v290 = (v278 == v277) & ~v289.i32[0];
  if (v275 != v276) {
    int v290 = 0;
  }
  int v291 = v290 | a7;
  BOOL v292 = v291 == 0;
  if (v291) {
    uint64_t v293 = v442;
  }
  else {
    uint64_t v293 = (int8x16_t *)(v473 + 4544);
  }
  if (v292) {
    uint64_t v275 = v276;
  }
  int8x16_t v294 = v293[1];
  *(int8x16_t *)(v473 + 3816) = *v293;
  *(int8x16_t *)(v473 + 3832) = v294;
  *((void *)v473 + 481) = v293[2].i64[0];
  *((void *)v473 + 482) = v275;
  unsigned int v488 = &unk_26F852B38;
  if (v265)
  {
    *(void *)int v491 = v265;
    operator delete(v265);
  }
  unsigned int v295 = *((_DWORD *)v473 + 110);
  *((_DWORD *)v473 + 987) = HIWORD(v295) & 0x1FF;
  *((_DWORD *)v473 + 988) = *(_DWORD *)(v467 + 1736);
  unsigned int v296 = *((_DWORD *)v473 + 989);
  if (!v296)
  {
    int v480 = 19;
    int64x2_t v482 = 0uLL;
    unint64_t __p = 0;
    unsigned int v479 = &unk_26F853C08;
    int8x16_t v483 = 0u;
    int8x16_t v484 = 0u;
    int8x16_t v485 = 0u;
    long long v486 = 0u;
    memset(v487, 0, sizeof(v487));
    uint64_t v347 = *(void *)(v467 + 1928);
    v474.__begin_ = 0;
    uint64_t v496 = 0;
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateEndOfTileProgramVariants(*(void *)(*((void *)v473 + 50) + 808), (uint64_t)&v479, v347, (uint64_t *)&v474, (uint64_t *)&v496);
    uint64_t v348 = v496;
    *((void *)v473 + 607) = v474.__begin_;
    *((void *)v473 + 606) = v348;
    *((_DWORD *)v473 + 1182) = v480;
    if (v437 != &v479) {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v434, (char *)__p, (char *)v482.i64[0], (v482.i64[0] - (uint64_t)__p) >> 2);
    }
    long long v349 = v486;
    *(int8x16_t *)(v440 + 32) = v485;
    *(_OWORD *)(v440 + 48) = v349;
    *(_OWORD *)(v440 + 64) = *(_OWORD *)v487;
    *(void *)(v440 + 78) = *(void *)&v487[14];
    int8x16_t v350 = v484;
    *(int8x16_t *)uint64_t v440 = v483;
    *(int8x16_t *)(v440 + 16) = v350;
    unsigned __int8 v351 = v487[16];
    if (*(unsigned __int16 *)&v487[16] <= 0xFFu && !*(_WORD *)&v487[18] && !*(_WORD *)&v487[20])
    {
      v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
      int v352 = v480;
      LODWORD(v474.__end_) = v480;
      value = 0;
      unsigned int v476 = 0;
      v474.__end_cap_.__value_ = 0;
      uint64_t v353 = __p;
      int64_t v354 = v482.i64[0] - (void)__p;
      if ((void *)v482.i64[0] == __p)
      {
        long long v356 = 0;
        long long v355 = 0;
        goto LABEL_520;
      }
      if ((v354 & 0x8000000000000000) == 0)
      {
        long long v355 = (unsigned int *)operator new(v482.i64[0] - (void)__p);
        v474.__end_cap_.__value_ = v355;
        value = (char *)v355;
        long long v356 = (char *)&v355[v354 >> 2];
        unsigned int v476 = v356;
        memcpy(v355, v353, v354);
        value = v356;
LABEL_520:
        *(int8x16_t *)&v478[16] = v485;
        *(_OWORD *)&v478[32] = v486;
        *(_OWORD *)&v478[48] = *(_OWORD *)v487;
        int8x16_t v477 = v483;
        v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
        *(void *)&v478[62] = *(void *)&v487[14];
        *(int8x16_t *)unsigned int v478 = v484;
        goto LABEL_521;
      }
LABEL_594:
      abort();
    }
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
    int v352 = v480;
    LODWORD(v474.__end_) = v480;
    value = 0;
    unsigned int v476 = 0;
    v474.__end_cap_.__value_ = 0;
    uint64_t v353 = __p;
    int64_t v367 = v482.i64[0] - (void)__p;
    if ((void *)v482.i64[0] == __p)
    {
      long long v356 = 0;
      long long v355 = 0;
    }
    else
    {
      if (v367 < 0) {
        goto LABEL_594;
      }
      long long v355 = (unsigned int *)operator new(v482.i64[0] - (void)__p);
      v474.__end_cap_.__value_ = v355;
      value = (char *)v355;
      long long v356 = (char *)&v355[v367 >> 2];
      unsigned int v476 = v356;
      memcpy(v355, v353, v367);
      value = v356;
    }
    *(_OWORD *)&v478[48] = *(_OWORD *)v487;
    *(int8x16_t *)&v478[16] = v485;
    *(_OWORD *)&v478[32] = v486;
    int8x16_t v477 = v483;
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
    *(int8x16_t *)unsigned int v478 = v484;
    *(_WORD *)&v478[64] = v351;
    *(_DWORD *)&v478[66] = 0;
    *(_DWORD *)&v478[56] = v351;
LABEL_521:
    uint64_t v398 = a3;
    *((_DWORD *)v473 + 1150) = v352;
    uint64_t v399 = (void *)*((void *)v473 + 576);
    uint64_t v400 = v356;
    if (v399)
    {
      *((void *)v473 + 577) = v399;
      operator delete(v399);
      *long long v433 = 0;
      *((void *)v473 + 577) = 0;
      *((void *)v473 + 578) = 0;
      long long v355 = v474.__end_cap_.__value_;
      uint64_t v400 = value;
      long long v356 = v476;
      uint64_t v353 = __p;
    }
    *((void *)v473 + 576) = v355;
    *((void *)v473 + 577) = v400;
    *((void *)v473 + 578) = v356;
    long long v401 = *(_OWORD *)&v478[32];
    unint64_t v370 = (int8x16_t *)v439;
    *(_OWORD *)(v439 + 32) = *(_OWORD *)&v478[16];
    *(_OWORD *)(v439 + 48) = v401;
    *(_OWORD *)(v439 + 64) = *(_OWORD *)&v478[48];
    *(void *)(v439 + 78) = *(void *)&v478[62];
    long long v402 = *(_OWORD *)v478;
    *(int8x16_t *)uint64_t v439 = v477;
    *(_OWORD *)(v439 + 16) = v402;
LABEL_548:
    unsigned int v479 = &unk_26F853C48;
    if (v353)
    {
      v482.i64[0] = (uint64_t)v353;
      operator delete(v353);
    }
    int8x16_t v421 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)v440, *v370), veorq_s8(*(int8x16_t *)(v440 + 32), v370[2])), vorrq_s8(veorq_s8(*(int8x16_t *)(v440 + 16), v370[1]), veorq_s8(*(int8x16_t *)(v440 + 48), v370[3])));
    *(int8x8_t *)v421.i8 = vorr_s8(*(int8x8_t *)v421.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v421, v421, 8uLL));
    int v422 = a7;
    if (!(*((void *)v473 + 604) ^ *((void *)v473 + 588) | (unsigned __int16)(*((_WORD *)v473 + 2420) ^ *((_WORD *)v473 + 2356)) | (unsigned __int16)(*((_WORD *)v473 + 2421) ^ *((_WORD *)v473 + 2357)) | (unint64_t)(unsigned __int16)(*((_WORD *)v473 + 2422) ^ *((_WORD *)v473 + 2358)) | v421.i32[0] | (*((_DWORD *)v473 + 1206) ^ *((_DWORD *)v473 + 1174)) | v421.i32[1])) {
      int v422 = 1;
    }
    if (v422) {
      long long v423 = (int8x16_t *)v440;
    }
    else {
      long long v423 = v370;
    }
    int8x16_t v424 = v423[1];
    *((int8x16_t *)v473 + 87) = *v423;
    *((int8x16_t *)v473 + 91) = v423[4];
    int8x16_t v425 = v423[2];
    *((int8x16_t *)v473 + 90) = v423[3];
    *((int8x16_t *)v473 + 89) = v425;
    *((int8x16_t *)v473 + 88) = v424;
    uint64_t v426 = *((void *)v473 + 607);
    unsigned int v427 = *(_DWORD *)(v426 + 68);
    uint64_t v428 = *((void *)v473 + 606);
    if (v427 <= *(_DWORD *)(v428 + 68)) {
      unsigned int v427 = *(_DWORD *)(v428 + 68);
    }
    unsigned int v429 = *((_DWORD *)v473 + 1234);
    if (v429 <= *(_DWORD *)(v426 + 80)) {
      unsigned int v429 = *(_DWORD *)(v426 + 80);
    }
    if (v429 <= *(_DWORD *)(v428 + 80)) {
      unsigned int v429 = *(_DWORD *)(v428 + 80);
    }
    *((_DWORD *)v473 + 1234) = v429;
    if (*((_DWORD *)v473 + 1232) > v427) {
      unsigned int v427 = *((_DWORD *)v473 + 1232);
    }
    *((_DWORD *)v473 + 1232) = v427;
    unsigned int v430 = *(_DWORD *)(v426 + 92);
    if (v430 >= *((_DWORD *)v473 + 1233)) {
      unsigned int v430 = *((_DWORD *)v473 + 1233);
    }
    *((_DWORD *)v473 + 1233) = v430;
    if (*(unsigned char *)(*((void *)v473 + 548) + 2632) || *(unsigned char *)(*((void *)v473 + 549) + 2632))
    {
      char v431 = 0;
      if (*(unsigned char *)(v426 + 1784)) {
        goto LABEL_572;
      }
    }
    else
    {
      char v431 = 1;
      if (*(unsigned char *)(v426 + 1784)) {
        goto LABEL_572;
      }
    }
    if (!*(unsigned char *)(v428 + 1784))
    {
      if ((v431 & 1) == 0) {
        ++*(void *)(v398 + 512);
      }
      return (uint64_t)v473;
    }
LABEL_572:
    if ((v431 & 1) == 0) {
      ++*(void *)(v398 + 512);
    }
    ++*(void *)(v398 + 520);
    return (uint64_t)v473;
  }
  BOOL v297 = 0;
  __int16 v466 = 0;
  int v471 = 0;
  int v298 = 0;
  int v299 = 0;
  int v300 = 0;
  int v480 = 19;
  int64x2_t v482 = 0uLL;
  unint64_t __p = 0;
  memset(v487, 0, sizeof(v487));
  int8x16_t v483 = 0u;
  int8x16_t v484 = 0u;
  int8x16_t v485 = 0u;
  long long v486 = 0u;
  unint64_t v301 = ((unint64_t)BYTE2(v295) << 36) | ((unint64_t)(*((_DWORD *)v473 + 647) & 0xF) << 32) | 0x40000000000000;
  unsigned int v479 = &unk_26F853C08;
  *(void *)&v487[8] = v301;
  LODWORD(v301) = *(unsigned __int8 *)(v467 + 1712);
  int v302 = *(unsigned __int8 *)(v467 + 1700);
  int v303 = *(unsigned __int8 *)(v467 + 1716);
  int v304 = v301 & ~v303;
  int v305 = v303 & ~v301 | v302;
  int v306 = v304 | v302;
  int v307 = *(unsigned __int8 *)(v467 + 1720);
  do
  {
    while (1)
    {
      uint64_t v309 = __clz(__rbit32(v296));
      uint64_t v310 = v309;
      unsigned int v311 = *(_DWORD *)(v461 + v310 * 4);
      unsigned int v312 = (v311 >> 12);
      unsigned int v313 = *((_WORD *)v473 + 221) & 0x1FF;
      int v314 = v312 / v313;
      unsigned __int32 v315 = (v311 << 21) & 0x1C000000 | ((v311 & 0x1F) << 8) | v483.i32[v310] & 0xE3FF0000 | (v312 / v313);
      v483.i32[v310] = v315;
      uint64_t v316 = v467 + 80 * v309;
      uint64_t v319 = *(void *)(v316 + 80);
      uint64_t v318 = v316 + 80;
      uint64_t v317 = v319;
      if (*(unsigned char *)(v319 + 240))
      {
        v315 |= 0x2000000u;
        v483.i32[v309] = v315;
      }
      unsigned int v320 = *(_DWORD *)(v317 + 380);
      int v321 = BYTE1(v320);
      char v322 = BYTE2(v320);
      unsigned int v323 = HIWORD(v320);
      if (*((_DWORD *)v473 + 978) < 2u) {
        char v324 = 2;
      }
      else {
        char v324 = 3;
      }
      if (v323)
      {
        if ((v322 & 2) != 0) {
          char v326 = 8;
        }
        else {
          char v326 = v324;
        }
        if (v321 == 4) {
          unsigned __int8 v325 = v324;
        }
        else {
          unsigned __int8 v325 = v326;
        }
      }
      else
      {
        unsigned __int8 v325 = 5;
        switch(v321)
        {
          case 1:
            unsigned __int8 v325 = 2;
            break;
          case 2:
            if ((v322 & 2) != 0) {
              unsigned __int8 v325 = 4;
            }
            else {
              unsigned __int8 v325 = 2;
            }
            break;
          case 3:
            break;
          case 4:
            unsigned __int8 v325 = v324;
            break;
          default:
            unsigned __int8 v325 = -1;
            break;
        }
      }
      int v327 = 1 << v309;
      v483.i32[v309] = v315 & 0xFF00FFFF | (v325 << 16);
      v298 |= 1 << v309;
      v299 |= (1 << v309) & v305;
      int v328 = v307 & (1 << v309);
      v300 |= v328;
      unsigned int v329 = v309 + 8;
      int v330 = 256 << v309;
      int v331 = *((_DWORD *)v473 + 990) & (1 << v309);
      if (!v331)
      {
        if (!v473[3907] || v452 < 2) {
          goto LABEL_454;
        }
        unsigned int v332 = (unsigned int *)&v483 + v329;
        unsigned int v333 = *v332 & 0xFFFFFF00 | v314;
        unsigned int *v332 = v333;
LABEL_426:
        int v334 = (v311 << 16) & 0x1000000;
        goto LABEL_427;
      }
      unsigned int v332 = (unsigned int *)&v483 + v329;
      unsigned int v333 = *v332 & 0xFFFFFF00 | v314;
      unsigned int *v332 = v333;
      if (v452 >= 2) {
        goto LABEL_426;
      }
      int v334 = 0;
LABEL_427:
      unsigned int v335 = v333 & 0xFEFFFFFF | v334;
      unsigned int *v332 = v335;
      unsigned int v336 = ((*(_DWORD *)(v461 + 4 * v309) & 0x1F) << 8) | (*(_DWORD *)(v461 + 4 * v309) << 21) & 0x1C000000 | v335 & 0xE3FF00FF;
      unsigned int *v332 = v336;
      if (*(unsigned char *)(*(void *)v318 + 240))
      {
        v336 |= 0x2000000u;
        unsigned int *v332 = v336;
      }
      if (v331)
      {
        unsigned int v337 = *(_DWORD *)(*(void *)(v467 + 80 * v309 + 720) + 380);
        int v338 = BYTE1(v337);
        unsigned int v339 = HIWORD(v337);
        char v340 = *((_DWORD *)v473 + 978) < 2u ? 2 : 3;
        if (v339)
        {
          char v342 = (*(_DWORD *)(*(void *)(v467 + 80 * v309 + 720) + 380) & 0x20000) != 0 ? 8 : v340;
          unsigned __int8 v341 = v338 == 4 ? v340 : v342;
        }
        else
        {
          unsigned __int8 v341 = 5;
          switch(v338)
          {
            case 1:
              goto LABEL_435;
            case 2:
              if ((*(_DWORD *)(*(void *)(v467 + 80 * v309 + 720) + 380) & 0x20000) != 0) {
                unsigned __int8 v341 = 4;
              }
              else {
                unsigned __int8 v341 = 2;
              }
              break;
            case 3:
              break;
            case 4:
              unsigned __int8 v341 = v340;
              break;
            default:
              unsigned __int8 v341 = -1;
              break;
          }
        }
      }
      else
      {
LABEL_435:
        unsigned __int8 v341 = 2;
      }
      unsigned int v343 = v336 & 0xFF00FFFF | (v341 << 16);
      unsigned int *v332 = v343;
      v298 |= v330;
      v299 |= ((v327 & v306) != 0) << v329;
      v300 |= (v328 != 0) << v329;
      if (v452 >= 2 && (v327 & v306) == 0 && (*(_DWORD *)(v461 + 4 * v309) & 0x1F) == 0x11)
      {
        int v344 = v330 | v327;
        if (v328)
        {
          *((_WORD *)v473 + 996) |= v344;
          unsigned int v343 = *v332;
          int v345 = v299;
        }
        else
        {
          int v345 = v299 | v344;
        }
        v471 |= v344;
        v466 |= v299 & v344;
        unsigned int *v332 = v343 | 0x20000000;
        int v299 = v345;
      }
LABEL_454:
      if (!v297) {
        break;
      }
      BOOL v297 = 1;
      v296 ^= v327;
      if (!v296) {
        goto LABEL_462;
      }
    }
    BOOL v297 = ((v330 | v327) & ~v299) != 0 && v313 <= v312;
    v296 ^= v327;
  }
  while (v296);
LABEL_462:
  if (v297)
  {
    v471 |= v298 & ~v299;
    uint64_t v346 = v473;
    *((_WORD *)v473 + 996) |= v300;
    LOWORD(v299) = -1;
    LOWORD(v300) = 0;
  }
  else
  {
    uint64_t v346 = v473;
  }
  *(_WORD *)&v487[16] = v298;
  *(_WORD *)&v487[18] = v299;
  *(_WORD *)&v487[20] = v300;
  *(_WORD *)&v487[8] = v298 & ~(_WORD)v299;
  *(_WORD *)&v487[10] = v300 & v298;
  uint64_t v357 = *(void *)(v467 + 1928);
  v474.__begin_ = 0;
  uint64_t v496 = 0;
  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateEndOfTileProgramVariants(*(void *)(*((void *)v346 + 50) + 808), (uint64_t)&v479, v357, (uint64_t *)&v474, (uint64_t *)&v496);
  v358 = v496;
  *((void *)v346 + 607) = v474.__begin_;
  *((void *)v346 + 606) = v358;
  *((_DWORD *)v346 + 1182) = v480;
  if (v437 != &v479) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v434, (char *)__p, (char *)v482.i64[0], (v482.i64[0] - (uint64_t)__p) >> 2);
  }
  long long v359 = v486;
  *(int8x16_t *)(v440 + 32) = v485;
  *(_OWORD *)(v440 + 48) = v359;
  *(_OWORD *)(v440 + 64) = *(_OWORD *)v487;
  *(void *)(v440 + 78) = *(void *)&v487[14];
  int8x16_t v360 = v484;
  *(int8x16_t *)uint64_t v440 = v483;
  *(int8x16_t *)(v440 + 16) = v360;
  unsigned __int8 v361 = v487[16];
  if (*(unsigned __int16 *)&v487[16] > 0xFFu || *(_WORD *)&v487[18] || *(_WORD *)&v487[20])
  {
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
    int v362 = v480;
    LODWORD(v474.__end_) = v480;
    value = 0;
    unsigned int v476 = 0;
    v474.__end_cap_.__value_ = 0;
    uint64_t v353 = __p;
    int64_t v366 = v482.i64[0] - (void)__p;
    if ((void *)v482.i64[0] == __p)
    {
      v365 = 0;
      unint64_t v364 = 0;
    }
    else
    {
      if (v366 < 0) {
        goto LABEL_592;
      }
      unint64_t v364 = (unsigned int *)operator new(v482.i64[0] - (void)__p);
      v474.__end_cap_.__value_ = v364;
      value = (char *)v364;
      v365 = (char *)&v364[v366 >> 2];
      unsigned int v476 = v365;
      memcpy(v364, v353, v366);
      value = v365;
    }
    *(_OWORD *)&v478[48] = *(_OWORD *)v487;
    *(int8x16_t *)&v478[16] = v485;
    *(_OWORD *)&v478[32] = v486;
    int8x16_t v477 = v483;
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
    *(int8x16_t *)unsigned int v478 = v484;
    *(_WORD *)&v478[64] = v361;
    *(_DWORD *)&v478[66] = 0;
    *(_DWORD *)&v478[56] = v361;
  }
  else
  {
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
    int v362 = v480;
    LODWORD(v474.__end_) = v480;
    value = 0;
    unsigned int v476 = 0;
    v474.__end_cap_.__value_ = 0;
    uint64_t v353 = __p;
    int64_t v363 = v482.i64[0] - (void)__p;
    if ((void *)v482.i64[0] != __p)
    {
      if ((v363 & 0x8000000000000000) == 0)
      {
        unint64_t v364 = (unsigned int *)operator new(v482.i64[0] - (void)__p);
        v474.__end_cap_.__value_ = v364;
        value = (char *)v364;
        v365 = (char *)&v364[v363 >> 2];
        unsigned int v476 = v365;
        memcpy(v364, v353, v363);
        value = v365;
        goto LABEL_490;
      }
LABEL_592:
      abort();
    }
    v365 = 0;
    unint64_t v364 = 0;
LABEL_490:
    *(int8x16_t *)&v478[16] = v485;
    *(_OWORD *)&v478[32] = v486;
    *(_OWORD *)&v478[48] = *(_OWORD *)v487;
    int8x16_t v477 = v483;
    v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
    *(void *)&v478[62] = *(void *)&v487[14];
    *(int8x16_t *)unsigned int v478 = v484;
  }
  *((_DWORD *)v473 + 1150) = v362;
  uint64_t v368 = (void *)*((void *)v473 + 576);
  uint64_t v369 = v365;
  unint64_t v370 = (int8x16_t *)v439;
  if (v368)
  {
    *((void *)v473 + 577) = v368;
    operator delete(v368);
    *long long v433 = 0;
    *((void *)v473 + 577) = 0;
    *((void *)v473 + 578) = 0;
    unint64_t v364 = v474.__end_cap_.__value_;
    uint64_t v369 = value;
    v365 = v476;
    uint64_t v353 = __p;
  }
  *((void *)v473 + 576) = v364;
  *((void *)v473 + 577) = v369;
  *((void *)v473 + 578) = v365;
  long long v371 = *(_OWORD *)&v478[32];
  *(_OWORD *)(v439 + 32) = *(_OWORD *)&v478[16];
  *(_OWORD *)(v439 + 48) = v371;
  *(_OWORD *)(v439 + 64) = *(_OWORD *)&v478[48];
  *(void *)(v439 + 78) = *(void *)&v478[62];
  long long v372 = *(_OWORD *)v478;
  *(int8x16_t *)uint64_t v439 = v477;
  *(_OWORD *)(v439 + 16) = v372;
  if (!v471)
  {
    uint64_t v398 = a3;
    goto LABEL_548;
  }
  v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
  LODWORD(v474.__end_) = v480;
  value = 0;
  unsigned int v476 = 0;
  v474.__end_cap_.__value_ = 0;
  int64_t v373 = v482.i64[0] - (void)v353;
  if ((void *)v482.i64[0] != v353)
  {
    if (v373 < 0) {
      abort();
    }
    v474.__end_cap_.__value_ = (unsigned int *)operator new(v482.i64[0] - (void)v353);
    value = (char *)v474.__end_cap_.__value_;
    uint64_t v374 = (char *)&v474.__end_cap_.__value_[v373 >> 2];
    unsigned int v476 = v374;
    memcpy(v474.__end_cap_.__value_, v353, v373);
    value = v374;
  }
  *(_OWORD *)&v478[48] = *(_OWORD *)v487;
  *(int8x16_t *)unsigned int v478 = v484;
  int8x16_t v477 = v483;
  *(_OWORD *)&v478[32] = v486;
  v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C08;
  *(void *)&v478[62] = *(void *)&v487[14];
  *(int8x16_t *)&v478[16] = v485;
  *(_WORD *)&v478[66] = v466;
  *(_WORD *)&v478[64] = v471;
  *(_WORD *)&v478[68] = *((_WORD *)v473 + 996);
  *(void *)&v478[56] = *(void *)&v478[56] & 0xFE7FFFFF00000000 | (unsigned __int16)(v471 & ~v466) | ((unint64_t)(unsigned __int16)(*(_WORD *)&v478[68] & v471) << 16) | 0x80000000000000;
  uint64_t v375 = *(void *)(*((void *)v473 + 50) + 808);
  uint64_t v376 = *(void *)(v467 + 1928);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v375 + 7740));
  uint64_t v377 = *(void *)(v375 + 64);
  uint64_t v504 = 0;
  long long v505 = &v504;
  uint64_t v506 = 0x2020000000;
  uint64_t v507 = 0;
  uint64_t v378 = (os_unfair_lock_s *)(v377 + 1048);
  os_unfair_lock_lock((os_unfair_lock_t)(v377 + 1048));
  uint64_t v379 = *(unsigned int *)(v377 + 720);
  uint64_t v380 = *(void *)(v377 + 712);
  if (v379)
  {
    uint64_t v381 = 0;
    uint64_t v382 = (_WORD *)(v380 + 124);
    while (1)
    {
      int8x16_t v383 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v382 - 42), v477), veorq_s8(*(int8x16_t *)(v382 - 26), *(int8x16_t *)&v478[16])), vorrq_s8(veorq_s8(*(int8x16_t *)(v382 - 34), *(int8x16_t *)v478), veorq_s8(*(int8x16_t *)(v382 - 18), *(int8x16_t *)&v478[32])));
      *(int8x8_t *)v383.i8 = vorr_s8(*(int8x8_t *)v383.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v383, v383, 8uLL));
      if (!(*(void *)(v382 - 6) ^ *(void *)&v478[56] | (unsigned __int16)(*(v382 - 2) ^ *(_WORD *)&v478[64]) | (unsigned __int16)(*(v382 - 1) ^ *(_WORD *)&v478[66]) | (unint64_t)(unsigned __int16)(*v382 ^ *(_WORD *)&v478[68]) | v383.i32[0] | (*((_DWORD *)v382 - 5) ^ *(_DWORD *)&v478[48]) | v383.i32[1])) {
        break;
      }
      v382 += 64;
      if (v379 == ++v381) {
        goto LABEL_503;
      }
    }
    uint64_t v397 = v380 + 48 * v381;
  }
  else
  {
LABEL_503:
    uint64_t v384 = *(void *)(v380 + 704);
    if (v384)
    {
      unsigned int v385 = 1;
      while (1)
      {
        int8x16_t v386 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 40), v477), veorq_s8(*(int8x16_t *)(v384 + 72), *(int8x16_t *)&v478[16])), vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 56), *(int8x16_t *)v478), veorq_s8(*(int8x16_t *)(v384 + 88), *(int8x16_t *)&v478[32])));
        *(int8x8_t *)v386.i8 = vorr_s8(*(int8x8_t *)v386.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v386, v386, 8uLL));
        if (!(*(void *)(v384 + 112) ^ *(void *)&v478[56] | (unsigned __int16)(*(_WORD *)(v384 + 120) ^ *(_WORD *)&v478[64]) | (unsigned __int16)(*(_WORD *)(v384 + 122) ^ *(_WORD *)&v478[66]) | (unsigned __int16)(*(_WORD *)(v384 + 124) ^ *(_WORD *)&v478[68]) | v386.i32[0] | (*(_DWORD *)(v384 + 104) ^ *(_DWORD *)&v478[48]) | v386.i32[1]))
        {
          unsigned int v385 = 0;
          goto LABEL_527;
        }
        int8x16_t v387 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 168), v477), veorq_s8(*(int8x16_t *)(v384 + 200), *(int8x16_t *)&v478[16])), vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 184), *(int8x16_t *)v478), veorq_s8(*(int8x16_t *)(v384 + 216), *(int8x16_t *)&v478[32])));
        *(int8x8_t *)v387.i8 = vorr_s8(*(int8x8_t *)v387.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v387, v387, 8uLL));
        if (!(*(void *)(v384 + 240) ^ *(void *)&v478[56] | (unsigned __int16)(*(_WORD *)(v384 + 248) ^ *(_WORD *)&v478[64]) | (unsigned __int16)(*(_WORD *)(v384 + 250) ^ *(_WORD *)&v478[66]) | (unsigned __int16)(*(_WORD *)(v384 + 252) ^ *(_WORD *)&v478[68]) | v387.i32[0] | (*(_DWORD *)(v384 + 232) ^ *(_DWORD *)&v478[48]) | v387.i32[1])) {
          goto LABEL_527;
        }
        int8x16_t v388 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 296), v477), veorq_s8(*(int8x16_t *)(v384 + 328), *(int8x16_t *)&v478[16])), vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 312), *(int8x16_t *)v478), veorq_s8(*(int8x16_t *)(v384 + 344), *(int8x16_t *)&v478[32])));
        *(int8x8_t *)v388.i8 = vorr_s8(*(int8x8_t *)v388.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v388, v388, 8uLL));
        if (!(*(void *)(v384 + 368) ^ *(void *)&v478[56] | (unsigned __int16)(*(_WORD *)(v384 + 376) ^ *(_WORD *)&v478[64]) | (unsigned __int16)(*(_WORD *)(v384 + 378) ^ *(_WORD *)&v478[66]) | (unsigned __int16)(*(_WORD *)(v384 + 380) ^ *(_WORD *)&v478[68]) | v388.i32[0] | (*(_DWORD *)(v384 + 360) ^ *(_DWORD *)&v478[48]) | v388.i32[1]))
        {
          unsigned int v385 = 2;
          goto LABEL_527;
        }
        int8x16_t v389 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 424), v477), veorq_s8(*(int8x16_t *)(v384 + 456), *(int8x16_t *)&v478[16])), vorrq_s8(veorq_s8(*(int8x16_t *)(v384 + 440), *(int8x16_t *)v478), veorq_s8(*(int8x16_t *)(v384 + 472), *(int8x16_t *)&v478[32])));
        *(int8x8_t *)v389.i8 = vorr_s8(*(int8x8_t *)v389.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v389, v389, 8uLL));
        if (!(*(void *)(v384 + 496) ^ *(void *)&v478[56] | (unsigned __int16)(*(_WORD *)(v384 + 504) ^ *(_WORD *)&v478[64]) | (unsigned __int16)(*(_WORD *)(v384 + 506) ^ *(_WORD *)&v478[66]) | (unsigned __int16)(*(_WORD *)(v384 + 508) ^ *(_WORD *)&v478[68]) | v389.i32[0] | (*(_DWORD *)(v384 + 488) ^ *(_DWORD *)&v478[48]) | v389.i32[1])) {
          break;
        }
        uint64_t v384 = *(void *)(v384 + 704);
        if (!v384) {
          goto LABEL_510;
        }
      }
      unsigned int v385 = 3;
LABEL_527:
      uint64_t v397 = v384 + 48 * v385;
    }
    else
    {
LABEL_510:
      if (v379 == 4) {
        operator new();
      }
      uint64_t v390 = v380 + (v379 << 7);
      *(_DWORD *)(v390 + 8) = v474.__end_;
      if ((std::vector<unsigned int> *)v390 != &v474) {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v390 + 16), (char *)v474.__end_cap_.__value_, value, (value - (char *)v474.__end_cap_.__value_) >> 2);
      }
      int8x16_t v391 = v477;
      *(_OWORD *)(v390 + 56) = *(_OWORD *)v478;
      *(int8x16_t *)(v390 + 40) = v391;
      long long v392 = *(_OWORD *)&v478[16];
      long long v393 = *(_OWORD *)&v478[32];
      long long v394 = *(_OWORD *)&v478[48];
      *(void *)(v390 + 118) = *(void *)&v478[62];
      *(_OWORD *)(v390 + 104) = v394;
      *(_OWORD *)(v390 + 88) = v393;
      *(_OWORD *)(v390 + 72) = v392;
      uint64_t v395 = *(void *)(v377 + 712);
      unsigned int v396 = *(_DWORD *)(v377 + 720);
      *(_DWORD *)(v377 + 720) = v396 + 1;
      uint64_t v397 = v395 + 48 * v396;
    }
  }
  uint64_t v403 = v397 + 512;
  if (!*(void *)(v397 + 512))
  {
    long long v408 = dispatch_group_create();
    *(void *)uint64_t v403 = v408;
    goto LABEL_536;
  }
  if (*(unsigned char *)(v397 + 552))
  {
    unint64_t v404 = *(void *)(v397 + 520);
    if (v404)
    {
      uint64_t v405 = *(void *)(v404 + 1864);
      if (v405)
      {
        uint64_t v406 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v405);
        MEMORY[0x24566ED90](v406, 0x10F0C4099BF1763);
      }
      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(v404 + 512));
      unint64_t v407 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v404);
      MEMORY[0x24566ED90](v407, 0x10F2C408468EFAFLL);
    }
    *(void *)(v403 + 8) = 0;
    *(void *)(v403 + 16) = 0;

    *(void *)(v403 + 24) = 0;
    *(void *)(v403 + 32) = 0;
    *(unsigned char *)(v403 + 40) = 0;
    long long v408 = *(NSObject **)v403;
LABEL_536:
    dispatch_group_enter(v408);
    os_unfair_lock_unlock(v378);
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    uint64_t v411 = *(void *)(v375 + 6008);
    uint64_t v496 = (void *)MEMORY[0x263EF8330];
    uint64_t v497 = 3221225472;
    long long v498 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE32findOrCreateDriverProgramVariantINS1_25SWEndOfTileProgramVariantENS_19EndOfTileProgramKeyENS1_18SWEndOfTileProgramEEEPT_PT1_RKT0_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectE_block_invoke;
    long long v499 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))&unk_26516E8E0;
    long long v500 = &v504;
    v501.i64[0] = v375;
    v501.i64[1] = (uint64_t)&v474;
    *(void *)&long long v502 = v403;
    v409.i64[0] = *(void *)&v478[44];
    v412.i64[0] = __PAIR64__(v477.u32[3], v477.u32[1]);
    v412.i64[1] = *(void *)v478;
    v410.i32[0] = *(_DWORD *)&v478[40];
    int8x16_t v413 = vextq_s8(vextq_s8(v410, v410, 4uLL), v409, 0xCuLL);
    v413.i32[3] = v477.i32[0];
    int8x16_t v414 = vorrq_s8(v412, vorrq_s8(*(int8x16_t *)&v478[24], vorrq_s8(*(int8x16_t *)&v478[8], v413)));
    int8x8_t v415 = vorr_s8(*(int8x8_t *)v414.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v414, v414, 8uLL));
    if (*(void *)&v478[56] | v415.i32[0] | *(unsigned __int16 *)&v478[64] | *(unsigned __int16 *)&v478[66] | *(unsigned __int16 *)&v478[68] | v415.i32[1] | v477.i32[2]
      && (int8x16_t v416 = vorrq_s8(*(int8x16_t *)&v478[8], *(int8x16_t *)&v478[24]),
          *(int8x8_t *)v416.i8 = vorr_s8(*(int8x8_t *)v416.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v416, v416, 8uLL)),
          unsigned __int32 v417 = vorr_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v478[44], 1), *(int8x8_t *)v478).u32[0],
          (*(void *)&v478[56] | ((v416.i32[0] | *(_DWORD *)&v478[44] | v416.i32[1] | v417 | v477.i32[0] | v477.i32[1] | *(_DWORD *)&v478[40] | v477.i32[3] | *(_DWORD *)&v478[4] | v477.i32[2]) & 0x2000000 | (((v416.i8[0] | v478[44] | v416.i8[4] | v417) | (v477.i8[0] | v477.i8[4] | v478[40] | v477.i8[12] | v478[4] | v477.i8[8])) != 0)) ^ v477.i32[0] | *(unsigned __int16 *)&v478[64] | *(unsigned __int16 *)&v478[66] | *(unsigned __int16 *)&v478[68] | v477.i32[2] | v477.i32[3] | *(_DWORD *)&v478[40] | v477.i32[1] | *(_DWORD *)&v478[4] | v416.i32[0] | *(_DWORD *)&v478[44] | v416.i32[1] | v417) != 0x200000000000000))
    {
      uint64_t v418 = 0;
    }
    else
    {
      uint64_t v418 = *(void *)(v411 + 8);
    }
    unint64_t v419 = objc_opt_new();
    [v419 setSync:1];
    [v419 setPipelineCache:v418];
    [v419 setBinaryArchives:v376];
    unsigned int v488 = (void *)MEMORY[0x263EF8330];
    uint64_t v489 = 3221225472;
    long long v490 = ___ZN3AGX8Compiler14compileProgramINS_19EndOfTileProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
    *(void *)int v491 = &unk_26516F7C0;
    unint64_t v492 = &v496;
    AGX::Compiler::compileProgram<AGX::EndOfTileProgramKey,AGCDeserializedReply>((void **)v411, &v474, v419, (uint64_t)&v488);

    uint64_t v420 = v505[3];
    if (v420)
    {
LABEL_543:
      _Block_object_dispose(&v504, 8);
      if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
        IOGPUDeviceTraceEvent();
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v375 + 7740));
      *((void *)v473 + 610) = v420;
      v474.__begin_ = (std::vector<unsigned int>::pointer)&unk_26F853C48;
      if (v474.__end_cap_.__value_)
      {
        value = (char *)v474.__end_cap_.__value_;
        operator delete(v474.__end_cap_.__value_);
      }
      uint64_t v353 = __p;
      uint64_t v398 = a3;
      unint64_t v370 = (int8x16_t *)v439;
      goto LABEL_548;
    }
  }
  else
  {
    os_unfair_lock_unlock(v378);
    dispatch_group_wait(*(dispatch_group_t *)v403, 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v420 = *(void *)(v403 + 8);
    v505[3] = v420;
    if (v420) {
      goto LABEL_543;
    }
  }
  uint64_t result = MTLReleaseAssertionFailure();
  __break(1u);
  return result;
}

void sub_242A82224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void **a12, void **a13, void **a14, void **a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v68);
  if (a68) {
    operator delete(a68);
  }
  STACK[0x248] = (unint64_t)&unk_26F852B38;
  int v70 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v70;
    operator delete(v70);
  }
  *a17 = &unk_26F853C48;
  unsigned int v71 = *a13;
  if (*a13)
  {
    a49[593] = v71;
    operator delete(v71);
  }
  *a10 = &unk_26F853C48;
  int v72 = *a12;
  if (*a12)
  {
    a49[577] = v72;
    operator delete(v72);
  }
  *a11 = &unk_26F852B38;
  unsigned int v73 = *a14;
  if (*a14)
  {
    a49[566] = v73;
    operator delete(v73);
  }
  *a18 = &unk_26F852B38;
  int v74 = *a15;
  if (*a15)
  {
    a49[555] = v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(uint64_t a1)
{
  *(void *)(a1 + 4720) = &unk_26F853C48;
  char v2 = *(void **)(a1 + 4736);
  if (v2)
  {
    *(void *)(a1 + 4744) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 4592) = &unk_26F853C48;
  int v3 = *(void **)(a1 + 4608);
  if (v3)
  {
    *(void *)(a1 + 4616) = v3;
    operator delete(v3);
  }
  *(void *)(a1 + 4504) = &unk_26F852B38;
  unsigned int v4 = *(void **)(a1 + 4520);
  if (v4)
  {
    *(void *)(a1 + 4528) = v4;
    operator delete(v4);
  }
  *(void *)(a1 + 4416) = &unk_26F852B38;
  BOOL v5 = *(void **)(a1 + 4432);
  if (v5)
  {
    *(void *)(a1 + 4440) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_242A82C90(_Unwind_Exception *exception_object)
{
  v1[590] = &unk_26F853C48;
  int v3 = (void *)v1[592];
  if (v3)
  {
    v1[593] = v3;
    operator delete(v3);
  }
  v1[574] = &unk_26F853C48;
  unsigned int v4 = (void *)v1[576];
  if (v4)
  {
    v1[577] = v4;
    operator delete(v4);
  }
  v1[563] = &unk_26F852B38;
  BOOL v5 = (void *)v1[565];
  if (v5)
  {
    v1[566] = v5;
    operator delete(v5);
  }
  v1[552] = &unk_26F852B38;
  long long v6 = (void *)v1[554];
  if (v6)
  {
    v1[555] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBGOProgramVariant(void *a1, int a2)
{
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      uint64_t v2 = a1[549];
      if (v2) {
        return v2;
      }
    }
    else if (a2)
    {
      return 0;
    }
    return a1[548];
  }
  uint64_t v3 = *(void *)(a1[50] + 808);
  int v7 = 13;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t __p = 0;
  long long v6 = &unk_26F852AF8;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unsigned int v4 = (_DWORD **)MEMORY[0x263F4B1E8];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 7712));
  uint64_t v2 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::BackgroundObjectProgramVariant,AGX::BackgroundObjectProgramKey,AGX::HAL200::BackgroundObjectProgram>(v3, *(os_unfair_lock_s **)v3, (uint64_t)&v6, 0);
  if (**v4) {
    IOGPUDeviceTraceEvent();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 7712));
  long long v6 = &unk_26F852B38;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_242A82EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getEOTProgramVariant(void *a1, int a2)
{
  if (a2 == 2)
  {
    int v7 = 19;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t __p = 0;
    long long v6 = &unk_26F853C08;
    memset(v15, 0, sizeof(v15));
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    uint64_t v3 = *(void *)(a1[50] + 808);
    unsigned int v4 = (_DWORD **)MEMORY[0x263F4B1E8];
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 7716));
    uint64_t v2 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDriverProgramVariant<AGX::HAL200::EndOfTileProgramVariant,AGX::EndOfTileProgramKey,AGX::HAL200::EndOfTileProgram>(v3, *(os_unfair_lock_s **)(v3 + 8), (uint64_t)&v6, 0);
    if (**v4) {
      IOGPUDeviceTraceEvent();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 7716));
    long long v6 = &unk_26F853C48;
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
  }
  else if (a2 == 1)
  {
    return a1[606];
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    return a1[607];
  }
  return v2;
}

void sub_242A830B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setColorStoreAction(uint64_t result, uint64_t a2, char a3)
{
  unsigned int v3 = 1 << a3;
  if ((*(_DWORD *)(result + 4916) & (1 << a3)) != 0)
  {
    switch(a2)
    {
      case 0:
        *(int8x8_t *)(result + 1472) = vand_s8(*(int8x8_t *)(result + 1472), (int8x8_t)vdup_n_s32(~(257 << a3)));
        *(_DWORD *)(result + 4904) &= ~v3;
        *(_DWORD *)(result + 4912) &= ~v3;
        int v4 = *(_DWORD *)(result + 4908) | v3;
        goto LABEL_16;
      case 1:
        *(int8x8_t *)(result + 1472) = vand_s8(vorr_s8(*(int8x8_t *)(result + 1472), (int8x8_t)vdup_n_s32(v3)), (int8x8_t)vdup_n_s32(~(1 << (a3 + 8))));
        *(_DWORD *)(result + 4904) |= v3;
        *(int8x8_t *)(result + 4908) = vand_s8(*(int8x8_t *)(result + 4908), (int8x8_t)vdup_n_s32(~v3));
        break;
      case 2:
        int v5 = *(_DWORD *)(result + 1472) & ~v3;
        int v6 = *(_DWORD *)(result + 1476) & ~v3;
        int v7 = 1 << (a3 + 8);
        int v8 = v5 | v7;
        int v9 = v6 & ~v7;
        int v10 = v5 & ~v7;
        int v11 = v6 | v7;
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1992)) != 0) {
          int v12 = v10;
        }
        else {
          int v12 = v8;
        }
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1992)) != 0) {
          int v13 = v11;
        }
        else {
          int v13 = v9;
        }
        *(_DWORD *)(result + 1472) = v12;
        *(_DWORD *)(result + 1476) = v13;
        *(_DWORD *)(result + 4912) |= v3;
        *(int8x8_t *)(result + 4904) = vand_s8(*(int8x8_t *)(result + 4904), (int8x8_t)vdup_n_s32(~v3));
        break;
      case 3:
        int v14 = *(_DWORD *)(result + 1472);
        int v15 = 257 << a3;
        if (((unsigned __int16)v3 & *(_WORD *)(result + 1992)) != 0)
        {
          *(_DWORD *)(result + 1472) = v14 & ~v15;
          int v16 = v15 | *(_DWORD *)(result + 1476);
        }
        else
        {
          *(_DWORD *)(result + 1472) = v15 | v14;
          int v16 = *(_DWORD *)(result + 1476) & ~v15;
        }
        *(_DWORD *)(result + 1476) = v16;
        *(_DWORD *)(result + 4904) |= v3;
        *(_DWORD *)(result + 4912) |= v3;
        int v4 = *(_DWORD *)(result + 4908) & ~v3;
LABEL_16:
        *(_DWORD *)(result + 4908) = v4;
        break;
      default:
        return result;
    }
  }
  return result;
}

unsigned char *AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateFastClearConfig(unsigned char *result, unsigned int *a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = (result[4896] & (result[4912] | result[4904]));
  if ((result[4896] & (result[4912] | result[4904])) != 0)
  {
    while (1)
    {
      uint64_t v4 = __clz(__rbit32(v3));
      int v5 = &a2[32 * (unint64_t)v2];
      uint64_t v6 = *(void *)&result[8 * v4 + 2432];
      *((void *)v5 + 1) = v6;
      int v7 = v5 + 2;
      unsigned int v8 = *(_DWORD *)(*(void *)(v6 + 208) + 32);
      if (v8 > 0x12) {
        break;
      }
      int v9 = 1 << v8;
      if ((v9 & 0x40A20) != 0)
      {
        int v10 = &result[16 * v4];
        uint64_t v11 = *((void *)v10 + 434);
        v12.i64[0] = v11;
        v12.i64[1] = HIDWORD(v11);
        float64x2_t v13 = vcvtq_f64_u64(v12);
        uint64_t v14 = *((void *)v10 + 435);
        v12.i64[0] = v14;
        v12.i64[1] = HIDWORD(v14);
        float64x2_t v15 = vcvtq_f64_u64(v12);
      }
      else
      {
        if ((v9 & 0x510) == 0) {
          break;
        }
        int v16 = &result[16 * v4];
        uint64_t v17 = *((void *)v16 + 434);
        v18.i64[0] = (int)v17;
        v18.i64[1] = SHIDWORD(v17);
        float64x2_t v13 = vcvtq_f64_s64(v18);
        uint64_t v19 = *((void *)v16 + 435);
        v18.i64[0] = (int)v19;
        v18.i64[1] = SHIDWORD(v19);
        float64x2_t v15 = vcvtq_f64_s64(v18);
      }
LABEL_10:
      __int32 v21 = &a2[32 * (unint64_t)v2];
      *(float64x2_t *)(v21 + 26) = v13;
      *(float64x2_t *)(v21 + 30) = v15;
      uint64_t v22 = (unsigned __int16 *)&result[6 * v4];
      int v23 = v22[2472];
      v7[2] = v22[2473];
      v7[3] = v23;
      v7[4] = v22[2474];
      uint64_t v24 = (3 * v4);
      *((void *)v7 + 3) = *(void *)&result[8 * v24 + 2000];
      *((void *)v7 + 4) = *(void *)&result[8 * v24 + 2008];
      *((void *)v7 + 5) = *(void *)&result[8 * v24 + 2016];
      *((void *)v7 + 6) = 0;
      int v25 = 1 << v4;
      if ((*((_DWORD *)result + 1228) & (1 << v4)) != 0)
      {
        *((void *)v7 + 6) = *(void *)&result[8 * v4 + 2512];
        unsigned int v26 = (unsigned __int16 *)&result[6 * v4];
        int v27 = v26[2496];
        v7[14] = v26[2497];
        v7[15] = v27;
        v7[16] = v26[2498];
        *((void *)v7 + 9) = *(void *)&result[8 * v24 + 2240];
        *((void *)v7 + 10) = *(void *)&result[8 * v24 + 2248];
        *((void *)v7 + 11) = *(void *)&result[8 * v24 + 2256];
      }
      ++v2;
      v3 ^= v25;
      if (!v3) {
        goto LABEL_12;
      }
    }
    uint64_t v20 = (float32x2_t *)&result[16 * v4];
    float64x2_t v13 = vcvtq_f64_f32(v20[434]);
    float64x2_t v15 = vcvtq_f64_f32(v20[435]);
    goto LABEL_10;
  }
LABEL_12:
  *a2 = v2;
  return result;
}

double AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateResourceGroupUsage(uint64_t a1, void *a2)
{
  for (unsigned int i = *(_DWORD *)(a1 + 3956); i; i ^= 1 << v5)
  {
    uint64_t v5 = __clz(__rbit32(i));
    uint64_t v6 = (3 * v5);
    double result = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, *(void *)(a1 + 8 * v5 + 2432), *(void *)(a1 + 2000 + 8 * v6), *(unsigned __int16 *)(a1 + 6 * v5 + 4946), *(unsigned __int16 *)(a1 + 6 * v5 + 4944), *(unsigned __int16 *)(a1 + 6 * v5 + 4948));
    if ((*(_DWORD *)(a1 + 3960) & (1 << v5)) != 0) {
      double result = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, *(void *)(a1 + 8 * v5 + 2512), *(void *)(a1 + 2240 + 8 * v6), *(unsigned __int16 *)(a1 + 6 * v5 + 4994), *(unsigned __int16 *)(a1 + 6 * v5 + 4992), *(unsigned __int16 *)(a1 + 6 * v5 + 4996));
    }
  }
  uint64_t v8 = *(void *)(a1 + 2496);
  if (v8) {
    double result = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, v8, *(void *)(a1 + 2192), *(unsigned __int16 *)(a1 + 5042), *(unsigned __int16 *)(a1 + 5040), *(unsigned __int16 *)(a1 + 5044));
  }
  uint64_t v9 = *(void *)(a1 + 2504);
  if (v9) {
    double result = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, v9, *(void *)(a1 + 2216), *(unsigned __int16 *)(a1 + 5048), *(unsigned __int16 *)(a1 + 5046), *(unsigned __int16 *)(a1 + 5050));
  }
  uint64_t v10 = *(void *)(a1 + 5152);
  if (v10) {
    double result = AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, *(void *)(a1 + 5184), v10, *(unsigned __int16 *)(a1 + 5200), *(unsigned __int16 *)(a1 + 5198), *(unsigned __int16 *)(a1 + 5202));
  }
  uint64_t v11 = *(void *)(a1 + 5128);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 5176);
    unsigned int v13 = *(unsigned __int16 *)(a1 + 5194);
    int v14 = *(unsigned __int16 *)(a1 + 5192);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 5196);
    return AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(a2, v12, v11, v13, v14, v15);
  }
  return result;
}

unint64_t AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchDepthResolveStoreActions(unint64_t result, int a2, int a3)
{
  if (!a3) {
    return result;
  }
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 5120);
  if (!v4) {
    return result;
  }
  unint64_t v5 = *(void *)(result + 5088);
  unint64_t v6 = *(void *)(result + 5104);
  uint64_t v7 = *(void *)(result + 5176);
  uint64_t v8 = *(void *)(v7 + 380);
  if (a2)
  {
    if ((*(void *)(v7 + 380) & 0xFF00) == 0x400)
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(result + 5176), 0);
      int v9 = *(_DWORD *)(v7 + 236);
      if (v9) {
        LODWORD(v10) = (result + v9 - 1) & -v9;
      }
      else {
        LODWORD(v10) = result;
      }
      uint64_t v11 = *(void *)(v7 + 488);
      if (!v11) {
        goto LABEL_41;
      }
    }
    else if ((v8 & 0x10000) != 0)
    {
      uint64_t v15 = *(void *)(result + 5176);
      if (*(void *)(v7 + 380))
      {
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v15, 0);
        uint64_t v16 = *(unsigned int *)(v7 + 236);
        if (v16) {
          uint64_t v10 = (result + v16 - 1) & -v16;
        }
        else {
          LODWORD(v10) = result;
        }
        uint64_t v11 = *(void *)(v7 + 488);
        if (!v11) {
          goto LABEL_41;
        }
      }
      else
      {
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v15, 0);
        LODWORD(v10) = (result * *(_DWORD *)(v7 + 132) + 127) & 0xFFFFFF80;
        uint64_t v7 = *(void *)(v3 + 5176);
        uint64_t v11 = *(void *)(v7 + 488);
        if (!v11) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      LODWORD(v10) = 0;
      uint64_t v11 = *(void *)(v7 + 488);
      if (!v11) {
        goto LABEL_41;
      }
    }
    LODWORD(v19) = *(_DWORD *)(v11 + 1080);
    if (!v19) {
      goto LABEL_42;
    }
    uint64_t v20 = *(void *)(v7 + 380);
    if ((v20 & 0xFF00) == 0x400)
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v11, 0);
      int v21 = *(_DWORD *)(v11 + 236);
      if (v21) {
        LODWORD(v19) = (result + v21 - 1) & -v21;
      }
      else {
        LODWORD(v19) = result;
      }
      goto LABEL_42;
    }
    if ((v20 & 0x10000) != 0)
    {
      if ((*(void *)(v11 + 380) & 0xFF00) == 0x400)
      {
        unint64_t v27 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v11, 0);
        uint64_t v28 = *(unsigned int *)(v11 + 236);
        uint64_t v29 = (v27 + v28 - 1) & -v28;
        if (!v28) {
          uint64_t v29 = v27;
        }
        double result = 6 * v29;
      }
      else
      {
        if (!*(void *)(v11 + 380))
        {
          double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v11, 0);
          LODWORD(v19) = (result * *(_DWORD *)(v11 + 132) + 127) & 0xFFFFFF80;
          goto LABEL_42;
        }
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v11, 0);
        LODWORD(v28) = *(_DWORD *)(v11 + 236);
      }
      if (v28) {
        uint64_t v19 = (result + v28 - 1) & -(uint64_t)v28;
      }
      else {
        LODWORD(v19) = result;
      }
LABEL_42:
      if (v10 >> 14) {
        unsigned int v22 = 0x4000;
      }
      else {
        unsigned int v22 = 128;
      }
      if (v10 >> 14) {
        char v23 = 14;
      }
      else {
        char v23 = 7;
      }
      unsigned int v24 = ((v10 >> v23) - 1) & 0xFFFFF;
      if (v22 <= v10) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      *(void *)(v3 + 4240) = *(void *)(v3 + 4240) & 0xFFFFFFFC00003FFELL | (v10 >> 14 != 0) | (v25 << 14);
      if (v19 >= 0x80) {
        uint64_t v26 = ((v19 << 7) & 0xFFFFC000) - 0x4000;
      }
      else {
        uint64_t v26 = 0;
      }
      *(void *)(v3 + 4312) = *(void *)(v3 + 4312) & 0xFFFFFFFF00003FFFLL | v26;
      *(void *)(v3 + 4208) = *(void *)(v3 + 4208) & 0xFFFF00000000007FLL | (((v5 >> 7) & 0x1FFFFFFFFFFLL) << 7);
      *(void *)(v3 + 4352) = *(void *)(v3 + 4352) & 0xFFFF00000000007FLL | (((v6 >> 7) & 0x1FFFFFFFFFFLL) << 7);
      *(void *)(v3 + 4176) = *(void *)(v3 + 4176) & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(v4 & 3) << 58);
      *(_WORD *)(v3 + 4374) |= 3u;
      *(unsigned char *)(v3 + 3964) = 1;
      return result;
    }
LABEL_41:
    LODWORD(v19) = 0;
    goto LABEL_42;
  }
  if ((*(void *)(v7 + 380) & 0xFF00) == 0x400)
  {
    double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(result + 5176), 0);
    int v12 = *(_DWORD *)(v7 + 236);
    if (v12) {
      LODWORD(v13) = (result + v12 - 1) & -v12;
    }
    else {
      LODWORD(v13) = result;
    }
    uint64_t v14 = *(void *)(v7 + 488);
    if (!v14) {
      goto LABEL_66;
    }
  }
  else if ((v8 & 0x10000) != 0)
  {
    uint64_t v17 = *(void *)(result + 5176);
    if (*(void *)(v7 + 380))
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v17, 0);
      uint64_t v18 = *(unsigned int *)(v7 + 236);
      if (v18) {
        uint64_t v13 = (result + v18 - 1) & -v18;
      }
      else {
        LODWORD(v13) = result;
      }
      uint64_t v14 = *(void *)(v7 + 488);
      if (!v14) {
        goto LABEL_66;
      }
    }
    else
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v17, 0);
      LODWORD(v13) = (result * *(_DWORD *)(v7 + 132) + 127) & 0xFFFFFF80;
      uint64_t v7 = *(void *)(v3 + 5176);
      uint64_t v14 = *(void *)(v7 + 488);
      if (!v14) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    LODWORD(v13) = 0;
    uint64_t v14 = *(void *)(v7 + 488);
    if (!v14) {
      goto LABEL_66;
    }
  }
  LODWORD(v30) = *(_DWORD *)(v14 + 1080);
  if (!v30) {
    goto LABEL_67;
  }
  uint64_t v31 = *(void *)(v7 + 380);
  if ((v31 & 0xFF00) == 0x400)
  {
    double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v14, 0);
    int v32 = *(_DWORD *)(v14 + 236);
    if (v32) {
      LODWORD(v30) = (result + v32 - 1) & -v32;
    }
    else {
      LODWORD(v30) = result;
    }
    goto LABEL_67;
  }
  if ((v31 & 0x10000) == 0)
  {
LABEL_66:
    LODWORD(v30) = 0;
    goto LABEL_67;
  }
  if ((*(void *)(v14 + 380) & 0xFF00) == 0x400)
  {
    unint64_t v38 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v14, 0);
    uint64_t v39 = *(unsigned int *)(v14 + 236);
    uint64_t v40 = (v38 + v39 - 1) & -v39;
    if (!v39) {
      uint64_t v40 = v38;
    }
    double result = 6 * v40;
  }
  else
  {
    if (!*(void *)(v14 + 380))
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v14, 0);
      LODWORD(v30) = (result * *(_DWORD *)(v14 + 132) + 127) & 0xFFFFFF80;
      goto LABEL_67;
    }
    double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v14, 0);
    LODWORD(v39) = *(_DWORD *)(v14 + 236);
  }
  if (v39) {
    uint64_t v30 = (result + v39 - 1) & -(uint64_t)v39;
  }
  else {
    LODWORD(v30) = result;
  }
LABEL_67:
  if (v13 >> 14) {
    unsigned int v33 = 0x4000;
  }
  else {
    unsigned int v33 = 128;
  }
  if (v13 >> 14) {
    char v34 = 14;
  }
  else {
    char v34 = 7;
  }
  unsigned int v35 = ((v13 >> v34) - 1) & 0xFFFFF;
  if (v33 <= v13) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  *(void *)(v3 + 4048) = *(void *)(v3 + 4048) & 0xFFFFFFFC00003FFELL | (v13 >> 14 != 0) | (v36 << 14);
  if (v30 >= 0x80) {
    uint64_t v37 = ((v30 << 7) & 0xFFFFC000) - 0x4000;
  }
  else {
    uint64_t v37 = 0;
  }
  *(void *)(v3 + 4120) = *(void *)(v3 + 4120) & 0xFFFFFFFF00003FFFLL | v37;
  *(void *)(v3 + 4016) = *(void *)(v3 + 4016) & 0xFFFF00000000007FLL | (((v5 >> 7) & 0x1FFFFFFFFFFLL) << 7);
  *(void *)(v3 + 4160) = *(void *)(v3 + 4160) & 0xFFFF00000000007FLL | (((v6 >> 7) & 0x1FFFFFFFFFFLL) << 7);
  *(void *)(v3 + 3984) = *(void *)(v3 + 3984) & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(v4 & 3) << 58);
  *(_WORD *)(v3 + 4372) |= 2u;
  *(_WORD *)(v3 + 4370) |= (*(_WORD *)(v3 + 4378) & 1) == 0;
  return result;
}

unint64_t AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchStencilResolveStoreActions(unint64_t result, int a2, int a3)
{
  if (!a3) {
    return result;
  }
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 5124);
  if (!v4) {
    return result;
  }
  uint64_t v5 = *(void *)(result + 5184);
  unsigned int v6 = *(_DWORD *)(*(void *)(v5 + 208) + 24) - 1;
  unint64_t v7 = *(void *)(result + 5096);
  unint64_t v8 = *(void *)(result + 5112);
  int v9 = *(_DWORD *)(result + 5120);
  uint64_t v10 = *(void *)(v5 + 380);
  if (a2)
  {
    if ((*(void *)(v5 + 380) & 0xFF00) == 0x400)
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(result + 5184), *(_DWORD *)(*(void *)(v5 + 208) + 24) - 1);
      int v11 = *(_DWORD *)(v5 + 236);
      if (v11) {
        LODWORD(v12) = (result + v11 - 1) & -v11;
      }
      else {
        LODWORD(v12) = result;
      }
    }
    else if ((v10 & 0x10000) != 0)
    {
      uint64_t v15 = *(void *)(result + 5184);
      unsigned int v16 = *(_DWORD *)(*(void *)(v5 + 208) + 24) - 1;
      if (*(void *)(v5 + 380))
      {
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v15, v16);
        uint64_t v17 = *(unsigned int *)(v5 + 236);
        if (v17) {
          uint64_t v12 = (result + v17 - 1) & -v17;
        }
        else {
          LODWORD(v12) = result;
        }
      }
      else
      {
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v15, v16);
        LODWORD(v12) = (result * *(_DWORD *)(v5 + 132) + 127) & 0xFFFFFF80;
        uint64_t v5 = *(void *)(v3 + 5184);
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    uint64_t v21 = *(void *)(v5 + 488);
    if (!v21) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(v21 + 1080))
    {
      uint64_t v22 = *(void *)(v5 + 380);
      if ((v22 & 0xFF00) == 0x400)
      {
        uint64_t v23 = v21 + 536 * v6;
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v23, 0);
        int v24 = *(_DWORD *)(v23 + 236);
        if (v24) {
          LODWORD(v21) = (result + v24 - 1) & -v24;
        }
        else {
          LODWORD(v21) = result;
        }
        goto LABEL_33;
      }
      if ((v22 & 0x10000) != 0)
      {
        uint64_t v30 = v21 + 536 * v6;
        if ((*(void *)(v30 + 380) & 0xFF00) == 0x400)
        {
          unint64_t v31 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v30, 0);
          uint64_t v32 = *(unsigned int *)(v30 + 236);
          uint64_t v33 = (v31 + v32 - 1) & -v32;
          if (!v32) {
            uint64_t v33 = v31;
          }
          double result = 6 * v33;
        }
        else
        {
          if (!*(void *)(v30 + 380))
          {
            double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v30, 0);
            LODWORD(v21) = (result * *(_DWORD *)(v30 + 132) + 127) & 0xFFFFFF80;
            goto LABEL_33;
          }
          double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v30, 0);
          LODWORD(v32) = *(_DWORD *)(v30 + 236);
        }
        if (v32) {
          uint64_t v21 = (result + v32 - 1) & -(uint64_t)v32;
        }
        else {
          LODWORD(v21) = result;
        }
LABEL_33:
        if (v12 >> 14) {
          unsigned int v25 = 0x4000;
        }
        else {
          unsigned int v25 = 128;
        }
        if (v12 >> 14) {
          char v26 = 14;
        }
        else {
          char v26 = 7;
        }
        unsigned int v27 = (v12 >> v26 << 14) - 0x4000;
        if (v25 <= v12) {
          unsigned int v28 = v27;
        }
        else {
          unsigned int v28 = 0;
        }
        *(void *)(v3 + 4256) = *(void *)(v3 + 4256) & 0xFFFFFFFF00003FFELL | v28 | (v12 >> 14 != 0);
        if (v21 >= 0x80) {
          uint64_t v29 = ((v21 << 7) & 0xFFFFC000) - 0x4000;
        }
        else {
          uint64_t v29 = 0;
        }
        *(void *)(v3 + 4320) = *(void *)(v3 + 4320) & 0xFFFFFFFF00003FFFLL | v29;
        *(void *)(v3 + 4224) = *(void *)(v3 + 4224) & 0xFFFF00000000007FLL | (((v7 >> 7) & 0x1FFFFFFFFFFLL) << 7);
        *(void *)(v3 + 4360) = *(void *)(v3 + 4360) & 0xFFFF00000000007FLL | (((v8 >> 7) & 0x1FFFFFFFFFFLL) << 7);
        *(void *)(v3 + 4176) = *(void *)(v3 + 4176) & 0xF0FFFFFFFFFFFFFFLL | ((unint64_t)(v4 & 3) << 56) | ((unint64_t)(v9 & 3) << 58);
        *(_WORD *)(v3 + 4374) |= 0xCu;
        *(unsigned char *)(v3 + 3964) = 1;
        return result;
      }
    }
    LODWORD(v21) = 0;
    goto LABEL_33;
  }
  if ((*(void *)(v5 + 380) & 0xFF00) == 0x400)
  {
    double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(result + 5184), *(_DWORD *)(*(void *)(v5 + 208) + 24) - 1);
    int v13 = *(_DWORD *)(v5 + 236);
    if (v13) {
      LODWORD(v14) = (result + v13 - 1) & -v13;
    }
    else {
      LODWORD(v14) = result;
    }
  }
  else if ((v10 & 0x10000) != 0)
  {
    uint64_t v18 = *(void *)(result + 5184);
    unsigned int v19 = *(_DWORD *)(*(void *)(v5 + 208) + 24) - 1;
    if (*(void *)(v5 + 380))
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v18, v19);
      uint64_t v20 = *(unsigned int *)(v5 + 236);
      if (v20) {
        uint64_t v14 = (result + v20 - 1) & -v20;
      }
      else {
        LODWORD(v14) = result;
      }
    }
    else
    {
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v18, v19);
      LODWORD(v14) = (result * *(_DWORD *)(v5 + 132) + 127) & 0xFFFFFF80;
      uint64_t v5 = *(void *)(v3 + 5184);
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  uint64_t v34 = *(void *)(v5 + 488);
  if (v34)
  {
    if (!*(_DWORD *)(v34 + 1080)) {
      goto LABEL_58;
    }
    uint64_t v35 = *(void *)(v5 + 380);
    if ((v35 & 0xFF00) == 0x400)
    {
      uint64_t v36 = v34 + 536 * v6;
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v36, 0);
      int v37 = *(_DWORD *)(v36 + 236);
      if (v37) {
        LODWORD(v34) = (result + v37 - 1) & -v37;
      }
      else {
        LODWORD(v34) = result;
      }
      goto LABEL_59;
    }
    if ((v35 & 0x10000) == 0)
    {
LABEL_58:
      LODWORD(v34) = 0;
      goto LABEL_59;
    }
    uint64_t v43 = v34 + 536 * v6;
    if ((*(void *)(v43 + 380) & 0xFF00) == 0x400)
    {
      unint64_t v44 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v43, 0);
      uint64_t v45 = *(unsigned int *)(v43 + 236);
      uint64_t v46 = (v44 + v45 - 1) & -v45;
      if (!v45) {
        uint64_t v46 = v44;
      }
      double result = 6 * v46;
    }
    else
    {
      if (!*(void *)(v43 + 380))
      {
        double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v43, 0);
        LODWORD(v34) = (result * *(_DWORD *)(v43 + 132) + 127) & 0xFFFFFF80;
        goto LABEL_59;
      }
      double result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v43, 0);
      LODWORD(v45) = *(_DWORD *)(v43 + 236);
    }
    if (v45) {
      uint64_t v34 = (result + v45 - 1) & -(uint64_t)v45;
    }
    else {
      LODWORD(v34) = result;
    }
  }
LABEL_59:
  if (v14 >> 14) {
    unsigned int v38 = 0x4000;
  }
  else {
    unsigned int v38 = 128;
  }
  if (v14 >> 14) {
    char v39 = 14;
  }
  else {
    char v39 = 7;
  }
  unsigned int v40 = (v14 >> v39 << 14) - 0x4000;
  if (v38 <= v14) {
    unsigned int v41 = v40;
  }
  else {
    unsigned int v41 = 0;
  }
  *(void *)(v3 + 4064) = *(void *)(v3 + 4064) & 0xFFFFFFFF00003FFELL | v41 | (v14 >> 14 != 0);
  if (v34 >= 0x80) {
    uint64_t v42 = ((v34 << 7) & 0xFFFFC000) - 0x4000;
  }
  else {
    uint64_t v42 = 0;
  }
  *(void *)(v3 + 4128) = *(void *)(v3 + 4128) & 0xFFFFFFFF00003FFFLL | v42;
  *(void *)(v3 + 4032) = *(void *)(v3 + 4032) & 0xFFFF00000000007FLL | (((v7 >> 7) & 0x1FFFFFFFFFFLL) << 7);
  *(void *)(v3 + 4168) = *(void *)(v3 + 4168) & 0xFFFF00000000007FLL | (((v8 >> 7) & 0x1FFFFFFFFFFLL) << 7);
  *(void *)(v3 + 3984) = *(void *)(v3 + 3984) & 0xF0FFFFFFFFFFFFFFLL | ((unint64_t)(v4 & 3) << 56) | ((unint64_t)(v9 & 3) << 58);
  *(_WORD *)(v3 + 4372) |= 8u;
  *(_WORD *)(v3 + 4370) |= ~*(_WORD *)(v3 + 4378) & 4;
  return result;
}

unint64_t AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions(unint64_t result)
{
  unint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)(result + 4904);
  unsigned int v3 = *(_DWORD *)(result + 4912);
  int v4 = *(_DWORD *)(result + 4908);
  int v5 = *(_DWORD *)(result + 4916) & ~(v3 | v2 | v4);
  *(_DWORD *)(result + 4916) = v5;
  int v6 = *(_DWORD *)(result + 4900);
  *(unsigned char *)(result + 3897) = ((v5 | v2) & v6) != 0;
  *(unsigned char *)(result + 3905) = ((v5 | v2) & ~v6) != 0;
  int v7 = *(_DWORD *)(result + 3960) & v5;
  *(unsigned char *)(result + 1994) = (v7 | v3) != 0;
  if (*(unsigned char *)(result + 3906)) {
    int v8 = 0;
  }
  else {
    int v8 = *(_DWORD *)(result + 4896);
  }
  int v9 = (v8 | v6) & v3 | v7;
  BOOL v10 = (*(_DWORD *)(result + 4896) & (v5 | v2)) != 0 && *(unsigned char *)(result + 3906) == 0;
  if (v9) {
    char v11 = 1;
  }
  else {
    char v11 = v10;
  }
  *(unsigned char *)(result + 3904) = v11;
  if ((v5 & 0x200) != 0)
  {
    v2 |= 0x200u;
    *(_DWORD *)(result + 4904) = v2;
    v3 |= 0x200u;
    *(_DWORD *)(result + 4912) = v3;
    v4 &= ~0x200u;
    *(_DWORD *)(result + 4908) = v4;
    *(_WORD *)(result + 4380) &= ~8u;
    v5 &= ~0x200u;
    *(_DWORD *)(result + 4916) = v5;
    if ((v5 & 0x100) == 0)
    {
LABEL_12:
      if (!*(void *)(result + 5088)) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v2 |= 0x100u;
  *(_DWORD *)(result + 4904) = v2;
  v3 |= 0x100u;
  *(_DWORD *)(result + 4912) = v3;
  *(_DWORD *)(result + 4908) = v4 & 0xFFFFFEFF;
  *(_WORD *)(result + 4380) &= ~2u;
  *(_DWORD *)(result + 4916) = v5 & 0xFFFFFEFF;
  if (*(void *)(result + 5088)) {
LABEL_13:
  }
    double result = AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchDepthResolveStoreActions(result, (v2 >> 8) & 1, (v3 >> 8) & 1);
LABEL_14:
  if (*(void *)(v1 + 5096)) {
    double result = AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchStencilResolveStoreActions(v1, (*(_DWORD *)(v1 + 4904) >> 9) & 1, (*(_DWORD *)(v1 + 4912) >> 9) & 1);
  }
  if (*(void *)(v1 + 5088))
  {
    unsigned int v12 = *(_DWORD *)(v1 + 4912);
    unsigned int v13 = *(_DWORD *)(v1 + 4904);
    double result = AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchDepthResolveStoreActions(v1, (v13 >> 8) & 1, (v12 >> 8) & 1);
    if ((v12 & 0x100) != 0)
    {
      if (*(_DWORD *)(v1 + 5120))
      {
        unint64_t v14 = *(void *)(v1 + 5232);
        uint64_t v15 = 4176;
        unint64_t v16 = v1 + 4176;
        if ((v13 & 0x100) == 0)
        {
          uint64_t v15 = 3984;
          unint64_t v16 = v1 + 3984;
        }
        *(void *)(v16 + 96) = *(void *)(v16 + 96) & 0xFFFF00000000007FLL | (((v14 >> 7) & 0x1FFFFFFFFFFLL) << 7);
        *(void *)(v1 + v15) = *(void *)(v1 + v15) & 0xFFFFFFFFFFFFFFBFLL | ((unint64_t)(v14 != 0) << 6);
      }
    }
  }
  if (*(void *)(v1 + 5096))
  {
    unsigned int v17 = *(_DWORD *)(v1 + 4912);
    unsigned int v18 = *(_DWORD *)(v1 + 4904);
    double result = AGX::FramebufferGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchStencilResolveStoreActions(v1, (v18 >> 9) & 1, (v17 >> 9) & 1);
    if ((v17 & 0x200) != 0)
    {
      if (*(_DWORD *)(v1 + 5124))
      {
        unint64_t v19 = *(void *)(v1 + 5240);
        uint64_t v20 = 4176;
        unint64_t v21 = v1 + 4176;
        if ((v18 & 0x200) == 0)
        {
          uint64_t v20 = 3984;
          unint64_t v21 = v1 + 3984;
        }
        *(void *)(v21 + 112) = *(void *)(v21 + 112) & 0xFFFF00000000007FLL | (((v19 >> 7) & 0x1FFFFFFFFFFLL) << 7);
        *(void *)(v1 + v20) = *(void *)(v1 + v20) & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(v19 != 0) << 8);
      }
    }
  }
  return result;
}

uint64_t AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~FramebufferGen3_2(uint64_t a1)
{
  free(*(void **)(a1 + 5304));
  unsigned int v2 = *(void **)(a1 + 5224);
  if (v2) {

  }
  return AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(a1);
}

void sub_242A84264(_Unwind_Exception *a1)
{
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addAPIResources(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 3956);
  if (v6)
  {
    if (!a2) {
      goto LABEL_9;
    }
    do
    {
      double result = MTLResourceListAddResource();
      v6 ^= 1 << __clz(__rbit32(v6));
    }
    while (v6);
  }
  unsigned int v7 = *(_DWORD *)(v5 + 3960);
  if (v7) {
    BOOL v8 = a2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    do
    {
      double result = MTLResourceListAddResource();
      v7 ^= 1 << __clz(__rbit32(v7));
    }
    while (v7);
  }
LABEL_9:
  if (*(void *)(v5 + 2192))
  {
    if (a2) {
      double result = MTLResourceListAddResource();
    }
    if (a3 && *(void *)(v5 + 8)) {
      double result = MTLResourceListAddResource();
    }
  }
  if (*(void *)(v5 + 2216))
  {
    if (a2) {
      double result = MTLResourceListAddResource();
    }
    if (a3 && *(void *)(v5 + 160)) {
      double result = MTLResourceListAddResource();
    }
  }
  if (a2 && *(void *)(v5 + 3920)) {
    double result = MTLResourceListAddResource();
  }
  if (*(void *)(v5 + 5128))
  {
    if (!a2) {
      goto LABEL_30;
    }
    double result = MTLResourceListAddResource();
  }
  if (a2 && *(void *)(v5 + 5152)) {
    double result = MTLResourceListAddResource();
  }
LABEL_30:
  if (a3 && *(void *)(v5 + 5224))
  {
    return MTLResourceListAddResource();
  }
  return result;
}

uint64_t AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addGPUResources(uint64_t result, uint64_t a2, void *a3, char a4)
{
  uint64_t v6 = result;
  if (a4)
  {
    unsigned int v7 = *(_DWORD *)(result + 3956) & ~*(_DWORD *)(result + 4924);
    if (v7)
    {
      uint64_t v8 = result + 2000;
      do
      {
        unsigned int v9 = __clz(__rbit32(v7));
        double result = IOGPUResourceListAddResource();
        if (*(void *)(v8 + 8 * (3 * v9 + 1))) {
          double result = IOGPUResourceListAddResource();
        }
        if (*(void *)(v8 + 8 * (3 * v9 + 2))) {
          double result = IOGPUResourceListAddResource();
        }
        v7 ^= 1 << v9;
      }
      while (v7);
    }
  }
  if ((a4 & 2) != 0)
  {
    unsigned int v10 = *(_DWORD *)(v6 + 3960);
    if (v10)
    {
      uint64_t v11 = v6 + 2240;
      do
      {
        unsigned int v12 = __clz(__rbit32(v10));
        double result = IOGPUResourceListAddResource();
        if (*(void *)(v11 + 8 * (3 * v12 + 1))) {
          double result = IOGPUResourceListAddResource();
        }
        if (*(void *)(v11 + 8 * (3 * v12 + 2))) {
          double result = IOGPUResourceListAddResource();
        }
        v10 ^= 1 << v12;
      }
      while (v10);
    }
  }
  if (*(void *)(v6 + 2192) && (a4 & 4) != 0 && (*(_DWORD *)(v6 + 4924) & 0x100) == 0)
  {
    double result = IOGPUResourceListAddResource();
    if (*(void *)(v6 + 2200)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 2208)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 8))
    {
      double result = IOGPUResourceListAddResource();
      if (*(void *)(v6 + 16)) {
        double result = IOGPUResourceListAddResource();
      }
      if (*(void *)(v6 + 24)) {
        double result = IOGPUResourceListAddResource();
      }
    }
  }
  if (*(void *)(v6 + 2216) && (a4 & 0x10) != 0 && (*(_DWORD *)(v6 + 4924) & 0x200) == 0)
  {
    double result = IOGPUResourceListAddResource();
    if (*(void *)(v6 + 2224)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 2232)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 160))
    {
      double result = IOGPUResourceListAddResource();
      if (*(void *)(v6 + 168)) {
        double result = IOGPUResourceListAddResource();
      }
      if (*(void *)(v6 + 176)) {
        double result = IOGPUResourceListAddResource();
      }
    }
  }
  if ((a4 & 0x40) != 0)
  {
    uint64_t v13 = *(void *)(v6 + 3920);
    if (v13)
    {
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(a3, v13, 15);
      double result = IOGPUResourceListAddResource();
    }
  }
  if ((a4 & 8) != 0 && *(void *)(v6 + 5128))
  {
    double result = IOGPUResourceListAddResource();
    if (*(void *)(v6 + 5136)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 5144)) {
      double result = IOGPUResourceListAddResource();
    }
  }
  if ((a4 & 0x20) != 0 && *(void *)(v6 + 5152))
  {
    double result = IOGPUResourceListAddResource();
    if (*(void *)(v6 + 5160)) {
      double result = IOGPUResourceListAddResource();
    }
    if (*(void *)(v6 + 5168)) {
      double result = IOGPUResourceListAddResource();
    }
  }
  if (*(void *)(v6 + 5224)) {
    double result = IOGPUResourceListAddResource();
  }
  if (*(_DWORD *)(v6 + 5252)) {
    double result = IOGPUResourceListAddResource();
  }
  if (*(void *)(v6 + 5312))
  {
    IOGPUResourceListAddResource();
    double result = IOGPUResourceListAddResource();
  }
  if (*(void *)(v6 + 5384))
  {
    return IOGPUResourceListAddResource();
  }
  return result;
}

uint64_t AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::assignRenderRegisters(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a4) {
    int v5 = *(_DWORD *)(result + 3900);
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(a3 + 760) = v5;
  if (*(unsigned char *)(result + 5416))
  {
    int v43 = *(_WORD *)(result + 4378) & 1;
    int v6 = *(unsigned __int8 *)(result + 5417);
    if (*(unsigned char *)(result + 5417))
    {
LABEL_6:
      int v7 = (*(unsigned __int16 *)(result + 4378) >> 2) & 1;
      goto LABEL_9;
    }
  }
  else
  {
    int v43 = 0;
    int v6 = *(unsigned __int8 *)(result + 5417);
    if (*(unsigned char *)(result + 5417)) {
      goto LABEL_6;
    }
  }
  int v7 = 0;
LABEL_9:
  int8x16_t v8 = *(int8x16_t *)(result + 3984);
  uint64_t v9 = *(void *)(result + 4000);
  uint64_t v10 = *(void *)(result + 4008);
  uint64_t v45 = *(void *)(result + 4016);
  uint64_t v11 = *(void *)(result + 4024);
  uint64_t v44 = *(void *)(result + 4032);
  uint64_t v12 = *(void *)(result + 4040);
  uint64_t v13 = *(void *)(result + 4048);
  uint64_t v14 = *(void *)(result + 4056);
  uint64_t v15 = *(void *)(result + 4064);
  uint64_t v16 = *(void *)(result + 4072);
  uint64_t v17 = *(void *)(result + 4080);
  uint64_t v18 = *(void *)(result + 4088);
  uint64_t v19 = *(void *)(result + 4096);
  uint64_t v20 = *(void *)(result + 4104);
  uint64_t v21 = *(void *)(result + 4112);
  uint64_t v22 = *(void *)(result + 4120);
  uint64_t v23 = *(void *)(result + 4128);
  uint64_t v24 = *(void *)(result + 4136);
  uint64_t v25 = *(void *)(result + 4144);
  uint64_t v26 = *(void *)(result + 4152);
  uint64_t v27 = *(void *)(result + 4160);
  uint64_t v28 = *(void *)(result + 4168);
  if (*(unsigned char *)(result + 5444))
  {
    int v29 = v43;
    if (!*(unsigned char *)(result + 5416)) {
      int v29 = 0;
    }
    if ((v29 & a4) != 0) {
      unint64_t v30 = -1;
    }
    else {
      unint64_t v30 = 0;
    }
    int8x16_t v31 = vbslq_s8((int8x16_t)vdupq_n_s64(v30), vorrq_s8(v8, (int8x16_t)xmmword_242EA8090), v8);
    if (v6) {
      int v32 = v7;
    }
    else {
      int v32 = 0;
    }
    int8x16_t v33 = vorrq_s8(v31, (int8x16_t)vdupq_n_s64(0x4000uLL));
    if ((v32 & a4) != 0) {
      unint64_t v34 = -1;
    }
    else {
      unint64_t v34 = 0;
    }
    int8x16_t v8 = vbslq_s8((int8x16_t)vdupq_n_s64(v34), v33, v31);
  }
  *(int8x16_t *)(a3 + 248) = v8;
  *(void *)(a3 + 264) = v24;
  *(void *)(a3 + 272) = v9;
  *(void *)(a3 + 280) = v10;
  *(void *)(a3 + 288) = v25;
  *(void *)(a3 + 360) = v11;
  *(void *)(a3 + 368) = v26;
  *(void *)(a3 + 328) = v27;
  *(void *)(a3 + 336) = v13;
  *(void *)(a3 + 408) = v28;
  *(void *)(a3 + 416) = v15;
  *(void *)(a3 + 296) = v12;
  *(void *)(a3 + 304) = v16;
  *(void *)(a3 + 376) = v14;
  *(void *)(a3 + 384) = v18;
  *(void *)(a3 + 312) = v20;
  *(void *)(a3 + 320) = v45;
  *(void *)(a3 + 392) = v21;
  *(void *)(a3 + 400) = v44;
  *(void *)(a3 + 344) = v17;
  *(void *)(a3 + 352) = v22;
  *(void *)(a3 + 424) = v19;
  *(void *)(a3 + 432) = v23;
  *(void *)(a3 + 1040) = v10;
  *(void *)(a3 + 1048) = v16;
  *(void *)(a3 + 1072) = v25;
  *(void *)(a3 + 1056) = v11;
  *(void *)(a3 + 1064) = v18;
  *(void *)(a3 + 1080) = v26;
  *(_DWORD *)(a3 + 752) = *(_DWORD *)(result + 3928);
  if (*(_DWORD *)(*(void *)(*(void *)(result + 400) + 808) + 7764) < 0xB0000u
    || !a4
    || *(_DWORD *)(result + 4900)
    || *(_DWORD *)(result + 4896))
  {
    int v35 = 768;
  }
  else
  {
    int v35 = 256;
  }
  *(_DWORD *)(a3 + 756) = v35 | *(unsigned __int8 *)(result + 3936);
  *(unsigned char *)(a3 + 774) = *(_DWORD *)(result + 3932) != 0;
  if (*(_DWORD *)(result + 5252))
  {
    uint64_t v36 = *(void *)(result + 5264);
    uint64_t v37 = *(void *)(result + 5288);
    uint64_t v38 = *(void *)(result + 5312);
    uint64_t v39 = *(unsigned __int8 *)(result + 5260);
    *(void *)(a2 + 384) = v36 - 0x1000000000;
    int64x2_t v41 = *(int64x2_t *)(result + 5272);
    int64x2_t v40 = vaddq_s64(v41, vdupq_n_s64(0xFFFFFFF000000000));
    v41.i64[1] = *(void *)(result + 5320);
    *(int64x2_t *)(a2 + 392) = v40;
    *(void *)(a2 + 408) = v37 - 0x1000000000;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = 0;
    int64x2_t v41 = 0uLL;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
  }
  *(void *)(a2 + 416) = v38;
  *(void *)(a2 + 432) = v39;
  *(void *)(a3 + 1096) = v36;
  *(int64x2_t *)(a3 + 1104) = v41;
  if (a5) {
    uint64_t v42 = *(void *)(result + 5384);
  }
  else {
    uint64_t v42 = 0;
  }
  *(void *)(a3 + 240) = v42;
  return result;
}

void AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateDatabufferResources(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 5296);
  if (!v4 || *(void *)(a1 + 5312)) {
    goto LABEL_8;
  }
  uint64_t v5 = a2[126];
  uint64_t v6 = v4 + 255;
  unint64_t v7 = v5 + v4 + 255;
  if (v7 <= a2[125]) {
    goto LABEL_4;
  }
  int v31 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 30, 0);
  uint64_t v5 = a2[126];
  if (v31)
  {
    unint64_t v7 = v5 + v6;
    if ((unint64_t)(v5 + v6) > a2[125]) {
      goto LABEL_32;
    }
LABEL_4:
    a2[127] = v7;
  }
  size_t v8 = *(void *)(a1 + 5296);
  uint64_t v9 = (char *)((v5 + 255) & 0xFFFFFFFFFFFFFF00);
  *(void *)(a1 + 5312) = &v9[a2[128]];
  a2[126] = &v9[v8];
  uint64_t v10 = a2[3];
  uint64_t v11 = (_OWORD *)(v10 + 1960);
  uint64_t v12 = *(void *)(v10 + 1976);
  *(_OWORD *)(a1 + 5328) = *v11;
  *(void *)(a1 + 5344) = v12;
  memcpy(v9, *(const void **)(a1 + 5304), v8);
  uint64_t v13 = *(void *)(a1 + 5296) + 255;
  uint64_t v14 = a2[22];
  uint64_t v15 = v14 + v13;
  if ((unint64_t)(v14 + v13) > a2[21])
  {
    int v32 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0);
    uint64_t v14 = a2[22];
    if (!v32) {
      goto LABEL_7;
    }
    uint64_t v15 = v14 + v13;
    if ((unint64_t)(v14 + v13) > a2[21]) {
      goto LABEL_32;
    }
  }
  a2[23] = v15;
LABEL_7:
  size_t v16 = *(void *)(a1 + 5296);
  uint64_t v17 = (char *)((v14 + 255) & 0xFFFFFFFFFFFFFF00);
  *(void *)(a1 + 5320) = &v17[a2[24]];
  a2[22] = &v17[v16];
  uint64_t v18 = a2[3];
  uint64_t v19 = (_OWORD *)(v18 + 296);
  uint64_t v20 = *(void *)(v18 + 312);
  *(_OWORD *)(a1 + 5352) = *v19;
  *(void *)(a1 + 5368) = v20;
  memcpy(v17, *(const void **)(a1 + 5304), v16);
LABEL_8:
  if (*(_DWORD *)(a1 + 3912) < 2u || !*(unsigned char *)(a1 + 1994)) {
    return;
  }
  uint64_t v21 = a2[22];
  uint64_t v22 = v21 + 511;
  if ((unint64_t)(v21 + 511) > a2[21])
  {
    int v30 = AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0);
    uint64_t v21 = a2[22];
    if (!v30) {
      goto LABEL_12;
    }
    uint64_t v22 = v21 + 511;
    if ((unint64_t)(v21 + 511) > a2[21]) {
LABEL_32:
    }
      abort();
  }
  a2[23] = v22;
LABEL_12:
  uint64_t v23 = (uint64_t *)((v21 + 255) & 0xFFFFFFFFFFFFFF00);
  *(void *)(a1 + 5384) = (char *)v23 + a2[24];
  a2[22] = v23 + 32;
  uint64_t v24 = a2[3];
  long long v25 = *(_OWORD *)(v24 + 296);
  *(void *)(a1 + 5408) = *(void *)(v24 + 312);
  *(_OWORD *)(a1 + 5392) = v25;
  unint64_t v26 = *(unsigned int *)(a1 + 3912);
  unsigned int v27 = v26 >> 6;
  if (v26 >= 0x40)
  {
    memset(v23, 255, (v26 >> 3) & 0x1FFFFFF8);
    if (v27 <= 1) {
      unsigned int v28 = 1;
    }
    else {
      unsigned int v28 = v26 >> 6;
    }
    v23 += v28;
  }
  if ((v26 & 0x3F) != 0)
  {
    *v23++ = ~(-1 << (v26 & 0x3F));
    int v29 = 31;
    if (v27 == 31) {
      return;
    }
  }
  else
  {
    int v29 = 32;
    if (v27 == 32) {
      return;
    }
  }

  bzero(v23, 8 * (v29 + ~v27) + 8);
}

uint64_t AGX::FramebufferGen3_3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferGen3_3(uint64_t a1, atomic_ullong *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v10 = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::Framebuffer(a1, a2, a3, a4, a5, a6, a7);
  *(_DWORD *)(v10 + 5072) = *(_DWORD *)(a4 + 1948);
  *(void *)(v10 + 5224) = 0;
  *(_OWORD *)(v10 + 5088) = 0u;
  *(_OWORD *)(v10 + 5104) = 0u;
  *(_OWORD *)(v10 + 5120) = 0u;
  *(_OWORD *)(v10 + 5136) = 0u;
  *(_OWORD *)(v10 + 5152) = 0u;
  *(_OWORD *)(v10 + 5168) = 0u;
  *(_OWORD *)(v10 + 5184) = 0u;
  *(_DWORD *)(v10 + 5200) = 0;
  if (*(void *)(a4 + 1944)) {
    *(unsigned char *)(a1 + 3965) = 1;
  }
  int v11 = *(_DWORD *)(a4 + 1696);
  if ((v11 & 0x100) != 0)
  {
    *(void *)(a1 + 5128) = *(void *)(a4 + 1416);
    *(void *)(a1 + 5136) = *(void *)(a4 + 1424);
    *(void *)(a1 + 5144) = *(void *)(a4 + 1432);
    uint64_t v12 = *(void *)(a4 + 1440);
    *(void *)(a1 + 5176) = v12;
    unsigned int v13 = *(_DWORD *)(a4 + 1448);
    *(_WORD *)(a1 + 5194) = v13;
    int v14 = *(_DWORD *)(a4 + 1452);
    *(_WORD *)(a1 + 5192) = v14;
    unsigned int v15 = *(_DWORD *)(a4 + 1456);
    *(_WORD *)(a1 + 5196) = v15;
    if (*(_DWORD *)(v12 + 236))
    {
      *(void *)(a1 + 5088) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v12, v13, 0, v15, 0);
      *(void *)(a1 + 5104) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(a1 + 5176), *(_DWORD *)(*(void *)(a1 + 5176) + 144) + *(_DWORD *)(a4 + 1452), *(_DWORD *)(a4 + 1456));
    }
    else
    {
      *(void *)(a1 + 5088) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v12, v13, *(_DWORD *)(v12 + 144) + v14, v15, 0);
    }
    *(_DWORD *)(a1 + 5120) = *(_DWORD *)(a4 + 1460);
    int v11 = *(_DWORD *)(a4 + 1696);
  }
  if ((v11 & 0x200) != 0)
  {
    *(void *)(a1 + 5152) = *(void *)(a4 + 1576);
    *(void *)(a1 + 5160) = *(void *)(a4 + 1584);
    *(void *)(a1 + 5168) = *(void *)(a4 + 1592);
    uint64_t v16 = *(void *)(a4 + 1600);
    *(void *)(a1 + 5184) = v16;
    unsigned int v17 = *(_DWORD *)(a4 + 1608);
    *(_WORD *)(a1 + 5200) = v17;
    int v18 = *(_DWORD *)(a4 + 1612);
    *(_WORD *)(a1 + 5198) = v18;
    unsigned int v19 = *(_DWORD *)(a4 + 1616);
    *(_WORD *)(a1 + 5202) = v19;
    if (*(_DWORD *)(v16 + 236))
    {
      uint64_t v20 = *(void *)(v16 + 208);
      unsigned int v21 = *(_DWORD *)(v20 + 24) >= 2u && *(_DWORD *)(v20 + 80) != 0;
      *(void *)(a1 + 5096) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v16, v17, 0, v19, v21);
      uint64_t v25 = *(void *)(a1 + 5184);
      uint64_t v26 = *(void *)(v25 + 208);
      unsigned int v27 = *(_DWORD *)(v26 + 24) >= 2u && *(_DWORD *)(v26 + 80) != 0;
      *(void *)(a1 + 5112) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v25, *(_DWORD *)(v25 + 144) + *(_DWORD *)(a4 + 1612), v27);
    }
    else
    {
      unsigned int v22 = *(_DWORD *)(v16 + 144) + v18;
      uint64_t v23 = *(void *)(v16 + 208);
      unsigned int v24 = *(_DWORD *)(v23 + 24) >= 2u && *(_DWORD *)(v23 + 80) != 0;
      *(void *)(a1 + 5096) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v16, v17, v22, v19, v24);
    }
    *(void *)(a1 + 5120) = *(void *)(a4 + 1620);
  }
  unsigned int v28 = *(_DWORD *)(a1 + 3948);
  int v29 = *(_DWORD *)(a4 + 1936);
  *(_DWORD *)(a1 + 3940) = v29;
  int v30 = *(_DWORD *)(a4 + 1940);
  *(_DWORD *)(a1 + 3944) = v30;
  if (!v29 || !v30)
  {
    int v31 = *(_DWORD *)(a1 + 2584);
    atomic_ullong v32 = a2[101];
    switch(v31)
    {
      case 2:
        *(_DWORD *)(v32 + 7296) = 32;
        *(_DWORD *)(a1 + 3940) = 32;
        if (v28 <= 0x83) {
          int v30 = 32;
        }
        else {
          int v30 = 16;
        }
        goto LABEL_36;
      case 4:
        if (v28 < 0x84)
        {
          *(_DWORD *)(v32 + 7296) = 32;
          *(_DWORD *)(a1 + 3940) = 32;
          int v30 = 16;
          goto LABEL_36;
        }
        break;
      case 8:
        if (v28 > 0x83) {
          goto LABEL_37;
        }
        break;
      default:
        int v30 = 32;
        goto LABEL_35;
    }
    int v30 = 16;
LABEL_35:
    *(_DWORD *)(v32 + 7296) = v30;
    *(_DWORD *)(a1 + 3940) = v30;
LABEL_36:
    *(_DWORD *)(v32 + 7300) = v30;
    *(_DWORD *)(a1 + 3944) = v30;
    int v29 = *(_DWORD *)(a1 + 3940);
  }
LABEL_37:
  int v33 = v30 * v29;
  int v34 = *(_DWORD *)(a1 + 2588);
  int v35 = v30 * v29 * v34;
  int v36 = v35 * v28;
  *(_DWORD *)(a1 + 5076) = v35 * v28;
  switch(v34)
  {
    case 8:
      unsigned int v37 = 4 * v28 * v33;
      break;
    case 4:
      unsigned int v37 = v33 * v28;
      break;
    case 2:
      if (v29 == 16) {
        unsigned int v37 = 8 * ((v28 * v30) & 0xFFFFFFF);
      }
      else {
        unsigned int v37 = (v33 * v28) >> 2;
      }
      break;
    default:
      unsigned int v37 = 0;
      break;
  }
  *(_DWORD *)(a1 + 5080) = v37;
  unsigned int v38 = *(_DWORD *)(a1 + 5072) + v36;
  *(_DWORD *)(a1 + 5084) = v38;
  int v39 = *(_DWORD *)(a1 + 3952) * v35;
  *(_DWORD *)(a1 + 5216) = v39;
  unsigned int v40 = 0x40000 / v38;
  *(_DWORD *)(a1 + 5220) = v40;
  int64x2_t v41 = (int *)MEMORY[0x263F4B188];
  if (v39)
  {
    uint64_t v42 = *(os_unfair_lock_s **)(a2[101] + 6056);
    unsigned int v43 = v40 * v39;
    os_unfair_lock_lock(v42 + 10);
    if (v42[8]._os_unfair_lock_opaque < v43)
    {
      v42[8]._uint32_t os_unfair_lock_opaque = v43;
      uint32_t os_unfair_lock_opaque = v42[12]._os_unfair_lock_opaque;

      uint64_t v96 = os_unfair_lock_opaque * v43 + 16;
      uint64_t v97 = *(void *)&v42->_os_unfair_lock_opaque;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      v105[0] = 0;
      v105[1] = 0x100010001;
      int v106 = 16777473;
      long long v107 = 0u;
      long long v108 = 0u;
      int v109 = 0;
      uint64_t v112 = v96;
      long long v113 = xmmword_242EA7DA0;
      uint64_t v114 = 0;
      LODWORD(v104) = 104;
      int v98 = [(IOGPUMetalBuffer *)[AGXBuffer alloc] initWithDevice:v97 pointer:0 length:v96 options:0 sysMemSize:v96 vidMemSize:0 args:v105 argsSize:v104 deallocator:0];
      uint64_t v45 = v98;
      if (v98)
      {
        uint64_t v99 = *v41;
        uint64_t v100 = [(IOGPUMetalResource *)v98 gpuAddress];
        uint64_t v101 = [(IOGPUMetalResource *)v45 virtualAddress];
        unsigned int v102 = (Class *)((char *)&v45->super.super.super.super.super.super.isa + v99);
        uint64_t v103 = *(void *)((unsigned char *)&v45->super.super.super.super.super._labelLock._os_unfair_lock_opaque + v99) & 0x1F00000000000000 | v96 | 0x2000000000000000;
        v102[1] = v100;
        v102[2] = v103;
        v102[3] = v101;
      }
      *(void *)&v42[2]._uint32_t os_unfair_lock_opaque = v45;
      *(void *)&v42[6]._uint32_t os_unfair_lock_opaque = v45;
      uint64_t v44 = v45;
    }
    else
    {
      uint64_t v44 = *(AGXBuffer **)&v42[6]._os_unfair_lock_opaque;
      uint64_t v45 = *(AGXBuffer **)&v42[2]._os_unfair_lock_opaque;
    }
    uint64_t v46 = v45;
    os_unfair_lock_unlock(v42 + 10);
    *(void *)(a1 + 5224) = v44;
    uint64_t v47 = *(void *)((char *)&v44->super.super._res.var0 + *v41);
  }
  else
  {
    uint64_t v47 = 0;
  }
  *(void *)(a1 + 5208) = v47;
  long long v48 = *(_OWORD *)(a1 + 5208);
  *(_OWORD *)(a1 + 3800) = v48;
  *(_OWORD *)(a1 + 856) = v48;
  unint64_t v49 = 78;
  if (!*(_DWORD *)(a4 + 1944)) {
    unint64_t v49 = 0;
  }
  *(void *)(a1 + ((v49 >> 3) & 8) + 5056) |= 1 << (v49 & 0xE);
  *(_OWORD *)(a1 + 5232) = 0u;
  int v50 = *(_DWORD *)(a4 + 1696);
  if ((v50 & 0x100) != 0)
  {
    uint64_t v51 = *(void *)(a4 + 1440);
    uint64_t v52 = *(void *)(v51 + 488);
    if (v52)
    {
      unsigned int v53 = *(_DWORD *)(a4 + 1452);
      if (*(_DWORD *)(v52 + 1080) > v53)
      {
        *(void *)(a1 + 5232) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v52, *(_DWORD *)(a4 + 1448), *(_DWORD *)(v51 + 144) + v53, *(_DWORD *)(a4 + 1456), 0);
        int v50 = *(_DWORD *)(a4 + 1696);
      }
    }
  }
  if ((v50 & 0x200) != 0)
  {
    uint64_t v54 = *(void *)(a4 + 1600);
    uint64_t v55 = *(void *)(v54 + 488);
    if (v55)
    {
      unsigned int v56 = *(_DWORD *)(a4 + 1612);
      if (*(_DWORD *)(v55 + 1080) > v56)
      {
        unsigned int v57 = *(_DWORD *)(v54 + 144) + v56;
        uint64_t v58 = *(void *)(v54 + 208);
        BOOL v59 = *(_DWORD *)(v58 + 24) >= 2u && *(_DWORD *)(v58 + 80) != 0;
        *(void *)(a1 + 5240) = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v55 + 536 * v59, *(_DWORD *)(a4 + 1608), v57, *(_DWORD *)(a4 + 1616), 0);
      }
    }
  }
  *(void *)(a1 + 5248) = 0;
  *(_DWORD *)(a1 + 5256) = 0;
  *(unsigned char *)(a1 + 5260) = -1;
  *(void *)(a1 + 5384) = 0;
  *(_OWORD *)(a1 + 5264) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5312) = 0u;
  uint64_t v60 = *(void *)(a4 + 1952);
  if (v60)
  {
    *(_DWORD *)(a1 + 5248) = *(_DWORD *)(v60 + 16);
    *(void *)(a1 + 5252) = *(void *)(v60 + 24656);
    *(unsigned char *)(a1 + 5260) = *(unsigned char *)(v60 + 24684);
    *(void *)(a1 + 5376) = *(void *)(v60 + 24688) + *v41 + 32;
    *(_OWORD *)(a1 + 5264) = *(_OWORD *)(v60 + 24808);
    int v61 = *(_DWORD *)(a1 + 3940);
    if (v61 == 32)
    {
      uint64_t v62 = 24832;
    }
    else
    {
      if (v61 != 16)
      {
        uint64_t v63 = 0;
LABEL_71:
        *(void *)(a1 + 5280) = v63;
        int v64 = *(_DWORD *)(a1 + 3944);
        if (v64 == 32)
        {
          uint64_t v65 = 24848;
        }
        else
        {
          if (v64 != 16)
          {
            uint64_t v66 = 0;
            goto LABEL_77;
          }
          uint64_t v65 = 24840;
        }
        uint64_t v66 = *(void *)(v60 + v65);
LABEL_77:
        *(void *)(a1 + 5288) = v66;
        *(void *)(a1 + 5296) = 256;
        unint64_t v67 = malloc_type_malloc(0x100uLL, 0x15F49C35uLL);
        *(void *)(a1 + 5304) = v67;
        memcpy(v67, (const void *)(a4 + 1960), *(void *)(a1 + 5296));
        goto LABEL_78;
      }
      uint64_t v62 = 24824;
    }
    uint64_t v63 = *(void *)(v60 + v62);
    goto LABEL_71;
  }
LABEL_78:
  *(void *)(a1 + 5416) = 0;
  *(_DWORD *)(a1 + 5440) = 0;
  *(void *)(a1 + 5424) = 0;
  *(void *)(a1 + 5432) = 0;
  *(unsigned char *)(a1 + 5444) = 1;
  uint64_t v68 = *(void *)(a4 + 1360);
  if (v68)
  {
    int v69 = *(_DWORD *)(v68 + 236);
    BOOL v70 = v69 != 0;
    *(unsigned char *)(a1 + 5416) = v70;
    *(_DWORD *)(a1 + 5420) = v69;
    if (*(void *)(v68 + 32) == 250) {
      LODWORD(v71) = ((float)*(unsigned int *)(v68 + 512) * 65535.0);
    }
    else {
      float v71 = (float)*(unsigned int *)(v68 + 512);
    }
    *(float *)(a1 + 5436) = v71;
    unint64_t v72 = *(void *)(a4 + 1520);
    if (v72)
    {
LABEL_83:
      int v73 = *(_DWORD *)(v72 + 236);
      BOOL v74 = v73 != 0;
      *(unsigned char *)(a1 + 5417) = v74;
      *(_DWORD *)(a1 + 5424) = v73;
      int v75 = *(_DWORD *)(v72 + 512);
      *(_DWORD *)(a1 + 5440) = v75;
      unint64_t v72 = (unint64_t)v75 << 32;
      int v76 = *(_DWORD *)(a4 + 1696);
      if ((v76 & 0x100) == 0) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
  }
  else
  {
    float v71 = 0.0;
    int v69 = 0;
    BOOL v70 = 0;
    unint64_t v72 = *(void *)(a4 + 1520);
    if (v72) {
      goto LABEL_83;
    }
  }
  int v73 = 0;
  BOOL v74 = 0;
  int v76 = *(_DWORD *)(a4 + 1696);
  if ((v76 & 0x100) != 0)
  {
LABEL_84:
    int v77 = *(_DWORD *)(*(void *)(a4 + 1440) + 236);
    *(unsigned char *)(a1 + 5418) = v77 != 0;
    *(_DWORD *)(a1 + 5428) = v77;
  }
LABEL_85:
  if ((v76 & 0x200) == 0)
  {
    uint64_t v78 = *(void *)(a1 + 3992);
    if (!v70) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  int v82 = *(_DWORD *)(*(void *)(a4 + 1600) + 236);
  *(unsigned char *)(a1 + 5419) = v82 != 0;
  *(_DWORD *)(a1 + 5432) = v82;
  uint64_t v78 = *(void *)(a1 + 3992);
  if (v70)
  {
LABEL_87:
    v78 |= 0x30uLL;
    *(void *)(a1 + 3992) = v78;
    *(float *)(a1 + 4136) = v71;
  }
LABEL_88:
  uint64_t v79 = 16777472;
  if (v74)
  {
    v78 |= 0x3000uLL;
    *(void *)(a1 + 4136) = *(void *)(a1 + 4136) & 0xFFFFFF00FFFFFFFFLL | v72;
    uint64_t v80 = 136;
    uint64_t v81 = 16777472;
  }
  else
  {
    uint64_t v81 = 0;
    uint64_t v80 = 0;
  }
  unint64_t v83 = v78 & 0xFFFFFFFFF2F2F2F2;
  if (v69 == 0x40000) {
    int v84 = 3;
  }
  else {
    int v84 = 1;
  }
  if (v69 == 0x10000) {
    int v84 = 2;
  }
  uint64_t v85 = (4 * v84);
  uint64_t v86 = (v84 << 18);
  if (v73 == 0x40000) {
    int v87 = 3;
  }
  else {
    int v87 = 1;
  }
  if (v73 == 0x10000) {
    int v87 = 2;
  }
  uint64_t v88 = (v87 << 10);
  uint64_t v89 = (v87 << 26);
  unint64_t v90 = v70 | ((unint64_t)v70 << 16);
  *(void *)(a1 + 3992) = v81 | v90 | v83 | v85 | v86 | v88 | v89;
  uint64_t v91 = 34;
  if (!v70) {
    uint64_t v91 = 0;
  }
  *(void *)(a1 + 3984) = v80 | v91 | *(void *)(a1 + 3984) & 0xFFFFFFFFFFFFFF55;
  uint64_t v92 = *(void *)(a1 + 4184);
  if (v70)
  {
    v92 |= 0x30uLL;
    *(void *)(a1 + 4184) = v92;
    *(float *)(a1 + 4328) = v71;
  }
  if (v74)
  {
    v92 |= 0x3000uLL;
    *(void *)(a1 + 4328) = *(void *)(a1 + 4328) & 0xFFFFFF00FFFFFFFFLL | v72;
    uint64_t v93 = 136;
  }
  else
  {
    uint64_t v93 = 0;
    uint64_t v79 = 0;
  }
  *(void *)(a1 + 4184) = v79 | v90 | v92 & 0xFFFFFFFFF2F2F2F2 | v85 | v86 | v88 | v89;
  *(void *)(a1 + 4176) = v93 | v91 | *(void *)(a1 + 4176) & 0xFFFFFFFFFFFFFF55;
  return a1;
}

void sub_242A856FC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState(uint64_t result, unsigned int a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v7 = v4;
    if (!v4) {
      break;
    }
    unsigned int v8 = __clz(__rbit32(v4));
    uint64_t v9 = *(void *)(result + 8 * v8 + 96);
    int v10 = *(_DWORD *)(v9 + 32);
    if (v10 == 18) {
      int v10 = 9;
    }
    int v5 = *(_DWORD *)(v9 + 28);
    switch(v10)
    {
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 22:
        v5 *= 2;
        break;
      case 10:
      case 11:
      case 17:
        v5 *= 4;
        break;
      case 18:
      case 19:
      case 20:
      case 21:
        int v5 = 4;
        break;
      default:
        int v5 = 0;
        break;
    }
    v2 += v5;
    int v6 = 1 << v8;
    if (v2 > 0x100) {
      int v6 = 0;
    }
    unsigned int v4 = v6 ^ v7;
  }
  while (v2 < 0x101);
  if (*(unsigned char *)(result + 40))
  {
    unsigned int v11 = 0;
    int v12 = 0;
    char v13 = 0;
    int v14 = 0;
    while (2)
    {
      uint64_t v21 = __clz(__rbit32(v3));
      unsigned int v22 = *(_DWORD **)(result + 8 * v21 + 96);
      BOOL v23 = v22[8] == 18 && v7 == 0;
      if (v23) {
        int v24 = 9;
      }
      else {
        int v24 = v22[8];
      }
      int v25 = 1 << v21;
      if (v24 == 18) {
        int v26 = 1 << v21;
      }
      else {
        int v26 = 0;
      }
      unsigned int v27 = v24 - 2;
      int v28 = v22[7];
      switch(v24)
      {
        case 2:
        case 4:
        case 5:
          goto LABEL_38;
        case 3:
          int v15 = (v22[21] != 0) << 8;
          int v16 = 1;
          goto LABEL_16;
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 22:
          v28 *= 2;
          if (v27 > 0x14) {
            goto LABEL_41;
          }
          goto LABEL_38;
        case 10:
        case 11:
        case 17:
          v28 *= 4;
          goto LABEL_38;
        case 18:
        case 19:
        case 20:
        case 21:
          int v28 = 4;
          if (v27 > 0x14) {
            goto LABEL_41;
          }
          goto LABEL_38;
        default:
          int v28 = 0;
          if (v27 <= 0x14)
          {
LABEL_38:
            int v15 = 0;
            int v16 = 1;
            switch(v24)
            {
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              case 6:
              case 7:
              case 8:
              case 9:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 22:
                int v15 = 0;
                int v16 = 2;
                break;
              case 10:
              case 11:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
                int v15 = 0;
                int v16 = 4;
                break;
              default:
                goto LABEL_41;
            }
          }
          else
          {
LABEL_41:
            int v15 = 0;
            int v16 = 0;
          }
LABEL_16:
          v14 |= v26;
          v13 |= ((v16 - 1 + v11) & -v16) + v28 > 0x100;
          int v17 = (v16 - 1 + v12) & -v16;
          if (v13) {
            int v12 = v17 + v28;
          }
          uint64_t v18 = 4 * v21;
          int v19 = *(_DWORD *)(result + 4 * v21);
          if ((v13 & 1) == 0) {
            LOBYTE(v17) = (v16 - 1 + v11) & -(char)v16;
          }
          *(_DWORD *)(result + v18) = v15 & 0xFFF00FFF | v19 & 0xFFF00EE0 | v24 & 0x1F | (v17 << 12);
          unsigned int v20 = v15 & 0xFFF001FF | v19 & 0xFFF000E0 | v24 & 0x1F | (v17 << 12) | ((v22[19] & 7) << 9);
          *(_DWORD *)(result + v18) = v20;
          if ((v13 & 1) == 0) {
            unsigned int v11 = ((v16 - 1 + v11) & -v16) + v28;
          }
          *(_DWORD *)(result + v18) = v20 & 0xFFFFFF1F | (32 * (v22[7] & 7));
          v3 ^= v25;
          if (v3) {
            continue;
          }
          int v29 = *(unsigned __int8 *)(result + 40);
          break;
      }
      break;
    }
  }
  else
  {
    int v29 = 0;
    int v14 = 0;
    char v13 = 0;
    int v12 = 0;
    unsigned int v11 = 0;
  }
  if (a2) {
    uint64_t v30 = a2;
  }
  else {
    uint64_t v30 = v11;
  }
  uint64_t v31 = v30 + 7;
  uint64_t v32 = v31 & 0x1FFFFFFF8;
  BOOL v23 = (v31 & 0x1FFFFFF00) == 0;
  unint64_t v33 = 256;
  if (v23) {
    unint64_t v33 = v32;
  }
  if (v33 <= 8) {
    LODWORD(v33) = 8;
  }
  int v34 = v33 << 16;
  if (v13)
  {
    int v34 = 0x1000000;
    int v35 = 0x2000000;
  }
  else
  {
    int v35 = 0;
  }
  *(_DWORD *)(result + 32) = v29 | v35 | *(_DWORD *)(result + 32) & 0xFC000000 | v34 & 0xFFFF00FF | ((*(unsigned char *)(result + 84) & 0xF) << 8) & 0xFFF | ((*(unsigned char *)(result + 85) & 0xF) << 12);
  *(_DWORD *)(result + 88) = v12;
  *(_DWORD *)(result + 44) = v14;
  return result;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfigGen3(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v4 = *a2;
    int v5 = (char *)a2 - v4;
    unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v4);
    if (v6 < 5) {
      goto LABEL_73;
    }
    uint64_t v7 = -v4;
    uint64_t v8 = *((unsigned __int16 *)v5 + 2);
    if (*((_WORD *)v5 + 2))
    {
      uint64_t v9 = (char *)a2 + v8;
      uint64_t v10 = *(unsigned int *)((char *)a2 + v8);
      unint64_t v11 = *(unsigned int *)((char *)a2 + v8 + v10);
      if (v11)
      {
        unint64_t v12 = 0;
        uint64_t v13 = v8 + v10;
        uint64_t v14 = 160;
        while (1)
        {
          uint64_t v15 = *(unsigned int *)((char *)a2 + v13 + 4);
          int v16 = (char *)a2 + v13 + v15;
          int v17 = (char *)a2 + v13 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v17 + 2) >= 5u)
          {
            uint64_t v18 = *((unsigned __int16 *)v17 + 4);
            if (v18)
            {
              unsigned int v19 = *(unsigned __int16 *)((char *)a2 + v13 + v15 + v18 + 4);
              if (v19) {
                break;
              }
            }
          }
LABEL_48:
          if (v12 <= 6)
          {
            ++v12;
            v14 += 2;
            v13 += 4;
            if (v12 < v11) {
              continue;
            }
          }
          uint64_t v50 = *a2;
          uint64_t v7 = -v50;
          unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v50);
          goto LABEL_68;
        }
        unsigned int v20 = &texFormatUnsupported;
        if (v19 <= 0x285) {
          unsigned int v20 = (uint64_t *)*(&off_26516F8A0 + v19 - 1);
        }
        *(void *)(a1 + 8 * v12 + 96) = v20;
        unsigned int v21 = 1 << v12;
        *(_DWORD *)(a1 + 40) |= 1 << v12;
        uint64_t v22 = v15 - *((int *)v16 + 1);
        BOOL v23 = (char *)a2 + v13 + v22;
        unsigned int v24 = *((unsigned __int16 *)v23 + 2);
        if (v24 < 0x19)
        {
          int v27 = 0;
          __int32 v26 = 0;
          if (v24 < 0xF)
          {
LABEL_36:
            int v27 = 0;
            int v36 = 1 << v12;
LABEL_37:
            *(_DWORD *)(a1 + 52) |= v36;
            v38.i32[0] = v26;
            v38.i32[1] = v27 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v38, (int32x2_t)0x100000001)));
            if (v27 == 4) {
              int v39 = 1 << v12;
            }
            else {
              int v39 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v39;
            unsigned int v40 = (char *)a2 + v13 + v15 - *((int *)v16 + 1);
            if (*((unsigned __int16 *)v40 + 2) >= 7u && (uint64_t v41 = *((unsigned __int16 *)v40 + 5)) != 0)
            {
              char v42 = 0;
              int v43 = *((unsigned __int8 *)a2 + v13 + v15 + v41 + 4);
              uint64_t v44 = (char *)(a1 + v14);
              char v45 = 2;
              char v46 = 1;
              switch(v43)
              {
                case 0:
                case 1:
                  char v45 = 1;
                  char v42 = v43;
                  goto LABEL_54;
                case 3:
                  goto LABEL_59;
                case 4:
                  char v47 = 2;
                  goto LABEL_45;
                case 5:
                  goto LABEL_53;
                case 6:
                  char v42 = 1;
LABEL_53:
                  char v45 = 4;
                  goto LABEL_54;
                case 7:
                  *(_WORD *)(a1 + v14) = 3;
LABEL_57:
                  int v48 = 3;
                  break;
                case 8:
                  char v46 = 3;
LABEL_59:
                  unint64_t v49 = (unsigned char *)(a1 + v14);
                  unsigned char *v49 = 2;
                  v49[1] = v46;
LABEL_60:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_46;
                default:
LABEL_54:
                  *uint64_t v44 = v45;
                  v44[1] = v42;
                  int v48 = 1;
                  switch(v43)
                  {
                    case 0:
                      goto LABEL_47;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_60;
                    case 7:
                      goto LABEL_57;
                    default:
                      goto LABEL_46;
                  }
                  break;
              }
            }
            else
            {
              char v47 = 0;
              uint64_t v44 = (char *)(a1 + 2 * v12 + 160);
LABEL_45:
              *uint64_t v44 = 2;
              *(unsigned char *)(a1 + v14 + 1) = v47;
LABEL_46:
              int v48 = 2;
            }
LABEL_47:
            *(_WORD *)(a1 + 76) |= v48 << v14;
            unint64_t v11 = *(unsigned int *)&v9[v10];
            goto LABEL_48;
          }
LABEL_21:
          uint64_t v28 = *(unsigned __int16 *)((char *)a2 + v13 + v22 + 18);
          if (v28 && *(_WORD *)((char *)a2 + v13 + v15 + v28 + 4))
          {
            *(_DWORD *)(a1 + 48) |= v21;
            if ((v27 & 0xFE) == 2) {
              int v29 = 1 << v12;
            }
            else {
              int v29 = 0;
            }
            *(_DWORD *)(a1 + 68) |= v29;
            uint64_t v30 = (char *)a2 + v13 + v15 - *((int *)v16 + 1);
            if (*((unsigned __int16 *)v30 + 2) >= 0x11u && (uint64_t v31 = *((unsigned __int16 *)v30 + 10)) != 0)
            {
              char v32 = 0;
              int v33 = *((unsigned __int8 *)a2 + v13 + v15 + v31 + 4);
              char v34 = 2;
              switch(v33)
              {
                case 0:
                case 1:
                  char v34 = 1;
                  char v32 = v33;
                  break;
                case 3:
                  char v32 = 1;
                  break;
                case 4:
                  char v32 = 2;
                  break;
                case 5:
                  goto LABEL_63;
                case 6:
                  char v32 = 1;
LABEL_63:
                  char v34 = 4;
                  break;
                case 7:
                  char v32 = 0;
                  char v34 = 3;
                  break;
                case 8:
                  char v32 = 3;
                  break;
                default:
                  break;
              }
            }
            else
            {
              char v32 = 0;
              char v34 = 2;
            }
            uint64_t v35 = a1 + v14;
            *(unsigned char *)(v35 + 16) = v34;
            *(unsigned char *)(v35 + 17) = v32;
          }
          int v36 = 0;
          if (v26 == 2) {
            int v37 = 1 << v12;
          }
          else {
            int v37 = 0;
          }
          *(_DWORD *)(a1 + 56) |= v37;
          if (v27) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *((unsigned __int16 *)v23 + 14);
        if (v25)
        {
          __int32 v26 = *((unsigned __int8 *)a2 + v13 + v15 + v25 + 4);
          if (v24 < 0x1B) {
            goto LABEL_20;
          }
        }
        else
        {
          __int32 v26 = 0;
          if (v24 < 0x1B) {
            goto LABEL_20;
          }
        }
        if (*(_WORD *)((char *)a2 + v13 + v22 + 30))
        {
          int v27 = *((unsigned __int8 *)a2 + v13 + v15 + *(unsigned __int16 *)((char *)a2 + v13 + v22 + 30) + 4);
          goto LABEL_21;
        }
LABEL_20:
        int v27 = 0;
        goto LABEL_21;
      }
    }
LABEL_68:
    if (v6 >= 7
      && *(_WORD *)((char *)a2 + v7 + 6)
      && (uint64_t v51 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v7 + 6)), (v51 & 0xFFFFFFFE) != 0))
    {
      if (v51 > 0x7FF) {
        LODWORD(v51) = 2048;
      }
    }
    else
    {
LABEL_73:
      LODWORD(v51) = 1;
    }
    *(_DWORD *)(a1 + 80) = v51;
    uint64_t v52 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v53 = *v52;
    if (v53 < 0xB)
    {
      char v55 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v53 < 9)
      {
LABEL_83:
        *(unsigned char *)(a1 + 85) = v55;
        goto LABEL_84;
      }
      uint64_t v56 = v52[4];
      if (!v56)
      {
LABEL_82:
        char v55 = 1;
        goto LABEL_83;
      }
    }
    else
    {
      if (v52[5]) {
        char v54 = *((unsigned char *)a2 + v52[5]);
      }
      else {
        char v54 = 1;
      }
      *(unsigned char *)(a1 + 84) = v54;
      uint64_t v56 = v52[4];
      if (!v56) {
        goto LABEL_82;
      }
    }
    char v55 = *((unsigned char *)a2 + v56);
    goto LABEL_83;
  }
LABEL_84:
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState(a1, 0);
  return a1;
}

void sub_242A87F00(_Unwind_Exception *a1)
{
  if ((*(unsigned char *)v1 & 1) == 0) {
    operator delete(*(void **)(v1 + 8), 16 * *(unsigned int *)(v1 + 16), (std::align_val_t)8uLL);
  }
  MEMORY[0x24566ED90](v1, 0x1000C406FAD1563);
  _Unwind_Resume(a1);
}

int *AGX::IndirectArgumentLayoutGen2::parseStruct(uint64_t a1, void *a2, uint64_t a3)
{
  double result = (int *)objc_msgSend((id)objc_msgSend(a2, "members"), "count");
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 8);
    while (1)
    {
      unint64_t v11 = objc_msgSend((id)objc_msgSend(a2, "members"), "objectAtIndex:", v8);
      int v12 = v9 + [v11 indirectArgumentIndex];
      uint64_t v13 = [v11 offset];
      *(_DWORD *)a3 = v12;
      *(void *)(a3 + 8) = v13 + v10;
      uint64_t v14 = [v11 dataType];
      if ((unint64_t)(v14 - 78) < 2) {
        break;
      }
      if (v14 == 1)
      {
        double result = (int *)AGX::IndirectArgumentLayoutGen2::parseStruct(a1, [v11 structType], a3);
      }
      else if (v14 == 2)
      {
        double result = AGX::IndirectArgumentLayoutGen2::parseArray(a1, (void *)[v11 arrayType], a3);
      }
      else
      {
        double result = AGX::IndirectArgumentLayoutGen2::parseIndirectArgument(a1, (void *)[v11 indirectArgumentType], a3);
      }
LABEL_4:
      if (++v8 == v7) {
        return result;
      }
    }
    unsigned __int8 v15 = [v11 dataType];
    uint64_t v16 = *(void *)(a3 + 8);
    if (*(unsigned char *)a1)
    {
      int v17 = 16;
      uint64_t v18 = a1 + 8;
    }
    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      if (!v17)
      {
        BOOL v23 = 0;
        goto LABEL_19;
      }
      uint64_t v18 = *(void *)(a1 + 8);
    }
    int v19 = v17 - 1;
    unsigned int v20 = (37 * *(_DWORD *)a3) & v19;
    double result = (int *)(v18 + 16 * v20);
    int v21 = *result;
    if (*(_DWORD *)a3 == *result)
    {
LABEL_15:
      *((void *)result + 1) = v16 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v15 << 56);
      unint64_t v22 = *(void *)(a3 + 16);
      if (v22 <= 8) {
        unint64_t v22 = 8;
      }
      *(void *)(a3 + 8) += 8;
      *(void *)(a3 + 16) = v22;
      ++*(_DWORD *)a3;
      goto LABEL_4;
    }
    unsigned int v24 = 0;
    int v25 = 1;
    while (v21 != -1)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v21 == -2;
      }
      if (v26) {
        unsigned int v24 = result;
      }
      unsigned int v27 = v20 + v25++;
      unsigned int v20 = v27 & v19;
      double result = (int *)(v18 + 16 * v20);
      int v21 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_15;
      }
    }
    if (v24) {
      BOOL v23 = v24;
    }
    else {
      BOOL v23 = result;
    }
LABEL_19:
    double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v23, (int *)a3);
    goto LABEL_15;
  }
  return result;
}

int *agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(uint64_t a1, int *a2, int *a3)
{
  unsigned int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::grow((unsigned int *)a1, v8);
  uint64_t v11 = a1 + 8;
  unsigned int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 16;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = (37 * *a3) & (v12 - 1);
  a2 = (int *)(v11 + 16 * v14);
  int v15 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -1)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = (int *)(v11 + 16 * (v19 & v13));
      int v15 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  *((void *)a2 + 1) = 0;
  return a2;
}

int *AGX::IndirectArgumentLayoutGen2::parseArray(uint64_t a1, void *a2, uint64_t a3)
{
  double result = (int *)[a2 arrayLength];
  uint64_t v7 = result;
  if (result)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a3 + 8);
    while (1)
    {
      *(void *)(a3 + 8) = v9 + [a2 stride] * v8;
      switch([a2 elementType])
      {
        case 1:
          double result = (int *)AGX::IndirectArgumentLayoutGen2::parseStruct(a1, [a2 elementStructType], a3);
          goto LABEL_8;
        case 2:
          double result = (int *)AGX::IndirectArgumentLayoutGen2::parseArray(a1, [a2 elementArrayType], a3);
          goto LABEL_8;
        case 58:
        case 59:
        case 60:
        case 78:
        case 79:
        case 80:
        case 115:
        case 116:
        case 117:
        case 118:
          unsigned __int8 v16 = [a2 elementType];
          uint64_t v17 = *(void *)(a3 + 8);
          if (*(unsigned char *)a1)
          {
            int v10 = 16;
            uint64_t v11 = a1 + 8;
          }
          else
          {
            int v10 = *(_DWORD *)(a1 + 16);
            if (!v10)
            {
              BOOL v18 = 0;
LABEL_14:
              double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v18, (int *)a3);
              goto LABEL_5;
            }
            uint64_t v11 = *(void *)(a1 + 8);
          }
          int v12 = v10 - 1;
          unsigned int v13 = (37 * *(_DWORD *)a3) & v12;
          double result = (int *)(v11 + 16 * v13);
          int v14 = *result;
          if (*(_DWORD *)a3 != *result)
          {
            unsigned int v19 = 0;
            int v20 = 1;
            while (v14 != -1)
            {
              if (v19) {
                BOOL v21 = 0;
              }
              else {
                BOOL v21 = v14 == -2;
              }
              if (v21) {
                unsigned int v19 = result;
              }
              unsigned int v22 = v13 + v20++;
              unsigned int v13 = v22 & v12;
              double result = (int *)(v11 + 16 * v13);
              int v14 = *result;
              if (*(_DWORD *)a3 == *result) {
                goto LABEL_5;
              }
            }
            if (v19) {
              BOOL v18 = v19;
            }
            else {
              BOOL v18 = result;
            }
            goto LABEL_14;
          }
LABEL_5:
          *((void *)result + 1) = v17 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v16 << 56);
          unint64_t v15 = *(void *)(a3 + 16);
          if (v15 <= 8) {
            unint64_t v15 = 8;
          }
          *(void *)(a3 + 8) += 8;
          *(void *)(a3 + 16) = v15;
          ++*(_DWORD *)a3;
LABEL_8:
          if (++v8 == v7) {
            return result;
          }
          break;
        default:
          double result = AGX::IndirectArgumentLayoutGen2::parseIndirectArgument(a1, (void *)[a2 elementIndirectArgumentType], a3);
          goto LABEL_8;
      }
    }
  }
  return result;
}

int *AGX::IndirectArgumentLayoutGen2::parseIndirectArgument(uint64_t a1, void *a2, uint64_t a3)
{
  double result = (int *)[a2 type];
  switch((unint64_t)result)
  {
    case 0uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v17 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v18 = 16;
      }
      else
      {
        int v18 = *(_DWORD *)(a1 + 16);
        if (!v18) {
          goto LABEL_37;
        }
        uint64_t v17 = *(void *)(a1 + 8);
      }
      int v36 = v18 - 1;
      unsigned int v37 = (37 * *(_DWORD *)a3) & v36;
      double result = (int *)(v17 + 16 * v37);
      int v38 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_77;
      }
      unsigned int v13 = 0;
      int v39 = 1;
      do
      {
        if (v38 == -1) {
          goto LABEL_134;
        }
        if (v13) {
          BOOL v40 = 0;
        }
        else {
          BOOL v40 = v38 == -2;
        }
        if (v40) {
          unsigned int v13 = result;
        }
        unsigned int v41 = v37 + v39++;
        unsigned int v37 = v41 & v36;
        double result = (int *)(v17 + 16 * v37);
        int v38 = *result;
      }
      while (*(_DWORD *)a3 != *result);
      goto LABEL_77;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v19 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v20 = 16;
      }
      else
      {
        int v20 = *(_DWORD *)(a1 + 16);
        if (!v20)
        {
          uint64_t v66 = 0;
LABEL_82:
          double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v66, (int *)a3);
          goto LABEL_52;
        }
        uint64_t v19 = *(void *)(a1 + 8);
      }
      int v42 = v20 - 1;
      unsigned int v43 = (37 * *(_DWORD *)a3) & v42;
      double result = (int *)(v19 + 16 * v43);
      int v44 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_52;
      }
      BOOL v70 = 0;
      int v71 = 1;
      do
      {
        if (v44 == -1)
        {
          if (v70) {
            uint64_t v66 = v70;
          }
          else {
            uint64_t v66 = result;
          }
          goto LABEL_82;
        }
        if (v70) {
          BOOL v72 = 0;
        }
        else {
          BOOL v72 = v44 == -2;
        }
        if (v72) {
          BOOL v70 = result;
        }
        unsigned int v73 = v43 + v71++;
        unsigned int v43 = v73 & v42;
        double result = (int *)(v19 + 16 * v43);
        int v44 = *result;
      }
      while (*(_DWORD *)a3 != *result);
LABEL_52:
      uint64_t v45 = 0x3A00000000000000;
LABEL_78:
      *((void *)result + 1) = v45 & 0xFF00000000000000 | v7 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v52 = *(void *)(a3 + 16);
      uint64_t v53 = *(void *)(a3 + 8) + 8;
      if (v52 <= 8) {
        unint64_t v52 = 8;
      }
LABEL_80:
      *(void *)(a3 + 8) = v53;
      *(void *)(a3 + 16) = v52;
      ++*(_DWORD *)a3;
      return result;
    case 3uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v21 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v22 = 16;
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 16);
        if (!v22)
        {
          unint64_t v67 = 0;
          goto LABEL_84;
        }
        uint64_t v21 = *(void *)(a1 + 8);
      }
      int v46 = v22 - 1;
      unsigned int v47 = (37 * *(_DWORD *)a3) & v46;
      double result = (int *)(v21 + 16 * v47);
      int v48 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_55;
      }
      BOOL v74 = 0;
      int v75 = 1;
      while (v48 != -1)
      {
        if (v74) {
          BOOL v76 = 0;
        }
        else {
          BOOL v76 = v48 == -2;
        }
        if (v76) {
          BOOL v74 = result;
        }
        unsigned int v77 = v47 + v75++;
        unsigned int v47 = v77 & v46;
        double result = (int *)(v21 + 16 * v47);
        int v48 = *result;
        if (*(_DWORD *)a3 == *result)
        {
LABEL_55:
          uint64_t v45 = 0x3B00000000000000;
          goto LABEL_78;
        }
      }
      if (v74) {
        unint64_t v67 = v74;
      }
      else {
        unint64_t v67 = result;
      }
LABEL_84:
      double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v67, (int *)a3);
      goto LABEL_55;
    case 4uLL:
      unsigned __int8 v23 = [a2 indirectConstantDataType];
      uint64_t v24 = [a2 indirectConstantDataSize];
      unint64_t v25 = [a2 indirectConstantAlignment];
      uint64_t v26 = *(void *)(a3 + 8);
      uint64_t v27 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v28 = 16;
      }
      else
      {
        int v28 = *(_DWORD *)(a1 + 16);
        if (!v28)
        {
          uint64_t v68 = 0;
          goto LABEL_86;
        }
        uint64_t v27 = *(void *)(a1 + 8);
      }
      int v49 = v28 - 1;
      unsigned int v50 = (37 * *(_DWORD *)a3) & v49;
      double result = (int *)(v27 + 16 * v50);
      int v51 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_58;
      }
      uint64_t v78 = 0;
      int v79 = 1;
      while (v51 != -1)
      {
        if (v78) {
          BOOL v80 = 0;
        }
        else {
          BOOL v80 = v51 == -2;
        }
        if (v80) {
          uint64_t v78 = result;
        }
        unsigned int v81 = v50 + v79++;
        unsigned int v50 = v81 & v49;
        double result = (int *)(v27 + 16 * v50);
        int v51 = *result;
        if (*(_DWORD *)a3 == *result)
        {
LABEL_58:
          *((void *)result + 1) = v26 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v23 << 56);
          unint64_t v52 = *(void *)(a3 + 16);
          uint64_t v53 = *(void *)(a3 + 8) + v24;
          if (v52 <= v25) {
            unint64_t v52 = v25;
          }
          goto LABEL_80;
        }
      }
      if (v78) {
        uint64_t v68 = v78;
      }
      else {
        uint64_t v68 = result;
      }
LABEL_86:
      double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v68, (int *)a3);
      goto LABEL_58;
    case 0x15uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v29 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v30 = 16;
      }
      else
      {
        int v30 = *(_DWORD *)(a1 + 16);
        if (!v30)
        {
          int v69 = 0;
          goto LABEL_88;
        }
        uint64_t v29 = *(void *)(a1 + 8);
      }
      int v54 = v30 - 1;
      unsigned int v55 = (37 * *(_DWORD *)a3) & v54;
      double result = (int *)(v29 + 16 * v55);
      int v56 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_63;
      }
      int v82 = 0;
      int v83 = 1;
      while (v56 != -1)
      {
        if (v82) {
          BOOL v84 = 0;
        }
        else {
          BOOL v84 = v56 == -2;
        }
        if (v84) {
          int v82 = result;
        }
        unsigned int v85 = v55 + v83++;
        unsigned int v55 = v85 & v54;
        double result = (int *)(v29 + 16 * v55);
        int v56 = *result;
        if (*(_DWORD *)a3 == *result)
        {
LABEL_63:
          uint64_t v45 = 0x5000000000000000;
          goto LABEL_78;
        }
      }
      if (v82) {
        int v69 = v82;
      }
      else {
        int v69 = result;
      }
LABEL_88:
      double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v69, (int *)a3);
      goto LABEL_63;
    case 0x17uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v31 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v32 = 16;
      }
      else
      {
        int v32 = *(_DWORD *)(a1 + 16);
        if (!v32) {
          goto LABEL_37;
        }
        uint64_t v31 = *(void *)(a1 + 8);
      }
      int v57 = v32 - 1;
      unsigned int v58 = (37 * *(_DWORD *)a3) & v57;
      double result = (int *)(v31 + 16 * v58);
      int v59 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_77;
      }
      unsigned int v13 = 0;
      int v60 = 1;
      while (v59 != -1)
      {
        if (v13) {
          BOOL v61 = 0;
        }
        else {
          BOOL v61 = v59 == -2;
        }
        if (v61) {
          unsigned int v13 = result;
        }
        unsigned int v62 = v58 + v60++;
        unsigned int v58 = v62 & v57;
        double result = (int *)(v31 + 16 * v58);
        int v59 = *result;
        if (*(_DWORD *)a3 == *result) {
          goto LABEL_77;
        }
      }
      goto LABEL_134;
    case 0x18uLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v33 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v34 = 16;
      }
      else
      {
        int v34 = *(_DWORD *)(a1 + 16);
        if (!v34) {
          goto LABEL_37;
        }
        uint64_t v33 = *(void *)(a1 + 8);
      }
      int v63 = v34 - 1;
      unsigned int v64 = (37 * *(_DWORD *)a3) & v63;
      double result = (int *)(v33 + 16 * v64);
      int v65 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_77;
      }
      unsigned int v13 = 0;
      int v86 = 1;
      while (v65 != -1)
      {
        if (v13) {
          BOOL v87 = 0;
        }
        else {
          BOOL v87 = v65 == -2;
        }
        if (v87) {
          unsigned int v13 = result;
        }
        unsigned int v88 = v64 + v86++;
        unsigned int v64 = v88 & v63;
        double result = (int *)(v33 + 16 * v64);
        int v65 = *result;
        if (*(_DWORD *)a3 == *result) {
          goto LABEL_77;
        }
      }
LABEL_134:
      if (v13) {
        uint64_t v35 = v13;
      }
      else {
        uint64_t v35 = result;
      }
LABEL_38:
      double result = agx::DenseMapBase<agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>,unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::InsertIntoBucket<unsigned int const&>(a1, v35, (int *)a3);
LABEL_77:
      uint64_t v45 = 0x3C00000000000000;
      goto LABEL_78;
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
      uint64_t v7 = *(void *)(a3 + 8);
      uint64_t v8 = a1 + 8;
      if (*(unsigned char *)a1)
      {
        int v9 = 16;
      }
      else
      {
        int v9 = *(_DWORD *)(a1 + 16);
        if (!v9)
        {
LABEL_37:
          uint64_t v35 = 0;
          goto LABEL_38;
        }
        uint64_t v8 = *(void *)(a1 + 8);
      }
      int v10 = v9 - 1;
      unsigned int v11 = (37 * *(_DWORD *)a3) & v10;
      double result = (int *)(v8 + 16 * v11);
      int v12 = *result;
      if (*(_DWORD *)a3 == *result) {
        goto LABEL_77;
      }
      unsigned int v13 = 0;
      int v14 = 1;
      do
      {
        if (v12 == -1) {
          goto LABEL_134;
        }
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          unsigned int v13 = result;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        double result = (int *)(v8 + 16 * v11);
        int v12 = *result;
      }
      while (*(_DWORD *)a3 != *result);
      goto LABEL_77;
    default:
      return result;
  }
}

void agx::SmallDenseMap<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo,16u,agx::DenseMapInfo<unsigned int,void>,agx::detail::DenseMapPair<unsigned int,AGX::IndirectArgumentLayoutGen2::PackedFieldInfo>>::grow(unsigned int *a1, unsigned int a2)
{
  v68[30] = *MEMORY[0x263EF8340];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(unsigned char *)a1 & 1) == 0)
  {
    unsigned int v6 = (char *)*((void *)a1 + 1);
    uint64_t v7 = a1[4];
    if (a2 > 0x10)
    {
      uint64_t v30 = a2;
      uint64_t v31 = (char *)operator new(16 * a2, (std::align_val_t)8uLL);
      *((void *)a1 + 1) = v31;
      *((void *)a1 + 2) = v30;
      unsigned int v32 = *a1;
      uint64_t v8 = &v6[16 * v7];
      *(void *)a1 = *a1 & 1;
      if ((v32 & 1) == 0)
      {
        uint64_t v33 = &v31[16 * v30];
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v8 = &v6[16 * v7];
      *(void *)a1 = 1;
    }
    uint64_t v33 = (char *)(a1 + 66);
    uint64_t v31 = (char *)(a1 + 2);
LABEL_48:
    unint64_t v34 = v33 - v31 - 16;
    if (v34 >= 0x10)
    {
      uint64_t v35 = (v34 >> 4) + 1;
      int v36 = v31 + 16;
      uint64_t v37 = v35 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = -1;
        *int v36 = -1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v35 == (v35 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_54;
      }
      v31 += 16 * (v35 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)uint64_t v31 = -1;
      v31 += 16;
    }
    while (v31 != v33);
LABEL_54:
    if (v7)
    {
      int v38 = v6;
      do
      {
        int v45 = *(_DWORD *)v38;
        if (*(_DWORD *)v38 <= 0xFFFFFFFD)
        {
          if (*(unsigned char *)a1)
          {
            int v40 = 16;
            int v39 = (int *)(a1 + 2);
          }
          else
          {
            int v39 = (int *)*((void *)a1 + 1);
            int v40 = a1[4];
          }
          int v41 = v40 - 1;
          unsigned int v42 = (v40 - 1) & (37 * v45);
          unsigned int v43 = &v39[4 * v42];
          int v44 = *v43;
          if (v45 != *v43)
          {
            int v46 = 0;
            int v47 = 1;
            while (v44 != -1)
            {
              if (v46) {
                BOOL v48 = 0;
              }
              else {
                BOOL v48 = v44 == -2;
              }
              if (v48) {
                int v46 = v43;
              }
              unsigned int v49 = v42 + v47++;
              unsigned int v42 = v49 & v41;
              unsigned int v43 = &v39[4 * (v49 & v41)];
              int v44 = *v43;
              if (v45 == *v43) {
                goto LABEL_58;
              }
            }
            if (v46) {
              unsigned int v43 = v46;
            }
          }
LABEL_58:
          *unsigned int v43 = v45;
          *((void *)v43 + 1) = *((void *)v38 + 1);
          *a1 += 2;
        }
        v38 += 16;
      }
      while (v38 != v8);
    }
    operator delete(v6, 16 * v7, (std::align_val_t)8uLL);
    return;
  }
  int v9 = (int *)&v66;
  if (a1[2] <= 0xFFFFFFFD)
  {
    unsigned int v66 = a1[2];
    uint64_t v67 = *((void *)a1 + 2);
    int v9 = (int *)v68;
  }
  unsigned int v10 = a1[6];
  if (v10 <= 0xFFFFFFFD)
  {
    *int v9 = v10;
    *((void *)v9 + 1) = *((void *)a1 + 4);
    v9 += 4;
  }
  unsigned int v11 = a1[10];
  if (v11 <= 0xFFFFFFFD)
  {
    *int v9 = v11;
    *((void *)v9 + 1) = *((void *)a1 + 6);
    v9 += 4;
  }
  unsigned int v12 = a1[14];
  if (v12 <= 0xFFFFFFFD)
  {
    *int v9 = v12;
    *((void *)v9 + 1) = *((void *)a1 + 8);
    v9 += 4;
  }
  unsigned int v13 = a1[18];
  if (v13 <= 0xFFFFFFFD)
  {
    *int v9 = v13;
    *((void *)v9 + 1) = *((void *)a1 + 10);
    v9 += 4;
  }
  unsigned int v14 = a1[22];
  if (v14 <= 0xFFFFFFFD)
  {
    *int v9 = v14;
    *((void *)v9 + 1) = *((void *)a1 + 12);
    v9 += 4;
  }
  unsigned int v15 = a1[26];
  if (v15 <= 0xFFFFFFFD)
  {
    *int v9 = v15;
    *((void *)v9 + 1) = *((void *)a1 + 14);
    v9 += 4;
  }
  unsigned int v16 = a1[30];
  if (v16 <= 0xFFFFFFFD)
  {
    *int v9 = v16;
    *((void *)v9 + 1) = *((void *)a1 + 16);
    v9 += 4;
  }
  unsigned int v17 = a1[34];
  if (v17 <= 0xFFFFFFFD)
  {
    *int v9 = v17;
    *((void *)v9 + 1) = *((void *)a1 + 18);
    v9 += 4;
  }
  unsigned int v18 = a1[38];
  if (v18 <= 0xFFFFFFFD)
  {
    *int v9 = v18;
    *((void *)v9 + 1) = *((void *)a1 + 20);
    v9 += 4;
  }
  unsigned int v19 = a1[42];
  if (v19 <= 0xFFFFFFFD)
  {
    *int v9 = v19;
    *((void *)v9 + 1) = *((void *)a1 + 22);
    v9 += 4;
  }
  unsigned int v20 = a1[46];
  if (v20 <= 0xFFFFFFFD)
  {
    *int v9 = v20;
    *((void *)v9 + 1) = *((void *)a1 + 24);
    v9 += 4;
  }
  unsigned int v21 = a1[50];
  if (v21 <= 0xFFFFFFFD)
  {
    *int v9 = v21;
    *((void *)v9 + 1) = *((void *)a1 + 26);
    v9 += 4;
  }
  unsigned int v22 = a1[54];
  if (v22 <= 0xFFFFFFFD)
  {
    *int v9 = v22;
    *((void *)v9 + 1) = *((void *)a1 + 28);
    v9 += 4;
  }
  unsigned int v23 = a1[58];
  if (v23 <= 0xFFFFFFFD)
  {
    *int v9 = v23;
    *((void *)v9 + 1) = *((void *)a1 + 30);
    v9 += 4;
  }
  unsigned int v24 = a1[62];
  if (v24 <= 0xFFFFFFFD)
  {
    *int v9 = v24;
    *((void *)v9 + 1) = *((void *)a1 + 32);
    v9 += 4;
  }
  unsigned int v25 = *a1;
  if (a2 >= 0x11)
  {
    *a1 = v25 & 0xFFFFFFFE;
    uint64_t v26 = a2;
    *((void *)a1 + 1) = operator new(16 * a2, (std::align_val_t)8uLL);
    *((void *)a1 + 2) = v26;
    unsigned int v25 = *a1;
  }
  *(void *)a1 = v25 & 1;
  if (v25)
  {
    uint64_t v29 = (char *)(a1 + 66);
    int v28 = (char *)(a1 + 2);
  }
  else
  {
    uint64_t v27 = a1[4];
    if (!v27) {
      goto LABEL_85;
    }
    int v28 = (char *)*((void *)a1 + 1);
    uint64_t v29 = &v28[16 * v27];
  }
  unint64_t v50 = v29 - v28 - 16;
  if (v50 < 0x10) {
    goto LABEL_84;
  }
  uint64_t v51 = (v50 >> 4) + 1;
  unint64_t v52 = v28 + 16;
  uint64_t v53 = v51 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v52 - 4) = -1;
    *unint64_t v52 = -1;
    v52 += 8;
    v53 -= 2;
  }
  while (v53);
  if (v51 != (v51 & 0x1FFFFFFFFFFFFFFELL))
  {
    v28 += 16 * (v51 & 0x1FFFFFFFFFFFFFFELL);
    do
    {
LABEL_84:
      *(_DWORD *)int v28 = -1;
      v28 += 16;
    }
    while (v28 != v29);
  }
LABEL_85:
  if (&v66 != (unsigned int *)v9)
  {
    int v54 = (int *)&v66;
    do
    {
      int v61 = *v54;
      if (*v54 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)a1)
        {
          int v56 = 16;
          unsigned int v55 = (int *)(a1 + 2);
        }
        else
        {
          unsigned int v55 = (int *)*((void *)a1 + 1);
          int v56 = a1[4];
        }
        int v57 = v56 - 1;
        unsigned int v58 = (v56 - 1) & (37 * v61);
        int v59 = &v55[4 * v58];
        int v60 = *v59;
        if (v61 != *v59)
        {
          unsigned int v62 = 0;
          int v63 = 1;
          while (v60 != -1)
          {
            if (v62) {
              BOOL v64 = 0;
            }
            else {
              BOOL v64 = v60 == -2;
            }
            if (v64) {
              unsigned int v62 = v59;
            }
            unsigned int v65 = v58 + v63++;
            unsigned int v58 = v65 & v57;
            int v59 = &v55[4 * (v65 & v57)];
            int v60 = *v59;
            if (v61 == *v59) {
              goto LABEL_89;
            }
          }
          if (v62) {
            int v59 = v62;
          }
        }
LABEL_89:
        int *v59 = v61;
        *((void *)v59 + 1) = *((void *)v54 + 1);
        *a1 += 2;
      }
      v54 += 4;
    }
    while (v54 != v9);
  }
}

void ___ZN3AGX25IndirectCommandBufferGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE13resetCommandsEP18AGXG17FamilyBufferjj_block_invoke(uint64_t a1, unsigned int *a2)
{
  int v2 = a2[2] - 1;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = *a2;
  size_t v5 = a2[1];
  unint64_t v4 = (unsigned __int8 *)(a2 + 4);
  uint64_t v7 = (char *)(v3 + v6);
  switch(v2)
  {
    case 0:
      int v8 = *v4;
      memset((void *)(v3 + v6), v8, v5);
      break;
    case 1:
      size_t v9 = v5 & 0xFFFFFFFC;
      size_t v10 = v5 & 3;
      int v11 = *(unsigned __int16 *)v4;
      int __pattern4 = v11 | (v11 << 16);
      memset_pattern4(v7, &__pattern4, v9);
      if (v10) {
        *(_WORD *)&v7[v9] = v11;
      }
      break;
    case 3:
      memset_pattern4((void *)(v3 + v6), v4, v5);
      break;
    case 7:
      memset_pattern8((void *)(v3 + v6), v4, v5);
      break;
    case 15:
      memset_pattern16((void *)(v3 + v6), v4, v5);
      break;
    default:
      return;
  }
}

uint64_t AGX::IndirectComputeCommandBufferGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::resetCommands(uint64_t a1, char *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a4;
  unsigned int v5 = a3;
  if (!*(unsigned char *)(a1 + 17)) {
    bzero((void *)([a2 contents] + *(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 56) * a3), *(unsigned int *)(a1 + 56) * (unint64_t)a4);
  }
  bzero((void *)([a2 contents] + *(_DWORD *)(a1 + 60) + *(_DWORD *)(a1 + 64) * v5), a4 * (unint64_t)*(unsigned int *)(a1 + 64));
  if (!*(unsigned char *)(a1 + 16)) {
    bzero((void *)([a2 contents] + *(_DWORD *)(a1 + 68) + *(_DWORD *)(a1 + 72) * v5), a4 * (unint64_t)*(unsigned int *)(a1 + 72));
  }
  bzero((void *)([a2 contents] + *(_DWORD *)(a1 + 84) + *(_DWORD *)(a1 + 88) * v5), a4 * (unint64_t)*(unsigned int *)(a1 + 88));
  bzero((void *)([a2 contents] + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 96) * v5), a4 * (unint64_t)*(unsigned int *)(a1 + 96));
  if (v4 + v5 > v5)
  {
    size_t v9 = a2 + 8;
    size_t v10 = (int *)MEMORY[0x263F4B188];
    do
    {
      uint64_t v11 = [a2 contents];
      uint64_t v12 = *(_DWORD *)(a1 + 60) + *(_DWORD *)(a1 + 64) * v5;
      unsigned int v13 = (void *)(v11 + v12);
      uint64_t v14 = *(void *)&v9[*v10];
      uint64_t v15 = v14 + v12;
      uint64_t v16 = v14 + *(_DWORD *)(a1 + 100) + *(_DWORD *)(a1 + 104) * v5;
      *unsigned int v13 = v16;
      v13[1] = v16 + 12;
      v13[2] = v15 + 40;
      v13[3] = v15;
      if (!*(unsigned char *)(a1 + 16))
      {
        unsigned int v17 = (void *)([a2 contents] + *(_DWORD *)(a1 + 68) + *(_DWORD *)(a1 + 72) * v5);
        void *v17 = 0;
        v17[1] = 0;
        _DWORD v17[2] = 0;
      }
      uint64_t v18 = [a2 contents] + *(_DWORD *)(a1 + 44) + *(_DWORD *)(a1 + 48) * v5;
      *(void *)uint64_t v18 = 1610612736;
      {
        AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
      }
      if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
        int v19 = 0x80000;
      }
      else {
        int v19 = 0;
      }
      *(_DWORD *)(v18 + 4) = *(_DWORD *)(v18 + 4) & 0xFF71FFFF | v19;
      *(void *)(v18 + 8) = 4;
      *(_DWORD *)(v18 + 16) = 0x40000000;
      *(void *)(v18 + 20) = 0;
      *(void *)(v18 + 36) = 0;
      *(void *)(v18 + 28) = 0;
      unint64_t v20 = *(void *)&v9[*v10] + *(_DWORD *)(a1 + 76) + *(_DWORD *)(a1 + 80) * v5;
      *(_DWORD *)(v18 + 8) = (v20 >> 16) & 0xFFC00000 | 4;
      *(_DWORD *)(v18 + 12) = v20 >> 6;
      *(_DWORD *)(v18 + 44) = 1610612736;
      ++v5;
      --v4;
    }
    while (v4);
  }
  uint64_t result = [a2 contents];
  *(_DWORD *)(result + (*(_DWORD *)(a1 + 44) + *(_DWORD *)(a1 + 48) * *(_DWORD *)a1)) = 0x80000000;
  return result;
}

void sub_242A8C26C(_Unwind_Exception *a1)
{
  AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::Allocation(uint64_t a1, os_unfair_lock_s *a2, unsigned int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3 != 0;
  if (!a3)
  {
    unsigned int v4 = a2 + 10;
    os_unfair_lock_lock(a2 + 10);
    uint64_t v5 = *(void *)(a1 + 8);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v5 + 32), memory_order_acquire);
    uint64_t v7 = (int *)MEMORY[0x263F4B188];
    if (explicit)
    {
      uint64_t v8 = explicit;
      while (1)
      {
        unint64_t v9 = explicit & 0xFFFFFFFF00000000;
        unint64_t v10 = (v9 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v5 + 24) + 8) + *v7 + 24) + 8 * v8))
            + 0x100000000;
        unint64_t explicit = v9 | v8;
        unint64_t v11 = explicit;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 32), &explicit, v10);
        if (explicit == v11) {
          break;
        }
        uint64_t v8 = explicit;
        if (!explicit) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      *(_DWORD *)a1 = 0;
      uint64_t v12 = *(void *)(a1 + 8);
      int v13 = *(_DWORD *)(v12 + 16);
      if (v13)
      {
        if (!*(void *)(v12 + 32)) {
          AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 2 * v13);
        }
      }
      else
      {
        AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 0x20u);
      }
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = atomic_load_explicit((atomic_ullong *volatile)(v14 + 32), memory_order_acquire);
      if (v15)
      {
        uint64_t v8 = v15;
        while (1)
        {
          unint64_t v16 = v15 & 0xFFFFFFFF00000000;
          unint64_t v17 = (v16 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v14 + 24) + 8) + *v7 + 24) + 8 * v8))
              + 0x100000000;
          unint64_t v15 = v16 | v8;
          unint64_t v18 = v15;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 32), &v15, v17);
          if (v15 == v18) {
            break;
          }
          uint64_t v8 = v15;
          if (!v15) {
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        LODWORD(v8) = 0;
      }
    }
    *(_DWORD *)a1 = v8;
    os_unfair_lock_unlock(v4);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
    a3 = *(_DWORD *)a1;
  }
  uint32_t os_unfair_lock_opaque = a2[11]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque < a3)
  {
    uint32_t v20 = a2[11]._os_unfair_lock_opaque;
    do
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 8) + 44), &v20, a3, memory_order_relaxed, memory_order_relaxed);
      if (v20 == os_unfair_lock_opaque) {
        break;
      }
      a3 = *(_DWORD *)a1;
      uint32_t os_unfair_lock_opaque = v20;
    }
    while (v20 < *(_DWORD *)a1);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
  }
  atomic_fetch_add((atomic_uint *volatile)&a2[12], 1u);
  return a1;
}

void sub_242A8C45C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unsigned int *AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation(unsigned int *a1)
{
  if (*a1 && !*((unsigned char *)a1 + 16))
  {
    int v2 = (os_unfair_lock_s *)(*((void *)a1 + 1) + 40);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)a1 + 1);
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 8 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + *v6 + 24) + 8 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

void AGX::Mempool<32u,0u,true,unsigned long long>::AtomicList::reserve(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*a1 + 48) || (*(_DWORD *)(*a1 + 44) + 1) >= 2)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: %s:%d:%s: *** reserve() must be called before any allocation takes place\n", "agxa_mempool_template.hpp", 302, "reserve");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v48 = "agxa_mempool_template.hpp";
      __int16 v49 = 1024;
      int v50 = 302;
      __int16 v51 = 2080;
      unint64_t v52 = "reserve";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** reserve() must be called before any allocation takes place\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      BOOL v48 = "agxa_mempool_template.hpp";
      __int16 v49 = 1024;
      int v50 = 302;
      __int16 v51 = 2080;
      unint64_t v52 = "reserve";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** reserve() must be called before any allocation takes place\n", buf, 0x1Cu);
    }
  }
  else if (a3)
  {
    if (a3 < 0) {
      abort();
    }
    size_t v5 = 8 * a3;
    uint64_t v6 = (char *)operator new(8 * a3);
    uint64_t v7 = (unsigned int *)&v6[v5];
    memcpy(v6, a2, v5);
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
    unint64_t v8 = *(void *)&v6[v5 - 8];
    if (!HIDWORD(v8))
    {
      uint64_t v9 = *a1;
      unint64_t v10 = *(unsigned int *)(*a1 + 16);
      unint64_t v11 = (int *)MEMORY[0x263F4B188];
      if (v8 >= v10)
      {
        do
        {
          if (v10) {
            unint64_t v10 = (2 * v10);
          }
          else {
            unint64_t v10 = 32;
          }
        }
        while (v8 >= v10);
        uint64_t v12 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*(void *)v9 length:8 * v10 options:0];
        int v13 = v12;
        uint64_t v14 = *(void *)(v9 + 8);
        if (v14)
        {
          memcpy(*(void **)&v12[*v11 + 24], *(const void **)(v14 + *v11 + 24), 8 * *(unsigned int *)(v9 + 16));
        }
        *(void *)(v9 + 8) = v13;
        *(_DWORD *)(v9 + 16) = v10;
        unint64_t v15 = *(atomic_uint **)(v9 + 56);
        atomic_uint v16 = *v15;
        if ((*v15 + 1) > 1) {
          unsigned int v17 = v16 + 1;
        }
        else {
          unsigned int v17 = 1;
        }
        atomic_uint v18 = *v15;
        atomic_compare_exchange_strong(v15, (unsigned int *)&v18, v17);
        if (v18 != v16)
        {
          atomic_uint v19 = v18;
          do
          {
            if ((v18 + 1) > 1) {
              unsigned int v20 = v18 + 1;
            }
            else {
              unsigned int v20 = 1;
            }
            atomic_compare_exchange_strong(v15, (unsigned int *)&v19, v20);
            BOOL v21 = v19 == v18;
            atomic_uint v18 = v19;
          }
          while (!v21);
        }
      }
      unsigned int v22 = 0;
      atomic_store(0, (unint64_t *)(*a1 + 32));
      unsigned int v23 = (unsigned int *)v6;
      do
      {
        unint64_t v25 = v22 + 1;
        if (*(void *)v23 > v25)
        {
          uint64_t v26 = *(void *)v23 - 1;
          uint64_t v27 = *a1;
          uint64_t v28 = *(void *)(*a1 + 24);
          if (v25 < v26)
          {
            uint64_t v29 = 8 * v25;
            uint64_t v30 = v26 - v25;
            unsigned int v31 = v22 + 2;
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(v28 + 8) + *v11 + 24) + v29) = v31;
              v29 += 8;
              ++v31;
              --v30;
            }
            while (v30);
          }
          uint64_t v32 = *(void *)(v27 + 32);
          uint64_t v33 = 8 * v26;
          *(_DWORD *)(*(void *)(*(void *)(v28 + 8) + *v11 + 24) + v33) = v32;
          uint64_t v34 = v32;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v27 + 32), (unint64_t *)&v34, (v32 & 0xFFFFFFFF00000000 | v25) + 0x100000000);
          if (v34 != v32)
          {
            do
            {
              *(_DWORD *)(*(void *)(*(void *)(*(void *)(v27 + 24) + 8) + *v11 + 24) + v33) = v34;
              uint64_t v35 = v34;
              atomic_compare_exchange_strong((atomic_ullong *volatile)(v27 + 32), (unint64_t *)&v35, (v34 & 0xFFFFFFFF00000000 | v25) + 0x100000000);
              BOOL v21 = v35 == v34;
              uint64_t v34 = v35;
            }
            while (!v21);
          }
        }
        unsigned int v24 = *v23;
        v23 += 2;
        unsigned int v22 = v24;
      }
      while (v23 != v7);
      uint64_t v36 = *a1;
      uint64_t v37 = (*(_DWORD *)(*a1 + 16) - 1);
      if (v37 > v22)
      {
        uint64_t v38 = v22 + 1;
        uint64_t v39 = *(void *)(v36 + 24);
        if (v38 < v37)
        {
          uint64_t v40 = 8 * v38;
          uint64_t v41 = v37 - v38;
          unsigned int v42 = v22 + 2;
          do
          {
            *(_DWORD *)(*(void *)(*(void *)(v39 + 8) + *v11 + 24) + v40) = v42;
            v40 += 8;
            ++v42;
            --v41;
          }
          while (v41);
        }
        uint64_t v43 = *(void *)(v36 + 32);
        uint64_t v44 = 8 * v37;
        *(_DWORD *)(*(void *)(*(void *)(v39 + 8) + *v11 + 24) + v44) = v43;
        uint64_t v45 = v43;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v36 + 32), (unint64_t *)&v45, (v43 & 0xFFFFFFFF00000000 | v38) + 0x100000000);
        if (v45 != v43)
        {
          uint64_t v46 = v45;
          do
          {
            *(_DWORD *)(*(void *)(*(void *)(*(void *)(v36 + 24) + 8) + *v11 + 24) + v44) = v45;
            atomic_compare_exchange_strong((atomic_ullong *volatile)(v36 + 32), (unint64_t *)&v46, (v45 & 0xFFFFFFFF00000000 | v38) + 0x100000000);
            BOOL v21 = v46 == v45;
            uint64_t v45 = v46;
          }
          while (!v21);
        }
      }
      atomic_store(v8, (unsigned int *)(*a1 + 44));
    }
    operator delete(v6);
  }
}

void sub_242A8C9D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::IndirectComputeCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::recalculateThreadgroupOffsets(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v3 = (int *)MEMORY[0x263F4B188];
  uint64_t v4 = *(void *)(a1 + (int)*MEMORY[0x263F4B188] + 24);
  size_t v5 = (_DWORD *)(v4 + (a2[21] + a2[22] * a3));
  uint64_t v6 = (_DWORD *)(v4 + (a2[15] + a2[16] * a3));
  int v7 = v5[36];
  v6[32] = v7;
  int v8 = *v5 + v7;
  v6[33] = v8;
  int v9 = v5[1] + v8;
  v6[34] = v9;
  int v10 = v5[2] + v9;
  v6[35] = v10;
  int v11 = v5[3] + v10;
  v6[36] = v11;
  int v12 = v5[4] + v11;
  v6[37] = v12;
  int v13 = v5[5] + v12;
  v6[38] = v13;
  int v14 = v5[6] + v13;
  v6[39] = v14;
  int v15 = v5[7] + v14;
  v6[40] = v15;
  int v16 = v5[8] + v15;
  v6[41] = v16;
  int v17 = v5[9] + v16;
  v6[42] = v17;
  int v18 = v5[10] + v17;
  v6[43] = v18;
  int v19 = v5[11] + v18;
  v6[44] = v19;
  int v20 = v5[12] + v19;
  v6[45] = v20;
  int v21 = v5[13] + v20;
  v6[46] = v21;
  int v22 = v5[14] + v21;
  v6[47] = v22;
  int v23 = v5[15] + v22;
  v6[48] = v23;
  int v24 = v5[16] + v23;
  v6[49] = v24;
  int v25 = v5[17] + v24;
  v6[50] = v25;
  int v26 = v5[18] + v25;
  v6[51] = v26;
  int v27 = v5[19] + v26;
  v6[52] = v27;
  int v28 = v5[20] + v27;
  v6[53] = v28;
  int v29 = v5[21] + v28;
  v6[54] = v29;
  int v30 = v5[22] + v29;
  v6[55] = v30;
  int v31 = v5[23] + v30;
  v6[56] = v31;
  int v32 = v5[24] + v31;
  v6[57] = v32;
  int v33 = v5[25] + v32;
  v6[58] = v33;
  int v34 = v5[26] + v33;
  v6[59] = v34;
  int v35 = v5[27] + v34;
  v6[60] = v35;
  int v36 = v5[28] + v35;
  v6[61] = v36;
  int v37 = v5[29] + v36;
  v6[62] = v37;
  int v38 = v5[30] + v37;
  v6[63] = v38;
  int v39 = v5[31] + v38;
  v6[64] = v39;
  int v40 = v5[32] + v39;
  v6[65] = v40;
  int v41 = v5[33] + v40;
  v6[66] = v41;
  uint64_t v42 = *(void *)(a1 + *v3 + 24);
  uint64_t v43 = (__int16 *)(v42 + (a2[19] + a2[20] * a3));
  unint64_t v44 = (unsigned __int16)v43[1];
  unsigned int v45 = (unsigned __int16)v43[1];
  unsigned int v46 = v44 >> 6;
  uint64_t v47 = (v44 >> 1) & 3;
  if (v47) {
    int v48 = v47 == 2;
  }
  else {
    int v48 = 2;
  }
  int v49 = (v45 >> 3) & 3;
  if (v49 == 3) {
    int v50 = 0;
  }
  else {
    int v50 = dword_242EAA720[v49];
  }
  uint64_t v51 = v46 & 0xF8;
  int v52 = (v45 >> 5) & 3;
  if (v52 == 3) {
    int v53 = 0;
  }
  else {
    int v53 = dword_242EAA720[v52];
  }
  unsigned int v54 = (unsigned __int16)v43[2];
  unsigned int v55 = (v45 >> 7) & 3;
  if (v55 == 3) {
    unsigned int v56 = 0;
  }
  else {
    unsigned int v56 = dword_242EAA714[v55];
  }
  int v57 = v5[34];
  __int16 v58 = *v43;
  switch((v45 >> 15) & 0xFFFFFFF1 | (2 * (v54 & 7)))
  {
    case 0u:
      unint64_t v59 = 0;
      uint64_t v60 = 10;
      if ((v45 & 0x4000) != 0) {
        uint64_t v60 = 0;
      }
      break;
    case 1u:
      unint64_t v59 = (unint64_t)((v54 >> 2) & 2 | (v45 >> 14) & 1) << 32;
      uint64_t v60 = 7;
      break;
    case 2u:
      unsigned int v61 = (v54 >> 2) & 6 | (v45 >> 14) & 1;
      if (v61 == 7) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = qword_242EB3620[v61];
      }
      uint64_t v60 = 4;
      break;
    case 3u:
      unsigned int v62 = (v54 >> 2) & 0xE | (v45 >> 14) & 1;
      if (v62 >= 0xB) {
        goto LABEL_23;
      }
      uint64_t v60 = 0;
      unint64_t v59 = qword_242EB3658[v62];
      break;
    case 4u:
      uint64_t v63 = (v54 >> 2) & 2 | (v45 >> 14) & 1;
      if (v63 == 3) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = v63 << 32;
      }
      uint64_t v60 = 8;
      break;
    case 5u:
      unsigned int v64 = (v54 >> 2) & 0xE | (v45 >> 14) & 1;
      if (v64 >= 0xA) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = qword_242EB36B0[v64];
      }
      uint64_t v60 = 1;
      break;
    case 6u:
      unsigned int v65 = (v54 >> 2) & 6 | (v45 >> 14) & 1;
      if (v65 >= 6) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = qword_242EB3700[v65];
      }
      uint64_t v60 = 5;
      break;
    case 7u:
      unsigned int v66 = (v54 >> 2) & 0xE | (v45 >> 14) & 1;
      if (v66 >= 9) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = qword_242EB3730[v66];
      }
      uint64_t v60 = 2;
      break;
    case 8u:
      unint64_t v59 = (unint64_t)(v45 & 0x4000) << 18;
      uint64_t v60 = 9;
      break;
    case 9u:
      unsigned int v67 = (v54 >> 2) & 6 | (v45 >> 14) & 1;
      if (v67 >= 5) {
        unint64_t v59 = 0;
      }
      else {
        unint64_t v59 = qword_242EB3778[v67];
      }
      uint64_t v60 = 6;
      break;
    case 0xAu:
      unint64_t v59 = qword_242EB37A0[(v54 >> 2) & 6 | (v45 >> 14) & 1];
      uint64_t v60 = 3;
      break;
    default:
LABEL_23:
      uint64_t v60 = 0;
      unint64_t v59 = 0;
      break;
  }
  uint64_t result = v59 | v60;
  unint64_t v69 = v56 | (unint64_t)(v51 << 32);
  uint64_t v70 = v5[37];
  uint64_t v71 = v42 + (a2[25] + a2[26] * a3);
  int v73 = *(_DWORD *)(v71 + 24);
  int v72 = *(_DWORD *)(v71 + 28);
  if (v73 * 4 * v70 * v72
    && (v74 = 1 << -__clz(v73 - 1), unsigned int v75 = -__clz(v72 - 1), (v74 << v75) * 4 * v70))
  {
    uint64_t result = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v70, 1, v74, 1 << (v75 & 0x1F));
    unint64_t v69 = v76;
    char v77 = 64;
  }
  else
  {
    char v77 = 0;
  }
  BOOL v78 = HIDWORD(result) == 7;
  BOOL v79 = HIDWORD(result) == 4;
  if (HIDWORD(result) == 4) {
    BOOL v78 = 1;
  }
  if (HIDWORD(result) < 2) {
    BOOL v79 = 1;
  }
  if (!HIDWORD(result)) {
    BOOL v78 = 1;
  }
  int v80 = HIDWORD(result) == 8 || v78;
  if (HIDWORD(result) == 1)
  {
    int v80 = 1;
    BOOL v78 = 1;
  }
  int v81 = HIDWORD(result) == 5 || v79;
  if (HIDWORD(result) == 5)
  {
    int v80 = 1;
    BOOL v78 = 1;
  }
  if (HIDWORD(result) == 2)
  {
    BOOL v78 = 1;
    int v82 = 1;
  }
  else
  {
    int v82 = v81;
  }
  if (HIDWORD(result) == 2) {
    int v83 = 1;
  }
  else {
    int v83 = v80;
  }
  BOOL v84 = HIDWORD(result) < 2 && result == 9;
  BOOL v86 = (result == 10 || result == 0) && HIDWORD(result) == 0;
  BOOL v87 = (HIDWORD(result) & 0xFFFFFFFE) == 2 || HIDWORD(result) < 2;
  if ((HIDWORD(result) & 0xFFFFFFFE) == 2) {
    int v88 = 1;
  }
  else {
    int v88 = v81;
  }
  if ((HIDWORD(result) & 0xFFFFFFFE) == 2) {
    BOOL v79 = 1;
  }
  BOOL v89 = result == 7 && v87;
  BOOL v90 = HIDWORD(result) == 6;
  BOOL v91 = result == 8;
  if (HIDWORD(result) == 3) {
    BOOL v90 = 1;
  }
  if (HIDWORD(result) >= 3) {
    BOOL v91 = 0;
  }
  int v92 = v90 | v82;
  if (result == 4) {
    int v93 = v92;
  }
  else {
    int v93 = 0;
  }
  int v94 = (result == 1) & ((v90 || HIDWORD(result) == 9) | v83);
  if (result != 5) {
    int v88 = 0;
  }
  int v95 = (result == 2) & (v90 | v83);
  BOOL v96 = result == 6 && v79;
  int v97 = result == 3 && (v90 || v78);
  unsigned int v98 = 119;
  if (!v86
    && !v89
    && (v93 & 1) == 0
    && result
    && !v91
    && (v94 & 1) == 0
    && (v88 & 1) == 0
    && (v95 & 1) == 0
    && !v84
    && !v96
    && !v97)
  {
    uint64_t v99 = 0;
    LOWORD(v100) = 0;
    LOWORD(v101) = 0;
    goto LABEL_273;
  }
  int v102 = v57 + v41;
  int v101 = v45 & 1 | (((v69 >> 35) & 0x1F) << 9);
  if (v48 != 1)
  {
    if (!v48) {
      LOWORD(v101) = v101 | 2;
    }
    unsigned int v103 = v102 + 63;
    if (v50) {
      goto LABEL_121;
    }
LABEL_125:
    LOWORD(v101) = v101 & 0xFFE7 | 8;
    goto LABEL_127;
  }
  LOWORD(v101) = v101 | 4;
  unsigned int v103 = v102 + 63;
  if (!v50) {
    goto LABEL_125;
  }
LABEL_121:
  if (v50 == 1)
  {
    LOWORD(v101) = v101 & 0xFFE7 | 0x10;
  }
  else if (v50 == 2)
  {
    LOWORD(v101) = v101 & 0xFFE7;
  }
LABEL_127:
  unsigned __int8 v104 = v77 | ((v57 + v41 != 0) << 7);
  if (v53)
  {
    if (v53 == 1)
    {
      LOWORD(v101) = v101 & 0xFF9F | 0x40;
    }
    else if (v53 == 2)
    {
      LOWORD(v101) = v101 & 0xFF9F;
    }
  }
  else
  {
    LOWORD(v101) = v101 & 0xFF9F | 0x20;
  }
  uint64_t v99 = (unsigned __int16)v103 >> 14;
  unsigned int v98 = v58 & 0xF800 | 0x77;
  int v100 = v104 | (v103 >> 6 << 8);
  if (!v69)
  {
    LOWORD(v101) = v101 & 0xFE7F | 0x100;
    goto LABEL_139;
  }
  if (v69 == 2)
  {
    LOWORD(v101) = v101 & 0xFE7F | 0x80;
    if (!v86) {
      goto LABEL_143;
    }
    goto LABEL_140;
  }
  if (v69 != 1)
  {
LABEL_139:
    if (!v86) {
      goto LABEL_143;
    }
    goto LABEL_140;
  }
  LOWORD(v101) = v101 & 0xFE7F;
  if (!v86)
  {
LABEL_143:
    if (v89)
    {
      if (HIDWORD(result) && (HIDWORD(result) == 1 || (LOWORD(v100) = v100 | 8, HIDWORD(result) != 2))) {
        LOWORD(v101) = v101 | 0xC000;
      }
      else {
        LOWORD(v101) = v101 & 0x3FFF | 0x8000;
      }
      goto LABEL_273;
    }
    if (v93)
    {
      __int16 v105 = v100 | 1;
      if (HIDWORD(result) == 4)
      {
LABEL_153:
        LOWORD(v101) = v101 & 0xBFFF;
        LOWORD(v100) = v105;
        goto LABEL_273;
      }
      if (HIDWORD(result))
      {
        switch(HIDWORD(result))
        {
          case 1:
            LOWORD(v101) = v101 & 0xBFFF;
            __int16 v106 = 9;
            goto LABEL_272;
          case 5:
            LOWORD(v101) = v101 | 0x4000;
            __int16 v106 = 9;
            goto LABEL_272;
          case 2:
            LOWORD(v101) = v101 & 0xBFFF;
            __int16 v106 = 17;
            goto LABEL_272;
          case 6:
            LOWORD(v101) = v101 | 0x4000;
            __int16 v106 = 17;
            goto LABEL_272;
          case 3:
            LOWORD(v101) = v101 & 0xBFFF;
            __int16 v106 = 25;
            goto LABEL_272;
        }
LABEL_274:
        LOWORD(v100) = v105;
        goto LABEL_273;
      }
      goto LABEL_218;
    }
    if (result)
    {
      if (v91)
      {
        __int16 v105 = v100 | 2;
        if (!HIDWORD(result)) {
          goto LABEL_153;
        }
        if (HIDWORD(result) == 1) {
          goto LABEL_218;
        }
        LOWORD(v101) = v101 & 0xBFFF;
        __int16 v106 = 10;
LABEL_272:
        LOWORD(v100) = v100 | v106;
        goto LABEL_273;
      }
      if (v94)
      {
        __int16 v109 = v101 | 0x8000;
        __int16 v110 = v100 | 2;
        if (HIDWORD(result) != 7)
        {
          switch(HIDWORD(result))
          {
            case 4:
LABEL_168:
              LOWORD(v101) = v101 | 0xC000;
              LOWORD(v100) = v110;
              goto LABEL_273;
            case 0:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 10;
              goto LABEL_272;
            case 8:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 10;
              goto LABEL_272;
            case 1:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 18;
              goto LABEL_272;
            case 5:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 18;
              goto LABEL_272;
            case 2:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 26;
              goto LABEL_272;
            case 9:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 26;
              goto LABEL_272;
            case 6:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 34;
              goto LABEL_272;
            case 3:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 34;
              goto LABEL_272;
          }
LABEL_266:
          LOWORD(v100) = v110;
          LOWORD(v101) = v109;
          goto LABEL_273;
        }
        goto LABEL_184;
      }
      if (v88)
      {
        __int16 v105 = v100 | 3;
        if (HIDWORD(result) == 4) {
          goto LABEL_153;
        }
        if (HIDWORD(result))
        {
          switch(HIDWORD(result))
          {
            case 1:
              LOWORD(v101) = v101 & 0xBFFF;
              __int16 v106 = 11;
              goto LABEL_272;
            case 5:
              LOWORD(v101) = v101 | 0x4000;
              __int16 v106 = 11;
              goto LABEL_272;
            case 2:
              LOWORD(v101) = v101 & 0xBFFF;
              __int16 v106 = 19;
              goto LABEL_272;
            case 3:
              LOWORD(v101) = v101 | 0x4000;
              __int16 v106 = 19;
              goto LABEL_272;
          }
          goto LABEL_274;
        }
LABEL_218:
        LOWORD(v101) = v101 | 0x4000;
        LOWORD(v100) = v105;
        goto LABEL_273;
      }
      if (v95)
      {
        __int16 v109 = v101 | 0x8000;
        __int16 v110 = v100 | 3;
        if (HIDWORD(result) != 7)
        {
          switch(HIDWORD(result))
          {
            case 4:
              goto LABEL_168;
            case 0:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 11;
              goto LABEL_272;
            case 8:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 11;
              goto LABEL_272;
            case 1:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 19;
              goto LABEL_272;
            case 5:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 19;
              goto LABEL_272;
            case 2:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 27;
              goto LABEL_272;
            case 6:
              LOWORD(v101) = v101 | 0xC000;
              __int16 v106 = 27;
              goto LABEL_272;
            case 3:
              LOWORD(v101) = v101 & 0x3FFF | 0x8000;
              __int16 v106 = 35;
              goto LABEL_272;
          }
          goto LABEL_266;
        }
LABEL_184:
        LOWORD(v101) = v109 & 0xBFFF;
        LOWORD(v100) = v110;
        goto LABEL_273;
      }
      if (v84)
      {
        LOWORD(v100) = v100 | 4;
        if (HIDWORD(result))
        {
          LOWORD(v101) = v101 | 0x4000;
          goto LABEL_273;
        }
        goto LABEL_141;
      }
      if (!v96)
      {
        if (!v97) {
          goto LABEL_273;
        }
        __int16 v105 = v100 | 5;
        if (HIDWORD(result) == 7) {
          goto LABEL_153;
        }
        if (HIDWORD(result) != 4)
        {
          switch(HIDWORD(result))
          {
            case 0:
              LOWORD(v101) = v101 & 0xBFFF;
              __int16 v106 = 13;
              goto LABEL_272;
            case 1:
              LOWORD(v101) = v101 | 0x4000;
              __int16 v106 = 13;
              goto LABEL_272;
            case 5:
              LOWORD(v101) = v101 & 0xBFFF;
              __int16 v106 = 21;
              goto LABEL_272;
            case 2:
              LOWORD(v101) = v101 | 0x4000;
              __int16 v106 = 21;
              goto LABEL_272;
            case 6:
              LOWORD(v101) = v101 & 0xBFFF;
              break;
            case 3:
              LOWORD(v101) = v101 | 0x4000;
              break;
            default:
              goto LABEL_274;
          }
          __int16 v106 = 29;
          goto LABEL_272;
        }
        goto LABEL_218;
      }
      __int16 v107 = v101 | 0x8000;
      __int16 v108 = v100 | 4;
      if (HIDWORD(result) != 4)
      {
        if (HIDWORD(result))
        {
          if (HIDWORD(result) == 1)
          {
            LOWORD(v101) = v101 & 0x3FFF | 0x8000;
            LOWORD(v100) = v100 | 0xC;
            goto LABEL_273;
          }
          if (HIDWORD(result) == 2)
          {
            LOWORD(v101) = v101 | 0xC000;
            LOWORD(v100) = v100 | 0xC;
            goto LABEL_273;
          }
          LOWORD(v101) = v101 & 0x3FFF | 0x8000;
          __int16 v106 = 20;
          goto LABEL_272;
        }
LABEL_170:
        LOWORD(v101) = v101 | 0xC000;
        LOWORD(v100) = v108;
        goto LABEL_273;
      }
    }
    else
    {
      __int16 v107 = v101 | 0x8000;
      __int16 v108 = v100 | 1;
      if (HIDWORD(result) != 10)
      {
        if (HIDWORD(result) != 7)
        {
          if (HIDWORD(result) == 4)
          {
            LOWORD(v101) = v101 & 0x3FFF | 0x8000;
            __int16 v106 = 9;
          }
          else if (HIDWORD(result))
          {
            switch(HIDWORD(result))
            {
              case 8:
                LOWORD(v101) = v101 & 0x3FFF | 0x8000;
                __int16 v106 = 17;
                break;
              case 1:
                LOWORD(v101) = v101 | 0xC000;
                __int16 v106 = 17;
                break;
              case 5:
                LOWORD(v101) = v101 & 0x3FFF | 0x8000;
                __int16 v106 = 25;
                break;
              case 2:
                LOWORD(v101) = v101 | 0xC000;
                __int16 v106 = 25;
                break;
              case 9:
                LOWORD(v101) = v101 & 0x3FFF | 0x8000;
                __int16 v106 = 33;
                break;
              case 6:
                LOWORD(v101) = v101 | 0xC000;
                __int16 v106 = 33;
                break;
              case 3:
                LOWORD(v101) = v101 & 0x3FFF | 0x8000;
                __int16 v106 = 41;
                break;
              default:
                LOWORD(v100) = v100 | 1;
                LOWORD(v101) = v101 | 0x8000;
                goto LABEL_273;
            }
          }
          else
          {
            LOWORD(v101) = v101 | 0xC000;
            __int16 v106 = 9;
          }
          goto LABEL_272;
        }
        goto LABEL_170;
      }
    }
    LOWORD(v101) = v107 & 0xBFFF;
    LOWORD(v100) = v108;
    goto LABEL_273;
  }
LABEL_140:
  if (result == 10)
  {
LABEL_141:
    LOWORD(v101) = v101 & 0xBFFF;
    goto LABEL_273;
  }
  if (!result) {
    LOWORD(v101) = v101 | 0x4000;
  }
LABEL_273:
  *(void *)uint64_t v43 = (v99 << 48) | ((unint64_t)(unsigned __int16)v100 << 32) | ((unint64_t)(unsigned __int16)v101 << 16) | v98;
  return result;
}

double AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCommonDrawMeshInherited(void *a1, int a2)
{
  int v2 = (int *)MEMORY[0x263F4B188];
  uint64_t v3 = (unsigned int *)a1[1];
  uint64_t v4 = *a1 + (int)*MEMORY[0x263F4B188];
  uint64_t v5 = *(void *)(v4 + 8) + v3[37] + v3[38] * a2;
  v6.i64[0] = v5 - 0x1000000000;
  v6.i64[1] = v5 - 0xFFFFFFFF4;
  *(int8x16_t *)(*(void *)(v4 + 24) + v3[35] + v3[36] * a2 + (unint64_t)v3[31]) = vorrq_s8(vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v6, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v6, 0x20uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFC000000FFLL)), (int8x16_t)xmmword_242EA80C0);
  int v7 = (unsigned int *)a1[1];
  uint64_t v8 = *a1 + *v2;
  uint64_t v9 = *(void *)(v8 + 8);
  unint64_t v10 = v9 + v7[47] + v7[48] * a2;
  unint64_t v11 = v9 + v7[51] + v7[52] * a2;
  unint64_t v12 = *(void *)(v8 + 24) + v7[35] + v7[36] * a2 + (unint64_t)v7[32];
  *(_DWORD *)unint64_t v12 = 1073744384;
  *(_DWORD *)(v12 + 4) = (v10 >> 16) & 0xFFC00000;
  *(_DWORD *)(v12 + 8) = v10 >> 6;
  *(_DWORD *)(v12 + 12) = (v11 >> 16) & 0xFFC00000;
  *(_DWORD *)(v12 + 16) = v11 >> 6;
  *(void *)(v12 + 28) = 0;
  *(void *)(v12 + 20) = 0;
  int v13 = (_DWORD *)a1[1];
  uint64_t v14 = *a1 + *v2;
  uint64_t v15 = *(void *)(v14 + 24) + (v13[37] + v13[38] * a2);
  unint64_t v16 = *(void *)(v14 + 8) + (v13[39] + v13[40] * a2);
  *(_DWORD *)uint64_t v15 = 0x100000;
  *(_DWORD *)(v15 + 4) = (v16 >> 16) & 0xFFC00000;
  *(_DWORD *)(v15 + 8) = v16 >> 6;
  *(void *)&double result = 72;
  *(_OWORD *)(v15 + 12) = xmmword_242EA80D0;
  *(_DWORD *)(v15 + 20) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  return result;
}

double AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCommonDrawInherited(void *a1, int a2, unsigned int a3)
{
  uint64_t v3 = (int *)MEMORY[0x263F4B188];
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *a1 + (int)*MEMORY[0x263F4B188];
  uint64_t v6 = *(void *)(v5 + 8) + v4[37] + v4[38] * a2;
  v7.i64[0] = v6 - 0x1000000000;
  v7.i64[1] = v6 - 0xFFFFFFFF4;
  *(int8x16_t *)(*(void *)(v5 + 24) + v4[35] + v4[36] * a2 + (unint64_t)v4[31]) = vorrq_s8(vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v7, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v7, 0x20uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFC000000FFLL)), (int8x16_t)xmmword_242EA80C0);
  uint64_t v8 = (unsigned int *)a1[1];
  uint64_t v9 = *a1 + *v3;
  unint64_t v10 = (_DWORD *)(*(void *)(v9 + 24) + v8[35] + v8[36] * a2 + (unint64_t)v8[32]);
  unint64_t v11 = *(void *)(v9 + 8) + v8[43] + v8[44] * a2;
  *unint64_t v10 = 1073741888;
  v10[1] = (v11 >> 16) & 0xFFC00000;
  v10[2] = v11 >> 6;
  unint64_t v12 = (_DWORD *)a1[1];
  uint64_t v13 = *a1 + *v3;
  uint64_t v14 = *(void *)(v13 + 24) + (v12[37] + v12[38] * a2);
  unint64_t v15 = *(void *)(v13 + 8) + (v12[39] + v12[40] * a2);
  *(_DWORD *)uint64_t v14 = 0x100000;
  *(_DWORD *)(v14 + 4) = (v15 >> 16) & 0xFFC00000;
  *(_DWORD *)(v14 + 8) = v15 >> 6;
  *(_OWORD *)(v14 + 12) = xmmword_242EA80D0;
  if (a3 > 8) {
    goto LABEL_6;
  }
  if (((1 << a3) & 0x1D8) != 0)
  {
    double result = 0.0;
    *(void *)(v14 + 20) = 0;
    return result;
  }
  double result = 1.28822983e-231;
  if (((1 << a3) & 0x26) != 0)
  {
    *(void *)(v14 + 20) = 0x1000000010000000;
  }
  else
  {
LABEL_6:
    double result = 2.00000048;
    *(void *)(v14 + 20) = 0x4000000040000000;
  }
  return result;
}

void AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawIndexedPatches(uint64_t *a1, int a2, int a3, int a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, float a9, unsigned int a10, int a11, unsigned int a12, uint64_t a13, unsigned int a14, unsigned int a15)
{
  uint64_t v21 = 0x1EEEE1111;
  int v22 = (int *)MEMORY[0x263F4B188];
  uint64_t v23 = (int)*MEMORY[0x263F4B188];
  uint64_t v25 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v26 = (*(_DWORD *)(v24 + 220) + *(_DWORD *)(v24 + 224) * a2);
  uint64_t v27 = 0x1EEEE1111;
  if (a8) {
    uint64_t v27 = *(void *)(a8 + v23 + 8) + a10;
  }
  *(void *)(*(void *)(*a1 + v23 + 24) + v26 + 32) = v27;
  uint64_t v28 = *v22;
  if (a6) {
    uint64_t v21 = *(void *)(a6 + v28 + 8) + a7;
  }
  *(void *)(*(void *)(v25 + v28 + 24) + v26 + 24) = v21;
  if (*(unsigned char *)(v24 + 396))
  {
    AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCommonDrawInherited(a1, a2, 3u);
  }
  else
  {
    uint64_t v29 = *(void *)(v25 + *v22 + 24) + (*(_DWORD *)(v24 + 148) + *(_DWORD *)(v24 + 152) * a2);
    *(_DWORD *)(v29 + 32) &= ~0x800000u;
    *(int8x8_t *)(v29 + 36) = vand_s8(*(int8x8_t *)(v29 + 36), (int8x8_t)vdup_n_s32(0xFF3FFFFu));
  }
  uint64_t v31 = *a1;
  uint64_t v30 = a1[1];
  uint64_t v32 = *a1 + *v22;
  uint64_t v33 = *(void *)(v32 + 24);
  uint64_t v34 = (*(_DWORD *)(v30 + 220) + *(_DWORD *)(v30 + 224) * a2);
  int v35 = (void *)(v33 + v34);
  uint64_t v36 = (*(_DWORD *)(v30 + 284) + *(_DWORD *)(v30 + 288) * a2);
  uint64_t v37 = *(void *)(v32 + 8) + v36;
  int v38 = (void *)(v33 + v36);
  *int v35 = v37;
  v35[1] = v37 + 8;
  unsigned __int8 v35[2] = a12;
  *int v38 = 0;
  v38[1] = a12;
  uint64_t v39 = *(void *)(v31 + *v22 + 24);
  uint64_t v40 = v39 + v34;
  *(_DWORD *)(v40 + 80) = a6 != 0;
  *(_DWORD *)(v40 + 84) = a3;
  uint64_t v41 = v39 + (*(_DWORD *)(v30 + 348) + *(_DWORD *)(v30 + 352) * a2);
  int v42 = HIWORD(LODWORD(a9)) & 0x8000;
  float v43 = fabsf(a9);
  if (v43 >= 65520.0)
  {
    LOWORD(v44) = v42 | 0x7C00;
  }
  else
  {
    unsigned int v44 = HIWORD(LODWORD(a9)) & 0x8000;
    if (v43 > 0.000000029802)
    {
      if (v43 >= 0.000000089407)
      {
        if (v43 >= 2.351e-38) {
          unsigned int v44 = v42 | (COERCE_UNSIGNED_INT((float)((float)(v43 + COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13);
        }
        else {
          unsigned int v44 = v42 | vcvts_n_u32_f32(v43, 0x18uLL);
        }
      }
      else
      {
        LOWORD(v44) = v42 | 1;
      }
    }
  }
  *(_WORD *)(v41 + 4) = v44;
  int v45 = *(unsigned __int8 *)(v30 + 396);
  unint64_t v46 = *(void *)(v31 + *v22 + 24)
      + (*(_DWORD *)(v30 + 140) + *(_DWORD *)(v30 + 144) * a2)
      + (unint64_t)*(unsigned int *)(v30 + 128);
  uint64_t v47 = 12;
  if (!v45) {
    uint64_t v47 = 36;
  }
  if (v43 >= 65520.0)
  {
    LOWORD(v42) = v42 | 0x7C00;
  }
  else if (v43 > 0.000000029802)
  {
    if (v43 >= 0.000000089407)
    {
      if (v43 >= 2.351e-38) {
        v42 |= COERCE_UNSIGNED_INT((float)((float)(v43 + COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13;
      }
      else {
        v42 |= vcvts_n_u32_f32(v43, 0x18uLL);
      }
    }
    else
    {
      LOWORD(v42) = v42 | 1;
    }
  }
  LODWORD(v48) = vdup_n_s32(0x40000080u).u32[0];
  HIDWORD(v48) = (unsigned __int16)v42;
  *(void *)(v46 + v47) = v48;
  uint64_t v49 = a1[1];
  int v50 = *(unsigned __int8 *)(v49 + 396);
  uint64_t v51 = *v22;
  uint64_t v52 = *(void *)(*a1 + v51 + 24);
  uint64_t v53 = (*(_DWORD *)(v49 + 140) + *(_DWORD *)(v49 + 144) * a2);
  uint64_t v55 = *(unsigned int *)(v49 + 128);
  uint64_t v54 = *(unsigned int *)(v49 + 132);
  uint64_t v56 = v53 + v55;
  BOOL v57 = v50 == 0;
  uint64_t v58 = 20;
  if (v57) {
    uint64_t v58 = 44;
  }
  unint64_t v59 = (void *)(v52 + v58 + v56);
  unint64_t v60 = v52 + v53 + v54;
  if (v60 > (unint64_t)v59)
  {
    int __pattern4 = 0x20000000;
    memset_pattern4(v59, &__pattern4, v60 - (void)v59);
    uint64_t v51 = *v22;
  }
  int64x2_t v61 = vdupq_n_s64(3uLL);
  v61.i64[0] = a14;
  uint64x2_t v62 = (uint64x2_t)vaddq_s64(*(int64x2_t *)(a13 + v51 + 8), v61);
  __int32 v63 = v62.i32[0];
  unsigned int v64 = v62.u8[4] | 0xB2F00C00;
  *(int32x2_t *)v62.i8 = vmovn_s64((int64x2_t)vshlq_u64(v62, (uint64x2_t)xmmword_242EA80E0));
  *(_DWORD *)unint64_t v60 = v64;
  *(_DWORD *)(v60 + 4) = v63;
  *(_DWORD *)(v60 + 8) = a5;
  *(_DWORD *)(v60 + 12) = a11;
  *(_DWORD *)(v60 + 16) = a4;
  *(_DWORD *)(v60 + 20) = a12;
  *(_DWORD *)(v60 + 24) = (a15 >> 2) & 0x7FFFF;
  *(int8x8_t *)(v60 + 28) = vext_s8((int8x8_t)vadd_s32(*(int32x2_t *)v62.i8, (int32x2_t)-1), (int8x8_t)v62.u8[0], 4uLL);
  unint64_t v65 = *(void *)(*a1 + *v22 + 24)
      + (*(_DWORD *)(a1[1] + 140) + *(_DWORD *)(a1[1] + 144) * a2)
      + (unint64_t)*(unsigned int *)(a1[1] + 136);
  if (v65 > v60 + 36)
  {
    int v68 = 0x20000000;
    memset_pattern4((void *)(v60 + 36), &v68, v65 - (v60 + 36));
  }
}

void AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(uint64_t *a1, int a2, int a3, int a4, int a5, uint64_t a6, unsigned int a7, int a8, float a9, unsigned int a10, uint64_t a11, unsigned int a12, unsigned int a13)
{
  uint64_t v18 = 0x1EEEE1111;
  int v19 = (int *)MEMORY[0x263F4B188];
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  uint64_t v22 = (*(_DWORD *)(v20 + 220) + *(_DWORD *)(v20 + 224) * a2);
  *(void *)(*(void *)(*a1 + (int)*MEMORY[0x263F4B188] + 24) + v22 + 32) = 0x1EEEE1111;
  uint64_t v23 = *v19;
  if (a6) {
    uint64_t v18 = *(void *)(a6 + v23 + 8) + a7;
  }
  *(void *)(*(void *)(v21 + v23 + 24) + v22 + 24) = v18;
  if (*(unsigned char *)(v20 + 396))
  {
    AGX::IndirectRenderCommandEncoderGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCommonDrawInherited(a1, a2, 3u);
  }
  else
  {
    uint64_t v26 = *(void *)(v21 + *v19 + 24) + (*(_DWORD *)(v20 + 148) + *(_DWORD *)(v20 + 152) * a2);
    *(_DWORD *)(v26 + 32) &= ~0x800000u;
    *(int8x8_t *)(v26 + 36) = vand_s8(*(int8x8_t *)(v26 + 36), (int8x8_t)vdup_n_s32(0xFF3FFFFu));
  }
  uint64_t v28 = *a1;
  uint64_t v27 = a1[1];
  uint64_t v29 = *a1 + *v19;
  uint64_t v30 = *(void *)(v29 + 24);
  uint64_t v31 = (*(_DWORD *)(v27 + 220) + *(_DWORD *)(v27 + 224) * a2);
  uint64_t v32 = (void *)(v30 + v31);
  uint64_t v33 = (*(_DWORD *)(v27 + 284) + *(_DWORD *)(v27 + 288) * a2);
  uint64_t v34 = *(void *)(v29 + 8) + v33;
  int v35 = (void *)(v30 + v33);
  *uint64_t v32 = v34;
  v32[1] = v34 + 8;
  v32[2] = a10;
  *int v35 = 0;
  v35[1] = a10;
  uint64_t v36 = *(void *)(v28 + *v19 + 24) + v31;
  *(_DWORD *)(v36 + 80) = a6 != 0;
  *(_DWORD *)(v36 + 84) = a3;
  int v37 = HIWORD(LODWORD(a9)) & 0x8000;
  float v38 = fabsf(a9);
  if (v38 >= 65520.0)
  {
    LOWORD(v39) = v37 | 0x7C00;
  }
  else
  {
    unsigned int v39 = HIWORD(LODWORD(a9)) & 0x8000;
    if (v38 > 0.000000029802)
    {
      if (v38 >= 0.000000089407)
      {
        if (v38 >= 2.351e-38) {
          unsigned int v39 = v37 | (COERCE_UNSIGNED_INT((float)((float)(v38 + COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13);
        }
        else {
          unsigned int v39 = v37 | vcvts_n_u32_f32(v38, 0x18uLL);
        }
      }
      else
      {
        LOWORD(v39) = v37 | 1;
      }
    }
  }
  *(_WORD *)(*(void *)(v28 + *v19 + 24) + (*(_DWORD *)(v27 + 348) + *(_DWORD *)(v27 + 352) * a2) + 4) = v39;
  int v40 = *(unsigned __int8 *)(v27 + 396);
  unint64_t v41 = *(void *)(v28 + *v19 + 24)
      + (*(_DWORD *)(v27 + 140) + *(_DWORD *)(v27 + 144) * a2)
      + (unint64_t)*(unsigned int *)(v27 + 128);
  uint64_t v42 = 12;
  if (!v40) {
    uint64_t v42 = 36;
  }
  if (v38 >= 65520.0)
  {
    LOWORD(v37) = v37 | 0x7C00;
  }
  else if (v38 > 0.000000029802)
  {
    if (v38 >= 0.000000089407)
    {
      if (v38 >= 2.351e-38) {
        v37 |= COERCE_UNSIGNED_INT((float)((float)(v38 + COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(a9 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13;
      }
      else {
        v37 |= vcvts_n_u32_f32(v38, 0x18uLL);
      }
    }
    else
    {
      LOWORD(v37) = v37 | 1;
    }
  }
  LODWORD(v43) = vdup_n_s32(0x40000080u).u32[0];
  HIDWORD(v43) = (unsigned __int16)v37;
  *(void *)(v41 + v42) = v43;
  uint64_t v44 = a1[1];
  int v45 = *(unsigned __int8 *)(v44 + 396);
  uint64_t v46 = *v19;
  uint64_t v47 = *(void *)(*a1 + v46 + 24);
  uint64_t v48 = (*(_DWORD *)(v44 + 140) + *(_DWORD *)(v44 + 144) * a2);
  uint64_t v50 = *(unsigned int *)(v44 + 128);
  uint64_t v49 = *(unsigned int *)(v44 + 132);
  uint64_t v51 = v48 + v50;
  BOOL v52 = v45 == 0;
  uint64_t v53 = 20;
  if (v52) {
    uint64_t v53 = 44;
  }
  uint64_t v54 = (void *)(v47 + v53 + v51);
  unint64_t v55 = v47 + v48 + v49;
  if (v55 > (unint64_t)v54)
  {
    int __pattern4 = 0x20000000;
    memset_pattern4(v54, &__pattern4, v55 - (void)v54);
    uint64_t v46 = *v19;
  }
  int64x2_t v56 = vdupq_n_s64(3uLL);
  v56.i64[0] = a12;
  uint64x2_t v57 = (uint64x2_t)vaddq_s64(*(int64x2_t *)(a11 + v46 + 8), v56);
  __int32 v58 = v57.i32[0];
  unsigned int v59 = v57.u8[4] | 0xB2F00C00;
  *(int32x2_t *)v57.i8 = vmovn_s64((int64x2_t)vshlq_u64(v57, (uint64x2_t)xmmword_242EA80E0));
  *(_DWORD *)unint64_t v55 = v59;
  *(_DWORD *)(v55 + 4) = v58;
  *(_DWORD *)(v55 + 8) = a5;
  *(_DWORD *)(v55 + 12) = a8;
  *(_DWORD *)(v55 + 16) = a4;
  *(_DWORD *)(v55 + 20) = a10;
  *(_DWORD *)(v55 + 24) = (a13 >> 2) & 0x7FFFF;
  *(int8x8_t *)(v55 + 28) = vext_s8((int8x8_t)vadd_s32(*(int32x2_t *)v57.i8, (int32x2_t)-1), (int8x8_t)v57.u8[0], 4uLL);
  unint64_t v60 = *(void *)(*a1 + *v19 + 24)
      + (*(_DWORD *)(a1[1] + 140) + *(_DWORD *)(a1[1] + 144) * a2)
      + (unint64_t)*(unsigned int *)(a1[1] + 136);
  if (v60 > v55 + 36)
  {
    int v63 = 0x20000000;
    memset_pattern4((void *)(v55 + 36), &v63, v60 - (v55 + 36));
  }
}

__n128 AGX::UserIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setOpaqueIntersectionFunction(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v8 = *(void *)(*(void *)a1 + 808);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  int v17 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
  uint64_t v18 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v19 = v8;
  if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken != -1) {
    dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken, &block);
  }
  int v9 = a3 & 1;
  if ((a3 & 0x40) != 0) {
    int v9 = 2;
  }
  if ((~a3 & 0x48) != 0) {
    int v10 = 3;
  }
  else {
    int v10 = 4;
  }
  if ((a3 & 8) == 0) {
    int v10 = v9;
  }
  *(_OWORD *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a4 * *(_DWORD *)(a1 + 36))) = *(_OWORD *)(*(void *)(*(void *)(v8 + 5152) + 16) + 16 * ((v10 + *(_DWORD *)(*(void *)(v8 + 5152) + 36) * a2) * *(_DWORD *)(*(void *)(v8 + 5152) + 32)));
  uint64_t v11 = *(void *)(*(void *)a1 + 808);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  int v17 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
  uint64_t v18 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v19 = v11;
  *(_OWORD *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a4 * *(_DWORD *)(a1 + 36) + 1)) = *(_OWORD *)(*(void *)(*(void *)(v11 + 5152) + 16) + 16 * ((v10 + *(_DWORD *)(*(void *)(v11 + 5152) + 36) * a2) * *(_DWORD *)(*(void *)(v11 + 5152) + 32) + 1));
  uint64_t v12 = *(void *)(*(void *)a1 + 808);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  int v17 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
  uint64_t v18 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v19 = v12;
  *(_OWORD *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a4 * *(_DWORD *)(a1 + 36) + 2)) = *(_OWORD *)(*(void *)(*(void *)(v12 + 5152) + 16) + 16 * ((v10 + *(_DWORD *)(*(void *)(v12 + 5152) + 36) * a2) * *(_DWORD *)(*(void *)(v12 + 5152) + 32) + 2));
  uint64_t v13 = *(void *)(*(void *)a1 + 808);
  uint64_t block = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  int v17 = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
  uint64_t v18 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v19 = v13;
  __n128 result = *(__n128 *)(*(void *)(*(void *)(v13 + 5152) + 16)
                     + 16
                     * ((v10 + *(_DWORD *)(*(void *)(v13 + 5152) + 36) * a2)
                                    * *(_DWORD *)(*(void *)(v13 + 5152) + 32)
                                    + 3));
  *(__n128 *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a4 * *(_DWORD *)(a1 + 36) + 3)) = result;
  return result;
}

void AGX::UserIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setFunction(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 96);
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      int64x2_t v7 = (unsigned int *)(*(void *)(a1 + 64) + 32 * v6);
      uint64_t v8 = *(void *)(v5 + (int)*MEMORY[0x263F4B188] + 8);
      uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 32) + 1304 * v6;
      uint64_t v12 = *(void **)(v9 + 112);
      int v10 = (void *)(v9 + 112);
      uint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = (uint64_t *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36)));
        uint64_t v14 = v11[394];
        uint64_t v15 = v11[393];
        uint64_t v16 = (v8 + *v7) & 0xFFFFFFFFFFC0;
        *uint64_t v13 = v16;
        v13[1] = 0;
        unint64_t v17 = *(unsigned int *)(v11[236] + 248);
        uint64_t v18 = v16 | (v17 << 48);
        uint64_t v19 = (v17 >> 16) & 3;
        *uint64_t v13 = v18;
        v13[1] = v19;
        v13[1] = v19 & 0xFFFFC003 | (4 * (*(_DWORD *)(v11[236] + 252) & 0xFFFu)) | ((unint64_t)(v14 & 7) << 32) & 0xFFFFFFC7FFFFFFFFLL | ((unint64_t)(v15 & 7) << 35) | ((unint64_t)((int)v15 > 0) << 38) | 0x8000018000000000;
      }
      uint64_t v20 = (void *)v10[37];
      if (v20)
      {
        uint64_t v21 = (uint64_t *)(*(void *)(a1 + 16)
                        + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 1));
        uint64_t v22 = v20[394];
        uint64_t v23 = v20[393];
        uint64_t v24 = (v8 + v7[1]) & 0xFFFFFFFFFFC0;
        *uint64_t v21 = v24;
        v21[1] = 0;
        unint64_t v25 = *(unsigned int *)(v20[236] + 248);
        uint64_t v26 = v24 | (v25 << 48);
        uint64_t v27 = (v25 >> 16) & 3;
        *uint64_t v21 = v26;
        v21[1] = v27;
        v21[1] = v27 & 0xFFFFC003 | (4 * (*(_DWORD *)(v20[236] + 252) & 0xFFFu)) | ((unint64_t)(v22 & 7) << 32) & 0xFFFFFFC7FFFFFFFFLL | ((unint64_t)(v23 & 7) << 35) | ((unint64_t)((int)v23 > 0) << 38) | 0x8000018000000000;
      }
      uint64_t v28 = (void *)v10[74];
      if (v28)
      {
        uint64_t v29 = (uint64_t *)(*(void *)(a1 + 16)
                        + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 2));
        uint64_t v30 = v28[394];
        uint64_t v31 = v28[393];
        uint64_t v32 = (v8 + v7[2]) & 0xFFFFFFFFFFC0;
        *uint64_t v29 = v32;
        v29[1] = 0;
        unint64_t v33 = *(unsigned int *)(v28[236] + 248);
        uint64_t v34 = v32 | (v33 << 48);
        uint64_t v35 = (v33 >> 16) & 3;
        *uint64_t v29 = v34;
        v29[1] = v35;
        v29[1] = v35 & 0xFFFFC003 | (4 * (*(_DWORD *)(v28[236] + 252) & 0xFFFu)) | ((unint64_t)(v30 & 7) << 32) & 0xFFFFFFC7FFFFFFFFLL | ((unint64_t)(v31 & 7) << 35) | ((unint64_t)((int)v31 > 0) << 38) | 0x8000018000000000;
      }
      uint64_t v36 = (void *)v10[111];
      if (v36)
      {
        int v37 = (uint64_t *)(*(void *)(a1 + 16)
                        + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 3));
        uint64_t v38 = v8 + v7[3];
        uint64_t v39 = v36[394];
        uint64_t v40 = v36[393];
        v38 &= 0xFFFFFFFFFFC0uLL;
        *int v37 = v38;
        v37[1] = 0;
        unint64_t v41 = *(unsigned int *)(v36[236] + 248);
        uint64_t v42 = v38 | (v41 << 48);
        uint64_t v43 = (v41 >> 16) & 3;
        *int v37 = v42;
        v37[1] = v43;
        v37[1] = v43 & 0xFFFFC003 | (4 * (*(_DWORD *)(v36[236] + 252) & 0xFFFu)) | ((unint64_t)(v39 & 7) << 32) & 0xFFFFFFC7FFFFFFFFLL | ((unint64_t)(v40 & 7) << 35) | ((unint64_t)((int)v40 > 0) << 38) | 0x8000018000000000;
      }
    }
  }
  else
  {
    uint64_t v44 = *(void *)(*(void *)a1 + 808);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v44;
    if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken != -1) {
      dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken, block);
    }
    uint64_t v45 = *(void *)(v44 + 5152);
    uint64_t v46 = (uint64_t *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36)));
    uint64_t v47 = *(void *)(v45 + 192);
    uint64_t v48 = *(void *)(v45 + 184) & 0xFFFFFFFFFFC0;
    *uint64_t v46 = v48;
    v46[1] = 0;
    unint64_t v49 = *(unsigned int *)(*(void *)v47 + 248);
    uint64_t v50 = v48 | (v49 << 48);
    uint64_t v51 = (v49 >> 16) & 3;
    *uint64_t v46 = v50;
    v46[1] = v51;
    v46[1] = v51 & 0xFFFFC003 | (4 * (*(_DWORD *)(*(void *)v47 + 252) & 0xFFFu)) | 0x800001E000000000;
    BOOL v52 = (uint64_t *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 1));
    uint64_t v53 = *(void *)(v45 + 192);
    uint64_t v54 = *(void *)(v45 + 184) & 0xFFFFFFFFFFC0;
    *BOOL v52 = v54;
    v52[1] = 0;
    unint64_t v55 = *(unsigned int *)(*(void *)v53 + 248);
    uint64_t v56 = v54 | (v55 << 48);
    uint64_t v57 = (v55 >> 16) & 3;
    *BOOL v52 = v56;
    v52[1] = v57;
    v52[1] = v57 & 0xFFFFC003 | (4 * (*(_DWORD *)(*(void *)v53 + 252) & 0xFFFu)) | 0x800001E000000000;
    __int32 v58 = (uint64_t *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 2));
    uint64_t v59 = *(void *)(v45 + 192);
    uint64_t v60 = *(void *)(v45 + 184) & 0xFFFFFFFFFFC0;
    *__int32 v58 = v60;
    v58[1] = 0;
    unint64_t v61 = *(unsigned int *)(*(void *)v59 + 248);
    uint64_t v62 = v60 | (v61 << 48);
    uint64_t v63 = (v61 >> 16) & 3;
    *__int32 v58 = v62;
    v58[1] = v63;
    v58[1] = v63 & 0xFFFFC003 | (4 * (*(_DWORD *)(*(void *)v59 + 252) & 0xFFFu)) | 0x800001E000000000;
    unsigned int v64 = (uint64_t *)(*(void *)(a1 + 16) + 16 * (*(_DWORD *)(a1 + 32) * a3 * *(_DWORD *)(a1 + 36) + 3));
    uint64_t v66 = *(void *)(v45 + 184);
    uint64_t v65 = *(void *)(v45 + 192);
    v66 &= 0xFFFFFFFFFFC0uLL;
    *unsigned int v64 = v66;
    v64[1] = 0;
    unint64_t v67 = *(unsigned int *)(*(void *)v65 + 248);
    uint64_t v68 = v66 | (v67 << 48);
    uint64_t v69 = (v67 >> 16) & 3;
    *unsigned int v64 = v68;
    v64[1] = v69;
    v64[1] = v69 & 0xFFFFC003 | (4 * (*(_DWORD *)(*(void *)v65 + 252) & 0xFFFu)) | 0x800001E000000000;
  }
}

void sub_242A925BC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242A93918(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242A93934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va1, a15);
  va_start(va, a15);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = 0xFFFFFFFF00000001;
  *(void *)(a1 + 8) = 1610612736;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 88) = v5;
  id v6 = a3;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 216) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 224) = 1610612736;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 304) = v7;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = v7;
  *(_OWORD *)(a1 + 288) = v7;
  *(unsigned char *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 349) = 0;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 512) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 520) = 1610612736;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 568) = v7;
  *(_OWORD *)(a1 + 584) = v7;
  *(_OWORD *)(a1 + 600) = v7;
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 808) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 816) = 1610612736;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = v7;
  *(_OWORD *)(a1 + 880) = v7;
  *(_OWORD *)(a1 + 896) = v7;
  *(_DWORD *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 916) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 941) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1104) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1112) = 1610612736;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1160) = v7;
  *(_OWORD *)(a1 + 1176) = v7;
  *(_OWORD *)(a1 + 1192) = v7;
  *(_DWORD *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1237) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1296) = a2;
  return a1;
}

void sub_242A93B90(_Unwind_Exception *a1)
{
  std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0xFFFFFFFF00000001;
  *(void *)(a1 + 8) = 1610612736;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v6;
  id v7 = *(id *)(a2 + 72);
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 216) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 224) = 1610612736;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = v8;
  *(_OWORD *)(a1 + 288) = v8;
  *(unsigned char *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 349) = 0;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 512) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 520) = 1610612736;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 568) = v8;
  *(_OWORD *)(a1 + 584) = v8;
  *(_OWORD *)(a1 + 600) = v8;
  *(_DWORD *)(a1 + 616) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 808) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 816) = 1610612736;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(void *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = v8;
  *(_OWORD *)(a1 + 880) = v8;
  *(_OWORD *)(a1 + 896) = v8;
  *(_DWORD *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 916) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 941) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1104) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1112) = 1610612736;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1160) = v8;
  *(_OWORD *)(a1 + 1176) = v8;
  *(_OWORD *)(a1 + 1192) = v8;
  *(_DWORD *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1224) = 0;
  *(void *)(a1 + 1237) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1288) = 0;
  uint64_t v9 = 0;
  int v10 = (unint64_t *)(a2 + 24);
  *(void *)(a1 + 1296) = *(id *)(a2 + 64);
  int v27 = a3 - 1;
  do
  {
    unint64_t v11 = *v10;
    if (*v10)
    {
      long long v29 = 0u;
      long long v30 = 0u;
      *(void *)&long long v31 = 0xFFFFFFFF00000001;
      *((void *)&v31 + 1) = 1610612736;
      long long v32 = 0u;
      long long v33 = 0u;
      *(void *)uint64_t v34 = 0;
      *(void *)&long long v12 = -1;
      *((void *)&v12 + 1) = -1;
      *(_OWORD *)&v34[8] = v12;
      *(_OWORD *)&v34[24] = v12;
      *(_OWORD *)&v34[40] = v12;
      LODWORD(v37[0]) = 0;
      *(_DWORD *)&v34[56] = 0;
      v34[60] = 0;
      long long v35 = 0uLL;
      *(void *)((char *)&v36 + 5) = 0;
      *(void *)&long long v36 = 0;
      *((void *)&v37[2] + 1) = 0;
      *(_OWORD *)((char *)v37 + 8) = 0u;
      *(_OWORD *)((char *)&v37[1] + 8) = 0u;
      int v13 = *(_DWORD *)(v11 + 936);
      int v14 = *(_DWORD *)(v11 + 948);
      DWORD2(v28) = v14;
      HIDWORD(v28) = v14 - *(_DWORD *)(v11 + 944);
      LODWORD(v29) = *(_DWORD *)(v11 + 980);
      DWORD1(v29) = *(_DWORD *)(v11 + 976);
      *((void *)&v35 + 1) = *(void *)(v11 + 2288);
      LODWORD(v28) = v13;
      DWORD1(v28) = v14 + HIDWORD(v28) * v27;
      uint64_t v15 = a3;
      DWORD2(v29) = a3;
      AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)&v31, (unsigned int *)(v11 + 832));
      v34[56] = *(unsigned char *)(v11 + 1002);
      *(_WORD *)&v34[57] = *(_WORD *)(v11 + 1004);
      v34[60] = *(unsigned char *)(v11 + 998);
      LODWORD(v37[0]) = *(_DWORD *)(v11 + 992);
      uint64_t v16 = a1 + v9;
      *(_OWORD *)(v16 + 112) = v11;
      unint64_t v17 = *(std::__shared_weak_count **)(a1 + v9 + 128);
      *(void *)(v16 + 128) = 0;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v16 + 144);
      *(_OWORD *)(v16 + 136) = 0u;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      uint64_t v19 = a1 + v9;
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + v9 + 160);
      *(_OWORD *)(a1 + v9 + 152) = 0u;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      *(_OWORD *)(v19 + 216) = v31;
      long long v21 = v33;
      *(_OWORD *)(v19 + 232) = v32;
      *(_OWORD *)(v19 + 248) = v21;
      *(_OWORD *)(v19 + 168) = v28;
      *(_OWORD *)(v19 + 184) = v29;
      LODWORD(v30) = v29 - DWORD1(v29);
      *(_OWORD *)(v19 + 200) = v30;
      long long v22 = v37[1];
      *(_OWORD *)(v19 + 360) = v37[0];
      *(_OWORD *)(v19 + 376) = v22;
      *(_OWORD *)(v19 + 392) = v37[2];
      long long v23 = *(_OWORD *)&v34[48];
      *(_OWORD *)(v19 + 296) = *(_OWORD *)&v34[32];
      *(_OWORD *)(v19 + 312) = v23;
      long long v24 = v36;
      *(_OWORD *)(v19 + 328) = v35;
      *(_OWORD *)(v19 + 344) = v24;
      long long v25 = *(_OWORD *)&v34[16];
      *(_OWORD *)(v19 + 264) = *(_OWORD *)v34;
      *(_OWORD *)(v19 + 280) = v25;
      a3 = v15;
      AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)a1, (unsigned int *)(a1 + v9 + 216));
    }
    v9 += 296;
    ++v10;
  }
  while (v9 != 1184);
  return a1;
}

void sub_242A9419C(_Unwind_Exception *a1)
{
  std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array(v1);
  _Unwind_Resume(a1);
}

long long *AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(long long *a1, long long *a2)
{
  *(void *)a1 = 0xFFFFFFFF00000001;
  *((void *)a1 + 1) = 1610612736;
  a1[1] = 0u;
  a1[2] = 0u;
  *((void *)a1 + 6) = 0;
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(long long *)((char *)a1 + 56) = v4;
  *(long long *)((char *)a1 + 72) = v4;
  *(long long *)((char *)a1 + 88) = v4;
  *(long long *)((char *)a1 + 120) = 0u;
  *(long long *)((char *)a1 + 136) = 0u;
  *(long long *)((char *)a1 + 152) = 0u;
  *(long long *)((char *)a1 + 168) = 0u;
  *(long long *)((char *)a1 + 184) = 0u;
  *(long long *)((char *)a1 + 200) = 0u;
  *(long long *)((char *)a1 + 216) = 0u;
  *(long long *)((char *)a1 + 232) = 0u;
  *(long long *)((char *)a1 + 248) = 0u;
  *(long long *)((char *)a1 + 104) = 0u;
  *((void *)a1 + 45) = 0;
  *(long long *)((char *)a1 + 264) = 0u;
  *(long long *)((char *)a1 + 280) = 0u;
  *(long long *)((char *)a1 + 296) = 0u;
  *(long long *)((char *)a1 + 312) = 0u;
  *(long long *)((char *)a1 + 328) = 0u;
  *(long long *)((char *)a1 + 344) = 0u;
  *((void *)a1 + 27) = 0xFFFFFFFF00000001;
  *((void *)a1 + 28) = 1610612736;
  *(long long *)((char *)a1 + 232) = 0u;
  *(long long *)((char *)a1 + 248) = 0u;
  *((void *)a1 + 33) = 0;
  a1[17] = v4;
  a1[18] = v4;
  a1[19] = v4;
  *((_DWORD *)a1 + 80) = 0;
  *((unsigned char *)a1 + 324) = 0;
  *((void *)a1 + 42) = 0;
  *((void *)a1 + 43) = 0;
  *((void *)a1 + 41) = 0;
  *(void *)((char *)a1 + 349) = 0;
  long long v5 = (long long *)((char *)a1 + 408);
  a1[23] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[31] = 0u;
  a1[32] = 0u;
  a1[33] = 0u;
  a1[34] = 0u;
  a1[35] = 0u;
  a1[36] = 0u;
  a1[37] = 0u;
  a1[38] = 0u;
  a1[39] = 0u;
  a1[40] = 0u;
  *((void *)a1 + 82) = 0;
  *((void *)a1 + 64) = 0xFFFFFFFF00000001;
  *((void *)a1 + 65) = 1610612736;
  a1[33] = 0u;
  a1[34] = 0u;
  *((void *)a1 + 70) = 0;
  *(long long *)((char *)a1 + 568) = v4;
  *(long long *)((char *)a1 + 584) = v4;
  *(long long *)((char *)a1 + 600) = v4;
  *((_DWORD *)a1 + 154) = 0;
  *((unsigned char *)a1 + 620) = 0;
  *((void *)a1 + 78) = 0;
  *((void *)a1 + 80) = 0;
  *((void *)a1 + 79) = 0;
  *(void *)((char *)a1 + 645) = 0;
  *(long long *)((char *)a1 + 664) = 0u;
  *(long long *)((char *)a1 + 680) = 0u;
  *(long long *)((char *)a1 + 696) = 0u;
  *(long long *)((char *)a1 + 712) = 0u;
  *(long long *)((char *)a1 + 728) = 0u;
  *(long long *)((char *)a1 + 744) = 0u;
  *(long long *)((char *)a1 + 760) = 0u;
  *(long long *)((char *)a1 + 776) = 0u;
  *(long long *)((char *)a1 + 792) = 0u;
  *(long long *)((char *)a1 + 808) = 0u;
  *(long long *)((char *)a1 + 824) = 0u;
  *(long long *)((char *)a1 + 840) = 0u;
  *(long long *)((char *)a1 + 856) = 0u;
  *(long long *)((char *)a1 + 872) = 0u;
  *(long long *)((char *)a1 + 888) = 0u;
  *(long long *)((char *)a1 + 904) = 0u;
  *(long long *)((char *)a1 + 920) = 0u;
  *(long long *)((char *)a1 + 936) = 0u;
  *((void *)a1 + 119) = 0;
  *((void *)a1 + 101) = 0xFFFFFFFF00000001;
  *((void *)a1 + 102) = 1610612736;
  *(long long *)((char *)a1 + 824) = 0u;
  *(long long *)((char *)a1 + 840) = 0u;
  *((void *)a1 + 107) = 0;
  a1[54] = v4;
  a1[55] = v4;
  a1[56] = v4;
  *((_DWORD *)a1 + 228) = 0;
  *((unsigned char *)a1 + 916) = 0;
  *((void *)a1 + 115) = 0;
  *((void *)a1 + 117) = 0;
  *((void *)a1 + 116) = 0;
  *(void *)((char *)a1 + 941) = 0;
  a1[60] = 0u;
  a1[61] = 0u;
  a1[62] = 0u;
  a1[63] = 0u;
  a1[64] = 0u;
  a1[65] = 0u;
  a1[66] = 0u;
  a1[67] = 0u;
  a1[68] = 0u;
  a1[69] = 0u;
  a1[70] = 0u;
  a1[71] = 0u;
  a1[72] = 0u;
  a1[73] = 0u;
  a1[74] = 0u;
  a1[75] = 0u;
  a1[76] = 0u;
  a1[77] = 0u;
  *((void *)a1 + 156) = 0;
  *((void *)a1 + 138) = 0xFFFFFFFF00000001;
  *((void *)a1 + 139) = 1610612736;
  a1[70] = 0u;
  a1[71] = 0u;
  *((void *)a1 + 144) = 0;
  *(long long *)((char *)a1 + 1160) = v4;
  *(long long *)((char *)a1 + 1176) = v4;
  *(long long *)((char *)a1 + 1192) = v4;
  *((_DWORD *)a1 + 302) = 0;
  *((unsigned char *)a1 + 1212) = 0;
  *((void *)a1 + 152) = 0;
  *((void *)a1 + 154) = 0;
  *((void *)a1 + 153) = 0;
  *(void *)((char *)a1 + 1237) = 0;
  *(long long *)((char *)a1 + 1256) = 0u;
  *(long long *)((char *)a1 + 1272) = 0u;
  *(long long *)((char *)a1 + 1288) = 0u;
  *((void *)a1 + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = 0;
  std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>(a1 + 7, (uint64_t)(a2 + 7));
  std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>(v5, (uint64_t)a2 + 408);
  std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>(a1 + 44, (uint64_t)(a2 + 44));
  std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>((long long *)((char *)a1 + 1000), (uint64_t)a2 + 1000);
  long long v17 = a1[4];
  long long v18 = a1[5];
  uint64_t v19 = *((void *)a1 + 12);
  long long v13 = *a1;
  long long v14 = a1[1];
  long long v15 = a1[2];
  long long v16 = a1[3];
  long long v7 = a2[1];
  long long v6 = a2[2];
  *a1 = *a2;
  a1[1] = v7;
  a1[2] = v6;
  long long v9 = a2[4];
  long long v8 = a2[5];
  long long v10 = a2[3];
  *((void *)a1 + 12) = *((void *)a2 + 12);
  a1[4] = v9;
  a1[5] = v8;
  a1[3] = v10;
  *a2 = v13;
  a2[1] = v14;
  *((void *)a2 + 12) = v19;
  a2[4] = v17;
  a2[5] = v18;
  a2[2] = v15;
  a2[3] = v16;
  uint64_t v11 = *((void *)a1 + 162);
  *((void *)a1 + 162) = *((void *)a2 + 162);
  *((void *)a2 + 162) = v11;
  return a1;
}

void sub_242A944A8(_Unwind_Exception *a1)
{
  std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array(v1);
  _Unwind_Resume(a1);
}

void AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalize(unsigned int *a1)
{
  int v2 = a1 + 324;
  uint64_t v3 = 28;
  do
  {
    long long v4 = &a1[v3];
    long long v5 = *(std::__shared_weak_count **)&a1[v3 + 4];
    long long v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v6 = (std::__shared_weak_count *)*((void *)v4 + 4);
    long long v15 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v8 = *(_OWORD *)(v4 + 50);
    v16[5] = *(_OWORD *)(v4 + 46);
    v16[6] = v8;
    v17[0] = *(_OWORD *)(v4 + 54);
    *(_OWORD *)((char *)v17 + 13) = *(_OWORD *)((char *)v4 + 229);
    long long v9 = *(_OWORD *)(v4 + 34);
    v16[1] = *(_OWORD *)(v4 + 30);
    v16[2] = v9;
    long long v10 = *(_OWORD *)(v4 + 42);
    v16[3] = *(_OWORD *)(v4 + 38);
    v16[4] = v10;
    v16[0] = *(_OWORD *)(v4 + 26);
    _DWORD v17[2] = *(_OWORD *)(v4 + 62);
    uint64_t v11 = *((void *)v4 + 34);
    uint64_t v18 = *((void *)v4 + 33);
    uint64_t v19 = v11;
    long long v20 = *(_OWORD *)(v4 + 70);
    __n128 v12 = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1, (unsigned int *)v16);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v12);
      std::__shared_weak_count::__release_weak(v7);
      long long v13 = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    else
    {
      long long v13 = v15;
      if (!v15) {
        goto LABEL_15;
      }
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_15:
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v12);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v3 += 74;
  }
  while (v4 + 74 != v2);
}

void AGX::IntersectionPipelineSetsGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::merge(uint64_t a1, void *a2, int a3)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  lock = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v4 = [a2 countByEnumeratingWithState:&v66 objects:v82 count:16];
  if (v4)
  {
    uint64_t v59 = *(void *)v67;
    do
    {
      uint64_t v5 = 0;
      uint64_t v60 = v4;
      do
      {
        if (*(void *)v67 != v59) {
          objc_enumerationMutation(a2);
        }
        long long v6 = *(void **)(*((void *)&v66 + 1) + 8 * v5);
        uint64_t v61 = v5;
        if ([v6 functionType] != 6) {
          goto LABEL_4;
        }
        long long v7 = (unsigned int *)[v6 vendorPrivate];
        uint64_t v8 = a1;
        unint64_t v10 = *(void *)(a1 + 40);
        unint64_t v9 = *(void *)(a1 + 48);
        uint64_t v63 = v7;
        if (v10 < v9)
        {
          AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(v10, v7, v6);
          uint64_t v11 = v10 + 1304;
          *(void *)(a1 + 40) = v10 + 1304;
          goto LABEL_27;
        }
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = 0x1F693A1C451AB30BLL * ((uint64_t)(v10 - v12) >> 3);
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x3241F693A1C451) {
          abort();
        }
        unint64_t v15 = 0x1F693A1C451AB30BLL * ((uint64_t)(v9 - v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x1920FB49D0E228) {
          unint64_t v16 = 0x3241F693A1C451;
        }
        else {
          unint64_t v16 = v14;
        }
        *(void *)&v70[32] = a1 + 48;
        if (v16)
        {
          if (v16 > 0x3241F693A1C451) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          long long v17 = (char *)operator new(1304 * v16);
          long long v7 = v63;
        }
        else
        {
          long long v17 = 0;
        }
        *(void *)uint64_t v70 = v17;
        *(void *)&v70[8] = &v17[1304 * v13];
        *(void *)&v70[16] = *(void *)&v70[8];
        *(void *)&v70[24] = &v17[1304 * v16];
        AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(*(uint64_t *)&v70[8], v7, v6);
        uint64_t v18 = *(long long **)&v70[8];
        uint64_t v11 = *(void *)&v70[16] + 1304;
        *(void *)&v70[16] += 1304;
        long long v20 = *(long long **)(a1 + 32);
        uint64_t v19 = *(long long **)(a1 + 40);
        if (v19 == v20)
        {
          *(void *)(a1 + 32) = *(void *)&v70[8];
          *(void *)(a1 + 40) = v11;
          *(void *)(a1 + 48) = *(void *)&v70[24];
          if (v19) {
            goto LABEL_26;
          }
        }
        else
        {
          do
          {
            uint64_t v19 = (long long *)((char *)v19 - 1304);
            uint64_t v18 = AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1((long long *)((char *)v18 - 1304), v19);
          }
          while (v19 != v20);
          uint64_t v19 = *(long long **)(a1 + 32);
          long long v21 = *(long long **)(a1 + 40);
          *(void *)(a1 + 32) = v18;
          uint64_t v22 = *(void *)&v70[16];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v70[16];
          uint64_t v11 = v22;
          if (v21 != v19)
          {
            do
            {

              *((void *)v21 - 150) = 0;
              *((void *)v21 - 1) = 0;
              std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)v21 - 149);
              long long v21 = (long long *)((char *)v21 - 1304);
            }
            while (v21 != v19);
            uint64_t v8 = a1;
          }
          if (v19) {
LABEL_26:
          }
            operator delete(v19);
        }
LABEL_27:
        *(void *)(v8 + 40) = v11;
        uint64_t v23 = *((void *)v63 + 82);
        if (v23)
        {
          unint64_t v24 = (unint64_t)v63[166] << 32;
          uint64_t v64 = v11 - 1192;
          uint64_t v65 = (unsigned int *)(v11 - 1304);
          while (1)
          {
            uint64_t v25 = *(void *)(v23 + 48 * v24 + 456);
            if (v25) {
              break;
            }
LABEL_49:
            uint64_t v56 = (v24 + 1);
            if (v56 >= HIDWORD(v24))
            {
              uint64_t v23 = *(void *)(v23 + 640);
              unint64_t v24 = 0x400000000;
              if (!v23) {
                goto LABEL_53;
              }
            }
            else
            {
              unint64_t v24 = v24 & 0xFFFFFFFF00000000 | v56;
              if (!v23)
              {
LABEL_53:
                if (!v24) {
                  goto LABEL_4;
                }
              }
            }
          }
          unsigned int v26 = *(_DWORD *)(v23 + 112 * v24 + 40) & 3;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          memset(&v70[8], 0, 32);
          *(void *)&long long v75 = 0xFFFFFFFF00000001;
          *((void *)&v75 + 1) = 1610612736;
          long long v76 = 0u;
          long long v77 = 0u;
          *(void *)BOOL v78 = 0;
          *(void *)&long long v27 = -1;
          *((void *)&v27 + 1) = -1;
          *(_OWORD *)&v78[8] = v27;
          *(_OWORD *)&v78[24] = v27;
          *(_OWORD *)&v78[40] = v27;
          LODWORD(v81[0]) = 0;
          *(_DWORD *)&v78[56] = 0;
          v78[60] = 0;
          long long v79 = 0uLL;
          *(void *)((char *)&v80 + 5) = 0;
          *(void *)&long long v80 = 0;
          *((void *)&v81[2] + 1) = 0;
          *(_OWORD *)((char *)v81 + 8) = 0u;
          *(_OWORD *)((char *)&v81[1] + 8) = 0u;
          *(void *)uint64_t v70 = v25;
          unsigned int v28 = *(_DWORD *)(v25 + 936);
          unsigned int v29 = *(_DWORD *)(v25 + 948);
          unsigned int v30 = *(_DWORD *)(v25 + 980);
          unsigned int v31 = v29 - *(_DWORD *)(v25 + 944);
          *((void *)&v72 + 1) = __PAIR64__(v31, v29);
          unsigned int v32 = v29 + v31 * (a3 - 1);
          unsigned int v33 = *(_DWORD *)(v25 + 976);
          *(void *)&long long v73 = __PAIR64__(v33, v30);
          *((void *)&v79 + 1) = *(void *)(v25 + 2288);
          *(void *)&long long v72 = __PAIR64__(v32, v28);
          DWORD2(v73) = a3;
          LODWORD(v74) = v30 - v33;
          AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)&v75, (unsigned int *)(v25 + 832));
          v78[56] = *(unsigned char *)(v25 + 1002);
          *(_WORD *)&v78[57] = *(_WORD *)(v25 + 1004);
          v78[60] = *(unsigned char *)(v25 + 998);
          LODWORD(v81[0]) = *(_DWORD *)(v25 + 992);
          uint64_t v34 = v64 + 296 * v26;
          uint64_t v35 = *(void *)&v70[16];
          long long v36 = *(_OWORD *)v70;
          *(void *)&v70[8] = 0;
          *(void *)&v70[16] = 0;
          *(_OWORD *)uint64_t v34 = v36;
          int v37 = *(std::__shared_weak_count **)(v34 + 16);
          *(void *)(v34 + 16) = v35;
          if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
          long long v38 = *(_OWORD *)&v70[24];
          *(void *)&v70[24] = 0;
          *(void *)&v70[32] = 0;
          uint64_t v39 = *(std::__shared_weak_count **)(v34 + 32);
          *(_OWORD *)(v34 + 24) = v38;
          if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          long long v40 = v71;
          long long v71 = 0uLL;
          unint64_t v41 = *(std::__shared_weak_count **)(v34 + 48);
          *(_OWORD *)(v34 + 40) = v40;
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          long long v42 = v72;
          long long v43 = v73;
          *(_OWORD *)(v34 + 88) = v74;
          *(_OWORD *)(v34 + 72) = v43;
          *(_OWORD *)(v34 + 56) = v42;
          long long v44 = v75;
          long long v45 = v76;
          long long v46 = v77;
          *(_OWORD *)(v34 + 152) = *(_OWORD *)v78;
          *(_OWORD *)(v34 + 136) = v46;
          *(_OWORD *)(v34 + 120) = v45;
          *(_OWORD *)(v34 + 104) = v44;
          long long v47 = *(_OWORD *)&v78[16];
          long long v48 = *(_OWORD *)&v78[32];
          long long v49 = *(_OWORD *)&v78[48];
          *(_OWORD *)(v34 + 216) = v79;
          *(_OWORD *)(v34 + 200) = v49;
          *(_OWORD *)(v34 + 184) = v48;
          *(_OWORD *)(v34 + 168) = v47;
          long long v50 = v80;
          long long v51 = v81[0];
          long long v52 = v81[2];
          *(_OWORD *)(v34 + 264) = v81[1];
          *(_OWORD *)(v34 + 280) = v52;
          *(_OWORD *)(v34 + 248) = v51;
          *(_OWORD *)(v34 + 232) = v50;
          uint64_t v53 = (std::__shared_weak_count *)*((void *)&v71 + 1);
          if (*((void *)&v71 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
            uint64_t v54 = *(std::__shared_weak_count **)&v70[32];
            if (*(void *)&v70[32]) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v54 = *(std::__shared_weak_count **)&v70[32];
            if (*(void *)&v70[32])
            {
LABEL_42:
              if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
          }
          unint64_t v55 = *(std::__shared_weak_count **)&v70[16];
          if (*(void *)&v70[16]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v70[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
          AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(v65, (unsigned int *)(v34 + 104));
          goto LABEL_49;
        }
LABEL_4:
        uint64_t v5 = v61 + 1;
      }
      while (v61 + 1 != v60);
      uint64_t v4 = [a2 countByEnumeratingWithState:&v66 objects:v82 count:16];
    }
    while (v4);
  }
  os_unfair_lock_unlock(lock);
}

void sub_242A94DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void **std::vector<std::pair<AGX::DriverIntersectionProgramKey,std::shared_ptr<AGX::HAL200::IntersectionProgramVariant>>>::~vector[abi:nn180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 64;
      do
      {
        long long v6 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        *((void *)v3 - 8) = off_26F8527C0;
        long long v7 = (void *)*((void *)v3 - 6);
        if (v7)
        {
          *((void *)v3 - 5) = v7;
          operator delete(v7);
        }
        v3 -= 64;
        v5 -= 64;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t ProgramKey<(_AGCStreamToken)52,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)52,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)52,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)52,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  long long v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unint64_t v15 = operator new(4 * v13);
    unint64_t v16 = &v15[v14];
    *unint64_t v15 = v7;
    unint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *long long v6 = v7;
    unint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)52,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~DriverIntersectionFunctionTableGen1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 152);
    uint64_t v4 = *(void **)(a1 + 144);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 64;
      do
      {
        long long v6 = *(std::__shared_weak_count **)(v3 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        *(void *)(v3 - 64) = off_26F8527C0;
        int v7 = *(void **)(v3 - 48);
        if (v7)
        {
          *(void *)(v3 - 40) = v7;
          operator delete(v7);
        }
        v3 -= 64;
        v5 -= 64;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 144);
    }
    *(void *)(a1 + 152) = v2;
    operator delete(v4);
  }
  unint64_t v8 = *(void **)(a1 + 120);
  if (v8)
  {
    *(void *)(a1 + 128) = v8;
    operator delete(v8);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 56));

  return a1;
}

uint64_t ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(result + 32);
  unsigned int v7 = ((*(_DWORD *)(a2 + 40) >> 4) & 3)
     + (((*(_DWORD *)(a2 + 40) >> 6) & 7) + *(_DWORD *)(v6 + 36) * (*(_DWORD *)(a2 + 40) & 0xF)) * *(_DWORD *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = a3 & 0xFFFFFFFFFFC0;
  if (a5) {
    uint64_t v10 = 0x8000000000;
  }
  else {
    uint64_t v10 = 0;
  }
  if ((a6 + 1) > 1) {
    int v11 = a6 + 1;
  }
  else {
    int v11 = 1;
  }
  BOOL v12 = (void *)(v8 + 16 * v7 + 8);
  unint64_t v13 = v10 | 0x8000010000000000;
  do
  {
    unint64_t v14 = *(unsigned int *)(a2 + 40);
    uint64_t v15 = (v14 >> 9) & 7;
    unint64_t v16 = v14 >> 12;
    uint64_t v17 = ((*(_DWORD *)(a2 + 40) >> 12) & 7) != 0;
    *(v12 - 1) = v9;
    *BOOL v12 = 0;
    unint64_t v18 = *(unsigned int *)(*(void *)a4 + 248);
    uint64_t v19 = v9 | (v18 << 48);
    uint64_t v20 = (v18 >> 16) & 3;
    *(v12 - 1) = v19;
    *BOOL v12 = v20;
    *BOOL v12 = (v20 & 0xFFFFC003 | (4 * (*(_DWORD *)(*(void *)a4 + 252) & 0xFFFu)) | (v15 << 32)) & 0xFFFFFFC7FFFFFFFFLL | ((v16 & 7) << 35) | (v17 << 38) | v13;
    v12 += 2;
    --v11;
  }
  while (v11);
  return result;
}

uint64_t ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(void **)(result + 32);
  unint64_t v6 = *(unsigned int *)(a2 + 40);
  uint64_t v7 = (v6 >> 9) & 7;
  unint64_t v8 = v6 >> 12;
  uint64_t v9 = ((*(_DWORD *)(a2 + 40) >> 12) & 7) != 0;
  uint64_t v10 = *(unsigned int *)(*(void *)a4 + 248);
  unint64_t v11 = (WORD1(v10) & 3 | (4 * (*(_DWORD *)(*(void *)a4 + 252) & 0xFFF)) | (unint64_t)(v7 << 32)) & 0xFFFFFFC7FFFFFFFFLL | ((v8 & 7) << 35);
  uint64_t v12 = 0x8000000000;
  if (!a5) {
    uint64_t v12 = 0;
  }
  v5[21] = a3 & 0xFFFFFFFFFFC0 | (v10 << 48);
  v5[22] = v11 | (v9 << 38) | v12 | 0x10000000000;
  v5[23] = a3;
  v5[24] = a4;
  return result;
}

void ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_3(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3321888768;
  unint64_t v30[2] = ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_4;
  v30[3] = &unk_26F852730;
  v30[5] = v9;
  unsigned int v31 = off_26F8527C0;
  int v32 = *(_DWORD *)(a2 + 8);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t __p = 0;
  uint64_t v12 = *(unsigned char **)(a2 + 16);
  unint64_t v11 = *(unsigned char **)(a2 + 24);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      abort();
    }
    unint64_t __p = operator new(v11 - v12);
    uint64_t v35 = (char *)__p + 4 * (v13 >> 2);
    memcpy(__p, v12, v13);
    uint64_t v34 = v35;
  }
  int v14 = *(_DWORD *)(a2 + 40);
  char v38 = a3;
  int v36 = v14;
  int v37 = a4;
  unsigned int v31 = off_26F852770;
  v30[4] = a5;
  uint64_t v15 = *(void *)(v10 + 8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = objc_opt_new();
  [v17 setSync:1];
  [v17 setPipelineCache:v16];
  [v17 setBinaryArchives:0];
  v39[0] = MEMORY[0x263EF8330];
  v39[1] = 3221225472;
  v39[2] = ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v39[3] = &unk_26516F7C0;
  v39[4] = v30;
  size_t v40 = 0;
  unint64_t v41 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v41, &v40);
  unint64_t v18 = dispatch_data_create(v41, v40, 0, 0);
  [v17 setDriverKeyData:v18];
  if ([v17 airScript])
  {
    uint64_t v19 = [v17 airScript];
    long long v49 = 0uLL;
    *(void *)&long long v50 = 0;
    *(void *)&long long v49 = dispatch_data_create_map(v19, (const void **)&v49 + 1, (size_t *)&v50);
    uint64_t v20 = *((void *)&v49 + 1);
    uint64_t v21 = **((_DWORD **)&v49 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)len = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v20 + v21), &data, (size_t *)len, v22, v23))
    {
      unint64_t v24 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v24);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v49);
    long long v49 = md;
    long long v50 = v46;
    [v17 setVendorPluginFunctionId:&v49];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v17;
  *(void *)c.wbuf = v39;
  if ([v17 function])
  {
    uint64_t v25 = mach_absolute_time();
    unsigned int v26 = *(void **)v10;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v46 = ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v46 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v48 = v25;
    [v26 compileFunctionRequest:v17 completionHandler:&md];
  }
  else
  {
    if ([v17 frameworkData] || objc_msgSend(v17, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v46 = ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v46 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v27 = objc_msgSend((id)objc_msgSend(v17, "binaryArchives"), "count");
    unsigned int v28 = *(void **)v10;
    uint64_t v29 = [v17 driverKeyData];
    if (v27) {
      objc_msgSend(v28, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v29, objc_msgSend(v17, "binaryArchives"), 0, objc_msgSend(v17, "pipelineCache"), objc_msgSend(v17, "sync"), &md);
    }
    else {
      objc_msgSend(v28, "compileRequest:pipelineCache:sync:completionHandler:", v29, objc_msgSend(v17, "pipelineCache"), objc_msgSend(v17, "sync"), &md);
    }
  }
  dispatch_release(v18);

  unsigned int v31 = off_26F8527C0;
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
}

void sub_242A9576C(_Unwind_Exception *exception_object)
{
}

void sub_242A95778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  dispatch_release(*(dispatch_object_t *)(v19 - 160));
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void AGX::DriverIntersectionProgramKey::~DriverIntersectionProgramKey(AGX::DriverIntersectionProgramKey *this)
{
  *(void *)this = off_26F8527C0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x24566ED90);
}

{
  void *v2;

  *(void *)this = off_26F8527C0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

void AGX::DriverIntersectionProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begin = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begin = this[1].__begin_;
  }
  uint64_t v19 = &value[v17];
  *uint64_t v19 = ((begin - value) >> 2 << 8) | 0x53;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void ___ZN3AGX35DriverIntersectionFunctionTableGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23compileAndPopulateTableEPNS_8CompilerE_block_invoke_4(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, double a5, double a6, int8x16_t a7)
{
  if (!a3)
  {
    uint64_t v8 = *(void *)(**(void **)(a1 + 40) + 808);
    AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(v14, a2, (const std::vector<unsigned int>::value_type *)6, 1, 0, 0, 0, 0, a5, a6, a7, 2, 0);
    uint64_t v9 = operator new(0xC78uLL);
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = &unk_26F852800;
    AGX::IntersectionProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::IntersectionProgramVariant((unint64_t)(v9 + 3), v8, a2, (uint64_t)v14, 0);
  }
  uint64_t v11 = "MTLCompilerErrorTimeout";
  uint64_t v12 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v12 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v11 = v12;
  }
  if (a3 == 1) {
    BOOL v13 = "MTLCompilerErrorFatalError";
  }
  else {
    BOOL v13 = v11;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  AGX::DriverIntersectionProgramKey::serialize((std::vector<unsigned int> *)(a1 + 48), (unsigned int **)&v15, &v16);
  v14[0] = a4;
  v14[1] = (uint64_t)v13;
  v14[2] = v16;
  v14[3] = (uint64_t)v15;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242A96630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::mutex::unlock(v18);
  _Unwind_Resume(a1);
}

void sub_242A96658(_Unwind_Exception *a1)
{
  *(void *)(v2 - 192) = v1;
  uint64_t v4 = *(void **)(v2 - 176);
  if (v4)
  {
    *(void *)(v2 - 168) = v4;
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x242A966CCLL);
}

void sub_242A96678()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x242A966C4);
}

void sub_242A9668C()
{
}

void sub_242A96694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::pair<AGX::DriverIntersectionProgramKey,std::shared_ptr<AGX::HAL200::IntersectionProgramVariant>>::~pair(v10 - 192);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v10 - 208);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_242A9669C()
{
}

void sub_242A966A4()
{
  std::__split_buffer<std::pair<AGX::DriverIntersectionProgramKey,std::shared_ptr<AGX::HAL200::IntersectionProgramVariant>>>::~__split_buffer(v0 - 128);
  JUMPOUT(0x242A966B4);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  unint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_28DriverIntersectionProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242A969A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c41_ZTSKN3AGX28DriverIntersectionProgramKeyE(void *a1)
{
  a1[6] = off_26F8527C0;
  uint64_t v1 = (void *)a1[8];
  if (v1)
  {
    a1[9] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_48c41_ZTSKN3AGX28DriverIntersectionProgramKeyE(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  result[6] = off_26F8527C0;
  *((_DWORD *)result + 14) = *(_DWORD *)(a2 + 56);
  result[9] = 0;
  result[10] = 0;
  result[8] = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 64);
  uint64_t v4 = *(unsigned char **)(a2 + 72);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    v3[8] = v7;
    v3[9] = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    v3[10] = v8;
    __n128 result = memcpy(v7, v5, v6);
    v3[9] = v8;
  }
  v3[6] = off_26F852770;
  *((_DWORD *)v3 + 22) = *(_DWORD *)(a2 + 88);
  return result;
}

void *std::pair<AGX::DriverIntersectionProgramKey,std::shared_ptr<AGX::HAL200::IntersectionProgramVariant>>::~pair(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *a1 = off_26F8527C0;
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<AGX::DriverIntersectionProgramKey,std::shared_ptr<AGX::HAL200::IntersectionProgramVariant>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    *(void *)(i - 64) = off_26F8527C0;
    uint64_t v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<AGX::HAL200::IntersectionProgramVariant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AGX::HAL200::IntersectionProgramVariant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F852800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void std::__shared_ptr_emplace<AGX::HAL200::IntersectionProgramVariant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F852800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResources(void *a1)
{
  uint64_t result = IOGPUResourceListAddResource();
  uint64_t v3 = a1[15];
  for (uint64_t i = a1[16]; v3 != i; v3 += 24)
    uint64_t result = IOGPUResourceListAddResource();
  uint64_t v6 = a1[18];
  for (uint64_t j = a1[19]; v6 != j; v6 += 64)
  {
    unsigned int v7 = *(_DWORD *)(*(void *)(v6 + 48) + 2224);
    do
    {
      v7 &= ~(1 << __clz(__rbit32(v7)));
      uint64_t result = IOGPUResourceListAddResource();
    }
    while (v7);
  }
  return result;
}

uint64_t AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::appendProgramAddressTables(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (result != a2)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v7 + 48) + 1064);
      uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"driver-intersection-%u-%u", *(_DWORD *)(v7 + 40) & 0xF, (*(_DWORD *)(v7 + 40) >> 4) & 3);
      uint64_t v10 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithBytes:*(void *)(*(void *)(v7 + 48) + 1200) length:*(void *)(*(void *)(v7 + 48) + 1376)];
      uint64_t v11 = [objc_alloc(MEMORY[0x263F12AF0]) initWithBinary:v10 uniqueIdentifier:v8 debugIdentifier:*(unsigned int *)(*(void *)(v7 + 48) + 1056)];

      if (![a4 objectForKey:v9]) {
        [a4 setObject:objc_alloc_init(MEMORY[0x263EFF980]) forKeyedSubscript:v9];
      }
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", v9), "addObject:", v11);
      uint64_t result = objc_msgSend(a3, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *(void *)(*(void *)(v7 + 48) + 1152), *(void *)(*(void *)(v7 + 48) + 1376), v8, v9));
      v7 += 64;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t AGX::UserIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResources(uint64_t a1)
{
  if (*(void *)(a1 + 96))
  {
    MTLResourceListAddResource();
    IOGPUResourceListAddResource();
  }
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 32) + 1304 * v2;
      uint64_t v6 = *(void *)(v3 + 112);
      uint64_t v5 = (void *)(v3 + 112);
      uint64_t v4 = v6;
      if (v6)
      {
        unsigned int v7 = *(_DWORD *)(v4 + 2224);
        do
        {
          v7 &= ~(1 << __clz(__rbit32(v7)));
          IOGPUResourceListAddResource();
        }
        while (v7);
      }
      uint64_t v8 = v5[37];
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(v8 + 2224);
        do
        {
          v9 &= ~(1 << __clz(__rbit32(v9)));
          IOGPUResourceListAddResource();
        }
        while (v9);
      }
      uint64_t v10 = v5[74];
      if (v10)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 2224);
        do
        {
          v11 &= ~(1 << __clz(__rbit32(v11)));
          IOGPUResourceListAddResource();
        }
        while (v11);
      }
      uint64_t v12 = v5[111];
      if (v12)
      {
        unsigned int v13 = *(_DWORD *)(v12 + 2224);
        do
        {
          v13 &= ~(1 << __clz(__rbit32(v13)));
          IOGPUResourceListAddResource();
        }
        while (v13);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 40));
  }

  return IOGPUResourceListAddResource();
}

void AGX::UserIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getChildResources(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    uint64_t v6 = *(void **)(a2 + 8);
    unint64_t v5 = *(void *)(a2 + 16);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = *(unsigned char **)a2;
      uint64_t v9 = (uint64_t)v6 - *(void *)a2;
      uint64_t v10 = v9 >> 3;
      unint64_t v11 = (v9 >> 3) + 1;
      if (v11 >> 61) {
LABEL_164:
      }
        abort();
      uint64_t v12 = v5 - (void)v8;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
LABEL_165:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        unint64_t v14 = operator new(8 * v13);
      }
      else
      {
        unint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      unint64_t v16 = &v14[8 * v13];
      *uint64_t v15 = v4;
      unsigned int v7 = v15 + 1;
      if (v6 == (void *)v8)
      {
        uint64_t v8 = v6;
      }
      else
      {
        unint64_t v17 = (char *)v6 - v8 - 8;
        if (v17 < 0x58) {
          goto LABEL_168;
        }
        if ((unint64_t)((char *)v6 - v14 - v9) < 0x20) {
          goto LABEL_168;
        }
        uint64_t v18 = (v17 >> 3) + 1;
        uint64_t v19 = &v14[8 * v10 - 16];
        uint64_t v20 = (long long *)(v6 - 2);
        uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v22 = *v20;
          *(v19 - 1) = *(v20 - 1);
          *uint64_t v19 = v22;
          v19 -= 2;
          v20 -= 2;
          v21 -= 4;
        }
        while (v21);
        v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        v6 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_168:
          do
          {
            uint64_t v23 = *--v6;
            *--uint64_t v15 = v23;
          }
          while (v6 != (void *)v8);
          uint64_t v8 = *(unsigned char **)a2;
        }
      }
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = v16;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v6 = v4;
      unsigned int v7 = v6 + 1;
    }
    *(void *)(a2 + 8) = v7;
  }
  if (*(_DWORD *)(v3 + 40))
  {
    uint64_t v24 = 0;
    uint64_t v118 = v3;
    while (1)
    {
      uint64_t v119 = v24;
      uint64_t v25 = *(void *)(*(void *)(v3 + 48) + 32) + 1304 * v24;
      uint64_t v26 = *(void *)(v25 + 112);
      uint64_t v120 = (void *)(v25 + 112);
      if (v26)
      {
        unsigned int v27 = *(_DWORD *)(v26 + 2224);
        uint64_t v28 = v26 + 2400;
        uint64_t v29 = *(void **)(a2 + 8);
        while (1)
        {
          uint64_t v31 = __clz(__rbit32(v27));
          unint64_t v32 = *(void *)(a2 + 16);
          if ((unint64_t)v29 >= v32) {
            break;
          }
          *uint64_t v29 = *(void *)(v28 + 8 * v31);
          unsigned int v30 = v29 + 1;
LABEL_32:
          v27 &= ~(1 << v31);
          *(void *)(a2 + 8) = v30;
          uint64_t v29 = v30;
          if (!v27) {
            goto LABEL_62;
          }
        }
        unsigned int v33 = *(unsigned char **)a2;
        uint64_t v34 = (uint64_t)v29 - *(void *)a2;
        uint64_t v35 = v34 >> 3;
        unint64_t v36 = (v34 >> 3) + 1;
        if (v36 >> 61) {
          goto LABEL_164;
        }
        uint64_t v37 = v32 - (void)v33;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 61) {
            goto LABEL_165;
          }
          uint64_t v39 = operator new(8 * v38);
        }
        else
        {
          uint64_t v39 = 0;
        }
        size_t v40 = &v39[8 * v35];
        *size_t v40 = *(void *)(v28 + 8 * v31);
        unsigned int v30 = v40 + 1;
        if (v29 == (void *)v33)
        {
          unsigned int v33 = v29;
          goto LABEL_59;
        }
        unint64_t v41 = (char *)(v29 - 1) - v33;
        if (v41 >= 0x168)
        {
          if (&v39[v34 - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v39[v34 - 8])
          {
            long long v42 = v29;
          }
          else if ((void *)((char *)v29 - (v41 & 0xFFFFFFFFFFFFFFF8) - 8) > v29 - 1)
          {
            long long v42 = v29;
          }
          else if ((unint64_t)((char *)v29 - v39 - v34) >= 0x20)
          {
            uint64_t v43 = (v41 >> 3) + 1;
            long long v42 = &v29[-(v43 & 0x3FFFFFFFFFFFFFFCLL)];
            long long v44 = &v39[8 * v35 - 16];
            long long v45 = (long long *)(v29 - 2);
            uint64_t v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *v45;
              *(v44 - 1) = *(v45 - 1);
              *long long v44 = v47;
              v44 -= 2;
              v45 -= 2;
              v46 -= 4;
            }
            while (v46);
            v40 -= v43 & 0x3FFFFFFFFFFFFFFCLL;
            if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_59;
            }
          }
          else
          {
            long long v42 = v29;
          }
        }
        else
        {
          long long v42 = v29;
        }
        do
        {
          uint64_t v48 = *--v42;
          *--size_t v40 = v48;
        }
        while (v42 != (void *)v33);
        unsigned int v33 = *(unsigned char **)a2;
LABEL_59:
        *(void *)a2 = v40;
        *(void *)(a2 + 8) = v30;
        *(void *)(a2 + 16) = &v39[8 * v38];
        if (v33) {
          operator delete(v33);
        }
        goto LABEL_32;
      }
LABEL_62:
      uint64_t v49 = v120[37];
      if (v49)
      {
        unsigned int v50 = *(_DWORD *)(v49 + 2224);
        uint64_t v51 = v49 + 2400;
        long long v52 = *(void **)(a2 + 8);
        while (1)
        {
          uint64_t v54 = __clz(__rbit32(v50));
          unint64_t v55 = *(void *)(a2 + 16);
          if ((unint64_t)v52 >= v55) {
            break;
          }
          *long long v52 = *(void *)(v51 + 8 * v54);
          uint64_t v53 = v52 + 1;
LABEL_65:
          v50 &= ~(1 << v54);
          *(void *)(a2 + 8) = v53;
          long long v52 = v53;
          if (!v50) {
            goto LABEL_96;
          }
        }
        uint64_t v56 = *(unsigned char **)a2;
        uint64_t v57 = (uint64_t)v52 - *(void *)a2;
        uint64_t v58 = v57 >> 3;
        unint64_t v59 = (v57 >> 3) + 1;
        if (v59 >> 61) {
          goto LABEL_164;
        }
        uint64_t v60 = v55 - (void)v56;
        if (v60 >> 2 > v59) {
          unint64_t v59 = v60 >> 2;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          if (v61 >> 61) {
            goto LABEL_165;
          }
          uint64_t v62 = operator new(8 * v61);
        }
        else
        {
          uint64_t v62 = 0;
        }
        uint64_t v63 = &v62[8 * v58];
        void *v63 = *(void *)(v51 + 8 * v54);
        uint64_t v53 = v63 + 1;
        if (v52 == (void *)v56)
        {
          uint64_t v56 = v52;
          goto LABEL_83;
        }
        unint64_t v64 = (char *)(v52 - 1) - v56;
        if (v64 >= 0x168)
        {
          if (&v62[v57 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v62[v57 - 8])
          {
            uint64_t v65 = v52;
          }
          else if ((void *)((char *)v52 - (v64 & 0xFFFFFFFFFFFFFFF8) - 8) > v52 - 1)
          {
            uint64_t v65 = v52;
          }
          else if ((unint64_t)((char *)v52 - v62 - v57) >= 0x20)
          {
            uint64_t v67 = (v64 >> 3) + 1;
            uint64_t v65 = &v52[-(v67 & 0x3FFFFFFFFFFFFFFCLL)];
            long long v68 = &v62[8 * v58 - 16];
            long long v69 = (long long *)(v52 - 2);
            uint64_t v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v69;
              *(v68 - 1) = *(v69 - 1);
              _OWORD *v68 = v71;
              v68 -= 2;
              v69 -= 2;
              v70 -= 4;
            }
            while (v70);
            v63 -= v67 & 0x3FFFFFFFFFFFFFFCLL;
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_83;
            }
          }
          else
          {
            uint64_t v65 = v52;
          }
        }
        else
        {
          uint64_t v65 = v52;
        }
        do
        {
          uint64_t v66 = *--v65;
          *--uint64_t v63 = v66;
        }
        while (v65 != (void *)v56);
        uint64_t v56 = *(unsigned char **)a2;
LABEL_83:
        *(void *)a2 = v63;
        *(void *)(a2 + 8) = v53;
        *(void *)(a2 + 16) = &v62[8 * v61];
        if (v56) {
          operator delete(v56);
        }
        goto LABEL_65;
      }
LABEL_96:
      uint64_t v72 = v120[74];
      if (v72)
      {
        unsigned int v73 = *(_DWORD *)(v72 + 2224);
        uint64_t v74 = v72 + 2400;
        long long v75 = *(void **)(a2 + 8);
        while (1)
        {
          uint64_t v77 = __clz(__rbit32(v73));
          unint64_t v78 = *(void *)(a2 + 16);
          if ((unint64_t)v75 >= v78) {
            break;
          }
          void *v75 = *(void *)(v74 + 8 * v77);
          long long v76 = v75 + 1;
LABEL_99:
          v73 &= ~(1 << v77);
          *(void *)(a2 + 8) = v76;
          long long v75 = v76;
          if (!v73) {
            goto LABEL_130;
          }
        }
        long long v79 = *(unsigned char **)a2;
        uint64_t v80 = (uint64_t)v75 - *(void *)a2;
        uint64_t v81 = v80 >> 3;
        unint64_t v82 = (v80 >> 3) + 1;
        if (v82 >> 61) {
          goto LABEL_164;
        }
        uint64_t v83 = v78 - (void)v79;
        if (v83 >> 2 > v82) {
          unint64_t v82 = v83 >> 2;
        }
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v84 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v84 = v82;
        }
        if (v84)
        {
          if (v84 >> 61) {
            goto LABEL_165;
          }
          unsigned int v85 = operator new(8 * v84);
        }
        else
        {
          unsigned int v85 = 0;
        }
        BOOL v86 = &v85[8 * v81];
        *BOOL v86 = *(void *)(v74 + 8 * v77);
        long long v76 = v86 + 1;
        if (v75 == (void *)v79)
        {
          long long v79 = v75;
          goto LABEL_117;
        }
        unint64_t v87 = (char *)(v75 - 1) - v79;
        if (v87 >= 0x168)
        {
          if (&v85[v80 - 8 - (v87 & 0xFFFFFFFFFFFFFFF8)] > &v85[v80 - 8])
          {
            int v88 = v75;
          }
          else if ((void *)((char *)v75 - (v87 & 0xFFFFFFFFFFFFFFF8) - 8) > v75 - 1)
          {
            int v88 = v75;
          }
          else if ((unint64_t)((char *)v75 - v85 - v80) >= 0x20)
          {
            uint64_t v90 = (v87 >> 3) + 1;
            int v88 = &v75[-(v90 & 0x3FFFFFFFFFFFFFFCLL)];
            BOOL v91 = &v85[8 * v81 - 16];
            int v92 = (long long *)(v75 - 2);
            uint64_t v93 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v94 = *v92;
              *(v91 - 1) = *(v92 - 1);
              *BOOL v91 = v94;
              v91 -= 2;
              v92 -= 2;
              v93 -= 4;
            }
            while (v93);
            v86 -= v90 & 0x3FFFFFFFFFFFFFFCLL;
            if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_117;
            }
          }
          else
          {
            int v88 = v75;
          }
        }
        else
        {
          int v88 = v75;
        }
        do
        {
          uint64_t v89 = *--v88;
          *--BOOL v86 = v89;
        }
        while (v88 != (void *)v79);
        long long v79 = *(unsigned char **)a2;
LABEL_117:
        *(void *)a2 = v86;
        *(void *)(a2 + 8) = v76;
        *(void *)(a2 + 16) = &v85[8 * v84];
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_99;
      }
LABEL_130:
      uint64_t v95 = v120[111];
      if (v95) {
        break;
      }
LABEL_28:
      uint64_t v3 = v118;
      uint64_t v24 = v119 + 1;
      if (v119 + 1 >= (unint64_t)*(unsigned int *)(v118 + 40)) {
        return;
      }
    }
    unsigned int v96 = *(_DWORD *)(v95 + 2224);
    uint64_t v97 = v95 + 2400;
    unsigned int v98 = *(void **)(a2 + 8);
    while (1)
    {
      uint64_t v100 = __clz(__rbit32(v96));
      unint64_t v101 = *(void *)(a2 + 16);
      if ((unint64_t)v98 >= v101) {
        break;
      }
      *unsigned int v98 = *(void *)(v97 + 8 * v100);
      uint64_t v99 = v98 + 1;
LABEL_133:
      v96 &= ~(1 << v100);
      *(void *)(a2 + 8) = v99;
      unsigned int v98 = v99;
      if (!v96) {
        goto LABEL_28;
      }
    }
    int v102 = *(unsigned char **)a2;
    uint64_t v103 = (uint64_t)v98 - *(void *)a2;
    uint64_t v104 = v103 >> 3;
    unint64_t v105 = (v103 >> 3) + 1;
    if (v105 >> 61) {
      goto LABEL_164;
    }
    uint64_t v106 = v101 - (void)v102;
    if (v106 >> 2 > v105) {
      unint64_t v105 = v106 >> 2;
    }
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v107 = v105;
    }
    if (v107)
    {
      if (v107 >> 61) {
        goto LABEL_165;
      }
      __int16 v108 = operator new(8 * v107);
    }
    else
    {
      __int16 v108 = 0;
    }
    __int16 v109 = &v108[8 * v104];
    *__int16 v109 = *(void *)(v97 + 8 * v100);
    uint64_t v99 = v109 + 1;
    if (v98 == (void *)v102)
    {
      int v102 = v98;
    }
    else
    {
      unint64_t v110 = (char *)(v98 - 1) - v102;
      if (v110 < 0x168)
      {
        uint64_t v111 = v98;
        goto LABEL_158;
      }
      if (&v108[v103 - 8 - (v110 & 0xFFFFFFFFFFFFFFF8)] > &v108[v103 - 8])
      {
        uint64_t v111 = v98;
        goto LABEL_158;
      }
      if ((void *)((char *)v98 - (v110 & 0xFFFFFFFFFFFFFFF8) - 8) > v98 - 1)
      {
        uint64_t v111 = v98;
        goto LABEL_158;
      }
      if ((unint64_t)((char *)v98 - v108 - v103) < 0x20)
      {
        uint64_t v111 = v98;
        goto LABEL_158;
      }
      uint64_t v112 = (v110 >> 3) + 1;
      uint64_t v111 = &v98[-(v112 & 0x3FFFFFFFFFFFFFFCLL)];
      long long v113 = &v108[8 * v104 - 16];
      uint64_t v114 = (long long *)(v98 - 2);
      uint64_t v115 = v112 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v116 = *v114;
        *(v113 - 1) = *(v114 - 1);
        _OWORD *v113 = v116;
        v113 -= 2;
        v114 -= 2;
        v115 -= 4;
      }
      while (v115);
      v109 -= v112 & 0x3FFFFFFFFFFFFFFCLL;
      if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_158:
          uint64_t v117 = *--v111;
          *--__int16 v109 = v117;
        }
        while (v111 != (void *)v102);
        int v102 = *(unsigned char **)a2;
      }
    }
    *(void *)a2 = v109;
    *(void *)(a2 + 8) = v99;
    *(void *)(a2 + 16) = &v108[8 * v107];
    if (v102) {
      operator delete(v102);
    }
    goto LABEL_133;
  }
}

uint64_t AGX::IntersectionFunctionTableAllocatorGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~IntersectionFunctionTableAllocatorGen1(uint64_t a1)
{
  __dst[32] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  v9[2] = ___ZN3AGX4HeapILb0EED2Ev_block_invoke;
  v9[3] = &__block_descriptor_40_e5_v8__0l;
  v9[4] = v2;
  dispatch_sync(v3, v9);
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 172));
  uint64_t v4 = *(unsigned int *)(a1 + 168);
  if (v4)
  {
    if (v4 <= 0x1F) {
      size_t v5 = 256 - 8 * v4;
    }
    else {
      size_t v5 = 0;
    }
    uint64_t v6 = (void **)__dst;
    bzero(&__dst[v4], v5);
    memcpy(__dst, (const void *)(a1 + 176), 8 * v4);
    *(_DWORD *)(a1 + 168) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 172));
    do
    {
      unsigned int v7 = *v6++;
      free(v7);
      --v4;
    }
    while (v4);
  }
  else
  {
    *(_DWORD *)(a1 + 168) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 172));
  }
  return a1;
}

void AGX::IntersectionUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitIntersectionProgramVariantAndArguments(void *a1, char *__dst, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, unint64_t *a7, void *a8, _DWORD *a9)
{
  int v114 = a9[21];
  int v115 = a9[13];
  int v116 = a9[16];
  unint64_t v15 = *(void *)(a6 + 792) - *(void *)(a6 + 784);
  int v16 = *(_DWORD *)(a6 + 744);
  int v17 = v16 & 1;
  if (!v15) {
    int v17 = 0;
  }
  if (*(_DWORD *)(a6 + 560))
  {
    unint64_t v20 = *(unsigned int *)(a6 + 968);
    uint64_t v21 = *(int **)(a6 + 592);
    uint64_t v22 = (*(void *)(a6 + 600) - (void)v21) >> 2;
    int v23 = *(_DWORD *)(a6 + 956);
    unint64_t v24 = *(void *)(a6 + 648) - *(void *)(a6 + 640);
    uint64_t v25 = *(void *)(a6 + 624);
    uint64_t v26 = *(void *)(a6 + 616);
    int v27 = *(_DWORD *)(a6 + 752);
    int v28 = *(_DWORD *)(a6 + 756);
    uint64_t v29 = *(void *)(a6 + 696);
    uint64_t v30 = *(void *)(a6 + 688);
    int v31 = *(unsigned __int8 *)(a6 + 1000);
    int v32 = *(unsigned __int8 *)(a6 + 1001);
    if (*(unsigned char *)(a6 + 1001)) {
      a7[92] = *(unsigned int *)(a6 + 584) + a5;
    }
    unint64_t v33 = v24 >> 2;
    unint64_t v34 = v25 - v26;
    if (v22 == v20)
    {
      unsigned int v35 = 0;
      unint64_t v36 = v34 >> 2;
      if (!v20)
      {
LABEL_29:
        unint64_t v59 = v15 >> 2;
        if (v33)
        {
          *a7 = v35 + a5;
          uint64_t v60 = (void *)((char *)a4 + v35);
          unint64_t v61 = *(unsigned __int16 **)(a6 + 640);
          if (*(unsigned char *)(a6 + 736))
          {
            uint64_t v62 = *(unsigned __int16 **)(a6 + 664);
            for (uint64_t i = (*(void *)(a6 + 672) - (void)v62) >> 1; i; LODWORD(i) = i - 1)
            {
              int v64 = *v62++;
              v60[v64] = *(void *)(a7[v61[2 * v64]] + 8 * v61[2 * v64 + 1]);
            }
          }
          else
          {
            int v68 = v33;
            do
            {
              *v60++ = *(void *)(a7[*v61] + 8 * v61[1]);
              v61 += 2;
              --v68;
            }
            while (v68);
          }
          v35 += 8 * v33;
        }
        unint64_t v69 = v29 - v30;
        int v70 = v28 + v27;
        if (v36)
        {
          long long v71 = (_DWORD *)((char *)a4 + v35);
          *a8 = a5 + v35 + 8;
          uint64_t v72 = *(unsigned int **)(a6 + 616);
          int v73 = v36;
          do
          {
            unsigned int v74 = *v72++;
            *v71++ = *((_DWORD *)a8 + v74);
            --v73;
          }
          while (v73);
          v35 += 4 * v36;
        }
        uint64_t v113 = a3;
        unint64_t v75 = v69 >> 2;
        if (v59)
        {
          int v76 = 8 * (v33 + v22) + 4 * (v17 + v16);
          uint64_t v77 = (void *)((char *)a4 + (v76 & 0xFFFFFFFC));
          unint64_t v78 = *(int **)(a6 + 784);
          do
          {
            int v79 = *v78++;
            *v77++ = a7[v79];
            LODWORD(v59) = v59 - 1;
          }
          while (v59);
          unsigned int v35 = v76 + 8 * (v15 >> 2);
        }
        if (v70)
        {
          int v80 = v70;
          uint64_t v112 = a1;
          uint64_t v81 = *(unsigned int *)(a6 + 752);
          memcpy((char *)a4 + v35, (char *)a7 + 4 * *(unsigned int *)(a6 + 748), 4 * v81);
          int v82 = *(_DWORD *)(a6 + 756);
          if (v82)
          {
            uint64_t v83 = *(unsigned int **)(a6 + 760);
            unint64_t v84 = (_DWORD *)((char *)a4 + 4 * v81 + v35);
            do
            {
              unsigned int v85 = *v83++;
              *v84++ = *((_DWORD *)a8 + v85);
              --v82;
            }
            while (v82);
          }
          v35 += 4 * v80;
          a1 = v112;
        }
        a3 = v113;
        if (v75)
        {
          unint64_t v86 = v35 + a5;
          *a8 = v86 + 8;
          *a7 = v86;
          unint64_t v87 = (_DWORD *)((char *)a4 + v35);
          int v88 = *(unsigned __int16 **)(a6 + 688);
          if (*(unsigned char *)(a6 + 736))
          {
            uint64_t v89 = *(unsigned __int16 **)(a6 + 712);
            for (uint64_t j = (*(void *)(a6 + 720) - (void)v89) >> 1; j; LODWORD(j) = j - 1)
            {
              int v91 = *v89++;
              v87[v91] = *(_DWORD *)(a7[v88[2 * v91]] + 4 * v88[2 * v91 + 1]);
            }
          }
          else
          {
            do
            {
              *v87++ = *(_DWORD *)(a7[*v88] + 4 * v88[1]);
              v88 += 2;
              LODWORD(v75) = v75 - 1;
            }
            while (v75);
          }
        }
        goto LABEL_63;
      }
    }
    else
    {
      if (v23)
      {
        int v37 = v23;
        unint64_t v38 = a4;
        uint64_t v39 = v21;
        do
        {
          int v40 = *v39++;
          *v38++ = a7[v40];
          --v37;
        }
        while (v37);
      }
      if (*(_DWORD *)(a6 + 824))
      {
        unint64_t v41 = *(void **)(a6 + 808);
        if (v41 != (void *)(a6 + 816))
        {
          do
          {
            *((_DWORD *)a4 + *((unsigned int *)v41 + 7)) |= *((_DWORD *)v41 + 8);
            uint64_t v65 = (void *)v41[1];
            if (v65)
            {
              do
              {
                uint64_t v66 = v65;
                uint64_t v65 = (void *)*v65;
              }
              while (v65);
            }
            else
            {
              do
              {
                uint64_t v66 = (void *)v41[2];
                BOOL v67 = *v66 == (void)v41;
                unint64_t v41 = v66;
              }
              while (!v67);
            }
            unint64_t v41 = v66;
          }
          while (v66 != (void *)(a6 + 816));
        }
      }
      unsigned int v42 = (v23 + 3) & 0xFFFFFFFC;
      if (v31)
      {
        unsigned int v43 = *(_DWORD *)(a6 + 960);
        if (v43 >= 4)
        {
          long long v44 = &v21[v42];
          unsigned int v45 = v43 >> 2;
          uint64_t v46 = &a4[v42];
          do
          {
            int v47 = *v44;
            v44 += 4;
            uint64_t v48 = &a7[v47];
            long long v49 = *((_OWORD *)v48 + 1);
            *uint64_t v46 = *(_OWORD *)v48;
            v46[1] = v49;
            v46 += 2;
            --v45;
          }
          while (v45);
        }
        v42 += v43;
      }
      if (v32)
      {
        unsigned int v50 = *(_DWORD *)(a6 + 964);
        uint64_t v51 = &a4[v42];
        if (*(unsigned char *)(a6 + 1688))
        {
          if (v50)
          {
            unint64_t v110 = (int *)(*(void *)(a6 + 592) + 4 * v42);
            do
            {
              int v111 = *v110++;
              *v51++ = a7[v111];
              --v50;
            }
            while (v50);
          }
        }
        else if (v50 >= 4)
        {
          long long v52 = (int *)(*(void *)(a6 + 592) + 4 * v42);
          unsigned int v53 = v50 >> 2;
          do
          {
            int v54 = *v52;
            v52 += 4;
            *uint64_t v51 = a7[v54];
            v51 += 4;
            --v53;
          }
          while (v53);
        }
      }
      unsigned int v35 = 8 * (v22 - v20);
      unint64_t v36 = v34 >> 2;
      if (!v20) {
        goto LABEL_29;
      }
    }
    if (v20 >= 4)
    {
      unint64_t v55 = *(uint64_t **)(a6 + 2392);
      unint64_t v56 = v20 >> 2;
      uint64_t v57 = (void *)((char *)a4 + v35);
      do
      {
        uint64_t v58 = *v55;
        v55 += 4;
        *uint64_t v57 = v58;
        v57 += 4;
        --v56;
      }
      while (v56);
    }
    v35 += 8 * v20;
    goto LABEL_29;
  }
LABEL_63:
  uint64_t v92 = *(void *)(a6 + 1888);
  memcpy(__dst, *(const void **)v92, *(void *)(v92 + 8) - *(void *)v92);
  if (*(unsigned char *)(v92 + 200))
  {
    v93.i64[0] = a5;
    v93.i64[1] = a5 >> 5;
    *(int8x16_t *)&__dst[*(unsigned int *)(v92 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&__dst[*(unsigned int *)(v92 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v93, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  long long v94 = *(unsigned int **)(v92 + 176);
  for (k = *(unsigned int **)(v92 + 184); v94 != k; v94 += 3)
  {
    v96.i64[0] = a7[v94[1]] + *v94;
    v96.i64[1] = (unint64_t)v96.i64[0] >> 5;
    *(int8x16_t *)&__dst[v94[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&__dst[v94[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  uint64_t v97 = a3;
  if (!*(_DWORD *)(v92 + 240))
  {
    unsigned int v98 = &__dst[*(unsigned __int16 *)(v92 + 244)];
    unsigned int v99 = ((v116 + 3) >> 2) + 1;
    *((_WORD *)v98 + 10) = *((_WORD *)v98 + 10) & 0x7FFF | (((v99 >> 1) & 1) << 15);
    *((_WORD *)v98 + 11) = (((_WORD)v114 + (_WORD)v115 + 3) << 8) & 0xFC00 | (v99 >> 2) & 0x3FF;
    *((_WORD *)v98 + 12) = *((_WORD *)v98 + 12) & 0xFC00 | ((v114 + v115 + 3) >> 8) & 0x3FF;
  }
  uint64_t v100 = (char **)*a1;
  if (*a1)
  {
    uint64_t v101 = *(void *)(v92 + 8) - *(void *)v92;
    int v102 = *(_DWORD *)(a6 + 2296);
    LODWORD(v103) = *((_DWORD *)v100 + 2);
    int v104 = v103 + 1;
    if (*((_DWORD *)v100 + 3) >= (v103 + 1))
    {
      __int16 v108 = *v100;
    }
    else
    {
      unsigned int v105 = -__clz(v103);
      int v106 = 1 << v105;
      unint64_t v107 = (char *)malloc_type_malloc(40 << (v105 & 0x1F), 0x10800400D7C94D2uLL);
      __int16 v108 = v107;
      uint64_t v103 = *((unsigned int *)v100 + 2);
      if (v103)
      {
        memcpy(v107, *v100, 40 * v103);
        free(*v100);
        LODWORD(v103) = *((_DWORD *)v100 + 2);
      }
      *((_DWORD *)v100 + 3) = v106;
      *uint64_t v100 = v108;
    }
    __int16 v109 = &v108[40 * v103];
    *(_DWORD *)__int16 v109 = 12;
    *((void *)v109 + 1) = v97;
    *((void *)v109 + 2) = __dst;
    *((void *)v109 + 3) = v101;
    *((_DWORD *)v109 + 8) = v102;
    *((_DWORD *)v100 + 2) = v104;
  }
}

uint64_t AGX::ISPPFEncoderGen2<AGX::HAL200::Encoders>::PrimitiveBlock::emit(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = (((unint64_t)*((unsigned int *)a1 + 14) >> 8) & 0x3F) + 1;
  unint64_t v5 = *((unsigned int *)a1 + 12);
  uint64_t v6 = (unsigned __int128)(((*((_DWORD *)a1 + 12) >> 9) & 0x3FF) + (a1[3] & 0x1FF) * v4 + 3) >> 2;
  uint64_t v7 = a2 + 4 * v6;
  if (!a2)
  {
    uint64_t v15 = v7 + 4 * ((v5 >> 21) & 0x3F);
    int v16 = *((_DWORD *)a1 + 5);
    if ((v16 & 0x80000) != 0) {
      int v17 = 2;
    }
    else {
      int v17 = 1;
    }
    int v18 = v17 << ((v16 & 0x40000) != 0);
    if ((v16 & 0x30000) != 0) {
      int v19 = 2;
    }
    else {
      int v19 = 1;
    }
    if ((*((_DWORD *)a1 + 5) & 0x300) == 0x200) {
      ++v19;
    }
    int v20 = *((_DWORD *)a1 + 15);
    uint64_t v21 = v15 + 4 * (v19 + v18) + (((3 * v20) + 3) & 0x1FFFFFFFCLL) + 32;
    goto LABEL_44;
  }
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t v9 = (v5 >> 21) & 0x3F;
    if (i >= v9) {
      break;
    }
    *(_DWORD *)(v7 + 4 * i) = -2004318072;
    LODWORD(v5) = *((_DWORD *)a1 + 12);
  }
  uint64_t v10 = v7 + 4 * v9;
  long long v11 = *a1;
  *(_DWORD *)(v10 + 16) = *((_DWORD *)a1 + 4);
  *(_OWORD *)uint64_t v10 = v11;
  *(_DWORD *)(v10 + 20) = *((_DWORD *)a1 + 5);
  uint64_t v12 = v10 + 20;
  *(_DWORD *)(v10 + 24) = *((_DWORD *)a1 + 6);
  int v13 = *((_DWORD *)a1 + 5);
  if ((v13 & 0x40000) != 0)
  {
    unint64_t v14 = (_DWORD *)(v10 + 32);
    *(_DWORD *)(v10 + 28) = *((_DWORD *)a1 + 7);
    int v13 = *((_DWORD *)a1 + 5);
    if ((v13 & 0x80000) == 0) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v14 = (_DWORD *)(v10 + 28);
    if ((v13 & 0x80000) == 0)
    {
LABEL_20:
      if ((v13 & 0x30000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  *unint64_t v14 = *((_DWORD *)a1 + 8);
  int v13 = *((_DWORD *)a1 + 5);
  if ((v13 & 0x40000) == 0)
  {
    ++v14;
    goto LABEL_20;
  }
  v14[1] = *((_DWORD *)a1 + 9);
  v14 += 2;
  int v13 = *((_DWORD *)a1 + 5);
  if ((v13 & 0x30000) != 0)
  {
LABEL_21:
    *v14++ = *((_DWORD *)a1 + 10);
    int v13 = *((_DWORD *)a1 + 5);
  }
LABEL_22:
  uint64_t v15 = v10 - a2;
  int v22 = v13 & 0x300;
  if (v22 == 512)
  {
    *unint64_t v14 = *((_DWORD *)a1 + 11);
    int v13 = *((_DWORD *)a1 + 5);
    int v22 = v13 & 0x300;
  }
  if ((v13 & 0x80000) != 0) {
    int v23 = 2;
  }
  else {
    int v23 = 1;
  }
  int v24 = v23 << ((v13 & 0x40000) != 0);
  if ((v13 & 0x30000) != 0) {
    int v25 = 2;
  }
  else {
    int v25 = 1;
  }
  if (v22 == 512) {
    ++v25;
  }
  uint64_t v26 = (v25 + v24);
  uint64_t v27 = v12 + 4 * v26;
  *(_DWORD *)uint64_t v27 = *((_DWORD *)a1 + 12);
  *(void *)(v27 + 4) = *(void *)((char *)a1 + 52);
  uint64_t v28 = v27 + 12;
  int v20 = *((_DWORD *)a1 + 15);
  uint64_t v29 = (3 * v20);
  unint64_t v30 = (unint64_t)(v29 + 3) >> 2;
  uint64_t v21 = v27 + 12 + 4 * v30;
  if (a4)
  {
    int v31 = (*((_DWORD *)a1 + 12) >> 2) & 0x7F;
    if (v20)
    {
      if (v29 >= 0x1D)
      {
        unint64_t v32 = ((unint64_t)(v29 + 3) >> 2) & 0x7FFFFFF8;
        unint64_t v33 = (_OWORD *)(4 * v6 + 4 * v26 + a2 + 4 * v9 + 48);
        unint64_t v34 = v32;
        do
        {
          *(v33 - 1) = 0uLL;
          *unint64_t v33 = 0uLL;
          v33 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v30 == v32) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v35 = v30 - v32;
      unint64_t v36 = (_DWORD *)(4 * v32 + 4 * v6 + 4 * v26 + a2 + 4 * v9 + 32);
      do
      {
        *v36++ = 0;
        --v35;
      }
      while (v35);
    }
LABEL_43:
    *(_DWORD *)a4 = v31;
    *(void *)(a4 + 8) = a2;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = v28;
    *(void *)(a4 + 32) = v21;
    int v20 = *((_DWORD *)a1 + 15);
  }
LABEL_44:
  unint64_t v37 = (((v21 + ((10 * (_WORD)v4 + 3) & 0xFFC) - a2) & 0x3FFFFFFFCLL) + a3) & 0xFFFFFFFFFFFF8000;
  if (((v15 + a3) & 0xFFFFFFFFFFFF8000) == (a3 & 0xFFFFFFFFFFFF8000)) {
    unint64_t v38 = v37;
  }
  else {
    unint64_t v38 = a3 & 0xFFFFFFFFFFFF8000;
  }
  int v39 = *((_DWORD *)a1 + 5);
  if ((v39 & 0x80000) != 0) {
    int v40 = 2;
  }
  else {
    int v40 = 1;
  }
  if ((v39 & 0x30000) != 0) {
    int v41 = 2;
  }
  else {
    int v41 = 1;
  }
  if ((*((_DWORD *)a1 + 5) & 0x300) == 0x200) {
    ++v41;
  }
  BOOL v46 = (a3 & 0xFFFFFFFFFFFF8000) == v37;
  unsigned int v42 = (v20 << 16) + 8323072;
  int v43 = ((v42 | (16 * (v41 + (v40 << ((v39 & 0x40000) != 0))))) + 96) & 0x7F007F;
  unsigned int v44 = HIWORD(v42) & 0x7F ^ ((HIWORD(v42) & 0x7F) >> 4);
  int v45 = v43 | ((((v44 ^ (v44 >> 2)) ^ ((v44 ^ (v44 >> 2)) >> 1)) & 1) << 23);
  BOOL v46 = v46 || v38 == 0;
  if (v46) {
    int v47 = 8206;
  }
  else {
    int v47 = 8974;
  }
  return v45 | v47;
}

unint64_t *AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::StateFields(unint64_t *result, int a2, char a3, char a4, int a5, unsigned int a6, unint64_t a7, uint64_t a8, int a9, unsigned int a10, int a11, int a12, unint64_t a13, unint64_t a14, uint64_t a15, int a16, int a17, __int16 a18, int a19, __int16 a20,unsigned int a21,int a22,unsigned int a23,__int16 a24,uint64_t a25,unsigned int a26,char a27,int a28,uint64_t a29,unsigned __int8 a30)
{
  result[2] = 0;
  result[3] = 0;
  if (a26 < 2) {
    char v30 = 2;
  }
  else {
    char v30 = 3;
  }
  if ((a7 & 0x10000) != 0)
  {
    if (BYTE1(a7) == 4)
    {
      if (a2 == 1) {
        unsigned __int8 v31 = 7;
      }
      else {
        unsigned __int8 v31 = v30;
      }
    }
    else if ((a7 & 0x20000) != 0)
    {
      unsigned __int8 v31 = 8;
    }
    else if (a2 == 1)
    {
      unsigned __int8 v31 = 3;
    }
    else
    {
      unsigned __int8 v31 = v30;
    }
  }
  else
  {
    unsigned __int8 v31 = 5;
    switch(BYTE1(a7))
    {
      case 1:
        unsigned __int8 v31 = 2;
        break;
      case 2:
        if ((a7 & 0x20000) != 0) {
          unsigned __int8 v31 = 4;
        }
        else {
          unsigned __int8 v31 = 2;
        }
        break;
      case 3:
        break;
      case 4:
        if (a2) {
          unsigned __int8 v31 = 6;
        }
        else {
          unsigned __int8 v31 = v30;
        }
        break;
      default:
        unsigned __int8 v31 = -1;
        break;
    }
  }
  uint64_t v32 = 0;
  if ((a7 & 0xFC) != 0) {
    char v33 = 0;
  }
  else {
    char v33 = a7;
  }
  unint64_t v34 = (unint64_t)(((a6 >> 6) & 7) - 2) << 16;
  if (((a6 >> 6) & 7) - 2 >= 3) {
    unint64_t v34 = 196608;
  }
  unint64_t v35 = 786432;
  if (((a6 >> 9) & 7) - 2 < 3) {
    unint64_t v35 = (unint64_t)(((a6 >> 9) & 7) - 2) << 18;
  }
  unint64_t v36 = 3145728;
  if (((a6 >> 12) & 7) - 2 < 3) {
    unint64_t v36 = (unint64_t)(((a6 >> 12) & 7) - 2) << 20;
  }
  unsigned int v37 = ((a6 >> 15) & 7) - 2;
  unint64_t v38 = (unint64_t)v37 << 22;
  if (v37 >= 3) {
    unint64_t v38 = 12582912;
  }
  unsigned int v39 = a23 - 1;
  uint64_t v40 = 0x10000000000000;
  if (!a27) {
    uint64_t v40 = 0;
  }
  if ((a5 - 1) <= 3) {
    uint64_t v32 = qword_242EAACD0[a5 - 1];
  }
  char v41 = a9;
  uint64_t v42 = 0x20000000000000;
  if (((a7 == 0) & a30) == 0) {
    uint64_t v42 = 0;
  }
  unint64_t v43 = v42 | v32 | v34 | v31 & 0xFu | (16 * v33) | v35 | v36 | v38 | ((a3 & 0x7F) << 6) & 0x1FFF | ((unint64_t)(a4 & 7) << 13) | ((unint64_t)((a18 - 1) & 0x3FFF) << 24) | ((unint64_t)(((_WORD)a19 - 1) & 0x3FFF) << 38) | ((unint64_t)(a23 > 1) << 58) | v40 | ((unint64_t)((a21 >> 2) & 3) << 56) | ((unint64_t)(a15 != 0) << 59);
  if (v39 | a22)
  {
    unint64_t v44 = v43 | 0x400000000000000;
    unint64_t v45 = (unint64_t)(a22 & 0xF | (16 * (v39 & 0xF))) << 44;
    result[2] = v45;
    unint64_t v46 = 0x8000000000000000;
  }
  else
  {
    unint64_t v45 = 0;
    unint64_t v46 = 0;
    unint64_t v44 = v43 & 0xFBFFFFFFFFFFFFFFLL;
  }
  *uint64_t result = v44;
  if (a9)
  {
    if ((a7 & 0x4FF00) == 0x40200)
    {
      if ((unint64_t)(a29 - 563) >= 0x3A) {
LABEL_49:
      }
        char v41 = 1;
      else {
        char v41 = byte_242EAACF0[a29 - 563];
      }
    }
    else
    {
      char v41 = 3;
      switch(a29)
      {
        case 587:
        case 604:
        case 606:
        case 626:
        case 629:
        case 636:
        case 641:
          break;
        case 621:
        case 622:
        case 623:
        case 627:
        case 635:
        case 640:
          char v41 = 2;
          break;
        default:
          goto LABEL_49;
      }
    }
  }
  unint64_t v47 = v46 | (a13 >> 4) & 0xFFFFFFFFFFFLL | ((unint64_t)(v41 & 3) << 61);
  if (v33 == 3 || !v33)
  {
    unsigned __int16 v48 = a16 - 1;
    if (!a16) {
      unsigned __int16 v48 = 0;
    }
    goto LABEL_54;
  }
  if (v31 > 8u || ((1 << v31) & 0x18A) == 0)
  {
    unsigned __int16 v48 = a20 - 1;
LABEL_54:
    unint64_t v49 = (unint64_t)v48 << 44;
    goto LABEL_67;
  }
  __int16 v50 = a24;
  if (!a2)
  {
    if (BYTE1(a7) == 4)
    {
      __int16 v50 = 6 * a24;
      if ((a7 & 0x10000) == 0) {
        __int16 v50 = 6;
      }
    }
    else if (BYTE1(a7) == 3)
    {
      __int16 v50 = a20;
    }
    else
    {
      __int16 v50 = a24;
    }
  }
  unint64_t v49 = v46 | (a13 >> 4) & 0xFFFFFFFFFFFLL | ((unint64_t)(v41 & 3) << 61);
  unint64_t v47 = (unint64_t)(unsigned __int16)(v50 - 1) << 44;
LABEL_67:
  unint64_t v51 = v47 | v49;
  result[1] = v51;
  if ((_BYTE)a7)
  {
    if (!a28)
    {
      unsigned int v52 = BYTE1(a7) - 3;
      if ((a7 & 0x10000) != 0 || v52 <= 1)
      {
        unsigned int v53 = 1;
        if (v52 >= 2 && ((BYTE1(a7) == 1) & WORD1(a7)) == 0) {
          unsigned int v53 = (BYTE1(a7) == 2) & WORD1(a7);
        }
        BOOL v55 = (a25 & 0xFFFFFFFFFFFFC000) != 0 && (a7 - 1) < 2u;
        BOOL v60 = (v55 & v53) == 0;
        uint64_t v56 = 0x1000000000000000;
        if (v60) {
          uint64_t v56 = 0;
        }
        unint64_t v51 = v51 & 0xEFFFFFFFFFFFFFFFLL | v56;
        result[1] = v51;
      }
    }
  }
  if ((v44 & 0x3F) == 3)
  {
    result[1] = v51 | 0x8000000000000000;
    result[2] = (16 * (16 * a16 * a19) + 0x3FFFFFFFF0) & 0x3FFFFFF800 | (a24 - 1) & 0x7FF | v45;
    goto LABEL_114;
  }
  int v57 = (BYTE1(a7) == 2) & (BYTE2(a7) >> 2);
  if (v57
    || (unint64_t v58 = 0, (unint64_t)(a29 - 586) <= 0x2B)
    && ((1 << (a29 - 74)) & 0xC0000000003) != 0)
  {
    v51 |= 0x8000000000000000;
    result[1] = v51;
    if (a10 <= 0x1F && ((0xF00001FF >> a10) & 1) != 0)
    {
      unint64_t v58 = qword_242EB37E0[a10];
      result[3] = v58;
      if (v57)
      {
LABEL_92:
        if ((a7 & 0xFF00) == 0x200)
        {
          uint64_t v59 = 1024;
          if ((a7 & 0x40000) != 0 && a12 != 1)
          {
            uint64_t v59 = 512;
            switch(a11)
            {
              case 1:
                BOOL v60 = a12 == 2;
                uint64_t v59 = 768;
                uint64_t v61 = 256;
                goto LABEL_109;
              case 3:
                uint64_t v59 = 256;
                break;
              case 4:
                break;
              case 5:
                BOOL v60 = a12 == 2;
                uint64_t v59 = 1280;
                uint64_t v61 = 256;
                goto LABEL_109;
              case 6:
                BOOL v60 = a12 == 2;
                uint64_t v59 = 1536;
                goto LABEL_108;
              default:
                BOOL v60 = a12 == 2;
                uint64_t v59 = 1024;
LABEL_108:
                uint64_t v61 = 512;
LABEL_109:
                if (v60) {
                  uint64_t v59 = v61;
                }
                break;
            }
          }
        }
        else
        {
          uint64_t v59 = 1024;
        }
        unint64_t v58 = v58 & 0xFFFFFFFFFFFFF8FFLL | v59;
        result[3] = v58;
        unint64_t v62 = a7 >> 40;
        if (!a14) {
          goto LABEL_112;
        }
        goto LABEL_99;
      }
    }
    else
    {
      unint64_t v58 = 0;
      if (v57) {
        goto LABEL_92;
      }
    }
  }
  unint64_t v62 = a7 >> 40;
  if (!a14)
  {
LABEL_112:
    if ((v44 & 0x800000000000000) != 0)
    {
      *((void *)&v65 + 1) = v62;
      *(void *)&long long v65 = a15;
      result[1] = v51 | 0x8000000000000000;
      result[2] = (v65 >> 4) & 0x30000FFFFFFFFFFFLL | v45 & 0xFF00000000000;
    }
    goto LABEL_114;
  }
LABEL_99:
  unsigned __int16 v63 = a17 - 1;
  if (!a17) {
    unsigned __int16 v63 = 0;
  }
  unint64_t v64 = ((unint64_t)v63 << 44) | (a14 >> 4) & 0xFFFFFFFFFFFLL;
  result[1] = v51 | 0x8000000000000000;
  result[2] = v64;
  if ((v44 & 0x800000000000000) != 0)
  {
    result[2] = v64 & 0xCFFFFFFFFFFFFFFFLL | ((v62 & 3) << 60);
    result[3] = v58 & 0xFFFFFFFFFFFFFFFCLL | HIWORD(a7) & 3;
  }
LABEL_114:
  unint64_t v66 = v44 & 0xEFFFFFFFFFFFFFFFLL | ((unint64_t)(a28 != 0) << 60);
  *uint64_t result = v66;
  switch(a28)
  {
    case 0x40000:
      unint64_t v67 = v66 | 0x6000000000000000;
      break;
    case 0x10000:
      unint64_t v67 = v66 & 0x9FFFFFFFFFFFFFFFLL | 0x4000000000000000;
      break;
    case 0x4000:
      unint64_t v67 = v66 & 0x9FFFFFFFFFFFFFFFLL | 0x2000000000000000;
      break;
    default:
      return result;
  }
  *uint64_t result = v67;
  return result;
}

unsigned int *AGX::PPPEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::VsStateConfig>::RasterToken::setViewports(unsigned int *result, uint64_t a2, unsigned int a3)
{
  *uint64_t result = *result & 0xFFFF0FFF | (((unsigned __int16)(((_WORD)a3 << 12) - 4096) >> 8) >> 4 << 12);
  if (a3)
  {
    unint64_t v3 = 0;
    BOOL v4 = 0;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = (double *)(a2 + 48 * v3);
      double v7 = v6[2];
      double v8 = -3.40282347e38;
      double v9 = 3.40282347e38;
      if (v7 <= 3.40282347e38) {
        double v10 = v6[2];
      }
      else {
        double v10 = 3.40282347e38;
      }
      if (v7 < -3.40282347e38) {
        double v10 = -3.40282347e38;
      }
      float v11 = v10;
      float v12 = v11 * 0.5;
      uint64_t v13 = a2 + 48 * v3;
      double v14 = *(double *)(v13 + 24);
      if (v14 <= 3.40282347e38) {
        double v15 = *(double *)(v13 + 24);
      }
      else {
        double v15 = 3.40282347e38;
      }
      if (v14 < -3.40282347e38) {
        double v15 = -3.40282347e38;
      }
      float v16 = v15;
      float v17 = v16 * 0.5;
      uint64_t v18 = a2 + 48 * v3;
      double v19 = *(double *)(v18 + 32);
      float v20 = *(double *)(v18 + 40) - v19;
      double v21 = *v6;
      if (*v6 <= 3.40282347e38) {
        double v22 = *v6;
      }
      else {
        double v22 = 3.40282347e38;
      }
      if (v21 < -3.40282347e38) {
        double v22 = -3.40282347e38;
      }
      float v23 = v22;
      int v24 = (float *)&result[6 * v3];
      v24[34] = v12 + v23;
      int v25 = v24 + 34;
      double v26 = *(double *)(a2 + 48 * v3 + 8);
      if (v26 <= 3.40282347e38) {
        double v9 = *(double *)(a2 + 48 * v3 + 8);
      }
      if (v26 >= -3.40282347e38) {
        double v8 = v9;
      }
      float v27 = v8;
      v25[1] = v12;
      _OWORD v25[2] = v17 + v27;
      float v28 = v19;
      v25[3] = -v17;
      v25[4] = v28;
      v25[5] = v20;
      if (v3 != 0 && !v4)
      {
        double v29 = fabs(v7);
        double v30 = -0.0;
        if (v7 >= 0.0) {
          double v31 = -0.0;
        }
        else {
          double v31 = v7;
        }
        double v32 = v21 + v31;
        if (v7 < 0.0) {
          double v7 = v29;
        }
        double v33 = v7 + v32;
        double v34 = fabs(v14);
        if (v14 < 0.0) {
          double v30 = v14;
        }
        double v35 = v26 + v30;
        if (v14 < 0.0) {
          double v14 = v34;
        }
        double v36 = v14 + v35;
        unsigned int v37 = (double *)(a2 + 16);
        unint64_t v38 = 1;
        do
        {
          double v39 = *v37;
          double v40 = v37[1];
          double v41 = -0.0;
          if (*(uint64_t *)v37 >= 0) {
            double v42 = -0.0;
          }
          else {
            double v42 = *v37;
          }
          double v43 = *(v37 - 2) + v42;
          double v44 = fabs(v39);
          if (*(uint64_t *)v37 < 0) {
            double v39 = v44;
          }
          BOOL v45 = v33 > v43;
          if (v32 >= v39 + v43) {
            BOOL v45 = 0;
          }
          double v46 = fabs(v40);
          if (v40 < 0.0) {
            double v41 = v37[1];
          }
          double v47 = *(v37 - 1) + v41;
          if (v40 >= 0.0) {
            double v46 = v37[1];
          }
          BOOL v48 = v36 > v47;
          if (v35 >= v46 + v47) {
            BOOL v48 = 0;
          }
          BOOL v4 = v45 && v48;
          if (v38 >= v3) {
            break;
          }
          ++v38;
          v37 += 6;
        }
        while (!v4);
      }
      ++v3;
    }
    while (v3 != v5);
  }
  else
  {
    BOOL v4 = 0;
  }
  result[33] = result[33] & 0xFFFFFFFE | v4;
  return result;
}

uint64_t VectorMap<AGX::TileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 1008);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1016);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  BOOL v4 = *(NSObject **)(a1 + 960);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 968);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 912);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 920);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  double v8 = *(NSObject **)(a1 + 864);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 872);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 648) = &unk_26F854090;
  double v10 = *(void **)(a1 + 832);
  if (v10)
  {
    *(void *)(a1 + 840) = v10;
    operator delete(v10);
  }
  float v11 = *(void **)(a1 + 808);
  if (v11)
  {
    *(void *)(a1 + 816) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 648) = off_26F852A38;
  float v12 = *(void **)(a1 + 664);
  if (v12)
  {
    *(void *)(a1 + 672) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 432) = &unk_26F854090;
  uint64_t v13 = *(void **)(a1 + 616);
  if (v13)
  {
    *(void *)(a1 + 624) = v13;
    operator delete(v13);
  }
  double v14 = *(void **)(a1 + 592);
  if (v14)
  {
    *(void *)(a1 + 600) = v14;
    operator delete(v14);
  }
  *(void *)(a1 + 432) = off_26F852A38;
  double v15 = *(void **)(a1 + 448);
  if (v15)
  {
    *(void *)(a1 + 456) = v15;
    operator delete(v15);
  }
  *(void *)(a1 + 216) = &unk_26F854090;
  float v16 = *(void **)(a1 + 400);
  if (v16)
  {
    *(void *)(a1 + 408) = v16;
    operator delete(v16);
  }
  float v17 = *(void **)(a1 + 376);
  if (v17)
  {
    *(void *)(a1 + 384) = v17;
    operator delete(v17);
  }
  *(void *)(a1 + 216) = off_26F852A38;
  uint64_t v18 = *(void **)(a1 + 232);
  if (v18)
  {
    *(void *)(a1 + 240) = v18;
    operator delete(v18);
  }
  *(void *)a1 = &unk_26F854090;
  double v19 = *(void **)(a1 + 184);
  if (v19)
  {
    *(void *)(a1 + 192) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 160);
  if (v20)
  {
    *(void *)(a1 + 168) = v20;
    operator delete(v20);
  }
  *(void *)a1 = off_26F852A38;
  double v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(void *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

void AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~VertexProgramVariant(unint64_t a1)
{
  AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~VertexProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~VertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852858;
  if (!*(unsigned char *)(a1 + 1556) && *(void *)(a1 + 3664))
  {
    uint64_t v2 = (_OWORD *)(a1 + 3640);
    uint64_t v3 = *(void *)(a1 + 3672);
    BOOL v4 = *(NSObject **)(v3 + 16);
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    _DWORD v12[3] = &__block_descriptor_48_e5_v8__0l;
    v12[4] = v3;
    v12[5] = a1 + 3640;
    dispatch_sync(v4, v12);
    *(_OWORD *)(a1 + 3665) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 3656) = 0u;
  }

  std::mutex::~mutex((std::mutex *)(a1 + 3808));
  uint64_t v5 = *(void ***)(a1 + 3768);
  if (v5)
  {
    do
    {
      double v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  uint64_t v6 = *(void **)(a1 + 3752);
  *(void *)(a1 + 3752) = 0;
  if (v6) {
    operator delete(v6);
  }
  if (*(char *)(a1 + 3735) < 0)
  {
    operator delete(*(void **)(a1 + 3712));
    if ((*(char *)(a1 + 3711) & 0x80000000) == 0)
    {
LABEL_9:
      uint64_t v7 = *(void ***)(a1 + 3544);
      if (!v7) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  else if ((*(char *)(a1 + 3711) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 3688));
  uint64_t v7 = *(void ***)(a1 + 3544);
  if (!v7) {
    goto LABEL_16;
  }
  do
  {
LABEL_22:
    float v11 = (void **)*v7;
    if (*((char *)v7 + 39) < 0) {
      operator delete(v7[2]);
    }
    operator delete(v7);
    uint64_t v7 = v11;
  }
  while (v11);
LABEL_16:
  uint64_t v9 = *(void **)(a1 + 3528);
  *(void *)(a1 + 3528) = 0;
  if (v9) {
    operator delete(v9);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A9943C(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3808));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3752);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 3688));
  AGX::HAL200::VertexProgramVariantESLState::~VertexProgramVariantESLState((AGX::HAL200::VertexProgramVariantESLState *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::HAL200::VertexProgramVariantESLState::~VertexProgramVariantESLState(AGX::HAL200::VertexProgramVariantESLState *this)
{
  uint64_t v2 = (void **)*((void *)this + 201);
  if (v2)
  {
    do
    {
      BOOL v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 199);
  *((void *)this + 199) = 0;
  if (v3) {
    operator delete(v3);
  }

  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852AB8;
  if (*(void *)(a1 + 1264))
  {
    uint64_t v2 = *(void *)(a1 + 1272);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v2;
    unint64_t v39 = a1 + 1240;
    dispatch_sync(v3, &v34);
    *(_OWORD *)(a1 + 1265) = 0u;
    *(_OWORD *)(a1 + 1256) = 0u;
    *(_OWORD *)(a1 + 1240) = 0u;
  }
  if (*(void *)(a1 + 1312))
  {
    uint64_t v4 = *(void *)(a1 + 1320);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v4;
    unint64_t v39 = a1 + 1288;
    dispatch_sync(v5, &v34);
    *(_OWORD *)(a1 + 1313) = 0u;
    *(_OWORD *)(a1 + 1304) = 0u;
    *(_OWORD *)(a1 + 1288) = 0u;
  }
  if (*(void *)(a1 + 1360))
  {
    uint64_t v6 = *(void *)(a1 + 1368);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v6;
    unint64_t v39 = a1 + 1336;
    dispatch_sync(v7, &v34);
    *(_OWORD *)(a1 + 1361) = 0u;
    *(_OWORD *)(a1 + 1352) = 0u;
    *(_OWORD *)(a1 + 1336) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 544);
  if (v8)
  {
    uint64_t v9 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v8);
    MEMORY[0x24566ED90](v9, 0x1030C40704B4075);
  }
  double v10 = *(ProgramBindingsAndDMAList **)(a1 + 536);
  if (v10)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v10);
    MEMORY[0x24566ED90]();
  }
  uint64_t v11 = *(void *)(a1 + 600);
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v11 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 7952));
  }
  if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
  {
    float v12 = *(void **)(a1 + 1888);
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1912));
  float v12 = *(void **)(a1 + 1888);
  if (v12)
  {
LABEL_15:
    *(void *)(a1 + 1896) = v12;
    operator delete(v12);
  }
LABEL_16:
  uint64_t v13 = *(void *)(a1 + 1864);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1872);
    double v15 = *(void **)(a1 + 1864);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1864);
    }
    *(void *)(a1 + 1872) = v13;
    operator delete(v15);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1752));
  uint64_t v16 = *(void *)(a1 + 1712);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 1720);
    uint64_t v18 = *(void **)(a1 + 1712);
    if (v17 != v16)
    {
      do
      {
        double v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v17 -= 16;
      }
      while (v17 != v16);
      uint64_t v18 = *(void **)(a1 + 1712);
    }
    *(void *)(a1 + 1720) = v16;
    operator delete(v18);
  }
  float v20 = *(void **)(a1 + 1688);
  if (v20)
  {
    *(void *)(a1 + 1696) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 1664);
  if (v21)
  {
    *(void *)(a1 + 1672) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1583) < 0)
  {
    operator delete(*(void **)(a1 + 1560));
    if ((*(char *)(a1 + 1191) & 0x80000000) == 0)
    {
LABEL_41:
      if ((*(char *)(a1 + 1167) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_67:
      operator delete(*(void **)(a1 + 1144));
      if ((*(char *)(a1 + 1143) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_68;
    }
  }
  else if ((*(char *)(a1 + 1191) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(*(void **)(a1 + 1168));
  if (*(char *)(a1 + 1167) < 0) {
    goto LABEL_67;
  }
LABEL_42:
  if ((*(char *)(a1 + 1143) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 1120));
LABEL_43:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 864));
  double v22 = *(void **)(a1 + 832);
  if (v22)
  {
    *(void *)(a1 + 840) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 808);
  if (v23)
  {
    *(void *)(a1 + 816) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 760);
  if (v24)
  {
    *(void *)(a1 + 768) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 736);
  if (v25)
  {
    *(void *)(a1 + 744) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 712);
  if (v26)
  {
    *(void *)(a1 + 720) = v26;
    operator delete(v26);
  }
  float v27 = *(void **)(a1 + 688);
  if (v27)
  {
    *(void *)(a1 + 696) = v27;
    operator delete(v27);
  }
  float v28 = *(void **)(a1 + 664);
  if (v28)
  {
    *(void *)(a1 + 672) = v28;
    operator delete(v28);
  }
  double v29 = *(void **)(a1 + 640);
  if (v29)
  {
    *(void *)(a1 + 648) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void *)(a1 + 576);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 584);
    double v32 = *(void **)(a1 + 576);
    if (v31 != v30)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v31 - 24));

        *(void *)(v31 - 16) = 0;
        *(void *)(v31 - 8) = 0;
        v31 -= 80;
      }
      while (v31 != v30);
      double v32 = *(void **)(a1 + 576);
    }
    *(void *)(a1 + 584) = v30;
    operator delete(v32);
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a1 + 8);
  return a1;
}

void ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(ProgramBindingsAndDMAList *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = (void *)*((void *)this + 1);
  while (v2 != v3)
  {
    if (*v2) {
      MEMORY[0x24566ED90](*v2, 0x1000C408B6DE1C6);
    }
    ++v2;
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  uint64_t v5 = (void *)*((void *)this + 4);
  while (v4 != v5)
  {
    if (*v4) {
      MEMORY[0x24566ED90](*v4, 0x1000C408B6DE1C6);
    }
    ++v4;
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  uint64_t v7 = (void *)*((void *)this + 7);
  while (v6 != v7)
  {
    if (*v6) {
      MEMORY[0x24566ED90](*v6, 0x1000C408B6DE1C6);
    }
    ++v6;
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  uint64_t v9 = (void *)*((void *)this + 10);
  while (v8 != v9)
  {
    if (*v8) {
      MEMORY[0x24566ED90](*v8, 0x1000C408B6DE1C6);
    }
    ++v8;
  }
  double v10 = (void *)*((void *)this + 14);
  uint64_t v11 = (void *)*((void *)this + 15);
  if (v10 == v11)
  {
    if (!v10) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  do
  {
    if (*v10) {
      MEMORY[0x24566ED90](*v10, 0x1000C40A86A77D5);
    }
    ++v10;
  }
  while (v10 != v11);
  double v10 = (void *)*((void *)this + 14);
  if (v10)
  {
LABEL_23:
    *((void *)this + 15) = v10;
    operator delete(v10);
  }
LABEL_24:
  float v12 = (void *)*((void *)this + 9);
  if (v12)
  {
    *((void *)this + 10) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 6);
  if (v13)
  {
    *((void *)this + 7) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 3);
  if (v14)
  {
    *((void *)this + 4) = v14;
    operator delete(v14);
  }
  double v15 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v15;
    operator delete(v15);
  }
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ObjectProgramVariant(unint64_t a1)
{
  AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ObjectProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ObjectProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852878;

  std::mutex::~mutex((std::mutex *)(a1 + 3472));
  uint64_t v2 = *(void ***)(a1 + 3440);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 3424);
  *(void *)(a1 + 3424) = 0;
  if (v3) {
    operator delete(v3);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A99C18(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3472));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3424);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~MeshProgramVariant(unint64_t a1)
{
  AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~MeshProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~MeshProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852898;
  if (!*(unsigned char *)(a1 + 1556) && *(void *)(a1 + 3432))
  {
    uint64_t v2 = *(void *)(a1 + 3440);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    void v11[3] = &__block_descriptor_48_e5_v8__0l;
    v11[4] = v2;
    v11[5] = a1 + 3408;
    dispatch_sync(v3, v11);
    *(_OWORD *)(a1 + 3433) = 0u;
    *(_OWORD *)(a1 + 3424) = 0u;
    *(_OWORD *)(a1 + 3408) = 0u;
  }

  *(void *)(a1 + 3568) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3576));
  uint64_t v4 = *(void ***)(a1 + 3544);
  if (v4)
  {
    do
    {
      uint64_t v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v7;
    }
    while (v7);
  }
  uint64_t v5 = *(void **)(a1 + 3528);
  *(void *)(a1 + 3528) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*(char *)(a1 + 3503) < 0)
  {
    operator delete(*(void **)(a1 + 3480));
    if ((*(char *)(a1 + 3479) & 0x80000000) == 0)
    {
LABEL_9:
      uint64_t v6 = *(void ***)(a1 + 3312);
      if (!v6) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
  }
  else if ((*(char *)(a1 + 3479) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 3456));
  uint64_t v6 = *(void ***)(a1 + 3312);
  if (!v6) {
    goto LABEL_16;
  }
  do
  {
LABEL_22:
    double v10 = (void **)*v6;
    if (*((char *)v6 + 39) < 0) {
      operator delete(v6[2]);
    }
    operator delete(v6);
    uint64_t v6 = v10;
  }
  while (v10);
LABEL_16:
  uint64_t v8 = *(void **)(a1 + 3296);
  *(void *)(a1 + 3296) = 0;
  if (v8) {
    operator delete(v8);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A99E2C(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3576));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3528);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 3456));
  AGX::HAL200::MeshProgramVariantESLState::~MeshProgramVariantESLState((AGX::HAL200::MeshProgramVariantESLState *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::HAL200::MeshProgramVariantESLState::~MeshProgramVariantESLState(AGX::HAL200::MeshProgramVariantESLState *this)
{
  uint64_t v2 = (void **)*((void *)this + 172);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 170);
  *((void *)this + 170) = 0;
  if (v3) {
    operator delete(v3);
  }

  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this);
}

void AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~FragmentProgramVariant(unint64_t a1)
{
  AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~FragmentProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~FragmentProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8528B8;

  *(void *)(a1 + 3448) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3456));
  uint64_t v2 = *(void ***)(a1 + 3424);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 3408);
  *(void *)(a1 + 3408) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 3367) < 0)
  {
    operator delete(*(void **)(a1 + 3344));
    if ((*(char *)(a1 + 3343) & 0x80000000) == 0)
    {
LABEL_6:
      uint64_t v4 = *(void *)(a1 + 3288);
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 3343) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 3320));
  uint64_t v4 = *(void *)(a1 + 3288);
  if (v4)
  {
LABEL_7:
    uint64_t v5 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v4);
    MEMORY[0x24566ED90](v5, 0x10F0C4099BF1763);
  }
LABEL_8:
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A9A020(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3456));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3408);
  AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)(v1 + 3320));
  AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState((AGX::HAL200::FragmentProgramVariantESLState *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState(AGX::HAL200::FragmentProgramVariantESLState *this)
{
  uint64_t v2 = *((void *)this + 169);
  if (v2)
  {
    uint64_t v3 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v2);
    MEMORY[0x24566ED90](v3, 0x10F0C4099BF1763);
  }

  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)this);
}

void AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileProgramVariant(unint64_t a1)
{
  AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8528D8;

  *(void *)(a1 + 3352) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3360));
  uint64_t v2 = *(void ***)(a1 + 3328);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 3312);
  *(void *)(a1 + 3312) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 3288);
  if (v4)
  {
    uint64_t v5 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v4);
    MEMORY[0x24566ED90](v5, 0x10F0C4099BF1763);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A9A1B8(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3360));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3312);
  AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState((AGX::HAL200::FragmentProgramVariantESLState *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ComputeProgramVariant(unint64_t a1)
{
  AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ComputeProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ComputeProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852918;

  *(void *)(a1 + 3600) = 0;
  std::mutex::~mutex((std::mutex *)(a1 + 3608));
  uint64_t v2 = *(void ***)(a1 + 3576);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 3560);
  *(void *)(a1 + 3560) = 0;
  if (v3) {
    operator delete(v3);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1936));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(a1);
}

void sub_242A9A2D4(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)(v1 + 3608));
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v1 + 3560);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(v1 + 1936));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852AD8;
  if (*(void *)(a1 + 1264))
  {
    uint64_t v2 = *(void *)(a1 + 1272);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v2;
    unint64_t v39 = a1 + 1240;
    dispatch_sync(v3, &v34);
    *(_OWORD *)(a1 + 1265) = 0u;
    *(_OWORD *)(a1 + 1256) = 0u;
    *(_OWORD *)(a1 + 1240) = 0u;
  }
  if (*(void *)(a1 + 1312))
  {
    uint64_t v4 = *(void *)(a1 + 1320);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v4;
    unint64_t v39 = a1 + 1288;
    dispatch_sync(v5, &v34);
    *(_OWORD *)(a1 + 1313) = 0u;
    *(_OWORD *)(a1 + 1304) = 0u;
    *(_OWORD *)(a1 + 1288) = 0u;
  }
  if (*(void *)(a1 + 1360))
  {
    uint64_t v6 = *(void *)(a1 + 1368);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v34 = MEMORY[0x263EF8330];
    uint64_t v35 = 3221225472;
    double v36 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    unsigned int v37 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v38 = v6;
    unint64_t v39 = a1 + 1336;
    dispatch_sync(v7, &v34);
    *(_OWORD *)(a1 + 1361) = 0u;
    *(_OWORD *)(a1 + 1352) = 0u;
    *(_OWORD *)(a1 + 1336) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 544);
  if (v8)
  {
    uint64_t v9 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v8);
    MEMORY[0x24566ED90](v9, 0x1030C40704B4075);
  }
  double v10 = *(ProgramBindingsAndDMAList **)(a1 + 536);
  if (v10)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v10);
    MEMORY[0x24566ED90]();
  }
  uint64_t v11 = *(void *)(a1 + 600);
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v11 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 7952));
  }
  if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
  {
    float v12 = *(void **)(a1 + 1888);
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1912));
  float v12 = *(void **)(a1 + 1888);
  if (v12)
  {
LABEL_15:
    *(void *)(a1 + 1896) = v12;
    operator delete(v12);
  }
LABEL_16:
  uint64_t v13 = *(void *)(a1 + 1864);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1872);
    double v15 = *(void **)(a1 + 1864);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1864);
    }
    *(void *)(a1 + 1872) = v13;
    operator delete(v15);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1752));
  uint64_t v16 = *(void *)(a1 + 1712);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 1720);
    uint64_t v18 = *(void **)(a1 + 1712);
    if (v17 != v16)
    {
      do
      {
        double v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v17 -= 16;
      }
      while (v17 != v16);
      uint64_t v18 = *(void **)(a1 + 1712);
    }
    *(void *)(a1 + 1720) = v16;
    operator delete(v18);
  }
  float v20 = *(void **)(a1 + 1688);
  if (v20)
  {
    *(void *)(a1 + 1696) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 1664);
  if (v21)
  {
    *(void *)(a1 + 1672) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1583) < 0)
  {
    operator delete(*(void **)(a1 + 1560));
    if ((*(char *)(a1 + 1191) & 0x80000000) == 0)
    {
LABEL_41:
      if ((*(char *)(a1 + 1167) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_67:
      operator delete(*(void **)(a1 + 1144));
      if ((*(char *)(a1 + 1143) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_68;
    }
  }
  else if ((*(char *)(a1 + 1191) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(*(void **)(a1 + 1168));
  if (*(char *)(a1 + 1167) < 0) {
    goto LABEL_67;
  }
LABEL_42:
  if ((*(char *)(a1 + 1143) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_68:
  operator delete(*(void **)(a1 + 1120));
LABEL_43:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 864));
  double v22 = *(void **)(a1 + 832);
  if (v22)
  {
    *(void *)(a1 + 840) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 808);
  if (v23)
  {
    *(void *)(a1 + 816) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 760);
  if (v24)
  {
    *(void *)(a1 + 768) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 736);
  if (v25)
  {
    *(void *)(a1 + 744) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 712);
  if (v26)
  {
    *(void *)(a1 + 720) = v26;
    operator delete(v26);
  }
  float v27 = *(void **)(a1 + 688);
  if (v27)
  {
    *(void *)(a1 + 696) = v27;
    operator delete(v27);
  }
  float v28 = *(void **)(a1 + 664);
  if (v28)
  {
    *(void *)(a1 + 672) = v28;
    operator delete(v28);
  }
  double v29 = *(void **)(a1 + 640);
  if (v29)
  {
    *(void *)(a1 + 648) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *(void *)(a1 + 576);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 584);
    double v32 = *(void **)(a1 + 576);
    if (v31 != v30)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v31 - 24));

        *(void *)(v31 - 16) = 0;
        *(void *)(v31 - 8) = 0;
        v31 -= 80;
      }
      while (v31 != v30);
      double v32 = *(void **)(a1 + 576);
    }
    *(void *)(a1 + 584) = v30;
    operator delete(v32);
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a1 + 8);
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::BlitVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexProgramVariant(unint64_t a1)
{
  AGX::BlitVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::BlitVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852978;
  uint64_t v2 = *(void *)(a1 + 2680);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 40 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0) {
          operator delete(*(void **)(v2 + v4 - 24));
        }
        v4 -= 40;
      }
      while (v4);
    }
    MEMORY[0x24566ED70](v2 - 16, 0x1012C8093F7C2A9);
    *(void *)(a1 + 2680) = 0;
  }
  if (*(void *)(a1 + 2744))
  {
    uint64_t v5 = *(void *)(a1 + 2752);
    uint64_t v6 = *(NSObject **)(v5 + 16);
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    v8[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v8[3] = &__block_descriptor_48_e5_v8__0l;
    v8[4] = v5;
    v8[5] = a1 + 2720;
    dispatch_sync(v6, v8);
    *(_OWORD *)(a1 + 2745) = 0u;
    *(_OWORD *)(a1 + 2736) = 0u;
    *(_OWORD *)(a1 + 2720) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::~ProgramVariant(a1);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F853048;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    float v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      float v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    double v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  double v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  double v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::BlitVertexFastClearProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexFastClearProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852998;
  if (*(void *)(a1 + 2720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2696);
    uint64_t v3 = *(void *)(a1 + 2728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1 + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)(a1 + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F853068;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    float v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      float v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    double v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  double v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  double v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::BlitVertexFastClearProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitVertexFastClearProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852998;
  if (*(void *)(a1 + 2720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2696);
    uint64_t v3 = *(void *)(a1 + 2728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = a1 + 2696;
    dispatch_sync(v4, v6);
    *(_OWORD *)(a1 + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::~ProgramVariant(a1);
}

void AGX::ClearVisibilityVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ClearVisibilityVertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8529D8;
  if (*(void *)(a1 + 2688))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2664);
    uint64_t v3 = *(void *)(a1 + 2696);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1 + 2664;
    dispatch_sync(v4, v5);
    *(_OWORD *)(a1 + 2689) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2680) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F853088;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    float v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      float v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    double v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  double v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  double v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ClearVisibilityVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ClearVisibilityVertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8529D8;
  if (*(void *)(a1 + 2688))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2664);
    uint64_t v3 = *(void *)(a1 + 2696);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = a1 + 2664;
    dispatch_sync(v4, v6);
    *(_OWORD *)(a1 + 2689) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2680) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::~ProgramVariant(a1);
}

void AGX::TileDispatchVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileDispatchVertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8529F8;
  if (*(void *)(a1 + 2720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2696);
    uint64_t v3 = *(void *)(a1 + 2728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1 + 2696;
    dispatch_sync(v4, v5);
    *(_OWORD *)(a1 + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8530A8;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    uint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    uint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  uint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    float v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      float v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    double v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  double v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  double v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::TileDispatchVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileDispatchVertexProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F8529F8;
  if (*(void *)(a1 + 2720))
  {
    uint64_t v2 = (_OWORD *)(a1 + 2696);
    uint64_t v3 = *(void *)(a1 + 2728);
    uint64_t v4 = *(NSObject **)(v3 + 16);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = v3;
    v6[5] = a1 + 2696;
    dispatch_sync(v4, v6);
    *(_OWORD *)(a1 + 2721) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(a1 + 2712) = 0u;
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)(a1 + 1344));

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::~ProgramVariant(a1);
}

void AGX::IntersectionProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~IntersectionProgramVariant(void *a1)
{
  *a1 = &unk_26F852A18;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 236);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant((unint64_t)a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852BB8;
  if (*(void *)(a1 + 1216))
  {
    uint64_t v2 = *(void *)(a1 + 1224);
    uint64_t v3 = *(NSObject **)(v2 + 16);
    uint64_t v31 = MEMORY[0x263EF8330];
    uint64_t v32 = 3221225472;
    unint64_t v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v34 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v35 = v2;
    unint64_t v36 = a1 + 1192;
    dispatch_sync(v3, &v31);
    *(_OWORD *)(a1 + 1217) = 0u;
    *(_OWORD *)(a1 + 1208) = 0u;
    *(_OWORD *)(a1 + 1192) = 0u;
  }
  if (*(void *)(a1 + 1264))
  {
    uint64_t v4 = *(void *)(a1 + 1272);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v31 = MEMORY[0x263EF8330];
    uint64_t v32 = 3221225472;
    unint64_t v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v34 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v35 = v4;
    unint64_t v36 = a1 + 1240;
    dispatch_sync(v5, &v31);
    *(_OWORD *)(a1 + 1265) = 0u;
    *(_OWORD *)(a1 + 1256) = 0u;
    *(_OWORD *)(a1 + 1240) = 0u;
  }
  if (*(void *)(a1 + 1312))
  {
    uint64_t v6 = *(void *)(a1 + 1320);
    uint64_t v7 = *(NSObject **)(v6 + 16);
    uint64_t v31 = MEMORY[0x263EF8330];
    uint64_t v32 = 3221225472;
    unint64_t v33 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v34 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v35 = v6;
    unint64_t v36 = a1 + 1288;
    dispatch_sync(v7, &v31);
    *(_OWORD *)(a1 + 1313) = 0u;
    *(_OWORD *)(a1 + 1304) = 0u;
    *(_OWORD *)(a1 + 1288) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 544);
  if (v8)
  {
    uint64_t v9 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v8);
    MEMORY[0x24566ED90](v9, 0x1030C40704B4075);
  }
  uint64_t v10 = *(ProgramBindingsAndDMAList **)(a1 + 536);
  if (v10)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v10);
    MEMORY[0x24566ED90]();
  }
  uint64_t v11 = *(void *)(a1 + 552);
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v11 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v11 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 7952));
  }
  if ((*(char *)(a1 + 1887) & 0x80000000) == 0)
  {
    float v12 = *(void **)(a1 + 1840);
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 1864));
  float v12 = *(void **)(a1 + 1840);
  if (v12)
  {
LABEL_15:
    *(void *)(a1 + 1848) = v12;
    operator delete(v12);
  }
LABEL_16:
  uint64_t v13 = *(void *)(a1 + 1816);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1824);
    double v15 = *(void **)(a1 + 1816);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      double v15 = *(void **)(a1 + 1816);
    }
    *(void *)(a1 + 1824) = v13;
    operator delete(v15);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1704));
  uint64_t v16 = *(void *)(a1 + 1664);
  if (v16)
  {
    uint64_t v17 = *(void *)(a1 + 1672);
    uint64_t v18 = *(void **)(a1 + 1664);
    if (v17 != v16)
    {
      do
      {
        double v19 = *(std::__shared_weak_count **)(v17 - 8);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v17 -= 16;
      }
      while (v17 != v16);
      uint64_t v18 = *(void **)(a1 + 1664);
    }
    *(void *)(a1 + 1672) = v16;
    operator delete(v18);
  }
  float v20 = *(void **)(a1 + 1640);
  if (v20)
  {
    *(void *)(a1 + 1648) = v20;
    operator delete(v20);
  }
  double v21 = *(void **)(a1 + 1616);
  if (v21)
  {
    *(void *)(a1 + 1624) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 1535) < 0)
  {
    operator delete(*(void **)(a1 + 1512));
    if ((*(char *)(a1 + 1143) & 0x80000000) == 0)
    {
LABEL_41:
      if ((*(char *)(a1 + 1119) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_62:
      operator delete(*(void **)(a1 + 1096));
      if ((*(char *)(a1 + 1095) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_63;
    }
  }
  else if ((*(char *)(a1 + 1143) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(*(void **)(a1 + 1120));
  if (*(char *)(a1 + 1119) < 0) {
    goto LABEL_62;
  }
LABEL_42:
  if ((*(char *)(a1 + 1095) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_63:
  operator delete(*(void **)(a1 + 1072));
LABEL_43:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 816));
  double v22 = *(void **)(a1 + 784);
  if (v22)
  {
    *(void *)(a1 + 792) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 760);
  if (v23)
  {
    *(void *)(a1 + 768) = v23;
    operator delete(v23);
  }
  int v24 = *(void **)(a1 + 712);
  if (v24)
  {
    *(void *)(a1 + 720) = v24;
    operator delete(v24);
  }
  int v25 = *(void **)(a1 + 688);
  if (v25)
  {
    *(void *)(a1 + 696) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 664);
  if (v26)
  {
    *(void *)(a1 + 672) = v26;
    operator delete(v26);
  }
  float v27 = *(void **)(a1 + 640);
  if (v27)
  {
    *(void *)(a1 + 648) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(a1 + 616);
  if (v28)
  {
    *(void *)(a1 + 624) = v28;
    operator delete(v28);
  }
  uint64_t v29 = *(void **)(a1 + 592);
  if (v29)
  {
    *(void *)(a1 + 600) = v29;
    operator delete(v29);
  }
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a1 + 8);
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::IntersectionProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~IntersectionProgramVariant(void *a1)
{
  *a1 = &unk_26F852A18;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 236);

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant((unint64_t)a1);
}

void VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::VertexProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 976);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 984);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 928);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 936);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 880);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 888);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 832);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 840);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)(a1 + 624));
  AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)(a1 + 416));
  AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)(a1 + 208));

  AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)a1);
}

uint64_t VectorMap<AGX::ObjectProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ObjectProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 784);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 792);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 736);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 744);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 688);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 696);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 640);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 648);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 480) = &unk_26F852CA8;
  uint64_t v10 = *(void **)(a1 + 608);
  if (v10)
  {
    *(void *)(a1 + 616) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 584);
  if (v11)
  {
    *(void *)(a1 + 592) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  *(void *)(a1 + 480) = off_26F852CF0;
  float v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(void *)(a1 + 504) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 320) = &unk_26F852CA8;
  uint64_t v13 = *(void **)(a1 + 448);
  if (v13)
  {
    *(void *)(a1 + 456) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 424);
  if (v14)
  {
    *(void *)(a1 + 432) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  *(void *)(a1 + 320) = off_26F852CF0;
  double v15 = *(void **)(a1 + 336);
  if (v15)
  {
    *(void *)(a1 + 344) = v15;
    operator delete(v15);
  }
  *(void *)(a1 + 160) = &unk_26F852CA8;
  uint64_t v16 = *(void **)(a1 + 288);
  if (v16)
  {
    *(void *)(a1 + 296) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 264);
  if (v17)
  {
    *(void *)(a1 + 272) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  *(void *)(a1 + 160) = off_26F852CF0;
  uint64_t v18 = *(void **)(a1 + 176);
  if (v18)
  {
    *(void *)(a1 + 184) = v18;
    operator delete(v18);
  }
  *(void *)a1 = &unk_26F852CA8;
  double v19 = *(void **)(a1 + 128);
  if (v19)
  {
    *(void *)(a1 + 136) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 104);
  if (v20)
  {
    *(void *)(a1 + 112) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  *(void *)a1 = off_26F852CF0;
  double v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(void *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

void VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::MeshProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 1008);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1016);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 960);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 968);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 912);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 920);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 864);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 872);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)(a1 + 648));
  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)(a1 + 432));
  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)(a1 + 216));

  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)a1);
}

uint64_t VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::FragmentProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 1296);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1304);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 1248);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1256);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 1200);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1208);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 1152);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1160);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 864) = &unk_26F854050;
  uint64_t v10 = *(void **)(a1 + 1120);
  if (v10)
  {
    *(void *)(a1 + 1128) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 1096);
  if (v11)
  {
    *(void *)(a1 + 1104) = v11;
    operator delete(v11);
  }
  if ((*(char *)(a1 + 1087) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 1063) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_55:
    operator delete(*(void **)(a1 + 1040));
    if ((*(char *)(a1 + 1039) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
  operator delete(*(void **)(a1 + 1064));
  if (*(char *)(a1 + 1063) < 0) {
    goto LABEL_55;
  }
LABEL_23:
  if ((*(char *)(a1 + 1039) & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_56:
  operator delete(*(void **)(a1 + 1016));
LABEL_24:
  *(void *)(a1 + 864) = off_26F852E48;
  float v12 = *(void **)(a1 + 880);
  if (v12)
  {
    *(void *)(a1 + 888) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 576) = &unk_26F854050;
  uint64_t v13 = *(void **)(a1 + 832);
  if (v13)
  {
    *(void *)(a1 + 840) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 808);
  if (v14)
  {
    *(void *)(a1 + 816) = v14;
    operator delete(v14);
  }
  if ((*(char *)(a1 + 799) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 775) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_58:
    operator delete(*(void **)(a1 + 752));
    if ((*(char *)(a1 + 751) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_59;
  }
  operator delete(*(void **)(a1 + 776));
  if (*(char *)(a1 + 775) < 0) {
    goto LABEL_58;
  }
LABEL_32:
  if ((*(char *)(a1 + 751) & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 728));
LABEL_33:
  *(void *)(a1 + 576) = off_26F852E48;
  double v15 = *(void **)(a1 + 592);
  if (v15)
  {
    *(void *)(a1 + 600) = v15;
    operator delete(v15);
  }
  *(void *)(a1 + 288) = &unk_26F854050;
  uint64_t v16 = *(void **)(a1 + 544);
  if (v16)
  {
    *(void *)(a1 + 552) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 520);
  if (v17)
  {
    *(void *)(a1 + 528) = v17;
    operator delete(v17);
  }
  if ((*(char *)(a1 + 511) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 487) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_61:
    operator delete(*(void **)(a1 + 464));
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_62;
  }
  operator delete(*(void **)(a1 + 488));
  if (*(char *)(a1 + 487) < 0) {
    goto LABEL_61;
  }
LABEL_41:
  if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_62:
  operator delete(*(void **)(a1 + 440));
LABEL_42:
  *(void *)(a1 + 288) = off_26F852E48;
  uint64_t v18 = *(void **)(a1 + 304);
  if (v18)
  {
    *(void *)(a1 + 312) = v18;
    operator delete(v18);
  }
  *(void *)a1 = &unk_26F854050;
  double v19 = *(void **)(a1 + 256);
  if (v19)
  {
    *(void *)(a1 + 264) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 232);
  if (v20)
  {
    *(void *)(a1 + 240) = v20;
    operator delete(v20);
  }
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 199) & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_64:
    operator delete(*(void **)(a1 + 176));
    if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_65;
  }
  operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0) {
    goto LABEL_64;
  }
LABEL_50:
  if ((*(char *)(a1 + 175) & 0x80000000) == 0) {
    goto LABEL_51;
  }
LABEL_65:
  operator delete(*(void **)(a1 + 152));
LABEL_51:
  *(void *)a1 = off_26F852E48;
  double v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(void *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 752);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 760);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 704);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 712);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 656);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 664);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 608);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 616);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 456) = &unk_26F8540D0;
  uint64_t v10 = *(void **)(a1 + 576);
  if (v10)
  {
    *(void *)(a1 + 584) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 552);
  if (v11)
  {
    *(void *)(a1 + 560) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 543) < 0) {
    operator delete(*(void **)(a1 + 520));
  }
  *(void *)(a1 + 456) = off_26F852EC8;
  float v12 = *(void **)(a1 + 472);
  if (v12)
  {
    *(void *)(a1 + 480) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 304) = &unk_26F8540D0;
  uint64_t v13 = *(void **)(a1 + 424);
  if (v13)
  {
    *(void *)(a1 + 432) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 400);
  if (v14)
  {
    *(void *)(a1 + 408) = v14;
    operator delete(v14);
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  *(void *)(a1 + 304) = off_26F852EC8;
  double v15 = *(void **)(a1 + 320);
  if (v15)
  {
    *(void *)(a1 + 328) = v15;
    operator delete(v15);
  }
  *(void *)(a1 + 152) = &unk_26F8540D0;
  uint64_t v16 = *(void **)(a1 + 272);
  if (v16)
  {
    *(void *)(a1 + 280) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 248);
  if (v17)
  {
    *(void *)(a1 + 256) = v17;
    operator delete(v17);
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  *(void *)(a1 + 152) = off_26F852EC8;
  uint64_t v18 = *(void **)(a1 + 168);
  if (v18)
  {
    *(void *)(a1 + 176) = v18;
    operator delete(v18);
  }
  *(void *)a1 = &unk_26F8540D0;
  double v19 = *(void **)(a1 + 120);
  if (v19)
  {
    *(void *)(a1 + 128) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 96);
  if (v20)
  {
    *(void *)(a1 + 104) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  *(void *)a1 = off_26F852EC8;
  double v21 = *(void **)(a1 + 16);
  if (v21)
  {
    *(void *)(a1 + 24) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::Chunk::~Chunk(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 592);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 600);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  uint64_t v4 = *(NSObject **)(a1 + 544);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 552);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  uint64_t v6 = *(NSObject **)(a1 + 496);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(void *)(a1 + 504);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  uint64_t v8 = *(NSObject **)(a1 + 448);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *(void *)(a1 + 456);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  *(void *)(a1 + 336) = &unk_26F852F48;
  uint64_t v10 = *(void **)(a1 + 384);
  if (v10)
  {
    *(void *)(a1 + 392) = v10;
    operator delete(v10);
  }
  *(void *)(a1 + 336) = &unk_26F852F88;
  uint64_t v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  *(void *)(a1 + 224) = &unk_26F852F48;
  float v12 = *(void **)(a1 + 272);
  if (v12)
  {
    *(void *)(a1 + 280) = v12;
    operator delete(v12);
  }
  *(void *)(a1 + 224) = &unk_26F852F88;
  uint64_t v13 = *(void **)(a1 + 240);
  if (v13)
  {
    *(void *)(a1 + 248) = v13;
    operator delete(v13);
  }
  *(void *)(a1 + 112) = &unk_26F852F48;
  uint64_t v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(void *)(a1 + 168) = v14;
    operator delete(v14);
  }
  *(void *)(a1 + 112) = &unk_26F852F88;
  double v15 = *(void **)(a1 + 128);
  if (v15)
  {
    *(void *)(a1 + 136) = v15;
    operator delete(v15);
  }
  *(void *)a1 = &unk_26F852F48;
  uint64_t v16 = *(void **)(a1 + 48);
  if (v16)
  {
    *(void *)(a1 + 56) = v16;
    operator delete(v16);
  }
  *(void *)a1 = &unk_26F852F88;
  uint64_t v17 = *(void **)(a1 + 16);
  if (v17)
  {
    *(void *)(a1 + 24) = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t VisibleFunctionsMap::getVisibleFunctionOffset(int8x8_t *this, const char *__s)
{
  if (!__s) {
    return -1;
  }
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = operator new(v7 + 1);
    size_t v32 = v5;
    int64_t v33 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = v4;
    p_dst = &__dst;
    if (!v4) {
      goto LABEL_10;
    }
  }
  memcpy(p_dst, __s, v5);
LABEL_10:
  *((unsigned char *)p_dst + v5) = 0;
  int v9 = SHIBYTE(v33);
  uint64_t v10 = __dst;
  if (v33 >= 0) {
    uint64_t v11 = (uint64_t *)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  if (v33 >= 0) {
    unint64_t v12 = HIBYTE(v33);
  }
  else {
    unint64_t v12 = v32;
  }
  unint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v11, v12);
  int8x8_t v14 = this[1];
  if (!*(void *)&v14) {
    goto LABEL_60;
  }
  unint64_t v15 = v13;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8(v14);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v17 = v13;
    if (v13 >= *(void *)&v14) {
      unint64_t v17 = v13 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v17 = (*(void *)&v14 - 1) & v13;
  }
  uint64_t v18 = *(uint64_t ***)(*(void *)this + 8 * v17);
  if (!v18 || (double v19 = *v18) == 0)
  {
LABEL_60:
    double v21 = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_61;
  }
  if (v16.u32[0] < 2uLL)
  {
    uint64_t v20 = *(void *)&v14 - 1;
    while (1)
    {
      uint64_t v26 = v19[1];
      if (v15 == v26)
      {
        uint64_t v27 = *((unsigned __int8 *)v19 + 39);
        if ((v27 & 0x80u) == 0) {
          uint64_t v28 = *((unsigned __int8 *)v19 + 39);
        }
        else {
          uint64_t v28 = v19[3];
        }
        if (v28 == v12)
        {
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp((const void *)v19[2], v11, v19[3])) {
              goto LABEL_56;
            }
          }
          else
          {
            if (!*((unsigned char *)v19 + 39)) {
              goto LABEL_56;
            }
            uint64_t v29 = 0;
            while (*((unsigned __int8 *)v19 + v29 + 16) == *((unsigned __int8 *)v11 + v29))
            {
              if (v27 == ++v29) {
                goto LABEL_56;
              }
            }
          }
        }
      }
      else if ((v26 & v20) != v17)
      {
        goto LABEL_60;
      }
      double v21 = 0;
      double v19 = (uint64_t *)*v19;
      if (!v19) {
        goto LABEL_57;
      }
    }
  }
  while (1)
  {
    unint64_t v22 = v19[1];
    if (v15 != v22)
    {
      if (v22 >= *(void *)&v14) {
        v22 %= *(void *)&v14;
      }
      if (v22 != v17) {
        goto LABEL_60;
      }
      goto LABEL_26;
    }
    uint64_t v23 = *((unsigned __int8 *)v19 + 39);
    uint64_t v24 = (v23 & 0x80u) == 0 ? *((unsigned __int8 *)v19 + 39) : v19[3];
    if (v24 == v12) {
      break;
    }
LABEL_26:
    double v21 = 0;
    double v19 = (uint64_t *)*v19;
    if (!v19) {
      goto LABEL_57;
    }
  }
  if ((v23 & 0x80) == 0)
  {
    if (!*((unsigned char *)v19 + 39)) {
      goto LABEL_56;
    }
    uint64_t v25 = 0;
    while (*((unsigned __int8 *)v19 + v25 + 16) == *((unsigned __int8 *)v11 + v25))
    {
      if (v23 == ++v25) {
        goto LABEL_56;
      }
    }
    goto LABEL_26;
  }
  if (memcmp((const void *)v19[2], v11, v19[3])) {
    goto LABEL_26;
  }
LABEL_56:
  double v21 = v19;
LABEL_57:
  if (v9 < 0)
  {
LABEL_61:
    operator delete(v10);
    if (!v21) {
      return -1;
    }
    return v21[5];
  }
LABEL_58:
  if (v21) {
    return v21[5];
  }
  return -1;
}

void ProgramBindingsAndDMAList::ProgramBindingsAndDMAList(ProgramBindingsAndDMAList *this, const AGCDeserializedReply *a2, int a3)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  if (!a3)
  {
    uint64_t v7 = (char *)a2 + 224;
    if (*((void *)a2 + 28))
    {
      if (!*((void *)a2 + 29)) {
        uint64_t v7 = (char *)a2 + 784;
      }
    }
    else
    {
      uint64_t v7 = (char *)a2 + 784;
    }
    int v9 = *(unsigned int **)v7;
    uint64_t v8 = *((void *)v7 + 1);
    if (v9) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      BackendMetadataFBPtr = 0;
    }
    else {
      BackendMetadataFBPtr = (int *)((char *)v9 + *v9);
    }
    uint64_t v11 = (unsigned __int16 *)((char *)BackendMetadataFBPtr - *BackendMetadataFBPtr);
    if (*v11 < 5u) {
      goto LABEL_19;
    }
    unsigned int v6 = v11[2];
    if (!v6) {
      goto LABEL_19;
    }
LABEL_18:
    unint64_t v12 = (int *)((char *)BackendMetadataFBPtr + v6 + *(int *)((char *)BackendMetadataFBPtr + v6));
    goto LABEL_20;
  }
  BackendMetadataFBPtr = (int *)AGCDeserializedReply::getBackendMetadataFBPtr(a2, "agc.deferred_attributes@md");
  size_t v5 = (unsigned __int16 *)((char *)BackendMetadataFBPtr - *BackendMetadataFBPtr);
  if (*v5 >= 5u)
  {
    unsigned int v6 = v5[2];
    if (v6) {
      goto LABEL_18;
    }
  }
LABEL_19:
  unint64_t v12 = 0;
LABEL_20:
  unint64_t v13 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 16));
  unint64_t v14 = *(unsigned int *)((char *)v13 + *v13);
  unint64_t v15 = *(unsigned char **)this;
  if (v14 <= (uint64_t)(*((void *)this + 2) - *(void *)this) >> 3) {
    goto LABEL_31;
  }
  uint8x8_t v16 = (unsigned char *)*((void *)this + 1);
  unint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = v16 - v15;
  double v19 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v20 = v19;
  if (v16 != v15)
  {
    if ((unint64_t)(v18 - 8) < 0x58)
    {
      uint64_t v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_28:
        uint64_t v27 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v20 - 1) = v27;
        v20 -= 8;
      }
      while (v16 != v15);
      goto LABEL_29;
    }
    uint64_t v20 = &v17[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v16[-(v18 & 0xFFFFFFFFFFFFFFF8)] - v17) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = v18 >> 3;
    unint64_t v22 = ((unint64_t)(v18 - 8) >> 3) + 1;
    uint64_t v23 = &v17[8 * v21 - 16];
    uint64_t v24 = (long long *)(v16 - 16);
    uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    uint64_t v20 = &v19[-8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
    v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_28;
    }
  }
LABEL_29:
  *(void *)this = v20;
  *((void *)this + 1) = v19;
  *((void *)this + 2) = &v17[8 * v14];
  if (v15) {
    operator delete(v15);
  }
LABEL_31:
  uint64_t v28 = *v12;
  uint64_t v29 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v28 + 16));
  if (*(unsigned int *)((char *)v29 + *v29)) {
    operator new();
  }
  uint64_t v30 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v28 + 20));
  unint64_t v31 = *(unsigned int *)((char *)v30 + *v30);
  size_t v32 = (unsigned char *)*((void *)this + 3);
  if (v31 > (uint64_t)(*((void *)this + 5) - (void)v32) >> 3)
  {
    int64_t v33 = (unsigned char *)*((void *)this + 4);
    uint64_t v34 = (char *)operator new(8 * v31);
    uint64_t v35 = v33 - v32;
    unint64_t v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
    unsigned int v37 = v36;
    if (v33 == v32) {
      goto LABEL_42;
    }
    if ((unint64_t)(v35 - 8) >= 0x58)
    {
      unsigned int v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v33[-(v35 & 0xFFFFFFFFFFFFFFF8)] - v34) >= 0x20)
      {
        uint64_t v38 = v35 >> 3;
        unint64_t v39 = ((unint64_t)(v35 - 8) >> 3) + 1;
        double v40 = &v34[8 * v38 - 16];
        double v41 = (long long *)(v33 - 16);
        uint64_t v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v43 = *v41;
          *((_OWORD *)v40 - 1) = *(v41 - 1);
          *(_OWORD *)double v40 = v43;
          v40 -= 32;
          v41 -= 2;
          v42 -= 4;
        }
        while (v42);
        unsigned int v37 = &v36[-8 * (v39 & 0x3FFFFFFFFFFFFFFCLL)];
        v33 -= 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          *((void *)this + 3) = v37;
          *((void *)this + 4) = v36;
          *((void *)this + 5) = &v34[8 * v31];
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_44;
        }
      }
    }
    else
    {
      unsigned int v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v44 = *((void *)v33 - 1);
      v33 -= 8;
      *((void *)v37 - 1) = v44;
      v37 -= 8;
    }
    while (v33 != v32);
    goto LABEL_42;
  }
LABEL_44:
  uint64_t v45 = *v12;
  double v46 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v45 + 20));
  if (*(unsigned int *)((char *)v46 + *v46)) {
    operator new();
  }
  double v47 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v45 + 12));
  unint64_t v48 = *(unsigned int *)((char *)v47 + *v47);
  unint64_t v49 = (unsigned char *)*((void *)this + 6);
  if (v48 > (uint64_t)(*((void *)this + 8) - (void)v49) >> 3)
  {
    __int16 v50 = (unsigned char *)*((void *)this + 7);
    unint64_t v51 = (char *)operator new(8 * v48);
    uint64_t v52 = v50 - v49;
    unsigned int v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFF8];
    int v54 = v53;
    if (v50 == v49) {
      goto LABEL_55;
    }
    if ((unint64_t)(v52 - 8) >= 0x58)
    {
      int v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v50[-(v52 & 0xFFFFFFFFFFFFFFF8)] - v51) >= 0x20)
      {
        uint64_t v55 = v52 >> 3;
        unint64_t v56 = ((unint64_t)(v52 - 8) >> 3) + 1;
        int v57 = &v51[8 * v55 - 16];
        unint64_t v58 = (long long *)(v50 - 16);
        uint64_t v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v60 = *v58;
          *((_OWORD *)v57 - 1) = *(v58 - 1);
          *(_OWORD *)int v57 = v60;
          v57 -= 32;
          v58 -= 2;
          v59 -= 4;
        }
        while (v59);
        int v54 = &v53[-8 * (v56 & 0x3FFFFFFFFFFFFFFCLL)];
        v50 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
        if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          *((void *)this + 6) = v54;
          *((void *)this + 7) = v53;
          *((void *)this + 8) = &v51[8 * v48];
          if (v49) {
            operator delete(v49);
          }
          goto LABEL_57;
        }
      }
    }
    else
    {
      int v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v61 = *((void *)v50 - 1);
      v50 -= 8;
      *((void *)v54 - 1) = v61;
      v54 -= 8;
    }
    while (v50 != v49);
    goto LABEL_55;
  }
LABEL_57:
  uint64_t v62 = *v12;
  unsigned __int16 v63 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v62 + 12));
  if (*(unsigned int *)((char *)v63 + *v63)) {
    operator new();
  }
  unint64_t v64 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v62 + 24));
  unint64_t v65 = *(unsigned int *)((char *)v64 + *v64);
  unint64_t v66 = (unsigned char *)*((void *)this + 9);
  if (v65 > (uint64_t)(*((void *)this + 11) - (void)v66) >> 3)
  {
    unint64_t v67 = (unsigned char *)*((void *)this + 10);
    int v68 = (char *)operator new(8 * v65);
    uint64_t v69 = v67 - v66;
    int v70 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
    long long v71 = v70;
    if (v67 == v66) {
      goto LABEL_68;
    }
    if ((unint64_t)(v69 - 8) >= 0x58)
    {
      long long v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v67[-(v69 & 0xFFFFFFFFFFFFFFF8)] - v68) >= 0x20)
      {
        uint64_t v72 = v69 >> 3;
        unint64_t v73 = ((unint64_t)(v69 - 8) >> 3) + 1;
        unsigned int v74 = &v68[8 * v72 - 16];
        unint64_t v75 = (long long *)(v67 - 16);
        uint64_t v76 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v77 = *v75;
          *((_OWORD *)v74 - 1) = *(v75 - 1);
          *(_OWORD *)unsigned int v74 = v77;
          v74 -= 32;
          v75 -= 2;
          v76 -= 4;
        }
        while (v76);
        long long v71 = &v70[-8 * (v73 & 0x3FFFFFFFFFFFFFFCLL)];
        v67 -= 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_68:
          *((void *)this + 9) = v71;
          *((void *)this + 10) = v70;
          *((void *)this + 11) = &v68[8 * v65];
          if (v66) {
            operator delete(v66);
          }
          goto LABEL_70;
        }
      }
    }
    else
    {
      long long v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v78 = *((void *)v67 - 1);
      v67 -= 8;
      *((void *)v71 - 1) = v78;
      v71 -= 8;
    }
    while (v67 != v66);
    goto LABEL_68;
  }
LABEL_70:
  uint64_t v79 = *v12;
  int v80 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v79 + 24));
  if (*(unsigned int *)((char *)v80 + *v80)) {
    operator new();
  }
  uint64_t v81 = *(unsigned __int16 *)((char *)v12 - v79 + 22);
  if (v81) {
    LODWORD(v81) = *(int *)((char *)v12 + v81);
  }
  *((_DWORD *)this + 24) = v81;
  int v82 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 8));
  unint64_t v83 = *(unsigned int *)((char *)v82 + *v82);
  unint64_t v84 = (unsigned char *)*((void *)this + 14);
  if (v83 > (uint64_t)(*((void *)this + 16) - (void)v84) >> 3)
  {
    unsigned int v85 = (unsigned char *)*((void *)this + 15);
    unint64_t v86 = (char *)operator new(8 * v83);
    uint64_t v87 = v85 - v84;
    int v88 = &v86[(v85 - v84) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v89 = v88;
    if (v85 == v84) {
      goto LABEL_83;
    }
    if ((unint64_t)(v87 - 8) >= 0x58)
    {
      uint64_t v89 = &v86[(v85 - v84) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v85[-(v87 & 0xFFFFFFFFFFFFFFF8)] - v86) >= 0x20)
      {
        uint64_t v90 = v87 >> 3;
        unint64_t v91 = ((unint64_t)(v87 - 8) >> 3) + 1;
        uint64_t v92 = &v86[8 * v90 - 16];
        int8x16_t v93 = (long long *)(v85 - 16);
        uint64_t v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v95 = *v93;
          *((_OWORD *)v92 - 1) = *(v93 - 1);
          *(_OWORD *)uint64_t v92 = v95;
          v92 -= 32;
          v93 -= 2;
          v94 -= 4;
        }
        while (v94);
        uint64_t v89 = &v88[-8 * (v91 & 0x3FFFFFFFFFFFFFFCLL)];
        v85 -= 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_83:
          *((void *)this + 14) = v89;
          *((void *)this + 15) = v88;
          *((void *)this + 16) = &v86[8 * v83];
          if (v84) {
            operator delete(v84);
          }
          goto LABEL_85;
        }
      }
    }
    else
    {
      uint64_t v89 = &v86[(v85 - v84) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v96 = *((void *)v85 - 1);
      v85 -= 8;
      *((void *)v89 - 1) = v96;
      v89 -= 8;
    }
    while (v85 != v84);
    goto LABEL_83;
  }
LABEL_85:
  uint64_t v97 = *v12;
  unsigned int v98 = (unsigned __int16 *)((char *)v12 - v97);
  unsigned int v99 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - v97 + 8));
  if (*(unsigned int *)((char *)v99 + *v99)) {
    operator new();
  }
  uint64_t v100 = -v97;
  if (*v98 < 0x67u)
  {
    uint64_t v101 = 0;
  }
  else
  {
    uint64_t v101 = *(unsigned __int16 *)((char *)v12 + v100 + 102);
    if (v101) {
      uint64_t v101 = *(void *)((char *)v12 + v101);
    }
  }
  *((void *)this + 13) = v101;
}

void sub_242A9F678(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(void *)(v1 + 120) = v3;
    operator delete(v3);
    size_t v4 = *(void **)(v1 + 72);
    if (!v4)
    {
LABEL_3:
      size_t v5 = *(void **)(v1 + 48);
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    size_t v4 = *(void **)(v1 + 72);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 80) = v4;
  operator delete(v4);
  size_t v5 = *(void **)(v1 + 48);
  if (!v5)
  {
LABEL_4:
    unsigned int v6 = *(void **)(v1 + 24);
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(void *)(v1 + 56) = v5;
  operator delete(v5);
  unsigned int v6 = *(void **)(v1 + 24);
  if (!v6)
  {
LABEL_5:
    uint64_t v7 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v1 + 32) = v6;
  operator delete(v6);
  uint64_t v7 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  *(void *)(v1 + 8) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(void *a1, int a2)
{
  uint64_t v2 = (unsigned int **)(a1 + 28);
  if (a1[28])
  {
    if (!a1[29]) {
      uint64_t v2 = (unsigned int **)(a1 + 98);
    }
  }
  else
  {
    uint64_t v2 = (unsigned int **)(a1 + 98);
  }
  size_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = (int *)((char *)v4 + *v4);
  }
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 5u && (uint64_t v8 = v7[2]) != 0) {
    int v9 = (int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    int v9 = 0;
  }
  BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
  uint64_t v11 = v10[8];
  uint64_t v12 = *(unsigned int *)((char *)v9 + v11);
  unint64_t v13 = (unsigned int *)((char *)v9 + v11 + v12);
  uint64_t v14 = *v13;
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 4 * v14;
    unint64_t v17 = (char *)v9 + v11 + v12;
    do
    {
      uint64_t v18 = v13[v15 / 4 + 1];
      double v19 = &v17[v15 + v18 - *(int *)((char *)&v13[v15 / 4 + 1] + v18)];
      if (*((unsigned __int16 *)v19 + 2) < 7u) {
        return 0;
      }
      uint64_t v20 = *((unsigned __int16 *)v19 + 5);
      if (!v20 || (*(_DWORD *)&v17[v15 + 4 + v18 + v20] & 0x80000000) == 0) {
        return 0;
      }
      v15 += 4;
    }
    while (v16 != v15);
  }
  uint64_t v21 = v10[10];
  uint64_t v22 = *(unsigned int *)((char *)v9 + v21);
  uint64_t v23 = (unsigned int *)((char *)v9 + v21 + v22);
  uint64_t v24 = *v23;
  if (v24)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 4 * v24;
    uint64_t v27 = (char *)v9 + v21 + v22;
    do
    {
      uint64_t v28 = v23[v25 / 4 + 1];
      uint64_t v29 = &v27[v25 + v28 - *(int *)((char *)&v23[v25 / 4 + 1] + v28)];
      if (*((unsigned __int16 *)v29 + 2) < 7u) {
        return 0;
      }
      uint64_t v30 = *((unsigned __int16 *)v29 + 5);
      if (!v30) {
        return 0;
      }
      int v31 = *(_DWORD *)&v27[v25 + 4 + v28 + v30];
      if ((v31 & 0x80000000) == 0 && (v31 & 0xFFF00000) != 0x400000) {
        return 0;
      }
      v25 += 4;
    }
    while (v26 != v25);
  }
  uint64_t v33 = v10[12];
  uint64_t v34 = *(unsigned int *)((char *)v9 + v33);
  uint64_t v35 = (unsigned int *)((char *)v9 + v33 + v34);
  uint64_t v36 = *v35;
  if (v36)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 4 * v36;
    unint64_t v39 = (char *)v9 + v33 + v34;
    do
    {
      uint64_t v40 = v35[v37 / 4 + 1];
      uint64_t v41 = v40 - *(int *)((char *)&v35[v37 / 4 + 1] + v40);
      uint64_t v42 = &v39[v37 + v41];
      unsigned int v43 = *((unsigned __int16 *)v42 + 2);
      if (v43 >= 5)
      {
        uint64_t v44 = *((unsigned __int16 *)v42 + 4);
        if (v44)
        {
          switch(v39[v37 + 4 + v40 + v44])
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
              break;
            case 14:
            case 15:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 94:
            case 95:
            case 96:
              goto LABEL_32;
            default:
              if (v39[v37 + 4 + v40 + v44] != 113) {
                goto LABEL_32;
              }
              break;
          }
          if (v43 < 7) {
            return 0;
          }
          uint64_t v45 = *(unsigned __int16 *)&v39[v37 + 10 + v41];
          if (!v45) {
            return 0;
          }
          int v46 = *(_DWORD *)&v39[v37 + 4 + v40 + v45];
          if ((v46 & 0x80000000) == 0 && (v46 & 0xFFF00000) != 0x400000) {
            return 0;
          }
        }
      }
LABEL_32:
      v37 += 4;
    }
    while (v38 != v37);
  }
  uint64_t v47 = v10[6];
  uint64_t v48 = *(unsigned int *)((char *)v9 + v47);
  unint64_t v49 = (unsigned int *)((char *)v9 + v47 + v48);
  uint64_t v50 = *v49;
  if (v50)
  {
    unint64_t v51 = 0;
    uint64_t v52 = 4 * v50;
    if (a1[58]) {
      BOOL v53 = a1[59] == 0;
    }
    else {
      BOOL v53 = 1;
    }
    uint64_t v54 = 58;
    if (v53) {
      uint64_t v54 = 128;
    }
    uint64_t v55 = a1 + 128;
    if (!v53) {
      uint64_t v55 = a1 + 58;
    }
    unint64_t v56 = (unsigned int *)a1[v54];
    if (v56) {
      BOOL v57 = v55[1] == 0;
    }
    else {
      BOOL v57 = 1;
    }
    int v58 = !v57;
    uint64_t v59 = v52 - 4;
    long long v60 = (char *)v9 + v47 + v48;
    while (1)
    {
      uint64_t v61 = v49[v51 / 4 + 1];
      uint64_t v62 = &v60[v51 + v61 - *(int *)((char *)&v49[v51 / 4 + 1] + v61)];
      if (*((unsigned __int16 *)v62 + 2) >= 7u && (uint64_t v63 = *((unsigned __int16 *)v62 + 5)) != 0)
      {
        int v64 = *(_DWORD *)&v60[v51 + 4 + v61 + v63];
        if (v58) {
          goto LABEL_63;
        }
      }
      else
      {
        int v64 = 0;
        if (v58)
        {
LABEL_63:
          unint64_t v65 = (int *)((char *)v56 + *v56);
          goto LABEL_64;
        }
      }
      unint64_t v65 = 0;
LABEL_64:
      unint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
      if (*v66 >= 5u && (uint64_t v67 = v66[2]) != 0) {
        int v68 = (int *)((char *)v65 + v67 + *(unsigned int *)((char *)v65 + v67));
      }
      else {
        int v68 = 0;
      }
      uint64_t v69 = (unsigned __int16 *)((char *)v68 - *v68);
      if (*v69 >= 0x1Fu && (uint64_t v70 = v69[15]) != 0) {
        uint64_t v71 = *(void *)((char *)v68 + v70);
      }
      else {
        uint64_t v71 = 0;
      }
      int v72 = v64 & 0xFFFFF;
      if ((v64 & 0xFFFFFu) - 49 < 2)
      {
        BOOL v73 = 1;
LABEL_82:
        BOOL v75 = v72 == 48 && v71 != 0;
        goto LABEL_88;
      }
      BOOL v73 = v72 == 53 && v71 != 0;
      if ((v64 & 0xFFFFE) != 0x2C) {
        goto LABEL_82;
      }
      BOOL v75 = 1;
LABEL_88:
      if (!a2) {
        BOOL v75 = v73;
      }
      BOOL v77 = v64 >= 0 && v75;
      if (!v77)
      {
        BOOL v5 = v59 == v51;
        v51 += 4;
        if (!v5) {
          continue;
        }
      }
      return !v77;
    }
  }
  return 1;
}

uint64_t *AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(uint64_t *a1, unsigned int **a2, const std::vector<unsigned int>::value_type *a3, char a4, char a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, int8x16_t a11, int a12, uint64_t *a13)
{
  unsigned int v16 = a3;
  uint64_t v18 = a1;
  *((_OWORD *)a1 + 3) = 0u;
  v549 = (std::vector<unsigned int> *)(a1 + 6);
  *((_OWORD *)a1 + 6) = 0u;
  v550 = (std::vector<unsigned int> *)(a1 + 12);
  a1[14] = 0;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)&long long v19 = 0xFFFFFFFFLL;
  *((void *)&v19 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 15) = v19;
  *(_OWORD *)(a1 + 27) = 0u;
  a1[17] = 0xFFFFFFFFLL;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *((_DWORD *)a1 + 78) = 0;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  v555 = a1 + 27;
  *(_OWORD *)(a1 + 37) = 0u;
  *((unsigned char *)a1 + 416) = 0;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  v552 = a1 + 53;
  a1[57] = a7;
  *((unsigned char *)a1 + 464) = a4;
  *((unsigned char *)a1 + 466) = a12 == 2;
  *((unsigned char *)a1 + 467) = 0;
  *((_DWORD *)a1 + 117) = 0;
  {
    AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ProgramBindingRemap(AGCDeserializedReply const&,AGX::ProgramType,BOOL,BOOL,AGX::HAL200::IndirectArgumentLayout const* const*,unsigned long long,BOOL,BOOL,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::RemapStyle,std::vector<DriverEIOffset> const*)::stress_indirect_gather_ev = 0;
  }
  BOOL v21 = v16 < 9 && (v16 & 0x1FF) == 3;
  BOOL v565 = v21;
  *((unsigned char *)v18 + 465) = a5;
  int v563 = v16;
  if (!a8)
  {
    if (a2[28])
    {
      if (a2[29]) {
        uint64_t v26 = a2 + 28;
      }
      else {
        uint64_t v26 = a2 + 98;
      }
    }
    else
    {
      uint64_t v26 = a2 + 98;
    }
    uint64_t v22 = 0;
    if (*v26 && v26[1]) {
      uint64_t v22 = (int *)((char *)*v26 + **v26);
    }
    uint64_t v27 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v27 < 5u) {
      goto LABEL_26;
    }
    unsigned int v25 = v27[2];
    if (!v25) {
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v28 = (int *)((char *)v22 + v25 + *(int *)((char *)v22 + v25));
    goto LABEL_27;
  }
  uint64_t v22 = 0;
  uint64_t v23 = a2[144];
  if (v23 && a2[145]) {
    uint64_t v22 = (int *)((char *)v23 + *v23);
  }
  uint64_t v24 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v24 >= 5u)
  {
    unsigned int v25 = v24[2];
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_26:
  uint64_t v28 = 0;
LABEL_27:
  uint64_t v29 = a2 + 58;
  uint64_t v30 = a2[58];
  if (v30)
  {
    int v31 = a2 + 128;
    if (a2[59]) {
      int v31 = a2 + 58;
    }
  }
  else
  {
    int v31 = a2 + 128;
  }
  size_t v32 = 0;
  if (*v31 && v31[1]) {
    size_t v32 = (int *)((char *)*v31 + **v31);
  }
  uint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
  if (*v33 >= 5u && (uint64_t v34 = v33[2]) != 0) {
    uint64_t v35 = (int *)((char *)v32 + v34 + *(unsigned int *)((char *)v32 + v34));
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v36 >= 0x17u && (uint64_t v37 = v36[11]) != 0)
  {
    uint64_t v38 = *(void *)((char *)v35 + v37);
    if (!v30)
    {
LABEL_42:
      unint64_t v39 = a2 + 128;
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v38 = 0;
    if (!v30) {
      goto LABEL_42;
    }
  }
  unint64_t v39 = a2 + 128;
  if (a2[59]) {
    unint64_t v39 = a2 + 58;
  }
LABEL_46:
  uint64_t v40 = 0;
  if (*v39 && v39[1]) {
    uint64_t v40 = (int *)((char *)*v39 + **v39);
  }
  uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
  if (*v41 >= 5u && (uint64_t v42 = v41[2]) != 0) {
    unsigned int v43 = (int *)((char *)v40 + v42 + *(unsigned int *)((char *)v40 + v42));
  }
  else {
    unsigned int v43 = 0;
  }
  uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 0x19u && (uint64_t v45 = v44[12]) != 0)
  {
    uint64_t v46 = *(void *)((char *)v43 + v45);
    if (!v30)
    {
LABEL_56:
      uint64_t v47 = a2 + 128;
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v46 = 0;
    if (!v30) {
      goto LABEL_56;
    }
  }
  uint64_t v47 = a2 + 128;
  if (a2[59]) {
    uint64_t v47 = a2 + 58;
  }
LABEL_60:
  uint64_t v48 = 0;
  if (*v47 && v47[1]) {
    uint64_t v48 = (int *)((char *)*v47 + **v47);
  }
  unint64_t v49 = (unsigned __int16 *)((char *)v48 - *v48);
  if (*v49 >= 5u && (uint64_t v50 = v49[2]) != 0) {
    unint64_t v51 = (int *)((char *)v48 + v50 + *(unsigned int *)((char *)v48 + v50));
  }
  else {
    unint64_t v51 = 0;
  }
  uint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
  if (*v52 >= 0x1Bu && (uint64_t v53 = v52[13]) != 0)
  {
    uint64_t v54 = *(void *)((char *)v51 + v53);
    if (!v30)
    {
LABEL_70:
      uint64_t v55 = a2 + 128;
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v54 = 0;
    if (!v30) {
      goto LABEL_70;
    }
  }
  uint64_t v55 = a2 + 128;
  if (a2[59]) {
    uint64_t v55 = a2 + 58;
  }
LABEL_74:
  unint64_t v56 = 0;
  if (*v55 && v55[1]) {
    unint64_t v56 = (int *)((char *)*v55 + **v55);
  }
  BOOL v57 = (unsigned __int16 *)((char *)v56 - *v56);
  if (*v57 >= 5u && (uint64_t v58 = v57[2]) != 0) {
    uint64_t v59 = (int *)((char *)v56 + v58 + *(unsigned int *)((char *)v56 + v58));
  }
  else {
    uint64_t v59 = 0;
  }
  long long v60 = (unsigned __int16 *)((char *)v59 - *v59);
  if (*v60 >= 0x1Du && (uint64_t v61 = v60[14]) != 0) {
    uint64_t v62 = *(void *)((char *)v59 + v61);
  }
  else {
    uint64_t v62 = 0;
  }
  v18[22] = v54;
  v18[23] = v62;
  int8x8_t v63 = (int8x8_t)(v54 | v38);
  int8x8_t v64 = (int8x8_t)(v62 | v46);
  v18[20] = (uint64_t)v63;
  v18[21] = (uint64_t)v64;
  uint8x8_t v65 = (uint8x8_t)vcnt_s8(v63);
  v65.i16[0] = vaddlv_u8(v65);
  v63.i32[0] = v65.i32[0];
  uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64);
  v66.i16[0] = vaddlv_u8(v66);
  *((_DWORD *)v18 + 36) = 4 * (v66.i32[0] + v63.i32[0]);
  *((unsigned char *)v18 + 208) = (v38 | v46) != 0;
  if (v565) {
    int v67 = 44;
  }
  else {
    int v67 = 49;
  }
  uint64_t v68 = *(unsigned __int16 *)((char *)v28 - *v28 + 12);
  uint64_t v69 = *(unsigned int *)((char *)v28 + v68);
  uint64_t v70 = (unsigned int *)((char *)v28 + v68 + v69);
  uint64_t v71 = *v70;
  if (v71)
  {
    unint64_t v72 = 0;
    uint64_t v73 = 4 * v71;
    unsigned int v74 = (char *)v28 + v68 + v69;
    while (1)
    {
      uint64_t v75 = v70[v72 / 4 + 1];
      uint64_t v76 = &v74[v72 + v75 - *(int *)((char *)&v70[v72 / 4 + 1] + v75)];
      if (*((unsigned __int16 *)v76 + 2) >= 7u)
      {
        uint64_t v77 = *((unsigned __int16 *)v76 + 5);
        if (v77)
        {
          int v78 = *(_DWORD *)&v74[v72 + 4 + v75 + v77];
          if ((v78 & 0x80000000) == 0 && v78 == v67) {
            break;
          }
        }
      }
      v72 += 4;
      if (v73 == v72) {
        goto LABEL_96;
      }
    }
    *((unsigned char *)v18 + 208) = 1;
LABEL_96:
    unint64_t v79 = 0;
    if (v565) {
      int v80 = 63;
    }
    else {
      int v80 = 61;
    }
    uint64_t v81 = (char *)v28 + v68 + v69;
    while (1)
    {
      uint64_t v82 = v70[v79 / 4 + 1];
      unint64_t v83 = &v81[v79 + v82 - *(int *)((char *)&v70[v79 / 4 + 1] + v82)];
      if (*((unsigned __int16 *)v83 + 2) >= 7u)
      {
        uint64_t v84 = *((unsigned __int16 *)v83 + 5);
        if (v84)
        {
          int v85 = *(_DWORD *)&v81[v79 + 4 + v82 + v84];
          if ((v85 & 0x80000000) == 0 && v85 == v80) {
            break;
          }
        }
      }
      v79 += 4;
      if (v73 == v79) {
        goto LABEL_106;
      }
    }
    *((unsigned char *)v18 + 467) = 1;
  }
LABEL_106:
  if (*v29)
  {
    if (a2[59]) {
      unint64_t v86 = a2 + 58;
    }
    else {
      unint64_t v86 = a2 + 128;
    }
  }
  else
  {
    unint64_t v86 = a2 + 128;
  }
  int v88 = *v86;
  uint64_t v87 = v86[1];
  if (v88) {
    BOOL v89 = v87 == 0;
  }
  else {
    BOOL v89 = 1;
  }
  if (v89) {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v90 = (int *)((char *)v88 + *v88);
  }
  unint64_t v91 = (unsigned __int16 *)((char *)v90 - *v90);
  if (*v91 >= 5u && (uint64_t v92 = v91[2]) != 0) {
    int8x16_t v93 = (int *)((char *)v90 + v92 + *(unsigned int *)((char *)v90 + v92));
  }
  else {
    int8x16_t v93 = 0;
  }
  uint64_t v94 = (unsigned __int16 *)((char *)v93 - *v93);
  if (*v94 >= 0x1Fu && (uint64_t v95 = v94[15]) != 0) {
    int8x8_t v96 = *(int8x8_t *)((char *)v93 + v95);
  }
  else {
    int8x8_t v96 = 0;
  }
  v18[24] = (uint64_t)v96;
  v18[25] = 0;
  uint8x8_t v97 = (uint8x8_t)vcnt_s8(v96);
  v97.i16[0] = vaddlv_u8(v97);
  *((_DWORD *)v18 + 37) = 4 * v97.i32[0];
  if (*v29)
  {
    if (!a2[59]) {
      uint64_t v29 = a2 + 128;
    }
  }
  else
  {
    uint64_t v29 = a2 + 128;
  }
  unsigned int v99 = *v29;
  unsigned int v98 = v29[1];
  if (v99) {
    BOOL v100 = v98 == 0;
  }
  else {
    BOOL v100 = 1;
  }
  if (v100) {
    uint64_t v101 = 0;
  }
  else {
    uint64_t v101 = (int *)((char *)v99 + *v99);
  }
  int v102 = (unsigned __int16 *)((char *)v101 - *v101);
  if (*v102 >= 5u && (uint64_t v103 = v102[2]) != 0) {
    int v104 = (int *)((char *)v101 + v103 + *(unsigned int *)((char *)v101 + v103));
  }
  else {
    int v104 = 0;
  }
  unsigned int v105 = (unsigned __int16 *)((char *)v104 - *v104);
  if (*v105 >= 0xBu && (uint64_t v106 = v105[5]) != 0) {
    int v107 = 4 * *(int *)((char *)v104 + v106 + *(unsigned int *)((char *)v104 + v106));
  }
  else {
    int v107 = 0;
  }
  v556 = v18 + 30;
  *((_DWORD *)v18 + 38) = v107;
  uint64_t v108 = *v28;
  unsigned int v109 = *(unsigned __int16 *)((char *)v28 - v108);
  if (v109 < 0xF)
  {
    LODWORD(v110) = 0;
  }
  else
  {
    uint64_t v110 = *(unsigned __int16 *)((char *)v28 - v108 + 14);
    if (*(_WORD *)((char *)v28 - v108 + 14)) {
      LODWORD(v110) = *(int *)((char *)v28 + v110);
    }
  }
  v554 = v18 + 33;
  v553 = v18 + 36;
  uint64_t v111 = -v108;
  v559 = (std::vector<unsigned int> *)(v18 + 9);
  v547 = (void **)(v18 + 40);
  v548 = (std::vector<unsigned int> *)(v18 + 3);
  unint64_t v112 = (v110 + 7) >> 3;
  uint64_t v113 = v18[3];
  unint64_t v114 = (v18[4] - v113) >> 2;
  if (v112 <= v114)
  {
    if (v112 < v114) {
      v18[4] = v113 + 4 * v112;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)v18 + 1, v112 - v114, a3);
    uint64_t v115 = *v28;
    uint64_t v111 = -v115;
    unsigned int v109 = *(unsigned __int16 *)((char *)v28 - v115);
  }
  if (v109 < 0xF)
  {
    LODWORD(v116) = 0;
  }
  else
  {
    uint64_t v116 = *(unsigned __int16 *)((char *)v28 + v111 + 14);
    if (*(_WORD *)((char *)v28 + v111 + 14)) {
      LODWORD(v116) = *(int *)((char *)v28 + v116);
    }
  }
  unint64_t v117 = (v116 + 7) >> 3;
  unint64_t v118 = v18[1];
  unint64_t v119 = v117 - v118;
  v558 = v18;
  if (v117 <= v118)
  {
    v18[1] = v117;
    goto LABEL_186;
  }
  uint64_t v120 = v18[2];
  if (v120 << 6 >= v119 && v118 <= (v120 << 6) - v119)
  {
    unint64_t v121 = (void *)(*v18 + 8 * (v118 >> 6));
    int v122 = v118 & 0x3F;
    v18[1] = v117;
    goto LABEL_176;
  }
  long long v567 = 0uLL;
  if ((unint64_t)(v120 << 6) > 0x3FFFFFFFFFFFFFFELL)
  {
    unint64_t v123 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v123 = v120 << 7;
    if (v123 <= ((v117 + 63) & 0x3FFFFFC0u)) {
      unint64_t v123 = (v117 + 63) & 0x3FFFFFC0;
    }
    if (!v123)
    {
      uint64_t v125 = 0;
      goto LABEL_169;
    }
    if ((v123 & 0x8000000000000000) != 0) {
      abort();
    }
  }
  unint64_t v124 = ((v123 - 1) >> 6) + 1;
  uint64_t v125 = operator new(8 * v124);
  *uint64_t v125 = 0;
  *((void *)&v567 + 1) = v124;
LABEL_169:
  *(void *)&long long v567 = v117;
  uint64_t v126 = (void *)*v558;
  unint64_t v121 = v125;
  if ((uint64_t)v118 < 1) {
    goto LABEL_174;
  }
  uint64_t v127 = v118 >> 6;
  if (v118 >= 0x40) {
    memmove(v125, (const void *)*v558, 8 * (v118 >> 6));
  }
  unint64_t v121 = &v125[v118 >> 6];
  unint64_t v128 = v118 & 0x3F;
  if (v128)
  {
    v125[v127] = v125[v127] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v128) | *(void *)((unsigned char *)v126 + v127 * 8) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v128);
    uint64_t *v558 = (uint64_t)v125;
    uint64_t v18 = v558;
    *(_OWORD *)(v558 + 1) = v567;
  }
  else
  {
LABEL_174:
    LODWORD(v128) = 0;
    int v122 = 0;
    uint64_t *v558 = (uint64_t)v125;
    uint64_t v18 = v558;
    *(_OWORD *)(v558 + 1) = v567;
    if (!v126) {
      goto LABEL_176;
    }
  }
  operator delete(v126);
  int v122 = v128;
LABEL_176:
  if (v119)
  {
    if (v122)
    {
      if ((64 - v122) >= v119) {
        unint64_t v129 = v119;
      }
      else {
        unint64_t v129 = (64 - v122);
      }
      *v121++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v122 - v129)) & (-1 << v122));
      v119 -= v129;
    }
    if (v119 >= 0x40) {
      bzero(v121, 8 * (v119 >> 6));
    }
    if ((v119 & 0x3F) != 0) {
      v121[v119 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v119 & 0x3F));
    }
  }
LABEL_186:
  uint64_t v130 = *v28;
  unsigned int v131 = *(unsigned __int16 *)((char *)v28 - v130);
  if (v131 >= 0x13 && *(_WORD *)((char *)v28 - v130 + 18)) {
    int v132 = *(int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v130 + 18));
  }
  else {
    int v132 = 0;
  }
  uint64_t v133 = -v130;
  unint64_t v134 = (v132 + 7) >> 3;
  uint64_t v135 = v18[6];
  unint64_t v136 = (v18[7] - v135) >> 2;
  if (v134 <= v136)
  {
    if (v134 < v136) {
      v18[7] = v135 + 4 * v134;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v549, v134 - v136, a3);
    uint64_t v130 = *v28;
    uint64_t v133 = -v130;
    unsigned int v131 = *(unsigned __int16 *)((char *)v28 - v130);
  }
  if (v131 < 0xB)
  {
    LODWORD(v137) = 0;
  }
  else
  {
    uint64_t v137 = *(unsigned __int16 *)((char *)v28 + v133 + 10);
    if (*(_WORD *)((char *)v28 + v133 + 10)) {
      LODWORD(v137) = *(int *)((char *)v28 + v137);
    }
  }
  unint64_t v138 = (v137 + 7) >> 3;
  uint64_t v139 = v18[9];
  unint64_t v140 = (v18[10] - v139) >> 2;
  if (v138 <= v140)
  {
    if (v138 < v140) {
      v18[10] = v139 + 4 * v138;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v559, v138 - v140, a3);
    LODWORD(v130) = *v28;
  }
  unsigned int v141 = (unsigned __int16 *)((char *)v28 - (int)v130);
  unsigned int v142 = *v141;
  if (a12 != 1)
  {
    if (v142 < 0x17)
    {
      LODWORD(v144) = 0;
    }
    else
    {
      uint64_t v144 = v141[11];
      if (v144) {
        LODWORD(v144) = *(int *)((char *)v28 + v144);
      }
    }
    unint64_t v145 = (v144 + 3) >> 2;
    uint64_t v146 = v18[12];
    unint64_t v149 = (v18[13] - v146) >> 2;
    BOOL v148 = v145 >= v149;
    if (v145 > v149)
    {
      std::vector<unsigned int>::__append(v550, v145 - v149);
      goto LABEL_217;
    }
LABEL_215:
    if (!v148) {
      v18[13] = v146 + 4 * v145;
    }
    goto LABEL_217;
  }
  if (v142 < 0x17)
  {
    LODWORD(v143) = 0;
  }
  else
  {
    uint64_t v143 = v141[11];
    if (v143) {
      LODWORD(v143) = *(int *)((char *)v28 + v143);
    }
  }
  unint64_t v145 = (v143 + 3) >> 2;
  uint64_t v146 = v18[12];
  unint64_t v147 = (v18[13] - v146) >> 2;
  BOOL v148 = v145 >= v147;
  if (v145 <= v147) {
    goto LABEL_215;
  }
  std::vector<unsigned int>::__append(v550, v145 - v147, a3);
LABEL_217:
  uint64_t v150 = *v28;
  uint64_t v151 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v150 + 16));
  unint64_t v152 = (unsigned int *)((char *)v151 + *v151);
  unsigned int v155 = *v152;
  uint64_t v153 = v152 + 1;
  uint64_t v154 = v155;
  if (v155)
  {
    uint64_t v156 = &v153[v154];
    uint64_t v157 = v18[3];
    uint64_t v158 = *v18;
    while (1)
    {
      int v160 = (int *)((char *)v153 + *v153);
      uint64_t v161 = *v160;
      int32x2_t v162 = (char *)v160 - v161;
      unsigned int v163 = *(unsigned __int16 *)((char *)v160 - v161);
      if (v163 < 7)
      {
        unsigned int v166 = 0;
        goto LABEL_233;
      }
      if (*((_WORD *)v162 + 3))
      {
        int v164 = *(int *)((char *)v160 + *((unsigned __int16 *)v162 + 3));
        if (v163 < 9) {
          goto LABEL_228;
        }
      }
      else
      {
        int v164 = 0;
        if (v163 < 9)
        {
LABEL_228:
          LODWORD(v165) = 0;
          goto LABEL_229;
        }
      }
      uint64_t v165 = *((unsigned __int16 *)v162 + 4);
      if (v165) {
        LODWORD(v165) = *(int *)((char *)v160 + v165);
      }
LABEL_229:
      unsigned int v166 = 4 * v165;
      if (v164 >= 0) {
        int v167 = -1;
      }
      else {
        int v167 = (v164 >> 20) & 0x7FF;
      }
      if (v164 < 0)
      {
        uint64_t v175 = *(void *)(a6 + 8 * ((v164 >> 20) & 0x7FF));
        uint64_t v176 = v175 + 8;
        if (*(unsigned char *)v175)
        {
          int v177 = 16;
LABEL_244:
          int v178 = v164 & 0xFFFFF;
          int v179 = v177 - 1;
          uint64_t v180 = v179 & (37 * (v164 & 0xFFFFFu));
          int v181 = *(_DWORD *)(v176 + 16 * v180);
          if (v181 != v178)
          {
            int v200 = 1;
            while (v181 != -1)
            {
              int v201 = v180 + v200++;
              uint64_t v180 = v201 & v179;
              int v181 = *(_DWORD *)(v176 + 16 * v180);
              if (v181 == v178) {
                goto LABEL_245;
              }
            }
            goto LABEL_272;
          }
LABEL_245:
          unsigned int v182 = *(_DWORD *)(v176 + 16 * v180 + 8);
        }
        else
        {
          int v177 = *(_DWORD *)(v175 + 16);
          if (v177)
          {
            uint64_t v176 = *(void *)(v175 + 8);
            goto LABEL_244;
          }
LABEL_272:
          unsigned int v182 = 0;
        }
        uint64_t v171 = -v161;
        unsigned int v173 = v182 >> 3;
        goto LABEL_238;
      }
LABEL_233:
      unsigned int v168 = *((_DWORD *)v18 + 30);
      unsigned int v169 = *((_DWORD *)v18 + 31);
      if (v168 >= v166) {
        unsigned int v168 = v166;
      }
      if (v169 <= v166 + 4) {
        unsigned int v169 = v166 + 4;
      }
      *((_DWORD *)v18 + 30) = v168;
      *((_DWORD *)v18 + 31) = v169;
      uint64_t v170 = *v160;
      uint64_t v171 = -v170;
      unsigned int v172 = *(unsigned __int16 *)((char *)v160 - v170);
      int v167 = -1;
      unsigned int v173 = v166;
      if (v172 < 5)
      {
LABEL_247:
        int v174 = 0;
        goto LABEL_248;
      }
LABEL_238:
      if (!*(_WORD *)((char *)v160 + v171 + 4)) {
        goto LABEL_247;
      }
      int v174 = *((char *)v160 + *(unsigned __int16 *)((char *)v160 + v171 + 4));
LABEL_248:
      int v183 = v167 << 20;
      uint64_t v184 = v166;
      unsigned int v185 = v173 & 0xFFFFF;
      if (v167 != -1) {
        unsigned int v185 = (v167 << 20) | v173 & 0xFFFFF | 0x80000000;
      }
      *(_DWORD *)(v157 + 4 * v166) = v185;
      unint64_t v186 = (unint64_t)v166 >> 6;
      uint64_t v187 = 1 << v184;
      if (v174 == 6) {
        uint64_t v188 = *(void *)(v158 + 8 * v186) | v187;
      }
      else {
        uint64_t v188 = *(void *)(v158 + 8 * v186) & ~v187;
      }
      *(void *)(v158 + 8 * v186) = v188;
      int v189 = (v173 + 1) & 0xFFFFF;
      if (v167 != -1) {
        v189 |= v183 | 0x80000000;
      }
      *(_DWORD *)(v157 + 4 * (v184 + 1)) = v189;
      unint64_t v190 = (unint64_t)(v184 + 1) >> 6;
      uint64_t v191 = 1 << (v184 + 1);
      if (v174 == 6) {
        uint64_t v192 = *(void *)(v158 + 8 * v190) | v191;
      }
      else {
        uint64_t v192 = *(void *)(v158 + 8 * v190) & ~v191;
      }
      *(void *)(v158 + 8 * v190) = v192;
      int v193 = (v173 + 2) & 0xFFFFF;
      if (v167 != -1) {
        v193 |= v183 | 0x80000000;
      }
      *(_DWORD *)(v157 + 4 * (v184 + 2)) = v193;
      unint64_t v194 = (unint64_t)(v184 + 2) >> 6;
      uint64_t v195 = 1 << (v184 + 2);
      if (v174 == 6) {
        uint64_t v196 = *(void *)(v158 + 8 * v194) | v195;
      }
      else {
        uint64_t v196 = *(void *)(v158 + 8 * v194) & ~v195;
      }
      *(void *)(v158 + 8 * v194) = v196;
      if (v167 == -1) {
        unsigned int v197 = (v173 + 3) & 0xFFFFF;
      }
      else {
        unsigned int v197 = (v173 + 3) & 0xFFFFF | v183 | 0x80000000;
      }
      *(_DWORD *)(v157 + 4 * (v184 + 3)) = v197;
      unint64_t v198 = (unint64_t)(v184 + 3) >> 6;
      uint64_t v199 = 1 << (v184 + 3);
      if (v174 == 6) {
        uint64_t v159 = *(void *)(v158 + 8 * v198) | v199;
      }
      else {
        uint64_t v159 = *(void *)(v158 + 8 * v198) & ~v199;
      }
      *(void *)(v158 + 8 * v198) = v159;
      if (++v153 == v156)
      {
        uint64_t v202 = -(uint64_t)*v28;
        goto LABEL_275;
      }
    }
  }
  uint64_t v202 = -v150;
LABEL_275:
  uint64_t v203 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v202 + 20));
  unint64_t v204 = (unsigned int *)((char *)v203 + *v203);
  unsigned int v207 = *v204;
  uint64_t v205 = v204 + 1;
  uint64_t v206 = v207;
  if (!v207) {
    goto LABEL_316;
  }
  BOOL v208 = &v205[v206];
  std::vector<unsigned int>::pointer begin = v549->__begin_;
  do
  {
    char v211 = (int *)((char *)v205 + *v205);
    unsigned int v212 = (unsigned __int16 *)((char *)v211 - *v211);
    unsigned int v213 = *v212;
    if (v213 < 7)
    {
      LODWORD(v215) = 0;
      goto LABEL_285;
    }
    if (v212[3])
    {
      unsigned int v214 = *(int *)((char *)v211 + v212[3]);
      if (v213 < 9) {
        goto LABEL_297;
      }
    }
    else
    {
      unsigned int v214 = 0;
      if (v213 < 9)
      {
LABEL_297:
        LODWORD(v215) = 0;
        goto LABEL_298;
      }
    }
    uint64_t v215 = v212[4];
    if (v212[4]) {
      LODWORD(v215) = *(int *)((char *)v211 + v215);
    }
LABEL_298:
    if ((v214 & 0xFFF00000) == 0x400000)
    {
      int v210 = 0x400000;
      goto LABEL_278;
    }
    if ((v214 & 0x80000000) == 0)
    {
      if (v213 >= 9)
      {
        uint64_t v216 = v212[4];
        if (v216) {
          LODWORD(v216) = *(int *)((char *)v211 + v216);
        }
        goto LABEL_286;
      }
LABEL_285:
      LODWORD(v216) = 0;
LABEL_286:
      unsigned int v217 = 0;
      if (*((unsigned char *)v18 + 465)) {
        int v218 = 3;
      }
      else {
        int v218 = 1;
      }
      unsigned int v219 = v218 * v216;
      unsigned int v220 = *((_DWORD *)v18 + 32);
      if (v220 >= v219) {
        unsigned int v220 = v219;
      }
      unsigned int v221 = v219 + 2 * *((unsigned __int8 *)v18 + 465);
      if (*((_DWORD *)v18 + 33) <= v221 + 1) {
        unsigned int v222 = v221 + 1;
      }
      else {
        unsigned int v222 = *((_DWORD *)v18 + 33);
      }
      *((_DWORD *)v18 + 32) = v220;
      *((_DWORD *)v18 + 33) = v222;
      unsigned int v223 = v215 & 0xFFFFF;
      goto LABEL_295;
    }
    unsigned int v224 = (v214 >> 20) & 0x7FF;
    uint64_t v225 = *(void *)(a6 + 8 * v224);
    uint64_t v226 = v225 + 8;
    if (*(unsigned char *)v225)
    {
      int v227 = 16;
    }
    else
    {
      int v227 = *(_DWORD *)(v225 + 16);
      if (!v227) {
        goto LABEL_314;
      }
      uint64_t v226 = *(void *)(v225 + 8);
    }
    int v228 = v214 & 0xFFFFF;
    int v229 = v227 - 1;
    uint64_t v230 = v229 & (37 * (v214 & 0xFFFFF));
    int v231 = *(_DWORD *)(v226 + 16 * v230);
    if (v231 != v228)
    {
      int v233 = 1;
      while (v231 != -1)
      {
        int v234 = v230 + v233++;
        uint64_t v230 = v234 & v229;
        int v231 = *(_DWORD *)(v226 + 16 * v230);
        if (v231 == v228) {
          goto LABEL_308;
        }
      }
LABEL_314:
      unsigned int v232 = 0;
      goto LABEL_309;
    }
LABEL_308:
    unsigned int v232 = *(_DWORD *)(v226 + 16 * v230 + 8);
LABEL_309:
    unsigned int v217 = v224 << 20;
    unsigned int v223 = (v232 >> 3) & 0xFFFFF | 0x80000000;
LABEL_295:
    int v210 = v217 | v223;
LABEL_278:
    begin[v215] = v210;
    ++v205;
  }
  while (v205 != v208);
  uint64_t v202 = -(uint64_t)*v28;
LABEL_316:
  int v235 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v202 + 12));
  uint64_t v236 = *v235;
  int8x16_t v238 = (unsigned int *)((char *)v235 + v236 + 4);
  uint64_t v237 = *(unsigned int *)((char *)v235 + v236);
  if (v237)
  {
    int8x8_t v239 = &v238[v237];
    if (v565) {
      int v240 = 48;
    }
    else {
      int v240 = 53;
    }
    while (1)
    {
      unsigned int v242 = (int *)((char *)v238 + *v238);
      int64_t v243 = (unsigned __int16 *)((char *)v242 - *v242);
      unsigned int v244 = *v243;
      if (v244 < 7) {
        break;
      }
      uint64_t v245 = v243[3];
      if (v243[3]) {
        LODWORD(v245) = *(int *)((char *)v242 + v245);
      }
      if (v244 < 9) {
        goto LABEL_329;
      }
      uint64_t v246 = v243[4];
      if (v246) {
        LODWORD(v246) = *(int *)((char *)v242 + v246);
      }
LABEL_330:
      unsigned int v247 = (v246 >> 1) & 0x1FFFFFFF;
      unsigned int v248 = (v245 >> 20) & 0x7FF;
      if ((int)v245 >= 0) {
        unsigned int v249 = -1;
      }
      else {
        unsigned int v249 = (v245 >> 20) & 0x7FF;
      }
      LODWORD(v567) = 0;
      if ((v245 & 0x80000000) == 0)
      {
        if (!a12)
        {
LABEL_372:
          unsigned int v248 = -1;
          LODWORD(v252) = v247;
          goto LABEL_373;
        }
        if (a12 != 2)
        {
          if (a12 == 1)
          {
            uint64_t v250 = (unsigned __int16 *)((char *)v242 - *v242);
            if (*v250 >= 7u && (uint64_t v251 = v250[3]) != 0)
            {
              uint64_t v252 = *(unsigned int *)((char *)v242 + v251);
              if (v252 == v240)
              {
                unsigned int v248 = -1;
                LODWORD(v252) = v240;
              }
              else
              {
                if (v252 >= 0x23)
                {
                  v569[0] = 0;
                  if (v565)
                  {
                    int v270 = 0;
                    int v271 = 0;
                    unsigned int v272 = 2;
                    int v273 = 2;
                    switch((int)v252)
                    {
                      case '#':
                        goto LABEL_400;
                      case '$':
                        int v270 = 0;
                        int v271 = 1;
                        goto LABEL_400;
                      case '%':
                        break;
                      case '(':
                        int v270 = 0;
                        int v271 = 2;
                        goto LABEL_400;
                      case '8':
                        int v271 = 0;
                        int v270 = 1;
                        goto LABEL_400;
                      case ':':
                        int v270 = 1;
                        int v271 = 1;
                        goto LABEL_400;
                      case '>':
                        int v271 = 2;
                        int v270 = 1;
                        goto LABEL_400;
                      case '?':
                        int v271 = 0;
                        int v270 = 3;
                        goto LABEL_400;
                      case '@':
                        int v270 = 0;
                        int v271 = 3;
LABEL_400:
                        unsigned int v272 = v270;
                        int v273 = v271;
                        break;
                      default:
                        unsigned int v272 = 2;
                        int v273 = v252 - 35;
                        break;
                    }
                    LODWORD(v567) = v273;
                  }
                  else
                  {
                    AGX::ArgumentTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::remapBindPoint<true>(v252, &v567, v569, v563);
                    unsigned int v272 = v569[0];
                    if (v569[0] > 3u)
                    {
                      unsigned int v248 = -1;
                      LODWORD(v252) = v567;
                      goto LABEL_373;
                    }
                  }
                  unsigned int v248 = dword_242EA88D0[v272];
                  LODWORD(v252) = v567;
                  goto LABEL_373;
                }
                unsigned int v248 = -3;
              }
            }
            else
            {
              LODWORD(v252) = 0;
              unsigned int v248 = -3;
            }
          }
          else
          {
            LODWORD(v252) = 0;
            unsigned int v248 = -1;
          }
LABEL_373:
          unsigned int v274 = *((_DWORD *)v18 + 34);
          unsigned int v275 = *((_DWORD *)v18 + 35);
          if (v274 >= v247) {
            unsigned int v274 = v247;
          }
          if (v275 <= v247 + 1) {
            unsigned int v275 = v247 + 1;
          }
          *((_DWORD *)v18 + 34) = v274;
          *((_DWORD *)v18 + 35) = v275;
          goto LABEL_378;
        }
        unsigned int v258 = 0;
        *(_DWORD *)v569 = 0;
        v259 = (unsigned __int16 *)((char *)v242 - *v242);
        if (*v259 >= 7u)
        {
          uint64_t v260 = v259[3];
          if (v260) {
            unsigned int v258 = *(int *)((char *)v242 + v260);
          }
          else {
            unsigned int v258 = 0;
          }
        }
        int v266 = AGX::IntersectionArgumentTable<AGX::HAL200::Classes>::remapIntersectionBindPointToScs(v258, v569);
        int v267 = v266;
        unint64_t v268 = (unsigned __int16 *)((char *)v242 - *v242);
        if (*v268 >= 7u && (uint64_t v269 = v268[3]) != 0)
        {
          LODWORD(v252) = *(int *)((char *)v242 + v269);
          if ((v252 & 0xFFF00000) == 0x900000)
          {
            LODWORD(v252) = v252 & 0xFFFFF;
            unsigned int v248 = -10;
            goto LABEL_373;
          }
          if (!v267)
          {
            if (v252 > 0x22) {
              goto LABEL_372;
            }
LABEL_365:
            LODWORD(v567) = v252;
            unsigned int v248 = 44;
            goto LABEL_373;
          }
        }
        else if ((v266 & 1) == 0)
        {
          LODWORD(v252) = 0;
          goto LABEL_365;
        }
        LODWORD(v252) = *(_DWORD *)v569;
        LODWORD(v567) = *(_DWORD *)v569;
        unsigned int v248 = -10;
        goto LABEL_373;
      }
      unint64_t v253 = (unsigned __int16 *)((char *)v242 - *v242);
      if (*v253 >= 5u)
      {
        uint64_t v254 = v253[2];
        if (v254)
        {
          if (*((unsigned char *)v242 + v254))
          {
            uint64_t v255 = *(void *)(a6 + 8 * v248);
            uint64_t v256 = v255 + 8;
            if (*(unsigned char *)v255)
            {
              int v257 = 16;
LABEL_354:
              int v261 = v245 & 0xFFFFF;
              int v262 = v257 - 1;
              uint64_t v263 = v262 & (37 * (v245 & 0xFFFFF));
              int v264 = *(_DWORD *)(v256 + 16 * v263);
              if (v264 != v261)
              {
                int v278 = 1;
                while (v264 != -1)
                {
                  int v279 = v263 + v278++;
                  uint64_t v263 = v279 & v262;
                  int v264 = *(_DWORD *)(v256 + 16 * v263);
                  if (v264 == v261) {
                    goto LABEL_355;
                  }
                }
                goto LABEL_408;
              }
LABEL_355:
              unsigned int v265 = *(_DWORD *)(v256 + 16 * v263 + 8);
            }
            else
            {
              int v257 = *(_DWORD *)(v255 + 16);
              if (v257)
              {
                uint64_t v256 = *(void *)(v255 + 8);
                goto LABEL_354;
              }
LABEL_408:
              unsigned int v265 = 0;
            }
            LODWORD(v252) = v265 >> 3;
            unsigned int v248 = v249;
            goto LABEL_378;
          }
        }
      }
      LODWORD(v252) = v245 & 0xFFFFF;
LABEL_378:
      int v276 = v252 & 0xFFFFF;
      unsigned int v277 = v248 + 13;
      int v241 = 0x100000;
      switch(v277)
      {
        case 0u:
          int v241 = 12582912;
          break;
        case 1u:
          int v241 = 11534336;
          break;
        case 2u:
          int v241 = 10485760;
          break;
        case 3u:
          int v241 = 9437184;
          break;
        case 4u:
          int v241 = 0x800000;
          break;
        case 5u:
          int v241 = 7340032;
          break;
        case 6u:
          int v241 = 6291456;
          break;
        case 7u:
          int v241 = 5242880;
          break;
        case 8u:
          int v241 = 0x400000;
          break;
        case 9u:
          int v241 = 3145728;
          break;
        case 0xAu:
          int v241 = 0x200000;
          break;
        case 0xBu:
          break;
        case 0xCu:
          int v241 = 0;
          break;
        default:
          v276 |= 0x80000000;
          int v241 = 0;
          break;
      }
      v559->__begin_[v247] = v241 | v276;
      if (++v238 == v239) {
        goto LABEL_409;
      }
    }
    LODWORD(v245) = 0;
LABEL_329:
    LODWORD(v246) = 0;
    goto LABEL_330;
  }
LABEL_409:
  unsigned int v280 = *((_DWORD *)v18 + 31);
  if (v280 >= *((_DWORD *)v18 + 30)) {
    unsigned int v280 = *((_DWORD *)v18 + 30);
  }
  *((_DWORD *)v18 + 30) = v280;
  unsigned int v281 = *((_DWORD *)v18 + 33);
  if (v281 >= *((_DWORD *)v18 + 32)) {
    unsigned int v281 = *((_DWORD *)v18 + 32);
  }
  *((_DWORD *)v18 + 32) = v281;
  unsigned int v282 = *((_DWORD *)v18 + 35);
  if (v282 >= *((_DWORD *)v18 + 34)) {
    unsigned int v282 = *((_DWORD *)v18 + 34);
  }
  *((_DWORD *)v18 + 34) = v282;
  uint64_t v283 = (int8x16_t *)v18[12];
  unsigned int v284 = (int8x16_t *)v18[13];
  unint64_t v285 = (char *)v284 - (char *)v283;
  if (a12 != 1)
  {
    if ((v285 & 0x3FFFFFFFCLL) == 0) {
      goto LABEL_454;
    }
    unint64_t v294 = (v285 >> 2);
    if (v294 >= 8)
    {
      uint64_t v314 = (v285 >> 2) & 7;
      unint64_t v295 = v294 - v314;
      int8x16_t v315 = (int8x16_t)xmmword_242EA7E20;
      uint64_t v316 = v283 + 1;
      v317.i64[0] = 0x400000004;
      v317.i64[1] = 0x400000004;
      a11.i64[0] = 0xF0000000FLL;
      a11.i64[1] = 0xF0000000FLL;
      v318.i64[0] = 0x800000008;
      v318.i64[1] = 0x800000008;
      unint64_t v319 = v294 - v314;
      do
      {
        v316[-1] = vandq_s8(v315, a11);
        int8x16_t *v316 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v315, v317), a11);
        int8x16_t v315 = (int8x16_t)vaddq_s32((int32x4_t)v315, v318);
        v316 += 2;
        v319 -= 8;
      }
      while (v319);
      if (!v314) {
        goto LABEL_454;
      }
    }
    else
    {
      unint64_t v295 = 0;
    }
    do
    {
      v283->i32[v295] = v295 & 0xFFFFF;
      ++v295;
    }
    while (v294 != v295);
    goto LABEL_454;
  }
  if (v284 != v283)
  {
    unint64_t v286 = 0;
    uint64_t v287 = *a13;
    unint64_t v288 = (a13[1] - *a13) >> 2;
    unsigned int v289 = 1;
    do
    {
      if (v288 <= v286) {
        abort();
      }
      unsigned int v291 = *(_DWORD *)(v287 + 4 * v286);
      if ((~v291 & 0x3FFFFFFF) != 0)
      {
        unsigned int v292 = v291 & 0xC0000000 | (v291 + 60) & 0x3FFFFFFF;
        if (v291 >> 30) {
          unsigned int v292 = *(_DWORD *)(v287 + 4 * v286);
        }
        int v293 = 11534336;
        switch(v292 >> 30)
        {
          case 1u:
            v292 &= 0x3FFFFFFFu;
            int v293 = 3145728;
            break;
          case 2u:
            v292 &= 0x3FFFFFFFu;
            int v293 = 10485760;
            break;
          case 3u:
            break;
          default:
            v292 &= 0x3FFFFFFFu;
            int v293 = 6291456;
            break;
        }
        int v290 = v293 | v292 & 0xFFFFF;
      }
      else
      {
        int v290 = 0x400000;
      }
      v283->i32[v286] = v290;
      unint64_t v286 = v289++;
    }
    while ((uint64_t)v285 >> 2 > v286);
  }
  uint64_t v296 = *(unsigned __int16 *)((char *)v28 - *v28 + 24);
  uint64_t v297 = *(unsigned int *)((char *)v28 + v296);
  int v298 = (unsigned int *)((char *)v28 + v296 + v297);
  uint64_t v299 = *v298;
  if (v299)
  {
    unint64_t v300 = 0;
    uint64_t v301 = 4 * v299;
    int v302 = (char *)v28 + v296 + v297;
    do
    {
      unint64_t v303 = 0;
      uint64_t v304 = v298[v300 / 4 + 1];
      int v305 = (char *)&v298[v300 / 4] + v304;
      uint64_t v306 = *((int *)v305 + 1);
      uint64_t v307 = v304 - v306;
      long long v308 = (char *)&v298[v300 / 4] + v304 - v306;
      unsigned int v309 = *((unsigned __int16 *)v308 + 2);
      if (v309 >= 5)
      {
        uint64_t v310 = -v306;
        if (*((_WORD *)v308 + 4) && *((unsigned char *)&v298[v300 / 4 + 1] + v304 + *((unsigned __int16 *)v308 + 4)) == 64)
        {
          if (v309 >= 9 && *(_WORD *)((char *)&v298[v300 / 4 + 3] + v307)) {
            unsigned int v311 = *(unsigned int *)((char *)&v298[v300 / 4 + 1]
          }
                                   + v304
                                   + *(unsigned __int16 *)((char *)&v298[v300 / 4 + 3] + v307));
          else {
            unsigned int v311 = 0;
          }
          if (v311 >= (unint64_t)((a13[1] - *a13) >> 2)) {
            abort();
          }
          int v312 = *(_DWORD *)(*a13 + 4 * v311) & 0xFFFFF | 0x800000;
          v283->i32[v311] = v312;
          v283->i32[v311 + 1] = v312;
          uint64_t v313 = *((int *)v305 + 1);
          uint64_t v310 = -v313;
          unsigned int v309 = *(unsigned __int16 *)&v302[v300 + 4 + v304 - v313];
        }
        if (v309 >= 9 && *(_WORD *)&v302[v300 + 12 + v310 + v304]) {
          unint64_t v303 = *(unsigned int *)&v302[v300 + 4 + v304 + *(unsigned __int16 *)&v302[v300 + 12 + v310 + v304]];
        }
        else {
          unint64_t v303 = 0;
        }
      }
      if (v303 >= (a13[1] - *a13) >> 2) {
        abort();
      }
      v300 += 4;
    }
    while (v301 != v300);
  }
LABEL_454:
  uint64_t v320 = *v28;
  int v321 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - v320 + 24));
  char v322 = (unsigned int *)((char *)v321 + *v321);
  unsigned int v325 = *v322;
  unsigned int v323 = v322 + 1;
  uint64_t v324 = v325;
  if (v325)
  {
    char v326 = 0;
    char v327 = 0;
    int v328 = &v323[v324];
    while (1)
    {
      unsigned int v329 = (int *)((char *)v323 + *v323);
      int v330 = (unsigned __int16 *)((char *)v329 - *v329);
      unsigned int v331 = *v330;
      if (v331 >= 5 && v330[2])
      {
        char v332 = 0;
        char v333 = 0;
        unsigned int v334 = 4;
        int v335 = 1;
        switch(*((unsigned char *)v329 + v330[2]))
        {
          case 0xB:
          case 0xC:
            break;
          case 0xD:
          case 0x10:
          case 0x11:
          case 0x3E:
          case 0x5D:
            char v332 = 0;
            int v335 = 1;
            char v333 = 1;
            unsigned int v334 = 1;
            if (v331 < 7) {
              goto LABEL_469;
            }
            goto LABEL_465;
          case 0x61:
          case 0x62:
            char v332 = 0;
            char v333 = 0;
            unsigned int v334 = 2;
            break;
          default:
            goto LABEL_468;
        }
        if (v331 >= 7)
        {
LABEL_465:
          if (v330[3])
          {
            int v336 = *(int *)((char *)v329 + v330[3]);
            uint64_t v337 = v330[2];
            if (!v330[2]) {
              goto LABEL_467;
            }
LABEL_471:
            int v338 = *((unsigned __int8 *)v329 + v337);
          }
          else
          {
LABEL_470:
            int v336 = 0;
            uint64_t v337 = v330[2];
            if (v330[2]) {
              goto LABEL_471;
            }
LABEL_467:
            int v338 = 0;
          }
          v327 |= v338 == 64;
          if (v336 >= 0) {
            char v332 = 1;
          }
          if (v332) {
            goto LABEL_457;
          }
          if (v331 < 9)
          {
            LODWORD(v339) = 0;
          }
          else
          {
            uint64_t v339 = v330[4];
            if (v330[4]) {
              LODWORD(v339) = *(int *)((char *)v329 + v339);
            }
          }
          unsigned int v340 = (v336 >> 20) & 0x7FF;
          uint64_t v341 = *(void *)(a6 + 8 * v340);
          if (v337 && *((unsigned __int8 *)v329 + v337) - 97 <= 1)
          {
            uint64_t v342 = v341 + 8;
            if ((*(unsigned char *)v341 & 1) == 0)
            {
              int v343 = *(_DWORD *)(v341 + 16);
              if (v343)
              {
                uint64_t v342 = *(void *)(v341 + 8);
                goto LABEL_494;
              }
              unsigned int v354 = 0;
LABEL_497:
              switch(*((unsigned char *)v329 + v337))
              {
                case 0xB:
                  a11 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v354), (int32x4_t)xmmword_242EA80F0), 2uLL);
                  break;
                case 0xC:
                  a11.i32[0] = v354 >> 2;
                  a11.i32[1] = (v354 >> 2) + 1;
                  a11.u64[1] = (unint64_t)vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v354), (int32x2_t)0xC00000008), 2uLL);
                  break;
                case 0xD:
                  unsigned int v356 = v354 + 32;
                  goto LABEL_510;
                case 0xE:
                case 0xF:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x22:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x27:
                case 0x28:
                case 0x29:
                case 0x2A:
                case 0x2B:
                case 0x2C:
                case 0x2D:
                case 0x2E:
                case 0x2F:
                case 0x30:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x37:
                case 0x38:
                case 0x39:
                case 0x3A:
                case 0x3B:
                case 0x3C:
                case 0x3D:
                case 0x3F:
                case 0x40:
                case 0x41:
                case 0x42:
                case 0x43:
                case 0x44:
                case 0x45:
                case 0x46:
                case 0x47:
                case 0x48:
                case 0x49:
                case 0x4A:
                case 0x4B:
                case 0x4C:
                case 0x4D:
                case 0x4E:
                case 0x4F:
                case 0x50:
                case 0x51:
                case 0x52:
                case 0x53:
                case 0x54:
                case 0x55:
                case 0x56:
                case 0x57:
                case 0x58:
                case 0x59:
                case 0x5A:
                case 0x5B:
                case 0x5C:
                case 0x5E:
                case 0x5F:
                case 0x60:
                  break;
                case 0x10:
                  unsigned int v356 = v354 + 36;
                  goto LABEL_510;
                case 0x11:
                  unsigned int v356 = v354 + 40;
                  goto LABEL_510;
                case 0x3E:
                  unsigned int v356 = v354 + 44;
LABEL_510:
                  unsigned __int32 v355 = v356 >> 2;
                  goto LABEL_511;
                case 0x5D:
                  goto LABEL_503;
                case 0x61:
                case 0x62:
                  a11.i32[0] = v354 >> 2;
                  a11.i32[1] = (v354 >> 2) + 1;
                  break;
                default:
                  if (*((unsigned char *)v329 + v337) == 113)
                  {
LABEL_503:
                    unsigned __int32 v355 = v354 >> 2;
LABEL_511:
                    a11.i32[0] = v355;
                  }
                  break;
              }
LABEL_512:
              if (v335)
              {
                unsigned int v357 = v340 << 20;
                if (v334 <= 1) {
                  unsigned int v334 = 1;
                }
                v283->i32[v339] = (v340 << 20) | a11.i32[0] & 0xFFFFF | 0x80000000;
                if ((v333 & 1) == 0)
                {
                  v283->i32[(v339 + 1)] = a11.i32[1] & 0xFFFFF | v357 | 0x80000000;
                  if (v334 != 2)
                  {
                    v283->i32[(v339 + 2)] = a11.i32[2] & 0xFFFFF | v357 | 0x80000000;
                    v283->i32[(v339 + 3)] = a11.i32[3] & 0xFFFFF | v357 | 0x80000000;
                  }
                }
              }
              char v326 = 1;
              goto LABEL_457;
            }
            int v343 = 16;
LABEL_494:
            int v351 = v336 & 0xFFFFF;
            int v352 = v343 - 1;
            uint64_t v347 = v352 & (37 * (v336 & 0xFFFFFu));
            int v353 = *(_DWORD *)(v342 + 16 * v347);
            if (v353 == v351)
            {
LABEL_495:
              unsigned int v354 = *(_DWORD *)(v342 + 16 * v347 + 8);
              goto LABEL_496;
            }
            int v358 = 1;
            while (v353 != -1)
            {
              int v359 = v347 + v358++;
              uint64_t v347 = v359 & v352;
              int v353 = *(_DWORD *)(v342 + 16 * v347);
              if (v353 == v351) {
                goto LABEL_495;
              }
            }
          }
          else
          {
            uint64_t v342 = v341 + 8;
            if (*(unsigned char *)v341)
            {
              int v344 = 16;
            }
            else
            {
              int v344 = *(_DWORD *)(v341 + 16);
              if (!v344)
              {
                unsigned int v354 = 0;
                if (v337) {
                  goto LABEL_497;
                }
                goto LABEL_512;
              }
              uint64_t v342 = *(void *)(v341 + 8);
            }
            int v345 = v336 & 0xFFFFF;
            int v346 = v344 - 1;
            uint64_t v347 = v346 & (37 * (v336 & 0xFFFFFu));
            int v348 = *(_DWORD *)(v342 + 16 * v347);
            if (v348 == v345) {
              goto LABEL_495;
            }
            int v349 = 1;
            while (v348 != -1)
            {
              int v350 = v347 + v349++;
              uint64_t v347 = v350 & v346;
              int v348 = *(_DWORD *)(v342 + 16 * v347);
              if (v348 == v345) {
                goto LABEL_495;
              }
            }
          }
          unsigned int v354 = 0;
LABEL_496:
          if (v337) {
            goto LABEL_497;
          }
          goto LABEL_512;
        }
      }
      else
      {
LABEL_468:
        int v335 = 0;
        unsigned int v334 = 0;
        char v332 = 1;
        char v333 = 1;
        if (v331 >= 7) {
          goto LABEL_465;
        }
      }
LABEL_469:
      if (v331 >= 5) {
        goto LABEL_470;
      }
LABEL_457:
      if (++v323 == v328)
      {
        uint64_t v360 = -(uint64_t)*v28;
        goto LABEL_525;
      }
    }
  }
  char v327 = 0;
  char v326 = 0;
  uint64_t v360 = -v320;
LABEL_525:
  uint64_t v362 = v18[3];
  uint64_t v361 = v18[4];
  int v363 = a12;
  if (v362 == v361)
  {
    int v368 = 0;
  }
  else
  {
    unint64_t v364 = (unint64_t)(v361 - v362) >> 2;
    if (v364)
    {
      int v365 = 0;
      unsigned int v366 = 0;
      do
      {
        int v368 = v365;
        unsigned int v367 = v366 + 1;
        if (v366 + 1 < v364)
        {
          int v369 = 1;
          while (1)
          {
            int v370 = *(_DWORD *)(v362 + 4 * (v366 + v369));
            if (v370 != -1
              && v370 != ((*(_DWORD *)(v362 + 4 * v366) + v369) & 0xFFFFF | *(_DWORD *)(v362 + 4 * v366) & 0xFFF00000))
            {
              break;
            }
            ++v369;
            if (!(v366 - v364 + v369))
            {
              int v369 = v364 - v366;
              break;
            }
          }
          unsigned int v367 = v369 + v366;
        }
        int v365 = v368 + 1;
        unsigned int v366 = v367;
      }
      while (v367 < v364);
    }
    else
    {
      int v368 = -1;
    }
  }
  uint64_t v373 = v18[6];
  uint64_t v372 = v18[7];
  if (v373 == v372)
  {
    int v378 = 0;
  }
  else
  {
    unint64_t v374 = (unint64_t)(v372 - v373) >> 2;
    if (v374)
    {
      int v375 = 0;
      unsigned int v376 = 0;
      do
      {
        int v378 = v375;
        unsigned int v377 = v376 + 1;
        if (v376 + 1 < v374)
        {
          int v379 = 1;
          while (1)
          {
            int v380 = *(_DWORD *)(v373 + 4 * (v376 + v379));
            if (v380 != -1
              && v380 != ((*(_DWORD *)(v373 + 4 * v376) + v379) & 0xFFFFF | *(_DWORD *)(v373 + 4 * v376) & 0xFFF00000))
            {
              break;
            }
            ++v379;
            if (!(v376 - v374 + v379))
            {
              int v379 = v374 - v376;
              break;
            }
          }
          unsigned int v377 = v379 + v376;
        }
        int v375 = v378 + 1;
        unsigned int v376 = v377;
      }
      while (v377 < v374);
    }
    else
    {
      int v378 = -1;
    }
  }
  char v382 = v327 & v326;
  uint64_t v384 = v18[9];
  uint64_t v383 = v18[10];
  if (v384 == v383)
  {
    int v389 = 0;
    goto LABEL_572;
  }
  unint64_t v385 = (unint64_t)(v383 - v384) >> 2;
  if (v385)
  {
    int v386 = 0;
    unsigned int v387 = 0;
    do
    {
      int v389 = v386;
      unsigned int v388 = v387 + 1;
      if (v387 + 1 < v385)
      {
        int v390 = 1;
        while (1)
        {
          int v391 = *(_DWORD *)(v384 + 4 * (v387 + v390));
          if (v391 != -1
            && v391 != ((*(_DWORD *)(v384 + 4 * v387) + v390) & 0xFFFFF | *(_DWORD *)(v384 + 4 * v387) & 0xFFF00000))
          {
            break;
          }
          ++v390;
          if (!(v387 - v385 + v390))
          {
            int v390 = v385 - v387;
            break;
          }
        }
        unsigned int v388 = v390 + v387;
      }
      int v386 = v389 + 1;
      unsigned int v387 = v388;
    }
    while (v388 < v385);
LABEL_572:
    if (v382)
    {
LABEL_573:
      long long v393 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 + v360 + 8));
      LODWORD(v393) = v368 + *(unsigned int *)((char *)v393 + *v393);
      long long v567 = 0uLL;
      v568 = 0;
      uint64_t v394 = (v393 + v378 + v389);
      if (v393 + v378 + v389)
      {
        uint64_t v395 = operator new(20 * v394);
        *(void *)&long long v567 = v395;
        *((void *)&v567 + 1) = v395;
        v568 = (char *)&v395[5 * v394];
        *(void *)uint64_t v395 = 0;
        v395[2] = v285 >> 2;
        v395[3] = -1;
        *((unsigned char *)v395 + 16) = 1;
        unsigned int v396 = (char *)(v395 + 5);
      }
      else
      {
        uint64_t v397 = operator new(0x14uLL);
        *(void *)uint64_t v397 = 0;
        v397[2] = v285 >> 2;
        v397[3] = -1;
        *((unsigned char *)v397 + 16) = 1;
        unsigned int v396 = (char *)(v397 + 5);
        *(void *)&long long v567 = v397;
        *((void *)&v567 + 1) = v397 + 5;
        v568 = (char *)(v397 + 5);
      }
      *((void *)&v567 + 1) = v396;
      AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::collectSplitDMAs(v548, 1, (uint64_t)&v567);
      AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::collectSplitDMAs(v549, 2, (uint64_t)&v567);
      AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::collectSplitDMAs(v559, 3, (uint64_t)&v567);
      v557 = (_DWORD *)*((void *)&v567 + 1);
      uint64_t v398 = (int *)v567;
      if ((void)v567 != *((void *)&v567 + 1))
      {
        char v561 = 0;
        v551 = v18 + 55;
        if (a12 == 1) {
          int v399 = 7340032;
        }
        else {
          int v399 = 0x100000;
        }
        int v566 = v399;
        while (2)
        {
          v564 = v398;
          if (*((unsigned char *)v398 + 16))
          {
            uint64_t v400 = v554;
            if (!*v398) {
              uint64_t v400 = v553;
            }
            long long v401 = v555;
            if (!*v398) {
              long long v401 = v556;
            }
            long long v402 = v552;
            if (!*v398) {
              long long v402 = v551;
            }
            v560 = v402;
            if (v363 == 1) {
              uint64_t v403 = v400;
            }
            else {
              uint64_t v403 = v401;
            }
            unint64_t v404 = v550;
            switch(*v398)
            {
              case 0:
                goto LABEL_598;
              case 1:
                unint64_t v404 = v548;
                goto LABEL_598;
              case 2:
                unint64_t v404 = v549;
                goto LABEL_598;
              case 3:
                unint64_t v404 = v559;
LABEL_598:
                uint64_t v405 = &v404->__begin_[v398[1]];
                uint64_t v406 = v398[2];
                if (v406) {
                  goto LABEL_599;
                }
                goto LABEL_583;
              default:
                uint64_t v405 = 0;
                uint64_t v406 = v398[2];
                if (!v406) {
                  goto LABEL_583;
                }
LABEL_599:
                unint64_t v407 = &v405[v406];
                long long v408 = (char *)v403[1];
                v562 = v407;
                break;
            }
            while (1)
            {
              unint64_t v410 = *v405;
              uint64_t v411 = (char *)*v403;
              uint64_t v412 = (uint64_t)&v408[-*v403];
              uint64_t v413 = v412 >> 2;
              *uint64_t v405 = (v412 >> 2) & 0xFFFFF | v566;
              if (v410 != -1) {
                break;
              }
              unint64_t v415 = v403[2];
              if ((unint64_t)v408 >= v415)
              {
                unint64_t v419 = v413 + 1;
                if ((unint64_t)(v413 + 1) >> 62) {
                  abort();
                }
                uint64_t v420 = v415 - (void)v411;
                if (v420 >> 1 > v419) {
                  unint64_t v419 = v420 >> 1;
                }
                if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v421 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v421 = v419;
                }
                if (v421)
                {
                  if (v421 >> 62) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  int v422 = operator new(4 * v421);
                }
                else
                {
                  int v422 = 0;
                }
                uint64_t v439 = &v422[4 * v413];
                uint64_t v440 = &v422[4 * v421];
                *uint64_t v439 = *((_DWORD *)v408 - 1);
                int8x16_t v409 = (char *)(v439 + 1);
                if (v408 != v411)
                {
                  unint64_t v441 = v408 - 4 - v411;
                  if (v441 <= 0xBB
                    || &v422[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v441 & 0xFFFFFFFFFFFFFFFCLL)] > &v422[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4]
                    || &v408[-(v441 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v408 - 4
                    || v408 - v422 - (v412 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                  {
                    uint64_t v442 = v408;
                  }
                  else
                  {
                    uint64_t v444 = (v441 >> 2) + 1;
                    uint64_t v442 = &v408[-4 * (v444 & 0x7FFFFFFFFFFFFFF8)];
                    uint64_t v445 = &v422[4 * v413 - 16];
                    uint64_t v446 = v408 - 16;
                    uint64_t v447 = v444 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v448 = *(_OWORD *)v446;
                      *(v445 - 1) = *((_OWORD *)v446 - 1);
                      *uint64_t v445 = v448;
                      v445 -= 2;
                      v446 -= 32;
                      v447 -= 8;
                    }
                    while (v447);
                    v439 -= v444 & 0x7FFFFFFFFFFFFFF8;
                    if (v444 == (v444 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_664:
                      *uint64_t v403 = v439;
                      v403[1] = v409;
                      v403[2] = v440;
                      if (!v411) {
                        goto LABEL_668;
                      }
                      goto LABEL_667;
                    }
                  }
                  do
                  {
                    int v443 = *((_DWORD *)v442 - 1);
                    v442 -= 4;
                    *--uint64_t v439 = v443;
                  }
                  while (v442 != v411);
                  goto LABEL_664;
                }
                *uint64_t v403 = v439;
                v403[1] = v409;
                v403[2] = v440;
LABEL_667:
                operator delete(v411);
LABEL_668:
                unint64_t v407 = v562;
                v403[1] = v409;
                goto LABEL_602;
              }
              *(_DWORD *)long long v408 = *((_DWORD *)v408 - 1);
              int8x16_t v409 = v408 + 4;
              v403[1] = v408 + 4;
LABEL_602:
              ++v405;
              long long v408 = v409;
              if (v405 == v407) {
                goto LABEL_583;
              }
            }
            if ((v410 & 0x80000000) != 0)
            {
              unsigned int v416 = (v410 >> 20) & 0x7FF;
              if (v363 == 1) {
                unsigned __int16 v417 = v416 | 0x8000;
              }
              else {
                unsigned __int16 v417 = v416;
              }
              unint64_t v418 = v403[2];
              if ((unint64_t)v408 < v418)
              {
                *(_DWORD *)long long v408 = v417 | ((unsigned __int16)v410 << 16);
                int8x16_t v409 = v408 + 4;
                int v363 = a12;
LABEL_690:
                v403[1] = v409;
                BOOL v453 = ((v410 >> 20) & 0x7FF) > 0x3F;
                v560[v453] |= 1 << (v410 >> 20);
                if (((unint64_t)v18[57] >> (v410 >> 20))) {
                  *((unsigned char *)v18 + 416) = 0;
                }
                goto LABEL_602;
              }
              unint64_t v423 = v413 + 1;
              if ((unint64_t)(v413 + 1) >> 62) {
                abort();
              }
              uint64_t v424 = v418 - (void)v411;
              if (v424 >> 1 > v423) {
                unint64_t v423 = v424 >> 1;
              }
              if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v425 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v425 = v423;
              }
              if (v425)
              {
                if (v425 >> 62) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v426 = operator new(4 * v425);
              }
              else
              {
                uint64_t v426 = 0;
              }
              int8x8_t v449 = (int *)&v426[4 * v413];
              *int8x8_t v449 = v417 | ((unsigned __int16)v410 << 16);
              int8x16_t v409 = (char *)(v449 + 1);
              if (v408 == v411)
              {
                int v363 = a12;
              }
              else
              {
                unint64_t v450 = v408 - 4 - v411;
                int v363 = a12;
                if (v450 < 0xBC)
                {
                  int v451 = v408;
                  goto LABEL_684;
                }
                if (&v426[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v450 & 0xFFFFFFFFFFFFFFFCLL)] > &v426[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                {
                  int v451 = v408;
                  goto LABEL_684;
                }
                if (&v408[-(v450 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v408 - 4)
                {
                  int v451 = v408;
                  goto LABEL_684;
                }
                if (v408 - v426 - (v412 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                {
                  int v451 = v408;
                  goto LABEL_684;
                }
                uint64_t v459 = (v450 >> 2) + 1;
                int v451 = &v408[-4 * (v459 & 0x7FFFFFFFFFFFFFF8)];
                uint64_t v460 = &v426[4 * v413 - 16];
                uint64_t v461 = v408 - 16;
                uint64_t v462 = v459 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v463 = *(_OWORD *)v461;
                  *(v460 - 1) = *((_OWORD *)v461 - 1);
                  *uint64_t v460 = v463;
                  v460 -= 2;
                  v461 -= 32;
                  v462 -= 8;
                }
                while (v462);
                v449 -= v459 & 0x7FFFFFFFFFFFFFF8;
                if (v459 != (v459 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_684:
                    int v452 = *((_DWORD *)v451 - 1);
                    v451 -= 4;
                    *--int8x8_t v449 = v452;
                  }
                  while (v451 != v411);
                }
              }
              *uint64_t v403 = v449;
              v403[1] = v409;
              v403[2] = &v426[4 * v425];
              if (v411) {
                operator delete(v411);
              }
              uint64_t v18 = v558;
              unint64_t v407 = v562;
              goto LABEL_690;
            }
            int v414 = v410 & 0xFFFFF;
            switch(*v564)
            {
              case 0:
                *((unsigned char *)v18 + 315) = 1;
                break;
              case 1:
                *((unsigned char *)v18 + 312) = 1;
                v414 -= *((_DWORD *)v18 + 30);
                break;
              case 2:
                *((unsigned char *)v18 + 313) = 1;
                int v427 = *((_DWORD *)v18 + 31) + v414;
                int v428 = *((_DWORD *)v18 + 30) + *((_DWORD *)v18 + 32);
                goto LABEL_634;
              case 3:
                *((unsigned char *)v18 + 314) = 1;
                int v427 = *((_DWORD *)v18 + 31) + v414 + *((_DWORD *)v18 + 33);
                int v428 = *((_DWORD *)v18 + 30) + *((_DWORD *)v18 + 32) + *((_DWORD *)v18 + 34);
LABEL_634:
                LOWORD(v414) = v427 - v428;
                break;
              default:
                break;
            }
            if (v363 == 1) {
              unsigned __int16 v429 = v410 >> 20;
            }
            else {
              unsigned __int16 v429 = -1;
            }
            unint64_t v430 = v403[2];
            if ((unint64_t)v408 < v430)
            {
              *(_DWORD *)long long v408 = v429 | ((unsigned __int16)v414 << 16);
              int8x16_t v409 = v408 + 4;
              int v363 = a12;
            }
            else
            {
              unint64_t v431 = v413 + 1;
              if ((unint64_t)(v413 + 1) >> 62) {
                abort();
              }
              uint64_t v432 = v430 - (void)v411;
              if (v432 >> 1 > v431) {
                unint64_t v431 = v432 >> 1;
              }
              if ((unint64_t)v432 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v433 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v433 = v431;
              }
              if (v433)
              {
                if (v433 >> 62) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                long long v434 = operator new(4 * v433);
              }
              else
              {
                long long v434 = 0;
              }
              long long v435 = (int *)&v434[4 * v413];
              *long long v435 = v429 | ((unsigned __int16)v414 << 16);
              int8x16_t v409 = (char *)(v435 + 1);
              if (v408 == v411)
              {
                int v363 = a12;
              }
              else
              {
                unint64_t v436 = v408 - 4 - v411;
                int v363 = a12;
                if (v436 < 0xBC)
                {
                  uint64_t v437 = v408;
                  goto LABEL_653;
                }
                if (&v434[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v436 & 0xFFFFFFFFFFFFFFFCLL)] > &v434[(v412 & 0xFFFFFFFFFFFFFFFCLL) - 4])
                {
                  uint64_t v437 = v408;
                  goto LABEL_653;
                }
                if (&v408[-(v436 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v408 - 4)
                {
                  uint64_t v437 = v408;
                  goto LABEL_653;
                }
                if (v408 - v434 - (v412 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                {
                  uint64_t v437 = v408;
                  goto LABEL_653;
                }
                uint64_t v454 = (v436 >> 2) + 1;
                uint64_t v437 = &v408[-4 * (v454 & 0x7FFFFFFFFFFFFFF8)];
                char v455 = &v434[4 * v413 - 16];
                unsigned int v456 = v408 - 16;
                uint64_t v457 = v454 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v458 = *(_OWORD *)v456;
                  *(v455 - 1) = *((_OWORD *)v456 - 1);
                  *char v455 = v458;
                  v455 -= 2;
                  v456 -= 32;
                  v457 -= 8;
                }
                while (v457);
                v435 -= v454 & 0x7FFFFFFFFFFFFFF8;
                if (v454 != (v454 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_653:
                    int v438 = *((_DWORD *)v437 - 1);
                    v437 -= 4;
                    *--long long v435 = v438;
                  }
                  while (v437 != v411);
                }
              }
              *uint64_t v403 = v435;
              v403[1] = v409;
              v403[2] = &v434[4 * v433];
              if (v411) {
                operator delete(v411);
              }
              unint64_t v407 = v562;
            }
            v403[1] = v409;
            char v561 = 1;
            goto LABEL_602;
          }
LABEL_583:
          uint64_t v398 = v564 + 5;
          if (v564 + 5 != v557) {
            continue;
          }
          break;
        }
        if ((v561 & 1) != 0 && *((unsigned char *)v18 + 416))
        {
          unint64_t v464 = v18[31] - v18[30];
          if ((v464 & 0x3FFFFFFFCLL) != 0)
          {
            uint64_t v465 = 0;
            uint64_t v466 = (v464 >> 2);
            while (*(__int16 *)(*v556 + 4 * v465) == -1)
            {
              unsigned int v478 = (char *)v18[47];
              unint64_t v477 = v18[48];
              if ((unint64_t)v478 >= v477)
              {
                unsigned int v479 = (char *)v18[46];
                uint64_t v480 = v478 - v479;
                if (v478 - v479 <= -3) {
                  abort();
                }
                uint64_t v481 = v480 >> 1;
                unint64_t v482 = v477 - (void)v479;
                if (v482 <= (v480 >> 1) + 1) {
                  unint64_t v483 = v481 + 1;
                }
                else {
                  unint64_t v483 = v482;
                }
                if (v482 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v484 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v484 = v483;
                }
                if (v484)
                {
                  if (v484 < 0) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  int8x16_t v485 = operator new(2 * v484);
                }
                else
                {
                  int8x16_t v485 = 0;
                }
                int8x16_t v495 = &v485[2 * v481];
                *int8x16_t v495 = v465;
                uint64_t v496 = v495 + 1;
                if (v478 == v479)
                {
                  uint64_t v18 = v558;
                }
                else
                {
                  unint64_t v497 = v478 - 2 - v479;
                  if (v497 < 0x1E)
                  {
                    uint64_t v18 = v558;
                    goto LABEL_762;
                  }
                  unint64_t v498 = v478 - v485 - (v480 & 0xFFFFFFFFFFFFFFFELL);
                  uint64_t v18 = v558;
                  if (v498 < 0x20) {
                    goto LABEL_846;
                  }
                  uint64_t v499 = (v497 >> 1) + 1;
                  long long v500 = &v485[2 * v481 - 16];
                  int8x16_t v501 = v478 - 16;
                  unint64_t v502 = v499 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    long long v503 = *(_OWORD *)v501;
                    *(v500 - 1) = *((_OWORD *)v501 - 1);
                    *long long v500 = v503;
                    v500 -= 2;
                    v501 -= 32;
                    v502 -= 16;
                  }
                  while (v502);
                  v495 -= v499 & 0xFFFFFFFFFFFFFFF0;
                  v478 -= 2 * (v499 & 0xFFFFFFFFFFFFFFF0);
                  if (v499 != (v499 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_846:
                    do
                    {
LABEL_762:
                      __int16 v504 = *((_WORD *)v478 - 1);
                      v478 -= 2;
                      *--int8x16_t v495 = v504;
                    }
                    while (v478 != v479);
                  }
                }
                v18[46] = (uint64_t)v495;
                v18[47] = (uint64_t)v496;
                v18[48] = (uint64_t)&v485[2 * v484];
                if (v479) {
                  operator delete(v479);
                }
                v18[47] = (uint64_t)v496;
                goto LABEL_716;
              }
              *(_WORD *)unsigned int v478 = v465;
              v18[47] = (uint64_t)(v478 + 2);
LABEL_716:
              if (++v465 == v466) {
                goto LABEL_766;
              }
            }
            uint64_t v469 = (char *)v18[50];
            unint64_t v468 = v18[51];
            if ((unint64_t)v469 < v468)
            {
              *(_WORD *)uint64_t v469 = v465;
              uint64_t v467 = v469 + 2;
            }
            else
            {
              uint64_t v470 = (char *)v18[49];
              uint64_t v471 = v469 - v470;
              if (v469 - v470 <= -3) {
                abort();
              }
              uint64_t v472 = v471 >> 1;
              unint64_t v473 = v468 - (void)v470;
              if (v473 <= (v471 >> 1) + 1) {
                unint64_t v474 = v472 + 1;
              }
              else {
                unint64_t v474 = v473;
              }
              if (v473 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v475 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v475 = v474;
              }
              if (v475)
              {
                if (v475 < 0) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unsigned int v476 = operator new(2 * v475);
              }
              else
              {
                unsigned int v476 = 0;
              }
              long long v486 = &v476[2 * v472];
              *long long v486 = v465;
              uint64_t v467 = v486 + 1;
              if (v469 == v470)
              {
                uint64_t v18 = v558;
              }
              else
              {
                unint64_t v487 = v469 - 2 - v470;
                if (v487 < 0x1E)
                {
                  uint64_t v18 = v558;
                  goto LABEL_750;
                }
                unint64_t v488 = v469 - v476 - (v471 & 0xFFFFFFFFFFFFFFFELL);
                uint64_t v18 = v558;
                if (v488 < 0x20) {
                  goto LABEL_847;
                }
                uint64_t v489 = (v487 >> 1) + 1;
                long long v490 = &v476[2 * v472 - 16];
                int v491 = v469 - 16;
                unint64_t v492 = v489 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v493 = *(_OWORD *)v491;
                  *(v490 - 1) = *((_OWORD *)v491 - 1);
                  *long long v490 = v493;
                  v490 -= 2;
                  v491 -= 32;
                  v492 -= 16;
                }
                while (v492);
                v486 -= v489 & 0xFFFFFFFFFFFFFFF0;
                v469 -= 2 * (v489 & 0xFFFFFFFFFFFFFFF0);
                if (v489 != (v489 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_847:
                  do
                  {
LABEL_750:
                    __int16 v494 = *((_WORD *)v469 - 1);
                    v469 -= 2;
                    *--long long v486 = v494;
                  }
                  while (v469 != v470);
                }
              }
              v18[49] = (uint64_t)v486;
              v18[50] = (uint64_t)v467;
              v18[51] = (uint64_t)&v476[2 * v475];
              if (v470) {
                operator delete(v470);
              }
            }
            v18[50] = (uint64_t)v467;
            goto LABEL_716;
          }
LABEL_766:
          unint64_t v505 = v18[28] - v18[27];
          if ((v505 & 0x3FFFFFFFCLL) != 0)
          {
            uint64_t v506 = 0;
            uint64_t v507 = (v505 >> 2);
            while (*(__int16 *)(*v555 + 4 * v506) == -1)
            {
              v519 = (char *)v18[41];
              unint64_t v518 = v18[42];
              if ((unint64_t)v519 >= v518)
              {
                v520 = (char *)*v547;
                uint64_t v521 = v519 - (unsigned char *)*v547;
                if (v521 <= -3) {
                  abort();
                }
                uint64_t v522 = v521 >> 1;
                unint64_t v523 = v518 - (void)v520;
                if (v523 <= (v521 >> 1) + 1) {
                  unint64_t v524 = v522 + 1;
                }
                else {
                  unint64_t v524 = v523;
                }
                if (v523 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v525 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v525 = v524;
                }
                if (v525)
                {
                  if (v525 < 0) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  v526 = operator new(2 * v525);
                }
                else
                {
                  v526 = 0;
                }
                v536 = &v526[2 * v522];
                _WORD *v536 = v506;
                v537 = v536 + 1;
                if (v519 == v520)
                {
                  uint64_t v18 = v558;
                }
                else
                {
                  unint64_t v538 = v519 - 2 - v520;
                  if (v538 < 0x1E)
                  {
                    uint64_t v18 = v558;
                    goto LABEL_816;
                  }
                  unint64_t v539 = v519 - v526 - (v521 & 0xFFFFFFFFFFFFFFFELL);
                  uint64_t v18 = v558;
                  if (v539 < 0x20) {
                    goto LABEL_848;
                  }
                  uint64_t v540 = (v538 >> 1) + 1;
                  v541 = &v526[2 * v522 - 16];
                  v542 = v519 - 16;
                  unint64_t v543 = v540 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    long long v544 = *(_OWORD *)v542;
                    *(v541 - 1) = *((_OWORD *)v542 - 1);
                    _OWORD *v541 = v544;
                    v541 -= 2;
                    v542 -= 32;
                    v543 -= 16;
                  }
                  while (v543);
                  v536 -= v540 & 0xFFFFFFFFFFFFFFF0;
                  v519 -= 2 * (v540 & 0xFFFFFFFFFFFFFFF0);
                  if (v540 != (v540 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_848:
                    do
                    {
LABEL_816:
                      __int16 v545 = *((_WORD *)v519 - 1);
                      v519 -= 2;
                      *--v536 = v545;
                    }
                    while (v519 != v520);
                  }
                }
                v18[40] = (uint64_t)v536;
                v18[41] = (uint64_t)v537;
                v18[42] = (uint64_t)&v526[2 * v525];
                if (v520) {
                  operator delete(v520);
                }
                v18[41] = (uint64_t)v537;
                goto LABEL_770;
              }
              *(_WORD *)v519 = v506;
              v18[41] = (uint64_t)(v519 + 2);
LABEL_770:
              if (++v506 == v507) {
                goto LABEL_820;
              }
            }
            float32x4x2_t v510 = (char *)v18[44];
            unint64_t v509 = v18[45];
            if ((unint64_t)v510 < v509)
            {
              *(_WORD *)float32x4x2_t v510 = v506;
              float32x4x2_t v508 = v510 + 2;
            }
            else
            {
              v511 = (char *)v18[43];
              uint64_t v512 = v510 - v511;
              if (v510 - v511 <= -3) {
                abort();
              }
              uint64_t v513 = v512 >> 1;
              unint64_t v514 = v509 - (void)v511;
              if (v514 <= (v512 >> 1) + 1) {
                unint64_t v515 = v513 + 1;
              }
              else {
                unint64_t v515 = v514;
              }
              if (v514 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v516 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v516 = v515;
              }
              if (v516)
              {
                if (v516 < 0) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v517 = operator new(2 * v516);
              }
              else
              {
                v517 = 0;
              }
              v527 = &v517[2 * v513];
              _WORD *v527 = v506;
              float32x4x2_t v508 = v527 + 1;
              if (v510 == v511)
              {
                uint64_t v18 = v558;
              }
              else
              {
                unint64_t v528 = v510 - 2 - v511;
                if (v528 < 0x1E)
                {
                  uint64_t v18 = v558;
                  goto LABEL_804;
                }
                unint64_t v529 = v510 - v517 - (v512 & 0xFFFFFFFFFFFFFFFELL);
                uint64_t v18 = v558;
                if (v529 < 0x20) {
                  goto LABEL_849;
                }
                uint64_t v530 = (v528 >> 1) + 1;
                v531 = &v517[2 * v513 - 16];
                v532 = v510 - 16;
                unint64_t v533 = v530 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v534 = *(_OWORD *)v532;
                  *(v531 - 1) = *((_OWORD *)v532 - 1);
                  _OWORD *v531 = v534;
                  v531 -= 2;
                  v532 -= 32;
                  v533 -= 16;
                }
                while (v533);
                v527 -= v530 & 0xFFFFFFFFFFFFFFF0;
                v510 -= 2 * (v530 & 0xFFFFFFFFFFFFFFF0);
                if (v530 != (v530 & 0xFFFFFFFFFFFFFFF0))
                {
LABEL_849:
                  do
                  {
LABEL_804:
                    __int16 v535 = *((_WORD *)v510 - 1);
                    v510 -= 2;
                    *--v527 = v535;
                  }
                  while (v510 != v511);
                }
              }
              v18[43] = (uint64_t)v527;
              v18[44] = (uint64_t)v508;
              v18[45] = (uint64_t)&v517[2 * v516];
              if (v511) {
                operator delete(v511);
              }
            }
            v18[44] = (uint64_t)v508;
            goto LABEL_770;
          }
        }
LABEL_820:
        uint64_t v398 = (int *)v567;
      }
      if (v398)
      {
        *((void *)&v567 + 1) = v398;
        operator delete(v398);
      }
    }
  }
  else
  {
    int v389 = -1;
    if (v382) {
      goto LABEL_573;
    }
  }
  return v18;
}

void sub_242AA2604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v24 = a10;
  unsigned int v25 = *(void **)(v22 - 128);
  if (v25)
  {
    operator delete(v25);
    uint64_t v24 = a10;
  }
  uint64_t v26 = *(void **)(v21 + 392);
  if (v26)
  {
    *(void *)(v21 + 400) = v26;
    uint64_t v47 = v24;
    operator delete(v26);
    uint64_t v24 = v47;
    uint64_t v27 = *(void **)(v21 + 368);
    if (!v27)
    {
LABEL_5:
      uint64_t v28 = *(void **)(v21 + 344);
      if (!v28) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v27 = *(void **)(v21 + 368);
    if (!v27) {
      goto LABEL_5;
    }
  }
  *(void *)(v21 + 376) = v27;
  uint64_t v48 = v24;
  operator delete(v27);
  uint64_t v24 = v48;
  uint64_t v28 = *(void **)(v21 + 344);
  if (!v28)
  {
LABEL_7:
    uint64_t v30 = *a9;
    if (*a9)
    {
      *(void *)(v21 + 328) = v30;
      int v31 = v24;
      operator delete(v30);
      uint64_t v24 = v31;
    }
    size_t v32 = *a15;
    if (*a15)
    {
      *(void *)(v21 + 296) = v32;
      uint64_t v33 = v24;
      operator delete(v32);
      uint64_t v24 = v33;
    }
    uint64_t v34 = *a16;
    if (*a16)
    {
      *(void *)(v21 + 272) = v34;
      uint64_t v35 = v24;
      operator delete(v34);
      uint64_t v24 = v35;
    }
    uint64_t v36 = *a18;
    if (*a18)
    {
      *(void *)(v21 + 248) = v36;
      uint64_t v37 = v24;
      operator delete(v36);
      uint64_t v24 = v37;
    }
    uint64_t v38 = *a17;
    if (*a17)
    {
      *(void *)(v21 + 224) = v38;
      unint64_t v39 = v24;
      operator delete(v38);
      uint64_t v24 = v39;
    }
    uint64_t v40 = *a12;
    if (*a12)
    {
      *(void *)(v21 + 104) = v40;
      uint64_t v41 = v24;
      operator delete(v40);
      uint64_t v24 = v41;
    }
    uint64_t v42 = *a21;
    if (*a21)
    {
      *(void *)(v21 + 80) = v42;
      unsigned int v43 = v24;
      operator delete(v42);
      uint64_t v24 = v43;
    }
    uint64_t v44 = *a11;
    if (*a11)
    {
      *(void *)(v21 + 56) = v44;
      unint64_t v49 = v24;
      operator delete(v44);
      uint64_t v45 = *v49;
      if (!*v49)
      {
LABEL_23:
        uint64_t v46 = *(void **)v21;
        if (!*(void *)v21) {
          goto LABEL_24;
        }
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v45 = *v24;
      if (!*v24) {
        goto LABEL_23;
      }
    }
    *(void *)(v21 + 32) = v45;
    operator delete(v45);
    uint64_t v46 = *(void **)v21;
    if (!*(void *)v21) {
LABEL_24:
    }
      _Unwind_Resume(exception_object);
LABEL_30:
    operator delete(v46);
    _Unwind_Resume(exception_object);
  }
LABEL_6:
  *(void *)(v21 + 352) = v28;
  uint64_t v29 = v24;
  operator delete(v28);
  uint64_t v24 = v29;
  goto LABEL_7;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  std::vector<unsigned int>::pointer v7 = end;
  if (__n <= value - end)
  {
    if (!__n)
    {
LABEL_21:
      this->__end_ = v7;
      return;
    }
    std::vector<unsigned int>::size_type v15 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v15 >= 0xF && (end >= dword_242EAAD30 || &end[__n] <= &dont_care))
    {
      std::vector<unsigned int>::size_type v16 = v15 + 1;
      *(void *)&long long v17 = -1;
      *((void *)&v17 + 1) = -1;
      uint64_t v18 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)std::vector<unsigned int>::pointer v7 = v17;
        *((_OWORD *)v7 + 1) = v17;
        v7 += 8;
        v18 -= 8;
      }
      while (v18);
      if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_20;
      }
      std::vector<unsigned int>::pointer v7 = &end[v16 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v7++ = -1;
    while (v7 != &end[__n]);
LABEL_20:
    std::vector<unsigned int>::pointer v7 = &end[__n];
    goto LABEL_21;
  }
  std::vector<unsigned int>::pointer begin = this->__begin_;
  uint64_t v9 = (char *)end - (char *)this->__begin_;
  uint64_t v10 = v9 >> 2;
  unint64_t v11 = (v9 >> 2) + __n;
  if (v11 >> 62) {
    abort();
  }
  uint64_t v12 = (char *)value - (char *)begin;
  if (v12 >> 1 > v11) {
    unint64_t v11 = v12 >> 1;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = operator new(4 * v13);
  }
  else
  {
    uint64_t v14 = 0;
  }
  long long v19 = (unsigned int *)&v14[4 * v10];
  uint64_t v20 = &v19[__n];
  std::vector<unsigned int>::size_type v21 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v22 = v19;
  if (v21 >= 0x13)
  {
    if (v19 >= dword_242EAAD30 || (uint64_t v22 = (unsigned int *)&v14[4 * v10], &v14[4 * __n + v9] <= (unsigned char *)&dont_care))
    {
      uint64_t v23 = (v21 + 1) & 0x7FFFFFFFFFFFFFF8;
      *(void *)&long long v24 = -1;
      *((void *)&v24 + 1) = -1;
      unsigned int v25 = &v14[4 * v10];
      uint64_t v26 = v23;
      do
      {
        *unsigned int v25 = v24;
        v25[1] = v24;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
      if (v21 + 1 == v23) {
        goto LABEL_31;
      }
      uint64_t v22 = &v19[v23];
    }
  }
  do
    *v22++ = -1;
  while (v22 != v20);
LABEL_31:
  if (end != begin)
  {
    unint64_t v27 = (char *)end - (char *)begin - 4;
    if (v27 < 0x2C) {
      goto LABEL_47;
    }
    if ((unint64_t)((char *)end - &v14[v9]) < 0x20) {
      goto LABEL_47;
    }
    uint64_t v28 = (v27 >> 2) + 1;
    std::vector<unsigned int>::pointer v7 = &end[-(v28 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v29 = &v14[4 * v10 - 16];
    uint64_t v30 = (long long *)(end - 4);
    uint64_t v31 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v32 = *v30;
      *(v29 - 1) = *(v30 - 1);
      *uint64_t v29 = v32;
      v29 -= 2;
      v30 -= 2;
      v31 -= 8;
    }
    while (v31);
    v19 -= v28 & 0x7FFFFFFFFFFFFFF8;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_47:
      do
      {
        unsigned int v33 = *--v7;
        *--long long v19 = v33;
      }
      while (v7 != begin);
    }
  }
  this->__begin_ = v19;
  this->__end_ = v20;
  this->__end_cap_.__value_ = (unsigned int *)&v14[4 * v13];
  if (begin)
  {
    operator delete(begin);
  }
}

uint64_t AGX::ArgumentTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::remapBindPoint<true>(uint64_t result, _DWORD *a2, char *a3, int a4)
{
  if (a4 == 7)
  {
    int v4 = result - 35;
    switch((int)result)
    {
      case '#':
        *a3 = 0;
        *a2 = 7;
        break;
      case '$':
        *a3 = 0;
        *a2 = 8;
        break;
      case ';':
        goto LABEL_6;
      case '<':
        goto LABEL_7;
      case '=':
        goto LABEL_8;
      case '@':
        goto LABEL_9;
      default:
        char v5 = 2;
        goto LABEL_12;
    }
  }
  else
  {
    switch((int)result)
    {
      case '\'':
        *a3 = 0;
        *a2 = 3;
        return result;
      case ')':
        *a3 = 0;
        *a2 = 4;
        return result;
      case ',':
        *a3 = 0;
        *a2 = 0;
        return result;
      case '-':
        *a3 = 0;
        *a2 = 1;
        return result;
      case '.':
        *a3 = 0;
        goto LABEL_18;
      case ';':
LABEL_6:
        int v4 = 0;
        char v5 = 1;
        goto LABEL_12;
      case '<':
LABEL_7:
        *a3 = 1;
        *a2 = 1;
        return result;
      case '=':
LABEL_8:
        int v4 = 0;
        char v5 = 3;
LABEL_12:
        *a3 = v5;
        *a2 = v4;
        break;
      case '@':
LABEL_9:
        *a3 = 1;
LABEL_18:
        *a2 = 2;
        break;
      default:
        *a3 = 2;
        *a2 = result - 35;
        break;
    }
  }
  return result;
}

uint64_t AGX::IntersectionArgumentTable<AGX::HAL200::Classes>::remapIntersectionBindPointToScs(unsigned int a1, _DWORD *a2)
{
  *(_OWORD *)std::vector<unsigned int>::size_type v15 = 0u;
  *(_OWORD *)unint64_t __p = 0u;
  int v17 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x24u, 0x200000024);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x25u, 0x300000025);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x28u, 0x400000028);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x29u, 0x500000029);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x2Bu, 0x60000002BLL);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x2Du, 0x70000002DLL);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>((float *)v15, 0x2Fu, 0xD0000002FLL);
  if (v15[1])
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v15[1]);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a1;
      if (v15[1] <= (void *)a1) {
        unint64_t v5 = a1 % (unint64_t)v15[1];
      }
    }
    else
    {
      unint64_t v5 = (LODWORD(v15[1]) - 1) & a1;
    }
    unsigned int v6 = (uint64_t **)*((void *)v15[0] + v5);
    if (v6)
    {
      std::vector<unsigned int>::pointer v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == a1)
            {
              if (*((_DWORD *)v7 + 4) == a1) {
                goto LABEL_26;
              }
            }
            else if ((v9 & ((uint64_t)v15[1] - 1)) != v5)
            {
              goto LABEL_21;
            }
            std::vector<unsigned int>::pointer v7 = (uint64_t *)*v7;
            if (!v7) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v8 = v7[1];
          if (v8 == a1)
          {
            if (*((_DWORD *)v7 + 4) == a1)
            {
LABEL_26:
              *a2 = *((_DWORD *)v7 + 5);
              uint64_t v10 = 1;
              unint64_t v11 = __p[0];
              if (!__p[0]) {
                goto LABEL_23;
              }
              goto LABEL_22;
            }
          }
          else
          {
            if ((void *)v8 >= v15[1]) {
              v8 %= (unint64_t)v15[1];
            }
            if (v8 != v5) {
              break;
            }
          }
          std::vector<unsigned int>::pointer v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  uint64_t v10 = 0;
  unint64_t v11 = __p[0];
  if (!__p[0]) {
    goto LABEL_23;
  }
  do
  {
LABEL_22:
    uint64_t v12 = (void *)*v11;
    operator delete(v11);
    unint64_t v11 = v12;
  }
  while (v12);
LABEL_23:
  unint64_t v13 = v15[0];
  v15[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  return v10;
}

void sub_242AA3210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p)
{
  uint64_t v12 = __p;
  if (__p)
  {
    do
    {
      unint64_t v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  if (a9) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::collectSplitDMAs(void *result, int a2, uint64_t a3)
{
  uint64_t v3 = (result[1] - *result) >> 2;
  if (v3)
  {
    unsigned int v6 = 0;
    uint64_t v28 = result;
    do
    {
      int v8 = *(_DWORD *)(*result + 4 * v6);
      if (v6 + 1 >= v3)
      {
        int v9 = 1;
      }
      else
      {
        int v9 = 1;
        while (1)
        {
          int v10 = *(_DWORD *)(*result + 4 * (v6 + v9));
          if (v10 != -1 && v10 != ((v8 + v9) & 0xFFFFF | v8 & 0xFFF00000)) {
            break;
          }
          ++v9;
          if (!(v6 - v3 + v9))
          {
            int v9 = v3 - v6;
            break;
          }
        }
      }
      uint64_t v12 = *(char **)a3;
      unint64_t v13 = *(char **)(a3 + 8);
      if (*(char **)a3 == v13 || *((_DWORD *)v13 - 5) != a2)
      {
        int v14 = -1;
        if (v8 < 0)
        {
LABEL_19:
          if (v14 == -1) {
            int v15 = -1;
          }
          else {
            int v15 = v14 + v9;
          }
          unint64_t v16 = *(void *)(a3 + 16);
          if ((unint64_t)v13 >= v16)
          {
            unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 2) + 1;
            if (v22 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_56:
            }
              abort();
            unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (void)v12) >> 2);
            if (2 * v23 > v22) {
              unint64_t v22 = 2 * v23;
            }
            if (v23 >= 0x666666666666666) {
              unint64_t v20 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v20 = v22;
            }
            if (v20)
            {
              if (v20 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_57:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              std::vector<unsigned int>::size_type v21 = (char *)operator new(20 * v20);
            }
            else
            {
              std::vector<unsigned int>::size_type v21 = 0;
            }
            long long v24 = &v21[4 * ((v13 - v12) >> 2)];
            *(_DWORD *)long long v24 = a2;
            *((_DWORD *)v24 + 1) = v6;
            *((_DWORD *)v24 + 2) = v9;
            *((_DWORD *)v24 + 3) = v15;
            v24[16] = 0;
            unsigned int v25 = v24;
            if (v12 != v13)
            {
              do
              {
                long long v27 = *(_OWORD *)(v13 - 20);
                *((_DWORD *)v25 - 1) = *((_DWORD *)v13 - 1);
                *(_OWORD *)(v25 - 20) = v27;
                v25 -= 20;
                v13 -= 20;
              }
              while (v13 != v12);
              goto LABEL_51;
            }
            goto LABEL_52;
          }
          *(_DWORD *)unint64_t v13 = a2;
          *((_DWORD *)v13 + 1) = v6;
          *((_DWORD *)v13 + 2) = v9;
          *((_DWORD *)v13 + 3) = v15;
          goto LABEL_4;
        }
      }
      else
      {
        int v14 = *((_DWORD *)v13 - 3);
        if (v8 < 0) {
          goto LABEL_19;
        }
      }
      unint64_t v17 = *(void *)(a3 + 16);
      if ((unint64_t)v13 >= v17)
      {
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 2) + 1;
        if (v18 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_56;
        }
        unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (void)v12) >> 2);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x666666666666666) {
          unint64_t v20 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 > 0xCCCCCCCCCCCCCCCLL) {
            goto LABEL_57;
          }
          std::vector<unsigned int>::size_type v21 = (char *)operator new(20 * v20);
        }
        else
        {
          std::vector<unsigned int>::size_type v21 = 0;
        }
        long long v24 = &v21[4 * ((v13 - v12) >> 2)];
        *(_DWORD *)long long v24 = a2;
        *((_DWORD *)v24 + 1) = v6;
        *((void *)v24 + 1) = -1;
        v24[16] = 0;
        unsigned int v25 = v24;
        if (v12 != v13)
        {
          do
          {
            long long v26 = *(_OWORD *)(v13 - 20);
            *((_DWORD *)v25 - 1) = *((_DWORD *)v13 - 1);
            *(_OWORD *)(v25 - 20) = v26;
            v25 -= 20;
            v13 -= 20;
          }
          while (v13 != v12);
LABEL_51:
          uint64_t v12 = *(char **)a3;
        }
LABEL_52:
        std::vector<unsigned int>::pointer v7 = v24 + 20;
        *(void *)a3 = v25;
        *(void *)(a3 + 8) = v24 + 20;
        *(void *)(a3 + 16) = &v21[20 * v20];
        if (v12) {
          operator delete(v12);
        }
        uint64_t result = v28;
        goto LABEL_5;
      }
      *(_DWORD *)unint64_t v13 = a2;
      *((_DWORD *)v13 + 1) = v6;
      *((void *)v13 + 1) = -1;
LABEL_4:
      std::vector<unsigned int>::pointer v7 = v13 + 20;
      v13[16] = 0;
LABEL_5:
      *(void *)(a3 + 8) = v7;
      v6 += v9;
    }
    while (v6 < v3);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,unsigned int> const&>(float *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            int v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = operator new(0x18uLL);
  *unint64_t v13 = 0;
  v13[1] = v6;
  v13[2] = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v20 = operator new(8 * prime);
    std::vector<unsigned int>::size_type v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    long long v24 = (uint64_t *)(a1 + 4);
    unint64_t v23 = (void *)*((void *)a1 + 2);
    if (!v23) {
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (unint64_t i = (void *)*v23; *v23; unint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          unint64_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          *unint64_t v23 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          unint64_t v23 = i;
          size_t v27 = v29;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    uint64_t v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *unint64_t v23 = *v34;
        uint64_t v35 = 8 * v36;
        *uint64_t v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        uint64_t v34 = v23;
      }
      size_t v36 = v25;
LABEL_64:
      unint64_t v23 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    unint64_t v31 = std::__next_prime(v31);
  }
  else
  {
    uint64_t v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2) {
      unint64_t v31 = v33;
    }
  }
  if (prime <= v31) {
    size_t prime = v31;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      uint64_t v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_72:
  uint64_t v37 = *(void **)a1;
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v6);
  if (v38)
  {
    *unint64_t v13 = *v38;
LABEL_80:
    *uint64_t v38 = v13;
    goto LABEL_81;
  }
  *unint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v6] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_242AA3984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VertexProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
}

void sub_242AA41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, void **a13)
{
  std::mutex::~mutex(a11);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a12);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(a13);
  AGX::HAL200::VertexProgramVariantESLState::~VertexProgramVariantESLState(v14);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v13);
  _Unwind_Resume(a1);
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6)
{
  uint64_t v299 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)(a1 + 76) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 84) = 1610612736;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 124) = 0;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 132) = v8;
  *(_OWORD *)(a1 + 148) = v8;
  *(_OWORD *)(a1 + 164) = v8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 397) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 1;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 492) = 0u;
  *(void *)a1 = &unk_26F852AB8;
  *(void *)(a1 + 600) = a2;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(void *)(a1 + 856) = a1 + 864;
  *(void *)(a1 + 880) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 888) = 1610612736;
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 936) = v8;
  int v9 = (_OWORD *)(a1 + 936);
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 952) = v8;
  *(_OWORD *)(a1 + 968) = v8;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1112) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  unint64_t v10 = a1 + 1120;
  *(void *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_DWORD *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1556) = 0;
  *(unsigned char *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(v10 + 57) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1583) = 0u;
  *(_OWORD *)(a1 + 1599) = 0u;
  *(_OWORD *)(a1 + 1615) = 0u;
  *(void *)(a1 + 1628) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(unsigned char *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(void *)(a1 + 1728) = 0;
  *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a5 + 465);
  *(_WORD *)(a1 + 1738) = 0;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = a1 + 1752;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(void *)(a1 + 1928) = 0;
  if (*(void *)(a3 + 224))
  {
    if (*(void *)(a3 + 232)) {
      unint64_t v11 = (unsigned int **)(a3 + 224);
    }
    else {
      unint64_t v11 = (unsigned int **)(a3 + 784);
    }
  }
  else
  {
    unint64_t v11 = (unsigned int **)(a3 + 784);
  }
  uint64_t v12 = 0;
  if (*v11 && v11[1]) {
    uint64_t v12 = (int *)((char *)*v11 + **v11);
  }
  unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0) {
    unsigned int v292 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
  }
  else {
    unsigned int v292 = 0;
  }
  if (*(void *)(a3 + 464))
  {
    if (*(void *)(a3 + 472)) {
      float v15 = (unsigned int **)(a3 + 464);
    }
    else {
      float v15 = (unsigned int **)(a3 + 1024);
    }
  }
  else
  {
    float v15 = (unsigned int **)(a3 + 1024);
  }
  BOOL v16 = 0;
  if (*v15 && v15[1]) {
    BOOL v16 = (int *)((char *)*v15 + **v15);
  }
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
    unint64_t v19 = (int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
  }
  else {
    unint64_t v19 = 0;
  }
  unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  unsigned int v21 = *v20;
  if (v21 < 0x25)
  {
    LOBYTE(v22) = 0;
  }
  else
  {
    uint64_t v22 = v20[18];
    if (v20[18]) {
      LOBYTE(v22) = *((unsigned char *)v19 + v22) != 0;
    }
  }
  *(unsigned char *)(a1 + 1737) = v22;
  unint64_t v23 = (unsigned __int16 *)((char *)v292 - *v292);
  if (*v23 < 0x55u || (uint64_t v24 = v23[42]) == 0 || !*((unsigned char *)v292 + v24))
  {
LABEL_56:
    uint64_t v35 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v35 < 7u)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      uint64_t v36 = v35[3];
      if (v36) {
        LODWORD(v36) = *(int *)((char *)v19 + v36);
      }
    }
    *(_DWORD *)(a1 + 1104) = v36;
    unsigned int v289 = (std::string *)(a1 + 1168);
    int v290 = (unint64_t *)(a1 + 1144);
    unint64_t v285 = (void **)(a1 + 1560);
    uint64_t v287 = (void *)v10;
    MEMORY[0x24566EB20]();
    uint64_t v37 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
      unint64_t v39 = (char *)v19 + v38 + *(unsigned int *)((char *)v19 + v38) + 4;
    }
    else {
      unint64_t v39 = "";
    }
    MEMORY[0x24566EB20](v290, v39);
    uint64_t v40 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v40 < 0x29u)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      uint64_t v41 = v40[20];
      if (v41) {
        LOBYTE(v41) = *((unsigned char *)v19 + v41) != 0;
      }
    }
    *(unsigned char *)(a1 + 1192) = v41;
    std::string::operator=(v289, a4);
    uint64_t v42 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v42 < 5u || !v42[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_87:
      if (*(void *)(a3 + 344))
      {
        unint64_t v49 = (unsigned int **)(a3 + 344);
        if (!*(void *)(a3 + 352)) {
          unint64_t v49 = (unsigned int **)(a3 + 904);
        }
      }
      else
      {
        unint64_t v49 = (unsigned int **)(a3 + 904);
      }
      uint64_t v296 = v19;
      if (!*v49 || !v49[1])
      {
LABEL_140:
        uint64_t v85 = a3;
        if (*(void *)(a3 + 544))
        {
          unint64_t v86 = (unsigned int **)(a3 + 544);
          if (!*(void *)(a3 + 552)) {
            unint64_t v86 = (unsigned int **)(a3 + 1104);
          }
        }
        else
        {
          unint64_t v86 = (unsigned int **)(a3 + 1104);
        }
        int v88 = *v86;
        uint64_t v87 = v86[1];
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (v89
          || (uint64_t v90 = (int *)((char *)v88 + *v88), v91 = (unsigned __int16 *)((char *)v90 - *v90), *v91 < 5u)
          || (uint64_t v92 = v91[2]) == 0)
        {
          uint64_t v93 = 0;
        }
        else
        {
          uint64_t v93 = *(void *)((char *)v90 + v92);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(a1 + 1776) = (float)(v93
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        uint64_t v94 = (unsigned __int16 *)((char *)v292 - *v292);
        if (*v94 < 5u)
        {
          LODWORD(v95) = 0;
        }
        else
        {
          uint64_t v95 = v94[2];
          if (v95) {
            LODWORD(v95) = *(int *)((char *)v292 + v95);
          }
        }
        *(_DWORD *)(a1 + 1768) = v95;
        int8x8_t v96 = (unsigned __int16 *)((char *)v292 - *v292);
        if (*v96 < 0x2Du)
        {
          LODWORD(v97) = 0;
        }
        else
        {
          uint64_t v97 = v96[22];
          if (v97) {
            LODWORD(v97) = *(int *)((char *)v292 + v97);
          }
        }
        *(_DWORD *)(a1 + 1772) = v97;
        unsigned int v98 = (unsigned __int16 *)((char *)v292 - *v292);
        if (*v98 < 0x35u)
        {
          LODWORD(v99) = 0;
        }
        else
        {
          uint64_t v99 = v98[26];
          if (v99) {
            LODWORD(v99) = *(int *)((char *)v292 + v99);
          }
        }
        *(_DWORD *)(a1 + 1812) = v99;
        BOOL v100 = (unsigned __int16 *)((char *)v292 - *v292);
        if (*v100 < 0x43u)
        {
          LODWORD(v101) = 0;
        }
        else
        {
          uint64_t v101 = v100[33];
          if (v101) {
            LODWORD(v101) = *(int *)((char *)v292 + v101);
          }
        }
        *(_DWORD *)(a1 + 1848) = v101;
        if (*(void *)(a3 + 304))
        {
          int v102 = (unsigned int **)(a3 + 304);
          if (!*(void *)(a3 + 312)) {
            int v102 = (unsigned int **)(a3 + 864);
          }
          uint64_t v103 = *v102;
          if (!*v102)
          {
LABEL_255:
            if (*(void *)(a3 + 424))
            {
              uint64_t v144 = *(void *)(a3 + 432);
              if (v144) {
                uint64_t v145 = *(void *)(a3 + 424);
              }
              else {
                uint64_t v145 = *(void *)(a3 + 984);
              }
              if (v144) {
                uint64_t v146 = a3 + 424;
              }
              else {
                uint64_t v146 = a3 + 984;
              }
            }
            else
            {
              uint64_t v146 = a3 + 984;
              uint64_t v145 = *(void *)(a3 + 984);
            }
            MEMORY[0x24566EB30](a1 + 1912, v145, *(void *)(v146 + 8));
            std::string::push_back((std::string *)(a1 + 1912), 0);
            uint64_t v147 = *v292;
            BOOL v148 = (char *)v292 - v147;
            unsigned int v149 = *(unsigned __int16 *)((char *)v292 - v147);
            if (v149 < 0x39) {
              goto LABEL_281;
            }
            uint64_t v150 = -v147;
            uint64_t v151 = *((unsigned __int16 *)v148 + 28);
            if (v151)
            {
              unint64_t v152 = (int *)((char *)v292 + v151 + *(unsigned int *)((char *)v292 + v151));
              if (*v152)
              {
                *(unsigned char *)(a1 + 1656) = 1;
                uint64_t v153 = (_DWORD *)((char *)v152 + v152[1] + 4);
                uint64_t v154 = (unsigned __int16 *)((char *)v153 - *v153);
                if (*v154 >= 9u && (uint64_t v155 = v154[4]) != 0) {
                  int v156 = *(int *)((char *)v153 + v155);
                }
                else {
                  int v156 = 0;
                }
                *(_DWORD *)(a1 + 1856) = v156;
                *(unsigned char *)(a1 + 1860) = 1;
                uint64_t v157 = *v292;
                uint64_t v150 = -v157;
                unsigned int v149 = *(unsigned __int16 *)((char *)v292 - v157);
              }
            }
            if (v149 < 0x3B) {
              goto LABEL_281;
            }
            uint64_t v158 = (char *)v292 + v150;
            if (*((_WORD *)v158 + 29))
            {
              uint64_t v159 = (unsigned int *)((char *)v292
                                    + *((unsigned __int16 *)v158 + 29)
                                    + *(unsigned int *)((char *)v292 + *((unsigned __int16 *)v158 + 29)));
              uint64_t v160 = *v159;
              if (v160)
              {
                uint64_t v161 = v159 + 1;
                do
                {
                  unsigned int v163 = *v161++;
                  unsigned int v162 = v163;
                  if (!(v163 >> 20)) {
                    *(void *)(a1 + 1640 + 8 * (v162 > 0x3F)) |= 1 << v162;
                  }
                  --v160;
                }
                while (v160);
              }
            }
            if (v149 < 0x57)
            {
LABEL_281:
              LODWORD(v164) = 0;
            }
            else
            {
              uint64_t v164 = *((unsigned __int16 *)v158 + 43);
              if (*((_WORD *)v158 + 43)) {
                LODWORD(v164) = *(int *)((char *)v292 + v164);
              }
            }
            *(_DWORD *)(a1 + 992) = v164;
            uint64_t v165 = (unsigned __int16 *)((char *)v292 - *v292);
            if (*v165 >= 0x21u && (uint64_t v166 = v165[16]) != 0) {
              int v167 = *(int *)((char *)v292 + v166);
            }
            else {
              int v167 = 0;
            }
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(a1 + 996) = getAdditionalSpillBufferBytes(void)::extra + v167;
            unsigned int v168 = (unsigned __int16 *)((char *)v292 - *v292);
            if (*v168 < 0x59u)
            {
              LODWORD(v169) = 0;
            }
            else
            {
              uint64_t v169 = v168[44];
              if (v169) {
                LODWORD(v169) = *(int *)((char *)v292 + v169);
              }
            }
            *(_DWORD *)(a1 + 1024) = v169;
            uint64_t v170 = (unsigned __int16 *)((char *)v292 - *v292);
            if (*v170 < 0x51u)
            {
              LODWORD(v171) = 0;
            }
            else
            {
              uint64_t v171 = v170[40];
              if (v171) {
                LODWORD(v171) = *(int *)((char *)v292 + v171);
              }
            }
            *(_DWORD *)(a1 + 1028) = v171;
            unsigned int v172 = (unsigned __int16 *)((char *)v292 - *v292);
            if (*v172 < 0x4Bu)
            {
              LODWORD(v173) = 0;
            }
            else
            {
              uint64_t v173 = v172[37];
              if (v173) {
                LODWORD(v173) = *(int *)((char *)v292 + v173);
              }
            }
            *(_DWORD *)(a1 + 1036) = v173;
            int v174 = (unsigned __int16 *)((char *)v292 - *v292);
            unsigned int v175 = *v174;
            if (v175 >= 0x25)
            {
              if (v174[18] && *((unsigned char *)v292 + v174[18]))
              {
                if (v175 < 0x27)
                {
                  LOBYTE(v176) = 0;
                  BOOL v177 = 1;
                  goto LABEL_318;
                }
                LODWORD(v176) = v174[19];
                BOOL v177 = 1;
                if (!v174[19])
                {
LABEL_318:
                  *(unsigned char *)(a1 + 1046) = v176;
                  uint64_t v180 = (unsigned __int16 *)((char *)v19 - *v19);
                  unsigned int v181 = *v180;
                  if (v181 < 0x21)
                  {
                    uint64_t v183 = 0;
                    LODWORD(v182) = 0;
                  }
                  else
                  {
                    uint64_t v182 = v180[16];
                    if (v180[16]) {
                      LODWORD(v182) = *(int *)((char *)v19 + v182);
                    }
                    if (v181 < 0x4D)
                    {
                      uint64_t v183 = 0;
                    }
                    else
                    {
                      uint64_t v183 = v180[38];
                      if (v180[38]) {
                        uint64_t v183 = *(unsigned int *)((char *)v19 + v183);
                      }
                      if (v181 >= 0x4F)
                      {
                        uint64_t v184 = v180[39];
                        if (v184) {
                          uint64_t v184 = *(void *)((char *)v19 + v184);
                        }
LABEL_330:
                        *(void *)(a1 + 1088) = v182 | (unint64_t)(v183 << 32);
                        *(void *)(a1 + 1096) = v184;
                        *(unsigned char *)(a1 + 1050) = v177 | v176;
                        uint64_t v185 = *v292;
                        unint64_t v186 = (char *)v292 - v185;
                        unsigned int v187 = *(unsigned __int16 *)((char *)v292 - v185);
                        if (v187 < 0x37)
                        {
                          LOBYTE(v188) = 0;
                        }
                        else
                        {
                          uint64_t v188 = *((unsigned __int16 *)v186 + 27);
                          if (*((_WORD *)v186 + 27)) {
                            LOBYTE(v188) = *((unsigned char *)v292 + v188) != 0;
                          }
                        }
                        *(unsigned char *)(a1 + 1045) = v188;
                        int v189 = (unsigned __int16 *)((char *)v19 - *v19);
                        unsigned int v190 = *v189;
                        if (v190 < 0x33)
                        {
                          LOBYTE(v191) = 0;
                        }
                        else
                        {
                          uint64_t v191 = v189[25];
                          if (v189[25]) {
                            LOBYTE(v191) = *((unsigned char *)v19 + v191) != 0;
                          }
                        }
                        uint64_t v192 = -v185;
                        *(unsigned char *)(a1 + 1051) = v191;
                        if (v187 < 0x3F)
                        {
                          LOBYTE(v193) = 0;
                        }
                        else
                        {
                          uint64_t v193 = *((unsigned __int16 *)v186 + 31);
                          if (v193)
                          {
                            unint64_t v194 = (unsigned int *)((char *)v292 + v193 + *(unsigned int *)((char *)v292 + v193));
                            uint64_t v193 = *v194;
                            if (v193)
                            {
                              uint64_t v195 = v194 + 1;
                              while (1)
                              {
                                unsigned int v197 = *v195++;
                                char v196 = v197;
                                if (v197 < 0x36 && ((0x3F000000000777uLL >> v196) & 1) != 0) {
                                  break;
                                }
                                if (!--v193) {
                                  goto LABEL_347;
                                }
                              }
                              LOBYTE(v193) = 1;
                            }
                          }
                        }
LABEL_347:
                        *(unsigned char *)(a1 + 1053) = v193;
                        if (v190 <= 0x14)
                        {
                          *(unsigned char *)(a1 + 1047) = 0;
                          *(unsigned char *)(a1 + 1737) = 0;
                          *(unsigned char *)(a1 + 1739) = 0;
                          if (v187 >= 0x21) {
                            goto LABEL_382;
                          }
LABEL_385:
                          int v219 = 0;
                          goto LABEL_386;
                        }
                        uint64_t v198 = v189[10];
                        if (v189[10]) {
                          LOBYTE(v198) = *((unsigned char *)v19 + v198) != 0;
                        }
                        *(unsigned char *)(a1 + 1047) = v198;
                        if (v190 < 0x25)
                        {
                          *(unsigned char *)(a1 + 1737) = 0;
                          if (v190 < 0x23) {
                            goto LABEL_380;
                          }
                        }
                        else
                        {
                          uint64_t v199 = v189[18];
                          if (v189[18]) {
                            LOBYTE(v199) = *((unsigned char *)v19 + v199) != 0;
                          }
                          *(unsigned char *)(a1 + 1737) = v199;
                        }
                        uint64_t v200 = v189[17];
                        if (v200)
                        {
                          *(unsigned char *)(a1 + 1739) = 1;
                          int v201 = (unsigned int *)((char *)v19 + v200);
                          uint64_t v202 = *v201;
                          unint64_t v204 = (unsigned int *)((char *)v201 + v202 + 4);
                          uint64_t v203 = *(unsigned int *)((char *)v201 + v202);
                          if (v203)
                          {
                            uint64_t v205 = &v204[v203];
                            while (1)
                            {
                              uint64_t v206 = (int *)((char *)v204 + *v204);
                              unsigned int v207 = (unsigned __int16 *)((char *)v206 - *v206);
                              unsigned int v208 = *v207;
                              if (v208 < 7)
                              {
                                int v209 = 0;
                                unsigned int v211 = 0;
                                if (v208 < 5) {
                                  goto LABEL_369;
                                }
                                uint64_t v210 = v207[2];
                                if (!v210) {
                                  goto LABEL_365;
                                }
                              }
                              else if (v207[3])
                              {
                                int v209 = *(int *)((char *)v206 + v207[3]);
                                uint64_t v210 = v207[2];
                                if (!v210) {
                                  goto LABEL_365;
                                }
                              }
                              else
                              {
                                int v209 = 0;
                                uint64_t v210 = v207[2];
                                if (!v210)
                                {
LABEL_365:
                                  unsigned int v211 = 0;
                                  goto LABEL_369;
                                }
                              }
                              unsigned int v211 = *(int *)((char *)v206 + v210);
LABEL_369:
                              unsigned int v212 = (uint64_t **)(a1 + 1752);
LABEL_370:
                              unsigned int v213 = *v212;
                              unsigned int v214 = v212;
                              if (*v212)
                              {
                                while (1)
                                {
                                  unsigned int v212 = (uint64_t **)v213;
                                  unsigned int v215 = *((_DWORD *)v213 + 7);
                                  if (v211 < v215) {
                                    goto LABEL_370;
                                  }
                                  if (v215 >= v211) {
                                    break;
                                  }
                                  unsigned int v213 = v212[1];
                                  if (!v213)
                                  {
                                    unsigned int v214 = v212 + 1;
                                    goto LABEL_375;
                                  }
                                }
                                uint64_t v216 = v212;
                              }
                              else
                              {
LABEL_375:
                                uint64_t v216 = operator new(0x28uLL);
                                v216[7] = v211;
                                v216[8] = 0;
                                *(void *)uint64_t v216 = 0;
                                *((void *)v216 + 1) = 0;
                                *((void *)v216 + 2) = v212;
                                *unsigned int v214 = (uint64_t *)v216;
                                uint64_t v217 = **(void **)(a1 + 1744);
                                int v218 = (uint64_t *)v216;
                                if (v217)
                                {
                                  *(void *)(a1 + 1744) = v217;
                                  int v218 = *v214;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1752), v218);
                                ++*(void *)(a1 + 1760);
                              }
                              v216[8] = v209;
                              ++v204;
                              unint64_t v19 = v296;
                              if (v204 == v205)
                              {
                                uint64_t v220 = *v292;
                                uint64_t v192 = -v220;
                                uint64_t v85 = a3;
                                if (*(unsigned __int16 *)((char *)v292 - v220) < 0x21u) {
                                  goto LABEL_385;
                                }
LABEL_382:
                                if (!*(_WORD *)((char *)v292 + v192 + 32)) {
                                  goto LABEL_385;
                                }
                                int v219 = *(int *)((char *)v292 + *(unsigned __int16 *)((char *)v292 + v192 + 32));
LABEL_386:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                int v221 = getAdditionalSpillBufferBytes(void)::extra + v219;
                                *(_DWORD *)(a1 + 988) = getAdditionalSpillBufferBytes(void)::extra + v219;
                                unsigned int v222 = (unsigned __int16 *)((char *)v292 - *v292);
                                if (*v222 < 0x43u)
                                {
                                  LODWORD(v223) = 0;
                                }
                                else
                                {
                                  uint64_t v223 = v222[33];
                                  if (v223) {
                                    LODWORD(v223) = *(int *)((char *)v292 + v223);
                                  }
                                }
                                *(_DWORD *)(a1 + 1000) = v223;
                                unsigned int v224 = (unsigned __int16 *)((char *)v292 - *v292);
                                if (*v224 < 5u)
                                {
                                  LODWORD(v225) = 0;
                                }
                                else
                                {
                                  uint64_t v225 = v224[2];
                                  if (v225) {
                                    LODWORD(v225) = *(int *)((char *)v292 + v225);
                                  }
                                }
                                *(_DWORD *)(a1 + 984) = v225;
                                uint64_t v226 = (unsigned __int16 *)((char *)v292 - *v292);
                                if (*v226 < 0x51u)
                                {
                                  LODWORD(v227) = 0;
                                }
                                else
                                {
                                  uint64_t v227 = v226[40];
                                  if (v227) {
                                    LODWORD(v227) = *(int *)((char *)v292 + v227);
                                  }
                                }
                                *(_DWORD *)(a1 + 1020) = v227;
                                int v228 = (unsigned __int16 *)((char *)v292 - *v292);
                                if (*v228 < 0x4Fu)
                                {
                                  LODWORD(v229) = 0;
                                }
                                else
                                {
                                  uint64_t v229 = v228[39];
                                  if (v229) {
                                    LODWORD(v229) = *(int *)((char *)v292 + v229);
                                  }
                                }
                                *(_DWORD *)(a1 + 1032) = v229;
                                *(_DWORD *)(a1 + 1040) = *(_DWORD *)(a5 + 468);
                                uint64_t v230 = (unsigned __int16 *)((char *)v292 - *v292);
                                if (*(int *)((char *)v292 + v230[6] + *(unsigned int *)((char *)v292 + v230[6])) | v221) {
                                  char v231 = 1;
                                }
                                else {
                                  char v231 = v177;
                                }
                                if (v231) {
                                  goto LABEL_418;
                                }
                                unsigned int v232 = *v230;
                                if (v232 < 0x21)
                                {
                                  int v233 = 0;
                                }
                                else if (v230[16])
                                {
                                  int v233 = *(int *)((char *)v292 + v230[16]);
                                  if (v232 >= 0x43)
                                  {
LABEL_496:
                                    if (v230[33])
                                    {
                                      int v234 = *(int *)((char *)v292 + v230[33]);
                                      goto LABEL_413;
                                    }
                                  }
                                }
                                else
                                {
                                  int v233 = 0;
                                  if (v232 >= 0x43) {
                                    goto LABEL_496;
                                  }
                                }
                                int v234 = 0;
LABEL_413:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                if (v234 + v233 + getAdditionalSpillBufferBytes(void)::extra)
                                {
LABEL_418:
                                  LOBYTE(v236) = 1;
                                }
                                else
                                {
                                  int v235 = (unsigned __int16 *)((char *)v292 - *v292);
                                  if (*v235 < 0x5Fu)
                                  {
                                    LOBYTE(v236) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v236 = v235[47];
                                    if (v236) {
                                      LOBYTE(v236) = *((unsigned char *)v292 + v236) != 0;
                                    }
                                  }
                                }
                                *(unsigned char *)(a1 + 1044) = v236;
                                uint64_t v237 = (unsigned __int16 *)((char *)v19 - *v19);
                                if (*v237 < 0x11u)
                                {
                                  LODWORD(v238) = 0;
                                }
                                else
                                {
                                  uint64_t v238 = v237[8];
                                  if (v238) {
                                    LODWORD(v238) = *(int *)((char *)v19 + v238);
                                  }
                                }
                                *(_DWORD *)(a1 + 1552) = v238;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                uint64_t v239 = a2 + 5184;
                                int v240 = (_OWORD *)(a1 + 1408);
                                int v241 = (const void **)(v85 + 24);
                                if (*(void *)(v85 + 24))
                                {
                                  if (*(void *)(v85 + 32)) {
                                    uint64_t v242 = v85 + 24;
                                  }
                                  else {
                                    uint64_t v242 = v85 + 584;
                                  }
                                }
                                else
                                {
                                  uint64_t v242 = v85 + 584;
                                }
                                uint64_t v243 = *(void *)(v242 + 8)
                                     + AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space;
                                uint64_t v244 = 168;
                                if (a6) {
                                  uint64_t v244 = 504;
                                }
                                uint64_t v245 = v239 + v244;
                                if (a6) {
                                  uint64_t v246 = 0x1000000000;
                                }
                                else {
                                  uint64_t v246 = 0;
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v245, v243, (void *)(a1 + 1608));
                                *(_DWORD *)(a1 + 1632) += *(_DWORD *)&__dst[16];
                                long long v247 = *(_OWORD *)&__dst[16];
                                *int v240 = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1424) = v247;
                                *(_OWORD *)(a1 + 1433) = *(_OWORD *)&__dst[25];
                                *(void *)(a1 + 1200) = *(void *)(a1 + 1408) + v246;
                                *(void *)(a1 + 1232) = v245;
                                long long v248 = *(_OWORD *)(a1 + 1424);
                                *(_OWORD *)(a1 + 1240) = *v240;
                                *(_OWORD *)(a1 + 1256) = v248;
                                *(_OWORD *)(a1 + 1265) = *(_OWORD *)(a1 + 1433);
                                if (*v241)
                                {
                                  unsigned int v249 = (void *)a3;
                                  uint64_t v250 = *(void *)(a3 + 32);
                                  if (v250) {
                                    uint64_t v251 = *v241;
                                  }
                                  else {
                                    uint64_t v251 = *(const void **)(a3 + 584);
                                  }
                                  if (v250) {
                                    uint64_t v252 = v241;
                                  }
                                  else {
                                    uint64_t v252 = (const void **)(a3 + 584);
                                  }
                                }
                                else
                                {
                                  unsigned int v249 = (void *)a3;
                                  uint64_t v252 = (const void **)(a3 + 584);
                                  uint64_t v251 = *(const void **)(a3 + 584);
                                }
                                memcpy(*(void **)(a1 + 1416), v251, (size_t)v252[1]);
                                uint64_t v253 = *(void *)(a1 + 1416);
                                uint64_t v254 = *(void *)(a1 + 1424);
                                *(void *)(a1 + 1208) = *(void *)(a1 + 1200);
                                *(void *)(a1 + 1216) = v253;
                                *(void *)(a1 + 1224) = v254;
                                uint64_t v255 = (const void **)(v249 + 8);
                                if (v249[8])
                                {
                                  if (v249[9]) {
                                    uint64_t v256 = v249 + 8;
                                  }
                                  else {
                                    uint64_t v256 = v249 + 78;
                                  }
                                  uint64_t v257 = v256[1];
                                  if (!v257) {
                                    goto LABEL_458;
                                  }
                                }
                                else
                                {
                                  uint64_t v257 = v249[79];
                                  if (!v257) {
                                    goto LABEL_458;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v239, v257, (void *)(a1 + 1616));
                                *(_DWORD *)(a1 + 1632) += *(_DWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1456) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1472) = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1481) = *(_OWORD *)&__dst[25];
                                long long v258 = *(_OWORD *)(a1 + 1472);
                                *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1456);
                                *(_OWORD *)(a1 + 1304) = v258;
                                *(_OWORD *)(a1 + 1313) = *(_OWORD *)(a1 + 1481);
                                if (*v255)
                                {
                                  uint64_t v259 = v249[9];
                                  if (v259) {
                                    uint64_t v260 = *v255;
                                  }
                                  else {
                                    uint64_t v260 = (const void *)v249[78];
                                  }
                                  if (v259) {
                                    int v261 = v249 + 8;
                                  }
                                  else {
                                    int v261 = v249 + 78;
                                  }
                                }
                                else
                                {
                                  int v261 = v249 + 78;
                                  uint64_t v260 = (const void *)v249[78];
                                }
                                memcpy(*(void **)(a1 + 1464), v260, v261[1]);
LABEL_458:
                                int v262 = (const void **)(v249 + 13);
                                if (v249[13])
                                {
                                  if (v249[14]) {
                                    uint64_t v263 = v249 + 13;
                                  }
                                  else {
                                    uint64_t v263 = v249 + 83;
                                  }
                                  uint64_t v264 = v263[1];
                                  if (!v264) {
                                    goto LABEL_474;
                                  }
                                }
                                else
                                {
                                  uint64_t v264 = v249[84];
                                  if (!v264) {
                                    goto LABEL_474;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v239, v264, (void *)(a1 + 1624));
                                *(_DWORD *)(a1 + 1632) += *(_DWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1504) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1520) = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1529) = *(_OWORD *)&__dst[25];
                                long long v265 = *(_OWORD *)(a1 + 1520);
                                *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 1504);
                                *(_OWORD *)(a1 + 1352) = v265;
                                *(_OWORD *)(a1 + 1361) = *(_OWORD *)(a1 + 1529);
                                if (*v262)
                                {
                                  uint64_t v266 = v249[14];
                                  if (v266) {
                                    int v267 = *v262;
                                  }
                                  else {
                                    int v267 = (const void *)v249[83];
                                  }
                                  if (v266) {
                                    unint64_t v268 = v249 + 13;
                                  }
                                  else {
                                    unint64_t v268 = v249 + 83;
                                  }
                                }
                                else
                                {
                                  unint64_t v268 = v249 + 83;
                                  int v267 = (const void *)v249[83];
                                }
                                memcpy(*(void **)(a1 + 1512), v267, v268[1]);
                                uint64_t v269 = *(void *)(a1 + 1520);
                                *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a1 + 1504);
                                *(void *)(a1 + 1400) = v269;
LABEL_474:
                                if (*(unsigned char *)(a1 + 1192) || *(unsigned char *)(*(void *)(a1 + 600) + 7761))
                                {
                                  {
                                    {
                                      int v271 = v287;
                                      if (*(char *)(a1 + 1143) < 0) {
                                        int v271 = (void *)*v287;
                                      }
                                      unint64_t v272 = a1 + 1168;
                                      if (*(char *)(a1 + 1191) < 0) {
                                        unint64_t v272 = v289->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v273 = a1 + 1144;
                                      if (*(char *)(a1 + 1167) < 0) {
                                        unint64_t v273 = *v290;
                                      }
                                      int v274 = *(_DWORD *)(a1 + 1104);
                                      uint64_t v275 = *(void *)(a1 + 1200);
                                      uint64_t v276 = *(void *)(a1 + 1424);
                                      *(_DWORD *)__dst = 136447490;
                                      *(void *)&__dst[4] = v271;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v272;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v273;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v274;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v275;
                                      v298[0] = 2050;
                                      *(void *)&v298[1] = v276;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v270, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  unsigned int v277 = v287;
                                  if (*(char *)(a1 + 1143) < 0) {
                                    unsigned int v277 = (void *)*v287;
                                  }
                                  uint64_t v278 = *(void *)(a1 + 600);
                                  unint64_t v279 = a1 + 1168;
                                  if (*(char *)(a1 + 1191) < 0) {
                                    unint64_t v279 = v289->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v280 = a1 + 1144;
                                  if (*(char *)(a1 + 1167) < 0) {
                                    unint64_t v280 = *v290;
                                  }
                                  int v281 = *(_DWORD *)(a1 + 1104);
                                  uint64_t v282 = *(void *)(a1 + 1200);
                                  uint64_t v283 = *(void *)(a1 + 1424);
                                  char v284 = *(unsigned char *)(a1 + 1192);
                                  *(void *)__dst = v277;
                                  *(void *)&__dst[8] = v279;
                                  *(void *)&__dst[16] = v280;
                                  *(_DWORD *)&__dst[24] = v281;
                                  *(void *)&__dst[32] = v282;
                                  *(void *)&__dst[40] = v283;
                                  LOBYTE(v298[0]) = v284;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v278, a1, (long long *)__dst);
                                }
                                operator new();
                              }
                            }
                          }
LABEL_381:
                          if (v187 < 0x21) {
                            goto LABEL_385;
                          }
                          goto LABEL_382;
                        }
LABEL_380:
                        *(unsigned char *)(a1 + 1739) = 0;
                        goto LABEL_381;
                      }
                    }
                  }
                  uint64_t v184 = 0;
                  goto LABEL_330;
                }
                goto LABEL_316;
              }
              if (v175 >= 0x27)
              {
                uint64_t v176 = v174[19];
                if (v174[19])
                {
                  int v178 = *((unsigned __int8 *)v292 + v176);
                  if (*((unsigned char *)v292 + v176))
                  {
                    BOOL v177 = 1;
LABEL_317:
                    LOBYTE(v176) = v178 != 0;
                    goto LABEL_318;
                  }
                }
                if (v175 >= 0x29 && (uint64_t v179 = v174[20]) != 0)
                {
                  BOOL v177 = *((unsigned char *)v292 + v179) != 0;
                  if (!v176) {
                    goto LABEL_318;
                  }
                }
                else
                {
                  BOOL v177 = 0;
                  if (!v176) {
                    goto LABEL_318;
                  }
                }
LABEL_316:
                int v178 = *((unsigned __int8 *)v292 + v176);
                goto LABEL_317;
              }
            }
            BOOL v177 = 0;
            LOBYTE(v176) = 0;
            goto LABEL_318;
          }
        }
        else
        {
          int v102 = (unsigned int **)(a3 + 864);
          uint64_t v103 = *(unsigned int **)(a3 + 864);
          if (!v103) {
            goto LABEL_255;
          }
        }
        if (v102[1])
        {
          int v104 = (int *)((char *)v103 + *v103);
          unsigned int v105 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v105 < 0xDu)
          {
            LODWORD(v106) = 0;
          }
          else
          {
            uint64_t v106 = v105[6];
            if (v106) {
              LODWORD(v106) = *(int *)((char *)v104 + v106);
            }
          }
          *(_DWORD *)(a1 + 1772) = v106;
          int v107 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v107 < 0xBu)
          {
            LODWORD(v108) = 0;
          }
          else
          {
            uint64_t v108 = v107[5];
            if (v108) {
              LODWORD(v108) = *(int *)((char *)v104 + v108);
            }
          }
          *(_DWORD *)(a1 + 1780) = v108;
          unsigned int v109 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v109 < 0x11u)
          {
            LODWORD(v110) = 0;
          }
          else
          {
            uint64_t v110 = v109[8];
            if (v110) {
              LODWORD(v110) = *(int *)((char *)v104 + v110);
            }
          }
          *(_DWORD *)(a1 + 1784) = v110;
          uint64_t v111 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v111 < 0x13u)
          {
            LODWORD(v112) = 0;
          }
          else
          {
            uint64_t v112 = v111[9];
            if (v112) {
              LODWORD(v112) = *(int *)((char *)v104 + v112);
            }
          }
          *(_DWORD *)(a1 + 1788) = v112;
          uint64_t v113 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v113 < 0x17u)
          {
            LODWORD(v114) = 0;
          }
          else
          {
            uint64_t v114 = v113[11];
            if (v114) {
              LODWORD(v114) = *(int *)((char *)v104 + v114);
            }
          }
          *(_DWORD *)(a1 + 1792) = v114;
          uint64_t v115 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v115 < 0x1Bu)
          {
            LODWORD(v116) = 0;
          }
          else
          {
            uint64_t v116 = v115[13];
            if (v116) {
              LODWORD(v116) = *(int *)((char *)v104 + v116);
            }
          }
          *(_DWORD *)(a1 + 1796) = v116;
          unint64_t v117 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v117 < 0x15u)
          {
            LODWORD(v118) = 0;
          }
          else
          {
            uint64_t v118 = v117[10];
            if (v118) {
              LODWORD(v118) = *(int *)((char *)v104 + v118);
            }
          }
          *(_DWORD *)(a1 + 1800) = v118;
          unint64_t v119 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v119 < 0x19u)
          {
            LODWORD(v120) = 0;
          }
          else
          {
            uint64_t v120 = v119[12];
            if (v120) {
              LODWORD(v120) = *(int *)((char *)v104 + v120);
            }
          }
          *(_DWORD *)(a1 + 1804) = v120;
          unint64_t v121 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v121 < 0x1Du)
          {
            LODWORD(v122) = 0;
          }
          else
          {
            uint64_t v122 = v121[14];
            if (v122) {
              LODWORD(v122) = *(int *)((char *)v104 + v122);
            }
          }
          *(_DWORD *)(a1 + 1808) = v122;
          unint64_t v123 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v123 < 0xFu)
          {
            LODWORD(v124) = 0;
          }
          else
          {
            uint64_t v124 = v123[7];
            if (v124) {
              LODWORD(v124) = *(int *)((char *)v104 + v124);
            }
          }
          *(_DWORD *)(a1 + 1812) = v124;
          uint64_t v125 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v125 < 0x1Fu)
          {
            LODWORD(v126) = 0;
          }
          else
          {
            uint64_t v126 = v125[15];
            if (v126) {
              LODWORD(v126) = *(int *)((char *)v104 + v126);
            }
          }
          *(_DWORD *)(a1 + 1816) = v126;
          uint64_t v127 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v127 < 0x21u)
          {
            LODWORD(v128) = 0;
          }
          else
          {
            uint64_t v128 = v127[16];
            if (v128) {
              LODWORD(v128) = *(int *)((char *)v104 + v128);
            }
          }
          *(_DWORD *)(a1 + 1820) = v128;
          unint64_t v129 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v129 < 0x23u)
          {
            LODWORD(v130) = 0;
          }
          else
          {
            uint64_t v130 = v129[17];
            if (v130) {
              LODWORD(v130) = *(int *)((char *)v104 + v130);
            }
          }
          *(_DWORD *)(a1 + 1824) = v130;
          unsigned int v131 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v131 < 0x25u)
          {
            LODWORD(v132) = 0;
          }
          else
          {
            uint64_t v132 = v131[18];
            if (v132) {
              LODWORD(v132) = *(int *)((char *)v104 + v132);
            }
          }
          *(_DWORD *)(a1 + 1828) = v132;
          uint64_t v133 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v133 < 0x27u)
          {
            LODWORD(v134) = 0;
          }
          else
          {
            uint64_t v134 = v133[19];
            if (v134) {
              LODWORD(v134) = *(int *)((char *)v104 + v134);
            }
          }
          *(_DWORD *)(a1 + 1832) = v134;
          uint64_t v135 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v135 < 0x29u)
          {
            LODWORD(v136) = 0;
          }
          else
          {
            uint64_t v136 = v135[20];
            if (v136) {
              LODWORD(v136) = *(int *)((char *)v104 + v136);
            }
          }
          *(_DWORD *)(a1 + 1836) = v136;
          uint64_t v137 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v137 < 0x2Bu)
          {
            LODWORD(v138) = 0;
          }
          else
          {
            uint64_t v138 = v137[21];
            if (v138) {
              LODWORD(v138) = *(int *)((char *)v104 + v138);
            }
          }
          *(_DWORD *)(a1 + 1840) = v138;
          uint64_t v139 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v139 < 7u)
          {
            LODWORD(v140) = 0;
          }
          else
          {
            uint64_t v140 = v139[3];
            if (v140) {
              LODWORD(v140) = *(int *)((char *)v104 + v140);
            }
          }
          *(_DWORD *)(a1 + 1844) = v140;
          unsigned int v141 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v141 >= 5u && (uint64_t v142 = v141[2]) != 0) {
            int v143 = *(int *)((char *)v104 + v142);
          }
          else {
            int v143 = 0;
          }
          *(_DWORD *)(a1 + 1852) = v143;
        }
        goto LABEL_255;
      }
      uint64_t v50 = (int *)((char *)*v49 + **v49);
      unint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
      unsigned int v52 = *v51;
      if (v51[2])
      {
        uint64_t v53 = (int *)((char *)v50 + v51[2] + *(unsigned int *)((char *)v50 + v51[2]));
        if (v52 < 7) {
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v53 = 0;
        if (v52 < 7) {
          goto LABEL_101;
        }
      }
      uint64_t v54 = v51[3];
      if (v54)
      {
        uint64_t v55 = (char *)v50 + v54 + *(unsigned int *)((char *)v50 + v54);
        if (!*v53) {
          goto LABEL_140;
        }
        goto LABEL_102;
      }
LABEL_101:
      uint64_t v55 = 0;
      if (!*v53) {
        goto LABEL_140;
      }
LABEL_102:
      uint64_t v56 = 0;
      unint64_t v294 = v55 + 4;
      unint64_t v295 = v53 + 1;
      while (1)
      {
        uint64_t v58 = (char *)&v295[v56 + 1] + v295[v56];
        size_t v59 = strlen(v58);
        if (v59 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v60 = v59;
        if (v59 >= 0x17) {
          break;
        }
        __dst[23] = v59;
        uint64_t v61 = __dst;
        if (v59) {
          goto LABEL_112;
        }
LABEL_113:
        v61[v60] = 0;
        unint64_t v64 = *(void *)(a1 + 1872);
        if (v64 >= *(void *)(a1 + 1880))
        {
          uint8x8_t v65 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1864), (uint64_t)__dst);
          int v66 = __dst[23];
          *(void *)(a1 + 1872) = v65;
          if (v66 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v64 = *(_OWORD *)__dst;
          *(void *)(v64 + 16) = *(void *)&__dst[16];
          *(void *)(a1 + 1872) = v64 + 24;
        }
        int v67 = *(_DWORD *)&v294[4 * v56];
        uint64_t v68 = *(char **)(a1 + 1896);
        unint64_t v69 = *(void *)(a1 + 1904);
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v70 = v53;
          uint64_t v71 = *(char **)(a1 + 1888);
          uint64_t v72 = (v68 - v71) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            abort();
          }
          uint64_t v74 = v69 - (void)v71;
          if (v74 >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            if (v75 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v76 = operator new(4 * v75);
          }
          else
          {
            uint64_t v76 = 0;
          }
          uint64_t v77 = &v76[4 * v72];
          *uint64_t v77 = v67;
          BOOL v57 = v77 + 1;
          if (v68 == v71)
          {
            unint64_t v19 = v296;
          }
          else
          {
            unint64_t v78 = v68 - 4 - v71;
            if (v78 < 0x2C)
            {
              unint64_t v19 = v296;
              goto LABEL_136;
            }
            unint64_t v19 = v296;
            if ((unint64_t)(v71 - v76) < 0x20) {
              goto LABEL_512;
            }
            uint64_t v79 = (v78 >> 2) + 1;
            int v80 = &v76[4 * v72 - 16];
            uint64_t v81 = v68 - 16;
            uint64_t v82 = v79 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v83 = *(_OWORD *)v81;
              *(v80 - 1) = *((_OWORD *)v81 - 1);
              _OWORD *v80 = v83;
              v80 -= 2;
              v81 -= 32;
              v82 -= 8;
            }
            while (v82);
            v77 -= v79 & 0x7FFFFFFFFFFFFFF8;
            v68 -= 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
            if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_512:
              do
              {
LABEL_136:
                int v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *--uint64_t v77 = v84;
              }
              while (v68 != v71);
            }
          }
          *(void *)(a1 + 1888) = v77;
          *(void *)(a1 + 1896) = v57;
          *(void *)(a1 + 1904) = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
          uint64_t v53 = v70;
          goto LABEL_104;
        }
        *(_DWORD *)uint64_t v68 = v67;
        BOOL v57 = v68 + 4;
LABEL_104:
        *(void *)(a1 + 1896) = v57;
        if (++v56 >= (unint64_t)*v53) {
          goto LABEL_140;
        }
      }
      uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v59 | 7) != 0x17) {
        uint64_t v62 = v59 | 7;
      }
      uint64_t v63 = v62 + 1;
      uint64_t v61 = operator new(v62 + 1);
      *(void *)&__dst[8] = v60;
      *(void *)&__dst[16] = v63 | 0x8000000000000000;
      *(void *)__dst = v61;
LABEL_112:
      memmove(v61, v58, v60);
      goto LABEL_113;
    }
    size_t v43 = *(void *)(a3 + 8);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v44 = *(const void **)a3;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint64_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v43;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)__dst = v45;
    }
    else
    {
      __dst[23] = *(void *)(a3 + 8);
      uint64_t v45 = __dst;
      if (!v43) {
        goto LABEL_79;
      }
    }
    memmove(v45, v44, v43);
LABEL_79:
    v45[v43] = 0;
    if (*(char *)(a1 + 1583) < 0) {
      operator delete(*v285);
    }
    *(_OWORD *)unint64_t v285 = *(_OWORD *)__dst;
    *(void *)(a1 + 1576) = *(void *)&__dst[16];
    uint64_t v48 = (void *)(a3 + 24);
    if (*(void *)(a3 + 24))
    {
      if (!*(void *)(a3 + 32)) {
        uint64_t v48 = (void *)(a3 + 584);
      }
    }
    else
    {
      uint64_t v48 = (void *)(a3 + 584);
    }
    *(void *)(a1 + 1584) = *v48 - *(void *)a3;
    goto LABEL_87;
  }
  if (v21 < 0x45)
  {
    if (v21 < 0x3D)
    {
      LOWORD(v26) = 0;
      if (v21 < 0x3B)
      {
        LODWORD(v28) = 0;
        uint64_t v27 = 0;
        LOWORD(v25) = 0;
        LOBYTE(v29) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 880) = v28;
        __int16 v30 = v26 + v28 - 1;
        int v31 = -(int)v28;
        uint64_t v32 = *(void *)(a1 + 888);
        unint64_t v33 = (unsigned __int16)v25 | ((unint64_t)(unsigned __int16)(v31 & v30) << 32) | (v27 << 48) | (v29 << 16) | (unint64_t)(v32 & 0xFF000000);
        *(void *)(a1 + 888) = v33;
        if (v33 != v32)
        {
          *(void *)(a1 + 928) = 0;
          *(_OWORD *)(a1 + 896) = 0uLL;
          *(_OWORD *)(a1 + 912) = 0uLL;
          *(void *)&long long v34 = -1;
          *((void *)&v34 + 1) = -1;
          *int v9 = v34;
          v9[1] = v34;
          v9[2] = v34;
        }
        goto LABEL_56;
      }
      LOWORD(v25) = 0;
      uint64_t v27 = v20[29];
      if (!v20[29])
      {
LABEL_39:
        if (v21 < 0x3F)
        {
          LODWORD(v28) = 0;
          LOBYTE(v29) = 0;
        }
        else
        {
          uint64_t v28 = v20[31];
          if (v20[31]) {
            uint64_t v28 = *(void *)((char *)v19 + v28);
          }
          if (v21 < 0x4B)
          {
            LOBYTE(v29) = 0;
          }
          else
          {
            uint64_t v29 = v20[37];
            if (v29) {
              LODWORD(v29) = *(int *)((char *)v19 + v29);
            }
          }
        }
        goto LABEL_54;
      }
LABEL_38:
      uint64_t v27 = *(void *)((char *)v19 + v27);
      goto LABEL_39;
    }
    LOWORD(v25) = 0;
    uint64_t v26 = v20[30];
    if (v20[30]) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v25 = v20[34];
    if (v20[34]) {
      uint64_t v25 = *(void *)((char *)v19 + v25);
    }
    uint64_t v26 = v20[30];
    if (v20[30]) {
LABEL_36:
    }
      uint64_t v26 = *(void *)((char *)v19 + v26);
  }
  uint64_t v27 = v20[29];
  if (!v20[29]) {
    goto LABEL_39;
  }
  goto LABEL_38;
}

void sub_242AA6558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, CompileStatistics *a19, uint64_t a20,uint64_t a21,void **a22,void **a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  CompileStatistics::~CompileStatistics(a19);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v29 + 1752));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a25);
  int v31 = *(void **)(v29 + 1688);
  if (v31)
  {
    *(void *)(v29 + 1696) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *a29;
  if (*a29)
  {
    *(void *)(v29 + 1672) = v32;
    operator delete(v32);
  }
  if (*a10 < 0)
  {
    operator delete(*a13);
    if ((*(char *)(v29 + 1191) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v29 + 1191) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v29 + 1167) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a22);
  if (*(char *)(v29 + 1167) < 0)
  {
LABEL_8:
    operator delete(*a23);
    if ((*(char *)(v29 + 1143) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v29 + 864));
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      unint64_t v33 = *(void **)(v29 + 760);
      if (v33)
      {
        *(void *)(v29 + 768) = v33;
        operator delete(v33);
        long long v34 = *(void **)(v29 + 736);
        if (!v34)
        {
LABEL_16:
          uint64_t v35 = *(void **)(v29 + 712);
          if (!v35) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
      }
      else
      {
        long long v34 = *(void **)(v29 + 736);
        if (!v34) {
          goto LABEL_16;
        }
      }
      *(void *)(v29 + 744) = v34;
      operator delete(v34);
      uint64_t v35 = *(void **)(v29 + 712);
      if (!v35)
      {
LABEL_17:
        uint64_t v36 = *(void **)(v29 + 688);
        if (!v36) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
LABEL_26:
      *(void *)(v29 + 720) = v35;
      operator delete(v35);
      uint64_t v36 = *(void **)(v29 + 688);
      if (!v36)
      {
LABEL_19:
        uint64_t v37 = (void **)(v29 + 640);
        uint64_t v38 = *(void **)(v29 + 664);
        if (v38)
        {
          *(void *)(v29 + 672) = v38;
          operator delete(v38);
        }
        unint64_t v39 = *v37;
        if (*v37)
        {
          *(void *)(v29 + 648) = v39;
          operator delete(v39);
        }
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v29 + 552);
        AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a12);
        _Unwind_Resume(a1);
      }
LABEL_18:
      *(void *)(v29 + 696) = v36;
      operator delete(v36);
      goto LABEL_19;
    }
LABEL_13:
    operator delete(*a18);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v29 + 1143) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void VisibleFunctionsMap::populate<AGCCodeTranslatorVisibleFunctionTypesG11,&(AGCCodeTranslatorG11::GetCompileReply(void const*)),AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[63])
  {
    uint8x8_t v4 = a2 + 63;
    uint64_t v5 = 63;
    if (!a2[64])
    {
      uint64_t v5 = 133;
      uint8x8_t v4 = a2 + 133;
    }
    uint64_t v6 = v4[1];
    unint64_t v7 = (unsigned int *)a2[v5];
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      return;
    }
  }
  else
  {
    unint64_t v7 = (unsigned int *)a2[133];
    if (a2[134]) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      return;
    }
  }
  unint64_t v10 = (int *)((char *)v7 + *v7);
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 7u)
  {
    uint64_t v12 = v11[3];
    if (v12)
    {
      unint64_t v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
      uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 5u)
      {
        uint64_t v15 = v14[2];
        if (v15)
        {
          BOOL v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
          uint64_t v17 = *v16;
          if (v17)
          {
            unint64_t v18 = 0;
            uint64_t v19 = *(void *)(a3 + 1200);
            uint64_t v20 = 4 * v17;
            do
            {
              uint64_t v21 = v16[v18 / 4 + 1];
              uint64_t v22 = v21 - *(int *)((char *)&v16[v18 / 4 + 1] + v21);
              unint64_t v23 = (char *)&v16[v18 / 4] + v22;
              unsigned int v24 = *((unsigned __int16 *)v23 + 2);
              if (v24 < 5)
              {
                uint64_t v28 = 0;
                uint64_t v26 = 4;
              }
              else
              {
                uint64_t v25 = *((unsigned __int16 *)v23 + 4);
                if (v25) {
                  v25 += (uint64_t)&v16[v18 / 4 + 1] + v21 + *(unsigned int *)((char *)&v16[v18 / 4 + 1] + v21 + v25);
                }
                uint64_t v26 = v25 + 4;
                if (v24 >= 7 && (uint64_t v27 = *(unsigned __int16 *)((char *)&v16[v18 / 4 + 2] + v22 + 2)) != 0) {
                  uint64_t v28 = *(void *)((char *)&v16[v18 / 4 + 1] + v21 + v27);
                }
                else {
                  uint64_t v28 = 0;
                }
              }
              size_t v29 = strlen((const char *)v26);
              if (v29 >= 0x7FFFFFFFFFFFFFF8) {
                abort();
              }
              __int16 v30 = (void *)v29;
              if (v29 >= 0x17)
              {
                uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17) {
                  uint64_t v32 = v29 | 7;
                }
                uint64_t v33 = v32 + 1;
                int v31 = operator new(v32 + 1);
                __p[1] = v30;
                unint64_t v35 = v33 | 0x8000000000000000;
                __p[0] = v31;
              }
              else
              {
                HIBYTE(v35) = v29;
                int v31 = __p;
                if (!v29) {
                  goto LABEL_37;
                }
              }
              memmove(v31, (const void *)v26, (size_t)v30);
LABEL_37:
              *((unsigned char *)v30 + (void)v31) = 0;
              uint64_t v36 = v28 + v19;
              std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(a1, (uint64_t)__p, (uint64_t)__p);
              if (SHIBYTE(v35) < 0) {
                operator delete(__p[0]);
              }
              v18 += 4;
            }
            while (v20 != v18);
          }
        }
      }
    }
  }
}

void sub_242AA69F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3808);
  std::mutex::lock((std::mutex *)(a1 + 3808));
  unint64_t v3 = *(unsigned char **)(a1 + 544);
  if (v3)
  {
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(a1, *(uint64_t ***)(a1 + 536), *(void *)(a1 + 544));
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, (uint64_t)v3);
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::finalize(a1 + 1936);
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)(a1 + 1936));
    uint64_t v4 = *(void *)(a1 + 1936);
    uint64_t v5 = *(void *)(a1 + 3184);
    int v6 = *(_DWORD *)(v5 + 48);
    unsigned int v7 = (v6 << 27) & 0x80000000;
    if ((v6 & 0xC) != 0) {
      unsigned int v7 = 0x80000000;
    }
    unsigned int v8 = v7 & 0xFFF000FF | ((*(_DWORD *)(v4 + 252) & 0xFFF) << 8);
    int v9 = 8 * (*(_DWORD *)(v4 + 248) & 0x3FFFF);
    int v10 = *(_DWORD *)(v5 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v5 + 8)) | 0x30;
    int v11 = *(_DWORD *)(v5 + 12) | (*(_DWORD *)(v5 + 20) << 16);
    int v12 = *(_DWORD *)(v5 + 20) + *(_DWORD *)(v5 + 12);
    if (*(_DWORD *)(v5 + 4)) {
      LOBYTE(v12) = v12 + 1;
    }
    LODWORD(v13) = 1073741870;
    LODWORD(v14) = 1073741870;
    HIDWORD(v14) = v8;
    *(void *)(a1 + 3192) = v14;
    *(_DWORD *)(a1 + 3200) = v9;
    *(_DWORD *)(a1 + 3204) = 0;
    *(_DWORD *)(a1 + 3208) = v11 & 0xFFFF00FF | (v12 << 8);
    *(_DWORD *)(a1 + 3212) = v10;
    *(_DWORD *)(a1 + 3216) = 0;
    int v15 = *(_DWORD *)(v5 + 48);
    unsigned int v16 = (v15 << 27) & 0x80000000;
    if ((v15 & 0xC) != 0) {
      unsigned int v16 = 0x80000000;
    }
    unsigned int v17 = v16 & 0xFFF000FF | ((*(_DWORD *)(v4 + 252) & 0xFFF) << 8);
    int v18 = 8 * (*(_DWORD *)(v4 + 248) & 0x3FFFF);
    int v19 = *(_DWORD *)(v5 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v5 + 8));
    int v20 = *(_DWORD *)(v5 + 12) | (*(_DWORD *)(v5 + 20) << 16);
    if (*(_DWORD *)(v5 + 4)) {
      unsigned __int8 v21 = *(unsigned char *)(v5 + 20) + *(unsigned char *)(v5 + 12) + 1;
    }
    else {
      unsigned __int8 v21 = *(unsigned char *)(v5 + 20) + *(unsigned char *)(v5 + 12);
    }
    *(void *)(a1 + 3220) = __PAIR64__(v17, 1073741870);
    *(_DWORD *)(a1 + 3228) = v18;
    *(_DWORD *)(a1 + 3232) = 0;
    *(_DWORD *)(a1 + 3236) = v20 & 0xFFFF00FF | (v21 << 8);
    *(_DWORD *)(a1 + 3240) = v19;
    *(_DWORD *)(a1 + 3244) = 0;
    uint64_t v22 = *(void *)(a1 + 1936);
    uint64_t v23 = *(void *)(a1 + 3184);
    int v24 = *(_DWORD *)(v23 + 48);
    unsigned int v25 = (v24 << 27) & 0x80000000;
    if ((v24 & 0xC) != 0) {
      unsigned int v25 = 0x80000000;
    }
    unsigned int v26 = v25 & 0xFFF000FF | ((*(_DWORD *)(v22 + 252) & 0xFFF) << 8);
    int v27 = 8 * (*(_DWORD *)(v22 + 248) & 0x3FFFF);
    int v28 = *(_DWORD *)(v23 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v23 + 8)) | 0x31;
    int v29 = *(_DWORD *)(v23 + 12) | (*(_DWORD *)(v23 + 20) << 16);
    int v30 = *(_DWORD *)(v23 + 20) + *(_DWORD *)(v23 + 12);
    if (*(_DWORD *)(v23 + 4)) {
      LOBYTE(v30) = v30 + 1;
    }
    *(void *)(a1 + 3248) = __PAIR64__(v26, 1073741870);
    *(_DWORD *)(a1 + 3256) = v27;
    *(_DWORD *)(a1 + 3260) = 0;
    *(_DWORD *)(a1 + 3264) = v29 & 0xFFFF00FF | (v30 << 8);
    *(_DWORD *)(a1 + 3268) = v28;
    *(_DWORD *)(a1 + 3272) = 0;
    int v31 = *(_DWORD *)(v23 + 48);
    unsigned int v32 = (v31 << 27) & 0x80000000;
    if ((v31 & 0xC) != 0) {
      unsigned int v32 = 0x80000000;
    }
    unsigned int v33 = v32 & 0xFFF000FF | ((*(_DWORD *)(v22 + 252) & 0xFFF) << 8);
    int v34 = 8 * (*(_DWORD *)(v22 + 248) & 0x3FFFF);
    int v35 = *(_DWORD *)(v23 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v23 + 8)) | 1;
    int v36 = *(_DWORD *)(v23 + 12) | (*(_DWORD *)(v23 + 20) << 16);
    if (*(_DWORD *)(v23 + 4)) {
      unsigned __int8 v37 = *(unsigned char *)(v23 + 20) + *(unsigned char *)(v23 + 12) + 1;
    }
    else {
      unsigned __int8 v37 = *(unsigned char *)(v23 + 20) + *(unsigned char *)(v23 + 12);
    }
    *(void *)(a1 + 3276) = __PAIR64__(v33, 1073741870);
    *(_DWORD *)(a1 + 3284) = v34;
    *(_DWORD *)(a1 + 3288) = 0;
    *(_DWORD *)(a1 + 3292) = v36 & 0xFFFF00FF | (v37 << 8);
    *(_DWORD *)(a1 + 3296) = v35;
    *(_DWORD *)(a1 + 3300) = 0;
    uint64_t v38 = *(void *)(a1 + 1936);
    uint64_t v39 = *(void *)(a1 + 3184);
    int v40 = *(_DWORD *)(v39 + 48);
    unsigned int v41 = (v40 << 27) & 0x80000000;
    if ((v40 & 0xC) != 0) {
      unsigned int v41 = 0x80000000;
    }
    unsigned int v42 = v41 & 0xFFF000FF | ((*(_DWORD *)(v38 + 252) & 0xFFF) << 8);
    int v43 = 8 * (*(_DWORD *)(v38 + 248) & 0x3FFFF);
    int v44 = *(_DWORD *)(v39 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v39 + 8)) | 0x32;
    int v45 = *(_DWORD *)(v39 + 12) | (*(_DWORD *)(v39 + 20) << 16);
    int v46 = *(_DWORD *)(v39 + 20) + *(_DWORD *)(v39 + 12);
    if (*(_DWORD *)(v39 + 4)) {
      LOBYTE(v46) = v46 + 1;
    }
    *(void *)(a1 + 3304) = __PAIR64__(v42, 1073741870);
    *(_DWORD *)(a1 + 3312) = v43;
    *(_DWORD *)(a1 + 3316) = 0;
    *(_DWORD *)(a1 + 3320) = v45 & 0xFFFF00FF | (v46 << 8);
    *(_DWORD *)(a1 + 3324) = v44;
    *(_DWORD *)(a1 + 3328) = 0;
    int v47 = *(_DWORD *)(v39 + 48);
    if ((v47 & 0xC) != 0) {
      unsigned int v48 = 0x80000000;
    }
    else {
      unsigned int v48 = (v47 << 27) & 0x80000000;
    }
    unsigned int v49 = v48 & 0xFFF000FF | ((*(_DWORD *)(v38 + 252) & 0xFFF) << 8);
    int v50 = 8 * (*(_DWORD *)(v38 + 248) & 0x3FFFF);
    int v51 = *(_DWORD *)(v39 + 48) & 0x40 | (4 * *(unsigned __int8 *)(v39 + 8)) | 2;
    int v52 = *(_DWORD *)(v39 + 12) | (*(_DWORD *)(v39 + 20) << 16);
    int v53 = *(_DWORD *)(v39 + 20) + *(_DWORD *)(v39 + 12);
    if (*(_DWORD *)(v39 + 4)) {
      LOBYTE(v53) = v53 + 1;
    }
    HIDWORD(v13) = v49;
    *(void *)(a1 + 3332) = v13;
    *(_DWORD *)(a1 + 3340) = v50;
    *(_DWORD *)(a1 + 3344) = 0;
    *(_DWORD *)(a1 + 3348) = v52 & 0xFFFF00FF | (v53 << 8);
    *(_DWORD *)(a1 + 3352) = v51;
    *(_DWORD *)(a1 + 3356) = 0;
    MEMORY[0x24566ED90]();
    *(void *)(a1 + 3184) = 0;
    if (v3[312])
    {
      *(int8x16_t *)(a1 + 2152) = vorrq_s8(*(int8x16_t *)(a1 + 2152), *(int8x16_t *)(a1 + 1992));
      *(void *)(a1 + 1992) = 0;
      *(void *)(a1 + 2000) = 0;
    }
    if (v3[313])
    {
      *(int8x16_t *)(a1 + 2168) = vorrq_s8(*(int8x16_t *)(a1 + 2168), *(int8x16_t *)(a1 + 2008));
      *(void *)(a1 + 2008) = 0;
      *(void *)(a1 + 2016) = 0;
    }
    if (v3[314])
    {
      *(int8x16_t *)(a1 + 2136) = vorrq_s8(*(int8x16_t *)(a1 + 2136), *(int8x16_t *)(a1 + 1976));
      *(void *)(a1 + 1976) = 0;
      *(void *)(a1 + 1984) = 0;
    }
    if (v3[315])
    {
      int8x16_t v54 = vorrq_s8(*(int8x16_t *)(a1 + 2200), *(int8x16_t *)(a1 + 2088));
      int8x16_t v55 = vorrq_s8(*(int8x16_t *)(a1 + 2216), *(int8x16_t *)(a1 + 2104));
      int8x16_t v56 = vorrq_s8(*(int8x16_t *)(a1 + 2184), *(int8x16_t *)(a1 + 2072));
      int8x16_t v57 = vorrq_s8(*(int8x16_t *)(a1 + 2232), *(int8x16_t *)(a1 + 2120));
      *(int8x16_t *)(a1 + 2184) = v56;
      *(int8x16_t *)(a1 + 2200) = v54;
      *(int8x16_t *)(a1 + 2216) = v55;
      *(int8x16_t *)(a1 + 2232) = v57;
      int8x16_t v58 = 0uLL;
      *(_OWORD *)(a1 + 2104) = 0u;
      *(_OWORD *)(a1 + 2120) = 0u;
      int8x16_t v59 = 0uLL;
      *(_OWORD *)(a1 + 2072) = 0u;
      *(_OWORD *)(a1 + 2088) = 0u;
    }
    else
    {
      int8x16_t v58 = *(int8x16_t *)(a1 + 2072);
      int8x16_t v59 = *(int8x16_t *)(a1 + 2088);
      int8x16_t v56 = *(int8x16_t *)(a1 + 2184);
      int8x16_t v54 = *(int8x16_t *)(a1 + 2200);
    }
    int8x16_t v60 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1992), *(int8x16_t *)(a1 + 2040)), vorrq_s8(v59, *(int8x16_t *)(a1 + 2152))), v54);
    *(int8x16_t *)(a1 + 1944) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1976), *(int8x16_t *)(a1 + 2024)), vorrq_s8(v58, *(int8x16_t *)(a1 + 2136))), v56);
    *(int8x16_t *)(a1 + 1960) = v60;
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(a1 + 1936);
    uint64_t v61 = *(void *)(a1 + 536);
    uint64_t v62 = *(void **)(v61 + 72);
    uint64_t v63 = *(void **)(v61 + 80);
    if (v62 != v63)
    {
      while (2)
      {
        uint8x8_t v65 = (_DWORD *)*v62;
        switch(*(_DWORD *)*v62)
        {
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x10:
          case 0x11:
          case 0x3E:
          case 0x5D:
          case 0x61:
          case 0x62:
            goto LABEL_44;
          case 0xE:
          case 0xF:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5E:
          case 0x5F:
          case 0x60:
            goto LABEL_48;
          default:
            if (*(_DWORD *)*v62 == 124)
            {
LABEL_44:
              unsigned int v66 = v65[1];
              if ((v66 & 0x80000000) != 0) {
                goto LABEL_42;
              }
            }
            else
            {
LABEL_48:
              unsigned int v66 = v65[1];
              if ((*(_DWORD *)*v62 - 11) > 0x78) {
                goto LABEL_42;
              }
            }
            uint64_t v67 = *(void *)(a1 + 664) + 4 * v65[2];
            int v68 = v66 & 0xFFFFF;
            int v69 = 56 * (v66 & 0xFFFFF);
            unsigned int v70 = v69 + 16;
            switch(*(_DWORD *)*v62)
            {
              case 0xB:
                *(uint32x4_t *)uint64_t v67 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v70), (int32x4_t)xmmword_242EA80F0), 2uLL);
                break;
              case 0xC:
                *(_DWORD *)uint64_t v67 = v70 >> 2;
                *(_DWORD *)(v67 + 4) = (v70 >> 2) | 1;
                *(uint32x2_t *)(v67 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v70), (int32x2_t)0xC00000008), 2uLL);
                break;
              case 0xD:
                unsigned int v64 = (v69 + 48) >> 2;
                goto LABEL_41;
              case 0x10:
                unsigned int v64 = (v69 + 52) >> 2;
                goto LABEL_41;
              case 0x11:
                unsigned int v64 = (v69 + 56) >> 2;
                goto LABEL_41;
              case 0x3B:
                *(void *)uint64_t v67 = 0x70500000704;
                break;
              case 0x3C:
                if (v66 > 0x10) {
                  unsigned int v64 = 0;
                }
                else {
                  unsigned int v64 = dword_242EAAD30[v66];
                }
                goto LABEL_41;
              case 0x3D:
                *(_DWORD *)uint64_t v67 = 2098;
                break;
              case 0x3E:
                unsigned int v64 = (v69 + 60) >> 2;
                goto LABEL_41;
              case 0x40:
                *(void *)uint64_t v67 = 0x82D0000082CLL;
                break;
              case 0x4A:
                goto LABEL_63;
              case 0x54:
                *(_DWORD *)uint64_t v67 = 2116;
                break;
              case 0x55:
                *(_DWORD *)uint64_t v67 = 2117;
                break;
              case 0x5D:
                if ((v66 & 0xFFF00000) == 0x400000)
                {
LABEL_63:
                  *(_DWORD *)uint64_t v67 = 2;
                }
                else
                {
                  unsigned int v64 = (v69 + 64) >> 2;
LABEL_41:
                  *(_DWORD *)uint64_t v67 = v64;
                }
                break;
              case 0x61:
                unsigned int v71 = 8 * v68 + 7216;
                goto LABEL_66;
              case 0x62:
                unsigned int v71 = 8 * v68 + 8240;
LABEL_66:
                unsigned int v72 = v71 >> 2;
                *(_DWORD *)uint64_t v67 = v72;
                *(_DWORD *)(v67 + 4) = v72 | 1;
                break;
              case 0x6C:
                *(_DWORD *)uint64_t v67 = 2118;
                break;
              case 0x6D:
                unsigned int v64 = v66 + 2215;
                goto LABEL_41;
              case 0x6E:
                unsigned int v64 = v66 + 2280;
                goto LABEL_41;
              case 0x71:
                unsigned int v64 = (8 * v68 + 8240) >> 2;
                goto LABEL_41;
              case 0x76:
                *(void *)uint64_t v67 = 0x82F0000082ELL;
                break;
              case 0x77:
                *(void *)uint64_t v67 = 0x83100000830;
                break;
              case 0x83:
                unsigned int v64 = (v66 + 2119) & 0x3FFFFFFF;
                goto LABEL_41;
              default:
                break;
            }
LABEL_42:
            if (++v62 != v63) {
              continue;
            }
            goto LABEL_75;
        }
      }
    }
LABEL_75:
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, (uint64_t)v3);
    uint64_t v73 = *(void *)(a1 + 544);
    if (v73)
    {
      uint64_t v74 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v73);
      MEMORY[0x24566ED90](v74, 0x1030C40704B4075);
    }
    *(void *)(a1 + 544) = 0;
    unint64_t v75 = *(ProgramBindingsAndDMAList **)(a1 + 536);
    if (v75)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v75);
      MEMORY[0x24566ED90]();
    }
    *(void *)(a1 + 536) = 0;
  }

  std::mutex::unlock(v2);
}

void sub_242AA70F8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  int v6 = (uint64_t *)(a1 + 640);
  int v7 = *(_DWORD *)(a3 + 124);
  int v8 = *(_DWORD *)(a3 + 132);
  int v9 = *(_DWORD *)(a3 + 140);
  if (*(unsigned char *)(a3 + 208)) {
    int v10 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v10 = 0;
  }
  if (*(_OWORD *)(a3 + 176) == 0) {
    int v11 = 0;
  }
  else {
    int v11 = *(_DWORD *)(a3 + 144);
  }
  int v12 = *(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128) + *(_DWORD *)(a3 + 136);
  unint64_t v13 = v10 + *(_DWORD *)(a3 + 148) + v11 + *(_DWORD *)(a3 + 152) + ((v7 + v8 + v9 - v12 + 3) & 0xFFFFFFFC);
  uint64_t v14 = *(void *)(a1 + 640);
  unint64_t v15 = (*(void *)(a1 + 648) - v14) >> 2;
  if (v13 <= v15)
  {
    if (v13 < v15) {
      *(void *)(a1 + 648) = v14 + 4 * v13;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 640), v13 - v15);
    int v7 = *(_DWORD *)(a3 + 124);
    int v8 = *(_DWORD *)(a3 + 132);
    int v9 = *(_DWORD *)(a3 + 140);
    int v12 = *(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128) + *(_DWORD *)(a3 + 136);
  }
  *(_DWORD *)(a1 + 1004) = v7 + v8 + v9 - v12;
  unsigned int v16 = *a2;
  unsigned int v17 = a2[1];
  if (*a2 != v17)
  {
    do
    {
      uint64_t v18 = *v16;
      int v19 = *(_DWORD *)(*v16 + 4);
      if ((v19 & 0x80000000) == 0)
      {
        unsigned int v20 = 4 * *(_DWORD *)(v18 + 8) - *(_DWORD *)(a3 + 120);
        unsigned int v21 = (32 * (v19 & 0xFFFFF) + ((*(_DWORD *)v18 == 6) << 12) + 1592) >> 3;
        uint64_t v22 = *v6;
        *(_DWORD *)(*v6 + 4 * v20) = v21;
        *(_DWORD *)(v22 + 4 * (v20 + 1)) = v21 + 1;
        *(_DWORD *)(v22 + 4 * (v20 + 2)) = v21 + 2;
        *(_DWORD *)(v22 + 4 * (v20 + 3)) = v21 + 3;
        if (*(unsigned char *)(v18 + 12)) {
          *(void *)(a1 + 1072 + 8 * ((*(_DWORD *)(v18 + 4) & 0xFFFC0) != 0)) |= 1 << *(_DWORD *)(v18 + 4);
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
  if (*(unsigned char *)(a1 + 1046))
  {
    for (unint64_t i = a2[9]; i != a2[10]; ++i)
    {
      if (*(_DWORD *)*i == 93)
      {
        int v24 = *(_DWORD *)(*i + 4);
        if ((v24 & 0x80000000) == 0 && (v24 & 0xFFF00000) != 0x400000)
        {
          *(int8x16_t *)(a1 + 1072) = vorrq_s8(*(int8x16_t *)(a1 + 1072), *(int8x16_t *)(a1 + 1088));
          break;
        }
      }
    }
  }
  unsigned int v25 = a2[3];
  for (uint64_t j = a2[4]; v25 != j; ++v25)
  {
    int v27 = *(_DWORD *)(*v25 + 4);
    if ((v27 & 0x80000000) == 0)
    {
      int v28 = *(unsigned __int8 *)(a1 + 1736);
      int v29 = *(unsigned char *)(a1 + 1736) ? 3 : 1;
      unsigned int v30 = *(_DWORD *)(a3 + 124) + v29 * *(_DWORD *)(*v25 + 8) - (*(_DWORD *)(a3 + 120) + *(_DWORD *)(a3 + 128));
      int v31 = v27 & 0xFFFFF;
      uint64_t v32 = *(void *)(a1 + 640);
      *(_DWORD *)(v32 + 4 * v30) = v31 + 1223;
      if (v28)
      {
        unsigned int v33 = (16 * v31 + 9912) >> 3;
        *(_DWORD *)(v32 + 4 * (v30 + 1)) = v33;
        *(_DWORD *)(v32 + 4 * (v30 + 2)) = v33 + 1;
      }
    }
  }
  int v34 = a2[6];
  int v35 = a2[7];
  for (k = a2; v34 != v35; ++v34)
  {
    uint64_t v36 = *v34;
    int v37 = *(_DWORD *)(*v34 + 4);
    if ((v37 & 0x80000000) == 0)
    {
      unsigned int v38 = ((*(_DWORD *)(v36 + 8) >> 1) & 0x1FFFFFFF)
          + *(_DWORD *)(a3 + 124)
          + *(_DWORD *)(a3 + 132)
          - (*(_DWORD *)(a3 + 120)
           + *(_DWORD *)(a3 + 128)
           + *(_DWORD *)(a3 + 136));
      unsigned int v39 = v37 & 0xFFFFF;
      *(_DWORD *)(*v6 + 4 * v38) = (v37 & 0xFFFFF) + 67;
      if (*(unsigned char *)(v36 + 12)) {
        *(void *)(a1 + 1056 + 8 * (v39 > 0x3F)) |= 1 << v37;
      }
      if (*(unsigned char *)(a1 + 1739))
      {
        int v40 = *(uint64_t **)(a1 + 1752);
        if (!v40) {
LABEL_112:
        }
          abort();
        unsigned int v41 = (2 * v38) | 1;
        while (1)
        {
          while (1)
          {
            unsigned int v42 = *((_DWORD *)v40 + 7);
            if (v39 >= v42) {
              break;
            }
            int v40 = (uint64_t *)*v40;
            if (!v40) {
              goto LABEL_112;
            }
          }
          if (v42 >= v39) {
            break;
          }
          int v40 = (uint64_t *)v40[1];
          if (!v40) {
            goto LABEL_112;
          }
        }
        int v43 = *((_DWORD *)v40 + 8);
        int v44 = (uint64_t **)(a1 + 864);
        while (1)
        {
          int v45 = *v44;
          int v46 = v44;
          if (!*v44) {
            break;
          }
          while (1)
          {
            int v44 = (uint64_t **)v45;
            unsigned int v47 = *((_DWORD *)v45 + 7);
            if (v41 < v47) {
              break;
            }
            if (v47 >= v41) {
              goto LABEL_37;
            }
            int v45 = v44[1];
            if (!v45)
            {
              int v46 = v44 + 1;
              goto LABEL_56;
            }
          }
        }
LABEL_56:
        unsigned int v48 = (uint64_t *)v44;
        int v44 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v44 + 7) = v41;
        *((_DWORD *)v44 + 8) = 0;
        *int v44 = 0;
        v44[1] = 0;
        _DWORD v44[2] = v48;
        *int v46 = (uint64_t *)v44;
        uint64_t v49 = **(void **)(a1 + 856);
        int v50 = (uint64_t *)v44;
        if (v49)
        {
          *(void *)(a1 + 856) = v49;
          int v50 = *v46;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 864), v50);
        ++*(void *)(a1 + 872);
LABEL_37:
        *((_DWORD *)v44 + 8) = v43;
      }
    }
  }
  unint64_t v51 = *(void *)(a3 + 160);
  unint64_t v52 = *(void *)(a3 + 168);
  if (*(_OWORD *)(a3 + 160) != 0)
  {
    int v53 = *(unsigned __int8 *)(a3 + 208);
    int v54 = *(_DWORD *)(a3 + 144);
    if (!*(unsigned char *)(a3 + 208)) {
      goto LABEL_69;
    }
    if (v54)
    {
      unsigned int v55 = (*(_DWORD *)(a3 + 124)
           + *(_DWORD *)(a3 + 132)
           + *(_DWORD *)(a3 + 140)
           - (*(_DWORD *)(a3 + 120)
            + *(_DWORD *)(a3 + 128)
            + *(_DWORD *)(a3 + 136))
           + 3) & 0xFFFFFFFC;
      unint64_t v85 = *(void *)(a3 + 168);
      unint64_t n = v51;
      for (unint64_t m = v51; ; unint64_t m = n)
      {
        if (m)
        {
          int v57 = __clz(__rbit64(m));
          int8x16_t v58 = &n;
          int v59 = v57;
        }
        else
        {
          unint64_t m = v85;
          if (!v85)
          {
            int v54 = *(_DWORD *)(a3 + 144);
            int v53 = v54;
            goto LABEL_69;
          }
          int v57 = __clz(__rbit64(v85));
          int v59 = v57 | 0x40;
          int8x16_t v58 = &v85;
        }
        *int8x16_t v58 = m & ~(1 << v57);
        unsigned int v60 = (32 * v59 + 1592) >> 3;
        uint64_t v61 = *v6;
        *(_DWORD *)(*v6 + 4 * v55) = v60;
        *(_DWORD *)(v61 + 4 * (v55 + 1)) = v60 + 1;
        *(_DWORD *)(v61 + 4 * (v55 + 2)) = v60 + 2;
        *(_DWORD *)(v61 + 4 * (v55 + 3)) = v60 + 3;
        v55 += 4;
      }
    }
    int v53 = 0;
LABEL_69:
    int8x16_t v62 = *(int8x16_t *)(a3 + 176);
    if (*(_OWORD *)&v62 != 0 && v54 != 0)
    {
      unsigned int v78 = ((*(_DWORD *)(a3 + 140)
            + *(_DWORD *)(a3 + 132)
            - (*(_DWORD *)(a3 + 136)
             + *(_DWORD *)(a3 + 128)
             + *(_DWORD *)(a3 + 120))
            + *(_DWORD *)(a3 + 124)
            + 3) & 0xFFFFFFFC)
          + v53;
      unint64_t v85 = v52;
      for (n = v51; ; unint64_t v51 = n)
      {
        if (v51)
        {
          int v79 = __clz(__rbit64(v51));
          p_unint64_t n = &n;
          int v81 = v79;
        }
        else
        {
          unint64_t v51 = v85;
          if (!v85) {
            break;
          }
          int v79 = __clz(__rbit64(v85));
          int v81 = v79 | 0x40;
          p_unint64_t n = &v85;
        }
        unint64_t *p_n = v51 & ~(1 << v79);
        unsigned int v82 = (32 * v81 + 5688) >> 3;
        uint64_t v83 = *v6;
        *(_DWORD *)(*v6 + 4 * v78) = v82;
        *(_DWORD *)(v83 + 4 * (v78 + 1)) = v82 + 1;
        *(_DWORD *)(v83 + 4 * (v78 + 2)) = v82 + 2;
        *(_DWORD *)(v83 + 4 * (v78 + 3)) = v82 + 3;
        v78 += 4;
      }
    }
    *(int8x16_t *)(a1 + 1072) = vorrq_s8(*(int8x16_t *)(a1 + 1072), v62);
  }
  if (*(_DWORD *)(a3 + 148))
  {
    int v64 = *(_DWORD *)(a3 + 144);
    if (*(unsigned char *)(a3 + 208)) {
      int v65 = *(_DWORD *)(a3 + 144);
    }
    else {
      int v65 = 0;
    }
    if (*(_OWORD *)(a3 + 176) == 0) {
      int v64 = 0;
    }
    unsigned int v66 = v65
        + v64
        + ((*(_DWORD *)(a3 + 124)
          + *(_DWORD *)(a3 + 132)
          + *(_DWORD *)(a3 + 140)
          - (*(_DWORD *)(a3 + 120)
           + *(_DWORD *)(a3 + 128)
           + *(_DWORD *)(a3 + 136))
          + 3) & 0xFFFFFFFC);
    unint64_t v67 = *(void *)(a3 + 192);
    unint64_t v85 = *(void *)(a3 + 200);
    for (n = v67; ; unint64_t v67 = n)
    {
      if (v67)
      {
        int v68 = __clz(__rbit64(v67));
        int v69 = &n;
        int v70 = v68;
      }
      else
      {
        unint64_t v67 = v85;
        if (!v85) {
          break;
        }
        int v68 = __clz(__rbit64(v85));
        int v70 = v68 | 0x40;
        int v69 = &v85;
      }
      *int v69 = v67 & ~(1 << v68);
      uint64_t v71 = *(void *)(a1 + 640);
      *(_DWORD *)(v71 + 4 * v66) = v70 + 1223;
      if (*(unsigned char *)(a1 + 1736))
      {
        unsigned int v72 = (16 * v70 + 9912) >> 3;
        *(_DWORD *)(v71 + 4 * (v66 + 1)) = v72;
        *(_DWORD *)(v71 + 4 * (v66 + 2)) = v72 + 1;
      }
      v66 += 4;
    }
  }
  if (*(unsigned char *)(a3 + 467))
  {
    int v73 = 128 - 2 * __clz((unint64_t)k[13]);
    if (*(_DWORD *)(a1 + 800) > v73) {
      int v73 = *(_DWORD *)(a1 + 800);
    }
    *(_DWORD *)(a1 + 800) = v73;
    unint64_t v74 = ((unint64_t)*((unsigned int *)k + 24) + 3) >> 2;
    *(_DWORD *)(a1 + 792) = v74;
    *(_DWORD *)(a1 + 796) = 134;
  }
  else
  {
    unint64_t v74 = ((unint64_t)*((unsigned int *)k + 24) + 3) >> 2;
  }
  uint64_t v75 = *(void *)(a1 + 664);
  unint64_t v76 = (*(void *)(a1 + 672) - v75) >> 2;
  if (v74 <= v76)
  {
    if (v74 < v76) {
      *(void *)(a1 + 672) = v75 + 4 * v74;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 664), v74 - v76);
  }
  if (a1 + 688 != a3 + 216) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 688), *(char **)(a3 + 216), *(char **)(a3 + 224), (uint64_t)(*(void *)(a3 + 224) - *(void *)(a3 + 216)) >> 2);
  }
  if (a1 + 736 != a3 + 240) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 736), *(char **)(a3 + 240), *(char **)(a3 + 248), (uint64_t)(*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 2);
  }
  if (a1 + 712 != a3 + 320) {
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((void *)(a1 + 712), *(char **)(a3 + 320), *(char **)(a3 + 328), (uint64_t)(*(void *)(a3 + 328) - *(void *)(a3 + 320)) >> 1);
  }
  uint64_t result = (void *)(a1 + 760);
  if (a1 + 760 != a3 + 368) {
    uint64_t result = std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(result, *(char **)(a3 + 368), *(char **)(a3 + 376), (uint64_t)(*(void *)(a3 + 376) - *(void *)(a3 + 368)) >> 1);
  }
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a3 + 416);
  *(unsigned char *)(a1 + 1048) = *(_OWORD *)(a3 + 160) != 0;
  *(unsigned char *)(a1 + 1049) = *(void *)(a3 + 148) != 0;
  return result;
}

uint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 840);
  uint64_t v3 = *(void *)(result + 832);
  if (v2 == v3) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(result + 792) & 1;
  }
  int v5 = *(void *)(result + 672) - *(void *)(result + 664);
  uint64_t v6 = (*(void *)(result + 648) - *(void *)(result + 640)) >> 2;
  int v7 = 8 * (v6 + ((*(void *)(result + 696) - *(void *)(result + 688)) >> 2));
  *(_DWORD *)(result + 608) = ((*(_DWORD *)(result + 744)
                              - *(_DWORD *)(result + 736)
                              + ((v5
                                + 4
                                * (*(_DWORD *)(result + 804)
                                 + *(_DWORD *)(result + 800)
                                 + v4
                                 + (((v2 - v3) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                            + v7;
  unsigned int v8 = (*(_DWORD *)(a2 + 124)
      + *(_DWORD *)(a2 + 132)
      + *(_DWORD *)(a2 + 140)
      - (*(_DWORD *)(a2 + 120)
       + *(_DWORD *)(a2 + 128)
       + *(_DWORD *)(a2 + 136))
      + 3) & 0xFFFFFFFC;
  *(_DWORD *)(result + 612) = 8 * v8;
  int v9 = *(unsigned __int8 *)(a2 + 208);
  int v10 = *(_DWORD *)(a2 + 144);
  if (!*(unsigned char *)(a2 + 208)) {
    int v10 = 0;
  }
  *(_DWORD *)(result + 616) = 8 * (v10 + v8);
  *(_DWORD *)(result + 620) = 8 * v6;
  *(_DWORD *)(result + 624) = v7;
  *(_DWORD *)(result + 628) = v7 + (v5 & 0xFFFFFFFC);
  int v11 = *(_DWORD *)(a2 + 144);
  if (v9) {
    int v12 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *(void *)(a2 + 176);
  if (*(_OWORD *)(a2 + 176) == 0) {
    int v11 = 0;
  }
  *(_DWORD *)(result + 632) = 8 * (v12 + v11 + v8);
  int v14 = *(_DWORD *)(a2 + 144);
  if (v13 | *(void *)(a2 + 184)) {
    int v15 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v15 = 0;
  }
  if (!v9) {
    int v14 = 0;
  }
  uint64_t v16 = *(void *)(a2 + 148);
  *(_DWORD *)(result + 636) = 8 * (v14 + v16 + v15 + v8);
  if (v9) {
    int v17 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v17 = 0;
  }
  if (v13 | *(void *)(a2 + 184)) {
    int v18 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v18 = 0;
  }
  *(_DWORD *)(result + 1008) = v18 + v17;
  *(void *)(result + 1012) = v16;
  return result;
}

uint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 312);
  int v5 = *(unsigned __int8 *)(a2 + 313);
  int v6 = *(unsigned __int8 *)(a2 + 314);
  if (*(unsigned char *)(a2 + 312)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (v7 && v6 == 0) {
    goto LABEL_56;
  }
  int v9 = *(__int16 **)(a1 + 688);
  for (unint64_t i = *(__int16 **)(a1 + 696); v9 != i; v9 += 2)
  {
    if (*v9 == -1)
    {
      *int v9 = 65;
      v9[1] = *(_DWORD *)(*(void *)(a1 + 640) + 4 * (unsigned __int16)v9[1]);
    }
  }
  int v12 = *(_DWORD *)(a2 + 120);
  int v11 = *(_DWORD *)(a2 + 124);
  int v13 = v11 - v12 + 3;
  if (v4) {
    int v13 = 3;
  }
  int v14 = *(_DWORD *)(a2 + 132) - *(_DWORD *)(a2 + 128);
  if (v5) {
    int v14 = 0;
  }
  if (v6) {
    int v15 = 0;
  }
  else {
    int v15 = *(_DWORD *)(a2 + 140) - *(_DWORD *)(a2 + 136);
  }
  if (*(unsigned char *)(a2 + 208)) {
    int v16 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v16 = 0;
  }
  if (*(_OWORD *)(a2 + 176) == 0) {
    int v17 = 0;
  }
  else {
    int v17 = *(_DWORD *)(a2 + 144);
  }
  unsigned int v18 = (v14 + v15 + v13) & 0xFFFFFFFC;
  int v19 = v16 + *(_DWORD *)(a2 + 148) + v17 + *(_DWORD *)(a2 + 152);
  unint64_t v45 = 0;
  memset(v46, 0, sizeof(v46));
  uint64_t v20 = v18 + v19;
  if (!(v18 + v19))
  {
    unsigned int v21 = 0;
    uint64_t v22 = *(char **)(a1 + 640);
    if (v4) {
      goto LABEL_32;
    }
LABEL_30:
    if (v11 != v12)
    {
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, v21, v22, &v22[4 * (v11 - v12)], (v11 - v12));
      int v5 = *(unsigned __int8 *)(a2 + 313);
    }
    goto LABEL_32;
  }
  unsigned int v21 = (char *)operator new(4 * v20);
  unint64_t v45 = (unint64_t)v21;
  *(void *)int v46 = v21;
  *(void *)&v46[2] = &v21[4 * v20];
  uint64_t v22 = *(char **)(a1 + 640);
  if (!v4) {
    goto LABEL_30;
  }
LABEL_32:
  if (!v5)
  {
    int v24 = *(_DWORD *)(a2 + 128);
    int v23 = *(_DWORD *)(a2 + 132);
    if (v23 != v24)
    {
      unsigned int v25 = &v22[4 * (*(_DWORD *)(a2 + 124) - *(_DWORD *)(a2 + 120))];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v25, &v25[4 * (v23 - v24)], (v23 - v24));
    }
  }
  if (!*(unsigned char *)(a2 + 314))
  {
    int v27 = *(_DWORD *)(a2 + 136);
    int v26 = *(_DWORD *)(a2 + 140);
    if (v26 != v27)
    {
      int v28 = &v22[4 * (*(_DWORD *)(a2 + 124) - *(_DWORD *)(a2 + 120))
               + 4 * (*(_DWORD *)(a2 + 132) - *(_DWORD *)(a2 + 128))];
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v28, &v28[4 * (v26 - v27)], (v26 - v27));
    }
  }
  uint64_t v29 = *(unsigned int *)(a2 + 144);
  if (*(unsigned char *)(a2 + 208) && v29)
  {
    unsigned int v30 = &v22[4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 3) & 0xFFFFFFFC)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v30, &v30[4 * v29], v29);
    LODWORD(v29) = *(_DWORD *)(a2 + 144);
  }
  if (*(_OWORD *)(a2 + 176) != 0 && v29)
  {
    if (*(unsigned char *)(a2 + 208)) {
      int v31 = v29;
    }
    else {
      int v31 = 0;
    }
    uint64_t v32 = &v22[4 * v31
             + 4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 3) & 0xFFFFFFFC)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v32, &v32[4 * v29], v29);
  }
  uint64_t v33 = *(unsigned int *)(a2 + 148);
  if (v33)
  {
    int v34 = *(_DWORD *)(a2 + 144);
    if (*(unsigned char *)(a2 + 208)) {
      int v35 = *(_DWORD *)(a2 + 144);
    }
    else {
      int v35 = 0;
    }
    if (*(_OWORD *)(a2 + 176) == 0) {
      int v34 = 0;
    }
    uint64_t v36 = &v22[4 * v35
             + 4 * v34
             + 4
             * ((*(_DWORD *)(a2 + 124)
               + *(_DWORD *)(a2 + 132)
               + *(_DWORD *)(a2 + 140)
               - (*(_DWORD *)(a2 + 120)
                + *(_DWORD *)(a2 + 128)
                + *(_DWORD *)(a2 + 136))
               + 3) & 0xFFFFFFFC)];
    std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&v45, *(void **)v46, v36, &v36[4 * v33], v33);
  }
  int v37 = *(void **)(a1 + 640);
  uint64_t v38 = (*(void *)(a1 + 648) - (void)v37) >> 2;
  unint64_t v39 = v45;
  int v40 = *(_DWORD *)(a1 + 1004);
  *(void *)(a1 + 640) = v45;
  uint64_t v41 = *(void *)v46;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)v46;
  *(_DWORD *)(a1 + 1004) = v40 + ((v41 - v39) >> 2) - v38;
  if (v37) {
    operator delete(v37);
  }
LABEL_56:
  if (*(unsigned char *)(a2 + 315))
  {
    unsigned int v42 = *(__int16 **)(a1 + 736);
    for (uint64_t j = *(__int16 **)(a1 + 744); v42 != j; v42 += 2)
    {
      if (*v42 == -1)
      {
        *unsigned int v42 = 66;
        v42[1] = *(_DWORD *)(*(void *)(a1 + 664) + 4 * (unsigned __int16)v42[1]);
      }
    }
    *(void *)(a1 + 672) = *(void *)(a1 + 664);
  }

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, a2);
}

void sub_242AA8160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v10 = *a1;
  int v9 = (char *)a1[1];
  uint64_t v11 = (uint64_t)a2 - *a1;
  uint64_t v12 = v11 >> 2;
  int v13 = (unsigned char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (void)v9) >> 2)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v15 = a5 + ((uint64_t)&v9[-v10] >> 2);
    if (v15 >> 62) {
      abort();
    }
    uint64_t v16 = v14 - v10;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unsigned int v18 = operator new(4 * v17);
    }
    else
    {
      unsigned int v18 = 0;
    }
    size_t v41 = 4 * a5;
    uint64_t v56 = v11 >> 2;
    unsigned int v42 = &v18[4 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      int v43 = v42;
    }
    else
    {
      unint64_t v44 = v11 - 4;
      if ((unint64_t)(v11 - 4) >= 0x3C)
      {
        unint64_t v46 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v10 - (void)&v18[v11 & 0xFFFFFFFFFFFFFFFCLL];
        unint64_t v45 = __srca;
        int v43 = v42;
        if (v46 >= 0x20)
        {
          uint64_t v47 = (v44 >> 2) + 1;
          unint64_t v45 = &__srca[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v48 = 4 * v56 - 16;
          uint64_t v49 = (long long *)(v10 + v48);
          int v50 = &v18[v48];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *int v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 8;
          }
          while (v51);
          int v43 = &v42[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        unint64_t v45 = __srca;
        int v43 = v42;
      }
      do
      {
        int v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v43 - 1) = v53;
        v43 -= 4;
      }
      while (v45 != (char *)v10);
    }
LABEL_46:
    int v54 = &v18[4 * v17];
    size_t v55 = v9 - __srca;
    if (v55) {
      memmove(&v42[v41], __srca, v55);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
    {
      operator delete((void *)v10);
    }
    return;
  }
  uint64_t v19 = (v9 - v13) >> 2;
  if (v19 >= a5)
  {
    uint64_t v20 = &__src[4 * a5];
    uint64_t v22 = (char *)a1[1];
    goto LABEL_18;
  }
  uint64_t v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(v9, &__src[4 * v19], a4 - v20);
  }
  uint64_t v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    uint64_t v12 = v11 >> 2;
LABEL_18:
    int v23 = &v13[4 * a5];
    size_t v24 = v22 - v23;
    uint64_t v25 = (v22 - v23) >> 2;
    int v26 = &v22[-4 * a5];
    int v27 = v22;
    if (v26 < v9)
    {
      unint64_t v28 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v24;
      uint64_t v29 = (char *)(v28 + v10);
      unint64_t v30 = v28 + v10 + 4;
      if ((unint64_t)v9 > v30) {
        unint64_t v30 = (unint64_t)v9;
      }
      unint64_t v31 = v30 + ~v10 - v28;
      unint64_t v32 = v22 - v29;
      BOOL v33 = v31 >= 0x2C && v32 > 0x1F;
      int v27 = v22;
      if (!v33) {
        goto LABEL_57;
      }
      uint64_t v34 = (v31 >> 2) + 1;
      uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      v26 += v35;
      uint64_t v36 = v22 + 16;
      int v37 = (long long *)(4 * v25 + 4 * v12 + v10 + 16);
      uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *uint64_t v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 8;
      }
      while (v38);
      int v27 = &v22[v35];
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_57:
        do
        {
          int v40 = *(_DWORD *)v26;
          v26 += 4;
          *(_DWORD *)int v27 = v40;
          v27 += 4;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23) {
      memmove(&v22[-4 * v25], v13, v24);
    }
    if (v20 != __src)
    {
      memmove(v13, __src, v20 - __src);
    }
  }
}

void *std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  BOOL v7 = result;
  size_t v8 = result[2];
  int v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      size_t v8 = 0;
      *BOOL v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0) {
      goto LABEL_23;
    }
    if (v8 <= __sz) {
      size_t v10 = __sz;
    }
    else {
      size_t v10 = v8;
    }
    BOOL v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11) {
      uint64_t v12 = v10;
    }
    if (v12 < 0) {
LABEL_23:
    }
      abort();
    uint64_t v13 = 2 * v12;
    uint64_t result = operator new(2 * v12);
    int v9 = (char *)result;
    *BOOL v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  unsigned int v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    int v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    unsigned __int16 __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    BOOL v7 = (uint64_t *)a2;
  }
  else {
    BOOL v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      size_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              uint64_t v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0) {
                uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v22 = v14[3];
              }
              if (v22 == v8)
              {
                int v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (unint64_t i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; unint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    int v23 = (const void **)((char *)v23 + 1);
                    if (!--v21) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            size_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            uint64_t v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v17 = v14[3];
            }
            if (v17 == v8)
            {
              unsigned int v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; uint64_t j = (uint64_t *)((char *)j + 1))
                {
                  unsigned int v18 = (const void **)((char *)v18 + 1);
                  if (!--v16) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          size_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  uint64_t v25 = (void *)(a1 + 16);
  int v26 = operator new(0x30uLL);
  *int v26 = 0;
  v26[1] = v10;
  int v27 = (std::string *)(v26 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v26[4] = *(void *)(a3 + 16);
  }
  v26[5] = *(void *)(a3 + 24);
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_89;
      }
      unint64_t v44 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v45.i16[0] = vaddlv_u8(v45), v45.u32[0] > 1uLL))
      {
        unint64_t v44 = std::__next_prime(v44);
      }
      else
      {
        uint64_t v46 = 1 << -(char)__clz(v44 - 1);
        if (v44 >= 2) {
          unint64_t v44 = v46;
        }
      }
      if (prime <= v44) {
        size_t prime = v44;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 8);
LABEL_89:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v3 = v10 % v11;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v11 - 1) & v10;
        }
        goto LABEL_102;
      }
      if (!prime)
      {
        long long v52 = *(void **)a1;
        *(void *)a1 = 0;
        if (v52) {
          operator delete(v52);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 8) = 0;
        goto LABEL_89;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v34 = operator new(8 * prime);
    uint64_t v35 = *(void **)a1;
    *(void *)a1 = v34;
    if (v35) {
      operator delete(v35);
    }
    uint64_t v36 = 0;
    *(void *)(a1 + 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v36++) = 0;
    while (prime != v36);
    int v37 = (void *)*v25;
    if (!*v25)
    {
LABEL_88:
      unint64_t v11 = prime;
      goto LABEL_89;
    }
    size_t v38 = v37[1];
    size_t v39 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v40 = v38 & v39;
      *(void *)(*(void *)a1 + 8 * v40) = v25;
      for (k = (void *)*v37; *v37; k = (void *)*v37)
      {
        size_t v42 = k[1] & v39;
        if (v42 == v40)
        {
          int v37 = k;
        }
        else if (*(void *)(*(void *)a1 + 8 * v42))
        {
          *int v37 = *k;
          uint64_t v43 = 8 * v42;
          void *k = **(void **)(*(void *)a1 + v43);
          **(void **)(*(void *)a1 + v43) = k;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v42) = v37;
          int v37 = k;
          size_t v40 = v42;
        }
      }
      goto LABEL_88;
    }
    if (v38 >= prime) {
      v38 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v38) = v25;
    uint64_t v47 = (void *)*v37;
    if (!*v37) {
      goto LABEL_88;
    }
    while (1)
    {
      size_t v49 = v47[1];
      if (v49 >= prime) {
        v49 %= prime;
      }
      if (v49 != v38)
      {
        if (!*(void *)(*(void *)a1 + 8 * v49))
        {
          *(void *)(*(void *)a1 + 8 * v49) = v37;
          goto LABEL_93;
        }
        *int v37 = *v47;
        uint64_t v48 = 8 * v49;
        *uint64_t v47 = **(void **)(*(void *)a1 + v48);
        **(void **)(*(void *)a1 + v48) = v47;
        uint64_t v47 = v37;
      }
      size_t v49 = v38;
LABEL_93:
      int v37 = v47;
      uint64_t v47 = (void *)*v47;
      size_t v38 = v49;
      if (!v47) {
        goto LABEL_88;
      }
    }
  }
LABEL_102:
  int v50 = *(void **)(*(void *)a1 + 8 * v3);
  if (v50)
  {
    *int v26 = *v50;
    *int v50 = v26;
  }
  else
  {
    *int v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v3) = v25;
    if (*v26)
    {
      unint64_t v51 = *(void *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v51 >= v11) {
          v51 %= v11;
        }
      }
      else
      {
        v51 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v51) = v26;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_242AA8BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v7 = (char *)operator new(24 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  unint64_t v8 = &v7[24 * v2];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v10 = v8 + 24;
  unint64_t v11 = (void **)*a1;
  uint8x8_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint8x8_t v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(uint64_t a1, uint64_t a2)
{
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::LinkInfo(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(_DWORD *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 584) = 0;
  uint64_t v4 = *(void *)(a2 + 576);
  uint64_t v5 = *(void *)(a2 + 584);
  int64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 4);
    if (v7 >= 0x333333333333334) {
      abort();
    }
    unint64_t v8 = (char *)operator new(v6);
    uint64_t v9 = 0;
    *(void *)(a1 + 576) = v8;
    *(void *)(a1 + 584) = v8;
    *(void *)(a1 + 592) = &v8[80 * v7];
    do
    {
      uint64_t v10 = v4 + v9;
      unint64_t v11 = &v8[v9];
      uint64_t v12 = *(void *)(v4 + v9 + 8);
      *(void *)unint64_t v11 = *(void *)(v4 + v9);
      *((void *)v11 + 1) = v12;
      *((_DWORD *)v11 + 4) = 0;
      long long v13 = *(_OWORD *)(v4 + v9 + 24);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v4 + v9 + 40);
      *(_OWORD *)(v11 + 24) = v13;
      *((void *)v11 + 7) = dispatch_group_create();
      *((void *)v11 + 8) = *(id *)(v4 + v9 + 64);
      *((void *)v11 + 9) = *(id *)(v4 + v9 + 72);
      v9 += 80;
    }
    while (v10 + 80 != v5);
    *(void *)(a1 + 584) = &v8[v9];
  }
  *(void *)a1 = &unk_26F852AB8;
  long long v14 = *(_OWORD *)(a2 + 600);
  long long v15 = *(_OWORD *)(a2 + 616);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(_OWORD *)(a1 + 600) = v14;
  *(_OWORD *)(a1 + 616) = v15;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  uint64_t v16 = *(unsigned char **)(a2 + 640);
  uint64_t v17 = *(unsigned char **)(a2 + 648);
  int64_t v18 = v17 - v16;
  if (v17 != v16)
  {
    if (v18 < 0) {
      abort();
    }
    uint64_t v19 = (char *)operator new(v17 - v16);
    *(void *)(a1 + 640) = v19;
    *(void *)(a1 + 648) = v19;
    uint64_t v20 = &v19[4 * (v18 >> 2)];
    *(void *)(a1 + 656) = v20;
    memcpy(v19, v16, v18);
    *(void *)(a1 + 648) = v20;
  }
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  uint64_t v21 = *(unsigned char **)(a2 + 664);
  uint64_t v22 = *(unsigned char **)(a2 + 672);
  int64_t v23 = v22 - v21;
  if (v22 != v21)
  {
    if (v23 < 0) {
      abort();
    }
    size_t v24 = (char *)operator new(v22 - v21);
    *(void *)(a1 + 664) = v24;
    *(void *)(a1 + 672) = v24;
    uint64_t v25 = &v24[4 * (v23 >> 2)];
    *(void *)(a1 + 680) = v25;
    memcpy(v24, v21, v23);
    *(void *)(a1 + 672) = v25;
  }
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  int v26 = *(unsigned char **)(a2 + 688);
  int v27 = *(unsigned char **)(a2 + 696);
  int64_t v28 = v27 - v26;
  if (v27 != v26)
  {
    if (v28 < 0) {
      abort();
    }
    float v29 = (char *)operator new(v27 - v26);
    *(void *)(a1 + 688) = v29;
    *(void *)(a1 + 696) = v29;
    BOOL v30 = &v29[4 * (v28 >> 2)];
    *(void *)(a1 + 704) = v30;
    memcpy(v29, v26, v28);
    *(void *)(a1 + 696) = v30;
  }
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  unint64_t v31 = *(unsigned char **)(a2 + 712);
  unint64_t v32 = *(unsigned char **)(a2 + 720);
  int64_t v33 = v32 - v31;
  if (v32 != v31)
  {
    if (v33 < 0) {
      abort();
    }
    uint64_t v34 = (char *)operator new(v32 - v31);
    *(void *)(a1 + 712) = v34;
    *(void *)(a1 + 720) = v34;
    uint64_t v35 = &v34[2 * (v33 >> 1)];
    *(void *)(a1 + 728) = v35;
    memcpy(v34, v31, v33);
    *(void *)(a1 + 720) = v35;
  }
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  uint64_t v36 = *(unsigned char **)(a2 + 736);
  int v37 = *(unsigned char **)(a2 + 744);
  int64_t v38 = v37 - v36;
  if (v37 != v36)
  {
    if (v38 < 0) {
      abort();
    }
    size_t v39 = (char *)operator new(v37 - v36);
    *(void *)(a1 + 736) = v39;
    *(void *)(a1 + 744) = v39;
    size_t v40 = &v39[4 * (v38 >> 2)];
    *(void *)(a1 + 752) = v40;
    memcpy(v39, v36, v38);
    *(void *)(a1 + 744) = v40;
  }
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  size_t v41 = *(unsigned char **)(a2 + 760);
  size_t v42 = *(unsigned char **)(a2 + 768);
  int64_t v43 = v42 - v41;
  if (v42 != v41)
  {
    if (v43 < 0) {
      abort();
    }
    unint64_t v44 = (char *)operator new(v42 - v41);
    *(void *)(a1 + 760) = v44;
    *(void *)(a1 + 768) = v44;
    uint8x8_t v45 = &v44[2 * (v43 >> 1)];
    *(void *)(a1 + 776) = v45;
    memcpy(v44, v41, v43);
    *(void *)(a1 + 768) = v45;
  }
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a2 + 792);
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  uint64_t v46 = *(unsigned char **)(a2 + 808);
  uint64_t v47 = *(unsigned char **)(a2 + 816);
  int64_t v48 = v47 - v46;
  if (v47 != v46)
  {
    if (v48 < 0) {
      abort();
    }
    size_t v49 = (char *)operator new(v47 - v46);
    *(void *)(a1 + 808) = v49;
    *(void *)(a1 + 816) = v49;
    int v50 = &v49[4 * (v48 >> 2)];
    *(void *)(a1 + 824) = v50;
    memcpy(v49, v46, v48);
    *(void *)(a1 + 816) = v50;
  }
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 848) = 0;
  unint64_t v51 = *(unsigned char **)(a2 + 832);
  long long v52 = *(unsigned char **)(a2 + 840);
  int64_t v53 = v52 - v51;
  if (v52 != v51)
  {
    if (v53 < 0) {
      abort();
    }
    int v54 = (char *)operator new(v52 - v51);
    *(void *)(a1 + 832) = v54;
    *(void *)(a1 + 840) = v54;
    size_t v55 = &v54[4 * (v53 >> 2)];
    *(void *)(a1 + 848) = v55;
    memcpy(v54, v51, v53);
    *(void *)(a1 + 840) = v55;
  }
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = a1 + 864;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(a1 + 856), *(void **)(a2 + 856), (void *)(a2 + 864));
  long long v56 = *(_OWORD *)(a2 + 880);
  long long v57 = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v57;
  *(_OWORD *)(a1 + 880) = v56;
  long long v58 = *(_OWORD *)(a2 + 928);
  long long v59 = *(_OWORD *)(a2 + 944);
  long long v60 = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 976) = v60;
  *(_OWORD *)(a1 + 928) = v58;
  *(_OWORD *)(a1 + 944) = v59;
  long long v61 = *(_OWORD *)(a2 + 992);
  long long v62 = *(_OWORD *)(a2 + 1008);
  long long v63 = *(_OWORD *)(a2 + 1024);
  *(_OWORD *)(a1 + 1038) = *(_OWORD *)(a2 + 1038);
  *(_OWORD *)(a1 + 1008) = v62;
  *(_OWORD *)(a1 + 1024) = v63;
  *(_OWORD *)(a1 + 992) = v61;
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  if (*(char *)(a2 + 1143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1120), *(const std::string::value_type **)(a2 + 1120), *(void *)(a2 + 1128));
  }
  else
  {
    long long v64 = *(_OWORD *)(a2 + 1120);
    *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
    *(_OWORD *)(a1 + 1120) = v64;
  }
  if (*(char *)(a2 + 1167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1144), *(const std::string::value_type **)(a2 + 1144), *(void *)(a2 + 1152));
  }
  else
  {
    long long v65 = *(_OWORD *)(a2 + 1144);
    *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
    *(_OWORD *)(a1 + 1144) = v65;
  }
  unsigned int v66 = (std::string *)(a1 + 1168);
  if (*(char *)(a2 + 1191) < 0)
  {
    std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)(a2 + 1168), *(void *)(a2 + 1176));
  }
  else
  {
    long long v67 = *(_OWORD *)(a2 + 1168);
    *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
    *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
  }
  long long v68 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v68;
  long long v69 = *(_OWORD *)(a2 + 1224);
  long long v70 = *(_OWORD *)(a2 + 1240);
  long long v71 = *(_OWORD *)(a2 + 1272);
  *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 1256);
  *(_OWORD *)(a1 + 1272) = v71;
  *(_OWORD *)(a1 + 1224) = v69;
  *(_OWORD *)(a1 + 1240) = v70;
  long long v72 = *(_OWORD *)(a2 + 1288);
  long long v73 = *(_OWORD *)(a2 + 1304);
  long long v74 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 1320);
  *(_OWORD *)(a1 + 1336) = v74;
  *(_OWORD *)(a1 + 1288) = v72;
  *(_OWORD *)(a1 + 1304) = v73;
  long long v75 = *(_OWORD *)(a2 + 1352);
  long long v76 = *(_OWORD *)(a2 + 1368);
  long long v77 = *(_OWORD *)(a2 + 1384);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  *(_OWORD *)(a1 + 1368) = v76;
  *(_OWORD *)(a1 + 1384) = v77;
  *(_OWORD *)(a1 + 1352) = v75;
  long long v78 = *(_OWORD *)(a2 + 1408);
  *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1408) = v78;
  long long v79 = *(_OWORD *)(a2 + 1440);
  long long v80 = *(_OWORD *)(a2 + 1456);
  long long v81 = *(_OWORD *)(a2 + 1472);
  *(_OWORD *)(a1 + 1488) = *(_OWORD *)(a2 + 1488);
  *(_OWORD *)(a1 + 1472) = v81;
  *(_OWORD *)(a1 + 1456) = v80;
  *(_OWORD *)(a1 + 1440) = v79;
  long long v82 = *(_OWORD *)(a2 + 1504);
  long long v83 = *(_OWORD *)(a2 + 1520);
  long long v84 = *(_OWORD *)(a2 + 1536);
  *(void *)(a1 + 1549) = *(void *)(a2 + 1549);
  *(_OWORD *)(a1 + 1536) = v84;
  *(_OWORD *)(a1 + 1520) = v83;
  *(_OWORD *)(a1 + 1504) = v82;
  if (*(char *)(a2 + 1583) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1560), *(const std::string::value_type **)(a2 + 1560), *(void *)(a2 + 1568));
  }
  else
  {
    long long v85 = *(_OWORD *)(a2 + 1560);
    *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
    *(_OWORD *)(a1 + 1560) = v85;
  }
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  long long v86 = *(_OWORD *)(a2 + 1592);
  long long v87 = *(_OWORD *)(a2 + 1608);
  *(_OWORD *)(a1 + 1620) = *(_OWORD *)(a2 + 1620);
  *(_OWORD *)(a1 + 1592) = v86;
  *(_OWORD *)(a1 + 1608) = v87;
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(unsigned char *)(a1 + 1656) = *(unsigned char *)(a2 + 1656);
  *(void *)(a1 + 1664) = 0;
  *(void *)(a1 + 1680) = 0;
  *(void *)(a1 + 1672) = 0;
  int v88 = *(unsigned char **)(a2 + 1664);
  BOOL v89 = *(unsigned char **)(a2 + 1672);
  uint64_t v90 = v89 - v88;
  if (v89 != v88)
  {
    if (v90 < 0) {
      abort();
    }
    unint64_t v91 = (char *)operator new(v89 - v88);
    *(void *)(a1 + 1664) = v91;
    *(void *)(a1 + 1672) = v91;
    *(void *)(a1 + 1680) = &v91[16 * (v90 >> 4)];
    size_t v92 = v90 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v91, v88, v92);
    *(void *)(a1 + 1672) = &v91[v92];
  }
  *(void *)(a1 + 1704) = 0;
  *(_OWORD *)(a1 + 1688) = 0u;
  uint64_t v93 = *(unsigned char **)(a2 + 1688);
  uint64_t v94 = *(unsigned char **)(a2 + 1696);
  int64_t v95 = v94 - v93;
  if (v94 != v93)
  {
    if (v95 < 0) {
      abort();
    }
    int8x8_t v96 = (char *)operator new(v94 - v93);
    *(void *)(a1 + 1688) = v96;
    *(void *)(a1 + 1696) = v96;
    uint64_t v97 = &v96[8 * (v95 >> 3)];
    *(void *)(a1 + 1704) = v97;
    memcpy(v96, v93, v95);
    *(void *)(a1 + 1696) = v97;
  }
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  unsigned int v98 = *(char **)(a2 + 1712);
  uint64_t v99 = *(char **)(a2 + 1720);
  uint64_t v100 = v99 - v98;
  if (v99 != v98)
  {
    if (v100 < 0) {
      abort();
    }
    uint64_t v101 = operator new(v99 - v98);
    *(void *)(a1 + 1712) = v101;
    *(void *)(a1 + 1720) = v101;
    *(void *)(a1 + 1728) = &v101[2 * (v100 >> 4)];
    do
    {
      uint64_t v102 = *((void *)v98 + 1);
      *uint64_t v101 = *(void *)v98;
      v101[1] = v102;
      if (v102) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
      }
      v101 += 2;
      v98 += 16;
    }
    while (v98 != v99);
    *(void *)(a1 + 1720) = v101;
  }
  *(_DWORD *)(a1 + 1736) = *(_DWORD *)(a2 + 1736);
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = a1 + 1752;
  std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>((uint64_t *)(a1 + 1744), *(void **)(a2 + 1744), (void *)(a2 + 1752));
  long long v103 = *(_OWORD *)(a2 + 1784);
  *(_OWORD *)(a1 + 1768) = *(_OWORD *)(a2 + 1768);
  *(_OWORD *)(a1 + 1784) = v103;
  long long v104 = *(_OWORD *)(a2 + 1800);
  long long v105 = *(_OWORD *)(a2 + 1816);
  long long v106 = *(_OWORD *)(a2 + 1832);
  *(_OWORD *)(a1 + 1845) = *(_OWORD *)(a2 + 1845);
  *(_OWORD *)(a1 + 1816) = v105;
  *(_OWORD *)(a1 + 1832) = v106;
  *(_OWORD *)(a1 + 1800) = v104;
  *(void *)(a1 + 1864) = 0;
  *(void *)(a1 + 1880) = 0;
  *(void *)(a1 + 1872) = 0;
  uint64_t v107 = *(void *)(a2 + 1864);
  uint64_t v108 = *(void *)(a2 + 1872);
  int64_t v109 = v108 - v107;
  if (v108 != v107)
  {
    unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * (v109 >> 3);
    if (v110 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v111 = (char *)operator new(v109);
    uint64_t v112 = 0;
    *(void *)(a1 + 1864) = v111;
    *(void *)(a1 + 1872) = v111;
    *(void *)(a1 + 1880) = &v111[24 * v110];
    do
    {
      uint64_t v114 = (long long *)(v107 + v112);
      uint64_t v115 = (std::string *)&v111[v112];
      if (*(char *)(v107 + v112 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v115, *(const std::string::value_type **)v114, *((void *)v114 + 1));
      }
      else
      {
        long long v113 = *v114;
        v115->__r_.__value_.__r.__words[2] = *((void *)v114 + 2);
        *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v113;
      }
      v112 += 24;
    }
    while (v107 + v112 != v108);
    *(void *)(a1 + 1872) = &v111[v112];
  }
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1888) = 0;
  *(void *)(a1 + 1904) = 0;
  uint64_t v116 = *(unsigned char **)(a2 + 1888);
  unint64_t v117 = *(unsigned char **)(a2 + 1896);
  int64_t v118 = v117 - v116;
  if (v117 != v116)
  {
    if (v118 < 0) {
      abort();
    }
    unint64_t v119 = (char *)operator new(v117 - v116);
    *(void *)(a1 + 1888) = v119;
    *(void *)(a1 + 1896) = v119;
    uint64_t v120 = &v119[4 * (v118 >> 2)];
    *(void *)(a1 + 1904) = v120;
    memcpy(v119, v116, v118);
    *(void *)(a1 + 1896) = v120;
  }
  unint64_t v121 = (std::string *)(a1 + 1912);
  if (*(char *)(a2 + 1935) < 0)
  {
    std::string::__init_copy_ctor_external(v121, *(const std::string::value_type **)(a2 + 1912), *(void *)(a2 + 1920));
  }
  else
  {
    long long v122 = *(_OWORD *)(a2 + 1912);
    *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
    *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v122;
  }
  return a1;
}

void sub_242AA9674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void *a13, void **a14, void **a15, void **a16, uint64_t a17)
{
  size_t v24 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 1896) = v24;
    operator delete(v24);
  }
  std::vector<std::string>::~vector[abi:nn180100]((void **)(v18 + 1864));
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*v17);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v18 + 1712));
  uint64_t v25 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 1696) = v25;
    operator delete(v25);
  }
  int v26 = *(void **)(v18 + 1664);
  if (v26)
  {
    *(void *)(v18 + 1672) = v26;
    operator delete(v26);
    if ((*(char *)(v18 + 1583) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(v18 + 1191) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
  }
  else if ((*(char *)(v18 + 1583) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*v22);
  if ((*(char *)(v18 + 1191) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(v18 + 1167) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*a10);
  if ((*(char *)(v18 + 1167) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v18 + 1143) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_27:
  operator delete(*a11);
  if ((*(char *)(v18 + 1143) & 0x80000000) == 0)
  {
LABEL_11:
    std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a12);
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a13);
    int v27 = *a14;
    if (*a14)
    {
      *(void *)(v18 + 768) = v27;
      operator delete(v27);
    }
    int64_t v28 = *(void **)(v18 + 736);
    if (v28)
    {
      *(void *)(v18 + 744) = v28;
      operator delete(v28);
    }
    float v29 = *a15;
    if (*a15)
    {
      *(void *)(v18 + 720) = v29;
      operator delete(v29);
    }
    BOOL v30 = *(void **)(v18 + 688);
    if (v30)
    {
      *(void *)(v18 + 696) = v30;
      operator delete(v30);
    }
    unint64_t v31 = *a16;
    if (*a16)
    {
      *(void *)(v18 + 672) = v31;
      operator delete(v31);
    }
    unint64_t v32 = *(void **)(v18 + 640);
    if (v32)
    {
      *(void *)(v18 + 648) = v32;
      operator delete(v32);
    }
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v18 + 552);
    AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a17);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(*v21);
  goto LABEL_11;
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::operator=(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x174uLL);
  if (a1 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 376), *(char **)(a2 + 376), *(char **)(a2 + 384), (uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 2);
  }
  uint64_t v4 = *(void *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(void *)(a1 + 400) = v4;
  std::string::operator=((std::string *)(a1 + 416), (const std::string *)(a2 + 416));
  std::string::operator=((std::string *)(a1 + 440), (const std::string *)(a2 + 440));
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 464));
  long long v6 = *(_OWORD *)(a2 + 504);
  long long v5 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v6;
  *(_OWORD *)(a1 + 520) = v5;
  long long v7 = *(_OWORD *)(a2 + 584);
  long long v9 = *(_OWORD *)(a2 + 536);
  long long v8 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v7;
  *(_OWORD *)(a1 + 536) = v9;
  *(_OWORD *)(a1 + 552) = v8;
  long long v10 = *(_OWORD *)(a2 + 648);
  long long v12 = *(_OWORD *)(a2 + 600);
  long long v11 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  *(_OWORD *)(a1 + 600) = v12;
  *(_OWORD *)(a1 + 616) = v11;
  long long v14 = *(_OWORD *)(a2 + 680);
  long long v13 = *(_OWORD *)(a2 + 696);
  long long v15 = *(_OWORD *)(a2 + 664);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v14;
  *(_OWORD *)(a1 + 696) = v13;
  *(_OWORD *)(a1 + 664) = v15;
  if (a1 == a2)
  {
    *(void *)(a1 + 776) = *(void *)(a2 + 776);
    memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x160uLL);
    long long v17 = *(_OWORD *)(a2 + 1148);
    *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
    *(_OWORD *)(a1 + 1148) = v17;
  }
  else
  {
    std::vector<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **,AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **>((void *)(a1 + 720), *(char **)(a2 + 720), *(char **)(a2 + 728), (uint64_t)(*(void *)(a2 + 728) - *(void *)(a2 + 720)) >> 3);
    *(unsigned char *)(a1 + 744) = *(unsigned char *)(a2 + 744);
    std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::__assign_with_size[abi:nn180100]<std::shared_ptr<AGX::HAL200::Sampler>*,std::shared_ptr<AGX::HAL200::Sampler>*>(a1 + 752, *(uint64_t **)(a2 + 752), *(uint64_t **)(a2 + 760), (uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4);
    *(void *)(a1 + 776) = *(void *)(a2 + 776);
    memcpy((void *)(a1 + 784), (const void *)(a2 + 784), 0x160uLL);
    long long v16 = *(_OWORD *)(a2 + 1136);
    *(_OWORD *)(a1 + 1148) = *(_OWORD *)(a2 + 1148);
    *(_OWORD *)(a1 + 1136) = v16;
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 1168), *(char **)(a2 + 1168), *(char **)(a2 + 1176), (uint64_t)(*(void *)(a2 + 1176) - *(void *)(a2 + 1168)) >> 2);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(a1 + 1192), *(void **)(a2 + 1192), (void *)(a2 + 1200));
  }
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a2 + 1216);
  long long v18 = *(_OWORD *)(a2 + 1224);
  *(void *)(a1 + 1237) = *(void *)(a2 + 1237);
  *(_OWORD *)(a1 + 1224) = v18;
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,unsigned long long>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  long long v6 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      std::string::operator=((std::string *)(v6 + 16), (const std::string *)(a2 + 2));
      *((void *)v6 + 5) = a2[5];
      long long v7 = *(char **)v6;
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      long long v6 = v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
    do
    {
      long long v15 = *(char **)v6;
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      long long v6 = v15;
    }
    while (v15);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      long long v8 = (char *)operator new(0x30uLL);
      uint64_t v9 = (uint64_t)v8;
      long long v10 = (uint64_t *)(v8 + 16);
      *(void *)long long v8 = 0;
      *((void *)v8 + 1) = 0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v8 + 16), (const std::string::value_type *)a2[2], a2[3]);
      }
      else
      {
        long long v11 = *((_OWORD *)a2 + 1);
        *((void *)v8 + 4) = a2[4];
        *(_OWORD *)long long v10 = v11;
      }
      *(void *)(v9 + 40) = a2[5];
      int v12 = *(char *)(v9 + 39);
      if (v12 >= 0) {
        long long v13 = v10;
      }
      else {
        long long v13 = *(uint64_t **)(v9 + 16);
      }
      if (v12 >= 0) {
        unint64_t v14 = *(unsigned __int8 *)(v9 + 39);
      }
      else {
        unint64_t v14 = *(void *)(v9 + 24);
      }
      *(void *)(v9 + 8) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v13, v14);
      std::__hash_table<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ExternalSymbolInfo>>>::__node_insert_multi((uint64_t)a1, v9);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_242AA9BD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **,AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **>(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      abort();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  long long v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    unsigned __int16 __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *long long v15 = &v9[v14];
  return result;
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  if (a1[2])
  {
    long long v6 = (uint64_t **)*a1;
    uint64_t v8 = a1 + 1;
    long long v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    uint64_t v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      uint64_t v10 = (uint64_t *)v9[2];
      if (v10)
      {
        BOOL v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *uint64_t v10 = 0;
          while (1)
          {
            uint64_t v34 = (void *)v10[1];
            if (!v34) {
              break;
            }
            do
            {
              uint64_t v10 = v34;
              uint64_t v34 = (void *)*v34;
            }
            while (v34);
          }
        }
        else
        {
          for (v10[1] = 0; v11; BOOL v11 = (uint64_t *)v10[1])
          {
            do
            {
              uint64_t v10 = v11;
              BOOL v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        unint64_t v12 = v9;
        uint64_t v13 = v4;
        do
        {
          uint64_t v9 = v10;
          unsigned int v14 = *((_DWORD *)v13 + 7);
          *((_DWORD *)v12 + 7) = v14;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v13 + 8);
          long long v15 = *v8;
          long long v16 = a1 + 1;
          unint64_t v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v16 = v15;
                if (v14 >= *((_DWORD *)v15 + 7)) {
                  break;
                }
                long long v15 = (uint64_t *)*v15;
                unint64_t v17 = (uint64_t **)v16;
                if (!*v16) {
                  goto LABEL_20;
                }
              }
              long long v15 = (uint64_t *)v15[1];
            }
            while (v15);
            unint64_t v17 = (uint64_t **)(v16 + 1);
          }
LABEL_20:
          *unint64_t v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          unsigned char *v17 = v12;
          long long v18 = (uint64_t *)**a1;
          if (v18)
          {
            *a1 = v18;
            unint64_t v12 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            uint64_t v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v21 = (void *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *uint64_t v10 = 0;
                while (1)
                {
                  uint64_t v22 = (void *)v10[1];
                  if (!v22) {
                    break;
                  }
                  do
                  {
                    uint64_t v10 = v22;
                    uint64_t v22 = (void *)*v22;
                  }
                  while (v22);
                }
              }
              else
              {
                for (v10[1] = 0; v21; uint64_t v21 = (void *)v10[1])
                {
                  do
                  {
                    uint64_t v10 = v21;
                    uint64_t v21 = (void *)*v21;
                  }
                  while (v21);
                }
              }
            }
          }
          else
          {
            uint64_t v10 = 0;
          }
          uint64_t v19 = (void *)v13[1];
          if (v19)
          {
            do
            {
              uint64_t v4 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v4 = (void *)v13[2];
              BOOL v20 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v20);
          }
          if (!v9) {
            break;
          }
          unint64_t v12 = v9;
          uint64_t v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(v9);
      if (v10)
      {
        for (uint64_t i = (void *)v10[2]; i; uint64_t i = (void *)i[2])
          uint64_t v10 = i;
        std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    size_t v24 = (uint64_t ***)(a1 + 1);
    do
    {
      uint64_t v25 = (uint64_t *)operator new(0x28uLL);
      int v26 = v25;
      uint64_t v27 = *(void *)((char *)v4 + 28);
      *(uint64_t *)((char *)v25 + 28) = v27;
      int64_t v28 = *v24;
      float v29 = a1 + 1;
      BOOL v30 = a1 + 1;
      if (*v24)
      {
        do
        {
          while (1)
          {
            float v29 = v28;
            if (*((_DWORD *)v28 + 7) <= v27) {
              break;
            }
            int64_t v28 = (uint64_t **)*v28;
            BOOL v30 = v29;
            if (!*v29) {
              goto LABEL_56;
            }
          }
          int64_t v28 = (uint64_t **)v28[1];
        }
        while (v28);
        BOOL v30 = v29 + 1;
      }
LABEL_56:
      *uint64_t v25 = 0;
      v25[1] = 0;
      _OWORD v25[2] = (uint64_t)v29;
      *BOOL v30 = v25;
      unint64_t v31 = (uint64_t *)**a1;
      if (v31)
      {
        *a1 = v31;
        int v26 = *v30;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      unint64_t v32 = (void *)v4[1];
      if (v32)
      {
        do
        {
          int64_t v33 = v32;
          unint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          int64_t v33 = (void *)v4[2];
          BOOL v20 = *v33 == (void)v4;
          uint64_t v4 = v33;
        }
        while (!v20);
      }
      uint64_t v4 = v33;
    }
    while (v33 != a3);
  }
}

uint64_t *std::map<unsigned int,unsigned int>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = result;
    long long v6 = result + 1;
    while (1)
    {
      long long v7 = (uint64_t *)v5[1];
      uint64_t v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        uint64_t v9 = v5[1];
        uint64_t v10 = v6;
        if (v7)
        {
          do
          {
            uint64_t v8 = (uint64_t *)v9;
            uint64_t v9 = *(void *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (v11);
        }
        unsigned int v12 = *((_DWORD *)v4 + 7);
        if (*((_DWORD *)v8 + 7) >= v12) {
          break;
        }
      }
      uint64_t v13 = (uint64_t **)v6;
      unsigned int v14 = (uint64_t **)v6;
      if (!v7) {
        goto LABEL_19;
      }
      uint64_t v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        unsigned int v14 = (uint64_t **)v8;
LABEL_19:
        long long v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)((char *)v4 + 28);
        *long long v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *uint64_t v13 = v16;
        uint64_t v17 = *(void *)*v5;
        if (v17)
        {
          *long long v5 = v17;
          long long v18 = *v13;
        }
        else
        {
          long long v18 = v16;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      uint64_t v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          BOOL v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          BOOL v20 = (void *)v4[2];
          BOOL v11 = *v20 == (void)v4;
          uint64_t v4 = v20;
        }
        while (!v11);
      }
      uint64_t v4 = v20;
      if (v20 == a3) {
        return result;
      }
    }
    uint64_t v13 = (uint64_t **)v6;
    unsigned int v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v14 = (uint64_t **)v7;
          unsigned int v15 = *((_DWORD *)v7 + 7);
          if (v12 >= v15) {
            break;
          }
          long long v7 = *v14;
          uint64_t v13 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (v15 >= v12) {
          goto LABEL_23;
        }
        uint64_t v13 = v14 + 1;
        long long v7 = v14[1];
        if (!v7) {
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  return result;
}

void **std::vector<std::string>::~vector[abi:nn180100](void **a1)
{
  unint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

AGX::VertexProgramVaryings *AGX::VertexProgramVaryings::VertexProgramVaryings(AGX::VertexProgramVaryings *this, const AGCDeserializedReply *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (*((void *)a2 + 58))
  {
    unint64_t v3 = (char *)a2 + 464;
    if (!*((void *)a2 + 59)) {
      unint64_t v3 = (char *)a2 + 1024;
    }
  }
  else
  {
    unint64_t v3 = (char *)a2 + 1024;
  }
  long long v5 = *(unsigned int **)v3;
  uint64_t v4 = *((void *)v3 + 1);
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    long long v7 = 0;
  }
  else {
    long long v7 = (int *)((char *)v5 + *v5);
  }
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xDu && (uint64_t v9 = v8[6]) != 0) {
    uint64_t v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 >= 0xB)
  {
    if (v11[5])
    {
      uint64_t v13 = (unsigned int *)((char *)v10 + v11[5] + *(unsigned int *)((char *)v10 + v11[5]));
      if (v12 < 0xD) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (v12 < 0xD) {
        goto LABEL_24;
      }
    }
    uint64_t v14 = v11[6];
    if (v14)
    {
      unsigned int v15 = (unsigned int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
      if (!v13) {
        return this;
      }
      goto LABEL_25;
    }
LABEL_24:
    unsigned int v15 = 0;
    if (!v13) {
      return this;
    }
LABEL_25:
    unsigned int v18 = *v13;
    long long v16 = v13 + 1;
    size_t v17 = v18;
    if (v18 >= 0x17)
    {
      uint64_t v20 = (v17 & 0xFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v20 = v17 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_dst = (long long *)operator new(v20 + 1);
      *((void *)&__dst + 1) = v17;
      unint64_t v31 = v21 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = v17;
      p_dst = &__dst;
      if (!v17)
      {
LABEL_32:
        *((unsigned char *)p_dst + v17) = 0;
        if (*((char *)this + 23) < 0) {
          operator delete(*(void **)this);
        }
        uint64_t v22 = (void **)((char *)this + 24);
        *(_OWORD *)this = __dst;
        *((void *)this + 2) = v31;
        unsigned int v25 = *v15;
        int64_t v23 = v15 + 1;
        size_t v24 = v25;
        if (v25 >= 0x17)
        {
          uint64_t v27 = (v24 & 0xFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17) {
            uint64_t v27 = v24 | 7;
          }
          uint64_t v28 = v27 + 1;
          int v26 = (long long *)operator new(v27 + 1);
          *((void *)&__dst + 1) = v24;
          unint64_t v31 = v28 | 0x8000000000000000;
          *(void *)&long long __dst = v26;
        }
        else
        {
          HIBYTE(v31) = v24;
          int v26 = &__dst;
          if (!v24) {
            goto LABEL_41;
          }
        }
        memmove(v26, v23, v24);
LABEL_41:
        *((unsigned char *)v26 + v24) = 0;
        if (*((char *)this + 47) < 0) {
          operator delete(*v22);
        }
        *(_OWORD *)uint64_t v22 = __dst;
        *((void *)this + 5) = v31;
        return this;
      }
    }
    memmove(p_dst, v16, v17);
    goto LABEL_32;
  }
  return this;
}

void sub_242AAA450(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_5:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

__n128 AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  int v3 = *(_DWORD *)(v1 + 1000);
  int v4 = *(_DWORD *)(v1 + 1032);
  uint64_t v5 = *(void *)(v1 + 1936);
  uint64_t v8 = (unsigned __int16)((v6 + 3) >> 2);
  unint64_t v9 = ((unsigned __int16)((v7 + 3) >> 2) + 1) & 0xFFE;
  *(void *)(v5 + 88) = *(void *)(v5 + 88) & 0xFFFFF00000000000 | (v8 << 16) & 0xFFFFF001FFFFFFFFLL | (((v9 >> 1) & 0x7FF) << 33) | v8;
  unsigned int v10 = (v3 + 3) >> 2;
  unsigned int v11 = (((v4 + 3) >> 2) + 1) & 0x7FFFFFFE;
  *(_DWORD *)(v5 + 248) = v10;
  *(_DWORD *)(v5 + 252) = v11;
  if (*(unsigned char *)(v5 + 174)) {
    AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v5 + 48), *(_DWORD *)(v5 + 240), *(void *)v5 + *(unsigned __int16 *)(v5 + 244));
  }
  uint64_t v12 = *(void *)(v1 + 2784);
  if (v12)
  {
    *(void *)(v12 + 88) = *(void *)(v12 + 88) & 0xFFFFF00000000000 | ((unint64_t)v8 << 16) | (v9 << 32) | v8;
    *(_DWORD *)(v12 + 248) = v10;
    *(_DWORD *)(v12 + 252) = v11;
    if (*(unsigned char *)(v12 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v12 + 48), *(_DWORD *)(v12 + 240), *(void *)v12 + *(unsigned __int16 *)(v12 + 244));
    }
    uint64_t v13 = *(void *)(v1 + 2784);
    uint64_t v14 = *(char **)(v1 + 2736);
    memcpy(v14, *(const void **)v13, *(void *)(v13 + 8) - *(void *)v13);
    if (*(unsigned char *)(v13 + 200)) {
      *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    unsigned int v15 = *(unsigned int **)(v13 + 176);
    for (uint64_t i = *(unsigned int **)(v13 + 184); v15 != i; v15 += 3)
    {
      v17.i64[0] = v24[v15[1]] + *v15;
      v17.i64[1] = (unint64_t)v17.i64[0] >> 5;
      *(int8x16_t *)&v14[v15[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[v15[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v18 = *(void *)(v1 + 2784);
    long long v19 = *(_OWORD *)(v18 + 80);
    long long v20 = *(_OWORD *)(v18 + 96);
    long long v21 = *(_OWORD *)(v18 + 64);
    *(_OWORD *)(v1 + 2792) = *(_OWORD *)(v18 + 48);
    *(_OWORD *)(v1 + 2840) = v20;
    *(_OWORD *)(v1 + 2824) = v19;
    *(_OWORD *)(v1 + 2808) = v21;
    long long v22 = *(_OWORD *)(v18 + 128);
    __n128 result = *(__n128 *)(v18 + 144);
    uint64_t v23 = *(void *)(v18 + 160);
    *(_OWORD *)(v1 + 2856) = *(_OWORD *)(v18 + 112);
    *(void *)(v1 + 2904) = v23;
    *(__n128 *)(v1 + 2888) = result;
    *(_OWORD *)(v1 + 2872) = v22;
  }
  return result;
}

__n128 AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::cloneProgramInfo(uint64_t a1, uint64_t a2)
{
  AGX::Heap<true>::allocateImpl(&v13, *(void *)(a2 + 1232), *(void *)(a2 + 1424), (void *)(a1 + 1608));
  long long v4 = v14[0];
  *(_OWORD *)(a1 + 1408) = v13;
  *(_OWORD *)(a1 + 1424) = v4;
  *(_OWORD *)(a1 + 1433) = *(_OWORD *)((char *)v14 + 9);
  *(void *)(a1 + 1200) = *(void *)(a1 + 1408);
  *(_DWORD *)(a1 + 1552) = *(_DWORD *)(a2 + 1552);
  memcpy(*(void **)(a1 + 1416), *(const void **)(a2 + 1416), *(void *)(a1 + 1424));
  uint64_t v5 = *(void *)(a2 + 1472);
  if (v5)
  {
    AGX::Heap<true>::allocateImpl(&v13, *(void *)(a2 + 1232), v5, (void *)(a1 + 1616));
    long long v6 = v14[0];
    *(_OWORD *)(a1 + 1456) = v13;
    *(_OWORD *)(a1 + 1472) = v6;
    *(_OWORD *)(a1 + 1481) = *(_OWORD *)((char *)v14 + 9);
    memcpy(*(void **)(a1 + 1464), *(const void **)(a2 + 1464), *(void *)(a1 + 1472));
  }
  uint64_t v7 = *(void *)(a2 + 1520);
  if (v7)
  {
    AGX::Heap<true>::allocateImpl(&v13, *(void *)(a2 + 1232), v7, (void *)(a1 + 1624));
    long long v8 = v14[0];
    *(_OWORD *)(a1 + 1504) = v13;
    *(_OWORD *)(a1 + 1520) = v8;
    *(_OWORD *)(a1 + 1529) = *(_OWORD *)((char *)v14 + 9);
    memcpy(*(void **)(a1 + 1512), *(const void **)(a2 + 1512), *(void *)(a1 + 1520));
    uint64_t v9 = *(void *)(a1 + 1520);
    *(_OWORD *)(a1 + 1384) = *(_OWORD *)(a1 + 1504);
    *(void *)(a1 + 1400) = v9;
  }
  long long v10 = *(_OWORD *)(a1 + 1424);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a1 + 1408);
  *(_OWORD *)(a1 + 1256) = v10;
  *(_OWORD *)(a1 + 1265) = *(_OWORD *)(a1 + 1433);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a1 + 1456);
  *(_OWORD *)(a1 + 1304) = *(_OWORD *)(a1 + 1472);
  *(_OWORD *)(a1 + 1313) = *(_OWORD *)(a1 + 1481);
  *(_OWORD *)(a1 + 1352) = *(_OWORD *)(a1 + 1520);
  *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 1504);
  *(_OWORD *)(a1 + 1361) = *(_OWORD *)(a1 + 1529);
  __n128 result = *(__n128 *)(a1 + 1408);
  uint64_t v12 = *(void *)(a1 + 1424);
  *(__n128 *)(a1 + 1208) = result;
  *(void *)(a1 + 1224) = v12;
  *(unsigned char *)(a1 + 1556) = 1;
  return result;
}

void AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ObjectProgramVariant(uint64_t a1)
{
  unint64_t v1 = MEMORY[0x270FA5388](a1);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(v1, v2, v3, v4, v5, v6);
}

void sub_242AABA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  unint64_t v31 = *(void **)(v29 - 160);
  if (v31)
  {
    *(void *)(v29 - 152) = v31;
    operator delete(v31);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a15);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v28);
  _Unwind_Resume(a1);
}

void AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3472);
  std::mutex::lock((std::mutex *)(a1 + 3472));
  uint64_t v3 = *(unsigned char **)(a1 + 544);
  if (v3)
  {
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(a1, *(uint64_t ***)(a1 + 536), *(void *)(a1 + 544));
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, (uint64_t)v3);
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::finalize(a1 + 1936);
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)(a1 + 1936));
    int v4 = 8 * (*(_DWORD *)(*(void *)(a1 + 1936) + 248) & 0x3FFFF);
    int v5 = *(unsigned __int8 *)(a1 + 3252) << 16;
    *(_DWORD *)(a1 + 3184) = *(_DWORD *)(*(void *)(a1 + 1936) + 252) & 0xFFF;
    *(_DWORD *)(a1 + 3188) = v4;
    *(_DWORD *)(a1 + 3192) = 0;
    *(_DWORD *)(a1 + 3196) = v5;
    if (v3[312])
    {
      *(int8x16_t *)(a1 + 2152) = vorrq_s8(*(int8x16_t *)(a1 + 2152), *(int8x16_t *)(a1 + 1992));
      *(void *)(a1 + 1992) = 0;
      *(void *)(a1 + 2000) = 0;
    }
    if (v3[313])
    {
      *(int8x16_t *)(a1 + 2168) = vorrq_s8(*(int8x16_t *)(a1 + 2168), *(int8x16_t *)(a1 + 2008));
      *(void *)(a1 + 2008) = 0;
      *(void *)(a1 + 2016) = 0;
    }
    if (v3[314])
    {
      *(int8x16_t *)(a1 + 2136) = vorrq_s8(*(int8x16_t *)(a1 + 2136), *(int8x16_t *)(a1 + 1976));
      *(void *)(a1 + 1976) = 0;
      *(void *)(a1 + 1984) = 0;
    }
    if (v3[315])
    {
      int8x16_t v6 = vorrq_s8(*(int8x16_t *)(a1 + 2200), *(int8x16_t *)(a1 + 2088));
      int8x16_t v7 = vorrq_s8(*(int8x16_t *)(a1 + 2216), *(int8x16_t *)(a1 + 2104));
      int8x16_t v8 = vorrq_s8(*(int8x16_t *)(a1 + 2184), *(int8x16_t *)(a1 + 2072));
      int8x16_t v9 = vorrq_s8(*(int8x16_t *)(a1 + 2232), *(int8x16_t *)(a1 + 2120));
      *(int8x16_t *)(a1 + 2184) = v8;
      *(int8x16_t *)(a1 + 2200) = v6;
      *(int8x16_t *)(a1 + 2216) = v7;
      *(int8x16_t *)(a1 + 2232) = v9;
      int8x16_t v10 = 0uLL;
      *(_OWORD *)(a1 + 2104) = 0u;
      *(_OWORD *)(a1 + 2120) = 0u;
      int8x16_t v11 = 0uLL;
      *(_OWORD *)(a1 + 2072) = 0u;
      *(_OWORD *)(a1 + 2088) = 0u;
    }
    else
    {
      int8x16_t v10 = *(int8x16_t *)(a1 + 2072);
      int8x16_t v11 = *(int8x16_t *)(a1 + 2088);
      int8x16_t v8 = *(int8x16_t *)(a1 + 2184);
      int8x16_t v6 = *(int8x16_t *)(a1 + 2200);
    }
    int8x16_t v12 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1992), *(int8x16_t *)(a1 + 2040)), vorrq_s8(v11, *(int8x16_t *)(a1 + 2152))), v6);
    *(int8x16_t *)(a1 + 1944) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1976), *(int8x16_t *)(a1 + 2024)), vorrq_s8(v10, *(int8x16_t *)(a1 + 2136))), v8);
    *(int8x16_t *)(a1 + 1960) = v12;
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(a1 + 1936);
    uint64_t v13 = *(void *)(a1 + 536);
    uint64_t v14 = *(void **)(v13 + 72);
    unsigned int v15 = *(void **)(v13 + 80);
    if (v14 != v15)
    {
      while (2)
      {
        uint64_t v18 = (_DWORD *)*v14;
        switch(*(_DWORD *)*v14)
        {
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x10:
          case 0x11:
          case 0x3E:
          case 0x5D:
          case 0x61:
          case 0x62:
            goto LABEL_18;
          case 0xE:
          case 0xF:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5E:
          case 0x5F:
          case 0x60:
            goto LABEL_22;
          default:
            if (*(_DWORD *)*v14 == 124)
            {
LABEL_18:
              int v19 = v18[1];
              if (v19 < 0) {
                goto LABEL_16;
              }
            }
            else
            {
LABEL_22:
              int v19 = v18[1];
              if ((*(_DWORD *)*v14 - 11) > 0x6C) {
                goto LABEL_16;
              }
            }
            uint64_t v20 = *(void *)(a1 + 664) + 4 * v18[2];
            int v21 = v19 & 0xFFFFF;
            int v22 = 56 * (v19 & 0xFFFFF);
            unsigned int v23 = v22 + 16;
            switch(*(_DWORD *)*v14)
            {
              case 0xB:
                *(uint32x4_t *)uint64_t v20 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v23), (int32x4_t)xmmword_242EA80F0), 2uLL);
                break;
              case 0xC:
                *(_DWORD *)uint64_t v20 = v23 >> 2;
                *(_DWORD *)(v20 + 4) = (v23 >> 2) | 1;
                *(uint32x2_t *)(v20 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v23), (int32x2_t)0xC00000008), 2uLL);
                break;
              case 0xD:
                unsigned int v16 = v22 + 48;
                goto LABEL_14;
              case 0x10:
                unsigned int v16 = v22 + 52;
                goto LABEL_14;
              case 0x11:
                unsigned int v16 = v22 + 56;
                goto LABEL_14;
              case 0x2B:
                *(_DWORD *)uint64_t v20 = v19 + 2293;
                uint64_t v24 = *(unsigned int *)(a1 + 3260);
                *(_DWORD *)(a1 + 3264 + 4 * v24) = v19;
                *(_DWORD *)(a1 + 3260) = v24 + 1;
                break;
              case 0x3B:
                *(void *)uint64_t v20 = 0x70500000704;
                break;
              case 0x3E:
                unsigned int v16 = v22 + 60;
                goto LABEL_14;
              case 0x40:
                *(void *)uint64_t v20 = 0x70D0000070CLL;
                break;
              case 0x54:
                *(_DWORD *)uint64_t v20 = 2329;
                break;
              case 0x5D:
                if ((v19 & 0xFFF00000) == 0x400000)
                {
                  *(_DWORD *)uint64_t v20 = 2;
                }
                else
                {
                  unsigned int v16 = v22 + 64;
LABEL_14:
                  unsigned int v17 = v16 >> 2;
LABEL_15:
                  *(_DWORD *)uint64_t v20 = v17;
                }
                break;
              case 0x61:
                unsigned int v25 = 8 * v21 + 7224;
                goto LABEL_36;
              case 0x62:
                unsigned int v25 = 8 * v21 + 8248;
LABEL_36:
                unsigned int v26 = v25 >> 2;
                *(_DWORD *)uint64_t v20 = v26;
                *(_DWORD *)(v20 + 4) = v26 | 1;
                break;
              case 0x6D:
                unsigned int v17 = v19 + 2163;
                goto LABEL_15;
              case 0x6E:
                unsigned int v17 = v19 + 2228;
                goto LABEL_15;
              case 0x6F:
                *(_DWORD *)uint64_t v20 = 2328;
                break;
              case 0x71:
                unsigned int v16 = 8 * v21 + 8248;
                goto LABEL_14;
              case 0x76:
                *(void *)uint64_t v20 = 0x82F0000082ELL;
                break;
              case 0x77:
                *(void *)uint64_t v20 = 0x83100000830;
                break;
              default:
                break;
            }
LABEL_16:
            if (++v14 != v15) {
              continue;
            }
            goto LABEL_44;
        }
      }
    }
LABEL_44:
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, (uint64_t)v3);
    uint64_t v27 = *(void *)(a1 + 544);
    if (v27)
    {
      uint64_t v28 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v27);
      MEMORY[0x24566ED90](v28, 0x1030C40704B4075);
    }
    *(void *)(a1 + 544) = 0;
    uint64_t v29 = *(ProgramBindingsAndDMAList **)(a1 + 536);
    if (v29)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v29);
      MEMORY[0x24566ED90]();
    }
    *(void *)(a1 + 536) = 0;
  }

  std::mutex::unlock(v2);
}

void sub_242AAC184(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::MeshProgramVariant(uint64_t a1)
{
  unint64_t v1 = MEMORY[0x270FA5388](a1);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(v1, v2, v3, v4, v5, v6);
}

void sub_242AAE09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, AGX::HAL200::MeshProgramVariantESLState *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v36 = *(void **)(v34 - 160);
  if (v36)
  {
    *(void *)(v34 - 152) = v36;
    operator delete(v36);
  }
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a21);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)a20);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(a19);
  _Unwind_Resume(a1);
}

void AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3576);
  std::mutex::lock((std::mutex *)(a1 + 3576));
  uint64_t v3 = *(unsigned char **)(a1 + 544);
  if (!v3) {
    goto LABEL_59;
  }
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(a1, *(uint64_t ***)(a1 + 536), *(void *)(a1 + 544));
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, (uint64_t)v3);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::finalize(a1 + 1936);
  AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)(a1 + 1936));
  int v4 = *(_DWORD **)(a1 + 3184);
  int v5 = *(_DWORD *)(a1 + 3276);
  int v6 = v4[5] + v4[3];
  if (v4[1]) {
    LOBYTE(v6) = v6 + 1;
  }
  int v7 = v4[3] | (v4[5] << 16) | (v6 << 8);
  unsigned int v8 = (((v5 * v4[7]) << 14) + 49152) & 0x1FFF0000 | ((v4[6] * v5 + 3) >> 2) & 0x1FFF;
  int v9 = v4[12] & 0x40 | ((v8 != 0) << 7);
  __int16 v10 = v5 - 1;
  if (!v5) {
    __int16 v10 = 0;
  }
  int v11 = ((v5 << 12) + 2093056) & 0x1F0000 | v10 & 0x1FF | ((v4[12] >> 9) << 30);
  int v12 = (*(void *)(a1 + 3264) >> 21) & 0x3FF800 | *(void *)(a1 + 3264) & 0x7FF | (*(_DWORD *)(a1 + 3272) << 22);
  unsigned int v13 = ((v4[9] << 10) + 15360) & 0xFFFC000 | ((v4[8] + v4[11] + 15) >> 4) & 0x3FFF;
  int32x2_t v14 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)(*(void *)(a1 + 1936) + 248), (uint32x2_t)0x1000000003), (int8x8_t)0xFFF0000001FFFF8);
  *(_DWORD *)(a1 + 3192) = v7;
  *(_DWORD *)(a1 + 3196) = v9 | 0x10;
  *(int32x2_t *)(a1 + 3200) = vrev64_s32(v14);
  *(_DWORD *)(a1 + 3208) = 0;
  *(_DWORD *)(a1 + 3212) = v11;
  *(_DWORD *)(a1 + 3216) = v12;
  *(_DWORD *)(a1 + 3220) = v8;
  *(_DWORD *)(a1 + 3224) = v13;
  if (v3[312])
  {
    *(int8x16_t *)(a1 + 2152) = vorrq_s8(*(int8x16_t *)(a1 + 2152), *(int8x16_t *)(a1 + 1992));
    *(void *)(a1 + 1992) = 0;
    *(void *)(a1 + 2000) = 0;
  }
  if (v3[313])
  {
    *(int8x16_t *)(a1 + 2168) = vorrq_s8(*(int8x16_t *)(a1 + 2168), *(int8x16_t *)(a1 + 2008));
    *(void *)(a1 + 2008) = 0;
    *(void *)(a1 + 2016) = 0;
  }
  if (v3[314])
  {
    *(int8x16_t *)(a1 + 2136) = vorrq_s8(*(int8x16_t *)(a1 + 2136), *(int8x16_t *)(a1 + 1976));
    *(void *)(a1 + 1976) = 0;
    *(void *)(a1 + 1984) = 0;
  }
  if (v3[315])
  {
    int8x16_t v15 = vorrq_s8(*(int8x16_t *)(a1 + 2200), *(int8x16_t *)(a1 + 2088));
    int8x16_t v16 = vorrq_s8(*(int8x16_t *)(a1 + 2216), *(int8x16_t *)(a1 + 2104));
    int8x16_t v17 = vorrq_s8(*(int8x16_t *)(a1 + 2184), *(int8x16_t *)(a1 + 2072));
    int8x16_t v18 = vorrq_s8(*(int8x16_t *)(a1 + 2232), *(int8x16_t *)(a1 + 2120));
    *(int8x16_t *)(a1 + 2184) = v17;
    *(int8x16_t *)(a1 + 2200) = v15;
    *(int8x16_t *)(a1 + 2216) = v16;
    *(int8x16_t *)(a1 + 2232) = v18;
    int8x16_t v19 = 0uLL;
    *(_OWORD *)(a1 + 2104) = 0u;
    *(_OWORD *)(a1 + 2120) = 0u;
    int8x16_t v20 = 0uLL;
    *(_OWORD *)(a1 + 2072) = 0u;
    *(_OWORD *)(a1 + 2088) = 0u;
  }
  else
  {
    int8x16_t v19 = *(int8x16_t *)(a1 + 2072);
    int8x16_t v20 = *(int8x16_t *)(a1 + 2088);
    int8x16_t v17 = *(int8x16_t *)(a1 + 2184);
    int8x16_t v15 = *(int8x16_t *)(a1 + 2200);
  }
  int8x16_t v21 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1992), *(int8x16_t *)(a1 + 2040)), vorrq_s8(v20, *(int8x16_t *)(a1 + 2152))), v15);
  *(int8x16_t *)(a1 + 1944) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 1976), *(int8x16_t *)(a1 + 2024)), vorrq_s8(v19, *(int8x16_t *)(a1 + 2136))), v17);
  *(int8x16_t *)(a1 + 1960) = v21;
  unint64_t v22 = AGX::getDirtyArguments<AGX::HAL200::FragmentProgramVariantESLState>((void *)(a1 + 1936), -1, -1, -1, -1, -1, -1, -1, -1);
  if ((v22 & 1) == 0)
  {
    if ((v22 & 0x10000) == 0) {
      goto LABEL_17;
    }
LABEL_63:
    *(void *)(a1 + 2264) |= 0x680000000uLL;
    uint64_t v23 = *(void *)(a1 + 2264);
    if ((v22 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  *(void *)(a1 + 2264) |= 0x620000000uLL;
  if ((v22 & 0x10000) != 0) {
    goto LABEL_63;
  }
LABEL_17:
  uint64_t v23 = *(void *)(a1 + 2264);
  if ((v22 & 0x1000000) != 0)
  {
LABEL_18:
    v23 |= 0x640000000uLL;
    *(void *)(a1 + 2264) = v23;
  }
LABEL_19:
  *(void *)(a1 + 2264) = v23 | v22 & 0x100000000 | 0xE00000000;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(a1 + 1936);
  uint64_t v24 = *(void *)(a1 + 3184);
  if (v24)
  {
    MEMORY[0x24566ED90](v24, 0x1000C40C80DBBA6);
    *(void *)(a1 + 3184) = 0;
  }
  uint64_t v25 = *(void *)(a1 + 536);
  unsigned int v26 = *(void **)(v25 + 72);
  uint64_t v27 = *(void **)(v25 + 80);
  if (v26 != v27)
  {
    while (2)
    {
      BOOL v30 = (_DWORD *)*v26;
      switch(*(_DWORD *)*v26)
      {
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x10:
        case 0x11:
        case 0x3E:
        case 0x5D:
        case 0x61:
        case 0x62:
          goto LABEL_28;
        case 0xE:
        case 0xF:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x54:
        case 0x55:
        case 0x56:
        case 0x57:
        case 0x58:
        case 0x59:
        case 0x5A:
        case 0x5B:
        case 0x5C:
        case 0x5E:
        case 0x5F:
        case 0x60:
          goto LABEL_32;
        default:
          if (*(_DWORD *)*v26 == 124)
          {
LABEL_28:
            int v31 = v30[1];
            if (v31 < 0) {
              goto LABEL_26;
            }
          }
          else
          {
LABEL_32:
            int v31 = v30[1];
            if ((*(_DWORD *)*v26 - 11) > 0x6C) {
              goto LABEL_26;
            }
          }
          uint64_t v32 = *(void *)(a1 + 664) + 4 * v30[2];
          int v33 = v31 & 0xFFFFF;
          int v34 = 56 * (v31 & 0xFFFFF);
          unsigned int v35 = v34 + 16;
          switch(*(_DWORD *)*v26)
          {
            case 0xB:
              *(uint32x4_t *)uint64_t v32 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v35), (int32x4_t)xmmword_242EA80F0), 2uLL);
              break;
            case 0xC:
              *(_DWORD *)uint64_t v32 = v35 >> 2;
              *(_DWORD *)(v32 + 4) = (v35 >> 2) | 1;
              *(uint32x2_t *)(v32 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v35), (int32x2_t)0xC00000008), 2uLL);
              break;
            case 0xD:
              unsigned int v28 = v34 + 48;
              goto LABEL_24;
            case 0x10:
              unsigned int v28 = v34 + 52;
              goto LABEL_24;
            case 0x11:
              unsigned int v28 = v34 + 56;
              goto LABEL_24;
            case 0x2B:
              *(_DWORD *)uint64_t v32 = 2098;
              break;
            case 0x3B:
              *(void *)uint64_t v32 = 0x70500000704;
              break;
            case 0x3E:
              unsigned int v28 = v34 + 60;
              goto LABEL_24;
            case 0x40:
              *(void *)uint64_t v32 = 0x70D0000070CLL;
              break;
            case 0x54:
              *(_DWORD *)uint64_t v32 = 2099;
              break;
            case 0x5D:
              if ((v31 & 0xFFF00000) == 0x400000)
              {
                *(_DWORD *)uint64_t v32 = 2;
              }
              else
              {
                unsigned int v28 = v34 + 64;
LABEL_24:
                unsigned int v29 = v28 >> 2;
LABEL_25:
                *(_DWORD *)uint64_t v32 = v29;
              }
              break;
            case 0x61:
              unsigned int v36 = 8 * v33 + 7240;
              goto LABEL_46;
            case 0x62:
              unsigned int v36 = 8 * v33 + 8264;
LABEL_46:
              unsigned int v37 = v36 >> 2;
              *(_DWORD *)uint64_t v32 = v37;
              *(_DWORD *)(v32 + 4) = v37 | 1;
              break;
            case 0x6C:
              *(_DWORD *)uint64_t v32 = 2100;
              break;
            case 0x6D:
              unsigned int v29 = v31 + 2166;
              goto LABEL_25;
            case 0x6E:
              unsigned int v29 = v31 + 2231;
              goto LABEL_25;
            case 0x71:
              unsigned int v28 = 8 * v33 + 8264;
              goto LABEL_24;
            case 0x76:
              *(void *)uint64_t v32 = 0x70F0000070ELL;
              break;
            case 0x77:
              *(void *)uint64_t v32 = 0x71100000710;
              break;
            default:
              break;
          }
LABEL_26:
          if (++v26 != v27) {
            continue;
          }
          goto LABEL_54;
      }
    }
  }
LABEL_54:
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, (uint64_t)v3);
  uint64_t v38 = *(void *)(a1 + 544);
  if (v38)
  {
    uint64_t v39 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v38);
    MEMORY[0x24566ED90](v39, 0x1030C40704B4075);
  }
  *(void *)(a1 + 544) = 0;
  size_t v40 = *(ProgramBindingsAndDMAList **)(a1 + 536);
  if (v40)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v40);
    MEMORY[0x24566ED90]();
  }
  *(void *)(a1 + 536) = 0;
LABEL_59:

  std::mutex::unlock(v2);
}

void sub_242AAE9C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::MeshProgramVariant(uint64_t a1, const AGCDeserializedReply *a2)
{
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)(a1 + 76) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 84) = 1610612736;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 124) = 0;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *(_OWORD *)(a1 + 132) = v3;
  *(_OWORD *)(a1 + 148) = v3;
  *(_OWORD *)(a1 + 164) = v3;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 397) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 1;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 856) = a1 + 864;
  *(void *)(a1 + 880) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 888) = 1610612736;
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 968) = v3;
  *(_OWORD *)(a1 + 952) = v3;
  *(_OWORD *)(a1 + 936) = v3;
  *(void *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(void *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1556) = 0;
  *(unsigned char *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1177) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(unsigned char *)(a1 + 1631) = 0;
  *(_OWORD *)(a1 + 1599) = 0u;
  *(_OWORD *)(a1 + 1615) = 0u;
  *(_OWORD *)(a1 + 1583) = 0u;
  *(void *)(a1 + 1728) = 0;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(void *)(a1 + 1744) = a1 + 1752;
  *(void *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(void *)a1 = &unk_26F852898;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2632) = 0;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(unsigned char *)(a1 + 2648) = 0;
  *(void *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(void *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(void *)(a1 + 2416) = 0;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_OWORD *)(a1 + 2464) = 0u;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(void *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(void *)(a1 + 2652) = 0;
  *(void *)(a1 + 2668) = 0;
  *(void *)(a1 + 2660) = 0;
  *(_DWORD *)(a1 + 2676) = 0;
  *(_DWORD *)(a1 + 2720) = 0;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_DWORD *)(a1 + 2808) = 1;
  *(void *)(a1 + 2904) = 0;
  *(_DWORD *)(a1 + 2792) = 3;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(void *)(a1 + 2832) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3120) = 0;
  *(void *)(a1 + 3136) = 0;
  *(void *)(a1 + 3144) = 0;
  *(_DWORD *)(a1 + 3072) = 0;
  *(_OWORD *)(a1 + 2980) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(void *)(a1 + 3128) = a1 + 3136;
  *(_DWORD *)(a1 + 3152) = -1;
  *(_DWORD *)(a1 + 3168) = -1;
  *(void *)(a1 + 3172) = 0;
  *(unsigned char *)(a1 + 3180) = 0;
  *(void *)(a1 + 3264) = 0;
  *(_DWORD *)(a1 + 3272) = 0;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_DWORD *)(a1 + 3328) = 1065353216;
  *(unsigned char *)(a1 + 3336) = 0;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(void *)(a1 + 3440) = 0;
  uint64_t v4 = a1 + 3456;
  *(_OWORD *)(a1 + 3456) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3528) = 0u;
  *(_OWORD *)(a1 + 3544) = 0u;
  *(_DWORD *)(a1 + 3560) = 1065353216;
  *(void *)(a1 + 3576) = 850045863;
  *(_OWORD *)(a1 + 3584) = 0u;
  *(_OWORD *)(a1 + 3600) = 0u;
  *(_OWORD *)(a1 + 3616) = 0u;
  *(void *)(a1 + 3632) = 0;
  AGX::VertexProgramVaryings::VertexProgramVaryings((AGX::VertexProgramVaryings *)__p, a2);
  if (*(char *)(a1 + 3479) < 0) {
    operator delete(*(void **)v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
  *(void *)(v4 + 16) = v9;
  HIBYTE(v9) = 0;
  LOBYTE(__p[0]) = 0;
  int v5 = (void **)(a1 + 3480);
  if (*(char *)(a1 + 3503) < 0)
  {
    operator delete(*v5);
    int v6 = SHIBYTE(v9);
    *(_OWORD *)int v5 = v10;
    *(void *)(a1 + 3496) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)int v5 = v10;
    *(void *)(a1 + 3496) = v11;
  }
  *(unsigned char *)(a1 + 1556) = 0;
  *(void *)(a1 + 3568) = 0;
  return a1;
}

void sub_242AAF19C(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v5);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v4);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(v3);
  AGX::HAL200::MeshProgramVariantESLState::~MeshProgramVariantESLState(v2);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v1);
  _Unwind_Resume(a1);
}

void AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::FragmentProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 40))(a6);
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::ProgramVariant(a1, a2, a3, &__dst, a5, v10);
}

void sub_242AB0490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,AGX::HAL200::FragmentProgramVariantESLState *a21)
{
  if (v22 < 0) {
    operator delete(v23);
  }
  std::mutex::~mutex(a13);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a16);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(a15);
  AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState(a21);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v21);
  _Unwind_Resume(a1);
}

void AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3456);
  std::mutex::lock((std::mutex *)(a1 + 3456));
  uint64_t v3 = *(void *)(a1 + 544);
  if (v3)
  {
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(a1, *(uint64_t ***)(a1 + 536), *(void *)(a1 + 544));
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, v3);
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(a1 + 1936);
    uint64_t v4 = *(void *)(a1 + 536);
    int v5 = *(int ***)(v4 + 72);
    int v6 = *(int ***)(v4 + 80);
    while (v5 != v6)
    {
      unsigned int v8 = *v5;
      int v9 = **v5;
      unsigned int v10 = v9 - 11;
      switch(v9)
      {
        case 11:
        case 12:
        case 13:
        case 16:
        case 17:
        case 62:
        case 93:
        case 97:
        case 98:
          goto LABEL_8;
        case 14:
        case 15:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
          goto LABEL_12;
        default:
          if (v9 == 113)
          {
LABEL_8:
            int v11 = v8[1];
            if (v11 < 0) {
              goto LABEL_5;
            }
          }
          else
          {
LABEL_12:
            int v11 = v8[1];
            if (v10 > 0x66) {
              goto LABEL_5;
            }
          }
          uint64_t v12 = v8[2];
          uint64_t v13 = *(void *)(a1 + 664);
          uint64_t v14 = v13 + 4 * v12;
          int v15 = v11 & 0xFFFFF;
          int v16 = 56 * (v11 & 0xFFFFF);
          unsigned int v17 = v16 + 16;
          switch(v10)
          {
            case 0u:
              *(uint32x4_t *)uint64_t v14 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v17), (int32x4_t)xmmword_242EA80F0), 2uLL);
              ++v5;
              continue;
            case 1u:
              *(_DWORD *)uint64_t v14 = v17 >> 2;
              *(_DWORD *)(v14 + 4) = (v17 >> 2) | 1;
              *(uint32x2_t *)(v14 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v17), (int32x2_t)0xC00000008), 2uLL);
              ++v5;
              continue;
            case 2u:
              unsigned int v7 = (v16 + 48) >> 2;
              goto LABEL_4;
            case 5u:
              unsigned int v7 = (v16 + 52) >> 2;
              goto LABEL_4;
            case 6u:
              unsigned int v7 = (v16 + 56) >> 2;
              goto LABEL_4;
            case 0xDu:
              unsigned int v7 = 2156;
              goto LABEL_4;
            case 0xEu:
              unsigned int v7 = 2155;
              goto LABEL_4;
            case 0x10u:
              *(_OWORD *)uint64_t v14 = xmmword_242EA8110;
              ++v5;
              continue;
            case 0x11u:
              *(void *)uint64_t v14 = 0x86A00000869;
              ++v5;
              continue;
            case 0x20u:
              unsigned int v7 = v11 + 2114;
              goto LABEL_4;
            case 0x2Du:
              unsigned int v7 = 2157;
              goto LABEL_4;
            case 0x30u:
              *(void *)uint64_t v14 = 0x70500000704;
              ++v5;
              continue;
            case 0x33u:
              unsigned int v7 = (v16 + 60) >> 2;
              goto LABEL_4;
            case 0x35u:
              *(void *)uint64_t v14 = 0x70D0000070CLL;
              ++v5;
              continue;
            case 0x40u:
              uint64_t v18 = *(unsigned __int8 *)(a1 + 3400);
              if (!*(unsigned char *)(a1 + 3400)) {
                break;
              }
              uint64_t v19 = 2 * v18;
              if (v18 <= 3)
              {
                uint64_t v20 = 0;
                int v21 = 1806;
                goto LABEL_47;
              }
              uint64_t v20 = v19 & 0x1F8;
              uint64_t v24 = (int32x4_t *)(v13 + 4 * v12 + 16);
              int32x4_t v25 = (int32x4_t)xmmword_242EA8100;
              uint64_t v26 = v20;
              do
              {
                v27.i64[0] = 0x400000004;
                v27.i64[1] = 0x400000004;
                v24[-1] = v25;
                *uint64_t v24 = vaddq_s32(v25, v27);
                v27.i64[0] = 0x800000008;
                v27.i64[1] = 0x800000008;
                int32x4_t v25 = vaddq_s32(v25, v27);
                v24 += 2;
                v26 -= 8;
              }
              while (v26);
              if (v20 != v19)
              {
                int v21 = v20 + 1806;
LABEL_47:
                uint64_t v28 = v20 - v19;
                unsigned int v29 = (_DWORD *)(v13 + 4 * v20 + 4 * v12);
                do
                  *v29++ = v21++;
                while (!__CFADD__(v28++, 1));
                break;
              }
              break;
            case 0x52u:
              if ((v11 & 0xFFF00000) == 0x400000) {
                unsigned int v7 = 2;
              }
              else {
                unsigned int v7 = (v16 + 64) >> 2;
              }
              goto LABEL_4;
            case 0x56u:
              int v22 = 7288;
              goto LABEL_34;
            case 0x57u:
              int v22 = 8312;
LABEL_34:
              unsigned int v23 = (v22 + 8 * v15) >> 2;
              *(_DWORD *)uint64_t v14 = v23;
              *(_DWORD *)(v14 + 4) = v23 | 1;
              ++v5;
              continue;
            case 0x5Eu:
              *(void *)uint64_t v14 = 0x83F0000083ELL;
              ++v5;
              continue;
            case 0x5Fu:
              unsigned int v7 = 2112;
              goto LABEL_4;
            case 0x60u:
              unsigned int v7 = 2113;
              goto LABEL_4;
            case 0x62u:
              unsigned int v7 = v11 + 2224;
              goto LABEL_4;
            case 0x63u:
              unsigned int v7 = v11 + 2289;
              goto LABEL_4;
            case 0x64u:
              unsigned int v7 = 2158;
              goto LABEL_4;
            case 0x65u:
              unsigned int v7 = 2354;
              goto LABEL_4;
            case 0x66u:
              unsigned int v7 = (8 * v15 + 8312) >> 2;
LABEL_4:
              *(_DWORD *)uint64_t v14 = v7;
              break;
            default:
              break;
          }
LABEL_5:
          ++v5;
          break;
      }
    }
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, v3);
    uint64_t v31 = *(void *)(a1 + 544);
    if (v31)
    {
      uint64_t v32 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v31);
      MEMORY[0x24566ED90](v32, 0x1030C40704B4075);
    }
    *(void *)(a1 + 544) = 0;
    int v33 = *(ProgramBindingsAndDMAList **)(a1 + 536);
    if (v33)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v33);
      MEMORY[0x24566ED90]();
    }
    *(void *)(a1 + 536) = 0;
  }

  std::mutex::unlock(v2);
}

void sub_242AB08C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  memcpy((void *)a1, (const void *)a2, 0x174uLL);
  if (a1 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 376), *(char **)(a2 + 376), *(char **)(a2 + 384), (uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 2);
  }
  uint64_t v4 = *(void *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(void *)(a1 + 400) = v4;
  std::string::operator=((std::string *)(a1 + 416), (const std::string *)(a2 + 416));
  std::string::operator=((std::string *)(a1 + 440), (const std::string *)(a2 + 440));
  std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a2 + 464));
  long long v6 = *(_OWORD *)(a2 + 504);
  long long v5 = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v6;
  *(_OWORD *)(a1 + 520) = v5;
  long long v7 = *(_OWORD *)(a2 + 584);
  long long v9 = *(_OWORD *)(a2 + 536);
  long long v8 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v7;
  *(_OWORD *)(a1 + 536) = v9;
  *(_OWORD *)(a1 + 552) = v8;
  long long v10 = *(_OWORD *)(a2 + 648);
  long long v12 = *(_OWORD *)(a2 + 600);
  long long v11 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  *(_OWORD *)(a1 + 600) = v12;
  *(_OWORD *)(a1 + 616) = v11;
  long long v13 = *(_OWORD *)(a2 + 712);
  long long v15 = *(_OWORD *)(a2 + 664);
  long long v14 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v13;
  *(_OWORD *)(a1 + 664) = v15;
  *(_OWORD *)(a1 + 680) = v14;
  if (a1 == a2)
  {
    *(void *)(a1 + 784) = *(void *)(a2 + 784);
    memcpy((void *)(a1 + 792), (const void *)(a2 + 792), 0x160uLL);
    long long v17 = *(_OWORD *)(a2 + 1156);
    *(_OWORD *)(a1 + 1144) = *(_OWORD *)(a2 + 1144);
    *(_OWORD *)(a1 + 1156) = v17;
  }
  else
  {
    std::vector<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *,std::allocator<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields *>>::__assign_with_size[abi:nn180100]<AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **,AGX::SamplerStateEncoderGen4_1<AGX::HAL200::TextureFormatTable>::SamplerStateFields **>((void *)(a1 + 728), *(char **)(a2 + 728), *(char **)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 3);
    *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 752);
    std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::__assign_with_size[abi:nn180100]<std::shared_ptr<AGX::HAL200::Sampler>*,std::shared_ptr<AGX::HAL200::Sampler>*>(a1 + 760, *(uint64_t **)(a2 + 760), *(uint64_t **)(a2 + 768), (uint64_t)(*(void *)(a2 + 768) - *(void *)(a2 + 760)) >> 4);
    *(void *)(a1 + 784) = *(void *)(a2 + 784);
    memcpy((void *)(a1 + 792), (const void *)(a2 + 792), 0x160uLL);
    long long v16 = *(_OWORD *)(a2 + 1144);
    *(_OWORD *)(a1 + 1156) = *(_OWORD *)(a2 + 1156);
    *(_OWORD *)(a1 + 1144) = v16;
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(a1 + 1176), *(char **)(a2 + 1176), *(char **)(a2 + 1184), (uint64_t)(*(void *)(a2 + 1184) - *(void *)(a2 + 1176)) >> 2);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,unsigned int>,std::__tree_node<std::__value_type<unsigned int,unsigned int>,void *> *,long>>((uint64_t **)(a1 + 1200), *(void **)(a2 + 1200), (void *)(a2 + 1208));
  }
  *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 1224);
  long long v18 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1245) = *(void *)(a2 + 1245);
  *(_OWORD *)(a1 + 1232) = v18;
  return a1;
}

void AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 3360);
  std::mutex::lock((std::mutex *)(a1 + 3360));
  uint64_t v3 = *(void *)(a1 + 544);
  if (v3)
  {
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::constructGatherInfo<ProgramBindingsAndDMAList>(a1, *(uint64_t ***)(a1 + 536), *(void *)(a1 + 544));
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(a1, v3);
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(a1 + 1936);
    uint64_t v4 = *(void *)(a1 + 536);
    long long v5 = *(void **)(v4 + 72);
    long long v6 = *(void **)(v4 + 80);
    if (v5 != v6)
    {
      while (2)
      {
        long long v8 = (_DWORD *)*v5;
        switch(*(_DWORD *)*v5)
        {
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x10:
          case 0x11:
          case 0x3E:
          case 0x5D:
          case 0x61:
          case 0x62:
            goto LABEL_8;
          case 0xE:
          case 0xF:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5E:
          case 0x5F:
          case 0x60:
            goto LABEL_12;
          default:
            if (*(_DWORD *)*v5 == 124)
            {
LABEL_8:
              int v9 = v8[1];
              if (v9 < 0) {
                goto LABEL_6;
              }
            }
            else
            {
LABEL_12:
              int v9 = v8[1];
              if ((*(_DWORD *)*v5 - 11) > 0x66) {
                goto LABEL_6;
              }
            }
            uint64_t v10 = *(void *)(a1 + 664) + 4 * v8[2];
            int v11 = v9 & 0xFFFFF;
            int v12 = 56 * (v9 & 0xFFFFF);
            unsigned int v13 = v12 + 16;
            switch(*(_DWORD *)*v5)
            {
              case 0xB:
                *(uint32x4_t *)uint64_t v10 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v13), (int32x4_t)xmmword_242EA80F0), 2uLL);
                break;
              case 0xC:
                *(_DWORD *)uint64_t v10 = v13 >> 2;
                *(_DWORD *)(v10 + 4) = (v13 >> 2) | 1;
                *(uint32x2_t *)(v10 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v13), (int32x2_t)0xC00000008), 2uLL);
                break;
              case 0xD:
                unsigned int v7 = (v12 + 48) >> 2;
                goto LABEL_5;
              case 0x10:
                unsigned int v7 = (v12 + 52) >> 2;
                goto LABEL_5;
              case 0x11:
                unsigned int v7 = (v12 + 56) >> 2;
                goto LABEL_5;
              case 0x2B:
                unsigned int v7 = v11 + 2102;
                goto LABEL_5;
              case 0x36:
                *(_DWORD *)uint64_t v10 = 1806;
                break;
              case 0x37:
                *(_DWORD *)uint64_t v10 = 1807;
                break;
              case 0x38:
                *(_DWORD *)uint64_t v10 = 1804;
                break;
              case 0x39:
                *(_DWORD *)uint64_t v10 = 1805;
                break;
              case 0x3B:
                *(void *)uint64_t v10 = 0x70500000704;
                break;
              case 0x3E:
                unsigned int v7 = (v12 + 60) >> 2;
                goto LABEL_5;
              case 0x40:
                *(void *)uint64_t v10 = 0x71500000714;
                break;
              case 0x5D:
                if ((v9 & 0xFFF00000) == 0x400000)
                {
                  *(_DWORD *)uint64_t v10 = 2;
                }
                else
                {
                  unsigned int v7 = (v12 + 64) >> 2;
LABEL_5:
                  *(_DWORD *)uint64_t v10 = v7;
                }
                break;
              case 0x61:
                unsigned int v14 = 8 * v11 + 7256;
                goto LABEL_30;
              case 0x62:
                unsigned int v14 = 8 * v11 + 8280;
LABEL_30:
                unsigned int v15 = v14 >> 2;
                *(_DWORD *)uint64_t v10 = v15;
                *(_DWORD *)(v10 + 4) = v15 | 1;
                break;
              case 0x69:
                *(void *)uint64_t v10 = 0x71100000710;
                break;
              case 0x6A:
                *(_DWORD *)uint64_t v10 = 1810;
                break;
              case 0x6B:
                *(_DWORD *)uint64_t v10 = 1811;
                break;
              case 0x6D:
                unsigned int v7 = v11 + 2203;
                goto LABEL_5;
              case 0x6E:
                unsigned int v7 = v11 + 2268;
                goto LABEL_5;
              case 0x6F:
                *(_DWORD *)uint64_t v10 = 2137;
                break;
              case 0x71:
                unsigned int v7 = (8 * v11 + 8280) >> 2;
                goto LABEL_5;
              default:
                break;
            }
LABEL_6:
            if (++v5 != v6) {
              continue;
            }
            goto LABEL_38;
        }
      }
    }
LABEL_38:
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::fixupMixedIndirectGathers(a1, v3);
    uint64_t v16 = *(void *)(a1 + 544);
    if (v16)
    {
      uint64_t v17 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v16);
      MEMORY[0x24566ED90](v17, 0x1030C40704B4075);
    }
    *(void *)(a1 + 544) = 0;
    long long v18 = *(ProgramBindingsAndDMAList **)(a1 + 536);
    if (v18)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v18);
      MEMORY[0x24566ED90]();
    }
    *(void *)(a1 + 536) = 0;
  }

  std::mutex::unlock(v2);
}

void sub_242AB109C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ComputeProgramVariant(uint64_t a1)
{
  unint64_t v1 = (_OWORD *)MEMORY[0x270FA5388](a1);
  int v301 = v3;
  uint64_t v4 = v2;
  unint64_t v5 = (unint64_t)v1;
  uint64_t v314 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)((char *)v1 + 8) = 0u;
  unint64_t v1 = (_OWORD *)((char *)v1 + 8);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(v5 + 408) = 0;
  v1[16] = 0u;
  v1[17] = 0u;
  v1[18] = 0u;
  v1[19] = 0u;
  v1[20] = 0u;
  v1[21] = 0u;
  v1[22] = 0u;
  v1[23] = 0u;
  v1[24] = 0u;
  *(_DWORD *)(v5 + 48) = -1;
  *(void *)(v5 + 52) = 0;
  *(_OWORD *)(v5 + 60) = 0u;
  *(void *)(v5 + 76) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 84) = 1610612736;
  *(_OWORD *)(v5 + 92) = 0u;
  *(_OWORD *)(v5 + 108) = 0u;
  *(void *)(v5 + 124) = 0;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(v5 + 132) = v6;
  *(_OWORD *)(v5 + 148) = v6;
  *(_OWORD *)(v5 + 164) = v6;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 180) = 0;
  *(_WORD *)(v5 + 184) = 0;
  *(_DWORD *)(v5 + 232) = 1065353216;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_DWORD *)(v5 + 272) = 1065353216;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 312) = 1065353216;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 397) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(void *)(v5 + 480) = 0;
  *(_DWORD *)(v5 + 488) = 1;
  *(void *)(v5 + 592) = 0;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 540) = 0u;
  *(_OWORD *)(v5 + 556) = 0u;
  *(_OWORD *)(v5 + 508) = 0u;
  *(_OWORD *)(v5 + 524) = 0u;
  *(_OWORD *)(v5 + 492) = 0u;
  *(void *)unint64_t v5 = &unk_26F852AD8;
  *(void *)(v5 + 600) = v7;
  *(_OWORD *)(v5 + 792) = 0u;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 864) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 656) = 0u;
  *(_OWORD *)(v5 + 672) = 0u;
  *(_OWORD *)(v5 + 688) = 0u;
  *(_OWORD *)(v5 + 704) = 0u;
  *(_OWORD *)(v5 + 720) = 0u;
  *(_OWORD *)(v5 + 736) = 0u;
  *(_OWORD *)(v5 + 752) = 0u;
  *(_OWORD *)(v5 + 768) = 0u;
  *(void *)(v5 + 856) = v5 + 864;
  *(void *)(v5 + 880) = 0xFFFFFFFF00000001;
  *(void *)(v5 + 888) = 1610612736;
  *(void *)(v5 + 928) = 0;
  *(_OWORD *)(v5 + 936) = v6;
  *(_OWORD *)(v5 + 896) = 0u;
  *(_OWORD *)(v5 + 912) = 0u;
  *(_OWORD *)(v5 + 952) = v6;
  *(_OWORD *)(v5 + 968) = v6;
  unsigned __int16 __src = v7;
  *(_OWORD *)(v5 + 1088) = 0u;
  *(_OWORD *)(v5 + 1072) = 0u;
  *(_OWORD *)(v5 + 1056) = 0u;
  *(void *)(v5 + 1112) = atomic_fetch_add(v7 + 978, 1uLL);
  *(void *)(v5 + 1208) = 0;
  *(_OWORD *)(v5 + 1336) = 0u;
  *(_OWORD *)(v5 + 1240) = 0u;
  *(_OWORD *)(v5 + 1216) = 0u;
  *(void *)(v5 + 1272) = 0;
  *(_OWORD *)(v5 + 1256) = 0u;
  *(_OWORD *)(v5 + 1288) = 0u;
  *(void *)(v5 + 1320) = 0;
  *(_OWORD *)(v5 + 1304) = 0u;
  *(void *)(v5 + 1368) = 0;
  *(_OWORD *)(v5 + 1352) = 0u;
  *(_DWORD *)(v5 + 1552) = 0;
  *(unsigned char *)(v5 + 1556) = 0;
  long long v8 = (char *)(v5 + 1583);
  *(unsigned char *)(v5 + 1560) = 0;
  *(_OWORD *)(v5 + 1120) = 0u;
  *(_OWORD *)(v5 + 1136) = 0u;
  *(_OWORD *)(v5 + 1152) = 0u;
  *(_OWORD *)(v5 + 1168) = 0u;
  unint64_t v300 = (void *)(v5 + 1120);
  *(_OWORD *)(v5 + 1177) = 0u;
  *(_OWORD *)(v5 + 1512) = 0u;
  *(_OWORD *)(v5 + 1528) = 0u;
  *(_OWORD *)(v5 + 1480) = 0u;
  *(_OWORD *)(v5 + 1496) = 0u;
  *(_OWORD *)(v5 + 1448) = 0u;
  *(_OWORD *)(v5 + 1464) = 0u;
  *(_OWORD *)(v5 + 1416) = 0u;
  *(_OWORD *)(v5 + 1432) = 0u;
  *(_OWORD *)(v5 + 1384) = 0u;
  *(_OWORD *)(v5 + 1400) = 0u;
  *(_OWORD *)(v5 + 1583) = 0u;
  *(_OWORD *)(v5 + 1599) = 0u;
  *(_OWORD *)(v5 + 1615) = 0u;
  *(void *)(v5 + 1628) = 0;
  unint64_t v296 = v5 + 1640;
  *(_OWORD *)(v5 + 1640) = 0u;
  *(unsigned char *)(v5 + 1656) = 0;
  *(_OWORD *)(v5 + 1664) = 0u;
  *(_OWORD *)(v5 + 1680) = 0u;
  *(_OWORD *)(v5 + 1696) = 0u;
  *(_OWORD *)(v5 + 1712) = 0u;
  *(void *)(v5 + 1728) = 0;
  uint64_t v306 = v9;
  *(unsigned char *)(v5 + 1736) = *(unsigned char *)(v9 + 465);
  *(_WORD *)(v5 + 1738) = 0;
  *(void *)(v5 + 1760) = 0;
  *(void *)(v5 + 1752) = 0;
  unint64_t v303 = (uint64_t **)(v5 + 1752);
  *(void *)(v5 + 1744) = v5 + 1752;
  *(_OWORD *)(v5 + 1864) = 0u;
  uint64_t v304 = (void **)(v5 + 1864);
  *(_OWORD *)(v5 + 1768) = 0u;
  *(_OWORD *)(v5 + 1784) = 0u;
  *(_OWORD *)(v5 + 1800) = 0u;
  *(_OWORD *)(v5 + 1816) = 0u;
  *(_OWORD *)(v5 + 1832) = 0u;
  *(_OWORD *)(v5 + 1848) = 0u;
  *(_OWORD *)(v5 + 1880) = 0u;
  *(_OWORD *)(v5 + 1896) = 0u;
  uint64_t v297 = (_DWORD *)(v5 + 1768);
  *(_OWORD *)(v5 + 1912) = 0u;
  *(void *)(v5 + 1928) = 0;
  int v293 = (_OWORD *)(v5 + 1288);
  unint64_t v294 = (_OWORD *)(v5 + 1336);
  if (v2[28])
  {
    uint64_t v10 = v2 + 98;
    if (v2[29]) {
      uint64_t v10 = v2 + 28;
    }
  }
  else
  {
    uint64_t v10 = v2 + 98;
  }
  int v11 = 0;
  if (*v10 && v10[1]) {
    int v11 = (int *)((char *)*v10 + **v10);
  }
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unint64_t v295 = (_OWORD *)(v5 + 1240);
  if (*v12 >= 5u && (uint64_t v13 = v12[2]) != 0) {
    int v305 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    int v305 = 0;
  }
  if (v2[58])
  {
    unsigned int v14 = v2 + 128;
    if (v2[59]) {
      unsigned int v14 = v2 + 58;
    }
  }
  else
  {
    unsigned int v14 = v2 + 128;
  }
  unsigned int v15 = 0;
  if (*v14 && v14[1]) {
    unsigned int v15 = (int *)((char *)*v14 + **v14);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    long long v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    long long v18 = 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  unsigned int v20 = *v19;
  if (v20 < 0x25)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v19[18];
    if (v19[18]) {
      LOBYTE(v21) = *((unsigned char *)v18 + v21) != 0;
    }
  }
  *(unsigned char *)(v5 + 1737) = v21;
  int v22 = (unsigned __int16 *)((char *)v305 - *v305);
  if (*v22 < 0x55u || (uint64_t v23 = v22[42]) == 0 || !*((unsigned char *)v305 + v23))
  {
LABEL_56:
    int v34 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v34 < 7u)
    {
      LODWORD(v35) = 0;
    }
    else
    {
      uint64_t v35 = v34[3];
      if (v35) {
        LODWORD(v35) = *(int *)((char *)v18 + v35);
      }
    }
    *(_DWORD *)(v5 + 1104) = v35;
    unsigned int v36 = (unsigned __int16 *)((char *)v18 - *v18);
    uint64_t v307 = v18;
    if (*v36 >= 0x13u && (uint64_t v37 = v36[9]) != 0) {
      uint64_t v38 = (char *)v18 + v37 + *(unsigned int *)((char *)v18 + v37) + 4;
    }
    else {
      uint64_t v38 = "";
    }
    int v298 = (std::string *)(v5 + 1168);
    uint64_t v299 = (void *)(v5 + 1144);
    unint64_t v39 = v5 + 1560;
    uint64_t v310 = (void *)v5;
    MEMORY[0x24566EB20](v300, v38);
    size_t v40 = (unsigned __int16 *)((char *)v307 - *v307);
    if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
      size_t v42 = (char *)v307 + v41 + *(unsigned int *)((char *)v307 + v41) + 4;
    }
    else {
      size_t v42 = "";
    }
    MEMORY[0x24566EB20](v299, v42);
    int64_t v43 = (unsigned __int16 *)((char *)v307 - *v307);
    if (*v43 < 0x29u)
    {
      LOBYTE(v44) = 0;
    }
    else
    {
      uint64_t v44 = v43[20];
      if (v44) {
        LOBYTE(v44) = *((unsigned char *)v307 + v44) != 0;
      }
    }
    *(unsigned char *)(v5 + 1192) = v44;
    std::string::operator=(v298, &__str);
    uint8x8_t v45 = (unsigned __int16 *)((char *)v307 - *v307);
    if (*v45 < 5u || !v45[2] || !*((unsigned char *)__src + 7440))
    {
LABEL_91:
      long long v308 = v4;
      if (v4[43])
      {
        long long v52 = v4 + 43;
        if (!v4[44]) {
          long long v52 = v4 + 113;
        }
        int64_t v53 = *v52;
        if (!*v52)
        {
LABEL_144:
          unint64_t v91 = (const void **)v308;
          if (v308[68])
          {
            size_t v92 = v308 + 68;
            if (!v308[69]) {
              size_t v92 = v308 + 138;
            }
          }
          else
          {
            size_t v92 = v308 + 138;
          }
          uint64_t v93 = v307;
          int64_t v95 = *v92;
          uint64_t v94 = v92[1];
          if (v95) {
            BOOL v96 = v94 == 0;
          }
          else {
            BOOL v96 = 1;
          }
          if (v96
            || (uint64_t v97 = (int *)((char *)v95 + *v95), v98 = (unsigned __int16 *)((char *)v97 - *v97), *v98 < 5u)
            || (uint64_t v99 = v98[2]) == 0)
          {
            uint64_t v100 = 0;
          }
          else
          {
            uint64_t v100 = *(void *)((char *)v97 + v99);
          }
          if (getTimebaseInfo(void)::once != -1) {
            dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
          }
          *(float *)(v5 + 1776) = (float)(v100
                                        * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                        / *(unsigned int *)algn_268D5B048)
                                / 1000000.0;
          uint64_t v101 = (unsigned __int16 *)((char *)v305 - *v305);
          if (*v101 < 5u)
          {
            LODWORD(v102) = 0;
          }
          else
          {
            uint64_t v102 = v101[2];
            if (v102) {
              LODWORD(v102) = *(int *)((char *)v305 + v102);
            }
          }
          *uint64_t v297 = v102;
          long long v103 = (unsigned __int16 *)((char *)v305 - *v305);
          if (*v103 < 0x2Du)
          {
            LODWORD(v104) = 0;
          }
          else
          {
            uint64_t v104 = v103[22];
            if (v104) {
              LODWORD(v104) = *(int *)((char *)v305 + v104);
            }
          }
          *(_DWORD *)(v5 + 1772) = v104;
          long long v105 = (unsigned __int16 *)((char *)v305 - *v305);
          if (*v105 < 0x35u)
          {
            LODWORD(v106) = 0;
          }
          else
          {
            uint64_t v106 = v105[26];
            if (v106) {
              LODWORD(v106) = *(int *)((char *)v305 + v106);
            }
          }
          *(_DWORD *)(v5 + 1812) = v106;
          uint64_t v107 = (unsigned __int16 *)((char *)v305 - *v305);
          if (*v107 < 0x43u)
          {
            LODWORD(v108) = 0;
          }
          else
          {
            uint64_t v108 = v107[33];
            if (v108) {
              LODWORD(v108) = *(int *)((char *)v305 + v108);
            }
          }
          *(_DWORD *)(v5 + 1848) = v108;
          if (v308[38])
          {
            int64_t v109 = v308 + 38;
            if (!v308[39]) {
              int64_t v109 = v308 + 108;
            }
            unint64_t v110 = *v109;
            if (!*v109)
            {
LABEL_259:
              if (v308[53])
              {
                uint64_t v151 = v308[54];
                if (v151) {
                  unint64_t v152 = v308[53];
                }
                else {
                  unint64_t v152 = v308[123];
                }
                if (v151) {
                  uint64_t v153 = v308 + 53;
                }
                else {
                  uint64_t v153 = v308 + 123;
                }
              }
              else
              {
                uint64_t v153 = v308 + 123;
                unint64_t v152 = v308[123];
              }
              MEMORY[0x24566EB30](v5 + 1912, v152, v153[1]);
              std::string::push_back((std::string *)(v5 + 1912), 0);
              uint64_t v154 = *v305;
              uint64_t v155 = (char *)v305 - v154;
              unsigned int v156 = *(unsigned __int16 *)((char *)v305 - v154);
              if (v156 < 0x39) {
                goto LABEL_285;
              }
              uint64_t v157 = -v154;
              uint64_t v158 = *((unsigned __int16 *)v155 + 28);
              if (v158)
              {
                uint64_t v159 = (int *)((char *)v305 + v158 + *(unsigned int *)((char *)v305 + v158));
                if (*v159)
                {
                  *(unsigned char *)(v5 + 1656) = 1;
                  uint64_t v160 = (_DWORD *)((char *)v159 + v159[1] + 4);
                  uint64_t v161 = (unsigned __int16 *)((char *)v160 - *v160);
                  if (*v161 >= 9u && (uint64_t v162 = v161[4]) != 0) {
                    int v163 = *(int *)((char *)v160 + v162);
                  }
                  else {
                    int v163 = 0;
                  }
                  *(_DWORD *)(v5 + 1856) = v163;
                  *(unsigned char *)(v5 + 1860) = 1;
                  uint64_t v164 = *v305;
                  uint64_t v157 = -v164;
                  unsigned int v156 = *(unsigned __int16 *)((char *)v305 - v164);
                }
              }
              if (v156 < 0x3B) {
                goto LABEL_285;
              }
              uint64_t v165 = (char *)v305 + v157;
              if (*((_WORD *)v165 + 29))
              {
                uint64_t v166 = (unsigned int *)((char *)v305
                                      + *((unsigned __int16 *)v165 + 29)
                                      + *(unsigned int *)((char *)v305 + *((unsigned __int16 *)v165 + 29)));
                uint64_t v167 = *v166;
                if (v167)
                {
                  unsigned int v168 = v166 + 1;
                  do
                  {
                    unsigned int v170 = *v168++;
                    unsigned int v169 = v170;
                    if (!(v170 >> 20)) {
                      *(void *)(v296 + 8 * (v169 > 0x3F)) |= 1 << v169;
                    }
                    --v167;
                  }
                  while (v167);
                }
              }
              if (v156 < 0x57)
              {
LABEL_285:
                LODWORD(v171) = 0;
              }
              else
              {
                uint64_t v171 = *((unsigned __int16 *)v165 + 43);
                if (*((_WORD *)v165 + 43)) {
                  LODWORD(v171) = *(int *)((char *)v305 + v171);
                }
              }
              *(_DWORD *)(v5 + 992) = v171;
              unsigned int v172 = (unsigned __int16 *)((char *)v305 - *v305);
              if (*v172 >= 0x21u && (uint64_t v173 = v172[16]) != 0) {
                int v174 = *(int *)((char *)v305 + v173);
              }
              else {
                int v174 = 0;
              }
              {
                getAdditionalSpillBufferBytes(void)::extra = 0;
              }
              *(_DWORD *)(v5 + 996) = getAdditionalSpillBufferBytes(void)::extra + v174;
              unsigned int v175 = (unsigned __int16 *)((char *)v305 - *v305);
              if (*v175 < 0x59u)
              {
                LODWORD(v176) = 0;
              }
              else
              {
                uint64_t v176 = v175[44];
                if (v176) {
                  LODWORD(v176) = *(int *)((char *)v305 + v176);
                }
              }
              *(_DWORD *)(v5 + 1024) = v176;
              BOOL v177 = (unsigned __int16 *)((char *)v305 - *v305);
              if (*v177 < 0x51u)
              {
                LODWORD(v178) = 0;
              }
              else
              {
                uint64_t v178 = v177[40];
                if (v178) {
                  LODWORD(v178) = *(int *)((char *)v305 + v178);
                }
              }
              *(_DWORD *)(v5 + 1028) = v178;
              uint64_t v179 = (unsigned __int16 *)((char *)v305 - *v305);
              if (*v179 < 0x4Bu)
              {
                LODWORD(v180) = 0;
              }
              else
              {
                uint64_t v180 = v179[37];
                if (v180) {
                  LODWORD(v180) = *(int *)((char *)v305 + v180);
                }
              }
              *(_DWORD *)(v5 + 1036) = v180;
              unsigned int v181 = (unsigned __int16 *)((char *)v305 - *v305);
              unsigned int v182 = *v181;
              if (v182 >= 0x25)
              {
                if (v181[18] && *((unsigned char *)v305 + v181[18]))
                {
                  if (v182 < 0x27)
                  {
                    LOBYTE(v183) = 0;
                    BOOL v184 = 1;
                    goto LABEL_322;
                  }
                  LODWORD(v183) = v181[19];
                  BOOL v184 = 1;
                  if (!v181[19])
                  {
LABEL_322:
                    *(unsigned char *)(v5 + 1046) = v183;
                    unsigned int v187 = (unsigned __int16 *)((char *)v307 - *v307);
                    unsigned int v188 = *v187;
                    if (v188 < 0x21)
                    {
                      uint64_t v190 = 0;
                      LODWORD(v189) = 0;
                    }
                    else
                    {
                      uint64_t v189 = v187[16];
                      if (v187[16]) {
                        LODWORD(v189) = *(int *)((char *)v307 + v189);
                      }
                      if (v188 < 0x4D)
                      {
                        uint64_t v190 = 0;
                      }
                      else
                      {
                        uint64_t v190 = v187[38];
                        if (v187[38]) {
                          uint64_t v190 = *(unsigned int *)((char *)v307 + v190);
                        }
                        if (v188 >= 0x4F)
                        {
                          uint64_t v191 = v187[39];
                          if (v191) {
                            uint64_t v191 = *(void *)((char *)v307 + v191);
                          }
LABEL_334:
                          *(void *)(v5 + 1088) = v189 | (unint64_t)(v190 << 32);
                          *(void *)(v5 + 1096) = v191;
                          *(unsigned char *)(v5 + 1050) = v184 | v183;
                          uint64_t v192 = *v305;
                          uint64_t v193 = (char *)v305 - v192;
                          unsigned int v194 = *(unsigned __int16 *)((char *)v305 - v192);
                          if (v194 < 0x37)
                          {
                            LOBYTE(v195) = 0;
                          }
                          else
                          {
                            uint64_t v195 = *((unsigned __int16 *)v193 + 27);
                            if (*((_WORD *)v193 + 27)) {
                              LOBYTE(v195) = *((unsigned char *)v305 + v195) != 0;
                            }
                          }
                          *(unsigned char *)(v5 + 1045) = v195;
                          char v196 = (unsigned __int16 *)((char *)v307 - *v307);
                          unsigned int v197 = *v196;
                          if (v197 < 0x33)
                          {
                            LOBYTE(v198) = 0;
                          }
                          else
                          {
                            uint64_t v198 = v196[25];
                            if (v196[25]) {
                              LOBYTE(v198) = *((unsigned char *)v307 + v198) != 0;
                            }
                          }
                          uint64_t v199 = -v192;
                          *(unsigned char *)(v5 + 1051) = v198;
                          if (v194 < 0x3F)
                          {
                            LOBYTE(v200) = 0;
                          }
                          else
                          {
                            uint64_t v200 = *((unsigned __int16 *)v193 + 31);
                            if (v200)
                            {
                              int v201 = (unsigned int *)((char *)v305 + v200 + *(unsigned int *)((char *)v305 + v200));
                              uint64_t v200 = *v201;
                              if (v200)
                              {
                                uint64_t v202 = v201 + 1;
                                while (1)
                                {
                                  unsigned int v204 = *v202++;
                                  char v203 = v204;
                                  if (v204 < 0x36 && ((0x3F000000000777uLL >> v203) & 1) != 0) {
                                    break;
                                  }
                                  if (!--v200) {
                                    goto LABEL_351;
                                  }
                                }
                                LOBYTE(v200) = 1;
                              }
                            }
                          }
LABEL_351:
                          *(unsigned char *)(v5 + 1053) = v200;
                          if (v197 <= 0x14)
                          {
                            *(unsigned char *)(v5 + 1047) = 0;
                            *(unsigned char *)(v5 + 1737) = 0;
                            *(unsigned char *)(v5 + 1739) = 0;
                            if (v194 >= 0x21) {
                              goto LABEL_386;
                            }
LABEL_389:
                            int v226 = 0;
                            goto LABEL_390;
                          }
                          uint64_t v205 = v196[10];
                          if (v196[10]) {
                            LOBYTE(v205) = *((unsigned char *)v307 + v205) != 0;
                          }
                          *(unsigned char *)(v5 + 1047) = v205;
                          if (v197 < 0x25)
                          {
                            *(unsigned char *)(v5 + 1737) = 0;
                            if (v197 < 0x23) {
                              goto LABEL_384;
                            }
                          }
                          else
                          {
                            uint64_t v206 = v196[18];
                            if (v196[18]) {
                              LOBYTE(v206) = *((unsigned char *)v307 + v206) != 0;
                            }
                            *(unsigned char *)(v5 + 1737) = v206;
                          }
                          uint64_t v207 = v196[17];
                          if (v207)
                          {
                            *(unsigned char *)(v5 + 1739) = 1;
                            unsigned int v208 = (unsigned int *)((char *)v307 + v207);
                            uint64_t v209 = *v208;
                            unsigned int v211 = (unsigned int *)((char *)v208 + v209 + 4);
                            uint64_t v210 = *(unsigned int *)((char *)v208 + v209);
                            if (v210)
                            {
                              unsigned int v212 = &v211[v210];
                              while (1)
                              {
                                unsigned int v213 = (int *)((char *)v211 + *v211);
                                unsigned int v214 = (unsigned __int16 *)((char *)v213 - *v213);
                                unsigned int v215 = *v214;
                                if (v215 < 7)
                                {
                                  int v216 = 0;
                                  unsigned int v218 = 0;
                                  if (v215 < 5) {
                                    goto LABEL_373;
                                  }
                                  uint64_t v217 = v214[2];
                                  if (!v217) {
                                    goto LABEL_369;
                                  }
                                }
                                else if (v214[3])
                                {
                                  int v216 = *(int *)((char *)v213 + v214[3]);
                                  uint64_t v217 = v214[2];
                                  if (!v217) {
                                    goto LABEL_369;
                                  }
                                }
                                else
                                {
                                  int v216 = 0;
                                  uint64_t v217 = v214[2];
                                  if (!v217)
                                  {
LABEL_369:
                                    unsigned int v218 = 0;
                                    goto LABEL_373;
                                  }
                                }
                                unsigned int v218 = *(int *)((char *)v213 + v217);
LABEL_373:
                                int v219 = v303;
LABEL_374:
                                uint64_t v220 = *v219;
                                int v221 = v219;
                                if (*v219)
                                {
                                  while (1)
                                  {
                                    int v219 = (uint64_t **)v220;
                                    unsigned int v222 = *((_DWORD *)v220 + 7);
                                    if (v218 < v222) {
                                      goto LABEL_374;
                                    }
                                    if (v222 >= v218) {
                                      break;
                                    }
                                    uint64_t v220 = v219[1];
                                    if (!v220)
                                    {
                                      int v221 = v219 + 1;
                                      goto LABEL_379;
                                    }
                                  }
                                  uint64_t v223 = v219;
                                }
                                else
                                {
LABEL_379:
                                  uint64_t v223 = operator new(0x28uLL);
                                  v223[7] = v218;
                                  v223[8] = 0;
                                  *(void *)uint64_t v223 = 0;
                                  *((void *)v223 + 1) = 0;
                                  *((void *)v223 + 2) = v219;
                                  *int v221 = (uint64_t *)v223;
                                  uint64_t v224 = **(void **)(v5 + 1744);
                                  uint64_t v225 = (uint64_t *)v223;
                                  if (v224)
                                  {
                                    *(void *)(v5 + 1744) = v224;
                                    uint64_t v225 = *v221;
                                  }
                                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 1752), v225);
                                  ++*(void *)(v5 + 1760);
                                }
                                v223[8] = v216;
                                ++v211;
                                unint64_t v91 = (const void **)v308;
                                if (v211 == v212)
                                {
                                  uint64_t v227 = *v305;
                                  uint64_t v199 = -v227;
                                  uint64_t v93 = v307;
                                  if (*(unsigned __int16 *)((char *)v305 - v227) < 0x21u) {
                                    goto LABEL_389;
                                  }
LABEL_386:
                                  if (!*(_WORD *)((char *)v305 + v199 + 32)) {
                                    goto LABEL_389;
                                  }
                                  int v226 = *(int *)((char *)v305 + *(unsigned __int16 *)((char *)v305 + v199 + 32));
LABEL_390:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                  int v228 = getAdditionalSpillBufferBytes(void)::extra + v226;
                                  *(_DWORD *)(v5 + 988) = getAdditionalSpillBufferBytes(void)::extra + v226;
                                  uint64_t v229 = (unsigned __int16 *)((char *)v305 - *v305);
                                  if (*v229 < 0x43u)
                                  {
                                    LODWORD(v230) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v230 = v229[33];
                                    if (v230) {
                                      LODWORD(v230) = *(int *)((char *)v305 + v230);
                                    }
                                  }
                                  *(_DWORD *)(v5 + 1000) = v230;
                                  char v231 = (unsigned __int16 *)((char *)v305 - *v305);
                                  if (*v231 < 5u)
                                  {
                                    LODWORD(v232) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v232 = v231[2];
                                    if (v232) {
                                      LODWORD(v232) = *(int *)((char *)v305 + v232);
                                    }
                                  }
                                  *(_DWORD *)(v5 + 984) = v232;
                                  int v233 = (unsigned __int16 *)((char *)v305 - *v305);
                                  if (*v233 < 0x51u)
                                  {
                                    LODWORD(v234) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v234 = v233[40];
                                    if (v234) {
                                      LODWORD(v234) = *(int *)((char *)v305 + v234);
                                    }
                                  }
                                  *(_DWORD *)(v5 + 1020) = v234;
                                  int v235 = (unsigned __int16 *)((char *)v305 - *v305);
                                  if (*v235 < 0x4Fu)
                                  {
                                    LODWORD(v236) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v236 = v235[39];
                                    if (v236) {
                                      LODWORD(v236) = *(int *)((char *)v305 + v236);
                                    }
                                  }
                                  *(_DWORD *)(v5 + 1032) = v236;
                                  *(_DWORD *)(v5 + 1040) = *(_DWORD *)(v306 + 468);
                                  uint64_t v237 = (unsigned __int16 *)((char *)v305 - *v305);
                                  if (*(int *)((char *)v305 + v237[6] + *(unsigned int *)((char *)v305 + v237[6])) | v228) {
                                    char v238 = 1;
                                  }
                                  else {
                                    char v238 = v184;
                                  }
                                  if (v238) {
                                    goto LABEL_422;
                                  }
                                  unsigned int v239 = *v237;
                                  if (v239 < 0x21)
                                  {
                                    int v240 = 0;
                                  }
                                  else if (v237[16])
                                  {
                                    int v240 = *(int *)((char *)v305 + v237[16]);
                                    if (v239 >= 0x43)
                                    {
LABEL_500:
                                      if (v237[33])
                                      {
                                        int v241 = *(int *)((char *)v305 + v237[33]);
                                        goto LABEL_417;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    int v240 = 0;
                                    if (v239 >= 0x43) {
                                      goto LABEL_500;
                                    }
                                  }
                                  int v241 = 0;
LABEL_417:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                  if (v241 + v240 + getAdditionalSpillBufferBytes(void)::extra)
                                  {
LABEL_422:
                                    LOBYTE(v243) = 1;
                                  }
                                  else
                                  {
                                    uint64_t v242 = (unsigned __int16 *)((char *)v305 - *v305);
                                    if (*v242 < 0x5Fu)
                                    {
                                      LOBYTE(v243) = 0;
                                    }
                                    else
                                    {
                                      uint64_t v243 = v242[47];
                                      if (v243) {
                                        LOBYTE(v243) = *((unsigned char *)v305 + v243) != 0;
                                      }
                                    }
                                  }
                                  *(unsigned char *)(v5 + 1044) = v243;
                                  uint64_t v244 = (unsigned __int16 *)((char *)v93 - *v93);
                                  if (*v244 < 0x11u)
                                  {
                                    LODWORD(v245) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v245 = v244[8];
                                    if (v245) {
                                      LODWORD(v245) = *(int *)((char *)v93 + v245);
                                    }
                                  }
                                  *(_DWORD *)(v5 + 1552) = v245;
                                  {
                                    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                  }
                                  uint64_t v246 = (uint64_t)(__src + 648);
                                  long long v247 = (_OWORD *)(v5 + 1408);
                                  long long v248 = v91 + 3;
                                  if (v91[3])
                                  {
                                    if (v91[4]) {
                                      unsigned int v249 = v91 + 3;
                                    }
                                    else {
                                      unsigned int v249 = v91 + 73;
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v249 = v91 + 73;
                                  }
                                  uint64_t v250 = v249[1]
                                       + AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space;
                                  uint64_t v251 = 168;
                                  if (v301) {
                                    uint64_t v251 = 504;
                                  }
                                  uint64_t v252 = v246 + v251;
                                  if (v301) {
                                    uint64_t v253 = 0x1000000000;
                                  }
                                  else {
                                    uint64_t v253 = 0;
                                  }
                                  AGX::Heap<true>::allocateImpl(__dst, v252, v250, (void *)(v5 + 1608));
                                  *(_DWORD *)(v5 + 1632) += *(_DWORD *)&__dst[16];
                                  long long v254 = *(_OWORD *)&__dst[16];
                                  *long long v247 = *(_OWORD *)__dst;
                                  *(_OWORD *)(v5 + 1424) = v254;
                                  *(_OWORD *)(v5 + 1433) = *(_OWORD *)&__dst[25];
                                  *(void *)(v5 + 1200) = *(void *)(v5 + 1408) + v253;
                                  *(void *)(v5 + 1232) = v252;
                                  long long v255 = *(_OWORD *)(v5 + 1424);
                                  *unint64_t v295 = *v247;
                                  v295[1] = v255;
                                  *(_OWORD *)((char *)v295 + 25) = *(_OWORD *)(v5 + 1433);
                                  if (*v248)
                                  {
                                    uint64_t v256 = v91[4];
                                    if (v256) {
                                      uint64_t v257 = *v248;
                                    }
                                    else {
                                      uint64_t v257 = v91[73];
                                    }
                                    if (v256) {
                                      long long v258 = v91 + 3;
                                    }
                                    else {
                                      long long v258 = v91 + 73;
                                    }
                                  }
                                  else
                                  {
                                    long long v258 = v91 + 73;
                                    uint64_t v257 = v91[73];
                                  }
                                  memcpy(*(void **)(v5 + 1416), v257, v258[1]);
                                  uint64_t v259 = *(void *)(v5 + 1416);
                                  uint64_t v260 = *(void *)(v5 + 1424);
                                  *(void *)(v5 + 1208) = *(void *)(v5 + 1200);
                                  *(void *)(v5 + 1216) = v259;
                                  *(void *)(v5 + 1224) = v260;
                                  int v261 = v91 + 8;
                                  if (v91[8])
                                  {
                                    if (v91[9]) {
                                      int v262 = v91 + 8;
                                    }
                                    else {
                                      int v262 = v91 + 78;
                                    }
                                    uint64_t v263 = v262[1];
                                    if (!v263) {
                                      goto LABEL_462;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v263 = (uint64_t)v91[79];
                                    if (!v263) {
                                      goto LABEL_462;
                                    }
                                  }
                                  AGX::Heap<true>::allocateImpl(__dst, v246, v263, (void *)(v5 + 1616));
                                  *(_DWORD *)(v5 + 1632) += *(_DWORD *)&__dst[16];
                                  long long v264 = *(_OWORD *)&__dst[16];
                                  *(_OWORD *)(v5 + 1456) = *(_OWORD *)__dst;
                                  *(_OWORD *)(v5 + 1472) = v264;
                                  *(_OWORD *)(v5 + 1481) = *(_OWORD *)&__dst[25];
                                  long long v265 = *(_OWORD *)(v5 + 1472);
                                  _OWORD *v293 = *(_OWORD *)(v5 + 1456);
                                  v293[1] = v265;
                                  *(_OWORD *)((char *)v293 + 25) = *(_OWORD *)(v5 + 1481);
                                  if (*v261)
                                  {
                                    uint64_t v266 = v91[9];
                                    if (v266) {
                                      int v267 = *v261;
                                    }
                                    else {
                                      int v267 = v91[78];
                                    }
                                    if (v266) {
                                      unint64_t v268 = v91 + 8;
                                    }
                                    else {
                                      unint64_t v268 = v91 + 78;
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v268 = v91 + 78;
                                    int v267 = v91[78];
                                  }
                                  memcpy(*(void **)(v5 + 1464), v267, v268[1]);
LABEL_462:
                                  uint64_t v269 = v91 + 13;
                                  if (v91[13])
                                  {
                                    if (v91[14]) {
                                      int v270 = v91 + 13;
                                    }
                                    else {
                                      int v270 = v91 + 83;
                                    }
                                    uint64_t v271 = v270[1];
                                    if (!v271) {
                                      goto LABEL_478;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v271 = (uint64_t)v91[84];
                                    if (!v271) {
                                      goto LABEL_478;
                                    }
                                  }
                                  AGX::Heap<true>::allocateImpl(__dst, v246, v271, (void *)(v5 + 1624));
                                  *(_DWORD *)(v5 + 1632) += *(_DWORD *)&__dst[16];
                                  long long v272 = *(_OWORD *)&__dst[16];
                                  *(_OWORD *)(v5 + 1504) = *(_OWORD *)__dst;
                                  *(_OWORD *)(v5 + 1520) = v272;
                                  *(_OWORD *)(v5 + 1529) = *(_OWORD *)&__dst[25];
                                  long long v273 = *(_OWORD *)(v5 + 1520);
                                  *unint64_t v294 = *(_OWORD *)(v5 + 1504);
                                  v294[1] = v273;
                                  *(_OWORD *)((char *)v294 + 25) = *(_OWORD *)(v5 + 1529);
                                  if (*v269)
                                  {
                                    int v274 = v91[14];
                                    if (v274) {
                                      uint64_t v275 = *v269;
                                    }
                                    else {
                                      uint64_t v275 = v91[83];
                                    }
                                    if (v274) {
                                      uint64_t v276 = v91 + 13;
                                    }
                                    else {
                                      uint64_t v276 = v91 + 83;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v276 = v91 + 83;
                                    uint64_t v275 = v91[83];
                                  }
                                  memcpy(*(void **)(v5 + 1512), v275, v276[1]);
                                  uint64_t v277 = *(void *)(v5 + 1520);
                                  *(_OWORD *)(v5 + 1384) = *(_OWORD *)(v5 + 1504);
                                  *(void *)(v5 + 1400) = v277;
LABEL_478:
                                  if (*(unsigned char *)(v5 + 1192) || *(unsigned char *)(*(void *)(v5 + 600) + 7761))
                                  {
                                    {
                                      {
                                        unint64_t v279 = v300;
                                        if (*(char *)(v5 + 1143) < 0) {
                                          unint64_t v279 = (void *)*v300;
                                        }
                                        unint64_t v280 = v298;
                                        if (*(char *)(v5 + 1191) < 0) {
                                          unint64_t v280 = (std::string *)v298->__r_.__value_.__r.__words[0];
                                        }
                                        int v281 = v299;
                                        if (*(char *)(v5 + 1167) < 0) {
                                          int v281 = (void *)*v299;
                                        }
                                        int v282 = *(_DWORD *)(v5 + 1104);
                                        uint64_t v283 = *(void *)(v5 + 1200);
                                        uint64_t v284 = *(void *)(v5 + 1424);
                                        *(_DWORD *)std::string __dst = 136447490;
                                        *(void *)&__dst[4] = v279;
                                        *(_WORD *)&__dst[12] = 2082;
                                        *(void *)&__dst[14] = v280;
                                        *(_WORD *)&__dst[22] = 2082;
                                        *(void *)&__dst[24] = v281;
                                        *(_WORD *)&__dst[32] = 1026;
                                        *(_DWORD *)&__dst[34] = v282;
                                        *(_WORD *)&__dst[38] = 2050;
                                        *(void *)&__dst[40] = v283;
                                        __p[0] = 2050;
                                        *(void *)&__p[1] = v284;
                                        _os_signpost_emit_with_name_impl(&dword_2427AD000, v278, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                      }
                                    }
                                    uint64_t v285 = *(void *)(v5 + 600);
                                    unint64_t v286 = v300;
                                    if (*(char *)(v5 + 1143) < 0) {
                                      unint64_t v286 = (void *)*v300;
                                    }
                                    uint64_t v287 = v298;
                                    if (*(char *)(v5 + 1191) < 0) {
                                      uint64_t v287 = (std::string *)v298->__r_.__value_.__r.__words[0];
                                    }
                                    unint64_t v288 = v299;
                                    if (*(char *)(v5 + 1167) < 0) {
                                      unint64_t v288 = (void *)*v299;
                                    }
                                    int v289 = *(_DWORD *)(v5 + 1104);
                                    uint64_t v290 = *(void *)(v5 + 1200);
                                    uint64_t v291 = *(void *)(v5 + 1424);
                                    char v292 = *(unsigned char *)(v5 + 1192);
                                    *(void *)std::string __dst = v286;
                                    *(void *)&__dst[8] = v287;
                                    *(void *)&__dst[16] = v288;
                                    *(_DWORD *)&__dst[24] = v289;
                                    *(void *)&__dst[32] = v290;
                                    *(void *)&__dst[40] = v291;
                                    LOBYTE(__p[0]) = v292;
                                    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v285, v5, (long long *)__dst);
                                  }
                                  operator new();
                                }
                              }
                            }
LABEL_385:
                            if (v194 < 0x21) {
                              goto LABEL_389;
                            }
                            goto LABEL_386;
                          }
LABEL_384:
                          *(unsigned char *)(v5 + 1739) = 0;
                          goto LABEL_385;
                        }
                      }
                    }
                    uint64_t v191 = 0;
                    goto LABEL_334;
                  }
                  goto LABEL_320;
                }
                if (v182 >= 0x27)
                {
                  uint64_t v183 = v181[19];
                  if (v181[19])
                  {
                    int v185 = *((unsigned __int8 *)v305 + v183);
                    if (*((unsigned char *)v305 + v183))
                    {
                      BOOL v184 = 1;
LABEL_321:
                      LOBYTE(v183) = v185 != 0;
                      goto LABEL_322;
                    }
                  }
                  if (v182 >= 0x29 && (uint64_t v186 = v181[20]) != 0)
                  {
                    BOOL v184 = *((unsigned char *)v305 + v186) != 0;
                    if (!v183) {
                      goto LABEL_322;
                    }
                  }
                  else
                  {
                    BOOL v184 = 0;
                    if (!v183) {
                      goto LABEL_322;
                    }
                  }
LABEL_320:
                  int v185 = *((unsigned __int8 *)v305 + v183);
                  goto LABEL_321;
                }
              }
              BOOL v184 = 0;
              LOBYTE(v183) = 0;
              goto LABEL_322;
            }
          }
          else
          {
            int64_t v109 = v308 + 108;
            unint64_t v110 = v308[108];
            if (!v110) {
              goto LABEL_259;
            }
          }
          if (v109[1])
          {
            uint64_t v111 = (int *)((char *)v110 + *v110);
            uint64_t v112 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v112 < 0xDu)
            {
              LODWORD(v113) = 0;
            }
            else
            {
              uint64_t v113 = v112[6];
              if (v113) {
                LODWORD(v113) = *(int *)((char *)v111 + v113);
              }
            }
            *(_DWORD *)(v5 + 1772) = v113;
            uint64_t v114 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v114 < 0xBu)
            {
              LODWORD(v115) = 0;
            }
            else
            {
              uint64_t v115 = v114[5];
              if (v115) {
                LODWORD(v115) = *(int *)((char *)v111 + v115);
              }
            }
            *(_DWORD *)(v5 + 1780) = v115;
            uint64_t v116 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v116 < 0x11u)
            {
              LODWORD(v117) = 0;
            }
            else
            {
              uint64_t v117 = v116[8];
              if (v117) {
                LODWORD(v117) = *(int *)((char *)v111 + v117);
              }
            }
            *(_DWORD *)(v5 + 1784) = v117;
            int64_t v118 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v118 < 0x13u)
            {
              LODWORD(v119) = 0;
            }
            else
            {
              uint64_t v119 = v118[9];
              if (v119) {
                LODWORD(v119) = *(int *)((char *)v111 + v119);
              }
            }
            *(_DWORD *)(v5 + 1788) = v119;
            uint64_t v120 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v120 < 0x17u)
            {
              LODWORD(v121) = 0;
            }
            else
            {
              uint64_t v121 = v120[11];
              if (v121) {
                LODWORD(v121) = *(int *)((char *)v111 + v121);
              }
            }
            *(_DWORD *)(v5 + 1792) = v121;
            long long v122 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v122 < 0x1Bu)
            {
              LODWORD(v123) = 0;
            }
            else
            {
              uint64_t v123 = v122[13];
              if (v123) {
                LODWORD(v123) = *(int *)((char *)v111 + v123);
              }
            }
            *(_DWORD *)(v5 + 1796) = v123;
            uint64_t v124 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v124 < 0x15u)
            {
              LODWORD(v125) = 0;
            }
            else
            {
              uint64_t v125 = v124[10];
              if (v125) {
                LODWORD(v125) = *(int *)((char *)v111 + v125);
              }
            }
            *(_DWORD *)(v5 + 1800) = v125;
            uint64_t v126 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v126 < 0x19u)
            {
              LODWORD(v127) = 0;
            }
            else
            {
              uint64_t v127 = v126[12];
              if (v127) {
                LODWORD(v127) = *(int *)((char *)v111 + v127);
              }
            }
            *(_DWORD *)(v5 + 1804) = v127;
            uint64_t v128 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v128 < 0x1Du)
            {
              LODWORD(v129) = 0;
            }
            else
            {
              uint64_t v129 = v128[14];
              if (v129) {
                LODWORD(v129) = *(int *)((char *)v111 + v129);
              }
            }
            *(_DWORD *)(v5 + 1808) = v129;
            uint64_t v130 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v130 < 0xFu)
            {
              LODWORD(v131) = 0;
            }
            else
            {
              uint64_t v131 = v130[7];
              if (v131) {
                LODWORD(v131) = *(int *)((char *)v111 + v131);
              }
            }
            *(_DWORD *)(v5 + 1812) = v131;
            uint64_t v132 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v132 < 0x1Fu)
            {
              LODWORD(v133) = 0;
            }
            else
            {
              uint64_t v133 = v132[15];
              if (v133) {
                LODWORD(v133) = *(int *)((char *)v111 + v133);
              }
            }
            *(_DWORD *)(v5 + 1816) = v133;
            uint64_t v134 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v134 < 0x21u)
            {
              LODWORD(v135) = 0;
            }
            else
            {
              uint64_t v135 = v134[16];
              if (v135) {
                LODWORD(v135) = *(int *)((char *)v111 + v135);
              }
            }
            *(_DWORD *)(v5 + 1820) = v135;
            uint64_t v136 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v136 < 0x23u)
            {
              LODWORD(v137) = 0;
            }
            else
            {
              uint64_t v137 = v136[17];
              if (v137) {
                LODWORD(v137) = *(int *)((char *)v111 + v137);
              }
            }
            *(_DWORD *)(v5 + 1824) = v137;
            uint64_t v138 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v138 < 0x25u)
            {
              LODWORD(v139) = 0;
            }
            else
            {
              uint64_t v139 = v138[18];
              if (v139) {
                LODWORD(v139) = *(int *)((char *)v111 + v139);
              }
            }
            *(_DWORD *)(v5 + 1828) = v139;
            uint64_t v140 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v140 < 0x27u)
            {
              LODWORD(v141) = 0;
            }
            else
            {
              uint64_t v141 = v140[19];
              if (v141) {
                LODWORD(v141) = *(int *)((char *)v111 + v141);
              }
            }
            *(_DWORD *)(v5 + 1832) = v141;
            uint64_t v142 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v142 < 0x29u)
            {
              LODWORD(v143) = 0;
            }
            else
            {
              uint64_t v143 = v142[20];
              if (v143) {
                LODWORD(v143) = *(int *)((char *)v111 + v143);
              }
            }
            *(_DWORD *)(v5 + 1836) = v143;
            uint64_t v144 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v144 < 0x2Bu)
            {
              LODWORD(v145) = 0;
            }
            else
            {
              uint64_t v145 = v144[21];
              if (v145) {
                LODWORD(v145) = *(int *)((char *)v111 + v145);
              }
            }
            *(_DWORD *)(v5 + 1840) = v145;
            uint64_t v146 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v146 < 7u)
            {
              LODWORD(v147) = 0;
            }
            else
            {
              uint64_t v147 = v146[3];
              if (v147) {
                LODWORD(v147) = *(int *)((char *)v111 + v147);
              }
            }
            *(_DWORD *)(v5 + 1844) = v147;
            BOOL v148 = (unsigned __int16 *)((char *)v111 - *v111);
            if (*v148 >= 5u && (uint64_t v149 = v148[2]) != 0) {
              int v150 = *(int *)((char *)v111 + v149);
            }
            else {
              int v150 = 0;
            }
            *(_DWORD *)(v5 + 1852) = v150;
          }
          goto LABEL_259;
        }
      }
      else
      {
        long long v52 = v4 + 113;
        int64_t v53 = v4[113];
        if (!v53) {
          goto LABEL_144;
        }
      }
      if (!v52[1]) {
        goto LABEL_144;
      }
      int v54 = (int *)((char *)v53 + *v53);
      size_t v55 = (unsigned __int16 *)((char *)v54 - *v54);
      unsigned int v56 = *v55;
      if (v55[2])
      {
        long long v57 = (int *)((char *)v54 + v55[2] + *(unsigned int *)((char *)v54 + v55[2]));
        if (v56 < 7) {
          goto LABEL_105;
        }
      }
      else
      {
        long long v57 = 0;
        if (v56 < 7) {
          goto LABEL_105;
        }
      }
      uint64_t v58 = v55[3];
      if (v58)
      {
        long long v59 = (char *)v54 + v58 + *(unsigned int *)((char *)v54 + v58);
        if (!*v57) {
          goto LABEL_144;
        }
        goto LABEL_106;
      }
LABEL_105:
      long long v59 = 0;
      if (!*v57) {
        goto LABEL_144;
      }
LABEL_106:
      uint64_t v60 = 0;
      long long v61 = v57 + 1;
      long long v62 = v59 + 4;
      int v302 = v59 + 4;
      while (1)
      {
        long long v64 = (char *)&v61[v60 + 1] + v61[v60];
        size_t v65 = strlen(v64);
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v66 = v65;
        if (v65 >= 0x17)
        {
          uint64_t v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17) {
            uint64_t v68 = v65 | 7;
          }
          uint64_t v69 = v68 + 1;
          long long v67 = operator new(v68 + 1);
          *(void *)&__dst[16] = v69 | 0x8000000000000000;
          *(void *)std::string __dst = v67;
          *(void *)&__dst[8] = v66;
        }
        else
        {
          __dst[23] = v65;
          long long v67 = __dst;
          if (!v65) {
            goto LABEL_117;
          }
        }
        memmove(v67, v64, v66);
LABEL_117:
        v67[v66] = 0;
        unint64_t v5 = (unint64_t)v310;
        unint64_t v70 = v310[234];
        if (v70 >= v310[235])
        {
          long long v71 = std::vector<std::string>::__push_back_slow_path<std::string>(v304, (uint64_t)__dst);
          int v72 = __dst[23];
          v310[234] = v71;
          if (v72 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v70 = *(_OWORD *)__dst;
          *(void *)(v70 + 16) = *(void *)&__dst[16];
          v310[234] = v70 + 24;
        }
        int v73 = *(_DWORD *)&v62[4 * v60];
        long long v74 = (char *)v310[237];
        unint64_t v75 = v310[238];
        if ((unint64_t)v74 < v75)
        {
          *(_DWORD *)long long v74 = v73;
          long long v63 = v74 + 4;
        }
        else
        {
          long long v76 = (char *)v310[236];
          uint64_t v77 = (v74 - v76) >> 2;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62) {
            abort();
          }
          long long v79 = v57;
          uint64_t v80 = v75 - (void)v76;
          if (v80 >> 1 > v78) {
            unint64_t v78 = v80 >> 1;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v78;
          }
          if (v81)
          {
            if (v81 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            long long v82 = operator new(4 * v81);
          }
          else
          {
            long long v82 = 0;
          }
          long long v83 = &v82[4 * v77];
          *long long v83 = v73;
          long long v63 = v83 + 1;
          if (v74 != v76)
          {
            unint64_t v84 = v74 - 4 - v76;
            if (v84 < 0x2C) {
              goto LABEL_516;
            }
            if ((unint64_t)(v76 - v82) < 0x20) {
              goto LABEL_516;
            }
            uint64_t v85 = (v84 >> 2) + 1;
            long long v86 = &v82[4 * v77 - 16];
            long long v87 = v74 - 16;
            uint64_t v88 = v85 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v89 = *(_OWORD *)v87;
              *(v86 - 1) = *((_OWORD *)v87 - 1);
              *long long v86 = v89;
              v86 -= 2;
              v87 -= 32;
              v88 -= 8;
            }
            while (v88);
            v83 -= v85 & 0x7FFFFFFFFFFFFFF8;
            v74 -= 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
            if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_516:
              do
              {
                int v90 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *--long long v83 = v90;
              }
              while (v74 != v76);
            }
          }
          v310[236] = v83;
          v310[237] = v63;
          v310[238] = &v82[4 * v81];
          if (v76) {
            operator delete(v76);
          }
          unint64_t v5 = (unint64_t)v310;
          long long v57 = v79;
          long long v62 = v302;
        }
        *(void *)(v5 + 1896) = v63;
        if (++v60 >= (unint64_t)*v57) {
          goto LABEL_144;
        }
      }
    }
    size_t v46 = (size_t)v4[1];
    if (v46 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v47 = *v4;
    if (v46 >= 0x17)
    {
      uint64_t v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v49 = v46 | 7;
      }
      uint64_t v50 = v49 + 1;
      int64_t v48 = operator new(v49 + 1);
      *(void *)&__dst[16] = v50 | 0x8000000000000000;
      *(void *)std::string __dst = v48;
      *(void *)&__dst[8] = v46;
    }
    else
    {
      __dst[23] = v4[1];
      int64_t v48 = __dst;
      if (!v46) {
        goto LABEL_83;
      }
    }
    memmove(v48, v47, v46);
LABEL_83:
    v48[v46] = 0;
    if (*v8 < 0) {
      operator delete(*(void **)v39);
    }
    *(_OWORD *)unint64_t v39 = *(_OWORD *)__dst;
    *(void *)(v39 + 16) = *(void *)&__dst[16];
    unint64_t v51 = v4 + 3;
    unint64_t v5 = (unint64_t)v310;
    if (v4[3])
    {
      if (!v4[4]) {
        unint64_t v51 = v4 + 73;
      }
    }
    else
    {
      unint64_t v51 = v4 + 73;
    }
    v310[198] = *v51 - (void)*v4;
    goto LABEL_91;
  }
  if (v20 < 0x45)
  {
    if (v20 < 0x3D)
    {
      LOWORD(v25) = 0;
      if (v20 < 0x3B)
      {
        LODWORD(v27) = 0;
        uint64_t v26 = 0;
        LOWORD(v24) = 0;
        LOBYTE(v28) = 0;
LABEL_54:
        *(_DWORD *)(v5 + 880) = v27;
        __int16 v29 = v25 + v27 - 1;
        int v30 = -(int)v27;
        uint64_t v31 = *(void *)(v5 + 888);
        unint64_t v32 = (unsigned __int16)v24 | ((unint64_t)(unsigned __int16)(v30 & v29) << 32) | (v26 << 48) | (v28 << 16) | (unint64_t)(v31 & 0xFF000000);
        *(void *)(v5 + 888) = v32;
        if (v32 != v31)
        {
          *(void *)(v5 + 928) = 0;
          *(_OWORD *)(v5 + 896) = 0uLL;
          *(_OWORD *)(v5 + 912) = 0uLL;
          *(void *)&long long v33 = -1;
          *((void *)&v33 + 1) = -1;
          *(_OWORD *)(v5 + 936) = v33;
          *(_OWORD *)(v5 + 952) = v33;
          *(_OWORD *)(v5 + 968) = v33;
        }
        goto LABEL_56;
      }
      LOWORD(v24) = 0;
      uint64_t v26 = v19[29];
      if (!v19[29])
      {
LABEL_39:
        if (v20 < 0x3F)
        {
          LODWORD(v27) = 0;
          LOBYTE(v28) = 0;
        }
        else
        {
          uint64_t v27 = v19[31];
          if (v19[31]) {
            uint64_t v27 = *(void *)((char *)v18 + v27);
          }
          if (v20 < 0x4B)
          {
            LOBYTE(v28) = 0;
          }
          else
          {
            uint64_t v28 = v19[37];
            if (v28) {
              LODWORD(v28) = *(int *)((char *)v18 + v28);
            }
          }
        }
        goto LABEL_54;
      }
LABEL_38:
      uint64_t v26 = *(void *)((char *)v18 + v26);
      goto LABEL_39;
    }
    LOWORD(v24) = 0;
    uint64_t v25 = v19[30];
    if (v19[30]) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v24 = v19[34];
    if (v19[34]) {
      uint64_t v24 = *(void *)((char *)v18 + v24);
    }
    uint64_t v25 = v19[30];
    if (v19[30]) {
LABEL_36:
    }
      uint64_t v25 = *(void *)((char *)v18 + v25);
  }
  uint64_t v26 = v19[29];
  if (!v19[29]) {
    goto LABEL_39;
  }
  goto LABEL_38;
}

void sub_242AB6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CompileStatistics *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,unint64_t a41,void *a42)
{
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&STACK[0x230]);
  if (v42) {
    operator delete(v42);
  }
  if (a42) {
    operator delete(a42);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a35);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,true>::~ProgramVariant(a41);
  _Unwind_Resume(a1);
}

void AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v2 = (std::mutex *)(v1 + 3608);
  std::mutex::lock((std::mutex *)(v1 + 3608));
  uint64_t v3 = *(void *)(v1 + 544);
  if (v3)
  {
    uint64_t v191 = (void *)(v1 + 648);
    uint64_t v4 = *(uint64_t ***)(v1 + 536);
    unint64_t v5 = (uint64_t *)(v1 + 640);
    int v6 = *(_DWORD *)(v3 + 124);
    int v7 = *(_DWORD *)(v3 + 132);
    int v8 = *(_DWORD *)(v3 + 140);
    if (*(unsigned char *)(v3 + 208)) {
      int v9 = *(_DWORD *)(v3 + 144);
    }
    else {
      int v9 = 0;
    }
    if (*(_OWORD *)(v3 + 176) == 0) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(v3 + 144);
    }
    int v11 = *(_DWORD *)(v3 + 120) + *(_DWORD *)(v3 + 128) + *(_DWORD *)(v3 + 136);
    unint64_t v12 = v9 + *(_DWORD *)(v3 + 148) + v10 + *(_DWORD *)(v3 + 152) + ((v6 + v7 + v8 - v11 + 3) & 0xFFFFFFFC);
    uint64_t v13 = *(void *)(v1 + 640);
    unint64_t v14 = (*(void *)(v1 + 648) - v13) >> 2;
    if (v12 <= v14)
    {
      if (v12 < v14) {
        *uint64_t v191 = v13 + 4 * v12;
      }
    }
    else
    {
      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 640), v12 - v14);
      int v6 = *(_DWORD *)(v3 + 124);
      int v7 = *(_DWORD *)(v3 + 132);
      int v8 = *(_DWORD *)(v3 + 140);
      int v11 = *(_DWORD *)(v3 + 120) + *(_DWORD *)(v3 + 128) + *(_DWORD *)(v3 + 136);
    }
    *(_DWORD *)(v1 + 1004) = v6 + v7 + v8 - v11;
    unsigned int v15 = *v4;
    uint64_t v16 = v4[1];
    if (*v4 != v16)
    {
      do
      {
        uint64_t v17 = *v15;
        int v18 = *(_DWORD *)(*v15 + 4);
        if ((v18 & 0x80000000) == 0)
        {
          unsigned int v19 = 4 * *(_DWORD *)(v17 + 8) - *(_DWORD *)(v3 + 120);
          unsigned int v20 = (32 * (v18 & 0xFFFFF) + ((*(_DWORD *)v17 == 6) << 12) + 1592) >> 3;
          uint64_t v21 = *v5;
          *(_DWORD *)(*v5 + 4 * v19) = v20;
          *(_DWORD *)(v21 + 4 * (v19 + 1)) = v20 + 1;
          *(_DWORD *)(v21 + 4 * (v19 + 2)) = v20 + 2;
          *(_DWORD *)(v21 + 4 * (v19 + 3)) = v20 + 3;
          if (*(unsigned char *)(v17 + 12)) {
            *(void *)(v1 + 1072 + 8 * ((*(_DWORD *)(v17 + 4) & 0xFFFC0) != 0)) |= 1 << *(_DWORD *)(v17 + 4);
          }
        }
        ++v15;
      }
      while (v15 != v16);
    }
    if (*(unsigned char *)(v1 + 1046))
    {
      for (uint64_t i = v4[9]; i != v4[10]; ++i)
      {
        if (*(_DWORD *)*i == 93)
        {
          int v23 = *(_DWORD *)(*i + 4);
          if ((v23 & 0x80000000) == 0 && (v23 & 0xFFF00000) != 0x400000)
          {
            *(int8x16_t *)(v1 + 1072) = vorrq_s8(*(int8x16_t *)(v1 + 1072), *(int8x16_t *)(v1 + 1088));
            break;
          }
        }
      }
    }
    uint64_t v24 = v4[3];
    for (uint64_t j = v4[4]; v24 != j; ++v24)
    {
      int v26 = *(_DWORD *)(*v24 + 4);
      if ((v26 & 0x80000000) == 0)
      {
        int v27 = *(unsigned __int8 *)(v1 + 1736);
        int v28 = *(unsigned char *)(v1 + 1736) ? 3 : 1;
        unsigned int v29 = *(_DWORD *)(v3 + 124) + v28 * *(_DWORD *)(*v24 + 8) - (*(_DWORD *)(v3 + 120) + *(_DWORD *)(v3 + 128));
        int v30 = v26 & 0xFFFFF;
        uint64_t v31 = *(void *)(v1 + 640);
        *(_DWORD *)(v31 + 4 * v29) = v30 + 1223;
        if (v27)
        {
          unsigned int v32 = (16 * v30 + 9912) >> 3;
          *(_DWORD *)(v31 + 4 * (v29 + 1)) = v32;
          *(_DWORD *)(v31 + 4 * (v29 + 2)) = v32 + 1;
        }
      }
    }
    long long v33 = v4[6];
    int v34 = v4[7];
    uint64_t v192 = v4;
    uint64_t v193 = (char **)(v1 + 640);
    if (v33 != v34)
    {
      uint64_t v35 = (uint64_t **)(v1 + 864);
      do
      {
        uint64_t v36 = *v33;
        int v37 = *(_DWORD *)(*v33 + 4);
        if ((v37 & 0x80000000) == 0)
        {
          unsigned int v38 = ((*(_DWORD *)(v36 + 8) >> 1) & 0x1FFFFFFF)
              + *(_DWORD *)(v3 + 124)
              + *(_DWORD *)(v3 + 132)
              - (*(_DWORD *)(v3 + 120)
               + *(_DWORD *)(v3 + 128)
               + *(_DWORD *)(v3 + 136));
          unsigned int v39 = v37 & 0xFFFFF;
          *(_DWORD *)(*v5 + 4 * v38) = (v37 & 0xFFFFF) + 67;
          if (*(unsigned char *)(v36 + 12)) {
            *(void *)(v1 + 1056 + 8 * (v39 > 0x3F)) |= 1 << v37;
          }
          if (*(unsigned char *)(v1 + 1739))
          {
            size_t v40 = *(uint64_t **)(v1 + 1752);
            if (!v40) {
LABEL_273:
            }
              abort();
            unsigned int v41 = (2 * v38) | 1;
            while (1)
            {
              while (1)
              {
                unsigned int v42 = *((_DWORD *)v40 + 7);
                if (v39 >= v42) {
                  break;
                }
                size_t v40 = (uint64_t *)*v40;
                if (!v40) {
                  goto LABEL_273;
                }
              }
              if (v42 >= v39) {
                break;
              }
              size_t v40 = (uint64_t *)v40[1];
              if (!v40) {
                goto LABEL_273;
              }
            }
            int v43 = *((_DWORD *)v40 + 8);
            uint64_t v44 = *v35;
            uint8x8_t v45 = (uint64_t **)(v1 + 864);
            size_t v46 = (uint64_t **)(v1 + 864);
            if (*v35)
            {
              while (1)
              {
                while (1)
                {
                  size_t v46 = (uint64_t **)v44;
                  unsigned int v47 = *((_DWORD *)v44 + 7);
                  if (v41 >= v47) {
                    break;
                  }
                  uint64_t v44 = *v46;
                  uint8x8_t v45 = v46;
                  if (!*v46) {
                    goto LABEL_58;
                  }
                }
                if (v47 >= v41) {
                  break;
                }
                uint64_t v44 = v46[1];
                if (!v44)
                {
                  uint8x8_t v45 = v46 + 1;
                  goto LABEL_58;
                }
              }
              int64_t v48 = v46;
            }
            else
            {
LABEL_58:
              int64_t v48 = operator new(0x28uLL);
              v48[7] = v41;
              unsigned int v48[8] = 0;
              *(void *)int64_t v48 = 0;
              *((void *)v48 + 1) = 0;
              *((void *)v48 + 2) = v46;
              *uint8x8_t v45 = (uint64_t *)v48;
              uint64_t v49 = **(void **)(v1 + 856);
              uint64_t v50 = (uint64_t *)v48;
              if (v49)
              {
                *(void *)(v1 + 856) = v49;
                uint64_t v50 = *v45;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 864), v50);
              ++*(void *)(v1 + 872);
            }
            unint64_t v5 = (uint64_t *)(v1 + 640);
            unsigned int v48[8] = v43;
          }
        }
        ++v33;
      }
      while (v33 != v34);
    }
    unint64_t v51 = *(void *)(v3 + 160);
    unint64_t v52 = *(void *)(v3 + 168);
    if (*(_OWORD *)(v3 + 160) != 0)
    {
      int v53 = *(unsigned __int8 *)(v3 + 208);
      int v54 = *(_DWORD *)(v3 + 144);
      if (!*(unsigned char *)(v3 + 208)) {
        goto LABEL_72;
      }
      if (v54)
      {
        unsigned int v55 = (*(_DWORD *)(v3 + 124)
             + *(_DWORD *)(v3 + 132)
             + *(_DWORD *)(v3 + 140)
             - (*(_DWORD *)(v3 + 120)
              + *(_DWORD *)(v3 + 128)
              + *(_DWORD *)(v3 + 136))
             + 3) & 0xFFFFFFFC;
        unint64_t v194 = *(void *)(v3 + 168);
        unint64_t m = v51;
        for (unint64_t k = v51; ; unint64_t k = m)
        {
          if (k)
          {
            int v57 = __clz(__rbit64(k));
            uint64_t v58 = &m;
            int v59 = v57;
          }
          else
          {
            unint64_t k = v194;
            if (!v194)
            {
              int v54 = *(_DWORD *)(v3 + 144);
              int v53 = v54;
              goto LABEL_72;
            }
            int v57 = __clz(__rbit64(v194));
            int v59 = v57 | 0x40;
            uint64_t v58 = &v194;
          }
          *uint64_t v58 = k & ~(1 << v57);
          unsigned int v60 = (32 * v59 + 1592) >> 3;
          uint64_t v61 = *v5;
          *(_DWORD *)(*v5 + 4 * v55) = v60;
          *(_DWORD *)(v61 + 4 * (v55 + 1)) = v60 + 1;
          *(_DWORD *)(v61 + 4 * (v55 + 2)) = v60 + 2;
          *(_DWORD *)(v61 + 4 * (v55 + 3)) = v60 + 3;
          v55 += 4;
        }
      }
      int v53 = 0;
LABEL_72:
      int8x16_t v62 = *(int8x16_t *)(v3 + 176);
      if (*(_OWORD *)&v62 != 0 && v54 != 0)
      {
        unsigned int v160 = ((*(_DWORD *)(v3 + 140)
               + *(_DWORD *)(v3 + 132)
               - (*(_DWORD *)(v3 + 136)
                + *(_DWORD *)(v3 + 128)
                + *(_DWORD *)(v3 + 120))
               + *(_DWORD *)(v3 + 124)
               + 3) & 0xFFFFFFFC)
             + v53;
        unint64_t v194 = v52;
        for (m = v51; ; unint64_t v51 = m)
        {
          if (v51)
          {
            int v161 = __clz(__rbit64(v51));
            p_unint64_t m = &m;
            int v163 = v161;
          }
          else
          {
            unint64_t v51 = v194;
            if (!v194) {
              break;
            }
            int v161 = __clz(__rbit64(v194));
            int v163 = v161 | 0x40;
            p_unint64_t m = &v194;
          }
          *p_unint64_t m = v51 & ~(1 << v161);
          unsigned int v164 = (32 * v163 + 5688) >> 3;
          uint64_t v165 = *v5;
          *(_DWORD *)(*v5 + 4 * v160) = v164;
          *(_DWORD *)(v165 + 4 * (v160 + 1)) = v164 + 1;
          *(_DWORD *)(v165 + 4 * (v160 + 2)) = v164 + 2;
          *(_DWORD *)(v165 + 4 * (v160 + 3)) = v164 + 3;
          v160 += 4;
        }
      }
      *(int8x16_t *)(v1 + 1072) = vorrq_s8(*(int8x16_t *)(v1 + 1072), v62);
    }
    if (*(_DWORD *)(v3 + 148))
    {
      int v64 = *(_DWORD *)(v3 + 144);
      if (*(unsigned char *)(v3 + 208)) {
        int v65 = *(_DWORD *)(v3 + 144);
      }
      else {
        int v65 = 0;
      }
      if (*(_OWORD *)(v3 + 176) == 0) {
        int v64 = 0;
      }
      unsigned int v66 = v65
          + v64
          + ((*(_DWORD *)(v3 + 124)
            + *(_DWORD *)(v3 + 132)
            + *(_DWORD *)(v3 + 140)
            - (*(_DWORD *)(v3 + 120)
             + *(_DWORD *)(v3 + 128)
             + *(_DWORD *)(v3 + 136))
            + 3) & 0xFFFFFFFC);
      unint64_t v67 = *(void *)(v3 + 192);
      unint64_t v194 = *(void *)(v3 + 200);
      for (m = v67; ; unint64_t v67 = m)
      {
        if (v67)
        {
          int v68 = __clz(__rbit64(v67));
          uint64_t v69 = &m;
          int v70 = v68;
        }
        else
        {
          unint64_t v67 = v194;
          if (!v194) {
            break;
          }
          int v68 = __clz(__rbit64(v194));
          int v70 = v68 | 0x40;
          uint64_t v69 = &v194;
        }
        *uint64_t v69 = v67 & ~(1 << v68);
        uint64_t v71 = *(void *)(v1 + 640);
        *(_DWORD *)(v71 + 4 * v66) = v70 + 1223;
        if (*(unsigned char *)(v1 + 1736))
        {
          unsigned int v72 = (16 * v70 + 9912) >> 3;
          *(_DWORD *)(v71 + 4 * (v66 + 1)) = v72;
          *(_DWORD *)(v71 + 4 * (v66 + 2)) = v72 + 1;
        }
        v66 += 4;
      }
    }
    if (*(unsigned char *)(v3 + 467))
    {
      int v73 = 128 - 2 * __clz((unint64_t)v192[13]);
      if (*(_DWORD *)(v1 + 800) > v73) {
        int v73 = *(_DWORD *)(v1 + 800);
      }
      *(_DWORD *)(v1 + 800) = v73;
      unint64_t v74 = ((unint64_t)*((unsigned int *)v192 + 24) + 3) >> 2;
      *(_DWORD *)(v1 + 792) = v74;
      *(_DWORD *)(v1 + 796) = 134;
    }
    else
    {
      unint64_t v74 = ((unint64_t)*((unsigned int *)v192 + 24) + 3) >> 2;
    }
    unint64_t v75 = (void *)(v1 + 664);
    uint64_t v76 = *(void *)(v1 + 664);
    unint64_t v77 = (*(void *)(v1 + 672) - v76) >> 2;
    if (v74 <= v77)
    {
      if (v74 < v77) {
        *(void *)(v1 + 672) = v76 + 4 * v74;
      }
    }
    else
    {
      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 664), v74 - v77);
    }
    if (v1 + 688 != v3 + 216) {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v1 + 688), *(char **)(v3 + 216), *(char **)(v3 + 224), (uint64_t)(*(void *)(v3 + 224) - *(void *)(v3 + 216)) >> 2);
    }
    if (v1 + 736 != v3 + 240) {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v1 + 736), *(char **)(v3 + 240), *(char **)(v3 + 248), (uint64_t)(*(void *)(v3 + 248) - *(void *)(v3 + 240)) >> 2);
    }
    if (v1 + 712 != v3 + 320) {
      std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((void *)(v1 + 712), *(char **)(v3 + 320), *(char **)(v3 + 328), (uint64_t)(*(void *)(v3 + 328) - *(void *)(v3 + 320)) >> 1);
    }
    if (v1 + 760 != v3 + 368) {
      std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((void *)(v1 + 760), *(char **)(v3 + 368), *(char **)(v3 + 376), (uint64_t)(*(void *)(v3 + 376) - *(void *)(v3 + 368)) >> 1);
    }
    *(unsigned char *)(v1 + 784) = *(unsigned char *)(v3 + 416);
    *(unsigned char *)(v1 + 1048) = *(_OWORD *)(v3 + 160) != 0;
    *(unsigned char *)(v1 + 1049) = *(void *)(v3 + 148) != 0;
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(v1, v3);
    if (!*(unsigned char *)(v1 + 3167))
    {
      if (*(unsigned char *)(v1 + 3165))
      {
        unsigned int v78 = *(_DWORD *)(v1 + 2528);
        if (v78 <= 8) {
          unsigned int v78 = 8;
        }
        *(_DWORD *)(v1 + 2528) = v78;
      }
      uint64_t v79 = *(void *)(v1 + 1936);
      int v80 = *(_DWORD *)(v1 + 2524);
      int v81 = *(_DWORD *)(v1 + 2536);
      uint64_t v82 = (unsigned __int16)((*(_DWORD *)(v1 + 2520) + 3) >> 2);
      *(void *)(v79 + 88) = *(void *)(v79 + 88) & 0xFFFFF00000000000 | (v82 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v1 + 2532) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v82;
      *(_DWORD *)(v79 + 248) = (v80 + 3) >> 2;
      *(_DWORD *)(v79 + 252) = (((v81 + 3) >> 2) + 1) & 0x7FFFFFFE;
      if (*(unsigned char *)(v79 + 174)) {
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v79 + 48), *(_DWORD *)(v79 + 240), *(void *)v79 + *(unsigned __int16 *)(v79 + 244));
      }
    }
    unsigned int v83 = *(_DWORD *)(v1 + 3168);
    if (v83 != -1) {
      AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(*(void *)(v1 + 1936), v83, *(_DWORD *)(v1 + 3172), *(void *)(v1 + 2568), *(void *)(v1 + 2576), *(void *)(v1 + 2584), *(unsigned char *)(v1 + 3180));
    }
    uint64_t v84 = *(void *)(v1 + 2784);
    if (v84)
    {
      int v85 = *(_DWORD *)(v1 + 2524);
      int v86 = *(_DWORD *)(v1 + 2536);
      uint64_t v87 = (unsigned __int16)((*(_DWORD *)(v1 + 2520) + 3) >> 2);
      *(void *)(v84 + 88) = *(void *)(v84 + 88) & 0xFFFFF00000000000 | (v87 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v1 + 2532) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v87;
      *(_DWORD *)(v84 + 248) = (v85 + 3) >> 2;
      *(_DWORD *)(v84 + 252) = (((v86 + 3) >> 2) + 1) & 0x7FFFFFFE;
      if (*(unsigned char *)(v84 + 174)) {
        AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v84 + 48), *(_DWORD *)(v84 + 240), *(void *)v84 + *(unsigned __int16 *)(v84 + 244));
      }
      uint64_t v88 = *(void *)(v1 + 2784);
      long long v89 = *(char **)(v1 + 2736);
      memcpy(v89, *(const void **)v88, *(void *)(v88 + 8) - *(void *)v88);
      if (*(unsigned char *)(v88 + 200)) {
        *(int8x16_t *)&v89[*(unsigned int *)(v88 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v89[*(unsigned int *)(v88 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      int v90 = *(unsigned int **)(v88 + 176);
      for (unint64_t n = *(unsigned int **)(v88 + 184); v90 != n; v90 += 3)
      {
        v92.i64[0] = *(void *)&v196[2 * v90[1] - 2] + *v90;
        v92.i64[1] = (unint64_t)v92.i64[0] >> 5;
        *(int8x16_t *)&v89[v90[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v89[v90[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      uint64_t v93 = *(void *)(v1 + 2784);
      long long v94 = *(_OWORD *)(v93 + 80);
      long long v95 = *(_OWORD *)(v93 + 96);
      long long v96 = *(_OWORD *)(v93 + 64);
      *(_OWORD *)(v1 + 2792) = *(_OWORD *)(v93 + 48);
      *(_OWORD *)(v1 + 2840) = v95;
      *(_OWORD *)(v1 + 2824) = v94;
      *(_OWORD *)(v1 + 2808) = v96;
      long long v98 = *(_OWORD *)(v93 + 128);
      long long v97 = *(_OWORD *)(v93 + 144);
      uint64_t v99 = *(void *)(v93 + 160);
      *(_OWORD *)(v1 + 2856) = *(_OWORD *)(v93 + 112);
      *(void *)(v1 + 2904) = v99;
      *(_OWORD *)(v1 + 2888) = v97;
      *(_OWORD *)(v1 + 2872) = v98;
    }
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)(v1 + 1936));
    uint64_t v100 = *(void *)(v1 + 1936);
    int v101 = *(unsigned __int8 *)(v1 + 3188);
    int v102 = 8 * (*(_DWORD *)(v100 + 252) & 0xFFF);
    {
      AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
    }
    if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
      int v103 = 0x80000;
    }
    else {
      int v103 = 0;
    }
    int v104 = v103 | ((v101 != 0) << 23) | v102;
    int v105 = 8 * (*(_DWORD *)(v100 + 248) & 0x3FFFF);
    *(_DWORD *)(v1 + 3192) = v104;
    *(_DWORD *)(v1 + 3196) = v105;
    *(void *)(v1 + 3200) = 0x4000000000000000;
    *(void *)(v1 + 3208) = 0;
    *(void *)(v1 + 3224) = 0;
    *(void *)(v1 + 3216) = 0;
    uint64_t v106 = *(void *)(v1 + 1936);
    int v107 = *(unsigned __int8 *)(v1 + 3188);
    int v108 = 8 * (*(_DWORD *)(v106 + 252) & 0xFFF);
    {
      AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
    }
    if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
      int v109 = 0x80000;
    }
    else {
      int v109 = 0;
    }
    int v110 = v109 | ((v107 != 0) << 23) | v108;
    int v111 = 8 * (*(_DWORD *)(v106 + 248) & 0x3FFFF);
    *(_DWORD *)(v1 + 3232) = v110;
    *(_DWORD *)(v1 + 3236) = v111;
    *(void *)(v1 + 3240) = 0x4000000000000000;
    *(void *)(v1 + 3248) = 0;
    *(void *)(v1 + 3264) = 0;
    *(void *)(v1 + 3256) = 0;
    uint64_t v112 = *(void *)(v1 + 1936);
    int v113 = *(unsigned __int8 *)(v1 + 3188);
    {
      AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
    }
    if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
      int v114 = 134742016;
    }
    else {
      int v114 = 0x8000000;
    }
    int v115 = ((v113 != 0) << 23) | (8 * (*(_DWORD *)(v112 + 252) & 0xFFF)) | v114;
    int v116 = 8 * (*(_DWORD *)(v112 + 248) & 0x3FFFF);
    *(_DWORD *)(v1 + 3272) = v115;
    *(_DWORD *)(v1 + 3276) = v116;
    *(void *)(v1 + 3280) = 0x4000000000000000;
    *(void *)(v1 + 3296) = 0;
    *(void *)(v1 + 3288) = 0;
    *(_DWORD *)(v1 + 3304) = 0;
    uint64_t v117 = *(void *)(v1 + 1936);
    int v118 = *(unsigned __int8 *)(v1 + 3188);
    {
      AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
    }
    if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
      int v119 = 268959744;
    }
    else {
      int v119 = 0x10000000;
    }
    int v120 = ((v118 != 0) << 23) | (8 * (*(_DWORD *)(v117 + 252) & 0xFFF)) | v119;
    int v121 = 8 * (*(_DWORD *)(v117 + 248) & 0x3FFFF);
    *(_DWORD *)(v1 + 3308) = v120;
    *(_DWORD *)(v1 + 3312) = v121;
    *(void *)(v1 + 3316) = 0x4000000000000000;
    *(void *)(v1 + 3324) = 0;
    if (*(unsigned char *)(v3 + 312))
    {
      *(int8x16_t *)(v1 + 2152) = vorrq_s8(*(int8x16_t *)(v1 + 2152), *(int8x16_t *)(v1 + 1992));
      *(void *)(v1 + 1992) = 0;
      *(void *)(v1 + 2000) = 0;
    }
    if (*(unsigned char *)(v3 + 313))
    {
      *(int8x16_t *)(v1 + 2168) = vorrq_s8(*(int8x16_t *)(v1 + 2168), *(int8x16_t *)(v1 + 2008));
      *(void *)(v1 + 2008) = 0;
      *(void *)(v1 + 2016) = 0;
    }
    if (*(unsigned char *)(v3 + 314))
    {
      *(int8x16_t *)(v1 + 2136) = vorrq_s8(*(int8x16_t *)(v1 + 2136), *(int8x16_t *)(v1 + 1976));
      *(void *)(v1 + 1976) = 0;
      *(void *)(v1 + 1984) = 0;
    }
    if (*(unsigned char *)(v3 + 315))
    {
      int8x16_t v122 = vorrq_s8(*(int8x16_t *)(v1 + 2200), *(int8x16_t *)(v1 + 2088));
      int8x16_t v123 = vorrq_s8(*(int8x16_t *)(v1 + 2216), *(int8x16_t *)(v1 + 2104));
      int8x16_t v124 = vorrq_s8(*(int8x16_t *)(v1 + 2184), *(int8x16_t *)(v1 + 2072));
      int8x16_t v125 = vorrq_s8(*(int8x16_t *)(v1 + 2232), *(int8x16_t *)(v1 + 2120));
      *(int8x16_t *)(v1 + 2184) = v124;
      *(int8x16_t *)(v1 + 2200) = v122;
      *(int8x16_t *)(v1 + 2216) = v123;
      *(int8x16_t *)(v1 + 2232) = v125;
      int8x16_t v126 = 0uLL;
      *(_OWORD *)(v1 + 2104) = 0u;
      *(_OWORD *)(v1 + 2120) = 0u;
      int8x16_t v127 = 0uLL;
      *(_OWORD *)(v1 + 2072) = 0u;
      *(_OWORD *)(v1 + 2088) = 0u;
    }
    else
    {
      int8x16_t v126 = *(int8x16_t *)(v1 + 2072);
      int8x16_t v127 = *(int8x16_t *)(v1 + 2088);
      int8x16_t v124 = *(int8x16_t *)(v1 + 2184);
      int8x16_t v122 = *(int8x16_t *)(v1 + 2200);
    }
    int8x16_t v128 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v1 + 1992), *(int8x16_t *)(v1 + 2040)), vorrq_s8(v127, *(int8x16_t *)(v1 + 2152))), v122);
    *(int8x16_t *)(v1 + 1944) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v1 + 1976), *(int8x16_t *)(v1 + 2024)), vorrq_s8(v126, *(int8x16_t *)(v1 + 2136))), v124);
    *(int8x16_t *)(v1 + 1960) = v128;
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(v1 + 1936);
    uint64_t v129 = *(void *)(v1 + 536);
    uint64_t v130 = *(int ***)(v129 + 72);
    uint64_t v131 = *(int ***)(v129 + 80);
    if (v130 != v131)
    {
      while (2)
      {
        uint64_t v133 = *v130;
        int v134 = **v130;
        unsigned int v135 = v134 - 11;
        switch(v134)
        {
          case 11:
          case 12:
          case 13:
          case 16:
          case 17:
          case 62:
          case 93:
          case 97:
          case 98:
            goto LABEL_157;
          case 14:
          case 15:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 94:
          case 95:
          case 96:
            goto LABEL_161;
          default:
            if (v134 == 113)
            {
LABEL_157:
              int v136 = v133[1];
              if (v136 < 0) {
                goto LABEL_155;
              }
            }
            else
            {
LABEL_161:
              int v136 = v133[1];
              if (v135 > 0x78) {
                goto LABEL_155;
              }
            }
            uint64_t v137 = *v75 + 4 * v133[2];
            int v138 = v136 & 0xFFFFF;
            int v139 = 56 * (v136 & 0xFFFFF);
            unsigned int v140 = v139 + 72;
            switch(v135)
            {
              case 0u:
                *(uint32x4_t *)uint64_t v137 = vshrq_n_u32((uint32x4_t)vaddq_s32(vdupq_n_s32(v140), (int32x4_t)xmmword_242EA80F0), 2uLL);
                break;
              case 1u:
                *(_DWORD *)uint64_t v137 = v140 >> 2;
                *(_DWORD *)(v137 + 4) = (v140 >> 2) | 1;
                *(uint32x2_t *)(v137 + 8) = vshr_n_u32((uint32x2_t)vadd_s32(vdup_n_s32(v140), (int32x2_t)0xC00000008), 2uLL);
                break;
              case 2u:
                int v132 = (v139 + 104) >> 2;
                goto LABEL_154;
              case 5u:
                int v132 = (v139 + 108) >> 2;
                goto LABEL_154;
              case 6u:
                int v132 = (v139 + 112) >> 2;
                goto LABEL_154;
              case 0x15u:
                int v132 = 13;
                goto LABEL_154;
              case 0x16u:
                int v132 = 14;
                goto LABEL_154;
              case 0x17u:
                int v132 = 15;
                goto LABEL_154;
              case 0x18u:
                int v132 = 7;
                goto LABEL_154;
              case 0x19u:
                int v132 = 8;
                goto LABEL_154;
              case 0x1Au:
                int v132 = 9;
                goto LABEL_154;
              case 0x1Bu:
                int v132 = 4;
                goto LABEL_154;
              case 0x1Cu:
                int v132 = 5;
                goto LABEL_154;
              case 0x1Du:
                int v132 = 6;
                goto LABEL_154;
              case 0x1Fu:
                *(_DWORD *)uint64_t v137 = 2122;
                *(unsigned char *)(v1 + 3538) = 1;
                break;
              case 0x20u:
                *(_DWORD *)uint64_t v137 = v136 + 2126;
                uint64_t v142 = *(unsigned int *)(v1 + 3380);
                *(_DWORD *)(v1 + 3384 + 4 * v142) = v136;
                *(_DWORD *)(v1 + 3380) = v142 + 1;
                break;
              case 0x21u:
                *(void *)uint64_t v137 = 0x1100000010;
                *(unsigned char *)(v1 + 3536) = 1;
                break;
              case 0x22u:
                int v132 = 10;
                goto LABEL_154;
              case 0x23u:
                int v132 = 11;
                goto LABEL_154;
              case 0x24u:
                int v132 = 12;
                goto LABEL_154;
              case 0x2Fu:
                int v132 = 2123;
                goto LABEL_154;
              case 0x30u:
                *(void *)uint64_t v137 = 0x71300000712;
                break;
              case 0x33u:
                int v132 = (v139 + 116) >> 2;
                goto LABEL_154;
              case 0x35u:
                *(void *)uint64_t v137 = 0x71F0000071ELL;
                break;
              case 0x3Du:
                *(void *)uint64_t v137 = 0x72100000720;
                *(_DWORD *)(v137 + 8) = 1826;
                break;
              case 0x3Eu:
                *(void *)uint64_t v137 = 0x72400000723;
                *(_DWORD *)(v137 + 8) = 1829;
                break;
              case 0x49u:
                int v132 = 2125;
                goto LABEL_154;
              case 0x52u:
                if ((v136 & 0xFFF00000) == 0x400000)
                {
                  *(_DWORD *)uint64_t v137 = 0;
                }
                else
                {
                  int v132 = (v139 + 120) >> 2;
LABEL_154:
                  *(_DWORD *)uint64_t v137 = v132;
                }
                break;
              case 0x53u:
                int v132 = 3;
                goto LABEL_154;
              case 0x56u:
                int v141 = 7336;
                goto LABEL_186;
              case 0x57u:
                int v141 = 8360;
LABEL_186:
                unsigned int v143 = (v141 + 8 * v138) >> 2;
                *(_DWORD *)uint64_t v137 = v143;
                *(_DWORD *)(v137 + 4) = v143 | 1;
                break;
              case 0x62u:
                int v132 = v136 + 2261;
                goto LABEL_154;
              case 0x63u:
                int v132 = v136 + 2326;
                goto LABEL_154;
              case 0x64u:
                int v132 = 2124;
                goto LABEL_154;
              case 0x66u:
                int v132 = (8 * v138 + 8360) >> 2;
                goto LABEL_154;
              case 0x6Bu:
                *(void *)uint64_t v137 = 0x72700000726;
                break;
              case 0x6Cu:
                *(void *)uint64_t v137 = 0x72900000728;
                break;
              case 0x78u:
                int v132 = (v136 + 2161) & 0x3FFFFFFF;
                goto LABEL_154;
              default:
                break;
            }
LABEL_155:
            if (++v130 != v131) {
              continue;
            }
            goto LABEL_202;
        }
      }
    }
LABEL_202:
    *(void *)(v1 + 1056) &= ~0x4000000000uLL;
    int v144 = *(unsigned __int8 *)(v3 + 312);
    int v145 = *(unsigned __int8 *)(v3 + 313);
    int v146 = *(unsigned __int8 *)(v3 + 314);
    if (*(unsigned char *)(v3 + 312) || *(unsigned char *)(v3 + 313) || *(unsigned char *)(v3 + 314))
    {
      uint64_t v147 = *(__int16 **)(v1 + 688);
      for (iuint64_t i = *(__int16 **)(v1 + 696); v147 != ii; v147 += 2)
      {
        if (*v147 == -1)
        {
          *uint64_t v147 = 65;
          v147[1] = *(_DWORD *)&(*v193)[4 * (unsigned __int16)v147[1]];
        }
      }
      int v150 = *(_DWORD *)(v3 + 120);
      int v149 = *(_DWORD *)(v3 + 124);
      int v151 = v149 - v150 + 3;
      if (v144) {
        int v151 = 3;
      }
      int v152 = *(_DWORD *)(v3 + 132) - *(_DWORD *)(v3 + 128);
      if (v145) {
        int v152 = 0;
      }
      if (v146) {
        int v153 = 0;
      }
      else {
        int v153 = *(_DWORD *)(v3 + 140) - *(_DWORD *)(v3 + 136);
      }
      if (*(unsigned char *)(v3 + 208)) {
        int v154 = *(_DWORD *)(v3 + 144);
      }
      else {
        int v154 = 0;
      }
      if (*(_OWORD *)(v3 + 176) == 0) {
        int v155 = 0;
      }
      else {
        int v155 = *(_DWORD *)(v3 + 144);
      }
      unsigned int v156 = (v152 + v153 + v151) & 0xFFFFFFFC;
      int v157 = v154 + *(_DWORD *)(v3 + 148) + v155 + *(_DWORD *)(v3 + 152);
      unint64_t m = 0;
      memset(v196, 0, sizeof(v196));
      uint64_t v158 = v156 + v157;
      if (v156 + v157)
      {
        uint64_t v159 = (char *)operator new(4 * v158);
        unint64_t m = (unint64_t)v159;
        *(void *)char v196 = v159;
        *(void *)&v196[2] = &v159[4 * v158];
      }
      else
      {
        uint64_t v159 = 0;
      }
      uint64_t v166 = *v193;
      if (!v144 && v149 != v150)
      {
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, v159, *v193, &v166[4 * (v149 - v150)], (v149 - v150));
        int v145 = *(unsigned __int8 *)(v3 + 313);
      }
      if (!v145)
      {
        int v168 = *(_DWORD *)(v3 + 128);
        int v167 = *(_DWORD *)(v3 + 132);
        if (v167 != v168)
        {
          unsigned int v169 = &v166[4 * (*(_DWORD *)(v3 + 124) - *(_DWORD *)(v3 + 120))];
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, *(void **)v196, v169, &v169[4 * (v167 - v168)], (v167 - v168));
        }
      }
      if (!*(unsigned char *)(v3 + 314))
      {
        int v171 = *(_DWORD *)(v3 + 136);
        int v170 = *(_DWORD *)(v3 + 140);
        if (v170 != v171)
        {
          unsigned int v172 = &v166[4 * (*(_DWORD *)(v3 + 124) - *(_DWORD *)(v3 + 120))
                     + 4 * (*(_DWORD *)(v3 + 132) - *(_DWORD *)(v3 + 128))];
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, *(void **)v196, v172, &v172[4 * (v170 - v171)], (v170 - v171));
        }
      }
      uint64_t v173 = *(unsigned int *)(v3 + 144);
      if (*(unsigned char *)(v3 + 208) && v173)
      {
        int v174 = &v166[4
                   * ((*(_DWORD *)(v3 + 124)
                     + *(_DWORD *)(v3 + 132)
                     + *(_DWORD *)(v3 + 140)
                     - (*(_DWORD *)(v3 + 120)
                      + *(_DWORD *)(v3 + 128)
                      + *(_DWORD *)(v3 + 136))
                     + 3) & 0xFFFFFFFC)];
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, *(void **)v196, v174, &v174[4 * v173], v173);
        LODWORD(v173) = *(_DWORD *)(v3 + 144);
      }
      if (*(_OWORD *)(v3 + 176) != 0 && v173)
      {
        if (*(unsigned char *)(v3 + 208)) {
          int v175 = v173;
        }
        else {
          int v175 = 0;
        }
        uint64_t v176 = &v166[4 * v175
                   + 4
                   * ((*(_DWORD *)(v3 + 124)
                     + *(_DWORD *)(v3 + 132)
                     + *(_DWORD *)(v3 + 140)
                     - (*(_DWORD *)(v3 + 120)
                      + *(_DWORD *)(v3 + 128)
                      + *(_DWORD *)(v3 + 136))
                     + 3) & 0xFFFFFFFC)];
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, *(void **)v196, v176, &v176[4 * v173], v173);
      }
      uint64_t v177 = *(unsigned int *)(v3 + 148);
      if (v177)
      {
        int v178 = *(_DWORD *)(v3 + 144);
        if (*(unsigned char *)(v3 + 208)) {
          int v179 = *(_DWORD *)(v3 + 144);
        }
        else {
          int v179 = 0;
        }
        if (*(_OWORD *)(v3 + 176) == 0) {
          int v178 = 0;
        }
        uint64_t v180 = &v166[4 * v179
                   + 4 * v178
                   + 4
                   * ((*(_DWORD *)(v3 + 124)
                     + *(_DWORD *)(v3 + 132)
                     + *(_DWORD *)(v3 + 140)
                     - (*(_DWORD *)(v3 + 120)
                      + *(_DWORD *)(v3 + 128)
                      + *(_DWORD *)(v3 + 136))
                     + 3) & 0xFFFFFFFC)];
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&m, *(void **)v196, v180, &v180[4 * v177], v177);
      }
      unsigned int v181 = *(void **)(v1 + 640);
      uint64_t v182 = (*(void *)(v1 + 648) - (void)v181) >> 2;
      unint64_t v183 = m;
      int v184 = *(_DWORD *)(v1 + 1004);
      *(void *)(v1 + 640) = m;
      uint64_t v185 = *(void *)v196;
      *(_OWORD *)uint64_t v191 = *(_OWORD *)v196;
      *(_DWORD *)(v1 + 1004) = v184 + ((v185 - v183) >> 2) - v182;
      if (v181) {
        operator delete(v181);
      }
    }
    uint64_t v2 = (std::mutex *)(v1 + 3608);
    if (*(unsigned char *)(v3 + 315))
    {
      uint64_t v186 = *(__int16 **)(v1 + 736);
      for (juint64_t j = *(__int16 **)(v1 + 744); v186 != jj; v186 += 2)
      {
        if (*v186 == -1)
        {
          *uint64_t v186 = 66;
          v186[1] = *(_DWORD *)(*v75 + 4 * (unsigned __int16)v186[1]);
        }
      }
      *(void *)(v1 + 672) = *(void *)(v1 + 664);
    }
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::finalizeGatherSizes(v1, v3);
    uint64_t v188 = *(void *)(v1 + 544);
    if (v188)
    {
      uint64_t v189 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v188);
      MEMORY[0x24566ED90](v189, 0x1030C40704B4075);
    }
    *(void *)(v1 + 544) = 0;
    uint64_t v190 = *(ProgramBindingsAndDMAList **)(v1 + 536);
    if (v190)
    {
      ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList(v190);
      MEMORY[0x24566ED90]();
    }
    *(void *)(v1 + 536) = 0;
  }

  std::mutex::unlock(v2);
}

void sub_242AB85FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

__n128 AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  int v3 = *(_DWORD *)(v1 + 1000);
  int v4 = *(_DWORD *)(v1 + 1032);
  uint64_t v5 = *(void *)(v1 + 1936);
  uint64_t v8 = (unsigned __int16)((v6 + 3) >> 2);
  unint64_t v9 = ((unsigned __int16)((v7 + 3) >> 2) + 1) & 0xFFE;
  *(void *)(v5 + 88) = *(void *)(v5 + 88) & 0xFFFFF00000000000 | (v8 << 16) & 0xFFFFF001FFFFFFFFLL | (((v9 >> 1) & 0x7FF) << 33) | v8;
  unsigned int v10 = (v3 + 3) >> 2;
  unsigned int v11 = (((v4 + 3) >> 2) + 1) & 0x7FFFFFFE;
  *(_DWORD *)(v5 + 248) = v10;
  *(_DWORD *)(v5 + 252) = v11;
  if (*(unsigned char *)(v5 + 174)) {
    AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v5 + 48), *(_DWORD *)(v5 + 240), *(void *)v5 + *(unsigned __int16 *)(v5 + 244));
  }
  uint64_t v12 = *(void *)(v1 + 2784);
  if (v12)
  {
    *(void *)(v12 + 88) = *(void *)(v12 + 88) & 0xFFFFF00000000000 | ((unint64_t)v8 << 16) | (v9 << 32) | v8;
    *(_DWORD *)(v12 + 248) = v10;
    *(_DWORD *)(v12 + 252) = v11;
    if (*(unsigned char *)(v12 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v12 + 48), *(_DWORD *)(v12 + 240), *(void *)v12 + *(unsigned __int16 *)(v12 + 244));
    }
    uint64_t v13 = *(void *)(v1 + 2784);
    unint64_t v14 = *(char **)(v1 + 2736);
    memcpy(v14, *(const void **)v13, *(void *)(v13 + 8) - *(void *)v13);
    if (*(unsigned char *)(v13 + 200)) {
      *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    unsigned int v15 = *(unsigned int **)(v13 + 176);
    for (uint64_t i = *(unsigned int **)(v13 + 184); v15 != i; v15 += 3)
    {
      v17.i64[0] = v24[v15[1]] + *v15;
      v17.i64[1] = (unint64_t)v17.i64[0] >> 5;
      *(int8x16_t *)&v14[v15[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[v15[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v18 = *(void *)(v1 + 2784);
    long long v19 = *(_OWORD *)(v18 + 80);
    long long v20 = *(_OWORD *)(v18 + 96);
    long long v21 = *(_OWORD *)(v18 + 64);
    *(_OWORD *)(v1 + 2792) = *(_OWORD *)(v18 + 48);
    *(_OWORD *)(v1 + 2840) = v20;
    *(_OWORD *)(v1 + 2824) = v19;
    *(_OWORD *)(v1 + 2808) = v21;
    long long v22 = *(_OWORD *)(v18 + 128);
    __n128 result = *(__n128 *)(v18 + 144);
    uint64_t v23 = *(void *)(v18 + 160);
    *(_OWORD *)(v1 + 2856) = *(_OWORD *)(v18 + 112);
    *(void *)(v1 + 2904) = v23;
    *(__n128 *)(v1 + 2888) = result;
    *(_OWORD *)(v1 + 2872) = v22;
  }
  return result;
}

void AGX::BackgroundObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::BackgroundObjectProgramVariant(unint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v530 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F853008;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  int v7 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  float32x4x2_t v510 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  unint64_t v509 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v8;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v8;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  uint64_t v513 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  uint64_t v521 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (a3[28])
  {
    unint64_t v9 = a3 + 98;
    if (a3[29]) {
      unint64_t v9 = a3 + 28;
    }
  }
  else
  {
    unint64_t v9 = a3 + 98;
  }
  unsigned int v10 = 0;
  if (*v9 && v9[1]) {
    unsigned int v10 = (int *)((char *)*v9 + **v9);
  }
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0)
  {
    uint64_t v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    if (!a3[58])
    {
LABEL_12:
      unint64_t v14 = a3 + 128;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (!a3[58]) {
      goto LABEL_12;
    }
  }
  if (a3[59]) {
    unint64_t v14 = a3 + 58;
  }
  else {
    unint64_t v14 = a3 + 128;
  }
LABEL_17:
  unsigned int v15 = 0;
  if (*v14 && v14[1]) {
    unsigned int v15 = (int *)((char *)*v14 + **v14);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 5u)
  {
    int8x16_t v17 = 0;
  }
  else
  {
    int8x16_t v17 = (int *)v16[2];
    if (v17) {
      int8x16_t v17 = (int *)((char *)v17 + (void)v15 + *(unsigned int *)((char *)v17 + (void)v15));
    }
  }
  v520 = v17;
  uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  unsigned int v19 = *v18;
  if (v19 < 0x25)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    uint64_t v20 = v18[18];
    if (v18[18]) {
      LOBYTE(v20) = *((unsigned char *)v520 + v20) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v20;
  long long v21 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v21 < 0x55u || (uint64_t v22 = v21[42]) == 0 || !*((unsigned char *)v13 + v22))
  {
LABEL_55:
    long long v33 = (unsigned __int16 *)((char *)v520 - *v520);
    if (*v33 < 7u)
    {
      LODWORD(v34) = 0;
    }
    else
    {
      uint64_t v34 = v33[3];
      if (v34) {
        LODWORD(v34) = *(int *)((char *)v520 + v34);
      }
    }
    uint64_t v507 = (void *)(a1 + 168);
    float32x4x2_t v508 = (void *)(a1 + 120);
    uint64_t v514 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v34;
    uint64_t v35 = (unsigned __int16 *)((char *)v520 - *v520);
    if (*v35 >= 0x13u && (uint64_t v36 = v35[9]) != 0) {
      int v37 = (char *)v520 + v36 + *(unsigned int *)((char *)v520 + v36) + 4;
    }
    else {
      int v37 = "";
    }
    v511 = (std::string *)(a1 + 576);
    uint64_t v512 = (unint64_t *)(a1 + 552);
    uint64_t v506 = (void **)(a1 + 968);
    unint64_t v515 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v513, v37);
    unsigned int v38 = (unsigned __int16 *)((char *)v520 - *v520);
    if (*v38 >= 9u && (uint64_t v39 = v38[4]) != 0) {
      size_t v40 = (char *)v520 + v39 + *(unsigned int *)((char *)v520 + v39) + 4;
    }
    else {
      size_t v40 = "";
    }
    MEMORY[0x24566EB20](v512, v40);
    unsigned int v41 = (unsigned __int16 *)((char *)v520 - *v520);
    if (*v41 < 0x29u)
    {
      LOBYTE(v42) = 0;
    }
    else
    {
      uint64_t v42 = v41[20];
      if (v42) {
        LOBYTE(v42) = *((unsigned char *)v520 + v42) != 0;
      }
    }
    *(unsigned char *)(a1 + 600) = v42;
    std::string::operator=(v511, &__str);
    int v43 = (unsigned __int16 *)((char *)v520 - *v520);
    v519 = (const void **)v5;
    if (*v43 < 5u || !v43[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_90:
      if (v5[43])
      {
        uint64_t v50 = v5 + 43;
        if (!v5[44]) {
          uint64_t v50 = v5 + 113;
        }
      }
      else
      {
        uint64_t v50 = v5 + 113;
      }
      uint64_t v523 = a4;
      unint64_t v524 = v7;
      if (!*v50 || !v50[1])
      {
LABEL_143:
        if (v5[68])
        {
          int v86 = v5 + 68;
          if (!v5[69]) {
            int v86 = v5 + 138;
          }
        }
        else
        {
          int v86 = v5 + 138;
        }
        uint64_t v88 = *v86;
        uint64_t v87 = v86[1];
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (v89
          || (int v90 = (int *)((char *)v88 + *v88), v91 = (unsigned __int16 *)((char *)v90 - *v90), *v91 < 5u)
          || (uint64_t v92 = v91[2]) == 0)
        {
          uint64_t v93 = 0;
        }
        else
        {
          uint64_t v93 = *(void *)((char *)v90 + v92);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(a1 + 1184) = (float)(v93
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        long long v94 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v94 < 5u)
        {
          LODWORD(v95) = 0;
        }
        else
        {
          uint64_t v95 = v94[2];
          if (v95) {
            LODWORD(v95) = *(int *)((char *)v13 + v95);
          }
        }
        *(_DWORD *)(a1 + 1176) = v95;
        long long v96 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v96 < 0x2Du)
        {
          LODWORD(v97) = 0;
        }
        else
        {
          uint64_t v97 = v96[22];
          if (v97) {
            LODWORD(v97) = *(int *)((char *)v13 + v97);
          }
        }
        *(_DWORD *)(a1 + 1180) = v97;
        long long v98 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v98 < 0x35u)
        {
          LODWORD(v99) = 0;
        }
        else
        {
          uint64_t v99 = v98[26];
          if (v99) {
            LODWORD(v99) = *(int *)((char *)v13 + v99);
          }
        }
        *(_DWORD *)(a1 + 1220) = v99;
        uint64_t v100 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v100 < 0x43u)
        {
          LODWORD(v101) = 0;
        }
        else
        {
          uint64_t v101 = v100[33];
          if (v101) {
            LODWORD(v101) = *(int *)((char *)v13 + v101);
          }
        }
        *(_DWORD *)(a1 + 1256) = v101;
        if (v5[38])
        {
          int v102 = v5 + 38;
          if (!v5[39]) {
            int v102 = v5 + 108;
          }
          int v103 = *v102;
          if (!*v102)
          {
LABEL_258:
            if (v5[53])
            {
              int v144 = v5[54];
              if (v144) {
                int v145 = v5[53];
              }
              else {
                int v145 = v5[123];
              }
              if (v144) {
                int v146 = v5 + 53;
              }
              else {
                int v146 = v5 + 123;
              }
            }
            else
            {
              int v146 = v5 + 123;
              int v145 = v5[123];
            }
            MEMORY[0x24566EB30](a1 + 1320, v145, v146[1]);
            std::string::push_back((std::string *)(a1 + 1320), 0);
            uint64_t v147 = *v13;
            BOOL v148 = (char *)v13 - v147;
            unsigned int v149 = *(unsigned __int16 *)((char *)v13 - v147);
            if (v149 < 0x39) {
              goto LABEL_284;
            }
            uint64_t v150 = -v147;
            uint64_t v151 = *((unsigned __int16 *)v148 + 28);
            if (v151)
            {
              int v152 = (int *)((char *)v13 + v151 + *(unsigned int *)((char *)v13 + v151));
              if (*v152)
              {
                *(unsigned char *)(a1 + 1064) = 1;
                int v153 = (_DWORD *)((char *)v152 + v152[1] + 4);
                int v154 = (unsigned __int16 *)((char *)v153 - *v153);
                if (*v154 >= 9u && (uint64_t v155 = v154[4]) != 0) {
                  int v156 = *(int *)((char *)v153 + v155);
                }
                else {
                  int v156 = 0;
                }
                *(_DWORD *)(a1 + 1264) = v156;
                *(unsigned char *)(a1 + 1268) = 1;
                uint64_t v157 = *v13;
                uint64_t v150 = -v157;
                unsigned int v149 = *(unsigned __int16 *)((char *)v13 - v157);
              }
            }
            if (v149 < 0x3B) {
              goto LABEL_284;
            }
            uint64_t v158 = (char *)v13 + v150;
            if (*((_WORD *)v158 + 29))
            {
              uint64_t v159 = (unsigned int *)((char *)v13
                                    + *((unsigned __int16 *)v158 + 29)
                                    + *(unsigned int *)((char *)v13 + *((unsigned __int16 *)v158 + 29)));
              uint64_t v160 = *v159;
              if (v160)
              {
                int v161 = v159 + 1;
                do
                {
                  unsigned int v163 = *v161++;
                  unsigned int v162 = v163;
                  if (!(v163 >> 20)) {
                    *(void *)(a1 + 1048 + 8 * (v162 > 0x3F)) |= 1 << v162;
                  }
                  --v160;
                }
                while (v160);
              }
            }
            if (v149 < 0x57)
            {
LABEL_284:
              LODWORD(v164) = 0;
            }
            else
            {
              uint64_t v164 = *((unsigned __int16 *)v158 + 43);
              if (*((_WORD *)v158 + 43)) {
                LODWORD(v164) = *(int *)((char *)v13 + v164);
              }
            }
            *(_DWORD *)(a1 + 400) = v164;
            uint64_t v165 = (unsigned __int16 *)((char *)v13 - *v13);
            if (*v165 >= 0x21u && (uint64_t v166 = v165[16]) != 0) {
              int v167 = *(int *)((char *)v13 + v166);
            }
            else {
              int v167 = 0;
            }
            int v168 = &unk_268D5A000;
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(a1 + 404) = getAdditionalSpillBufferBytes(void)::extra + v167;
            unsigned int v169 = (unsigned __int16 *)((char *)v13 - *v13);
            if (*v169 < 0x59u)
            {
              LODWORD(v170) = 0;
            }
            else
            {
              uint64_t v170 = v169[44];
              if (v170) {
                LODWORD(v170) = *(int *)((char *)v13 + v170);
              }
            }
            *(_DWORD *)(a1 + 432) = v170;
            int v171 = (unsigned __int16 *)((char *)v13 - *v13);
            if (*v171 < 0x51u)
            {
              LODWORD(v172) = 0;
            }
            else
            {
              uint64_t v172 = v171[40];
              if (v172) {
                LODWORD(v172) = *(int *)((char *)v13 + v172);
              }
            }
            *(_DWORD *)(a1 + 436) = v172;
            uint64_t v173 = (unsigned __int16 *)((char *)v13 - *v13);
            if (*v173 < 0x4Bu)
            {
              LODWORD(v174) = 0;
            }
            else
            {
              uint64_t v174 = v173[37];
              if (v174) {
                LODWORD(v174) = *(int *)((char *)v13 + v174);
              }
            }
            *(_DWORD *)(a1 + 444) = v174;
            int v175 = (unsigned __int16 *)((char *)v13 - *v13);
            unsigned int v176 = *v175;
            if (v176 >= 0x25)
            {
              if (v175[18] && *((unsigned char *)v13 + v175[18]))
              {
                if (v176 < 0x27)
                {
                  LOBYTE(v177) = 0;
                  BOOL v178 = 1;
                  goto LABEL_321;
                }
                LODWORD(v177) = v175[19];
                BOOL v178 = 1;
                if (!v175[19])
                {
LABEL_321:
                  *(unsigned char *)(a1 + 454) = v177;
                  unsigned int v181 = (unsigned __int16 *)((char *)v520 - *v520);
                  unsigned int v182 = *v181;
                  if (v182 < 0x21)
                  {
                    uint64_t v184 = 0;
                    LODWORD(v183) = 0;
                  }
                  else
                  {
                    uint64_t v183 = v181[16];
                    if (v181[16]) {
                      LODWORD(v183) = *(int *)((char *)v520 + v183);
                    }
                    if (v182 < 0x4D)
                    {
                      uint64_t v184 = 0;
                    }
                    else
                    {
                      uint64_t v184 = v181[38];
                      if (v181[38]) {
                        uint64_t v184 = *(unsigned int *)((char *)v520 + v184);
                      }
                      if (v182 >= 0x4F)
                      {
                        uint64_t v185 = v181[39];
                        if (v185) {
                          uint64_t v185 = *(void *)((char *)v520 + v185);
                        }
LABEL_333:
                        *(void *)(a1 + 496) = v183 | (unint64_t)(v184 << 32);
                        *(void *)(a1 + 504) = v185;
                        *(unsigned char *)(a1 + 458) = v178 | v177;
                        uint64_t v186 = *v13;
                        unsigned int v187 = (char *)v13 - v186;
                        unsigned int v188 = *(unsigned __int16 *)((char *)v13 - v186);
                        if (v188 < 0x37)
                        {
                          LOBYTE(v189) = 0;
                        }
                        else
                        {
                          uint64_t v189 = *((unsigned __int16 *)v187 + 27);
                          if (*((_WORD *)v187 + 27)) {
                            LOBYTE(v189) = *((unsigned char *)v13 + v189) != 0;
                          }
                        }
                        *(unsigned char *)(a1 + 453) = v189;
                        uint64_t v190 = (unsigned __int16 *)((char *)v520 - *v520);
                        unsigned int v191 = *v190;
                        if (v191 < 0x33)
                        {
                          LOBYTE(v192) = 0;
                        }
                        else
                        {
                          uint64_t v192 = v190[25];
                          if (v190[25]) {
                            LOBYTE(v192) = *((unsigned char *)v520 + v192) != 0;
                          }
                        }
                        uint64_t v193 = -v186;
                        *(unsigned char *)(a1 + 459) = v192;
                        if (v188 < 0x3F)
                        {
                          LOBYTE(v194) = 0;
                        }
                        else
                        {
                          uint64_t v194 = *((unsigned __int16 *)v187 + 31);
                          if (v194)
                          {
                            uint64_t v195 = (unsigned int *)((char *)v13 + v194 + *(unsigned int *)((char *)v13 + v194));
                            uint64_t v194 = *v195;
                            if (v194)
                            {
                              char v196 = v195 + 1;
                              while (1)
                              {
                                unsigned int v198 = *v196++;
                                char v197 = v198;
                                if (v198 < 0x36 && ((0x3F000000000777uLL >> v197) & 1) != 0) {
                                  break;
                                }
                                if (!--v194) {
                                  goto LABEL_350;
                                }
                              }
                              LOBYTE(v194) = 1;
                            }
                          }
                        }
LABEL_350:
                        *(unsigned char *)(a1 + 461) = v194;
                        if (v191 <= 0x14)
                        {
                          *(unsigned char *)(a1 + 455) = 0;
                          *(unsigned char *)(a1 + 1145) = 0;
                          *(unsigned char *)(a1 + 1147) = 0;
                          if (v188 < 0x21) {
                            goto LABEL_358;
                          }
                          goto LABEL_386;
                        }
                        uint64_t v199 = v190[10];
                        if (v190[10]) {
                          LOBYTE(v199) = *((unsigned char *)v520 + v199) != 0;
                        }
                        *(unsigned char *)(a1 + 455) = v199;
                        if (v191 < 0x25)
                        {
                          *(unsigned char *)(a1 + 1145) = 0;
                          if (v191 < 0x23) {
                            goto LABEL_384;
                          }
                        }
                        else
                        {
                          uint64_t v200 = v190[18];
                          if (v190[18]) {
                            LOBYTE(v200) = *((unsigned char *)v520 + v200) != 0;
                          }
                          *(unsigned char *)(a1 + 1145) = v200;
                        }
                        uint64_t v203 = v190[17];
                        if (v203)
                        {
                          *(unsigned char *)(a1 + 1147) = 1;
                          unsigned int v204 = (unsigned int *)((char *)v520 + v203);
                          uint64_t v205 = *v204;
                          uint64_t v207 = (unsigned int *)((char *)v204 + v205 + 4);
                          uint64_t v206 = *(unsigned int *)((char *)v204 + v205);
                          if (v206)
                          {
                            unsigned int v208 = &v207[v206];
                            while (1)
                            {
                              uint64_t v209 = (int *)((char *)v207 + *v207);
                              uint64_t v210 = (unsigned __int16 *)((char *)v209 - *v209);
                              unsigned int v211 = *v210;
                              if (v211 < 7)
                              {
                                int v212 = 0;
                                unsigned int v214 = 0;
                                if (v211 < 5) {
                                  goto LABEL_373;
                                }
                                uint64_t v213 = v210[2];
                                if (!v213) {
                                  goto LABEL_369;
                                }
                              }
                              else if (v210[3])
                              {
                                int v212 = *(int *)((char *)v209 + v210[3]);
                                uint64_t v213 = v210[2];
                                if (!v213) {
                                  goto LABEL_369;
                                }
                              }
                              else
                              {
                                int v212 = 0;
                                uint64_t v213 = v210[2];
                                if (!v213)
                                {
LABEL_369:
                                  unsigned int v214 = 0;
                                  goto LABEL_373;
                                }
                              }
                              unsigned int v214 = *(int *)((char *)v209 + v213);
LABEL_373:
                              unsigned int v215 = (uint64_t **)(a1 + 1160);
LABEL_374:
                              int v216 = *v215;
                              uint64_t v217 = v215;
                              if (*v215)
                              {
                                while (1)
                                {
                                  unsigned int v215 = (uint64_t **)v216;
                                  unsigned int v218 = *((_DWORD *)v216 + 7);
                                  if (v214 < v218) {
                                    goto LABEL_374;
                                  }
                                  if (v218 >= v214) {
                                    break;
                                  }
                                  int v216 = v215[1];
                                  if (!v216)
                                  {
                                    uint64_t v217 = v215 + 1;
                                    goto LABEL_379;
                                  }
                                }
                                int v219 = v215;
                              }
                              else
                              {
LABEL_379:
                                int v219 = operator new(0x28uLL);
                                v219[7] = v214;
                                v219[8] = 0;
                                *(void *)int v219 = 0;
                                *((void *)v219 + 1) = 0;
                                *((void *)v219 + 2) = v215;
                                unsigned __int8 *v217 = (uint64_t *)v219;
                                uint64_t v220 = **(void **)(a1 + 1152);
                                int v221 = (uint64_t *)v219;
                                if (v220)
                                {
                                  *(void *)(a1 + 1152) = v220;
                                  int v221 = *v217;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1160), v221);
                                ++*(void *)(a1 + 1168);
                              }
                              v219[8] = v212;
                              if (++v207 == v208)
                              {
                                uint64_t v239 = *v13;
                                uint64_t v193 = -v239;
                                int v168 = (_DWORD *)&unk_268D5A000;
                                if (*(unsigned __int16 *)((char *)v13 - v239) < 0x21u)
                                {
LABEL_358:
                                  int v201 = 0;
                                  uint64_t v202 = v523;
                                  goto LABEL_390;
                                }
LABEL_386:
                                uint64_t v202 = v523;
                                if (*(_WORD *)((char *)v13 + v193 + 32))
                                {
                                  int v201 = *(int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 + v193 + 32));
                                }
                                else
                                {
                                  int v201 = 0;
                                  {
LABEL_798:
                                    {
                                      v168[952] = 0;
                                    }
                                  }
                                }
LABEL_390:
                                int v222 = v168[952] + v201;
                                *(_DWORD *)(a1 + 396) = v222;
                                uint64_t v223 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*v223 < 0x43u)
                                {
                                  LODWORD(v224) = 0;
                                }
                                else
                                {
                                  uint64_t v224 = v223[33];
                                  if (v224) {
                                    LODWORD(v224) = *(int *)((char *)v13 + v224);
                                  }
                                }
                                *(_DWORD *)(a1 + 408) = v224;
                                uint64_t v225 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*v225 < 5u)
                                {
                                  LODWORD(v226) = 0;
                                }
                                else
                                {
                                  uint64_t v226 = v225[2];
                                  if (v226) {
                                    LODWORD(v226) = *(int *)((char *)v13 + v226);
                                  }
                                }
                                *(_DWORD *)(a1 + 392) = v226;
                                uint64_t v227 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*v227 < 0x51u)
                                {
                                  LODWORD(v228) = 0;
                                }
                                else
                                {
                                  uint64_t v228 = v227[40];
                                  if (v228) {
                                    LODWORD(v228) = *(int *)((char *)v13 + v228);
                                  }
                                }
                                *(_DWORD *)(a1 + 428) = v228;
                                uint64_t v229 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*v229 < 0x4Fu)
                                {
                                  LODWORD(v230) = 0;
                                }
                                else
                                {
                                  uint64_t v230 = v229[39];
                                  if (v230) {
                                    LODWORD(v230) = *(int *)((char *)v13 + v230);
                                  }
                                }
                                *(_DWORD *)(a1 + 440) = v230;
                                *(_DWORD *)(a1 + 448) = *(_DWORD *)(v202 + 468);
                                char v231 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*(int *)((char *)v13 + v231[6] + *(unsigned int *)((char *)v13 + v231[6])) | v222) {
                                  char v232 = 1;
                                }
                                else {
                                  char v232 = v178;
                                }
                                if (v232)
                                {
                                  LOBYTE(v233) = 1;
                                  uint64_t v234 = v519;
                                  goto LABEL_425;
                                }
                                unsigned int v235 = *v231;
                                uint64_t v234 = v519;
                                if (v235 < 0x21)
                                {
                                  int v236 = 0;
                                }
                                else if (v231[16])
                                {
                                  int v236 = *(int *)((char *)v13 + v231[16]);
                                  if (v235 >= 0x43)
                                  {
LABEL_736:
                                    if (v231[33])
                                    {
                                      int v237 = *(int *)((char *)v13 + v231[33]);
                                      goto LABEL_417;
                                    }
                                  }
                                }
                                else
                                {
                                  int v236 = 0;
                                  if (v235 >= 0x43) {
                                    goto LABEL_736;
                                  }
                                }
                                int v237 = 0;
                                {
LABEL_738:
                                  {
                                    v168[952] = 0;
                                  }
                                }
LABEL_417:
                                if (v237 + v236 + v168[952])
                                {
                                  LOBYTE(v233) = 1;
                                }
                                else
                                {
                                  char v238 = (unsigned __int16 *)((char *)v13 - *v13);
                                  if (*v238 < 0x5Fu)
                                  {
                                    LOBYTE(v233) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v233 = v238[47];
                                    if (v233) {
                                      LOBYTE(v233) = *((unsigned char *)v13 + v233) != 0;
                                    }
                                  }
                                }
LABEL_425:
                                *(unsigned char *)(a1 + 452) = v233;
                                int v240 = (unsigned __int16 *)((char *)v520 - *v520);
                                if (*v240 < 0x11u)
                                {
                                  LODWORD(v241) = 0;
                                }
                                else
                                {
                                  uint64_t v241 = v240[8];
                                  if (v241) {
                                    LODWORD(v241) = *(int *)((char *)v520 + v241);
                                  }
                                }
                                *(_DWORD *)(a1 + 960) = v241;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                uint64_t v242 = (_OWORD *)(a1 + 816);
                                uint64_t v243 = v234 + 3;
                                if (v234[3])
                                {
                                  if (v234[4]) {
                                    uint64_t v244 = v234 + 3;
                                  }
                                  else {
                                    uint64_t v244 = v234 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v244 = v234 + 73;
                                }
                                uint64_t v245 = a2 + 5184;
                                AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v244[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(a1 + 1016));
                                *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                long long v246 = *(_OWORD *)&__dst[16];
                                *uint64_t v242 = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 832) = v246;
                                *(_OWORD *)(a1 + 841) = *(_OWORD *)&__dst[25];
                                *(void *)(a1 + 608) = *(void *)(a1 + 816);
                                *(void *)(a1 + 640) = a2 + 5352;
                                long long v247 = *(_OWORD *)(a1 + 832);
                                *(_OWORD *)(a1 + 648) = *v242;
                                *(_OWORD *)(a1 + 664) = v247;
                                *(_OWORD *)(a1 + 673) = *(_OWORD *)(a1 + 841);
                                if (*v243)
                                {
                                  long long v248 = v234[4];
                                  if (v248) {
                                    unsigned int v249 = *v243;
                                  }
                                  else {
                                    unsigned int v249 = v234[73];
                                  }
                                  if (v248) {
                                    uint64_t v250 = v234 + 3;
                                  }
                                  else {
                                    uint64_t v250 = v234 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v250 = v234 + 73;
                                  unsigned int v249 = v234[73];
                                }
                                memcpy(*(void **)(a1 + 824), v249, v250[1]);
                                uint64_t v251 = *(void *)(a1 + 824);
                                uint64_t v252 = *(void *)(a1 + 832);
                                *(void *)(a1 + 616) = *(void *)(a1 + 608);
                                *(void *)(a1 + 624) = v251;
                                *(void *)(a1 + 632) = v252;
                                uint64_t v253 = v234 + 8;
                                if (v234[8])
                                {
                                  if (v234[9]) {
                                    long long v254 = v234 + 8;
                                  }
                                  else {
                                    long long v254 = v234 + 78;
                                  }
                                  uint64_t v255 = v254[1];
                                  if (!v255) {
                                    goto LABEL_459;
                                  }
                                }
                                else
                                {
                                  uint64_t v255 = (uint64_t)v234[79];
                                  if (!v255) {
                                    goto LABEL_459;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v245, v255, (void *)(a1 + 1024));
                                *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                long long v256 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 864) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 880) = v256;
                                *(_OWORD *)(a1 + 889) = *(_OWORD *)&__dst[25];
                                long long v257 = *(_OWORD *)(a1 + 880);
                                *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 864);
                                *(_OWORD *)(a1 + 712) = v257;
                                *(_OWORD *)(a1 + 721) = *(_OWORD *)(a1 + 889);
                                if (*v253)
                                {
                                  long long v258 = v234[9];
                                  if (v258) {
                                    uint64_t v259 = *v253;
                                  }
                                  else {
                                    uint64_t v259 = v234[78];
                                  }
                                  if (v258) {
                                    uint64_t v260 = v234 + 8;
                                  }
                                  else {
                                    uint64_t v260 = v234 + 78;
                                  }
                                }
                                else
                                {
                                  uint64_t v260 = v234 + 78;
                                  uint64_t v259 = v234[78];
                                }
                                memcpy(*(void **)(a1 + 872), v259, v260[1]);
LABEL_459:
                                int v261 = v234 + 13;
                                if (v234[13])
                                {
                                  if (v234[14]) {
                                    int v262 = v234 + 13;
                                  }
                                  else {
                                    int v262 = v234 + 83;
                                  }
                                  uint64_t v263 = v262[1];
                                  if (v263) {
                                    goto LABEL_464;
                                  }
LABEL_472:
                                  if (!*(unsigned char *)(a1 + 600)) {
                                    goto LABEL_476;
                                  }
LABEL_477:
                                  {
                                    {
                                      unint64_t v271 = a1 + 528;
                                      if (*(char *)(a1 + 551) < 0) {
                                        unint64_t v271 = *v513;
                                      }
                                      unint64_t v272 = a1 + 576;
                                      if (*(char *)(a1 + 599) < 0) {
                                        unint64_t v272 = v511->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v273 = a1 + 552;
                                      if (*(char *)(a1 + 575) < 0) {
                                        unint64_t v273 = *v512;
                                      }
                                      int v274 = *(_DWORD *)(a1 + 512);
                                      uint64_t v275 = *(void *)(a1 + 608);
                                      uint64_t v276 = *(void **)(a1 + 832);
                                      *(_DWORD *)std::string __dst = 136447490;
                                      *(void *)&__dst[4] = v271;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v272;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v273;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v274;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v275;
                                      LOWORD(v528[0]) = 2050;
                                      *(void **)((char *)v528 + 2) = v276;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v270, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  uint64_t v277 = *(void *)(a1 + 8);
                                  unint64_t v278 = a1 + 528;
                                  if (*(char *)(a1 + 551) < 0) {
                                    unint64_t v278 = *v513;
                                  }
                                  unint64_t v279 = a1 + 576;
                                  if (*(char *)(a1 + 599) < 0) {
                                    unint64_t v279 = v511->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v280 = a1 + 552;
                                  if (*(char *)(a1 + 575) < 0) {
                                    unint64_t v280 = *v512;
                                  }
                                  int v281 = *(_DWORD *)(a1 + 512);
                                  uint64_t v282 = *(void *)(a1 + 608);
                                  uint64_t v283 = *(void *)(a1 + 832);
                                  char v284 = *(unsigned char *)(a1 + 600);
                                  *(void *)std::string __dst = v278;
                                  *(void *)&__dst[8] = v279;
                                  *(void *)&__dst[16] = v280;
                                  *(_DWORD *)&__dst[24] = v281;
                                  *(void *)&__dst[32] = v282;
                                  *(void *)&__dst[40] = v283;
                                  LOBYTE(v528[0]) = v284;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v277, a1, (long long *)__dst);
                                }
                                else
                                {
                                  uint64_t v263 = (uint64_t)v234[84];
                                  if (!v263) {
                                    goto LABEL_472;
                                  }
LABEL_464:
                                  AGX::Heap<true>::allocateImpl(__dst, v245, v263, (void *)(a1 + 1032));
                                  *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                  long long v264 = *(_OWORD *)&__dst[16];
                                  *(_OWORD *)(a1 + 912) = *(_OWORD *)__dst;
                                  *(_OWORD *)(a1 + 928) = v264;
                                  *(_OWORD *)(a1 + 937) = *(_OWORD *)&__dst[25];
                                  long long v265 = *(_OWORD *)(a1 + 928);
                                  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a1 + 912);
                                  *(_OWORD *)(a1 + 760) = v265;
                                  *(_OWORD *)(a1 + 769) = *(_OWORD *)(a1 + 937);
                                  if (*v261)
                                  {
                                    uint64_t v266 = v234[14];
                                    if (v266) {
                                      int v267 = *v261;
                                    }
                                    else {
                                      int v267 = v234[83];
                                    }
                                    if (v266) {
                                      unint64_t v268 = v234 + 13;
                                    }
                                    else {
                                      unint64_t v268 = v234 + 83;
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v268 = v234 + 83;
                                    int v267 = v234[83];
                                  }
                                  memcpy(*(void **)(a1 + 920), v267, v268[1]);
                                  uint64_t v269 = *(void *)(a1 + 928);
                                  *(_OWORD *)(a1 + 792) = *(_OWORD *)(a1 + 912);
                                  *(void *)(a1 + 808) = v269;
                                  if (*(unsigned char *)(a1 + 600)) {
                                    goto LABEL_477;
                                  }
LABEL_476:
                                  if (*(unsigned char *)(*(void *)(a1 + 8) + 7761)) {
                                    goto LABEL_477;
                                  }
                                }
                                int v285 = *(_DWORD *)(v523 + 124);
                                int v286 = *(_DWORD *)(v523 + 132);
                                int v287 = *(_DWORD *)(v523 + 140);
                                if (*(unsigned char *)(v523 + 208)) {
                                  int v288 = *(_DWORD *)(v523 + 144);
                                }
                                else {
                                  int v288 = 0;
                                }
                                if (*(_OWORD *)(v523 + 176) == 0) {
                                  int v289 = 0;
                                }
                                else {
                                  int v289 = *(_DWORD *)(v523 + 144);
                                }
                                int v290 = *(_DWORD *)(v523 + 120) + *(_DWORD *)(v523 + 128) + *(_DWORD *)(v523 + 136);
                                unint64_t v291 = v288
                                     + *(_DWORD *)(v523 + 148)
                                     + v289
                                     + *(_DWORD *)(v523 + 152)
                                     + ((v285 + v286 + v287 - v290 + 3) & 0xFFFFFFFC);
                                uint64_t v292 = *(void *)(a1 + 48);
                                unint64_t v293 = (*(void *)(a1 + 56) - v292) >> 2;
                                if (v291 <= v293)
                                {
                                  if (v291 < v293) {
                                    *(void *)(a1 + 56) = v292 + 4 * v291;
                                  }
                                }
                                else
                                {
                                  std::vector<unsigned int>::__append(v524, v291 - v293);
                                  int v285 = *(_DWORD *)(v523 + 124);
                                  int v286 = *(_DWORD *)(v523 + 132);
                                  int v287 = *(_DWORD *)(v523 + 140);
                                  int v290 = *(_DWORD *)(v523 + 120) + *(_DWORD *)(v523 + 128) + *(_DWORD *)(v523 + 136);
                                }
                                *(_DWORD *)(a1 + 412) = v285 + v286 + v287 - v290;
                                uint64_t v294 = *v13;
                                uint64_t v295 = *(unsigned __int16 *)((char *)v13 - v294 + 16);
                                uint64_t v296 = *(unsigned int *)((char *)v13 + v295);
                                uint64_t v297 = *(unsigned int *)((char *)v13 + v295 + v296);
                                if (v297)
                                {
                                  uint64_t v298 = 4 * v297;
                                  uint64_t v299 = v295 + v296;
                                  while (1)
                                  {
                                    uint64_t v301 = *(unsigned int *)((char *)v13 + v299 + 4);
                                    int v302 = (char *)v13 + v299 + v301;
                                    uint64_t v303 = v301 - *((int *)v302 + 1);
                                    uint64_t v304 = (char *)v13 + v299 + v303;
                                    unsigned int v305 = *((unsigned __int16 *)v304 + 2);
                                    if (v305 < 7) {
                                      break;
                                    }
                                    uint64_t v306 = *((unsigned __int16 *)v304 + 5);
                                    if (!v306 || (*(int *)((char *)v13 + v299 + v301 + v306 + 4) & 0x80000000) == 0)
                                    {
                                      if (v305 <= 8)
                                      {
                                        unsigned int v310 = -*(_DWORD *)(v523 + 120);
                                      }
                                      else
                                      {
                                        if (*(_WORD *)((char *)v13 + v299 + v303 + 12)) {
                                          int v307 = *(int *)((char *)v13
                                        }
                                                        + v299
                                                        + v301
                                                        + *(unsigned __int16 *)((char *)v13 + v299 + v303 + 12)
                                                        + 4);
                                        else {
                                          int v307 = 0;
                                        }
                                        unsigned int v310 = 4 * v307 - *(_DWORD *)(v523 + 120);
                                      }
LABEL_520:
                                      uint64_t v311 = *(unsigned __int16 *)((char *)v13 + v299 + v303 + 8);
                                      if (*(_WORD *)((char *)v13 + v299 + v303 + 8)) {
                                        LODWORD(v311) = *((char *)v13 + v299 + v301 + v311 + 4);
                                      }
                                      if (v305 >= 7
                                        && (uint64_t v312 = *(unsigned __int16 *)((char *)v13 + v299 + v303 + 10)) != 0)
                                      {
                                        int v308 = *(int *)((char *)v13 + v299 + v301 + v312 + 4);
                                        if (v311 != 6)
                                        {
                                          int v309 = 0;
                                          goto LABEL_529;
                                        }
LABEL_527:
                                        int v309 = 128;
                                      }
                                      else
                                      {
                                        int v308 = 0;
                                        if (v311 == 6) {
                                          goto LABEL_527;
                                        }
                                        int v309 = 0;
                                      }
LABEL_529:
                                      unsigned int v313 = (v308 & 0xFFFFF) + v309;
                                      if (v313 <= 8) {
                                        int v314 = 4 * v313;
                                      }
                                      else {
                                        int v314 = 0;
                                      }
                                      std::vector<unsigned int>::pointer begin = v524->__begin_;
                                      v524->__begin_[v310] = v314;
                                      begin[v310 + 1] = v314 | 1;
                                      begin[v310 + 2] = v314 | 2;
                                      begin[v310 + 3] = v314 | 3;
                                      uint64_t v316 = v301 - *((int *)v302 + 1);
                                      int32x4_t v317 = (char *)v13 + v299 + v316;
                                      if (*((unsigned __int16 *)v317 + 2) >= 0xBu)
                                      {
                                        uint64_t v318 = *((unsigned __int16 *)v317 + 7);
                                        if (v318)
                                        {
                                          if (*((unsigned char *)v13 + v299 + v301 + v318 + 4))
                                          {
                                            uint64_t v319 = *(unsigned __int16 *)((char *)v13 + v299 + v316 + 10);
                                            if (v319) {
                                              int v300 = *(int *)((char *)v13 + v299 + v301 + v319 + 4);
                                            }
                                            else {
                                              int v300 = 0;
                                            }
                                            *(void *)(a1 + 480 + 8 * ((v300 & 0xFFFC0) != 0)) |= 1 << v300;
                                          }
                                        }
                                      }
                                    }
                                    v299 += 4;
                                    v298 -= 4;
                                    if (!v298)
                                    {
                                      uint64_t v294 = *v13;
                                      goto LABEL_538;
                                    }
                                  }
                                  int v308 = 0;
                                  int v309 = 0;
                                  unsigned int v310 = -*(_DWORD *)(v523 + 120);
                                  if (v305 >= 5) {
                                    goto LABEL_520;
                                  }
                                  goto LABEL_529;
                                }
LABEL_538:
                                uint64_t v320 = -v294;
                                int v321 = (char *)v13 + v320;
                                if (*(unsigned char *)(a1 + 454))
                                {
                                  uint64_t v322 = *((unsigned __int16 *)v321 + 12);
                                  uint64_t v323 = *(unsigned int *)((char *)v13 + v322);
                                  uint64_t v324 = (unsigned int *)((char *)v13 + v322 + v323);
                                  uint64_t v325 = *v324;
                                  if (v325)
                                  {
                                    unint64_t v326 = 0;
                                    uint64_t v327 = 4 * v325;
                                    int v328 = (char *)v13 + v322 + v323;
                                    while (1)
                                    {
                                      uint64_t v329 = v324[v326 / 4 + 1];
                                      uint64_t v330 = v329 - *(int *)((char *)&v324[v326 / 4 + 1] + v329);
                                      unsigned int v331 = &v328[v326 + v330];
                                      unsigned int v332 = *((unsigned __int16 *)v331 + 2);
                                      if (v332 >= 5)
                                      {
                                        uint64_t v333 = *((unsigned __int16 *)v331 + 4);
                                        if (v333)
                                        {
                                          if (v328[v326 + 4 + v329 + v333] == 93)
                                          {
                                            if (v332 < 7) {
                                              break;
                                            }
                                            uint64_t v334 = *(unsigned __int16 *)&v328[v326 + 10 + v330];
                                            if (!v334) {
                                              break;
                                            }
                                            int v335 = *(_DWORD *)&v328[v326 + 4 + v329 + v334];
                                            if ((v335 & 0x80000000) == 0 && (v335 & 0xFFF00000) != 0x400000) {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                      v326 += 4;
                                      if (v327 == v326) {
                                        goto LABEL_550;
                                      }
                                    }
                                    *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), *(int8x16_t *)(a1 + 496));
                                  }
                                }
LABEL_550:
                                uint64_t v336 = *((unsigned __int16 *)v321 + 10);
                                uint64_t v337 = *(unsigned int *)((char *)v13 + v336);
                                uint64_t v338 = *(unsigned int *)((char *)v13 + v336 + v337);
                                if (!v338) {
                                  goto LABEL_572;
                                }
                                uint64_t v339 = 4 * v338;
                                uint64_t v340 = v336 + v337;
                                while (2)
                                {
                                  uint64_t v341 = *(unsigned int *)((char *)v13 + v340 + 4);
                                  uint64_t v342 = v341 - *(int *)((char *)v13 + v340 + v341 + 4);
                                  int v343 = (char *)v13 + v340 + v342;
                                  unsigned int v344 = *((unsigned __int16 *)v343 + 2);
                                  if (v344 < 7) {
                                    goto LABEL_559;
                                  }
                                  uint64_t v345 = *((unsigned __int16 *)v343 + 5);
                                  if (v345 && *(int *)((char *)v13 + v340 + v341 + v345 + 4) < 0) {
                                    goto LABEL_552;
                                  }
                                  if (v344 < 9 || !*(_WORD *)((char *)v13 + v340 + v342 + 12))
                                  {
LABEL_559:
                                    int v346 = 0;
                                    goto LABEL_560;
                                  }
                                  int v346 = *(int *)((char *)v13
                                                + v340
                                                + v341
                                                + *(unsigned __int16 *)((char *)v13 + v340 + v342 + 12)
                                                + 4);
LABEL_560:
                                  int v347 = *(unsigned __int8 *)(a1 + 1144);
                                  if (*(unsigned char *)(a1 + 1144)) {
                                    int v348 = 3;
                                  }
                                  else {
                                    int v348 = 1;
                                  }
                                  if (v344 < 7)
                                  {
                                    int v351 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v349 = *(unsigned __int16 *)((char *)v13 + v340 + v342 + 10);
                                    if (v349) {
                                      int v350 = *(int *)((char *)v13 + v340 + v341 + v349 + 4);
                                    }
                                    else {
                                      int v350 = 0;
                                    }
                                    int v351 = v350 & 0xFFFFF;
                                  }
                                  unsigned int v352 = *(_DWORD *)(v523 + 124)
                                       + v348 * v346
                                       - (*(_DWORD *)(v523 + 120)
                                        + *(_DWORD *)(v523 + 128));
                                  int v353 = v351 + 96;
                                  std::vector<unsigned int>::pointer v354 = v524->__begin_;
                                  v524->__begin_[v352] = v353;
                                  if (v347)
                                  {
                                    v354[v352 + 1] = -1;
                                    v354[v352 + 2] = 0;
                                  }
LABEL_552:
                                  v340 += 4;
                                  v339 -= 4;
                                  if (v339) {
                                    continue;
                                  }
                                  break;
                                }
                                uint64_t v320 = -(uint64_t)*v13;
LABEL_572:
                                unint64_t v517 = a1 + 464;
                                unsigned __int32 v355 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 + v320 + 12));
                                uint64_t v356 = *v355;
                                int v358 = (unsigned int *)((char *)v355 + v356 + 4);
                                uint64_t v357 = *(unsigned int *)((char *)v355 + v356);
                                if (v357)
                                {
                                  int v359 = &v358[v357];
                                  while (1)
                                  {
                                    uint64_t v360 = (int *)((char *)v358 + *v358);
                                    uint64_t v361 = (unsigned __int16 *)((char *)v360 - *v360);
                                    unsigned int v362 = *v361;
                                    if (v362 < 7)
                                    {
                                      LODWORD(v363) = 0;
                                      goto LABEL_584;
                                    }
                                    if (!v361[3] || (*(int *)((char *)v360 + v361[3]) & 0x80000000) == 0) {
                                      break;
                                    }
LABEL_576:
                                    if (++v358 == v359) {
                                      goto LABEL_613;
                                    }
                                  }
                                  if (v362 < 9)
                                  {
                                    LODWORD(v363) = 0;
                                    goto LABEL_585;
                                  }
                                  uint64_t v363 = v361[4];
                                  if (v361[4])
                                  {
                                    LODWORD(v363) = *(int *)((char *)v360 + v363);
                                    goto LABEL_585;
                                  }
LABEL_584:
                                  if (v362 >= 7)
                                  {
LABEL_585:
                                    uint64_t v364 = v361[3];
                                    if (v364)
                                    {
                                      int v365 = *(int *)((char *)v360 + v364);
                                      goto LABEL_589;
                                    }
                                  }
                                  int v365 = 0;
LABEL_589:
                                  unsigned int v366 = ((v363 >> 1) & 0x1FFFFFFF)
                                       + *(_DWORD *)(v523 + 124)
                                       + *(_DWORD *)(v523 + 132)
                                       - (*(_DWORD *)(v523 + 120)
                                        + *(_DWORD *)(v523 + 128)
                                        + *(_DWORD *)(v523 + 136));
                                  unsigned int v367 = v365 & 0xFFFFF;
                                  if ((v365 & 0xFFFFF) == 0x31) {
                                    int v368 = 99;
                                  }
                                  else {
                                    int v368 = 100;
                                  }
                                  v524->__begin_[v366] = v368;
                                  int v369 = (unsigned __int16 *)((char *)v360 - *v360);
                                  if (*v369 >= 0xBu)
                                  {
                                    uint64_t v370 = v369[5];
                                    if (v370)
                                    {
                                      if (*((unsigned char *)v360 + v370)) {
                                        *(void *)(v517 + 8 * (v367 > 0x3F)) |= 1 << v365;
                                      }
                                    }
                                  }
                                  if (*(unsigned char *)(a1 + 1147))
                                  {
                                    long long v371 = *v521;
                                    if (!*v521) {
LABEL_788:
                                    }
                                      abort();
                                    unsigned int v372 = (2 * v366) | 1;
                                    while (1)
                                    {
                                      while (1)
                                      {
                                        unsigned int v373 = *((_DWORD *)v371 + 7);
                                        if (v367 >= v373) {
                                          break;
                                        }
                                        long long v371 = (uint64_t *)*v371;
                                        if (!v371) {
                                          goto LABEL_788;
                                        }
                                      }
                                      if (v373 >= v367) {
                                        break;
                                      }
                                      long long v371 = (uint64_t *)v371[1];
                                      if (!v371) {
                                        goto LABEL_788;
                                      }
                                    }
                                    int v374 = *((_DWORD *)v371 + 8);
                                    int v375 = (uint64_t **)(a1 + 272);
LABEL_605:
                                    unsigned int v376 = *v375;
                                    unsigned int v377 = v375;
                                    if (*v375)
                                    {
                                      while (1)
                                      {
                                        int v375 = (uint64_t **)v376;
                                        unsigned int v378 = *((_DWORD *)v376 + 7);
                                        if (v372 < v378) {
                                          goto LABEL_605;
                                        }
                                        if (v378 >= v372) {
                                          break;
                                        }
                                        unsigned int v376 = v375[1];
                                        if (!v376)
                                        {
                                          unsigned int v377 = v375 + 1;
                                          goto LABEL_610;
                                        }
                                      }
                                      int v379 = v375;
                                    }
                                    else
                                    {
LABEL_610:
                                      int v379 = operator new(0x28uLL);
                                      v379[7] = v372;
                                      v379[8] = 0;
                                      *(void *)int v379 = 0;
                                      *((void *)v379 + 1) = 0;
                                      *((void *)v379 + 2) = v375;
                                      *unsigned int v377 = (uint64_t *)v379;
                                      uint64_t v380 = **(void **)(a1 + 264);
                                      uint64_t v381 = (uint64_t *)v379;
                                      if (v380)
                                      {
                                        *(void *)(a1 + 264) = v380;
                                        uint64_t v381 = *v377;
                                      }
                                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v381);
                                      ++*(void *)(a1 + 280);
                                    }
                                    v379[8] = v374;
                                  }
                                  goto LABEL_576;
                                }
LABEL_613:
                                unint64_t v382 = *(void *)(v523 + 160);
                                unint64_t v383 = *(void *)(v523 + 168);
                                if (*(_OWORD *)(v523 + 160) != 0)
                                {
                                  int v384 = *(unsigned __int8 *)(v523 + 208);
                                  int v385 = *(_DWORD *)(v523 + 144);
                                  if (!*(unsigned char *)(v523 + 208)) {
                                    goto LABEL_626;
                                  }
                                  if (v385)
                                  {
                                    unsigned int v386 = (*(_DWORD *)(v523 + 124)
                                          + *(_DWORD *)(v523 + 132)
                                          + *(_DWORD *)(v523 + 140)
                                          - (*(_DWORD *)(v523 + 120)
                                           + *(_DWORD *)(v523 + 128)
                                           + *(_DWORD *)(v523 + 136))
                                          + 3) & 0xFFFFFFFC;
                                    *(void *)std::string __dst = *(void *)(v523 + 160);
                                    v525.n128_u64[0] = v383;
                                    for (unint64_t i = v382; ; unint64_t i = *(void *)__dst)
                                    {
                                      if (i)
                                      {
                                        unsigned int v388 = __clz(__rbit64(i));
                                        int v389 = (__n128 *)__dst;
                                        unsigned int v390 = v388;
                                      }
                                      else
                                      {
                                        unint64_t i = v525.n128_u64[0];
                                        if (!v525.n128_u64[0])
                                        {
                                          int v385 = *(_DWORD *)(v523 + 144);
                                          int v384 = v385;
                                          goto LABEL_626;
                                        }
                                        unsigned int v388 = __clz(__rbit64(v525.n128_u64[0]));
                                        unsigned int v390 = v388 | 0x40;
                                        int v389 = &v525;
                                      }
                                      v389->n128_u64[0] = i & ~(1 << v388);
                                      int v391 = 4 * v390;
                                      if (v390 > 8) {
                                        int v391 = 0;
                                      }
                                      std::vector<unsigned int>::pointer v392 = v524->__begin_;
                                      v524->__begin_[v386] = v391;
                                      v392[v386 + 1] = v391 | 1;
                                      v392[v386 + 2] = v391 | 2;
                                      v392[v386 + 3] = v391 | 3;
                                      v386 += 4;
                                    }
                                  }
                                  int v384 = 0;
LABEL_626:
                                  int8x16_t v393 = *(int8x16_t *)(v523 + 176);
                                  if (*(_OWORD *)&v393 != 0 && v385 != 0)
                                  {
                                    int v462 = ((*(_DWORD *)(v523 + 140)
                                           + *(_DWORD *)(v523 + 132)
                                           - (*(_DWORD *)(v523 + 136)
                                            + *(_DWORD *)(v523 + 128)
                                            + *(_DWORD *)(v523 + 120))
                                           + *(_DWORD *)(v523 + 124)
                                           + 3) & 0xFFFFFFFC)
                                         + v384;
                                    *(void *)std::string __dst = v382;
                                    v525.n128_u64[0] = v383;
                                    while (1)
                                    {
                                      if (v382)
                                      {
                                        long long v463 = (__n128 *)__dst;
                                      }
                                      else
                                      {
                                        unint64_t v382 = v525.n128_u64[0];
                                        if (!v525.n128_u64[0]) {
                                          break;
                                        }
                                        long long v463 = &v525;
                                      }
                                      v463->n128_u64[0] = v382 & (v382 - 1);
                                      std::vector<unsigned int>::pointer v464 = v524->__begin_;
                                      v524->__begin_[v462] = 0;
                                      v464[v462 + 1] = 1;
                                      v464[v462 + 2] = 2;
                                      v464[v462 + 3] = 3;
                                      v462 += 4;
                                      unint64_t v382 = *(void *)__dst;
                                    }
                                  }
                                  *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), v393);
                                }
                                if (*(_DWORD *)(v523 + 148))
                                {
                                  int v395 = *(_DWORD *)(v523 + 144);
                                  if (*(unsigned char *)(v523 + 208)) {
                                    int v396 = *(_DWORD *)(v523 + 144);
                                  }
                                  else {
                                    int v396 = 0;
                                  }
                                  if (*(_OWORD *)(v523 + 176) == 0) {
                                    int v395 = 0;
                                  }
                                  unsigned int v397 = v396
                                       + v395
                                       + ((*(_DWORD *)(v523 + 124)
                                         + *(_DWORD *)(v523 + 132)
                                         + *(_DWORD *)(v523 + 140)
                                         - (*(_DWORD *)(v523 + 120)
                                          + *(_DWORD *)(v523 + 128)
                                          + *(_DWORD *)(v523 + 136))
                                         + 3) & 0xFFFFFFFC);
                                  unint64_t v399 = *(void *)(v523 + 192);
                                  unint64_t v398 = *(void *)(v523 + 200);
                                  *(void *)std::string __dst = v399;
                                  v525.n128_u64[0] = v398;
                                  while (1)
                                  {
                                    if (v399)
                                    {
                                      int v400 = __clz(__rbit64(v399));
                                      long long v401 = (__n128 *)__dst;
                                      int v402 = v400;
                                    }
                                    else
                                    {
                                      unint64_t v399 = v525.n128_u64[0];
                                      if (!v525.n128_u64[0]) {
                                        break;
                                      }
                                      int v400 = __clz(__rbit64(v525.n128_u64[0]));
                                      int v402 = v400 | 0x40;
                                      long long v401 = &v525;
                                    }
                                    v401->n128_u64[0] = v399 & ~(1 << v400);
                                    uint64_t v403 = *(void *)(a1 + 48);
                                    *(_DWORD *)(v403 + 4 * v397) = v402 + 96;
                                    if (*(unsigned char *)(a1 + 1144))
                                    {
                                      *(_DWORD *)(v403 + 4 * (v397 + 1)) = -1;
                                      *(_DWORD *)(v403 + 4 * (v397 + 2)) = 0;
                                    }
                                    v397 += 4;
                                    unint64_t v399 = *(void *)__dst;
                                  }
                                }
                                int v404 = *v13;
                                if (*(unsigned char *)(v523 + 467))
                                {
                                  uint64_t v405 = (unsigned __int16 *)((char *)v13 - v404);
                                  if (*v405 < 0x67u)
                                  {
                                    unint64_t v406 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v406 = v405[51];
                                    if (v406) {
                                      unint64_t v406 = *(void *)((char *)v13 + v406);
                                    }
                                  }
                                  int v407 = 128 - 2 * __clz(v406);
                                  if (*(_DWORD *)(a1 + 208) > v407) {
                                    int v407 = *(_DWORD *)(a1 + 208);
                                  }
                                  *(_DWORD *)(a1 + 208) = v407;
                                  long long v408 = (unsigned __int16 *)((char *)v13 - *v13);
                                  if (*v408 < 0x17u)
                                  {
                                    LODWORD(v409) = 0;
                                  }
                                  else
                                  {
                                    unint64_t v409 = v408[11];
                                    if (v409) {
                                      unint64_t v409 = ((unint64_t)*(unsigned int *)((char *)v13 + v409) + 3) >> 2;
                                    }
                                  }
                                  *(_DWORD *)(a1 + 200) = v409;
                                  *(_DWORD *)(a1 + 204) = 200;
                                  int v404 = *v13;
                                }
                                unint64_t v410 = (unsigned __int16 *)((char *)v13 - v404);
                                if (*v410 >= 0x17u && (uint64_t v411 = v410[11]) != 0)
                                {
                                  unint64_t v412 = ((unint64_t)*(unsigned int *)((char *)v13 + v411) + 3) >> 2;
                                  uint64_t v413 = (void *)(a1 + 80);
                                  uint64_t v414 = *(void *)(a1 + 72);
                                  unint64_t v415 = (*(void *)(a1 + 80) - v414) >> 2;
                                  if (v412 > v415)
                                  {
                                    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 72), v412 - v415);
                                    goto LABEL_665;
                                  }
                                }
                                else
                                {
                                  unint64_t v412 = 0;
                                  uint64_t v413 = (void *)(a1 + 80);
                                  uint64_t v414 = *(void *)(a1 + 72);
                                  unint64_t v415 = (*(void *)(a1 + 80) - v414) >> 2;
                                }
                                if (v415 > v412) {
                                  void *v413 = v414 + 4 * v412;
                                }
LABEL_665:
                                if (v510 != (void *)(v523 + 216)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v510, *(char **)(v523 + 216), *(char **)(v523 + 224), (uint64_t)(*(void *)(v523 + 224) - *(void *)(v523 + 216)) >> 2);
                                }
                                if (v509 != (void *)(v523 + 240)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v509, *(char **)(v523 + 240), *(char **)(v523 + 248), (uint64_t)(*(void *)(v523 + 248) - *(void *)(v523 + 240)) >> 2);
                                }
                                if (v508 != (void *)(v523 + 320)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v508, *(char **)(v523 + 320), *(char **)(v523 + 328), (uint64_t)(*(void *)(v523 + 328) - *(void *)(v523 + 320)) >> 1);
                                }
                                if (v507 != (void *)(v523 + 368)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v507, *(char **)(v523 + 368), *(char **)(v523 + 376), (uint64_t)(*(void *)(v523 + 376) - *(void *)(v523 + 368)) >> 1);
                                }
                                *(unsigned char *)(a1 + 192) = *(unsigned char *)(v523 + 416);
                                *(unsigned char *)(a1 + 456) = *(_OWORD *)(v523 + 160) != 0;
                                *(unsigned char *)(a1 + 457) = *(void *)(v523 + 148) != 0;
                                uint64_t v416 = *(unsigned __int16 *)((char *)v13 - *v13 + 24);
                                uint64_t v417 = *(unsigned int *)((char *)v13 + v416);
                                unint64_t v418 = (unsigned int *)((char *)v13 + v416 + v417);
                                uint64_t v419 = *v418;
                                if (v419)
                                {
                                  unint64_t v420 = 0;
                                  uint64_t v421 = 4 * v419;
                                  int v422 = (char *)v13 + v416 + v417;
                                  do
                                  {
                                    uint64_t v423 = v418[v420 / 4 + 1];
                                    uint64_t v424 = v423 - *(int *)((char *)&v418[v420 / 4 + 1] + v423);
                                    unint64_t v425 = &v422[v420 + v424];
                                    unsigned int v426 = *((unsigned __int16 *)v425 + 2);
                                    if (v426 >= 5)
                                    {
                                      uint64_t v427 = *((unsigned __int16 *)v425 + 4);
                                      if (v427)
                                      {
                                        if (v426 >= 7 && v422[v420 + 4 + v423 + v427] == 139)
                                        {
                                          if (*(_WORD *)&v422[v420 + 10 + v424])
                                          {
                                            int v428 = *(_DWORD *)&v422[v420
                                                                  + 4
                                                                  + v423
                                                                  + *(unsigned __int16 *)&v422[v420 + 10 + v424]];
                                            if (v426 >= 0xB) {
                                              goto LABEL_684;
                                            }
                                          }
                                          else
                                          {
                                            int v428 = 0;
                                            if (v426 >= 0xB)
                                            {
LABEL_684:
                                              uint64_t v429 = *(unsigned __int16 *)&v422[v420 + 14 + v424];
                                              if (v429 && v422[v420 + 4 + v423 + v429]) {
                                                *(void *)(v517 + 8 * ((v428 & 0xFFFC0) != 0)) |= 1 << v428;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    v420 += 4;
                                  }
                                  while (v421 != v420);
                                }
                                unint64_t v430 = v520;
                                uint64_t v431 = *v520;
                                uint64_t v432 = -v431;
                                unint64_t v433 = (char *)v520 - v431;
                                unsigned int v434 = *(unsigned __int16 *)((char *)v520 - v431);
                                if (v434 >= 0xD)
                                {
                                  if (!*((_WORD *)v433 + 6)) {
                                    goto LABEL_730;
                                  }
                                  long long v435 = (int *)((char *)v520
                                               + *((unsigned __int16 *)v433 + 6)
                                               + *(unsigned int *)((char *)v520 + *((unsigned __int16 *)v433 + 6)));
                                  unint64_t v436 = *v435;
                                  uint64_t v437 = *(unsigned char **)(a1 + 1072);
                                  if (v436 > (uint64_t)(*(void *)(a1 + 1088) - (void)v437) >> 4)
                                  {
                                    int v438 = *(unsigned char **)(a1 + 1080);
                                    uint64_t v439 = (char *)operator new(16 * v436);
                                    uint64_t v440 = &v439[(v438 - v437) & 0xFFFFFFFFFFFFFFF0];
                                    unint64_t v441 = v440;
                                    if (v438 != v437)
                                    {
                                      uint64_t v442 = &v439[(v438 - v437) & 0xFFFFFFFFFFFFFFF0];
                                      do
                                      {
                                        unint64_t v441 = v442 - 16;
                                        *((_OWORD *)v442 - 1) = *((_OWORD *)v438 - 1);
                                        v438 -= 16;
                                        v442 -= 16;
                                      }
                                      while (v438 != v437);
                                    }
                                    *(void *)(a1 + 1072) = v441;
                                    *(void *)(a1 + 1080) = v440;
                                    *(void *)(a1 + 1088) = &v439[16 * v436];
                                    if (v437) {
                                      operator delete(v437);
                                    }
                                  }
                                  int v443 = 0;
                                  uint64_t v444 = *v520;
                                  unsigned int v445 = *(unsigned __int16 *)((char *)v520 - v444);
                                  if (v445 < 0x41)
                                  {
LABEL_698:
                                    if (!*v435) {
                                      goto LABEL_741;
                                    }
                                  }
                                  else
                                  {
                                    if (*(_WORD *)((char *)v520 - v444 + 64))
                                    {
                                      uint64_t v446 = (unsigned int *)((char *)v520
                                                            + *(unsigned __int16 *)((char *)v520 - v444 + 64));
                                      int v443 = (unsigned int *)((char *)v446 + *v446);
                                      goto LABEL_698;
                                    }
                                    int v443 = 0;
                                    if (!*v435)
                                    {
LABEL_741:
                                      uint64_t v432 = -v444;
                                      unint64_t v430 = v520;
                                      if (v445 < 0xB) {
                                        goto LABEL_785;
                                      }
LABEL_730:
                                      if (!*(_WORD *)((char *)v430 + v432 + 10)) {
                                        goto LABEL_785;
                                      }
                                      uint64_t v466 = (unsigned int *)((char *)v430
                                                            + *(unsigned __int16 *)((char *)v430 + v432 + 10));
                                      uint64_t v467 = (unsigned int *)((char *)v466 + *v466);
                                      std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v514, *v467);
                                      unint64_t v468 = *v467;
                                      uint64_t v469 = *(unsigned char **)(a1 + 1096);
                                      if (v468 > (uint64_t)(*(void *)(a1 + 1112) - (void)v469) >> 3)
                                      {
                                        uint64_t v470 = *(unsigned char **)(a1 + 1104);
                                        uint64_t v471 = (char *)operator new(8 * v468);
                                        uint64_t v472 = v470 - v469;
                                        unint64_t v473 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
                                        unint64_t v474 = v473;
                                        if (v470 != v469)
                                        {
                                          if ((unint64_t)(v472 - 8) < 0x58)
                                          {
                                            unint64_t v474 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
                                            goto LABEL_747;
                                          }
                                          unint64_t v474 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
                                          if ((unint64_t)(&v470[-(v472 & 0xFFFFFFFFFFFFFFF8)] - v471) < 0x20) {
                                            goto LABEL_805;
                                          }
                                          uint64_t v475 = v472 >> 3;
                                          unint64_t v476 = ((unint64_t)(v472 - 8) >> 3) + 1;
                                          unint64_t v477 = &v471[8 * v475 - 16];
                                          unsigned int v478 = (long long *)(v470 - 16);
                                          uint64_t v479 = v476 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v480 = *v478;
                                            *((_OWORD *)v477 - 1) = *(v478 - 1);
                                            *(_OWORD *)unint64_t v477 = v480;
                                            v477 -= 32;
                                            v478 -= 2;
                                            v479 -= 4;
                                          }
                                          while (v479);
                                          unint64_t v474 = &v473[-8 * (v476 & 0x3FFFFFFFFFFFFFFCLL)];
                                          v470 -= 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v476 != (v476 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_805:
                                            do
                                            {
LABEL_747:
                                              uint64_t v481 = *((void *)v470 - 1);
                                              v470 -= 8;
                                              *((void *)v474 - 1) = v481;
                                              v474 -= 8;
                                            }
                                            while (v470 != v469);
                                          }
                                        }
                                        *(void *)(a1 + 1096) = v474;
                                        *(void *)(a1 + 1104) = v473;
                                        *(void *)(a1 + 1112) = &v471[8 * v468];
                                        if (v469) {
                                          operator delete(v469);
                                        }
                                      }
                                      if (*v467)
                                      {
                                        unint64_t v482 = 0;
                                        unint64_t v483 = v467 + 1;
                                        uint64_t v522 = v467;
                                        do
                                        {
                                          AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v483[v482] + v483[v482]));
                                          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v525, a2, (uint64_t)__dst);
                                          uint64_t v484 = *(__n128 **)(a1 + 1128);
                                          if ((unint64_t)v484 >= *(void *)(a1 + 1136))
                                          {
                                            long long v486 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v514, v525);
                                          }
                                          else
                                          {
                                            v484->n128_u64[0] = v525.n128_u64[0];
                                            unint64_t v485 = v525.n128_u64[1];
                                            v484->n128_u64[1] = v525.n128_u64[1];
                                            if (v485) {
                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v485 + 8), 1uLL, memory_order_relaxed);
                                            }
                                            long long v486 = v484 + 1;
                                          }
                                          *(void *)(a1 + 1128) = v486;
                                          uint64_t v487 = *(unsigned int *)(v525.n128_u64[0] + 96);
                                          unint64_t v488 = *(char **)(a1 + 1104);
                                          unint64_t v489 = *(void *)(a1 + 1112);
                                          if ((unint64_t)v488 >= v489)
                                          {
                                            int v491 = *(char **)(a1 + 1096);
                                            uint64_t v492 = (v488 - v491) >> 3;
                                            unint64_t v493 = v492 + 1;
                                            if ((unint64_t)(v492 + 1) >> 61) {
                                              abort();
                                            }
                                            uint64_t v494 = v489 - (void)v491;
                                            if (v494 >> 2 > v493) {
                                              unint64_t v493 = v494 >> 2;
                                            }
                                            if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v495 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v495 = v493;
                                            }
                                            if (v495)
                                            {
                                              if (v495 >> 61) {
                                                std::__throw_bad_array_new_length[abi:nn180100]();
                                              }
                                              uint64_t v496 = operator new(8 * v495);
                                            }
                                            else
                                            {
                                              uint64_t v496 = 0;
                                            }
                                            unint64_t v497 = &v496[8 * v492];
                                            void *v497 = v487;
                                            long long v490 = v497 + 1;
                                            if (v488 != v491)
                                            {
                                              unint64_t v498 = v488 - 8 - v491;
                                              if (v498 < 0x58) {
                                                goto LABEL_806;
                                              }
                                              if ((unint64_t)(v491 - v496) < 0x20) {
                                                goto LABEL_806;
                                              }
                                              uint64_t v499 = (v498 >> 3) + 1;
                                              long long v500 = &v496[8 * v492 - 16];
                                              int8x16_t v501 = v488 - 16;
                                              uint64_t v502 = v499 & 0x3FFFFFFFFFFFFFFCLL;
                                              do
                                              {
                                                long long v503 = *(_OWORD *)v501;
                                                *(v500 - 1) = *((_OWORD *)v501 - 1);
                                                *long long v500 = v503;
                                                v500 -= 2;
                                                v501 -= 32;
                                                v502 -= 4;
                                              }
                                              while (v502);
                                              v497 -= v499 & 0x3FFFFFFFFFFFFFFCLL;
                                              v488 -= 8 * (v499 & 0x3FFFFFFFFFFFFFFCLL);
                                              if (v499 != (v499 & 0x3FFFFFFFFFFFFFFCLL))
                                              {
LABEL_806:
                                                do
                                                {
                                                  uint64_t v504 = *((void *)v488 - 1);
                                                  v488 -= 8;
                                                  *--unint64_t v497 = v504;
                                                }
                                                while (v488 != v491);
                                              }
                                            }
                                            *(void *)(a1 + 1096) = v497;
                                            *(void *)(a1 + 1104) = v490;
                                            *(void *)(a1 + 1112) = &v496[8 * v495];
                                            if (v491) {
                                              operator delete(v491);
                                            }
                                            uint64_t v467 = v522;
                                          }
                                          else
                                          {
                                            *(void *)unint64_t v488 = v487;
                                            long long v490 = v488 + 8;
                                          }
                                          *(void *)(a1 + 1104) = v490;
                                          unint64_t v505 = (std::__shared_weak_count *)v525.n128_u64[1];
                                          if (v525.n128_u64[1]
                                            && !atomic_fetch_add((atomic_ullong *volatile)(v525.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                          {
                                            ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                                            std::__shared_weak_count::__release_weak(v505);
                                          }
                                          if (v529 < 0) {
                                            operator delete(v528[0]);
                                          }
                                          ++v482;
                                        }
                                        while (v482 < *v467);
                                      }
LABEL_785:
                                      *(unsigned char *)(a1 + 964) = 0;
                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                        operator delete(__str.__r_.__value_.__l.__data_);
                                      }
                                      *(void *)a1 = &unk_26F852938;
                                      std::string __str = *(std::string *)(a1 + 616);
                                      __dst[23] = 0;
                                      __dst[0] = 0;
                                      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::ProgramVariantESLState(a1 + 1344, a2, v519, (const std::string *)__dst, v523, (long long *)&__str);
                                    }
                                  }
                                  unint64_t v447 = 0;
                                  long long v448 = v435 + 1;
                                  do
                                  {
                                    if (v443 && *v443) {
                                      uint64_t v450 = *(void *)&v443[2 * v447 + 1];
                                    }
                                    else {
                                      uint64_t v450 = 0;
                                    }
                                    uint64_t v451 = *(void *)&v448[2 * v447];
                                    int v452 = *(void **)(a1 + 1080);
                                    unint64_t v453 = *(void *)(a1 + 1088);
                                    if ((unint64_t)v452 < v453)
                                    {
                                      *int v452 = v451;
                                      v452[1] = v450;
                                      int8x8_t v449 = v452 + 2;
                                    }
                                    else
                                    {
                                      uint64_t v454 = (void *)*v515;
                                      uint64_t v455 = ((uint64_t)v452 - *v515) >> 4;
                                      unint64_t v456 = v455 + 1;
                                      if ((unint64_t)(v455 + 1) >> 60) {
                                        abort();
                                      }
                                      uint64_t v457 = v453 - (void)v454;
                                      if (v457 >> 3 > v456) {
                                        unint64_t v456 = v457 >> 3;
                                      }
                                      if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v458 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v458 = v456;
                                      }
                                      if (v458)
                                      {
                                        if (v458 >> 60) {
                                          std::__throw_bad_array_new_length[abi:nn180100]();
                                        }
                                        uint64_t v459 = (char *)operator new(16 * v458);
                                      }
                                      else
                                      {
                                        uint64_t v459 = 0;
                                      }
                                      uint64_t v460 = &v459[16 * v455];
                                      *(void *)uint64_t v460 = v451;
                                      *((void *)v460 + 1) = v450;
                                      uint64_t v461 = v460;
                                      if (v452 != v454)
                                      {
                                        do
                                        {
                                          *((_OWORD *)v461 - 1) = *((_OWORD *)v452 - 1);
                                          v461 -= 16;
                                          v452 -= 2;
                                        }
                                        while (v452 != v454);
                                        int v452 = (void *)*v515;
                                      }
                                      *(void *)(a1 + 1072) = v461;
                                      int8x8_t v449 = v460 + 16;
                                      *(void *)(a1 + 1080) = v460 + 16;
                                      *(void *)(a1 + 1088) = &v459[16 * v458];
                                      if (v452) {
                                        operator delete(v452);
                                      }
                                      long long v448 = v435 + 1;
                                    }
                                    *(void *)(a1 + 1080) = v449;
                                    ++v447;
                                  }
                                  while (v447 < *v435);
                                  unint64_t v430 = v520;
                                  uint64_t v465 = *v520;
                                  uint64_t v432 = -v465;
                                  unsigned int v434 = *(unsigned __int16 *)((char *)v520 - v465);
                                }
                                if (v434 < 0xB) {
                                  goto LABEL_785;
                                }
                                goto LABEL_730;
                              }
                            }
                          }
LABEL_385:
                          if (v188 < 0x21) {
                            goto LABEL_358;
                          }
                          goto LABEL_386;
                        }
LABEL_384:
                        *(unsigned char *)(a1 + 1147) = 0;
                        goto LABEL_385;
                      }
                    }
                  }
                  uint64_t v185 = 0;
                  goto LABEL_333;
                }
                goto LABEL_319;
              }
              if (v176 >= 0x27)
              {
                uint64_t v177 = v175[19];
                if (v175[19])
                {
                  int v179 = *((unsigned __int8 *)v13 + v177);
                  if (*((unsigned char *)v13 + v177))
                  {
                    BOOL v178 = 1;
LABEL_320:
                    LOBYTE(v177) = v179 != 0;
                    goto LABEL_321;
                  }
                }
                if (v176 >= 0x29 && (uint64_t v180 = v175[20]) != 0)
                {
                  BOOL v178 = *((unsigned char *)v13 + v180) != 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
                else
                {
                  BOOL v178 = 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
LABEL_319:
                int v179 = *((unsigned __int8 *)v13 + v177);
                goto LABEL_320;
              }
            }
            BOOL v178 = 0;
            LOBYTE(v177) = 0;
            goto LABEL_321;
          }
        }
        else
        {
          int v102 = v5 + 108;
          int v103 = v5[108];
          if (!v103) {
            goto LABEL_258;
          }
        }
        if (v102[1])
        {
          int v104 = (int *)((char *)v103 + *v103);
          int v105 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v105 < 0xDu)
          {
            LODWORD(v106) = 0;
          }
          else
          {
            uint64_t v106 = v105[6];
            if (v106) {
              LODWORD(v106) = *(int *)((char *)v104 + v106);
            }
          }
          *(_DWORD *)(a1 + 1180) = v106;
          int v107 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v107 < 0xBu)
          {
            LODWORD(v108) = 0;
          }
          else
          {
            uint64_t v108 = v107[5];
            if (v108) {
              LODWORD(v108) = *(int *)((char *)v104 + v108);
            }
          }
          *(_DWORD *)(a1 + 1188) = v108;
          int v109 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v109 < 0x11u)
          {
            LODWORD(v110) = 0;
          }
          else
          {
            uint64_t v110 = v109[8];
            if (v110) {
              LODWORD(v110) = *(int *)((char *)v104 + v110);
            }
          }
          *(_DWORD *)(a1 + 1192) = v110;
          int v111 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v111 < 0x13u)
          {
            LODWORD(v112) = 0;
          }
          else
          {
            uint64_t v112 = v111[9];
            if (v112) {
              LODWORD(v112) = *(int *)((char *)v104 + v112);
            }
          }
          *(_DWORD *)(a1 + 1196) = v112;
          int v113 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v113 < 0x17u)
          {
            LODWORD(v114) = 0;
          }
          else
          {
            uint64_t v114 = v113[11];
            if (v114) {
              LODWORD(v114) = *(int *)((char *)v104 + v114);
            }
          }
          *(_DWORD *)(a1 + 1200) = v114;
          int v115 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v115 < 0x1Bu)
          {
            LODWORD(v116) = 0;
          }
          else
          {
            uint64_t v116 = v115[13];
            if (v116) {
              LODWORD(v116) = *(int *)((char *)v104 + v116);
            }
          }
          *(_DWORD *)(a1 + 1204) = v116;
          uint64_t v117 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v117 < 0x15u)
          {
            LODWORD(v118) = 0;
          }
          else
          {
            uint64_t v118 = v117[10];
            if (v118) {
              LODWORD(v118) = *(int *)((char *)v104 + v118);
            }
          }
          *(_DWORD *)(a1 + 1208) = v118;
          int v119 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v119 < 0x19u)
          {
            LODWORD(v120) = 0;
          }
          else
          {
            uint64_t v120 = v119[12];
            if (v120) {
              LODWORD(v120) = *(int *)((char *)v104 + v120);
            }
          }
          *(_DWORD *)(a1 + 1212) = v120;
          int v121 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v121 < 0x1Du)
          {
            LODWORD(v122) = 0;
          }
          else
          {
            uint64_t v122 = v121[14];
            if (v122) {
              LODWORD(v122) = *(int *)((char *)v104 + v122);
            }
          }
          *(_DWORD *)(a1 + 1216) = v122;
          int8x16_t v123 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v123 < 0xFu)
          {
            LODWORD(v124) = 0;
          }
          else
          {
            uint64_t v124 = v123[7];
            if (v124) {
              LODWORD(v124) = *(int *)((char *)v104 + v124);
            }
          }
          *(_DWORD *)(a1 + 1220) = v124;
          int8x16_t v125 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v125 < 0x1Fu)
          {
            LODWORD(v126) = 0;
          }
          else
          {
            uint64_t v126 = v125[15];
            if (v126) {
              LODWORD(v126) = *(int *)((char *)v104 + v126);
            }
          }
          *(_DWORD *)(a1 + 1224) = v126;
          int8x16_t v127 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v127 < 0x21u)
          {
            LODWORD(v128) = 0;
          }
          else
          {
            uint64_t v128 = v127[16];
            if (v128) {
              LODWORD(v128) = *(int *)((char *)v104 + v128);
            }
          }
          *(_DWORD *)(a1 + 1228) = v128;
          uint64_t v129 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v129 < 0x23u)
          {
            LODWORD(v130) = 0;
          }
          else
          {
            uint64_t v130 = v129[17];
            if (v130) {
              LODWORD(v130) = *(int *)((char *)v104 + v130);
            }
          }
          *(_DWORD *)(a1 + 1232) = v130;
          uint64_t v131 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v131 < 0x25u)
          {
            LODWORD(v132) = 0;
          }
          else
          {
            uint64_t v132 = v131[18];
            if (v132) {
              LODWORD(v132) = *(int *)((char *)v104 + v132);
            }
          }
          *(_DWORD *)(a1 + 1236) = v132;
          uint64_t v133 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v133 < 0x27u)
          {
            LODWORD(v134) = 0;
          }
          else
          {
            uint64_t v134 = v133[19];
            if (v134) {
              LODWORD(v134) = *(int *)((char *)v104 + v134);
            }
          }
          *(_DWORD *)(a1 + 1240) = v134;
          unsigned int v135 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v135 < 0x29u)
          {
            LODWORD(v136) = 0;
          }
          else
          {
            uint64_t v136 = v135[20];
            if (v136) {
              LODWORD(v136) = *(int *)((char *)v104 + v136);
            }
          }
          *(_DWORD *)(a1 + 1244) = v136;
          uint64_t v137 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v137 < 0x2Bu)
          {
            LODWORD(v138) = 0;
          }
          else
          {
            uint64_t v138 = v137[21];
            if (v138) {
              LODWORD(v138) = *(int *)((char *)v104 + v138);
            }
          }
          *(_DWORD *)(a1 + 1248) = v138;
          int v139 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v139 < 7u)
          {
            LODWORD(v140) = 0;
          }
          else
          {
            uint64_t v140 = v139[3];
            if (v140) {
              LODWORD(v140) = *(int *)((char *)v104 + v140);
            }
          }
          *(_DWORD *)(a1 + 1252) = v140;
          int v141 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v141 >= 5u && (uint64_t v142 = v141[2]) != 0) {
            int v143 = *(int *)((char *)v104 + v142);
          }
          else {
            int v143 = 0;
          }
          *(_DWORD *)(a1 + 1260) = v143;
        }
        goto LABEL_258;
      }
      unint64_t v51 = (int *)((char *)*v50 + **v50);
      unint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
      unsigned int v53 = *v52;
      if (v52[2])
      {
        int v54 = (int *)((char *)v51 + v52[2] + *(unsigned int *)((char *)v51 + v52[2]));
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      else
      {
        int v54 = 0;
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      uint64_t v55 = v52[3];
      if (v55)
      {
        unsigned int v56 = (char *)v51 + v55 + *(unsigned int *)((char *)v51 + v55);
        if (!*v54) {
          goto LABEL_143;
        }
        goto LABEL_105;
      }
LABEL_104:
      unsigned int v56 = 0;
      if (!*v54) {
        goto LABEL_143;
      }
LABEL_105:
      unint64_t v57 = 0;
      uint64_t v516 = v56 + 4;
      while (1)
      {
        int v59 = (char *)&v54[v57 + 2] + v54[v57 + 1];
        size_t v60 = strlen(v59);
        if (v60 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v61 = v60;
        if (v60 >= 0x17)
        {
          uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17) {
            uint64_t v63 = v60 | 7;
          }
          uint64_t v64 = v63 + 1;
          int8x16_t v62 = operator new(v63 + 1);
          *(void *)&__dst[8] = v61;
          *(void *)&__dst[16] = v64 | 0x8000000000000000;
          *(void *)std::string __dst = v62;
        }
        else
        {
          __dst[23] = v60;
          int8x16_t v62 = __dst;
          if (!v60) {
            goto LABEL_116;
          }
        }
        memmove(v62, v59, v61);
LABEL_116:
        v62[v61] = 0;
        unint64_t v65 = *(void *)(a1 + 1280);
        if (v65 >= *(void *)(a1 + 1288))
        {
          unsigned int v66 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1272), (uint64_t)__dst);
          int v67 = __dst[23];
          *(void *)(a1 + 1280) = v66;
          if (v67 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v65 = *(_OWORD *)__dst;
          *(void *)(v65 + 16) = *(void *)&__dst[16];
          *(void *)(a1 + 1280) = v65 + 24;
        }
        int v68 = *(_DWORD *)&v516[4 * v57];
        uint64_t v69 = *(char **)(a1 + 1304);
        unint64_t v70 = *(void *)(a1 + 1312);
        if ((unint64_t)v69 < v70)
        {
          *(_DWORD *)uint64_t v69 = v68;
          uint64_t v58 = v69 + 4;
        }
        else
        {
          uint64_t v71 = *(char **)(a1 + 1296);
          uint64_t v72 = (v69 - v71) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            abort();
          }
          uint64_t v74 = v70 - (void)v71;
          if (v74 >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            if (v75 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v76 = v75;
            unint64_t v77 = operator new(4 * v75);
            unint64_t v75 = v76;
          }
          else
          {
            unint64_t v77 = 0;
          }
          unsigned int v78 = &v77[4 * v72];
          *unsigned int v78 = v68;
          uint64_t v58 = v78 + 1;
          if (v69 != v71)
          {
            unint64_t v79 = v69 - 4 - v71;
            if (v79 < 0x2C) {
              goto LABEL_807;
            }
            if ((unint64_t)(v71 - v77) < 0x20) {
              goto LABEL_807;
            }
            uint64_t v80 = (v79 >> 2) + 1;
            int v81 = &v77[4 * v72 - 16];
            uint64_t v82 = v69 - 16;
            uint64_t v83 = v80 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              _OWORD *v81 = v84;
              v81 -= 2;
              v82 -= 32;
              v83 -= 8;
            }
            while (v83);
            v78 -= v80 & 0x7FFFFFFFFFFFFFF8;
            v69 -= 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
            if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_807:
              do
              {
                int v85 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *--unsigned int v78 = v85;
              }
              while (v69 != v71);
            }
          }
          *(void *)(a1 + 1296) = v78;
          *(void *)(a1 + 1304) = v58;
          *(void *)(a1 + 1312) = &v77[4 * v75];
          if (v71) {
            operator delete(v71);
          }
        }
        *(void *)(a1 + 1304) = v58;
        ++v57;
        uint64_t v5 = (unsigned int **)v519;
        if (v57 >= *v54) {
          goto LABEL_143;
        }
      }
    }
    size_t v44 = (size_t)v5[1];
    if (v44 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint8x8_t v45 = *v5;
    if (v44 >= 0x17)
    {
      uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v47 = v44 | 7;
      }
      uint64_t v48 = v47 + 1;
      size_t v46 = operator new(v47 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v48 | 0x8000000000000000;
      *(void *)std::string __dst = v46;
      uint64_t v5 = (unsigned int **)v519;
    }
    else
    {
      __dst[23] = v5[1];
      size_t v46 = __dst;
      if (!v44) {
        goto LABEL_82;
      }
    }
    memmove(v46, v45, v44);
LABEL_82:
    v46[v44] = 0;
    if (*(char *)(a1 + 991) < 0) {
      operator delete(*v506);
    }
    *(_OWORD *)uint64_t v506 = *(_OWORD *)__dst;
    *(void *)(a1 + 984) = *(void *)&__dst[16];
    uint64_t v49 = v5 + 3;
    if (v5[3])
    {
      if (!v5[4]) {
        uint64_t v49 = v5 + 73;
      }
    }
    else
    {
      uint64_t v49 = v5 + 73;
    }
    *(void *)(a1 + 992) = *v49 - (void)*v5;
    goto LABEL_90;
  }
  if (v19 < 0x45)
  {
    if (v19 < 0x3D)
    {
      LOWORD(v24) = 0;
      if (v19 < 0x3B)
      {
        LODWORD(v26) = 0;
        uint64_t v25 = 0;
        LOWORD(v23) = 0;
        LOBYTE(v27) = 0;
LABEL_53:
        *(_DWORD *)(a1 + 288) = v26;
        __int16 v28 = v24 + v26 - 1;
        int v29 = -(int)v26;
        uint64_t v30 = *(void *)(a1 + 296);
        unint64_t v31 = (unsigned __int16)v23 | ((unint64_t)(unsigned __int16)(v29 & v28) << 32) | (v25 << 48) | (v27 << 16) | (unint64_t)(v30 & 0xFF000000);
        *(void *)(a1 + 296) = v31;
        if (v31 != v30)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v32 = -1;
          *((void *)&v32 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v32;
          *(_OWORD *)(a1 + 360) = v32;
          *(_OWORD *)(a1 + 376) = v32;
        }
        goto LABEL_55;
      }
      LOWORD(v23) = 0;
      uint64_t v25 = v18[29];
      if (!v18[29])
      {
LABEL_38:
        if (v19 < 0x3F)
        {
          LODWORD(v26) = 0;
          LOBYTE(v27) = 0;
        }
        else
        {
          uint64_t v26 = v18[31];
          if (v18[31]) {
            uint64_t v26 = *(void *)((char *)v520 + v26);
          }
          if (v19 < 0x4B)
          {
            LOBYTE(v27) = 0;
          }
          else
          {
            uint64_t v27 = v18[37];
            if (v27) {
              LODWORD(v27) = *(int *)((char *)v520 + v27);
            }
          }
        }
        goto LABEL_53;
      }
LABEL_37:
      uint64_t v25 = *(void *)((char *)v520 + v25);
      goto LABEL_38;
    }
    LOWORD(v23) = 0;
    uint64_t v24 = v18[30];
    if (v18[30]) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v23 = v18[34];
    if (v18[34]) {
      uint64_t v23 = *(void *)((char *)v520 + v23);
    }
    uint64_t v24 = v18[30];
    if (v18[30]) {
LABEL_35:
    }
      uint64_t v24 = *(void *)((char *)v520 + v24);
  }
  uint64_t v25 = v18[29];
  if (!v18[29]) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

void sub_242ABBFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, CompileStatistics *a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  CompileStatistics::~CompileStatistics(a19);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v48 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a28);
  uint64_t v50 = *(void **)(v48 + 1096);
  if (v50)
  {
    *(void *)(v48 + 1104) = v50;
    operator delete(v50);
  }
  unint64_t v51 = *a30;
  if (*a30)
  {
    *(void *)(v48 + 1080) = v51;
    operator delete(v51);
  }
  if (*a10 < 0)
  {
    operator delete(*a11);
    if ((*(char *)(v48 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v48 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v48 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a25);
  if (*(char *)(v48 + 575) < 0)
  {
LABEL_8:
    operator delete(*a26);
    if ((*(char *)(v48 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a34);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a15);
      unint64_t v52 = *a21;
      if (*a21)
      {
        *(void *)(v48 + 176) = v52;
        operator delete(v52);
      }
      unsigned int v53 = *a23;
      if (*a23)
      {
        *(void *)(v48 + 152) = v53;
        operator delete(v53);
      }
      int v54 = *a22;
      if (*a22)
      {
        *(void *)(v48 + 128) = v54;
        operator delete(v54);
      }
      uint64_t v55 = *a24;
      if (*a24)
      {
        *(void *)(v48 + 104) = v55;
        operator delete(v55);
      }
      unsigned int v56 = *a20;
      if (*a20)
      {
        *(void *)(v48 + 80) = v56;
        operator delete(v56);
        unint64_t v57 = *a40;
        if (!*a40)
        {
LABEL_24:
          if (a48 < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v57 = *a40;
        if (!*a40) {
          goto LABEL_24;
        }
      }
      *(void *)(v48 + 56) = v57;
      operator delete(v57);
      if (a48 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a27);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v48 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::BlitFragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::BlitFragmentProgramVariant(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v522 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F853028;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v5 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v502 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  int8x16_t v501 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v6;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v6;
  *(_OWORD *)(a1 + 376) = v6;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  unint64_t v505 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  uint64_t v514 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (a3[28])
  {
    int v7 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      int v7 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    int v7 = (unsigned int **)(a3 + 98);
  }
  long long v8 = 0;
  if (*v7 && v7[1]) {
    long long v8 = (int *)((char *)*v7 + **v7);
  }
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
    unsigned int v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    unsigned int v11 = 0;
  }
  if (a3[58])
  {
    uint64_t v12 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      uint64_t v12 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    uint64_t v12 = (unsigned int **)(a3 + 128);
  }
  uint64_t v13 = 0;
  if (*v12 && v12[1]) {
    uint64_t v13 = (int *)((char *)*v12 + **v12);
  }
  unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  }
  else {
    uint64_t v16 = 0;
  }
  int8x16_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (v18 < 0x25)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v17[18];
    if (v17[18]) {
      LOBYTE(v19) = *((unsigned char *)v16 + v19) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v19;
  uint64_t v20 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v20 < 0x55u || (uint64_t v21 = v20[42]) == 0 || !*((unsigned char *)v11 + v21))
  {
LABEL_56:
    long long v32 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v32 < 7u)
    {
      LODWORD(v33) = 0;
    }
    else
    {
      uint64_t v33 = v32[3];
      if (v33) {
        LODWORD(v33) = *(int *)((char *)v16 + v33);
      }
    }
    uint64_t v499 = (void *)(a1 + 168);
    long long v500 = (void *)(a1 + 120);
    uint64_t v506 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v33;
    uint64_t v34 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v34 >= 0x13u && (uint64_t v35 = v34[9]) != 0) {
      uint64_t v36 = (char *)v16 + v35 + *(unsigned int *)((char *)v16 + v35) + 4;
    }
    else {
      uint64_t v36 = "";
    }
    long long v503 = (std::string *)(a1 + 576);
    uint64_t v504 = (unint64_t *)(a1 + 552);
    unint64_t v498 = (void **)(a1 + 968);
    uint64_t v507 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v505, v36);
    int v37 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
      uint64_t v39 = (char *)v16 + v38 + *(unsigned int *)((char *)v16 + v38) + 4;
    }
    else {
      uint64_t v39 = "";
    }
    MEMORY[0x24566EB20](v504, v39);
    size_t v40 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v40 < 0x29u)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      uint64_t v41 = v40[20];
      if (v41) {
        LOBYTE(v41) = *((unsigned char *)v16 + v41) != 0;
      }
    }
    *(unsigned char *)(a1 + 600) = v41;
    std::string::operator=(v503, &__str);
    uint64_t v42 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v42 < 5u || !v42[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_91:
      uint64_t v513 = v5;
      if (a3[43])
      {
        uint64_t v49 = (unsigned int **)(a3 + 43);
        if (!a3[44]) {
          uint64_t v49 = (unsigned int **)(a3 + 113);
        }
      }
      else
      {
        uint64_t v49 = (unsigned int **)(a3 + 113);
      }
      float32x4x2_t v508 = v16;
      if (!*v49 || !v49[1])
      {
LABEL_144:
        if (a3[68])
        {
          int v85 = (unsigned int **)(a3 + 68);
          if (!a3[69]) {
            int v85 = (unsigned int **)(a3 + 138);
          }
        }
        else
        {
          int v85 = (unsigned int **)(a3 + 138);
        }
        uint64_t v87 = *v85;
        int v86 = v85[1];
        if (v87) {
          BOOL v88 = v86 == 0;
        }
        else {
          BOOL v88 = 1;
        }
        if (v88
          || (BOOL v89 = (int *)((char *)v87 + *v87), v90 = (unsigned __int16 *)((char *)v89 - *v89), *v90 < 5u)
          || (uint64_t v91 = v90[2]) == 0)
        {
          uint64_t v92 = 0;
        }
        else
        {
          uint64_t v92 = *(void *)((char *)v89 + v91);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(a1 + 1184) = (float)(v92
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        uint64_t v93 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v93 < 5u)
        {
          LODWORD(v94) = 0;
        }
        else
        {
          uint64_t v94 = v93[2];
          if (v94) {
            LODWORD(v94) = *(int *)((char *)v11 + v94);
          }
        }
        *(_DWORD *)(a1 + 1176) = v94;
        uint64_t v95 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v95 < 0x2Du)
        {
          LODWORD(v96) = 0;
        }
        else
        {
          uint64_t v96 = v95[22];
          if (v96) {
            LODWORD(v96) = *(int *)((char *)v11 + v96);
          }
        }
        *(_DWORD *)(a1 + 1180) = v96;
        uint64_t v97 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v97 < 0x35u)
        {
          LODWORD(v98) = 0;
        }
        else
        {
          uint64_t v98 = v97[26];
          if (v98) {
            LODWORD(v98) = *(int *)((char *)v11 + v98);
          }
        }
        *(_DWORD *)(a1 + 1220) = v98;
        uint64_t v99 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v99 < 0x43u)
        {
          LODWORD(v100) = 0;
        }
        else
        {
          uint64_t v100 = v99[33];
          if (v100) {
            LODWORD(v100) = *(int *)((char *)v11 + v100);
          }
        }
        *(_DWORD *)(a1 + 1256) = v100;
        if (a3[38])
        {
          uint64_t v101 = (unsigned int **)(a3 + 38);
          if (!a3[39]) {
            uint64_t v101 = (unsigned int **)(a3 + 108);
          }
          int v102 = *v101;
          if (!*v101)
          {
LABEL_259:
            if (a3[53])
            {
              uint64_t v143 = a3[54];
              if (v143) {
                uint64_t v144 = a3[53];
              }
              else {
                uint64_t v144 = a3[123];
              }
              if (v143) {
                int v145 = a3 + 53;
              }
              else {
                int v145 = a3 + 123;
              }
            }
            else
            {
              int v145 = a3 + 123;
              uint64_t v144 = a3[123];
            }
            MEMORY[0x24566EB30](a1 + 1320, v144, v145[1]);
            std::string::push_back((std::string *)(a1 + 1320), 0);
            uint64_t v146 = *v11;
            uint64_t v147 = (char *)v11 - v146;
            unsigned int v148 = *(unsigned __int16 *)((char *)v11 - v146);
            if (v148 < 0x39) {
              goto LABEL_285;
            }
            uint64_t v149 = -v146;
            uint64_t v150 = *((unsigned __int16 *)v147 + 28);
            if (v150)
            {
              uint64_t v151 = (int *)((char *)v11 + v150 + *(unsigned int *)((char *)v11 + v150));
              if (*v151)
              {
                *(unsigned char *)(a1 + 1064) = 1;
                int v152 = (_DWORD *)((char *)v151 + v151[1] + 4);
                int v153 = (unsigned __int16 *)((char *)v152 - *v152);
                if (*v153 >= 9u && (uint64_t v154 = v153[4]) != 0) {
                  int v155 = *(int *)((char *)v152 + v154);
                }
                else {
                  int v155 = 0;
                }
                *(_DWORD *)(a1 + 1264) = v155;
                *(unsigned char *)(a1 + 1268) = 1;
                uint64_t v156 = *v11;
                uint64_t v149 = -v156;
                unsigned int v148 = *(unsigned __int16 *)((char *)v11 - v156);
              }
            }
            if (v148 < 0x3B) {
              goto LABEL_285;
            }
            uint64_t v157 = (char *)v11 + v149;
            if (*((_WORD *)v157 + 29))
            {
              uint64_t v158 = (unsigned int *)((char *)v11
                                    + *((unsigned __int16 *)v157 + 29)
                                    + *(unsigned int *)((char *)v11 + *((unsigned __int16 *)v157 + 29)));
              uint64_t v159 = *v158;
              if (v159)
              {
                uint64_t v160 = v158 + 1;
                do
                {
                  unsigned int v162 = *v160++;
                  unsigned int v161 = v162;
                  if (!(v162 >> 20)) {
                    *(void *)(a1 + 1048 + 8 * (v161 > 0x3F)) |= 1 << v161;
                  }
                  --v159;
                }
                while (v159);
              }
            }
            if (v148 < 0x57)
            {
LABEL_285:
              LODWORD(v163) = 0;
            }
            else
            {
              uint64_t v163 = *((unsigned __int16 *)v157 + 43);
              if (*((_WORD *)v157 + 43)) {
                LODWORD(v163) = *(int *)((char *)v11 + v163);
              }
            }
            *(_DWORD *)(a1 + 400) = v163;
            uint64_t v164 = (unsigned __int16 *)((char *)v11 - *v11);
            if (*v164 >= 0x21u && (uint64_t v165 = v164[16]) != 0) {
              int v166 = *(int *)((char *)v11 + v165);
            }
            else {
              int v166 = 0;
            }
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(a1 + 404) = getAdditionalSpillBufferBytes(void)::extra + v166;
            int v167 = (unsigned __int16 *)((char *)v11 - *v11);
            if (*v167 < 0x59u)
            {
              LODWORD(v168) = 0;
            }
            else
            {
              uint64_t v168 = v167[44];
              if (v168) {
                LODWORD(v168) = *(int *)((char *)v11 + v168);
              }
            }
            *(_DWORD *)(a1 + 432) = v168;
            unsigned int v169 = (unsigned __int16 *)((char *)v11 - *v11);
            if (*v169 < 0x51u)
            {
              LODWORD(v170) = 0;
            }
            else
            {
              uint64_t v170 = v169[40];
              if (v170) {
                LODWORD(v170) = *(int *)((char *)v11 + v170);
              }
            }
            *(_DWORD *)(a1 + 436) = v170;
            int v171 = (unsigned __int16 *)((char *)v11 - *v11);
            if (*v171 < 0x4Bu)
            {
              LODWORD(v172) = 0;
            }
            else
            {
              uint64_t v172 = v171[37];
              if (v172) {
                LODWORD(v172) = *(int *)((char *)v11 + v172);
              }
            }
            *(_DWORD *)(a1 + 444) = v172;
            uint64_t v173 = (unsigned __int16 *)((char *)v11 - *v11);
            unsigned int v174 = *v173;
            if (v174 >= 0x25)
            {
              if (v173[18] && *((unsigned char *)v11 + v173[18]))
              {
                if (v174 < 0x27)
                {
                  LOBYTE(v175) = 0;
                  BOOL v176 = 1;
                  goto LABEL_322;
                }
                LODWORD(v175) = v173[19];
                BOOL v176 = 1;
                if (!v173[19])
                {
LABEL_322:
                  *(unsigned char *)(a1 + 454) = v175;
                  int v179 = (unsigned __int16 *)((char *)v16 - *v16);
                  unsigned int v180 = *v179;
                  if (v180 < 0x21)
                  {
                    uint64_t v182 = 0;
                    LODWORD(v181) = 0;
                  }
                  else
                  {
                    uint64_t v181 = v179[16];
                    if (v179[16]) {
                      LODWORD(v181) = *(int *)((char *)v16 + v181);
                    }
                    if (v180 < 0x4D)
                    {
                      uint64_t v182 = 0;
                    }
                    else
                    {
                      uint64_t v182 = v179[38];
                      if (v179[38]) {
                        uint64_t v182 = *(unsigned int *)((char *)v16 + v182);
                      }
                      if (v180 >= 0x4F)
                      {
                        uint64_t v183 = v179[39];
                        if (v183) {
                          uint64_t v183 = *(void *)((char *)v16 + v183);
                        }
LABEL_334:
                        *(void *)(a1 + 496) = v181 | (unint64_t)(v182 << 32);
                        *(void *)(a1 + 504) = v183;
                        *(unsigned char *)(a1 + 458) = v176 | v175;
                        uint64_t v184 = *v11;
                        uint64_t v185 = (char *)v11 - v184;
                        unsigned int v186 = *(unsigned __int16 *)((char *)v11 - v184);
                        if (v186 < 0x37)
                        {
                          LOBYTE(v187) = 0;
                        }
                        else
                        {
                          uint64_t v187 = *((unsigned __int16 *)v185 + 27);
                          if (*((_WORD *)v185 + 27)) {
                            LOBYTE(v187) = *((unsigned char *)v11 + v187) != 0;
                          }
                        }
                        *(unsigned char *)(a1 + 453) = v187;
                        unsigned int v188 = (unsigned __int16 *)((char *)v16 - *v16);
                        unsigned int v189 = *v188;
                        if (v189 < 0x33)
                        {
                          LOBYTE(v190) = 0;
                        }
                        else
                        {
                          uint64_t v190 = v188[25];
                          if (v188[25]) {
                            LOBYTE(v190) = *((unsigned char *)v16 + v190) != 0;
                          }
                        }
                        uint64_t v191 = -v184;
                        *(unsigned char *)(a1 + 459) = v190;
                        if (v186 < 0x3F)
                        {
                          LOBYTE(v192) = 0;
                        }
                        else
                        {
                          uint64_t v192 = *((unsigned __int16 *)v185 + 31);
                          if (v192)
                          {
                            uint64_t v193 = (unsigned int *)((char *)v11 + v192 + *(unsigned int *)((char *)v11 + v192));
                            uint64_t v192 = *v193;
                            if (v192)
                            {
                              uint64_t v194 = v193 + 1;
                              while (1)
                              {
                                unsigned int v196 = *v194++;
                                char v195 = v196;
                                if (v196 < 0x36 && ((0x3F000000000777uLL >> v195) & 1) != 0) {
                                  break;
                                }
                                if (!--v192) {
                                  goto LABEL_351;
                                }
                              }
                              LOBYTE(v192) = 1;
                            }
                          }
                        }
LABEL_351:
                        *(unsigned char *)(a1 + 461) = v192;
                        if (v189 <= 0x14)
                        {
                          *(unsigned char *)(a1 + 455) = 0;
                          *(unsigned char *)(a1 + 1145) = 0;
                          *(unsigned char *)(a1 + 1147) = 0;
                          if (v186 < 0x21) {
                            goto LABEL_359;
                          }
                          goto LABEL_386;
                        }
                        uint64_t v197 = v188[10];
                        if (v188[10]) {
                          LOBYTE(v197) = *((unsigned char *)v16 + v197) != 0;
                        }
                        *(unsigned char *)(a1 + 455) = v197;
                        if (v189 < 0x25)
                        {
                          *(unsigned char *)(a1 + 1145) = 0;
                          if (v189 < 0x23) {
                            goto LABEL_384;
                          }
                        }
                        else
                        {
                          uint64_t v198 = v188[18];
                          if (v188[18]) {
                            LOBYTE(v198) = *((unsigned char *)v16 + v198) != 0;
                          }
                          *(unsigned char *)(a1 + 1145) = v198;
                        }
                        uint64_t v201 = v188[17];
                        if (v201)
                        {
                          *(unsigned char *)(a1 + 1147) = 1;
                          uint64_t v202 = (unsigned int *)((char *)v16 + v201);
                          uint64_t v203 = *v202;
                          uint64_t v205 = (unsigned int *)((char *)v202 + v203 + 4);
                          uint64_t v204 = *(unsigned int *)((char *)v202 + v203);
                          if (v204)
                          {
                            uint64_t v206 = &v205[v204];
                            while (1)
                            {
                              uint64_t v207 = (int *)((char *)v205 + *v205);
                              unsigned int v208 = (unsigned __int16 *)((char *)v207 - *v207);
                              unsigned int v209 = *v208;
                              if (v209 < 7)
                              {
                                int v210 = 0;
                                unsigned int v212 = 0;
                                if (v209 < 5) {
                                  goto LABEL_373;
                                }
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_369;
                                }
                              }
                              else if (v208[3])
                              {
                                int v210 = *(int *)((char *)v207 + v208[3]);
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_369;
                                }
                              }
                              else
                              {
                                int v210 = 0;
                                uint64_t v211 = v208[2];
                                if (!v211)
                                {
LABEL_369:
                                  unsigned int v212 = 0;
                                  goto LABEL_373;
                                }
                              }
                              unsigned int v212 = *(int *)((char *)v207 + v211);
LABEL_373:
                              uint64_t v213 = (uint64_t **)(a1 + 1160);
LABEL_374:
                              unsigned int v214 = *v213;
                              unsigned int v215 = v213;
                              if (*v213)
                              {
                                while (1)
                                {
                                  uint64_t v213 = (uint64_t **)v214;
                                  unsigned int v216 = *((_DWORD *)v214 + 7);
                                  if (v212 < v216) {
                                    goto LABEL_374;
                                  }
                                  if (v216 >= v212) {
                                    break;
                                  }
                                  unsigned int v214 = v213[1];
                                  if (!v214)
                                  {
                                    unsigned int v215 = v213 + 1;
                                    goto LABEL_379;
                                  }
                                }
                                uint64_t v217 = v213;
                              }
                              else
                              {
LABEL_379:
                                uint64_t v217 = operator new(0x28uLL);
                                v217[7] = v212;
                                v217[8] = 0;
                                *(void *)uint64_t v217 = 0;
                                *((void *)v217 + 1) = 0;
                                *((void *)v217 + 2) = v213;
                                *unsigned int v215 = (uint64_t *)v217;
                                uint64_t v218 = **(void **)(a1 + 1152);
                                int v219 = (uint64_t *)v217;
                                if (v218)
                                {
                                  *(void *)(a1 + 1152) = v218;
                                  int v219 = *v215;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1160), v219);
                                ++*(void *)(a1 + 1168);
                              }
                              v217[8] = v210;
                              if (++v205 == v206)
                              {
                                uint64_t v235 = *v11;
                                uint64_t v191 = -v235;
                                uint64_t v16 = v508;
                                if (*(unsigned __int16 *)((char *)v11 - v235) < 0x21u)
                                {
LABEL_359:
                                  int v199 = 0;
                                  uint64_t v200 = a4;
                                  goto LABEL_389;
                                }
LABEL_386:
                                uint64_t v200 = a4;
                                if (*(_WORD *)((char *)v11 + v191 + 32)) {
                                  int v199 = *(int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 + v191 + 32));
                                }
                                else {
                                  int v199 = 0;
                                }
LABEL_389:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                int v220 = getAdditionalSpillBufferBytes(void)::extra + v199;
                                *(_DWORD *)(a1 + 396) = getAdditionalSpillBufferBytes(void)::extra + v199;
                                int v221 = (unsigned __int16 *)((char *)v11 - *v11);
                                if (*v221 < 0x43u)
                                {
                                  LODWORD(v222) = 0;
                                }
                                else
                                {
                                  uint64_t v222 = v221[33];
                                  if (v222) {
                                    LODWORD(v222) = *(int *)((char *)v11 + v222);
                                  }
                                }
                                *(_DWORD *)(a1 + 408) = v222;
                                uint64_t v223 = (unsigned __int16 *)((char *)v11 - *v11);
                                if (*v223 < 5u)
                                {
                                  LODWORD(v224) = 0;
                                }
                                else
                                {
                                  uint64_t v224 = v223[2];
                                  if (v224) {
                                    LODWORD(v224) = *(int *)((char *)v11 + v224);
                                  }
                                }
                                *(_DWORD *)(a1 + 392) = v224;
                                uint64_t v225 = (unsigned __int16 *)((char *)v11 - *v11);
                                if (*v225 < 0x51u)
                                {
                                  LODWORD(v226) = 0;
                                }
                                else
                                {
                                  uint64_t v226 = v225[40];
                                  if (v226) {
                                    LODWORD(v226) = *(int *)((char *)v11 + v226);
                                  }
                                }
                                *(_DWORD *)(a1 + 428) = v226;
                                uint64_t v227 = (unsigned __int16 *)((char *)v11 - *v11);
                                if (*v227 < 0x4Fu)
                                {
                                  LODWORD(v228) = 0;
                                }
                                else
                                {
                                  uint64_t v228 = v227[39];
                                  if (v228) {
                                    LODWORD(v228) = *(int *)((char *)v11 + v228);
                                  }
                                }
                                *(_DWORD *)(a1 + 440) = v228;
                                *(_DWORD *)(a1 + 448) = *(_DWORD *)(v200 + 468);
                                uint64_t v229 = (unsigned __int16 *)((char *)v11 - *v11);
                                if (*(int *)((char *)v11 + v229[6] + *(unsigned int *)((char *)v11 + v229[6])) | v220) {
                                  char v230 = 1;
                                }
                                else {
                                  char v230 = v176;
                                }
                                if (v230) {
                                  goto LABEL_426;
                                }
                                unsigned int v231 = *v229;
                                if (v231 >= 0x21)
                                {
                                  char v232 = &unk_268D5A000;
                                  if (v229[16])
                                  {
                                    int v233 = *(int *)((char *)v11 + v229[16]);
                                    if (v231 >= 0x43)
                                    {
LABEL_418:
                                      if (v229[33])
                                      {
                                        int v234 = *(int *)((char *)v11 + v229[33]);
                                        goto LABEL_421;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    int v233 = 0;
                                    if (v231 >= 0x43) {
                                      goto LABEL_418;
                                    }
                                  }
                                  int v234 = 0;
                                  goto LABEL_421;
                                }
                                int v233 = 0;
                                int v234 = 0;
                                char v232 = (_DWORD *)&unk_268D5A000;
LABEL_421:
                                {
                                  v232[952] = 0;
                                }
                                if (v234 + v233 + v232[952])
                                {
LABEL_426:
                                  LOBYTE(v237) = 1;
                                }
                                else
                                {
                                  int v236 = (unsigned __int16 *)((char *)v11 - *v11);
                                  if (*v236 < 0x5Fu)
                                  {
                                    LOBYTE(v237) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v237 = v236[47];
                                    if (v237) {
                                      LOBYTE(v237) = *((unsigned char *)v11 + v237) != 0;
                                    }
                                  }
                                }
                                *(unsigned char *)(a1 + 452) = v237;
                                char v238 = (unsigned __int16 *)((char *)v16 - *v16);
                                if (*v238 < 0x11u)
                                {
                                  LODWORD(v239) = 0;
                                }
                                else
                                {
                                  uint64_t v239 = v238[8];
                                  if (v239) {
                                    LODWORD(v239) = *(int *)((char *)v16 + v239);
                                  }
                                }
                                *(_DWORD *)(a1 + 960) = v239;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                int v240 = (_OWORD *)(a1 + 816);
                                uint64_t v241 = (const void **)(a3 + 3);
                                if (a3[3])
                                {
                                  if (a3[4]) {
                                    uint64_t v242 = a3 + 3;
                                  }
                                  else {
                                    uint64_t v242 = a3 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v242 = a3 + 73;
                                }
                                uint64_t v243 = a2 + 5184;
                                AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v242[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(a1 + 1016));
                                *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                long long v244 = *(_OWORD *)&__dst[16];
                                *int v240 = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 832) = v244;
                                *(_OWORD *)(a1 + 841) = *(_OWORD *)&__dst[25];
                                *(void *)(a1 + 608) = *(void *)(a1 + 816);
                                *(void *)(a1 + 640) = a2 + 5352;
                                long long v245 = *(_OWORD *)(a1 + 832);
                                *(_OWORD *)(a1 + 648) = *v240;
                                *(_OWORD *)(a1 + 664) = v245;
                                *(_OWORD *)(a1 + 673) = *(_OWORD *)(a1 + 841);
                                if (*v241)
                                {
                                  long long v246 = a3;
                                  uint64_t v247 = a3[4];
                                  if (v247) {
                                    long long v248 = *v241;
                                  }
                                  else {
                                    long long v248 = (const void *)a3[73];
                                  }
                                  if (v247) {
                                    unsigned int v249 = a3 + 3;
                                  }
                                  else {
                                    unsigned int v249 = a3 + 73;
                                  }
                                }
                                else
                                {
                                  long long v246 = a3;
                                  unsigned int v249 = a3 + 73;
                                  long long v248 = (const void *)a3[73];
                                }
                                memcpy(*(void **)(a1 + 824), v248, v249[1]);
                                uint64_t v250 = *(void *)(a1 + 824);
                                uint64_t v251 = *(void *)(a1 + 832);
                                *(void *)(a1 + 616) = *(void *)(a1 + 608);
                                *(void *)(a1 + 624) = v250;
                                *(void *)(a1 + 632) = v251;
                                uint64_t v252 = (const void **)(v246 + 8);
                                if (v246[8])
                                {
                                  if (v246[9]) {
                                    uint64_t v253 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v253 = v246 + 78;
                                  }
                                  uint64_t v254 = v253[1];
                                  if (!v254) {
                                    goto LABEL_461;
                                  }
                                }
                                else
                                {
                                  uint64_t v254 = v246[79];
                                  if (!v254) {
                                    goto LABEL_461;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v243, v254, (void *)(a1 + 1024));
                                *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                long long v255 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 864) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 880) = v255;
                                *(_OWORD *)(a1 + 889) = *(_OWORD *)&__dst[25];
                                long long v256 = *(_OWORD *)(a1 + 880);
                                *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 864);
                                *(_OWORD *)(a1 + 712) = v256;
                                *(_OWORD *)(a1 + 721) = *(_OWORD *)(a1 + 889);
                                if (*v252)
                                {
                                  uint64_t v257 = a3[9];
                                  if (v257) {
                                    long long v258 = *v252;
                                  }
                                  else {
                                    long long v258 = (const void *)a3[78];
                                  }
                                  if (v257) {
                                    uint64_t v259 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v259 = a3 + 78;
                                  }
                                }
                                else
                                {
                                  uint64_t v259 = a3 + 78;
                                  long long v258 = (const void *)a3[78];
                                }
                                memcpy(*(void **)(a1 + 872), v258, v259[1]);
LABEL_461:
                                uint64_t v260 = (const void **)(a3 + 13);
                                if (a3[13])
                                {
                                  if (a3[14]) {
                                    int v261 = a3 + 13;
                                  }
                                  else {
                                    int v261 = a3 + 83;
                                  }
                                  uint64_t v262 = v261[1];
                                  if (!v262) {
                                    goto LABEL_477;
                                  }
                                }
                                else
                                {
                                  uint64_t v262 = a3[84];
                                  if (!v262) {
                                    goto LABEL_477;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v243, v262, (void *)(a1 + 1032));
                                *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                long long v263 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 912) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 928) = v263;
                                *(_OWORD *)(a1 + 937) = *(_OWORD *)&__dst[25];
                                long long v264 = *(_OWORD *)(a1 + 928);
                                *(_OWORD *)(a1 + 744) = *(_OWORD *)(a1 + 912);
                                *(_OWORD *)(a1 + 760) = v264;
                                *(_OWORD *)(a1 + 769) = *(_OWORD *)(a1 + 937);
                                if (*v260)
                                {
                                  uint64_t v265 = a3[14];
                                  if (v265) {
                                    uint64_t v266 = *v260;
                                  }
                                  else {
                                    uint64_t v266 = (const void *)a3[83];
                                  }
                                  if (v265) {
                                    int v267 = a3 + 13;
                                  }
                                  else {
                                    int v267 = a3 + 83;
                                  }
                                }
                                else
                                {
                                  int v267 = a3 + 83;
                                  uint64_t v266 = (const void *)a3[83];
                                }
                                memcpy(*(void **)(a1 + 920), v266, v267[1]);
                                uint64_t v268 = *(void *)(a1 + 928);
                                *(_OWORD *)(a1 + 792) = *(_OWORD *)(a1 + 912);
                                *(void *)(a1 + 808) = v268;
LABEL_477:
                                if (*(unsigned char *)(a1 + 600) || *(unsigned char *)(*(void *)(a1 + 8) + 7761))
                                {
                                  {
                                    {
                                      unint64_t v270 = a1 + 528;
                                      if (*(char *)(a1 + 551) < 0) {
                                        unint64_t v270 = *v505;
                                      }
                                      unint64_t v271 = a1 + 576;
                                      if (*(char *)(a1 + 599) < 0) {
                                        unint64_t v271 = v503->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v272 = a1 + 552;
                                      if (*(char *)(a1 + 575) < 0) {
                                        unint64_t v272 = *v504;
                                      }
                                      int v273 = *(_DWORD *)(a1 + 512);
                                      uint64_t v274 = *(void *)(a1 + 608);
                                      uint64_t v275 = *(void *)(a1 + 832);
                                      *(_DWORD *)std::string __dst = 136447490;
                                      *(void *)&__dst[4] = v270;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v271;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v272;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v273;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v274;
                                      *(_WORD *)unint64_t __p = 2050;
                                      *(void *)&__p[2] = v275;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v269, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  uint64_t v276 = *(void *)(a1 + 8);
                                  unint64_t v277 = a1 + 528;
                                  if (*(char *)(a1 + 551) < 0) {
                                    unint64_t v277 = *v505;
                                  }
                                  unint64_t v278 = a1 + 576;
                                  if (*(char *)(a1 + 599) < 0) {
                                    unint64_t v278 = v503->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v279 = a1 + 552;
                                  if (*(char *)(a1 + 575) < 0) {
                                    unint64_t v279 = *v504;
                                  }
                                  int v280 = *(_DWORD *)(a1 + 512);
                                  uint64_t v281 = *(void *)(a1 + 608);
                                  uint64_t v282 = *(void *)(a1 + 832);
                                  char v283 = *(unsigned char *)(a1 + 600);
                                  *(void *)std::string __dst = v277;
                                  *(void *)&__dst[8] = v278;
                                  *(void *)&__dst[16] = v279;
                                  *(_DWORD *)&__dst[24] = v280;
                                  *(void *)&__dst[32] = v281;
                                  *(void *)&__dst[40] = v282;
                                  __p[0] = v283;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v276, a1, (long long *)__dst);
                                }
                                int v284 = *(_DWORD *)(a4 + 124);
                                int v285 = *(_DWORD *)(a4 + 132);
                                int v286 = *(_DWORD *)(a4 + 140);
                                if (*(unsigned char *)(a4 + 208)) {
                                  int v287 = *(_DWORD *)(a4 + 144);
                                }
                                else {
                                  int v287 = 0;
                                }
                                if (*(_OWORD *)(a4 + 176) == 0) {
                                  int v288 = 0;
                                }
                                else {
                                  int v288 = *(_DWORD *)(a4 + 144);
                                }
                                int v289 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
                                unint64_t v290 = v287
                                     + *(_DWORD *)(a4 + 148)
                                     + v288
                                     + *(_DWORD *)(a4 + 152)
                                     + ((v284 + v285 + v286 - v289 + 3) & 0xFFFFFFFC);
                                uint64_t v291 = *(void *)(a1 + 48);
                                unint64_t v292 = (*(void *)(a1 + 56) - v291) >> 2;
                                unint64_t v293 = v513;
                                if (v290 <= v292)
                                {
                                  if (v290 < v292) {
                                    *(void *)(a1 + 56) = v291 + 4 * v290;
                                  }
                                }
                                else
                                {
                                  std::vector<unsigned int>::__append(v513, v290 - v292);
                                  int v284 = *(_DWORD *)(a4 + 124);
                                  int v285 = *(_DWORD *)(a4 + 132);
                                  int v286 = *(_DWORD *)(a4 + 140);
                                  int v289 = *(_DWORD *)(a4 + 120) + *(_DWORD *)(a4 + 128) + *(_DWORD *)(a4 + 136);
                                }
                                *(_DWORD *)(a1 + 412) = v284 + v285 + v286 - v289;
                                uint64_t v294 = *v11;
                                uint64_t v295 = *(unsigned __int16 *)((char *)v11 - v294 + 16);
                                uint64_t v296 = *(unsigned int *)((char *)v11 + v295);
                                uint64_t v297 = *(unsigned int *)((char *)v11 + v295 + v296);
                                if (v297)
                                {
                                  uint64_t v298 = 4 * v297;
                                  uint64_t v299 = v295 + v296;
                                  while (1)
                                  {
                                    uint64_t v301 = *(unsigned int *)((char *)v11 + v299 + 4);
                                    int v302 = (char *)v11 + v299 + v301;
                                    uint64_t v303 = v301 - *((int *)v302 + 1);
                                    uint64_t v304 = (char *)v11 + v299 + v303;
                                    unsigned int v305 = *((unsigned __int16 *)v304 + 2);
                                    if (v305 < 7) {
                                      break;
                                    }
                                    uint64_t v306 = *((unsigned __int16 *)v304 + 5);
                                    if (!v306 || (*(int *)((char *)v11 + v299 + v301 + v306 + 4) & 0x80000000) == 0)
                                    {
                                      if (v305 <= 8)
                                      {
                                        unsigned int v310 = -*(_DWORD *)(a4 + 120);
                                      }
                                      else
                                      {
                                        if (*(_WORD *)((char *)v11 + v299 + v303 + 12)) {
                                          int v307 = *(int *)((char *)v11
                                        }
                                                        + v299
                                                        + v301
                                                        + *(unsigned __int16 *)((char *)v11 + v299 + v303 + 12)
                                                        + 4);
                                        else {
                                          int v307 = 0;
                                        }
                                        unsigned int v310 = 4 * v307 - *(_DWORD *)(a4 + 120);
                                      }
LABEL_522:
                                      uint64_t v311 = *(unsigned __int16 *)((char *)v11 + v299 + v303 + 8);
                                      if (*(_WORD *)((char *)v11 + v299 + v303 + 8)) {
                                        LODWORD(v311) = *((char *)v11 + v299 + v301 + v311 + 4);
                                      }
                                      if (v305 >= 7
                                        && (uint64_t v312 = *(unsigned __int16 *)((char *)v11 + v299 + v303 + 10)) != 0)
                                      {
                                        int v308 = *(int *)((char *)v11 + v299 + v301 + v312 + 4);
                                        if (v311 != 6)
                                        {
                                          int v309 = 0;
                                          goto LABEL_531;
                                        }
                                      }
                                      else
                                      {
                                        int v308 = 0;
                                        if (v311 != 6)
                                        {
                                          int v309 = 0;
                                          goto LABEL_531;
                                        }
                                      }
                                      int v309 = 128;
                                      goto LABEL_531;
                                    }
LABEL_510:
                                    v299 += 4;
                                    v298 -= 4;
                                    if (!v298)
                                    {
                                      uint64_t v294 = *v11;
                                      goto LABEL_537;
                                    }
                                  }
                                  int v308 = 0;
                                  int v309 = 0;
                                  unsigned int v310 = -*(_DWORD *)(a4 + 120);
                                  if (v305 >= 5) {
                                    goto LABEL_522;
                                  }
LABEL_531:
                                  BOOL v313 = v309 + (v308 & 0xFFFFF) != 0;
                                  std::vector<unsigned int>::pointer begin = v513->__begin_;
                                  v513->__begin_[v310] = 4 * v313;
                                  begin[v310 + 1] = (4 * v313) | 1;
                                  begin[v310 + 2] = (4 * v313) | 2;
                                  begin[v310 + 3] = (4 * v313) | 3;
                                  uint64_t v315 = v301 - *((int *)v302 + 1);
                                  uint64_t v316 = (char *)v11 + v299 + v315;
                                  if (*((unsigned __int16 *)v316 + 2) >= 0xBu)
                                  {
                                    uint64_t v317 = *((unsigned __int16 *)v316 + 7);
                                    if (v317)
                                    {
                                      if (*((unsigned char *)v11 + v299 + v301 + v317 + 4))
                                      {
                                        uint64_t v318 = *(unsigned __int16 *)((char *)v11 + v299 + v315 + 10);
                                        if (v318) {
                                          int v300 = *(int *)((char *)v11 + v299 + v301 + v318 + 4);
                                        }
                                        else {
                                          int v300 = 0;
                                        }
                                        *(void *)(a1 + 480 + 8 * ((v300 & 0xFFFC0) != 0)) |= 1 << v300;
                                      }
                                    }
                                  }
                                  goto LABEL_510;
                                }
LABEL_537:
                                uint64_t v319 = -v294;
                                uint64_t v320 = (char *)v11 + v319;
                                if (*(unsigned char *)(a1 + 454))
                                {
                                  uint64_t v321 = *((unsigned __int16 *)v320 + 12);
                                  uint64_t v322 = *(unsigned int *)((char *)v11 + v321);
                                  uint64_t v323 = (unsigned int *)((char *)v11 + v321 + v322);
                                  uint64_t v324 = *v323;
                                  if (v324)
                                  {
                                    unint64_t v325 = 0;
                                    uint64_t v326 = 4 * v324;
                                    uint64_t v327 = (char *)v11 + v321 + v322;
                                    while (1)
                                    {
                                      uint64_t v328 = v323[v325 / 4 + 1];
                                      uint64_t v329 = v328 - *(int *)((char *)&v323[v325 / 4 + 1] + v328);
                                      uint64_t v330 = &v327[v325 + v329];
                                      unsigned int v331 = *((unsigned __int16 *)v330 + 2);
                                      if (v331 >= 5)
                                      {
                                        uint64_t v332 = *((unsigned __int16 *)v330 + 4);
                                        if (v332)
                                        {
                                          if (v327[v325 + 4 + v328 + v332] == 93)
                                          {
                                            if (v331 < 7) {
                                              break;
                                            }
                                            uint64_t v333 = *(unsigned __int16 *)&v327[v325 + 10 + v329];
                                            if (!v333) {
                                              break;
                                            }
                                            int v334 = *(_DWORD *)&v327[v325 + 4 + v328 + v333];
                                            if ((v334 & 0x80000000) == 0 && (v334 & 0xFFF00000) != 0x400000) {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                      v325 += 4;
                                      if (v326 == v325) {
                                        goto LABEL_549;
                                      }
                                    }
                                    *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), *(int8x16_t *)(a1 + 496));
                                  }
                                }
LABEL_549:
                                uint64_t v335 = *((unsigned __int16 *)v320 + 10);
                                uint64_t v336 = *(unsigned int *)((char *)v11 + v335);
                                uint64_t v337 = *(unsigned int *)((char *)v11 + v335 + v336);
                                if (!v337) {
                                  goto LABEL_565;
                                }
                                uint64_t v338 = 4 * v337;
                                uint64_t v339 = v335 + v336;
                                while (2)
                                {
                                  uint64_t v340 = *(unsigned int *)((char *)v11 + v339 + 4);
                                  uint64_t v341 = v340 - *(int *)((char *)v11 + v339 + v340 + 4);
                                  uint64_t v342 = (char *)v11 + v339 + v341;
                                  unsigned int v343 = *((unsigned __int16 *)v342 + 2);
                                  if (v343 < 7) {
                                    goto LABEL_558;
                                  }
                                  uint64_t v344 = *((unsigned __int16 *)v342 + 5);
                                  if (v344 && *(int *)((char *)v11 + v339 + v340 + v344 + 4) < 0) {
                                    goto LABEL_551;
                                  }
                                  if (v343 < 9 || (uint64_t v345 = *(unsigned __int16 *)((char *)v11 + v339 + v341 + 12)) == 0)
                                  {
LABEL_558:
                                    int v346 = 0;
                                    goto LABEL_559;
                                  }
                                  int v346 = *(int *)((char *)v11 + v339 + v340 + v345 + 4);
LABEL_559:
                                  int v347 = *(unsigned __int8 *)(a1 + 1144);
                                  if (*(unsigned char *)(a1 + 1144)) {
                                    int v348 = 3;
                                  }
                                  else {
                                    int v348 = 1;
                                  }
                                  unsigned int v349 = *(_DWORD *)(a4 + 124)
                                       + v348 * v346
                                       - (*(_DWORD *)(a4 + 120)
                                        + *(_DWORD *)(a4 + 128));
                                  uint64_t v350 = *(void *)(a1 + 48);
                                  *(_DWORD *)(v350 + 4 * v349) = 8;
                                  if (v347)
                                  {
                                    *(_DWORD *)(v350 + 4 * (v349 + 1)) = -1;
                                    *(_DWORD *)(v350 + 4 * (v349 + 2)) = 0;
                                  }
LABEL_551:
                                  v339 += 4;
                                  v338 -= 4;
                                  if (v338) {
                                    continue;
                                  }
                                  break;
                                }
                                uint64_t v319 = -(uint64_t)*v11;
LABEL_565:
                                unint64_t v510 = a1 + 464;
                                int v351 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 + v319 + 12));
                                uint64_t v352 = *v351;
                                std::vector<unsigned int>::pointer v354 = (unsigned int *)((char *)v351 + v352 + 4);
                                uint64_t v353 = *(unsigned int *)((char *)v351 + v352);
                                if (v353)
                                {
                                  unsigned __int32 v355 = &v354[v353];
                                  while (1)
                                  {
                                    uint64_t v356 = (int *)((char *)v354 + *v354);
                                    uint64_t v357 = (unsigned __int16 *)((char *)v356 - *v356);
                                    unsigned int v358 = *v357;
                                    if (v358 < 7)
                                    {
                                      LODWORD(v359) = 0;
                                      goto LABEL_577;
                                    }
                                    if (!v357[3] || (*(int *)((char *)v356 + v357[3]) & 0x80000000) == 0) {
                                      break;
                                    }
LABEL_569:
                                    if (++v354 == v355) {
                                      goto LABEL_609;
                                    }
                                  }
                                  if (v358 < 9)
                                  {
                                    LODWORD(v359) = 0;
                                    goto LABEL_578;
                                  }
                                  uint64_t v359 = v357[4];
                                  if (v357[4])
                                  {
                                    LODWORD(v359) = *(int *)((char *)v356 + v359);
                                    goto LABEL_578;
                                  }
LABEL_577:
                                  if (v358 < 7)
                                  {
                                    LODWORD(v360) = 0;
                                  }
                                  else
                                  {
LABEL_578:
                                    uint64_t v360 = v357[3];
                                    if (v360)
                                    {
                                      LODWORD(v360) = *(int *)((char *)v356 + v360) & 0xFFFFF;
                                      switch(v360)
                                      {
                                        case '1':
                                          int v361 = 13;
                                          goto LABEL_586;
                                        case '5':
                                          int v361 = 15;
                                          goto LABEL_586;
                                        case '2':
                                          int v361 = 14;
LABEL_586:
                                          unsigned int v362 = ((v359 >> 1) & 0x1FFFFFFF)
                                               + *(_DWORD *)(a4 + 124)
                                               + *(_DWORD *)(a4 + 132)
                                               - (*(_DWORD *)(a4 + 120)
                                                + *(_DWORD *)(a4 + 128)
                                                + *(_DWORD *)(a4 + 136));
                                          v293->__begin_[v362] = v361;
                                          uint64_t v363 = (unsigned __int16 *)((char *)v356 - *v356);
                                          if (*v363 >= 0xBu)
                                          {
                                            uint64_t v364 = v363[5];
                                            if (v364)
                                            {
                                              if (*((unsigned char *)v356 + v364)) {
                                                *(void *)(v510 + 8 * (v360 > 0x3F)) |= 1 << v360;
                                              }
                                            }
                                          }
                                          if (*(unsigned char *)(a1 + 1147))
                                          {
                                            int v365 = *v514;
                                            if (!*v514) {
LABEL_779:
                                            }
                                              abort();
                                            unsigned int v366 = (2 * v362) | 1;
                                            while (1)
                                            {
                                              while (1)
                                              {
                                                unsigned int v367 = *((_DWORD *)v365 + 7);
                                                if (v360 >= v367) {
                                                  break;
                                                }
                                                int v365 = (uint64_t *)*v365;
                                                if (!v365) {
                                                  goto LABEL_779;
                                                }
                                              }
                                              if (v367 >= v360) {
                                                break;
                                              }
                                              int v365 = (uint64_t *)v365[1];
                                              if (!v365) {
                                                goto LABEL_779;
                                              }
                                            }
                                            int v368 = *((_DWORD *)v365 + 8);
                                            int v369 = (uint64_t **)(a1 + 272);
LABEL_599:
                                            uint64_t v370 = *v369;
                                            long long v371 = v369;
                                            if (*v369)
                                            {
                                              while (1)
                                              {
                                                int v369 = (uint64_t **)v370;
                                                unsigned int v372 = *((_DWORD *)v370 + 7);
                                                if (v366 < v372) {
                                                  goto LABEL_599;
                                                }
                                                if (v372 >= v366) {
                                                  break;
                                                }
                                                uint64_t v370 = v369[1];
                                                if (!v370)
                                                {
                                                  long long v371 = v369 + 1;
                                                  goto LABEL_604;
                                                }
                                              }
                                              unsigned int v373 = v369;
                                            }
                                            else
                                            {
LABEL_604:
                                              unsigned int v373 = operator new(0x28uLL);
                                              v373[7] = v366;
                                              v373[8] = 0;
                                              *(void *)unsigned int v373 = 0;
                                              *((void *)v373 + 1) = 0;
                                              *((void *)v373 + 2) = v369;
                                              uint64_t *v371 = (uint64_t *)v373;
                                              uint64_t v374 = **(void **)(a1 + 264);
                                              int v375 = (uint64_t *)v373;
                                              if (v374)
                                              {
                                                *(void *)(a1 + 264) = v374;
                                                int v375 = *v371;
                                              }
                                              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v375);
                                              ++*(void *)(a1 + 280);
                                            }
                                            v373[8] = v368;
                                            unint64_t v293 = v513;
                                          }
                                          goto LABEL_569;
                                      }
                                    }
                                  }
                                  int v361 = 9;
                                  goto LABEL_586;
                                }
LABEL_609:
                                uint64_t v376 = *(void *)(a4 + 160);
                                uint64_t v377 = *(void *)(a4 + 168);
                                unsigned int v378 = v508;
                                if (*(_OWORD *)(a4 + 160) != 0)
                                {
                                  int v379 = *(unsigned __int8 *)(a4 + 208);
                                  int v380 = *(_DWORD *)(a4 + 144);
                                  if (!*(unsigned char *)(a4 + 208)) {
                                    goto LABEL_621;
                                  }
                                  if (v380)
                                  {
                                    unsigned int v381 = (*(_DWORD *)(a4 + 124)
                                          + *(_DWORD *)(a4 + 132)
                                          + *(_DWORD *)(a4 + 140)
                                          - (*(_DWORD *)(a4 + 120)
                                           + *(_DWORD *)(a4 + 128)
                                           + *(_DWORD *)(a4 + 136))
                                          + 3) & 0xFFFFFFFC;
                                    uint64_t v382 = *(void *)(a4 + 168);
                                    unint64_t v383 = *(void *)(a4 + 160);
                                    while (1)
                                    {
                                      if (v383)
                                      {
                                        unint64_t v384 = __clz(__rbit64(v383));
                                        v383 &= ~(1 << v384);
                                        int v385 = 4 * (v384 != 0);
                                      }
                                      else
                                      {
                                        if (!v382)
                                        {
                                          int v380 = *(_DWORD *)(a4 + 144);
                                          int v379 = v380;
                                          goto LABEL_621;
                                        }
                                        unint64_t v383 = 0;
                                        v382 &= v382 - 1;
                                        int v385 = 4;
                                      }
                                      std::vector<unsigned int>::pointer v386 = v293->__begin_;
                                      v293->__begin_[v381] = v385;
                                      v386[v381 + 1] = v385 | 1;
                                      v386[v381 + 2] = v385 | 2;
                                      v386[v381 + 3] = v385 | 3;
                                      v381 += 4;
                                    }
                                  }
                                  int v379 = 0;
LABEL_621:
                                  int8x16_t v387 = *(int8x16_t *)(a4 + 176);
                                  if (*(_OWORD *)&v387 != 0 && v380 != 0)
                                  {
                                    int v454 = ((*(_DWORD *)(a4 + 140)
                                           + *(_DWORD *)(a4 + 132)
                                           - (*(_DWORD *)(a4 + 136)
                                            + *(_DWORD *)(a4 + 128)
                                            + *(_DWORD *)(a4 + 120))
                                           + *(_DWORD *)(a4 + 124)
                                           + 3) & 0xFFFFFFFC)
                                         + v379;
                                    *(void *)std::string __dst = v376;
                                    *(void *)unint64_t v517 = v377;
                                    while (1)
                                    {
                                      if (v376)
                                      {
                                        uint64_t v455 = __dst;
                                      }
                                      else
                                      {
                                        uint64_t v376 = *(void *)v517;
                                        if (!*(void *)v517) {
                                          break;
                                        }
                                        uint64_t v455 = v517;
                                      }
                                      *(void *)uint64_t v455 = v376 & (v376 - 1);
                                      std::vector<unsigned int>::pointer v456 = v293->__begin_;
                                      v293->__begin_[v454] = 4;
                                      v456[v454 + 1] = 5;
                                      v456[v454 + 2] = 6;
                                      v456[v454 + 3] = 7;
                                      v454 += 4;
                                      uint64_t v376 = *(void *)__dst;
                                    }
                                  }
                                  *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), v387);
                                }
                                if (*(_DWORD *)(a4 + 148))
                                {
                                  int v389 = *(_DWORD *)(a4 + 144);
                                  if (*(unsigned char *)(a4 + 208)) {
                                    int v390 = *(_DWORD *)(a4 + 144);
                                  }
                                  else {
                                    int v390 = 0;
                                  }
                                  if (*(_OWORD *)(a4 + 176) == 0) {
                                    int v389 = 0;
                                  }
                                  unsigned int v391 = v390
                                       + v389
                                       + ((*(_DWORD *)(a4 + 124)
                                         + *(_DWORD *)(a4 + 132)
                                         + *(_DWORD *)(a4 + 140)
                                         - (*(_DWORD *)(a4 + 120)
                                          + *(_DWORD *)(a4 + 128)
                                          + *(_DWORD *)(a4 + 136))
                                         + 3) & 0xFFFFFFFC);
                                  uint64_t v393 = *(void *)(a4 + 192);
                                  uint64_t v392 = *(void *)(a4 + 200);
                                  *(void *)std::string __dst = v393;
                                  *(void *)unint64_t v517 = v392;
                                  while (1)
                                  {
                                    if (v393)
                                    {
                                      uint64_t v394 = __dst;
                                    }
                                    else
                                    {
                                      uint64_t v393 = *(void *)v517;
                                      if (!*(void *)v517) {
                                        break;
                                      }
                                      uint64_t v394 = v517;
                                    }
                                    *(void *)uint64_t v394 = v393 & (v393 - 1);
                                    uint64_t v395 = *(void *)(a1 + 48);
                                    *(_DWORD *)(v395 + 4 * v391) = 8;
                                    if (*(unsigned char *)(a1 + 1144))
                                    {
                                      *(_DWORD *)(v395 + 4 * (v391 + 1)) = -1;
                                      *(_DWORD *)(v395 + 4 * (v391 + 2)) = 0;
                                    }
                                    v391 += 4;
                                    uint64_t v393 = *(void *)__dst;
                                  }
                                }
                                int v396 = *v11;
                                if (*(unsigned char *)(a4 + 467))
                                {
                                  unsigned int v397 = (unsigned __int16 *)((char *)v11 - v396);
                                  if (*v397 < 0x67u)
                                  {
                                    unint64_t v398 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v398 = v397[51];
                                    if (v398) {
                                      unint64_t v398 = *(void *)((char *)v11 + v398);
                                    }
                                  }
                                  int v399 = 128 - 2 * __clz(v398);
                                  if (*(_DWORD *)(a1 + 208) > v399) {
                                    int v399 = *(_DWORD *)(a1 + 208);
                                  }
                                  *(_DWORD *)(a1 + 208) = v399;
                                  int v400 = (unsigned __int16 *)((char *)v11 - *v11);
                                  if (*v400 < 0x17u)
                                  {
                                    LODWORD(v401) = 0;
                                  }
                                  else
                                  {
                                    unint64_t v401 = v400[11];
                                    if (v401) {
                                      unint64_t v401 = ((unint64_t)*(unsigned int *)((char *)v11 + v401) + 3) >> 2;
                                    }
                                  }
                                  *(_DWORD *)(a1 + 200) = v401;
                                  *(_DWORD *)(a1 + 204) = 18;
                                  int v396 = *v11;
                                }
                                int v402 = (unsigned __int16 *)((char *)v11 - v396);
                                if (*v402 >= 0x17u && (uint64_t v403 = v402[11]) != 0)
                                {
                                  unint64_t v404 = ((unint64_t)*(unsigned int *)((char *)v11 + v403) + 3) >> 2;
                                  uint64_t v405 = (void *)(a1 + 80);
                                  uint64_t v406 = *(void *)(a1 + 72);
                                  unint64_t v407 = (*(void *)(a1 + 80) - v406) >> 2;
                                  if (v404 > v407)
                                  {
                                    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 72), v404 - v407);
                                    goto LABEL_660;
                                  }
                                }
                                else
                                {
                                  unint64_t v404 = 0;
                                  uint64_t v405 = (void *)(a1 + 80);
                                  uint64_t v406 = *(void *)(a1 + 72);
                                  unint64_t v407 = (*(void *)(a1 + 80) - v406) >> 2;
                                }
                                if (v407 > v404) {
                                  *uint64_t v405 = v406 + 4 * v404;
                                }
LABEL_660:
                                if (v502 != (void *)(a4 + 216)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v502, *(char **)(a4 + 216), *(char **)(a4 + 224), (uint64_t)(*(void *)(a4 + 224) - *(void *)(a4 + 216)) >> 2);
                                }
                                if (v501 != (void *)(a4 + 240)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v501, *(char **)(a4 + 240), *(char **)(a4 + 248), (uint64_t)(*(void *)(a4 + 248) - *(void *)(a4 + 240)) >> 2);
                                }
                                if (v500 != (void *)(a4 + 320)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v500, *(char **)(a4 + 320), *(char **)(a4 + 328), (uint64_t)(*(void *)(a4 + 328) - *(void *)(a4 + 320)) >> 1);
                                }
                                if (v499 != (void *)(a4 + 368)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v499, *(char **)(a4 + 368), *(char **)(a4 + 376), (uint64_t)(*(void *)(a4 + 376) - *(void *)(a4 + 368)) >> 1);
                                }
                                *(unsigned char *)(a1 + 192) = *(unsigned char *)(a4 + 416);
                                *(unsigned char *)(a1 + 456) = *(_OWORD *)(a4 + 160) != 0;
                                *(unsigned char *)(a1 + 457) = *(void *)(a4 + 148) != 0;
                                uint64_t v408 = *(unsigned __int16 *)((char *)v11 - *v11 + 24);
                                uint64_t v409 = *(unsigned int *)((char *)v11 + v408);
                                unint64_t v410 = (unsigned int *)((char *)v11 + v408 + v409);
                                uint64_t v411 = *v410;
                                if (v411)
                                {
                                  unint64_t v412 = 0;
                                  uint64_t v413 = 4 * v411;
                                  uint64_t v414 = (char *)v11 + v408 + v409;
                                  do
                                  {
                                    uint64_t v415 = v410[v412 / 4 + 1];
                                    uint64_t v416 = v415 - *(int *)((char *)&v410[v412 / 4 + 1] + v415);
                                    uint64_t v417 = &v414[v412 + v416];
                                    unsigned int v418 = *((unsigned __int16 *)v417 + 2);
                                    if (v418 >= 5)
                                    {
                                      uint64_t v419 = *((unsigned __int16 *)v417 + 4);
                                      if (v419)
                                      {
                                        if (v418 >= 7 && v414[v412 + 4 + v415 + v419] == 139)
                                        {
                                          if (*(_WORD *)&v414[v412 + 10 + v416])
                                          {
                                            int v420 = *(_DWORD *)&v414[v412
                                                                  + 4
                                                                  + v415
                                                                  + *(unsigned __int16 *)&v414[v412 + 10 + v416]];
                                            if (v418 >= 0xB) {
                                              goto LABEL_679;
                                            }
                                          }
                                          else
                                          {
                                            int v420 = 0;
                                            if (v418 >= 0xB)
                                            {
LABEL_679:
                                              uint64_t v421 = *(unsigned __int16 *)&v414[v412 + 14 + v416];
                                              if (v421 && v414[v412 + 4 + v415 + v421]) {
                                                *(void *)(v510 + 8 * ((v420 & 0xFFFC0) != 0)) |= 1 << v420;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    v412 += 4;
                                  }
                                  while (v413 != v412);
                                }
                                uint64_t v422 = *v508;
                                uint64_t v423 = -v422;
                                uint64_t v424 = (char *)v508 - v422;
                                unsigned int v425 = *(unsigned __int16 *)((char *)v508 - v422);
                                if (v425 >= 0xD)
                                {
                                  if (!*((_WORD *)v424 + 6)) {
                                    goto LABEL_725;
                                  }
                                  unsigned int v426 = (int *)((char *)v508
                                               + *((unsigned __int16 *)v424 + 6)
                                               + *(unsigned int *)((char *)v508 + *((unsigned __int16 *)v424 + 6)));
                                  unint64_t v427 = *v426;
                                  int v428 = *(unsigned char **)(a1 + 1072);
                                  if (v427 > (uint64_t)(*(void *)(a1 + 1088) - (void)v428) >> 4)
                                  {
                                    uint64_t v429 = *(unsigned char **)(a1 + 1080);
                                    unint64_t v430 = (char *)operator new(16 * v427);
                                    uint64_t v431 = &v430[(v429 - v428) & 0xFFFFFFFFFFFFFFF0];
                                    uint64_t v432 = v431;
                                    if (v429 != v428)
                                    {
                                      unint64_t v433 = &v430[(v429 - v428) & 0xFFFFFFFFFFFFFFF0];
                                      do
                                      {
                                        uint64_t v432 = v433 - 16;
                                        *((_OWORD *)v433 - 1) = *((_OWORD *)v429 - 1);
                                        v429 -= 16;
                                        v433 -= 16;
                                      }
                                      while (v429 != v428);
                                    }
                                    *(void *)(a1 + 1072) = v432;
                                    *(void *)(a1 + 1080) = v431;
                                    *(void *)(a1 + 1088) = &v430[16 * v427];
                                    if (v428) {
                                      operator delete(v428);
                                    }
                                  }
                                  unsigned int v434 = 0;
                                  uint64_t v435 = *v508;
                                  unsigned int v436 = *(unsigned __int16 *)((char *)v508 - v435);
                                  if (v436 < 0x41)
                                  {
LABEL_693:
                                    if (!*v426) {
                                      goto LABEL_731;
                                    }
                                  }
                                  else
                                  {
                                    if (*(_WORD *)((char *)v508 - v435 + 64))
                                    {
                                      uint64_t v437 = (unsigned int *)((char *)v508
                                                            + *(unsigned __int16 *)((char *)v508 - v435 + 64));
                                      unsigned int v434 = (unsigned int *)((char *)v437 + *v437);
                                      goto LABEL_693;
                                    }
                                    unsigned int v434 = 0;
                                    if (!*v426)
                                    {
LABEL_731:
                                      uint64_t v423 = -v435;
                                      if (v436 < 0xB) {
                                        goto LABEL_776;
                                      }
LABEL_725:
                                      if (!*(_WORD *)((char *)v378 + v423 + 10)) {
                                        goto LABEL_776;
                                      }
                                      unint64_t v458 = (unsigned int *)((char *)v378
                                                            + *(unsigned __int16 *)((char *)v378 + v423 + 10));
                                      uint64_t v459 = (unsigned int *)((char *)v458 + *v458);
                                      std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v506, *v459);
                                      unint64_t v460 = *v459;
                                      uint64_t v461 = *(unsigned char **)(a1 + 1096);
                                      if (v460 > (uint64_t)(*(void *)(a1 + 1112) - (void)v461) >> 3)
                                      {
                                        int v462 = *(unsigned char **)(a1 + 1104);
                                        long long v463 = (char *)operator new(8 * v460);
                                        uint64_t v464 = v462 - v461;
                                        uint64_t v465 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                        uint64_t v466 = v465;
                                        if (v462 != v461)
                                        {
                                          if ((unint64_t)(v464 - 8) < 0x58)
                                          {
                                            uint64_t v466 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                            goto LABEL_737;
                                          }
                                          uint64_t v466 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                          if ((unint64_t)(&v462[-(v464 & 0xFFFFFFFFFFFFFFF8)] - v463) < 0x20) {
                                            goto LABEL_798;
                                          }
                                          uint64_t v467 = v464 >> 3;
                                          unint64_t v468 = ((unint64_t)(v464 - 8) >> 3) + 1;
                                          uint64_t v469 = &v463[8 * v467 - 16];
                                          uint64_t v470 = (long long *)(v462 - 16);
                                          uint64_t v471 = v468 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v472 = *v470;
                                            *((_OWORD *)v469 - 1) = *(v470 - 1);
                                            *(_OWORD *)uint64_t v469 = v472;
                                            v469 -= 32;
                                            v470 -= 2;
                                            v471 -= 4;
                                          }
                                          while (v471);
                                          uint64_t v466 = &v465[-8 * (v468 & 0x3FFFFFFFFFFFFFFCLL)];
                                          v462 -= 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v468 != (v468 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_798:
                                            do
                                            {
LABEL_737:
                                              uint64_t v473 = *((void *)v462 - 1);
                                              v462 -= 8;
                                              *((void *)v466 - 1) = v473;
                                              v466 -= 8;
                                            }
                                            while (v462 != v461);
                                          }
                                        }
                                        *(void *)(a1 + 1096) = v466;
                                        *(void *)(a1 + 1104) = v465;
                                        *(void *)(a1 + 1112) = &v463[8 * v460];
                                        if (v461) {
                                          operator delete(v461);
                                        }
                                      }
                                      if (*v459)
                                      {
                                        unint64_t v474 = 0;
                                        do
                                        {
                                          AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v459[v474 + 1] + v459[v474 + 1]));
                                          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)v517, a2, (uint64_t)__dst);
                                          uint64_t v475 = *(__n128 **)(a1 + 1128);
                                          if ((unint64_t)v475 >= *(void *)(a1 + 1136))
                                          {
                                            unint64_t v477 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v506, *(__n128 *)v517);
                                          }
                                          else
                                          {
                                            v475->n128_u64[0] = *(void *)v517;
                                            uint64_t v476 = *(void *)&v517[8];
                                            v475->n128_u64[1] = *(void *)&v517[8];
                                            if (v476) {
                                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v476 + 8), 1uLL, memory_order_relaxed);
                                            }
                                            unint64_t v477 = v475 + 1;
                                          }
                                          *(void *)(a1 + 1128) = v477;
                                          uint64_t v478 = *(unsigned int *)(*(void *)v517 + 96);
                                          uint64_t v479 = *(char **)(a1 + 1104);
                                          unint64_t v480 = *(void *)(a1 + 1112);
                                          if ((unint64_t)v479 >= v480)
                                          {
                                            unint64_t v482 = *(char **)(a1 + 1096);
                                            uint64_t v483 = (v479 - v482) >> 3;
                                            unint64_t v484 = v483 + 1;
                                            if ((unint64_t)(v483 + 1) >> 61) {
                                              abort();
                                            }
                                            uint64_t v485 = v480 - (void)v482;
                                            if (v485 >> 2 > v484) {
                                              unint64_t v484 = v485 >> 2;
                                            }
                                            if ((unint64_t)v485 >= 0x7FFFFFFFFFFFFFF8) {
                                              unint64_t v486 = 0x1FFFFFFFFFFFFFFFLL;
                                            }
                                            else {
                                              unint64_t v486 = v484;
                                            }
                                            if (v486)
                                            {
                                              if (v486 >> 61) {
                                                std::__throw_bad_array_new_length[abi:nn180100]();
                                              }
                                              unint64_t v487 = v486;
                                              unint64_t v488 = operator new(8 * v486);
                                              unint64_t v486 = v487;
                                            }
                                            else
                                            {
                                              unint64_t v488 = 0;
                                            }
                                            unint64_t v489 = &v488[8 * v483];
                                            *unint64_t v489 = v478;
                                            uint64_t v481 = v489 + 1;
                                            if (v479 != v482)
                                            {
                                              unint64_t v490 = v479 - 8 - v482;
                                              if (v490 < 0x58) {
                                                goto LABEL_799;
                                              }
                                              if ((unint64_t)(v482 - v488) < 0x20) {
                                                goto LABEL_799;
                                              }
                                              uint64_t v491 = (v490 >> 3) + 1;
                                              uint64_t v492 = &v488[8 * v483 - 16];
                                              unint64_t v493 = v479 - 16;
                                              uint64_t v494 = v491 & 0x3FFFFFFFFFFFFFFCLL;
                                              do
                                              {
                                                long long v495 = *(_OWORD *)v493;
                                                *(v492 - 1) = *((_OWORD *)v493 - 1);
                                                *uint64_t v492 = v495;
                                                v492 -= 2;
                                                v493 -= 32;
                                                v494 -= 4;
                                              }
                                              while (v494);
                                              v489 -= v491 & 0x3FFFFFFFFFFFFFFCLL;
                                              v479 -= 8 * (v491 & 0x3FFFFFFFFFFFFFFCLL);
                                              if (v491 != (v491 & 0x3FFFFFFFFFFFFFFCLL))
                                              {
LABEL_799:
                                                do
                                                {
                                                  uint64_t v496 = *((void *)v479 - 1);
                                                  v479 -= 8;
                                                  *--unint64_t v489 = v496;
                                                }
                                                while (v479 != v482);
                                              }
                                            }
                                            *(void *)(a1 + 1096) = v489;
                                            *(void *)(a1 + 1104) = v481;
                                            *(void *)(a1 + 1112) = &v488[8 * v486];
                                            if (v482) {
                                              operator delete(v482);
                                            }
                                          }
                                          else
                                          {
                                            *(void *)uint64_t v479 = v478;
                                            uint64_t v481 = v479 + 8;
                                          }
                                          *(void *)(a1 + 1104) = v481;
                                          unint64_t v497 = *(std::__shared_weak_count **)&v517[8];
                                          if (*(void *)&v517[8]
                                            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v517[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                          {
                                            ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                                            std::__shared_weak_count::__release_weak(v497);
                                          }
                                          if (v521 < 0) {
                                            operator delete(*(void **)__p);
                                          }
                                          ++v474;
                                        }
                                        while (v474 < *v459);
                                      }
LABEL_776:
                                      *(unsigned char *)(a1 + 964) = 0;
                                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                        operator delete(__str.__r_.__value_.__l.__data_);
                                      }
                                      *(void *)a1 = &unk_26F852958;
                                      std::string __str = *(std::string *)(a1 + 616);
                                      __dst[23] = 0;
                                      __dst[0] = 0;
                                      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::ProgramVariantESLState(a1 + 1344, a2, a3, (const std::string *)__dst, a4, (long long *)&__str);
                                    }
                                  }
                                  unint64_t v438 = 0;
                                  uint64_t v439 = v426 + 1;
                                  unint64_t v515 = v426 + 1;
                                  do
                                  {
                                    if (v434 && *v434) {
                                      uint64_t v441 = *(void *)&v434[2 * v438 + 1];
                                    }
                                    else {
                                      uint64_t v441 = 0;
                                    }
                                    uint64_t v442 = *(void *)&v439[2 * v438];
                                    int v443 = *(void **)(a1 + 1080);
                                    unint64_t v444 = *(void *)(a1 + 1088);
                                    if ((unint64_t)v443 < v444)
                                    {
                                      *int v443 = v442;
                                      v443[1] = v441;
                                      uint64_t v440 = v443 + 2;
                                    }
                                    else
                                    {
                                      unsigned int v445 = (void *)*v507;
                                      uint64_t v446 = ((uint64_t)v443 - *v507) >> 4;
                                      unint64_t v447 = v446 + 1;
                                      if ((unint64_t)(v446 + 1) >> 60) {
                                        abort();
                                      }
                                      long long v448 = v426;
                                      uint64_t v449 = v444 - (void)v445;
                                      if (v449 >> 3 > v447) {
                                        unint64_t v447 = v449 >> 3;
                                      }
                                      if ((unint64_t)v449 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v450 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v450 = v447;
                                      }
                                      if (v450)
                                      {
                                        if (v450 >> 60) {
                                          std::__throw_bad_array_new_length[abi:nn180100]();
                                        }
                                        uint64_t v451 = (char *)operator new(16 * v450);
                                      }
                                      else
                                      {
                                        uint64_t v451 = 0;
                                      }
                                      int v452 = &v451[16 * v446];
                                      *(void *)int v452 = v442;
                                      *((void *)v452 + 1) = v441;
                                      unint64_t v453 = v452;
                                      if (v443 != v445)
                                      {
                                        do
                                        {
                                          *((_OWORD *)v453 - 1) = *((_OWORD *)v443 - 1);
                                          v453 -= 16;
                                          v443 -= 2;
                                        }
                                        while (v443 != v445);
                                        int v443 = (void *)*v507;
                                      }
                                      *(void *)(a1 + 1072) = v453;
                                      uint64_t v440 = v452 + 16;
                                      *(void *)(a1 + 1080) = v452 + 16;
                                      *(void *)(a1 + 1088) = &v451[16 * v450];
                                      unsigned int v378 = v508;
                                      if (v443) {
                                        operator delete(v443);
                                      }
                                      unsigned int v426 = v448;
                                      uint64_t v439 = v515;
                                    }
                                    *(void *)(a1 + 1080) = v440;
                                    ++v438;
                                  }
                                  while (v438 < *v426);
                                  uint64_t v457 = *v378;
                                  uint64_t v423 = -v457;
                                  unsigned int v425 = *(unsigned __int16 *)((char *)v378 - v457);
                                }
                                if (v425 < 0xB) {
                                  goto LABEL_776;
                                }
                                goto LABEL_725;
                              }
                            }
                          }
LABEL_385:
                          if (v186 < 0x21) {
                            goto LABEL_359;
                          }
                          goto LABEL_386;
                        }
LABEL_384:
                        *(unsigned char *)(a1 + 1147) = 0;
                        goto LABEL_385;
                      }
                    }
                  }
                  uint64_t v183 = 0;
                  goto LABEL_334;
                }
                goto LABEL_320;
              }
              if (v174 >= 0x27)
              {
                uint64_t v175 = v173[19];
                if (v173[19])
                {
                  int v177 = *((unsigned __int8 *)v11 + v175);
                  if (*((unsigned char *)v11 + v175))
                  {
                    BOOL v176 = 1;
LABEL_321:
                    LOBYTE(v175) = v177 != 0;
                    goto LABEL_322;
                  }
                }
                if (v174 >= 0x29 && (uint64_t v178 = v173[20]) != 0)
                {
                  BOOL v176 = *((unsigned char *)v11 + v178) != 0;
                  if (!v175) {
                    goto LABEL_322;
                  }
                }
                else
                {
                  BOOL v176 = 0;
                  if (!v175) {
                    goto LABEL_322;
                  }
                }
LABEL_320:
                int v177 = *((unsigned __int8 *)v11 + v175);
                goto LABEL_321;
              }
            }
            BOOL v176 = 0;
            LOBYTE(v175) = 0;
            goto LABEL_322;
          }
        }
        else
        {
          uint64_t v101 = (unsigned int **)(a3 + 108);
          int v102 = (unsigned int *)a3[108];
          if (!v102) {
            goto LABEL_259;
          }
        }
        if (v101[1])
        {
          int v103 = (int *)((char *)v102 + *v102);
          int v104 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v104 < 0xDu)
          {
            LODWORD(v105) = 0;
          }
          else
          {
            uint64_t v105 = v104[6];
            if (v105) {
              LODWORD(v105) = *(int *)((char *)v103 + v105);
            }
          }
          *(_DWORD *)(a1 + 1180) = v105;
          uint64_t v106 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v106 < 0xBu)
          {
            LODWORD(v107) = 0;
          }
          else
          {
            uint64_t v107 = v106[5];
            if (v107) {
              LODWORD(v107) = *(int *)((char *)v103 + v107);
            }
          }
          *(_DWORD *)(a1 + 1188) = v107;
          uint64_t v108 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v108 < 0x11u)
          {
            LODWORD(v109) = 0;
          }
          else
          {
            uint64_t v109 = v108[8];
            if (v109) {
              LODWORD(v109) = *(int *)((char *)v103 + v109);
            }
          }
          *(_DWORD *)(a1 + 1192) = v109;
          uint64_t v110 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v110 < 0x13u)
          {
            LODWORD(v111) = 0;
          }
          else
          {
            uint64_t v111 = v110[9];
            if (v111) {
              LODWORD(v111) = *(int *)((char *)v103 + v111);
            }
          }
          *(_DWORD *)(a1 + 1196) = v111;
          uint64_t v112 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v112 < 0x17u)
          {
            LODWORD(v113) = 0;
          }
          else
          {
            uint64_t v113 = v112[11];
            if (v113) {
              LODWORD(v113) = *(int *)((char *)v103 + v113);
            }
          }
          *(_DWORD *)(a1 + 1200) = v113;
          uint64_t v114 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v114 < 0x1Bu)
          {
            LODWORD(v115) = 0;
          }
          else
          {
            uint64_t v115 = v114[13];
            if (v115) {
              LODWORD(v115) = *(int *)((char *)v103 + v115);
            }
          }
          *(_DWORD *)(a1 + 1204) = v115;
          uint64_t v116 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v116 < 0x15u)
          {
            LODWORD(v117) = 0;
          }
          else
          {
            uint64_t v117 = v116[10];
            if (v117) {
              LODWORD(v117) = *(int *)((char *)v103 + v117);
            }
          }
          *(_DWORD *)(a1 + 1208) = v117;
          uint64_t v118 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v118 < 0x19u)
          {
            LODWORD(v119) = 0;
          }
          else
          {
            uint64_t v119 = v118[12];
            if (v119) {
              LODWORD(v119) = *(int *)((char *)v103 + v119);
            }
          }
          *(_DWORD *)(a1 + 1212) = v119;
          uint64_t v120 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v120 < 0x1Du)
          {
            LODWORD(v121) = 0;
          }
          else
          {
            uint64_t v121 = v120[14];
            if (v121) {
              LODWORD(v121) = *(int *)((char *)v103 + v121);
            }
          }
          *(_DWORD *)(a1 + 1216) = v121;
          uint64_t v122 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v122 < 0xFu)
          {
            LODWORD(v123) = 0;
          }
          else
          {
            uint64_t v123 = v122[7];
            if (v123) {
              LODWORD(v123) = *(int *)((char *)v103 + v123);
            }
          }
          *(_DWORD *)(a1 + 1220) = v123;
          uint64_t v124 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v124 < 0x1Fu)
          {
            LODWORD(v125) = 0;
          }
          else
          {
            uint64_t v125 = v124[15];
            if (v125) {
              LODWORD(v125) = *(int *)((char *)v103 + v125);
            }
          }
          *(_DWORD *)(a1 + 1224) = v125;
          uint64_t v126 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v126 < 0x21u)
          {
            LODWORD(v127) = 0;
          }
          else
          {
            uint64_t v127 = v126[16];
            if (v127) {
              LODWORD(v127) = *(int *)((char *)v103 + v127);
            }
          }
          *(_DWORD *)(a1 + 1228) = v127;
          uint64_t v128 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v128 < 0x23u)
          {
            LODWORD(v129) = 0;
          }
          else
          {
            uint64_t v129 = v128[17];
            if (v129) {
              LODWORD(v129) = *(int *)((char *)v103 + v129);
            }
          }
          *(_DWORD *)(a1 + 1232) = v129;
          uint64_t v130 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v130 < 0x25u)
          {
            LODWORD(v131) = 0;
          }
          else
          {
            uint64_t v131 = v130[18];
            if (v131) {
              LODWORD(v131) = *(int *)((char *)v103 + v131);
            }
          }
          *(_DWORD *)(a1 + 1236) = v131;
          uint64_t v132 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v132 < 0x27u)
          {
            LODWORD(v133) = 0;
          }
          else
          {
            uint64_t v133 = v132[19];
            if (v133) {
              LODWORD(v133) = *(int *)((char *)v103 + v133);
            }
          }
          *(_DWORD *)(a1 + 1240) = v133;
          uint64_t v134 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v134 < 0x29u)
          {
            LODWORD(v135) = 0;
          }
          else
          {
            uint64_t v135 = v134[20];
            if (v135) {
              LODWORD(v135) = *(int *)((char *)v103 + v135);
            }
          }
          *(_DWORD *)(a1 + 1244) = v135;
          uint64_t v136 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v136 < 0x2Bu)
          {
            LODWORD(v137) = 0;
          }
          else
          {
            uint64_t v137 = v136[21];
            if (v137) {
              LODWORD(v137) = *(int *)((char *)v103 + v137);
            }
          }
          *(_DWORD *)(a1 + 1248) = v137;
          uint64_t v138 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v138 < 7u)
          {
            LODWORD(v139) = 0;
          }
          else
          {
            uint64_t v139 = v138[3];
            if (v139) {
              LODWORD(v139) = *(int *)((char *)v103 + v139);
            }
          }
          *(_DWORD *)(a1 + 1252) = v139;
          uint64_t v140 = (unsigned __int16 *)((char *)v103 - *v103);
          if (*v140 >= 5u && (uint64_t v141 = v140[2]) != 0) {
            int v142 = *(int *)((char *)v103 + v141);
          }
          else {
            int v142 = 0;
          }
          *(_DWORD *)(a1 + 1260) = v142;
        }
        goto LABEL_259;
      }
      uint64_t v50 = (int *)((char *)*v49 + **v49);
      unint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
      unsigned int v52 = *v51;
      if (v51[2])
      {
        unsigned int v53 = (int *)((char *)v50 + v51[2] + *(unsigned int *)((char *)v50 + v51[2]));
        if (v52 < 7) {
          goto LABEL_105;
        }
      }
      else
      {
        unsigned int v53 = 0;
        if (v52 < 7) {
          goto LABEL_105;
        }
      }
      uint64_t v54 = v51[3];
      if (v54)
      {
        uint64_t v55 = (char *)v50 + v54 + *(unsigned int *)((char *)v50 + v54);
        if (!*v53) {
          goto LABEL_144;
        }
        goto LABEL_106;
      }
LABEL_105:
      uint64_t v55 = 0;
      if (!*v53) {
        goto LABEL_144;
      }
LABEL_106:
      uint64_t v56 = 0;
      unint64_t v509 = v55 + 4;
      while (1)
      {
        uint64_t v58 = (char *)&v53[v56 + 2] + v53[v56 + 1];
        size_t v59 = strlen(v58);
        if (v59 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v60 = v59;
        if (v59 >= 0x17)
        {
          uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17) {
            uint64_t v62 = v59 | 7;
          }
          uint64_t v63 = v62 + 1;
          size_t v61 = operator new(v62 + 1);
          *(void *)&__dst[16] = v63 | 0x8000000000000000;
          *(void *)std::string __dst = v61;
          *(void *)&__dst[8] = v60;
        }
        else
        {
          __dst[23] = v59;
          size_t v61 = __dst;
          if (!v59) {
            goto LABEL_117;
          }
        }
        memmove(v61, v58, v60);
LABEL_117:
        v61[v60] = 0;
        unint64_t v64 = *(void *)(a1 + 1280);
        if (v64 >= *(void *)(a1 + 1288))
        {
          unint64_t v65 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1272), (uint64_t)__dst);
          int v66 = __dst[23];
          *(void *)(a1 + 1280) = v65;
          if (v66 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v64 = *(_OWORD *)__dst;
          *(void *)(v64 + 16) = *(void *)&__dst[16];
          *(void *)(a1 + 1280) = v64 + 24;
        }
        int v67 = *(_DWORD *)&v509[4 * v56];
        int v68 = *(char **)(a1 + 1304);
        unint64_t v69 = *(void *)(a1 + 1312);
        if ((unint64_t)v68 < v69)
        {
          *(_DWORD *)int v68 = v67;
          unint64_t v57 = v68 + 4;
        }
        else
        {
          unint64_t v70 = *(char **)(a1 + 1296);
          uint64_t v71 = (v68 - v70) >> 2;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            abort();
          }
          uint64_t v73 = v69 - (void)v70;
          if (v73 >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v74 = v72;
          }
          if (v74)
          {
            if (v74 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v75 = v74;
            unint64_t v76 = operator new(4 * v74);
            unint64_t v74 = v75;
          }
          else
          {
            unint64_t v76 = 0;
          }
          unint64_t v77 = &v76[4 * v71];
          *unint64_t v77 = v67;
          unint64_t v57 = v77 + 1;
          if (v68 != v70)
          {
            unint64_t v78 = v68 - 4 - v70;
            if (v78 < 0x2C) {
              goto LABEL_800;
            }
            if ((unint64_t)(v70 - v76) < 0x20) {
              goto LABEL_800;
            }
            uint64_t v79 = (v78 >> 2) + 1;
            uint64_t v80 = &v76[4 * v71 - 16];
            int v81 = v68 - 16;
            uint64_t v82 = v79 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v83 = *(_OWORD *)v81;
              *(v80 - 1) = *((_OWORD *)v81 - 1);
              _OWORD *v80 = v83;
              v80 -= 2;
              v81 -= 32;
              v82 -= 8;
            }
            while (v82);
            v77 -= v79 & 0x7FFFFFFFFFFFFFF8;
            v68 -= 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
            if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_800:
              do
              {
                int v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *--unint64_t v77 = v84;
              }
              while (v68 != v70);
            }
          }
          *(void *)(a1 + 1296) = v77;
          *(void *)(a1 + 1304) = v57;
          *(void *)(a1 + 1312) = &v76[4 * v74];
          if (v70) {
            operator delete(v70);
          }
          uint64_t v16 = v508;
        }
        *(void *)(a1 + 1304) = v57;
        if (++v56 >= (unint64_t)*v53) {
          goto LABEL_144;
        }
      }
    }
    size_t v43 = a3[1];
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    size_t v44 = (const void *)*a3;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint8x8_t v45 = operator new(v46 + 1);
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)std::string __dst = v45;
      *(void *)&__dst[8] = v43;
    }
    else
    {
      __dst[23] = a3[1];
      uint8x8_t v45 = __dst;
      if (!v43) {
        goto LABEL_83;
      }
    }
    memmove(v45, v44, v43);
LABEL_83:
    v45[v43] = 0;
    if (*(char *)(a1 + 991) < 0) {
      operator delete(*v498);
    }
    *(_OWORD *)unint64_t v498 = *(_OWORD *)__dst;
    *(void *)(a1 + 984) = *(void *)&__dst[16];
    uint64_t v48 = a3 + 3;
    if (a3[3])
    {
      if (!a3[4]) {
        uint64_t v48 = a3 + 73;
      }
    }
    else
    {
      uint64_t v48 = a3 + 73;
    }
    *(void *)(a1 + 992) = *v48 - *a3;
    goto LABEL_91;
  }
  if (v18 < 0x45)
  {
    if (v18 < 0x3D)
    {
      LOWORD(v23) = 0;
      if (v18 < 0x3B)
      {
        LODWORD(v25) = 0;
        uint64_t v24 = 0;
        LOWORD(v22) = 0;
        LOBYTE(v26) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 288) = v25;
        __int16 v27 = v23 + v25 - 1;
        int v28 = -(int)v25;
        uint64_t v29 = *(void *)(a1 + 296);
        unint64_t v30 = (unsigned __int16)v22 | ((unint64_t)(unsigned __int16)(v28 & v27) << 32) | (v24 << 48) | (v26 << 16) | (unint64_t)(v29 & 0xFF000000);
        *(void *)(a1 + 296) = v30;
        if (v30 != v29)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v31 = -1;
          *((void *)&v31 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v31;
          *(_OWORD *)(a1 + 360) = v31;
          *(_OWORD *)(a1 + 376) = v31;
        }
        goto LABEL_56;
      }
      LOWORD(v22) = 0;
      uint64_t v24 = v17[29];
      if (!v17[29])
      {
LABEL_39:
        if (v18 < 0x3F)
        {
          LODWORD(v25) = 0;
          LOBYTE(v26) = 0;
        }
        else
        {
          uint64_t v25 = v17[31];
          if (v17[31]) {
            uint64_t v25 = *(void *)((char *)v16 + v25);
          }
          if (v18 < 0x4B)
          {
            LOBYTE(v26) = 0;
          }
          else
          {
            uint64_t v26 = v17[37];
            if (v26) {
              LODWORD(v26) = *(int *)((char *)v16 + v26);
            }
          }
        }
        goto LABEL_54;
      }
LABEL_38:
      uint64_t v24 = *(void *)((char *)v16 + v24);
      goto LABEL_39;
    }
    LOWORD(v22) = 0;
    uint64_t v23 = v17[30];
    if (v17[30]) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v22 = v17[34];
    if (v17[34]) {
      uint64_t v22 = *(void *)((char *)v16 + v22);
    }
    uint64_t v23 = v17[30];
    if (v17[30]) {
LABEL_36:
    }
      uint64_t v23 = *(void *)((char *)v16 + v23);
  }
  uint64_t v24 = v17[29];
  if (!v17[29]) {
    goto LABEL_39;
  }
  goto LABEL_38;
}

void sub_242AC049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, void **a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CompileStatistics *a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,uint64_t a28,void **a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  CompileStatistics::~CompileStatistics(a19);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v52 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a29);
  uint64_t v55 = *(void **)(v52 + 1096);
  if (v55)
  {
    *(void *)(v52 + 1104) = v55;
    operator delete(v55);
  }
  uint64_t v56 = *a31;
  if (*a31)
  {
    *(void *)(v52 + 1080) = v56;
    operator delete(v56);
  }
  if (*a10 < 0)
  {
    operator delete(*a11);
    if ((*(char *)(v52 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v52 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v52 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a25);
  if (*(char *)(v52 + 575) < 0)
  {
LABEL_8:
    operator delete(*a26);
    if ((*(char *)(v52 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a37);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a14);
      unint64_t v57 = *a21;
      if (*a21)
      {
        *(void *)(v52 + 176) = v57;
        operator delete(v57);
      }
      uint64_t v58 = *a23;
      if (*a23)
      {
        *(void *)(v52 + 152) = v58;
        operator delete(v58);
      }
      size_t v59 = *a22;
      if (*a22)
      {
        *(void *)(v52 + 128) = v59;
        operator delete(v59);
      }
      size_t v60 = *a24;
      if (*a24)
      {
        *(void *)(v52 + 104) = v60;
        operator delete(v60);
      }
      size_t v61 = *a20;
      if (*a20)
      {
        *(void *)(v52 + 80) = v61;
        operator delete(v61);
        uint64_t v62 = *v53;
        if (!*v53)
        {
LABEL_24:
          if (a52 < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v62 = *v53;
        if (!*v53) {
          goto LABEL_24;
        }
      }
      *(void *)(v52 + 56) = v62;
      operator delete(v62);
      if (a52 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a27);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v52 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::BlitVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::BlitVertexProgramVariant(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a1;
  uint64_t v527 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F853048;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  int v7 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  long long v503 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v502 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v8;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v8;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  uint64_t v507 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  unint64_t v517 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (a3[28])
  {
    unint64_t v9 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      unint64_t v9 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    unint64_t v9 = (unsigned int **)(a3 + 98);
  }
  uint64_t v10 = 0;
  if (*v9 && v9[1]) {
    uint64_t v10 = (int *)((char *)*v9 + **v9);
  }
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
    uint64_t v13 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    uint64_t v13 = 0;
  }
  if (a3[58])
  {
    unint64_t v14 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v14 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v14 = (unsigned int **)(a3 + 128);
  }
  uint64_t v15 = 0;
  if (*v14 && v14[1]) {
    uint64_t v15 = (int *)((char *)*v14 + **v14);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    unsigned int v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    unsigned int v18 = 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  unsigned int v20 = *v19;
  if (v20 < 0x25)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v19[18];
    if (v19[18]) {
      LOBYTE(v21) = *((unsigned char *)v18 + v21) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v21;
  uint64_t v22 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v22 < 0x55u || (uint64_t v23 = v22[42]) == 0 || !*((unsigned char *)v13 + v23))
  {
LABEL_56:
    uint64_t v34 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v34 < 7u)
    {
      LODWORD(v35) = 0;
    }
    else
    {
      uint64_t v35 = v34[3];
      if (v35) {
        LODWORD(v35) = *(int *)((char *)v18 + v35);
      }
    }
    long long v500 = (void *)(a1 + 168);
    int8x16_t v501 = (void *)(a1 + 120);
    uint64_t v509 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v35;
    uint64_t v36 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v36 >= 0x13u && (uint64_t v37 = v36[9]) != 0) {
      uint64_t v38 = (char *)v18 + v37 + *(unsigned int *)((char *)v18 + v37) + 4;
    }
    else {
      uint64_t v38 = "";
    }
    unint64_t v505 = (std::string *)(a1 + 576);
    uint64_t v506 = (unint64_t *)(a1 + 552);
    uint64_t v499 = (void **)(a1 + 968);
    unint64_t v510 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v507, v38);
    uint64_t v39 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
      uint64_t v41 = (char *)v18 + v40 + *(unsigned int *)((char *)v18 + v40) + 4;
    }
    else {
      uint64_t v41 = "";
    }
    MEMORY[0x24566EB20](v506, v41);
    uint64_t v42 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v42 < 0x29u)
    {
      LOBYTE(v43) = 0;
    }
    else
    {
      uint64_t v43 = v42[20];
      if (v43) {
        LOBYTE(v43) = *((unsigned char *)v18 + v43) != 0;
      }
    }
    *(unsigned char *)(v6 + 600) = v43;
    std::string::operator=(v505, &__str);
    uint64_t v504 = a2;
    size_t v44 = (unsigned __int16 *)((char *)v18 - *v18);
    uint64_t v514 = v7;
    v519 = v13;
    if (*v44 < 5u || !v44[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_91:
      if (a3[43])
      {
        unint64_t v52 = v6 + 1048;
        unsigned int v53 = (unsigned int **)(a3 + 43);
        if (!a3[44]) {
          unsigned int v53 = (unsigned int **)(a3 + 113);
        }
      }
      else
      {
        unint64_t v52 = v6 + 1048;
        unsigned int v53 = (unsigned int **)(a3 + 113);
      }
      uint64_t v521 = v4;
      uint64_t v516 = v18;
      if (!*v53 || !v53[1]) {
        goto LABEL_144;
      }
      uint64_t v54 = (int *)((char *)*v53 + **v53);
      uint64_t v55 = (unsigned __int16 *)((char *)v54 - *v54);
      unsigned int v56 = *v55;
      if (v55[2])
      {
        uint64_t v512 = (int *)((char *)v54 + v55[2] + *(unsigned int *)((char *)v54 + v55[2]));
        if (v56 < 7) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v512 = 0;
        if (v56 < 7) {
          goto LABEL_104;
        }
      }
      uint64_t v57 = v55[3];
      if (v57)
      {
        uint64_t v58 = (char *)v54 + v57 + *(unsigned int *)((char *)v54 + v57);
        goto LABEL_105;
      }
LABEL_104:
      uint64_t v58 = 0;
LABEL_105:
      if (*v512)
      {
        unint64_t v59 = 0;
        v511 = v58 + 4;
        while (1)
        {
          size_t v61 = (char *)&v512[v59 + 2] + v512[v59 + 1];
          size_t v62 = strlen(v61);
          if (v62 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          size_t v63 = v62;
          if (v62 >= 0x17) {
            break;
          }
          __dst[23] = v62;
          unint64_t v64 = __dst;
          if (v62) {
            goto LABEL_116;
          }
LABEL_117:
          v64[v63] = 0;
          unint64_t v67 = *(void *)(v6 + 1280);
          if (v67 >= *(void *)(v6 + 1288))
          {
            int v68 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(v6 + 1272), (uint64_t)__dst);
            int v69 = __dst[23];
            *(void *)(v6 + 1280) = v68;
            if (v69 < 0) {
              operator delete(*(void **)__dst);
            }
          }
          else
          {
            *(_OWORD *)unint64_t v67 = *(_OWORD *)__dst;
            *(void *)(v67 + 16) = *(void *)&__dst[16];
            *(void *)(v6 + 1280) = v67 + 24;
          }
          int v70 = *(_DWORD *)&v511[4 * v59];
          uint64_t v71 = *(char **)(v6 + 1304);
          unint64_t v72 = *(void *)(v6 + 1312);
          if ((unint64_t)v71 >= v72)
          {
            uint64_t v73 = *(char **)(v6 + 1296);
            uint64_t v74 = (v71 - v73) >> 2;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62) {
              abort();
            }
            uint64_t v76 = v72 - (void)v73;
            if (v76 >> 1 > v75) {
              unint64_t v75 = v76 >> 1;
            }
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v75;
            }
            if (v77)
            {
              if (v77 >> 62) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v78 = operator new(4 * v77);
            }
            else
            {
              unint64_t v78 = 0;
            }
            uint64_t v79 = &v78[4 * v74];
            *uint64_t v79 = v70;
            size_t v60 = v79 + 1;
            if (v71 == v73)
            {
              uint64_t v4 = v521;
            }
            else
            {
              unint64_t v80 = v71 - 4 - v73;
              if (v80 < 0x2C)
              {
                uint64_t v4 = v521;
                goto LABEL_140;
              }
              uint64_t v4 = v521;
              if ((unint64_t)(v73 - v78) < 0x20) {
                goto LABEL_785;
              }
              uint64_t v81 = (v80 >> 2) + 1;
              uint64_t v82 = &v78[4 * v74 - 16];
              long long v83 = v71 - 16;
              uint64_t v84 = v81 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v85 = *(_OWORD *)v83;
                *(v82 - 1) = *((_OWORD *)v83 - 1);
                *uint64_t v82 = v85;
                v82 -= 2;
                v83 -= 32;
                v84 -= 8;
              }
              while (v84);
              v79 -= v81 & 0x7FFFFFFFFFFFFFF8;
              v71 -= 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
              if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_785:
                do
                {
LABEL_140:
                  int v86 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *--uint64_t v79 = v86;
                }
                while (v71 != v73);
              }
            }
            *(void *)(v6 + 1296) = v79;
            *(void *)(v6 + 1304) = v60;
            *(void *)(v6 + 1312) = &v78[4 * v77];
            if (v73) {
              operator delete(v73);
            }
            unsigned int v18 = v516;
            goto LABEL_108;
          }
          *(_DWORD *)uint64_t v71 = v70;
          size_t v60 = v71 + 4;
LABEL_108:
          *(void *)(v6 + 1304) = v60;
          ++v59;
          uint64_t v13 = v519;
          if (v59 >= *v512) {
            goto LABEL_144;
          }
        }
        uint64_t v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17) {
          uint64_t v65 = v62 | 7;
        }
        uint64_t v66 = v65 + 1;
        unint64_t v64 = operator new(v65 + 1);
        *(void *)&__dst[8] = v63;
        *(void *)&__dst[16] = v66 | 0x8000000000000000;
        *(void *)std::string __dst = v64;
LABEL_116:
        memmove(v64, v61, v63);
        goto LABEL_117;
      }
LABEL_144:
      if (a3[68])
      {
        uint64_t v87 = (unsigned int **)(a3 + 68);
        if (!a3[69]) {
          uint64_t v87 = (unsigned int **)(a3 + 138);
        }
      }
      else
      {
        uint64_t v87 = (unsigned int **)(a3 + 138);
      }
      BOOL v89 = *v87;
      BOOL v88 = v87[1];
      if (v89) {
        BOOL v90 = v88 == 0;
      }
      else {
        BOOL v90 = 1;
      }
      if (v90
        || (uint64_t v91 = (int *)((char *)v89 + *v89), v92 = (unsigned __int16 *)((char *)v91 - *v91), *v92 < 5u)
        || (uint64_t v93 = v92[2]) == 0)
      {
        uint64_t v94 = 0;
      }
      else
      {
        uint64_t v94 = *(void *)((char *)v91 + v93);
      }
      if (getTimebaseInfo(void)::once != -1) {
        dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
      }
      *(float *)(v6 + 1184) = (float)(v94
                                    * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                    / *(unsigned int *)algn_268D5B048)
                            / 1000000.0;
      uint64_t v95 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v95 < 5u)
      {
        LODWORD(v96) = 0;
      }
      else
      {
        uint64_t v96 = v95[2];
        if (v96) {
          LODWORD(v96) = *(int *)((char *)v13 + v96);
        }
      }
      *(_DWORD *)(v6 + 1176) = v96;
      uint64_t v97 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v97 < 0x2Du)
      {
        LODWORD(v98) = 0;
      }
      else
      {
        uint64_t v98 = v97[22];
        if (v98) {
          LODWORD(v98) = *(int *)((char *)v13 + v98);
        }
      }
      *(_DWORD *)(v6 + 1180) = v98;
      uint64_t v99 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v99 < 0x35u)
      {
        LODWORD(v100) = 0;
      }
      else
      {
        uint64_t v100 = v99[26];
        if (v100) {
          LODWORD(v100) = *(int *)((char *)v13 + v100);
        }
      }
      *(_DWORD *)(v6 + 1220) = v100;
      uint64_t v101 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v101 < 0x43u)
      {
        LODWORD(v102) = 0;
        int v103 = a3;
      }
      else
      {
        uint64_t v102 = v101[33];
        int v103 = a3;
        if (v102) {
          LODWORD(v102) = *(int *)((char *)v13 + v102);
        }
      }
      *(_DWORD *)(v6 + 1256) = v102;
      if (v103[38])
      {
        int v104 = (unsigned int **)(v103 + 38);
        if (!v103[39]) {
          int v104 = (unsigned int **)(v103 + 108);
        }
        uint64_t v105 = *v104;
        if (!*v104)
        {
LABEL_259:
          if (a3[53])
          {
            uint64_t v146 = a3[54];
            if (v146) {
              uint64_t v147 = a3[53];
            }
            else {
              uint64_t v147 = a3[123];
            }
            if (v146) {
              unsigned int v148 = a3 + 53;
            }
            else {
              unsigned int v148 = a3 + 123;
            }
          }
          else
          {
            unsigned int v148 = a3 + 123;
            uint64_t v147 = a3[123];
          }
          MEMORY[0x24566EB30](v6 + 1320, v147, v148[1]);
          std::string::push_back((std::string *)(v6 + 1320), 0);
          uint64_t v149 = *v13;
          uint64_t v150 = (char *)v13 - v149;
          unsigned int v151 = *(unsigned __int16 *)((char *)v13 - v149);
          if (v151 < 0x39) {
            goto LABEL_285;
          }
          uint64_t v152 = -v149;
          uint64_t v153 = *((unsigned __int16 *)v150 + 28);
          if (v153)
          {
            uint64_t v154 = (int *)((char *)v13 + v153 + *(unsigned int *)((char *)v13 + v153));
            if (*v154)
            {
              *(unsigned char *)(v6 + 1064) = 1;
              int v155 = (_DWORD *)((char *)v154 + v154[1] + 4);
              uint64_t v156 = (unsigned __int16 *)((char *)v155 - *v155);
              if (*v156 >= 9u && (uint64_t v157 = v156[4]) != 0) {
                int v158 = *(int *)((char *)v155 + v157);
              }
              else {
                int v158 = 0;
              }
              *(_DWORD *)(v6 + 1264) = v158;
              *(unsigned char *)(v6 + 1268) = 1;
              uint64_t v159 = *v13;
              uint64_t v152 = -v159;
              unsigned int v151 = *(unsigned __int16 *)((char *)v13 - v159);
            }
          }
          if (v151 < 0x3B) {
            goto LABEL_285;
          }
          uint64_t v160 = (char *)v13 + v152;
          if (*((_WORD *)v160 + 29))
          {
            unsigned int v161 = (unsigned int *)((char *)v13
                                  + *((unsigned __int16 *)v160 + 29)
                                  + *(unsigned int *)((char *)v13 + *((unsigned __int16 *)v160 + 29)));
            uint64_t v162 = *v161;
            if (v162)
            {
              uint64_t v163 = v161 + 1;
              do
              {
                unsigned int v165 = *v163++;
                unsigned int v164 = v165;
                if (!(v165 >> 20)) {
                  *(void *)(v52 + 8 * (v164 > 0x3F)) |= 1 << v164;
                }
                --v162;
              }
              while (v162);
            }
          }
          if (v151 < 0x57)
          {
LABEL_285:
            LODWORD(v166) = 0;
          }
          else
          {
            uint64_t v166 = *((unsigned __int16 *)v160 + 43);
            if (*((_WORD *)v160 + 43)) {
              LODWORD(v166) = *(int *)((char *)v13 + v166);
            }
          }
          *(_DWORD *)(v6 + 400) = v166;
          int v167 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v167 >= 0x21u && (uint64_t v168 = v167[16]) != 0) {
            int v169 = *(int *)((char *)v13 + v168);
          }
          else {
            int v169 = 0;
          }
          {
            getAdditionalSpillBufferBytes(void)::extra = 0;
          }
          *(_DWORD *)(v6 + 404) = getAdditionalSpillBufferBytes(void)::extra + v169;
          uint64_t v170 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v170 < 0x59u)
          {
            LODWORD(v171) = 0;
          }
          else
          {
            uint64_t v171 = v170[44];
            if (v171) {
              LODWORD(v171) = *(int *)((char *)v13 + v171);
            }
          }
          *(_DWORD *)(v6 + 432) = v171;
          uint64_t v172 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v172 < 0x51u)
          {
            LODWORD(v173) = 0;
          }
          else
          {
            uint64_t v173 = v172[40];
            if (v173) {
              LODWORD(v173) = *(int *)((char *)v13 + v173);
            }
          }
          *(_DWORD *)(v6 + 436) = v173;
          unsigned int v174 = (unsigned __int16 *)((char *)v13 - *v13);
          if (*v174 < 0x4Bu)
          {
            LODWORD(v175) = 0;
          }
          else
          {
            uint64_t v175 = v174[37];
            if (v175) {
              LODWORD(v175) = *(int *)((char *)v13 + v175);
            }
          }
          *(_DWORD *)(v6 + 444) = v175;
          BOOL v176 = (unsigned __int16 *)((char *)v13 - *v13);
          unsigned int v177 = *v176;
          if (v177 >= 0x25)
          {
            if (v176[18] && *((unsigned char *)v13 + v176[18]))
            {
              if (v177 < 0x27)
              {
                LOBYTE(v178) = 0;
                BOOL v179 = 1;
                goto LABEL_322;
              }
              LODWORD(v178) = v176[19];
              BOOL v179 = 1;
              if (!v176[19])
              {
LABEL_322:
                *(unsigned char *)(v6 + 454) = v178;
                uint64_t v182 = (unsigned __int16 *)((char *)v18 - *v18);
                unsigned int v183 = *v182;
                if (v183 < 0x21)
                {
                  uint64_t v185 = 0;
                  LODWORD(v184) = 0;
                }
                else
                {
                  uint64_t v184 = v182[16];
                  if (v182[16]) {
                    LODWORD(v184) = *(int *)((char *)v18 + v184);
                  }
                  if (v183 < 0x4D)
                  {
                    uint64_t v185 = 0;
                  }
                  else
                  {
                    uint64_t v185 = v182[38];
                    if (v182[38]) {
                      uint64_t v185 = *(unsigned int *)((char *)v18 + v185);
                    }
                    if (v183 >= 0x4F)
                    {
                      uint64_t v186 = v182[39];
                      if (v186) {
                        uint64_t v186 = *(void *)((char *)v18 + v186);
                      }
LABEL_334:
                      *(void *)(v6 + 496) = v184 | (unint64_t)(v185 << 32);
                      *(void *)(v6 + 504) = v186;
                      *(unsigned char *)(v6 + 458) = v179 | v178;
                      uint64_t v187 = *v13;
                      unsigned int v188 = (char *)v13 - v187;
                      unsigned int v189 = *(unsigned __int16 *)((char *)v13 - v187);
                      if (v189 < 0x37)
                      {
                        LOBYTE(v190) = 0;
                      }
                      else
                      {
                        uint64_t v190 = *((unsigned __int16 *)v188 + 27);
                        if (*((_WORD *)v188 + 27)) {
                          LOBYTE(v190) = *((unsigned char *)v13 + v190) != 0;
                        }
                      }
                      *(unsigned char *)(v6 + 453) = v190;
                      uint64_t v191 = (unsigned __int16 *)((char *)v18 - *v18);
                      unsigned int v192 = *v191;
                      if (v192 < 0x33)
                      {
                        LOBYTE(v193) = 0;
                      }
                      else
                      {
                        uint64_t v193 = v191[25];
                        if (v191[25]) {
                          LOBYTE(v193) = *((unsigned char *)v18 + v193) != 0;
                        }
                      }
                      uint64_t v194 = -v187;
                      *(unsigned char *)(v6 + 459) = v193;
                      if (v189 < 0x3F)
                      {
                        LOBYTE(v195) = 0;
                      }
                      else
                      {
                        uint64_t v195 = *((unsigned __int16 *)v188 + 31);
                        if (v195)
                        {
                          unsigned int v196 = (unsigned int *)((char *)v13 + v195 + *(unsigned int *)((char *)v13 + v195));
                          uint64_t v195 = *v196;
                          if (v195)
                          {
                            uint64_t v197 = v196 + 1;
                            while (1)
                            {
                              unsigned int v199 = *v197++;
                              char v198 = v199;
                              if (v199 < 0x36 && ((0x3F000000000777uLL >> v198) & 1) != 0) {
                                break;
                              }
                              if (!--v195) {
                                goto LABEL_351;
                              }
                            }
                            LOBYTE(v195) = 1;
                          }
                        }
                      }
LABEL_351:
                      *(unsigned char *)(v6 + 461) = v195;
                      if (v192 <= 0x14)
                      {
                        *(unsigned char *)(v6 + 455) = 0;
                        *(unsigned char *)(v6 + 1145) = 0;
                        *(unsigned char *)(v6 + 1147) = 0;
                        if (v189 >= 0x21) {
                          goto LABEL_386;
                        }
LABEL_389:
                        int v221 = 0;
                        goto LABEL_390;
                      }
                      uint64_t v200 = v191[10];
                      if (v191[10]) {
                        LOBYTE(v200) = *((unsigned char *)v18 + v200) != 0;
                      }
                      *(unsigned char *)(v6 + 455) = v200;
                      if (v192 < 0x25)
                      {
                        *(unsigned char *)(v6 + 1145) = 0;
                        if (v192 < 0x23) {
                          goto LABEL_384;
                        }
                      }
                      else
                      {
                        uint64_t v201 = v191[18];
                        if (v191[18]) {
                          LOBYTE(v201) = *((unsigned char *)v18 + v201) != 0;
                        }
                        *(unsigned char *)(v6 + 1145) = v201;
                      }
                      uint64_t v202 = v191[17];
                      if (v202)
                      {
                        *(unsigned char *)(v6 + 1147) = 1;
                        uint64_t v203 = (unsigned int *)((char *)v18 + v202);
                        uint64_t v204 = *v203;
                        uint64_t v206 = (unsigned int *)((char *)v203 + v204 + 4);
                        uint64_t v205 = *(unsigned int *)((char *)v203 + v204);
                        if (v205)
                        {
                          uint64_t v207 = &v206[v205];
                          while (1)
                          {
                            unsigned int v208 = (int *)((char *)v206 + *v206);
                            unsigned int v209 = (unsigned __int16 *)((char *)v208 - *v208);
                            unsigned int v210 = *v209;
                            if (v210 < 7)
                            {
                              int v211 = 0;
                              unsigned int v213 = 0;
                              if (v210 < 5) {
                                goto LABEL_373;
                              }
                              uint64_t v212 = v209[2];
                              if (!v212) {
                                goto LABEL_369;
                              }
                            }
                            else if (v209[3])
                            {
                              int v211 = *(int *)((char *)v208 + v209[3]);
                              uint64_t v212 = v209[2];
                              if (!v212) {
                                goto LABEL_369;
                              }
                            }
                            else
                            {
                              int v211 = 0;
                              uint64_t v212 = v209[2];
                              if (!v212)
                              {
LABEL_369:
                                unsigned int v213 = 0;
                                goto LABEL_373;
                              }
                            }
                            unsigned int v213 = *(int *)((char *)v208 + v212);
LABEL_373:
                            unsigned int v214 = (uint64_t **)(v6 + 1160);
LABEL_374:
                            unsigned int v215 = *v214;
                            unsigned int v216 = v214;
                            if (*v214)
                            {
                              while (1)
                              {
                                unsigned int v214 = (uint64_t **)v215;
                                unsigned int v217 = *((_DWORD *)v215 + 7);
                                if (v213 < v217) {
                                  goto LABEL_374;
                                }
                                if (v217 >= v213) {
                                  break;
                                }
                                unsigned int v215 = v214[1];
                                if (!v215)
                                {
                                  unsigned int v216 = v214 + 1;
                                  goto LABEL_379;
                                }
                              }
                              uint64_t v218 = v214;
                            }
                            else
                            {
LABEL_379:
                              uint64_t v218 = operator new(0x28uLL);
                              v218[7] = v213;
                              v218[8] = 0;
                              *(void *)uint64_t v218 = 0;
                              *((void *)v218 + 1) = 0;
                              *((void *)v218 + 2) = v214;
                              uint64_t *v216 = (uint64_t *)v218;
                              uint64_t v219 = **(void **)(v6 + 1152);
                              int v220 = (uint64_t *)v218;
                              if (v219)
                              {
                                *(void *)(v6 + 1152) = v219;
                                int v220 = *v216;
                              }
                              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 1160), v220);
                              ++*(void *)(v6 + 1168);
                            }
                            uint64_t v4 = v521;
                            v218[8] = v211;
                            ++v206;
                            unsigned int v18 = v516;
                            uint64_t v13 = v519;
                            if (v206 == v207)
                            {
                              uint64_t v222 = *v519;
                              uint64_t v194 = -v222;
                              if (*(unsigned __int16 *)((char *)v519 - v222) < 0x21u) {
                                goto LABEL_389;
                              }
LABEL_386:
                              if (!*(_WORD *)((char *)v13 + v194 + 32)) {
                                goto LABEL_389;
                              }
                              int v221 = *(int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 + v194 + 32));
LABEL_390:
                              {
                                getAdditionalSpillBufferBytes(void)::extra = 0;
                              }
                              int v223 = getAdditionalSpillBufferBytes(void)::extra + v221;
                              *(_DWORD *)(v6 + 396) = getAdditionalSpillBufferBytes(void)::extra + v221;
                              uint64_t v224 = (unsigned __int16 *)((char *)v13 - *v13);
                              if (*v224 < 0x43u)
                              {
                                LODWORD(v225) = 0;
                              }
                              else
                              {
                                uint64_t v225 = v224[33];
                                if (v225) {
                                  LODWORD(v225) = *(int *)((char *)v13 + v225);
                                }
                              }
                              *(_DWORD *)(v6 + 408) = v225;
                              uint64_t v226 = (unsigned __int16 *)((char *)v13 - *v13);
                              if (*v226 < 5u)
                              {
                                LODWORD(v227) = 0;
                              }
                              else
                              {
                                uint64_t v227 = v226[2];
                                if (v227) {
                                  LODWORD(v227) = *(int *)((char *)v13 + v227);
                                }
                              }
                              *(_DWORD *)(v6 + 392) = v227;
                              uint64_t v228 = (unsigned __int16 *)((char *)v13 - *v13);
                              if (*v228 < 0x51u)
                              {
                                LODWORD(v229) = 0;
                              }
                              else
                              {
                                uint64_t v229 = v228[40];
                                if (v229) {
                                  LODWORD(v229) = *(int *)((char *)v13 + v229);
                                }
                              }
                              *(_DWORD *)(v6 + 428) = v229;
                              char v230 = (unsigned __int16 *)((char *)v13 - *v13);
                              if (*v230 < 0x4Fu)
                              {
                                LODWORD(v231) = 0;
                              }
                              else
                              {
                                uint64_t v231 = v230[39];
                                if (v231) {
                                  LODWORD(v231) = *(int *)((char *)v13 + v231);
                                }
                              }
                              *(_DWORD *)(v6 + 440) = v231;
                              *(_DWORD *)(v6 + 448) = *(_DWORD *)(v4 + 468);
                              char v232 = (unsigned __int16 *)((char *)v13 - *v13);
                              if (*(int *)((char *)v13 + v232[6] + *(unsigned int *)((char *)v13 + v232[6])) | v223) {
                                char v233 = 1;
                              }
                              else {
                                char v233 = v179;
                              }
                              if (v233) {
                                goto LABEL_421;
                              }
                              unsigned int v234 = *v232;
                              if (v234 < 0x21)
                              {
                                int v235 = 0;
                              }
                              else if (v232[16])
                              {
                                int v235 = *(int *)((char *)v13 + v232[16]);
                                if (v234 >= 0x43)
                                {
LABEL_710:
                                  if (v232[33])
                                  {
                                    int v236 = *(int *)((char *)v13 + v232[33]);
                                    goto LABEL_417;
                                  }
                                }
                              }
                              else
                              {
                                int v235 = 0;
                                if (v234 >= 0x43) {
                                  goto LABEL_710;
                                }
                              }
                              int v236 = 0;
                              {
LABEL_712:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                              }
LABEL_417:
                              if (v236 + v235 + getAdditionalSpillBufferBytes(void)::extra)
                              {
LABEL_421:
                                LOBYTE(v238) = 1;
                              }
                              else
                              {
                                uint64_t v237 = (unsigned __int16 *)((char *)v13 - *v13);
                                if (*v237 < 0x5Fu)
                                {
                                  LOBYTE(v238) = 0;
                                }
                                else
                                {
                                  uint64_t v238 = v237[47];
                                  if (v238) {
                                    LOBYTE(v238) = *((unsigned char *)v13 + v238) != 0;
                                  }
                                }
                              }
                              *(unsigned char *)(v6 + 452) = v238;
                              uint64_t v239 = (unsigned __int16 *)((char *)v18 - *v18);
                              if (*v239 < 0x11u)
                              {
                                LODWORD(v240) = 0;
                                uint64_t v241 = a3;
                              }
                              else
                              {
                                uint64_t v240 = v239[8];
                                uint64_t v241 = a3;
                                if (v240) {
                                  LODWORD(v240) = *(int *)((char *)v18 + v240);
                                }
                              }
                              *(_DWORD *)(v6 + 960) = v240;
                              {
                                uint64_t v241 = a3;
                                if (v498)
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                  uint64_t v241 = a3;
                                }
                              }
                              uint64_t v242 = (_OWORD *)(v6 + 816);
                              uint64_t v243 = (const void **)(v241 + 3);
                              if (v241[3])
                              {
                                uint64_t v244 = v241[4];
                                long long v245 = (const void **)(v241 + 73);
                                if (v244) {
                                  long long v246 = v243;
                                }
                                else {
                                  long long v246 = v245;
                                }
                              }
                              else
                              {
                                long long v246 = (const void **)(v241 + 73);
                              }
                              uint64_t v247 = v504 + 5184;
                              AGX::Heap<true>::allocateImpl(__dst, v504 + 5352, (uint64_t)v246[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(v6 + 1016));
                              *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                              long long v248 = *(_OWORD *)&__dst[16];
                              *uint64_t v242 = *(_OWORD *)__dst;
                              *(_OWORD *)(v6 + 832) = v248;
                              *(_OWORD *)(v6 + 841) = *(_OWORD *)&__dst[25];
                              *(void *)(v6 + 608) = *(void *)(v6 + 816);
                              *(void *)(v6 + 640) = v504 + 5352;
                              long long v249 = *(_OWORD *)(v6 + 832);
                              *(_OWORD *)(v6 + 648) = *v242;
                              *(_OWORD *)(v6 + 664) = v249;
                              *(_OWORD *)(v6 + 673) = *(_OWORD *)(v6 + 841);
                              if (*v243)
                              {
                                uint64_t v250 = a3;
                                uint64_t v251 = a3[4];
                                if (v251) {
                                  uint64_t v252 = *v243;
                                }
                                else {
                                  uint64_t v252 = (const void *)a3[73];
                                }
                                if (v251) {
                                  uint64_t v253 = v243;
                                }
                                else {
                                  uint64_t v253 = (const void **)(a3 + 73);
                                }
                              }
                              else
                              {
                                uint64_t v250 = a3;
                                uint64_t v253 = (const void **)(a3 + 73);
                                uint64_t v252 = (const void *)a3[73];
                              }
                              uint64_t v254 = v514;
                              memcpy(*(void **)(v6 + 824), v252, (size_t)v253[1]);
                              uint64_t v255 = *(void *)(v6 + 824);
                              uint64_t v256 = *(void *)(v6 + 832);
                              *(void *)(v6 + 616) = *(void *)(v6 + 608);
                              *(void *)(v6 + 624) = v255;
                              *(void *)(v6 + 632) = v256;
                              uint64_t v257 = (const void **)(v250 + 8);
                              if (v250[8])
                              {
                                if (v250[9]) {
                                  long long v258 = v250 + 8;
                                }
                                else {
                                  long long v258 = a3 + 78;
                                }
                                uint64_t v250 = a3;
                                uint64_t v259 = v258[1];
                                if (!v259) {
                                  goto LABEL_456;
                                }
                              }
                              else
                              {
                                uint64_t v259 = v250[79];
                                if (!v259) {
                                  goto LABEL_456;
                                }
                              }
                              AGX::Heap<true>::allocateImpl(__dst, v247, v259, (void *)(v6 + 1024));
                              *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                              long long v260 = *(_OWORD *)&__dst[16];
                              *(_OWORD *)(v6 + 864) = *(_OWORD *)__dst;
                              *(_OWORD *)(v6 + 880) = v260;
                              *(_OWORD *)(v6 + 889) = *(_OWORD *)&__dst[25];
                              long long v261 = *(_OWORD *)(v6 + 880);
                              *(_OWORD *)(v6 + 696) = *(_OWORD *)(v6 + 864);
                              *(_OWORD *)(v6 + 712) = v261;
                              *(_OWORD *)(v6 + 721) = *(_OWORD *)(v6 + 889);
                              if (*v257)
                              {
                                uint64_t v262 = a3[9];
                                if (v262) {
                                  long long v263 = *v257;
                                }
                                else {
                                  long long v263 = (const void *)a3[78];
                                }
                                if (v262) {
                                  long long v264 = v257;
                                }
                                else {
                                  long long v264 = (const void **)(a3 + 78);
                                }
                              }
                              else
                              {
                                long long v264 = (const void **)(a3 + 78);
                                long long v263 = (const void *)a3[78];
                              }
                              memcpy(*(void **)(v6 + 872), v263, (size_t)v264[1]);
                              uint64_t v250 = a3;
LABEL_456:
                              uint64_t v265 = (const void **)(v250 + 13);
                              if (v250[13])
                              {
                                if (v250[14]) {
                                  uint64_t v266 = v250 + 13;
                                }
                                else {
                                  uint64_t v266 = v250 + 83;
                                }
                                uint64_t v267 = v266[1];
                                if (v267) {
                                  goto LABEL_461;
                                }
LABEL_469:
                                if (!*(unsigned char *)(v6 + 600)) {
                                  goto LABEL_473;
                                }
LABEL_474:
                                {
                                  {
                                    unint64_t v275 = v6 + 528;
                                    if (*(char *)(v6 + 551) < 0) {
                                      unint64_t v275 = *v507;
                                    }
                                    unint64_t v276 = v6 + 576;
                                    if (*(char *)(v6 + 599) < 0) {
                                      unint64_t v276 = v505->__r_.__value_.__r.__words[0];
                                    }
                                    unint64_t v277 = v6 + 552;
                                    if (*(char *)(v6 + 575) < 0) {
                                      unint64_t v277 = *v506;
                                    }
                                    int v278 = *(_DWORD *)(v6 + 512);
                                    uint64_t v279 = *(void *)(v6 + 608);
                                    int v280 = *(void **)(v6 + 832);
                                    *(_DWORD *)std::string __dst = 136447490;
                                    *(void *)&__dst[4] = v275;
                                    *(_WORD *)&__dst[12] = 2082;
                                    *(void *)&__dst[14] = v276;
                                    *(_WORD *)&__dst[22] = 2082;
                                    *(void *)&__dst[24] = v277;
                                    *(_WORD *)&__dst[32] = 1026;
                                    *(_DWORD *)&__dst[34] = v278;
                                    *(_WORD *)&__dst[38] = 2050;
                                    *(void *)&__dst[40] = v279;
                                    LOWORD(v525[0]) = 2050;
                                    *(void **)((char *)v525 + 2) = v280;
                                    _os_signpost_emit_with_name_impl(&dword_2427AD000, v274, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                  }
                                }
                                uint64_t v281 = *(void *)(v6 + 8);
                                unint64_t v282 = v6 + 528;
                                if (*(char *)(v6 + 551) < 0) {
                                  unint64_t v282 = *v507;
                                }
                                unint64_t v283 = v6 + 576;
                                if (*(char *)(v6 + 599) < 0) {
                                  unint64_t v283 = v505->__r_.__value_.__r.__words[0];
                                }
                                unint64_t v284 = v6 + 552;
                                if (*(char *)(v6 + 575) < 0) {
                                  unint64_t v284 = *v506;
                                }
                                int v285 = *(_DWORD *)(v6 + 512);
                                uint64_t v286 = *(void *)(v6 + 608);
                                uint64_t v287 = *(void *)(v6 + 832);
                                char v288 = *(unsigned char *)(v6 + 600);
                                *(void *)std::string __dst = v282;
                                *(void *)&__dst[8] = v283;
                                *(void *)&__dst[16] = v284;
                                *(_DWORD *)&__dst[24] = v285;
                                *(void *)&__dst[32] = v286;
                                *(void *)&__dst[40] = v287;
                                LOBYTE(v525[0]) = v288;
                                AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v281, v6, (long long *)__dst);
                              }
                              else
                              {
                                uint64_t v267 = v250[84];
                                if (!v267) {
                                  goto LABEL_469;
                                }
LABEL_461:
                                AGX::Heap<true>::allocateImpl(__dst, v247, v267, (void *)(v6 + 1032));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v268 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(v6 + 912) = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 928) = v268;
                                *(_OWORD *)(v6 + 937) = *(_OWORD *)&__dst[25];
                                long long v269 = *(_OWORD *)(v6 + 928);
                                *(_OWORD *)(v6 + 744) = *(_OWORD *)(v6 + 912);
                                *(_OWORD *)(v6 + 760) = v269;
                                *(_OWORD *)(v6 + 769) = *(_OWORD *)(v6 + 937);
                                if (*v265)
                                {
                                  uint64_t v270 = a3[14];
                                  if (v270) {
                                    unint64_t v271 = *v265;
                                  }
                                  else {
                                    unint64_t v271 = (const void *)a3[83];
                                  }
                                  if (v270) {
                                    unint64_t v272 = v250 + 13;
                                  }
                                  else {
                                    unint64_t v272 = a3 + 83;
                                  }
                                }
                                else
                                {
                                  unint64_t v272 = a3 + 83;
                                  unint64_t v271 = (const void *)a3[83];
                                }
                                memcpy(*(void **)(v6 + 920), v271, v272[1]);
                                uint64_t v273 = *(void *)(v6 + 928);
                                *(_OWORD *)(v6 + 792) = *(_OWORD *)(v6 + 912);
                                *(void *)(v6 + 808) = v273;
                                if (*(unsigned char *)(v6 + 600)) {
                                  goto LABEL_474;
                                }
LABEL_473:
                                if (*(unsigned char *)(*(void *)(v6 + 8) + 7761)) {
                                  goto LABEL_474;
                                }
                              }
                              int v289 = *(_DWORD *)(v4 + 124);
                              int v290 = *(_DWORD *)(v4 + 132);
                              int v291 = *(_DWORD *)(v4 + 140);
                              if (*(unsigned char *)(v4 + 208)) {
                                int v292 = *(_DWORD *)(v4 + 144);
                              }
                              else {
                                int v292 = 0;
                              }
                              if (*(_OWORD *)(v4 + 176) == 0) {
                                int v293 = 0;
                              }
                              else {
                                int v293 = *(_DWORD *)(v4 + 144);
                              }
                              int v294 = *(_DWORD *)(v4 + 120) + *(_DWORD *)(v4 + 128) + *(_DWORD *)(v4 + 136);
                              unint64_t v295 = v292
                                   + *(_DWORD *)(v4 + 148)
                                   + v293
                                   + *(_DWORD *)(v4 + 152)
                                   + ((v289 + v290 + v291 - v294 + 3) & 0xFFFFFFFC);
                              uint64_t v296 = *(void *)(v6 + 48);
                              unint64_t v297 = (*(void *)(v6 + 56) - v296) >> 2;
                              if (v295 <= v297)
                              {
                                if (v295 < v297) {
                                  *(void *)(v6 + 56) = v296 + 4 * v295;
                                }
                              }
                              else
                              {
                                std::vector<unsigned int>::__append(v514, v295 - v297);
                                int v289 = *(_DWORD *)(v4 + 124);
                                int v290 = *(_DWORD *)(v4 + 132);
                                int v291 = *(_DWORD *)(v4 + 140);
                                int v294 = *(_DWORD *)(v4 + 120) + *(_DWORD *)(v4 + 128) + *(_DWORD *)(v4 + 136);
                              }
                              *(_DWORD *)(v6 + 412) = v289 + v290 + v291 - v294;
                              uint64_t v298 = *v519;
                              uint64_t v299 = *(unsigned __int16 *)((char *)v519 - v298 + 16);
                              uint64_t v300 = *(unsigned int *)((char *)v519 + v299);
                              uint64_t v301 = *(unsigned int *)((char *)v519 + v299 + v300);
                              if (v301)
                              {
                                uint64_t v302 = 4 * v301;
                                uint64_t v303 = v299 + v300;
                                while (1)
                                {
                                  uint64_t v305 = *(unsigned int *)((char *)v519 + v303 + 4);
                                  uint64_t v306 = (char *)v519 + v303 + v305;
                                  uint64_t v307 = v305 - *((int *)v306 + 1);
                                  int v308 = (char *)v519 + v303 + v307;
                                  unsigned int v309 = *((unsigned __int16 *)v308 + 2);
                                  if (v309 < 7) {
                                    goto LABEL_513;
                                  }
                                  uint64_t v310 = *((unsigned __int16 *)v308 + 5);
                                  if (!v310 || (*(int *)((char *)v519 + v303 + v305 + v310 + 4) & 0x80000000) == 0) {
                                    break;
                                  }
LABEL_505:
                                  v303 += 4;
                                  v302 -= 4;
                                  if (!v302)
                                  {
                                    uint64_t v298 = *v519;
                                    goto LABEL_520;
                                  }
                                }
                                if (v309 < 9)
                                {
LABEL_513:
                                  int v312 = 0;
                                }
                                else
                                {
                                  uint64_t v311 = *(unsigned __int16 *)((char *)v519 + v303 + v307 + 12);
                                  if (v311) {
                                    LODWORD(v311) = *(int *)((char *)v519 + v303 + v305 + v311 + 4);
                                  }
                                  int v312 = 4 * v311;
                                }
                                int v313 = v312 - *(_DWORD *)(v4 + 120);
                                std::vector<unsigned int>::pointer begin = v514->__begin_;
                                v514->__begin_[v313] = 0;
                                begin[v313 + 1] = 1;
                                begin[v313 + 2] = 2;
                                begin[v313 + 3] = 3;
                                uint64_t v315 = v305 - *((int *)v306 + 1);
                                if (*(unsigned __int16 *)((char *)v519 + v303 + v315 + 4) >= 0xBu
                                  && *(_WORD *)((char *)v519 + v303 + v315 + 14)
                                  && *((unsigned char *)v519
                                     + v303
                                     + v305
                                     + *(unsigned __int16 *)((char *)v519 + v303 + v315 + 14)
                                     + 4))
                                {
                                  uint64_t v316 = *(unsigned __int16 *)((char *)v519 + v303 + v315 + 10);
                                  if (v316) {
                                    int v304 = *(int *)((char *)v519 + v303 + v305 + v316 + 4);
                                  }
                                  else {
                                    int v304 = 0;
                                  }
                                  *(void *)(v6 + 480 + 8 * ((v304 & 0xFFFC0) != 0)) |= 1 << v304;
                                }
                                goto LABEL_505;
                              }
LABEL_520:
                              uint64_t v317 = -v298;
                              uint64_t v318 = (char *)v519 + v317;
                              if (*(unsigned char *)(v6 + 454))
                              {
                                uint64_t v319 = *((unsigned __int16 *)v318 + 12);
                                uint64_t v320 = *(unsigned int *)((char *)v519 + v319);
                                uint64_t v321 = (unsigned int *)((char *)v519 + v319 + v320);
                                uint64_t v322 = *v321;
                                if (v322)
                                {
                                  unint64_t v323 = 0;
                                  uint64_t v324 = 4 * v322;
                                  unint64_t v325 = (char *)v519 + v319 + v320;
                                  while (1)
                                  {
                                    uint64_t v326 = v321[v323 / 4 + 1];
                                    uint64_t v327 = v326 - *(int *)((char *)&v321[v323 / 4 + 1] + v326);
                                    uint64_t v328 = &v325[v323 + v327];
                                    unsigned int v329 = *((unsigned __int16 *)v328 + 2);
                                    if (v329 >= 5)
                                    {
                                      uint64_t v330 = *((unsigned __int16 *)v328 + 4);
                                      if (v330)
                                      {
                                        if (v325[v323 + 4 + v326 + v330] == 93)
                                        {
                                          if (v329 < 7) {
                                            break;
                                          }
                                          uint64_t v331 = *(unsigned __int16 *)&v325[v323 + 10 + v327];
                                          if (!v331) {
                                            break;
                                          }
                                          int v332 = *(_DWORD *)&v325[v323 + 4 + v326 + v331];
                                          if ((v332 & 0x80000000) == 0 && (v332 & 0xFFF00000) != 0x400000) {
                                            break;
                                          }
                                        }
                                      }
                                    }
                                    v323 += 4;
                                    if (v324 == v323) {
                                      goto LABEL_532;
                                    }
                                  }
                                  *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), *(int8x16_t *)(v6 + 496));
                                }
                              }
LABEL_532:
                              uint64_t v333 = *((unsigned __int16 *)v318 + 10);
                              uint64_t v334 = *(unsigned int *)((char *)v519 + v333);
                              uint64_t v335 = *(unsigned int *)((char *)v519 + v333 + v334);
                              if (!v335) {
                                goto LABEL_548;
                              }
                              uint64_t v336 = 4 * v335;
                              uint64_t v337 = v333 + v334;
                              while (2)
                              {
                                uint64_t v338 = *(unsigned int *)((char *)v519 + v337 + 4);
                                uint64_t v339 = v338 - *(int *)((char *)v519 + v337 + v338 + 4);
                                uint64_t v340 = (char *)v519 + v337 + v339;
                                unsigned int v341 = *((unsigned __int16 *)v340 + 2);
                                if (v341 < 7) {
                                  goto LABEL_541;
                                }
                                uint64_t v342 = *((unsigned __int16 *)v340 + 5);
                                if (v342 && *(int *)((char *)v519 + v337 + v338 + v342 + 4) < 0) {
                                  goto LABEL_534;
                                }
                                if (v341 < 9 || (uint64_t v343 = *(unsigned __int16 *)((char *)v519 + v337 + v339 + 12)) == 0)
                                {
LABEL_541:
                                  int v344 = 0;
                                  goto LABEL_542;
                                }
                                int v344 = *(int *)((char *)v519 + v337 + v338 + v343 + 4);
LABEL_542:
                                int v345 = *(unsigned __int8 *)(v6 + 1144);
                                if (*(unsigned char *)(v6 + 1144)) {
                                  int v346 = 3;
                                }
                                else {
                                  int v346 = 1;
                                }
                                unsigned int v347 = *(_DWORD *)(v4 + 124)
                                     + v346 * v344
                                     - (*(_DWORD *)(v4 + 120)
                                      + *(_DWORD *)(v4 + 128));
                                uint64_t v348 = *(void *)(v6 + 48);
                                *(_DWORD *)(v348 + 4 * v347) = 4;
                                if (v345)
                                {
                                  *(_DWORD *)(v348 + 4 * (v347 + 1)) = -1;
                                  *(_DWORD *)(v348 + 4 * (v347 + 2)) = 0;
                                }
LABEL_534:
                                v337 += 4;
                                v336 -= 4;
                                if (v336) {
                                  continue;
                                }
                                break;
                              }
                              uint64_t v317 = -(uint64_t)*v519;
LABEL_548:
                              unsigned int v349 = (unsigned int *)((char *)v519 + *(unsigned __int16 *)((char *)v519 + v317 + 12));
                              uint64_t v350 = *v349;
                              uint64_t v352 = (unsigned int *)((char *)v349 + v350 + 4);
                              uint64_t v351 = *(unsigned int *)((char *)v349 + v350);
                              if (v351)
                              {
                                uint64_t v353 = &v352[v351];
                                while (1)
                                {
                                  std::vector<unsigned int>::pointer v354 = (int *)((char *)v352 + *v352);
                                  unsigned __int32 v355 = (unsigned __int16 *)((char *)v354 - *v354);
                                  unsigned int v356 = *v355;
                                  if (v356 < 7)
                                  {
                                    LODWORD(v357) = 0;
                                    goto LABEL_560;
                                  }
                                  if (!v355[3] || (*(int *)((char *)v354 + v355[3]) & 0x80000000) == 0) {
                                    break;
                                  }
LABEL_552:
                                  if (++v352 == v353) {
                                    goto LABEL_591;
                                  }
                                }
                                if (v356 < 9)
                                {
                                  LODWORD(v357) = 0;
                                  goto LABEL_561;
                                }
                                uint64_t v357 = v355[4];
                                if (v355[4])
                                {
                                  LODWORD(v357) = *(int *)((char *)v354 + v357);
                                  goto LABEL_561;
                                }
LABEL_560:
                                if (v356 >= 7)
                                {
LABEL_561:
                                  uint64_t v358 = v355[3];
                                  if (v358)
                                  {
                                    int v359 = *(int *)((char *)v354 + v358);
                                    goto LABEL_565;
                                  }
                                }
                                int v359 = 0;
LABEL_565:
                                unsigned int v360 = ((v357 >> 1) & 0x1FFFFFFF)
                                     + *(_DWORD *)(v4 + 124)
                                     + *(_DWORD *)(v4 + 132)
                                     - (*(_DWORD *)(v4 + 120)
                                      + *(_DWORD *)(v4 + 128)
                                      + *(_DWORD *)(v4 + 136));
                                unsigned int v361 = v359 & 0xFFFFF;
                                if ((v359 & 0xFFFFF) == 0x35) {
                                  int v362 = 9;
                                }
                                else {
                                  int v362 = 0;
                                }
                                if (v361 == 49) {
                                  int v362 = 8;
                                }
                                v254->__begin_[v360] = v362;
                                uint64_t v363 = (unsigned __int16 *)((char *)v354 - *v354);
                                if (*v363 >= 0xBu)
                                {
                                  uint64_t v364 = v363[5];
                                  if (v364)
                                  {
                                    if (*((unsigned char *)v354 + v364)) {
                                      *(void *)(v6 + 464 + 8 * (v361 > 0x3F)) |= 1 << v359;
                                    }
                                  }
                                }
                                if (*(unsigned char *)(v6 + 1147))
                                {
                                  int v365 = *v517;
                                  if (!*v517) {
LABEL_768:
                                  }
                                    abort();
                                  unsigned int v366 = (2 * v360) | 1;
                                  while (1)
                                  {
                                    while (1)
                                    {
                                      unsigned int v367 = *((_DWORD *)v365 + 7);
                                      if (v361 >= v367) {
                                        break;
                                      }
                                      int v365 = (uint64_t *)*v365;
                                      if (!v365) {
                                        goto LABEL_768;
                                      }
                                    }
                                    if (v367 >= v361) {
                                      break;
                                    }
                                    int v365 = (uint64_t *)v365[1];
                                    if (!v365) {
                                      goto LABEL_768;
                                    }
                                  }
                                  int v368 = *((_DWORD *)v365 + 8);
                                  int v369 = (uint64_t **)(v6 + 272);
LABEL_583:
                                  uint64_t v370 = *v369;
                                  long long v371 = v369;
                                  if (*v369)
                                  {
                                    while (1)
                                    {
                                      int v369 = (uint64_t **)v370;
                                      unsigned int v372 = *((_DWORD *)v370 + 7);
                                      if (v366 < v372) {
                                        goto LABEL_583;
                                      }
                                      if (v372 >= v366) {
                                        break;
                                      }
                                      uint64_t v370 = v369[1];
                                      if (!v370)
                                      {
                                        long long v371 = v369 + 1;
                                        goto LABEL_588;
                                      }
                                    }
                                    unsigned int v373 = v369;
                                  }
                                  else
                                  {
LABEL_588:
                                    unsigned int v373 = operator new(0x28uLL);
                                    v373[7] = v366;
                                    v373[8] = 0;
                                    *(void *)unsigned int v373 = 0;
                                    *((void *)v373 + 1) = 0;
                                    *((void *)v373 + 2) = v369;
                                    uint64_t *v371 = (uint64_t *)v373;
                                    uint64_t v374 = **(void **)(v6 + 264);
                                    int v375 = (uint64_t *)v373;
                                    if (v374)
                                    {
                                      *(void *)(v6 + 264) = v374;
                                      int v375 = *v371;
                                    }
                                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 272), v375);
                                    ++*(void *)(v6 + 280);
                                  }
                                  uint64_t v254 = v514;
                                  v373[8] = v368;
                                  uint64_t v4 = v521;
                                }
                                goto LABEL_552;
                              }
LABEL_591:
                              unint64_t v376 = *(void *)(v4 + 160);
                              unint64_t v377 = *(void *)(v4 + 168);
                              unsigned int v378 = v516;
                              if (*(_OWORD *)(v4 + 160) != 0)
                              {
                                int v379 = *(unsigned __int8 *)(v4 + 208);
                                int v380 = *(_DWORD *)(v4 + 144);
                                if (!*(unsigned char *)(v4 + 208)) {
                                  goto LABEL_603;
                                }
                                if (v380)
                                {
                                  unsigned int v381 = (*(_DWORD *)(v4 + 124)
                                        + *(_DWORD *)(v4 + 132)
                                        + *(_DWORD *)(v4 + 140)
                                        - (*(_DWORD *)(v4 + 120)
                                         + *(_DWORD *)(v4 + 128)
                                         + *(_DWORD *)(v4 + 136))
                                        + 3) & 0xFFFFFFFC;
                                  *(void *)std::string __dst = *(void *)(v4 + 160);
                                  v523.n128_u64[0] = v377;
                                  for (unint64_t i = v376; ; unint64_t i = *(void *)__dst)
                                  {
                                    if (i)
                                    {
                                      unint64_t v383 = (__n128 *)__dst;
                                    }
                                    else
                                    {
                                      unint64_t i = v523.n128_u64[0];
                                      if (!v523.n128_u64[0])
                                      {
                                        int v380 = *(_DWORD *)(v4 + 144);
                                        int v379 = v380;
                                        goto LABEL_603;
                                      }
                                      unint64_t v383 = &v523;
                                    }
                                    v383->n128_u64[0] = i & (i - 1);
                                    std::vector<unsigned int>::pointer v384 = v254->__begin_;
                                    v254->__begin_[v381] = 0;
                                    v384[v381 + 1] = 1;
                                    v384[v381 + 2] = 2;
                                    v384[v381 + 3] = 3;
                                    v381 += 4;
                                  }
                                }
                                int v379 = 0;
LABEL_603:
                                int8x16_t v385 = *(int8x16_t *)(v4 + 176);
                                if (*(_OWORD *)&v385 != 0 && v380 != 0)
                                {
                                  int v454 = ((*(_DWORD *)(v4 + 140)
                                         + *(_DWORD *)(v4 + 132)
                                         - (*(_DWORD *)(v4 + 136)
                                          + *(_DWORD *)(v4 + 128)
                                          + *(_DWORD *)(v4 + 120))
                                         + *(_DWORD *)(v4 + 124)
                                         + 3) & 0xFFFFFFFC)
                                       + v379;
                                  *(void *)std::string __dst = v376;
                                  v523.n128_u64[0] = v377;
                                  while (1)
                                  {
                                    if (v376)
                                    {
                                      uint64_t v455 = (__n128 *)__dst;
                                    }
                                    else
                                    {
                                      unint64_t v376 = v523.n128_u64[0];
                                      if (!v523.n128_u64[0]) {
                                        break;
                                      }
                                      uint64_t v455 = &v523;
                                    }
                                    v455->n128_u64[0] = v376 & (v376 - 1);
                                    std::vector<unsigned int>::pointer v456 = v254->__begin_;
                                    v254->__begin_[v454] = 0;
                                    v456[v454 + 1] = 1;
                                    v456[v454 + 2] = 2;
                                    v456[v454 + 3] = 3;
                                    v454 += 4;
                                    unint64_t v376 = *(void *)__dst;
                                  }
                                }
                                *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), v385);
                              }
                              if (*(_DWORD *)(v4 + 148))
                              {
                                int v387 = *(_DWORD *)(v4 + 144);
                                if (*(unsigned char *)(v4 + 208)) {
                                  int v388 = *(_DWORD *)(v4 + 144);
                                }
                                else {
                                  int v388 = 0;
                                }
                                if (*(_OWORD *)(v4 + 176) == 0) {
                                  int v387 = 0;
                                }
                                unsigned int v389 = v388
                                     + v387
                                     + ((*(_DWORD *)(v4 + 124)
                                       + *(_DWORD *)(v4 + 132)
                                       + *(_DWORD *)(v4 + 140)
                                       - (*(_DWORD *)(v4 + 120)
                                        + *(_DWORD *)(v4 + 128)
                                        + *(_DWORD *)(v4 + 136))
                                       + 3) & 0xFFFFFFFC);
                                unint64_t v391 = *(void *)(v4 + 192);
                                unint64_t v390 = *(void *)(v4 + 200);
                                *(void *)std::string __dst = v391;
                                v523.n128_u64[0] = v390;
                                while (1)
                                {
                                  if (v391)
                                  {
                                    uint64_t v392 = (__n128 *)__dst;
                                  }
                                  else
                                  {
                                    unint64_t v391 = v523.n128_u64[0];
                                    if (!v523.n128_u64[0]) {
                                      break;
                                    }
                                    uint64_t v392 = &v523;
                                  }
                                  v392->n128_u64[0] = v391 & (v391 - 1);
                                  uint64_t v393 = *(void *)(v6 + 48);
                                  *(_DWORD *)(v393 + 4 * v389) = 4;
                                  if (*(unsigned char *)(v6 + 1144))
                                  {
                                    *(_DWORD *)(v393 + 4 * (v389 + 1)) = -1;
                                    *(_DWORD *)(v393 + 4 * (v389 + 2)) = 0;
                                  }
                                  v389 += 4;
                                  unint64_t v391 = *(void *)__dst;
                                }
                              }
                              int v394 = *v519;
                              if (*(unsigned char *)(v4 + 467))
                              {
                                uint64_t v395 = (unsigned __int16 *)((char *)v519 - v394);
                                if (*v395 < 0x67u)
                                {
                                  unint64_t v396 = 0;
                                }
                                else
                                {
                                  unint64_t v396 = v395[51];
                                  if (v396) {
                                    unint64_t v396 = *(void *)((char *)v519 + v396);
                                  }
                                }
                                int v397 = 128 - 2 * __clz(v396);
                                if (*(_DWORD *)(v6 + 208) > v397) {
                                  int v397 = *(_DWORD *)(v6 + 208);
                                }
                                *(_DWORD *)(v6 + 208) = v397;
                                unint64_t v398 = (unsigned __int16 *)((char *)v519 - *v519);
                                if (*v398 < 0x17u)
                                {
                                  LODWORD(v399) = 0;
                                }
                                else
                                {
                                  unint64_t v399 = v398[11];
                                  if (v399) {
                                    unint64_t v399 = ((unint64_t)*(unsigned int *)((char *)v519 + v399) + 3) >> 2;
                                  }
                                }
                                *(_DWORD *)(v6 + 200) = v399;
                                *(_DWORD *)(v6 + 204) = 0;
                                int v394 = *v519;
                              }
                              int v400 = (unsigned __int16 *)((char *)v519 - v394);
                              if (*v400 >= 0x17u && (uint64_t v401 = v400[11]) != 0)
                              {
                                unint64_t v402 = ((unint64_t)*(unsigned int *)((char *)v519 + v401) + 3) >> 2;
                                uint64_t v403 = (void *)(v6 + 80);
                                uint64_t v404 = *(void *)(v6 + 72);
                                unint64_t v405 = (*(void *)(v6 + 80) - v404) >> 2;
                                if (v402 > v405)
                                {
                                  std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v6 + 72), v402 - v405);
                                  goto LABEL_642;
                                }
                              }
                              else
                              {
                                unint64_t v402 = 0;
                                uint64_t v403 = (void *)(v6 + 80);
                                uint64_t v404 = *(void *)(v6 + 72);
                                unint64_t v405 = (*(void *)(v6 + 80) - v404) >> 2;
                              }
                              if (v405 > v402) {
                                *uint64_t v403 = v404 + 4 * v402;
                              }
LABEL_642:
                              if (v503 != (void *)(v4 + 216)) {
                                std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v503, *(char **)(v4 + 216), *(char **)(v4 + 224), (uint64_t)(*(void *)(v4 + 224) - *(void *)(v4 + 216)) >> 2);
                              }
                              if (v502 != (void *)(v4 + 240)) {
                                std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v502, *(char **)(v4 + 240), *(char **)(v4 + 248), (uint64_t)(*(void *)(v4 + 248) - *(void *)(v4 + 240)) >> 2);
                              }
                              if (v501 != (void *)(v4 + 320)) {
                                std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v501, *(char **)(v4 + 320), *(char **)(v4 + 328), (uint64_t)(*(void *)(v4 + 328) - *(void *)(v4 + 320)) >> 1);
                              }
                              if (v500 != (void *)(v4 + 368)) {
                                std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v500, *(char **)(v4 + 368), *(char **)(v4 + 376), (uint64_t)(*(void *)(v4 + 376) - *(void *)(v4 + 368)) >> 1);
                              }
                              *(unsigned char *)(v6 + 192) = *(unsigned char *)(v4 + 416);
                              *(unsigned char *)(v6 + 456) = *(_OWORD *)(v4 + 160) != 0;
                              *(unsigned char *)(v6 + 457) = *(void *)(v4 + 148) != 0;
                              uint64_t v406 = *(unsigned __int16 *)((char *)v519 - *v519 + 24);
                              uint64_t v407 = *(unsigned int *)((char *)v519 + v406);
                              uint64_t v408 = (unsigned int *)((char *)v519 + v406 + v407);
                              uint64_t v409 = *v408;
                              if (v409)
                              {
                                unint64_t v410 = 0;
                                uint64_t v411 = 4 * v409;
                                unint64_t v412 = (char *)v519 + v406 + v407;
                                do
                                {
                                  uint64_t v413 = v408[v410 / 4 + 1];
                                  uint64_t v414 = v413 - *(int *)((char *)&v408[v410 / 4 + 1] + v413);
                                  uint64_t v415 = &v412[v410 + v414];
                                  unsigned int v416 = *((unsigned __int16 *)v415 + 2);
                                  if (v416 >= 5)
                                  {
                                    uint64_t v417 = *((unsigned __int16 *)v415 + 4);
                                    if (v417)
                                    {
                                      if (v416 >= 7 && v412[v410 + 4 + v413 + v417] == 139)
                                      {
                                        if (*(_WORD *)&v412[v410 + 10 + v414])
                                        {
                                          int v418 = *(_DWORD *)&v412[v410
                                                                + 4
                                                                + v413
                                                                + *(unsigned __int16 *)&v412[v410 + 10 + v414]];
                                          if (v416 >= 0xB) {
                                            goto LABEL_661;
                                          }
                                        }
                                        else
                                        {
                                          int v418 = 0;
                                          if (v416 >= 0xB)
                                          {
LABEL_661:
                                            uint64_t v419 = *(unsigned __int16 *)&v412[v410 + 14 + v414];
                                            if (v419 && v412[v410 + 4 + v413 + v419]) {
                                              *(void *)(v6 + 464 + 8 * ((v418 & 0xFFFC0) != 0)) |= 1 << v418;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  v410 += 4;
                                }
                                while (v411 != v410);
                              }
                              uint64_t v420 = *v516;
                              uint64_t v421 = -v420;
                              uint64_t v422 = (char *)v516 - v420;
                              unsigned int v423 = *(unsigned __int16 *)((char *)v516 - v420);
                              if (v423 < 0xD)
                              {
                                uint64_t v424 = v504;
                                if (v423 >= 0xB) {
                                  goto LABEL_716;
                                }
                                goto LABEL_765;
                              }
                              uint64_t v424 = v504;
                              if (!*((_WORD *)v422 + 6)) {
                                goto LABEL_716;
                              }
                              unsigned int v425 = (int *)((char *)v516
                                           + *((unsigned __int16 *)v422 + 6)
                                           + *(unsigned int *)((char *)v516 + *((unsigned __int16 *)v422 + 6)));
                              unint64_t v426 = *v425;
                              unint64_t v427 = *(unsigned char **)(v6 + 1072);
                              if (v426 > (uint64_t)(*(void *)(v6 + 1088) - (void)v427) >> 4)
                              {
                                int v428 = *(unsigned char **)(v6 + 1080);
                                uint64_t v429 = (char *)operator new(16 * v426);
                                unint64_t v430 = &v429[(v428 - v427) & 0xFFFFFFFFFFFFFFF0];
                                uint64_t v431 = v430;
                                if (v428 != v427)
                                {
                                  uint64_t v432 = &v429[(v428 - v427) & 0xFFFFFFFFFFFFFFF0];
                                  do
                                  {
                                    uint64_t v431 = v432 - 16;
                                    *((_OWORD *)v432 - 1) = *((_OWORD *)v428 - 1);
                                    v428 -= 16;
                                    v432 -= 16;
                                  }
                                  while (v428 != v427);
                                }
                                *(void *)(v6 + 1072) = v431;
                                *(void *)(v6 + 1080) = v430;
                                *(void *)(v6 + 1088) = &v429[16 * v426];
                                if (v427) {
                                  operator delete(v427);
                                }
                              }
                              unint64_t v433 = 0;
                              uint64_t v434 = *v516;
                              unsigned int v435 = *(unsigned __int16 *)((char *)v516 - v434);
                              if (v435 < 0x41)
                              {
LABEL_675:
                                if (!*v425) {
                                  goto LABEL_715;
                                }
                              }
                              else
                              {
                                if (*(_WORD *)((char *)v516 - v434 + 64))
                                {
                                  unsigned int v436 = (unsigned int *)((char *)v516 + *(unsigned __int16 *)((char *)v516 - v434 + 64));
                                  unint64_t v433 = (unsigned int *)((char *)v436 + *v436);
                                  goto LABEL_675;
                                }
                                unint64_t v433 = 0;
                                if (!*v425)
                                {
LABEL_715:
                                  uint64_t v421 = -v434;
                                  if (v435 >= 0xB) {
                                    goto LABEL_716;
                                  }
LABEL_765:
                                  *(unsigned char *)(v6 + 964) = 0;
                                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(__str.__r_.__value_.__l.__data_);
                                  }
                                  *(void *)unint64_t v6 = &unk_26F852978;
                                  std::string __str = *(std::string *)(v6 + 616);
                                  __dst[23] = 0;
                                  __dst[0] = 0;
                                  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::ProgramVariantESLState(v6 + 1344, v424, a3, (const std::string *)__dst, v4, (long long *)&__str);
                                }
                              }
                              unint64_t v437 = 0;
                              uint64_t v513 = v433 + 1;
                              unint64_t v438 = v425 + 1;
                              unint64_t v518 = v425 + 1;
                              v520 = v433;
                              do
                              {
                                if (v433 && *v433) {
                                  uint64_t v440 = *(void *)&v513[2 * v437];
                                }
                                else {
                                  uint64_t v440 = 0;
                                }
                                uint64_t v441 = *(void *)&v438[2 * v437];
                                uint64_t v442 = *(void **)(v6 + 1080);
                                unint64_t v443 = *(void *)(v6 + 1088);
                                if ((unint64_t)v442 < v443)
                                {
                                  *uint64_t v442 = v441;
                                  v442[1] = v440;
                                  uint64_t v439 = v442 + 2;
                                }
                                else
                                {
                                  unint64_t v444 = v425;
                                  uint64_t v445 = v424;
                                  uint64_t v446 = (void *)*v510;
                                  uint64_t v447 = ((uint64_t)v442 - *v510) >> 4;
                                  unint64_t v448 = v447 + 1;
                                  if ((unint64_t)(v447 + 1) >> 60) {
                                    abort();
                                  }
                                  uint64_t v449 = v443 - (void)v446;
                                  if (v449 >> 3 > v448) {
                                    unint64_t v448 = v449 >> 3;
                                  }
                                  if ((unint64_t)v449 >= 0x7FFFFFFFFFFFFFF0) {
                                    unint64_t v450 = 0xFFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v450 = v448;
                                  }
                                  if (v450)
                                  {
                                    if (v450 >> 60) {
                                      std::__throw_bad_array_new_length[abi:nn180100]();
                                    }
                                    uint64_t v451 = (char *)operator new(16 * v450);
                                  }
                                  else
                                  {
                                    uint64_t v451 = 0;
                                  }
                                  int v452 = &v451[16 * v447];
                                  *(void *)int v452 = v441;
                                  *((void *)v452 + 1) = v440;
                                  unint64_t v453 = v452;
                                  uint64_t v424 = v445;
                                  if (v442 != v446)
                                  {
                                    do
                                    {
                                      *((_OWORD *)v453 - 1) = *((_OWORD *)v442 - 1);
                                      v453 -= 16;
                                      v442 -= 2;
                                    }
                                    while (v442 != v446);
                                    uint64_t v442 = (void *)*v510;
                                  }
                                  *(void *)(v6 + 1072) = v453;
                                  uint64_t v439 = v452 + 16;
                                  *(void *)(v6 + 1080) = v452 + 16;
                                  *(void *)(v6 + 1088) = &v451[16 * v450];
                                  unsigned int v378 = v516;
                                  unsigned int v425 = v444;
                                  if (v442) {
                                    operator delete(v442);
                                  }
                                  uint64_t v4 = v521;
                                  unint64_t v438 = v518;
                                  unint64_t v433 = v520;
                                }
                                *(void *)(v6 + 1080) = v439;
                                ++v437;
                              }
                              while (v437 < *v425);
                              uint64_t v457 = *v378;
                              uint64_t v421 = -v457;
                              if (*(unsigned __int16 *)((char *)v378 - v457) < 0xBu) {
                                goto LABEL_765;
                              }
LABEL_716:
                              if (!*(_WORD *)((char *)v378 + v421 + 10)) {
                                goto LABEL_765;
                              }
                              unint64_t v458 = (unsigned int *)((char *)v378 + *(unsigned __int16 *)((char *)v378 + v421 + 10));
                              uint64_t v459 = (unsigned int *)((char *)v458 + *v458);
                              std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v509, *v459);
                              unint64_t v460 = *v459;
                              uint64_t v461 = *(unsigned char **)(v6 + 1096);
                              if (v460 > (uint64_t)(*(void *)(v6 + 1112) - (void)v461) >> 3)
                              {
                                int v462 = *(unsigned char **)(v6 + 1104);
                                long long v463 = (char *)operator new(8 * v460);
                                uint64_t v464 = v462 - v461;
                                uint64_t v465 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                uint64_t v466 = v465;
                                if (v462 != v461)
                                {
                                  if ((unint64_t)(v464 - 8) < 0x58)
                                  {
                                    uint64_t v466 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                    goto LABEL_725;
                                  }
                                  uint64_t v466 = &v463[(v462 - v461) & 0xFFFFFFFFFFFFFFF8];
                                  if ((unint64_t)(&v462[-(v464 & 0xFFFFFFFFFFFFFFF8)] - v463) < 0x20) {
                                    goto LABEL_786;
                                  }
                                  uint64_t v467 = v464 >> 3;
                                  unint64_t v468 = ((unint64_t)(v464 - 8) >> 3) + 1;
                                  uint64_t v469 = &v463[8 * v467 - 16];
                                  uint64_t v470 = (long long *)(v462 - 16);
                                  uint64_t v471 = v468 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    long long v472 = *v470;
                                    *((_OWORD *)v469 - 1) = *(v470 - 1);
                                    *(_OWORD *)uint64_t v469 = v472;
                                    v469 -= 32;
                                    v470 -= 2;
                                    v471 -= 4;
                                  }
                                  while (v471);
                                  uint64_t v466 = &v465[-8 * (v468 & 0x3FFFFFFFFFFFFFFCLL)];
                                  v462 -= 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
                                  if (v468 != (v468 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_786:
                                    do
                                    {
LABEL_725:
                                      uint64_t v473 = *((void *)v462 - 1);
                                      v462 -= 8;
                                      *((void *)v466 - 1) = v473;
                                      v466 -= 8;
                                    }
                                    while (v462 != v461);
                                  }
                                }
                                *(void *)(v6 + 1096) = v466;
                                *(void *)(v6 + 1104) = v465;
                                *(void *)(v6 + 1112) = &v463[8 * v460];
                                if (v461) {
                                  operator delete(v461);
                                }
                              }
                              if (!*v459) {
                                goto LABEL_765;
                              }
                              uint64_t v474 = 0;
                              uint64_t v475 = v459 + 1;
                              unint64_t v508 = v6;
                              while (2)
                              {
                                AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v475[v474] + v475[v474]));
                                AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v523, v424, (uint64_t)__dst);
                                uint64_t v476 = *(__n128 **)(v6 + 1128);
                                if ((unint64_t)v476 >= *(void *)(v6 + 1136))
                                {
                                  uint64_t v478 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v509, v523);
                                }
                                else
                                {
                                  v476->n128_u64[0] = v523.n128_u64[0];
                                  unint64_t v477 = v523.n128_u64[1];
                                  v476->n128_u64[1] = v523.n128_u64[1];
                                  if (v477) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v477 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  uint64_t v478 = v476 + 1;
                                }
                                *(void *)(v6 + 1128) = v478;
                                uint64_t v479 = *(unsigned int *)(v523.n128_u64[0] + 96);
                                unint64_t v480 = *(char **)(v6 + 1104);
                                unint64_t v481 = *(void *)(v6 + 1112);
                                if ((unint64_t)v480 < v481)
                                {
                                  *(void *)unint64_t v480 = v479;
                                  unint64_t v482 = v480 + 8;
                                  goto LABEL_762;
                                }
                                uint64_t v483 = *(char **)(v6 + 1096);
                                uint64_t v484 = (v480 - v483) >> 3;
                                unint64_t v485 = v484 + 1;
                                if ((unint64_t)(v484 + 1) >> 61) {
                                  abort();
                                }
                                uint64_t v486 = v481 - (void)v483;
                                if (v486 >> 2 > v485) {
                                  unint64_t v485 = v486 >> 2;
                                }
                                if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v487 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v487 = v485;
                                }
                                if (v487)
                                {
                                  if (v487 >> 61) {
                                    std::__throw_bad_array_new_length[abi:nn180100]();
                                  }
                                  unint64_t v488 = operator new(8 * v487);
                                }
                                else
                                {
                                  unint64_t v488 = 0;
                                }
                                unint64_t v489 = &v488[8 * v484];
                                *unint64_t v489 = v479;
                                unint64_t v482 = v489 + 1;
                                if (v480 == v483)
                                {
                                  unint64_t v6 = v508;
                                }
                                else
                                {
                                  unint64_t v490 = v480 - 8 - v483;
                                  if (v490 < 0x58)
                                  {
                                    unint64_t v6 = v508;
                                    goto LABEL_758;
                                  }
                                  unint64_t v6 = v508;
                                  if ((unint64_t)(v483 - v488) < 0x20) {
                                    goto LABEL_787;
                                  }
                                  uint64_t v491 = (v490 >> 3) + 1;
                                  uint64_t v492 = &v488[8 * v484 - 16];
                                  unint64_t v493 = v480 - 16;
                                  uint64_t v494 = v491 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    long long v495 = *(_OWORD *)v493;
                                    *(v492 - 1) = *((_OWORD *)v493 - 1);
                                    *uint64_t v492 = v495;
                                    v492 -= 2;
                                    v493 -= 32;
                                    v494 -= 4;
                                  }
                                  while (v494);
                                  v489 -= v491 & 0x3FFFFFFFFFFFFFFCLL;
                                  v480 -= 8 * (v491 & 0x3FFFFFFFFFFFFFFCLL);
                                  if (v491 != (v491 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_787:
                                    do
                                    {
LABEL_758:
                                      uint64_t v496 = *((void *)v480 - 1);
                                      v480 -= 8;
                                      *--unint64_t v489 = v496;
                                    }
                                    while (v480 != v483);
                                  }
                                }
                                *(void *)(v6 + 1096) = v489;
                                *(void *)(v6 + 1104) = v482;
                                *(void *)(v6 + 1112) = &v488[8 * v487];
                                if (v483) {
                                  operator delete(v483);
                                }
                                uint64_t v4 = v521;
                                uint64_t v475 = v459 + 1;
LABEL_762:
                                *(void *)(v6 + 1104) = v482;
                                unint64_t v497 = (std::__shared_weak_count *)v523.n128_u64[1];
                                if (v523.n128_u64[1]
                                  && !atomic_fetch_add((atomic_ullong *volatile)(v523.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
                                  std::__shared_weak_count::__release_weak(v497);
                                }
                                if (v526 < 0) {
                                  operator delete(v525[0]);
                                }
                                if (++v474 >= (unint64_t)*v459) {
                                  goto LABEL_765;
                                }
                                continue;
                              }
                            }
                          }
                        }
LABEL_385:
                        if (v189 < 0x21) {
                          goto LABEL_389;
                        }
                        goto LABEL_386;
                      }
LABEL_384:
                      *(unsigned char *)(v6 + 1147) = 0;
                      goto LABEL_385;
                    }
                  }
                }
                uint64_t v186 = 0;
                goto LABEL_334;
              }
              goto LABEL_320;
            }
            if (v177 >= 0x27)
            {
              uint64_t v178 = v176[19];
              if (v176[19])
              {
                int v180 = *((unsigned __int8 *)v13 + v178);
                if (*((unsigned char *)v13 + v178))
                {
                  BOOL v179 = 1;
LABEL_321:
                  LOBYTE(v178) = v180 != 0;
                  goto LABEL_322;
                }
              }
              if (v177 >= 0x29 && (uint64_t v181 = v176[20]) != 0)
              {
                BOOL v179 = *((unsigned char *)v13 + v181) != 0;
                if (!v178) {
                  goto LABEL_322;
                }
              }
              else
              {
                BOOL v179 = 0;
                if (!v178) {
                  goto LABEL_322;
                }
              }
LABEL_320:
              int v180 = *((unsigned __int8 *)v13 + v178);
              goto LABEL_321;
            }
          }
          BOOL v179 = 0;
          LOBYTE(v178) = 0;
          goto LABEL_322;
        }
      }
      else
      {
        int v104 = (unsigned int **)(v103 + 108);
        uint64_t v105 = (unsigned int *)v103[108];
        if (!v105) {
          goto LABEL_259;
        }
      }
      if (v104[1])
      {
        uint64_t v106 = (int *)((char *)v105 + *v105);
        uint64_t v107 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v107 < 0xDu)
        {
          LODWORD(v108) = 0;
        }
        else
        {
          uint64_t v108 = v107[6];
          if (v108) {
            LODWORD(v108) = *(int *)((char *)v106 + v108);
          }
        }
        *(_DWORD *)(v6 + 1180) = v108;
        uint64_t v109 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v109 < 0xBu)
        {
          LODWORD(v110) = 0;
        }
        else
        {
          uint64_t v110 = v109[5];
          if (v110) {
            LODWORD(v110) = *(int *)((char *)v106 + v110);
          }
        }
        *(_DWORD *)(v6 + 1188) = v110;
        uint64_t v111 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v111 < 0x11u)
        {
          LODWORD(v112) = 0;
        }
        else
        {
          uint64_t v112 = v111[8];
          if (v112) {
            LODWORD(v112) = *(int *)((char *)v106 + v112);
          }
        }
        *(_DWORD *)(v6 + 1192) = v112;
        uint64_t v113 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v113 < 0x13u)
        {
          LODWORD(v114) = 0;
        }
        else
        {
          uint64_t v114 = v113[9];
          if (v114) {
            LODWORD(v114) = *(int *)((char *)v106 + v114);
          }
        }
        *(_DWORD *)(v6 + 1196) = v114;
        uint64_t v115 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v115 < 0x17u)
        {
          LODWORD(v116) = 0;
        }
        else
        {
          uint64_t v116 = v115[11];
          if (v116) {
            LODWORD(v116) = *(int *)((char *)v106 + v116);
          }
        }
        *(_DWORD *)(v6 + 1200) = v116;
        uint64_t v117 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v117 < 0x1Bu)
        {
          LODWORD(v118) = 0;
        }
        else
        {
          uint64_t v118 = v117[13];
          if (v118) {
            LODWORD(v118) = *(int *)((char *)v106 + v118);
          }
        }
        *(_DWORD *)(v6 + 1204) = v118;
        uint64_t v119 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v119 < 0x15u)
        {
          LODWORD(v120) = 0;
        }
        else
        {
          uint64_t v120 = v119[10];
          if (v120) {
            LODWORD(v120) = *(int *)((char *)v106 + v120);
          }
        }
        *(_DWORD *)(v6 + 1208) = v120;
        uint64_t v121 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v121 < 0x19u)
        {
          LODWORD(v122) = 0;
        }
        else
        {
          uint64_t v122 = v121[12];
          if (v122) {
            LODWORD(v122) = *(int *)((char *)v106 + v122);
          }
        }
        *(_DWORD *)(v6 + 1212) = v122;
        uint64_t v123 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v123 < 0x1Du)
        {
          LODWORD(v124) = 0;
        }
        else
        {
          uint64_t v124 = v123[14];
          if (v124) {
            LODWORD(v124) = *(int *)((char *)v106 + v124);
          }
        }
        *(_DWORD *)(v6 + 1216) = v124;
        uint64_t v125 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v125 < 0xFu)
        {
          LODWORD(v126) = 0;
        }
        else
        {
          uint64_t v126 = v125[7];
          if (v126) {
            LODWORD(v126) = *(int *)((char *)v106 + v126);
          }
        }
        *(_DWORD *)(v6 + 1220) = v126;
        uint64_t v127 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v127 < 0x1Fu)
        {
          LODWORD(v128) = 0;
        }
        else
        {
          uint64_t v128 = v127[15];
          if (v128) {
            LODWORD(v128) = *(int *)((char *)v106 + v128);
          }
        }
        *(_DWORD *)(v6 + 1224) = v128;
        uint64_t v129 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v129 < 0x21u)
        {
          LODWORD(v130) = 0;
        }
        else
        {
          uint64_t v130 = v129[16];
          if (v130) {
            LODWORD(v130) = *(int *)((char *)v106 + v130);
          }
        }
        *(_DWORD *)(v6 + 1228) = v130;
        uint64_t v131 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v131 < 0x23u)
        {
          LODWORD(v132) = 0;
        }
        else
        {
          uint64_t v132 = v131[17];
          if (v132) {
            LODWORD(v132) = *(int *)((char *)v106 + v132);
          }
        }
        *(_DWORD *)(v6 + 1232) = v132;
        uint64_t v133 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v133 < 0x25u)
        {
          LODWORD(v134) = 0;
        }
        else
        {
          uint64_t v134 = v133[18];
          if (v134) {
            LODWORD(v134) = *(int *)((char *)v106 + v134);
          }
        }
        *(_DWORD *)(v6 + 1236) = v134;
        uint64_t v135 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v135 < 0x27u)
        {
          LODWORD(v136) = 0;
        }
        else
        {
          uint64_t v136 = v135[19];
          if (v136) {
            LODWORD(v136) = *(int *)((char *)v106 + v136);
          }
        }
        *(_DWORD *)(v6 + 1240) = v136;
        uint64_t v137 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v137 < 0x29u)
        {
          LODWORD(v138) = 0;
        }
        else
        {
          uint64_t v138 = v137[20];
          if (v138) {
            LODWORD(v138) = *(int *)((char *)v106 + v138);
          }
        }
        *(_DWORD *)(v6 + 1244) = v138;
        uint64_t v139 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v139 < 0x2Bu)
        {
          LODWORD(v140) = 0;
        }
        else
        {
          uint64_t v140 = v139[21];
          if (v140) {
            LODWORD(v140) = *(int *)((char *)v106 + v140);
          }
        }
        *(_DWORD *)(v6 + 1248) = v140;
        uint64_t v141 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v141 < 7u)
        {
          LODWORD(v142) = 0;
        }
        else
        {
          uint64_t v142 = v141[3];
          if (v142) {
            LODWORD(v142) = *(int *)((char *)v106 + v142);
          }
        }
        *(_DWORD *)(v6 + 1252) = v142;
        uint64_t v143 = (unsigned __int16 *)((char *)v106 - *v106);
        if (*v143 >= 5u && (uint64_t v144 = v143[2]) != 0) {
          int v145 = *(int *)((char *)v106 + v144);
        }
        else {
          int v145 = 0;
        }
        *(_DWORD *)(v6 + 1260) = v145;
      }
      goto LABEL_259;
    }
    size_t v45 = a3[1];
    if (v45 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v46 = (const void *)*a3;
    if (v45 >= 0x17)
    {
      uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v45 | 7) != 0x17) {
        uint64_t v48 = v45 | 7;
      }
      uint64_t v49 = v48 + 1;
      uint64_t v47 = operator new(v48 + 1);
      *(void *)&__dst[8] = v45;
      *(void *)&__dst[16] = v49 | 0x8000000000000000;
      *(void *)std::string __dst = v47;
    }
    else
    {
      __dst[23] = a3[1];
      uint64_t v47 = __dst;
      if (!v45) {
        goto LABEL_83;
      }
    }
    memmove(v47, v46, v45);
LABEL_83:
    v47[v45] = 0;
    uint64_t v50 = a3;
    if (*(char *)(v6 + 991) < 0)
    {
      operator delete(*v499);
      uint64_t v50 = a3;
    }
    *(_OWORD *)uint64_t v499 = *(_OWORD *)__dst;
    *(void *)(v6 + 984) = *(void *)&__dst[16];
    unint64_t v51 = v50 + 3;
    uint64_t v13 = v519;
    if (v50[3])
    {
      if (!v50[4]) {
        unint64_t v51 = v50 + 73;
      }
    }
    else
    {
      unint64_t v51 = v50 + 73;
    }
    *(void *)(v6 + 992) = *v51 - *v50;
    goto LABEL_91;
  }
  if (v20 < 0x45)
  {
    if (v20 < 0x3D)
    {
      LOWORD(v25) = 0;
      if (v20 < 0x3B)
      {
        LODWORD(v27) = 0;
        uint64_t v26 = 0;
        LOWORD(v24) = 0;
        LOBYTE(v28) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 288) = v27;
        __int16 v29 = v25 + v27 - 1;
        int v30 = -(int)v27;
        uint64_t v31 = *(void *)(a1 + 296);
        unint64_t v32 = (unsigned __int16)v24 | ((unint64_t)(unsigned __int16)(v30 & v29) << 32) | (v26 << 48) | (v28 << 16) | (unint64_t)(v31 & 0xFF000000);
        *(void *)(a1 + 296) = v32;
        if (v32 != v31)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v33 = -1;
          *((void *)&v33 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v33;
          *(_OWORD *)(a1 + 360) = v33;
          *(_OWORD *)(a1 + 376) = v33;
        }
        goto LABEL_56;
      }
      LOWORD(v24) = 0;
      uint64_t v26 = v19[29];
      if (!v19[29])
      {
LABEL_39:
        if (v20 < 0x3F)
        {
          LODWORD(v27) = 0;
          LOBYTE(v28) = 0;
        }
        else
        {
          uint64_t v27 = v19[31];
          if (v19[31]) {
            uint64_t v27 = *(void *)((char *)v18 + v27);
          }
          if (v20 < 0x4B)
          {
            LOBYTE(v28) = 0;
          }
          else
          {
            uint64_t v28 = v19[37];
            if (v28) {
              LODWORD(v28) = *(int *)((char *)v18 + v28);
            }
          }
        }
        goto LABEL_54;
      }
LABEL_38:
      uint64_t v26 = *(void *)((char *)v18 + v26);
      goto LABEL_39;
    }
    LOWORD(v24) = 0;
    uint64_t v25 = v19[30];
    if (v19[30]) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v24 = v19[34];
    if (v19[34]) {
      uint64_t v24 = *(void *)((char *)v18 + v24);
    }
    uint64_t v25 = v19[30];
    if (v19[30]) {
LABEL_36:
    }
      uint64_t v25 = *(void *)((char *)v18 + v25);
  }
  uint64_t v26 = v19[29];
  if (!v19[29]) {
    goto LABEL_39;
  }
  goto LABEL_38;
}

void sub_242AC3CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void **a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, CompileStatistics *a18, void **a19, void **a20,void **a21,void **a22,uint64_t a23,void **a24,void **a25,void **a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  CompileStatistics::~CompileStatistics(a18);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v48 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a29);
  uint64_t v50 = *(void **)(v48 + 1096);
  if (v50)
  {
    *(void *)(v48 + 1104) = v50;
    operator delete(v50);
  }
  unint64_t v51 = *a31;
  if (*a31)
  {
    *(void *)(v48 + 1080) = v51;
    operator delete(v51);
  }
  if (*a10 < 0)
  {
    operator delete(*a11);
    if ((*(char *)(v48 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v48 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v48 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a24);
  if (*(char *)(v48 + 575) < 0)
  {
LABEL_8:
    operator delete(*a25);
    if ((*(char *)(v48 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a35);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a14);
      unint64_t v52 = *a19;
      if (*a19)
      {
        *(void *)(v48 + 176) = v52;
        operator delete(v52);
      }
      unsigned int v53 = *a21;
      if (*a21)
      {
        *(void *)(v48 + 152) = v53;
        operator delete(v53);
      }
      uint64_t v54 = *a20;
      if (*a20)
      {
        *(void *)(v48 + 128) = v54;
        operator delete(v54);
      }
      uint64_t v55 = *a22;
      if (*a22)
      {
        *(void *)(v48 + 104) = v55;
        operator delete(v55);
      }
      unsigned int v56 = *a41;
      if (*a41)
      {
        *(void *)(v48 + 80) = v56;
        operator delete(v56);
        uint64_t v57 = *a36;
        if (!*a36)
        {
LABEL_24:
          if (a48 < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v57 = *a36;
        if (!*a36) {
          goto LABEL_24;
        }
      }
      *(void *)(v48 + 56) = v57;
      operator delete(v57);
      if (a48 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a26);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v48 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::BlitVertexFastClearProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::BlitVertexFastClearProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a1;
  uint64_t v514 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F853068;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v507 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v493 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v492 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v7;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v7;
  *(_OWORD *)(a1 + 376) = v7;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  uint64_t v496 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  uint64_t v506 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (*(void *)(a3 + 224))
  {
    long long v8 = (unsigned int **)(a3 + 784);
    if (*(void *)(a3 + 232)) {
      long long v8 = (unsigned int **)(a3 + 224);
    }
  }
  else
  {
    long long v8 = (unsigned int **)(a3 + 784);
  }
  unint64_t v9 = 0;
  if (*v8 && v8[1]) {
    unint64_t v9 = (int *)((char *)*v8 + **v8);
  }
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0)
  {
    int8x16_t v501 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
    if (!*(void *)(a3 + 464))
    {
LABEL_12:
      uint64_t v12 = (unsigned int **)(a3 + 1024);
      goto LABEL_17;
    }
  }
  else
  {
    int8x16_t v501 = 0;
    if (!*(void *)(a3 + 464)) {
      goto LABEL_12;
    }
  }
  if (*(void *)(a3 + 472)) {
    uint64_t v12 = (unsigned int **)(a3 + 464);
  }
  else {
    uint64_t v12 = (unsigned int **)(a3 + 1024);
  }
LABEL_17:
  uint64_t v13 = 0;
  if (*v12 && v12[1]) {
    uint64_t v13 = (int *)((char *)*v12 + **v12);
  }
  unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (v18 < 0x25)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v17[18];
    if (v17[18]) {
      LOBYTE(v19) = *((unsigned char *)v16 + v19) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v19;
  unsigned int v20 = (unsigned __int16 *)((char *)v501 - *v501);
  if (*v20 < 0x55u || (uint64_t v21 = v20[42]) == 0 || !*((unsigned char *)v501 + v21))
  {
LABEL_55:
    unint64_t v32 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v32 < 7u)
    {
      LODWORD(v33) = 0;
    }
    else
    {
      uint64_t v33 = v32[3];
      if (v33) {
        LODWORD(v33) = *(int *)((char *)v16 + v33);
      }
    }
    unint64_t v490 = (void *)(a1 + 168);
    uint64_t v491 = (void *)(a1 + 120);
    uint64_t v498 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v33;
    uint64_t v34 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v34 >= 0x13u && (uint64_t v35 = v34[9]) != 0) {
      uint64_t v36 = (char *)v16 + v35 + *(unsigned int *)((char *)v16 + v35) + 4;
    }
    else {
      uint64_t v36 = "";
    }
    uint64_t v494 = (std::string *)(a1 + 576);
    long long v495 = (unint64_t *)(a1 + 552);
    unint64_t v489 = (void **)(a1 + 968);
    uint64_t v499 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v496, v36);
    uint64_t v37 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
      uint64_t v39 = (char *)v16 + v38 + *(unsigned int *)((char *)v16 + v38) + 4;
    }
    else {
      uint64_t v39 = "";
    }
    MEMORY[0x24566EB20](v495, v39);
    uint64_t v40 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v40 < 0x29u)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      uint64_t v41 = v40[20];
      if (v41) {
        LOBYTE(v41) = *((unsigned char *)v16 + v41) != 0;
      }
    }
    *(unsigned char *)(v6 + 600) = v41;
    std::string::operator=(v494, &__str);
    uint64_t v42 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v42 < 5u || !v42[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_90:
      uint64_t v508 = a4;
      unint64_t v505 = (void *)a3;
      long long v500 = v16;
      if (*(void *)(a3 + 344))
      {
        uint64_t v49 = (unsigned int **)(a3 + 344);
        if (!*(void *)(a3 + 352)) {
          uint64_t v49 = (unsigned int **)(a3 + 904);
        }
      }
      else
      {
        uint64_t v49 = (unsigned int **)(a3 + 904);
      }
      uint64_t v50 = v501;
      if (!*v49 || !v49[1])
      {
LABEL_143:
        long long v85 = v505;
        if (v505[68])
        {
          int v86 = (unsigned int **)(v505 + 68);
          if (!v505[69]) {
            int v86 = (unsigned int **)(v505 + 138);
          }
        }
        else
        {
          int v86 = (unsigned int **)(v505 + 138);
        }
        BOOL v88 = *v86;
        uint64_t v87 = v86[1];
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        uint64_t v90 = v508;
        if (v89
          || (uint64_t v91 = (int *)((char *)v88 + *v88), v92 = (unsigned __int16 *)((char *)v91 - *v91), *v92 < 5u)
          || (uint64_t v93 = v92[2]) == 0)
        {
          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = *(void *)((char *)v91 + v93);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(v6 + 1184) = (float)(v94
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        uint64_t v95 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v95 < 5u)
        {
          LODWORD(v96) = 0;
        }
        else
        {
          uint64_t v96 = v95[2];
          if (v96) {
            LODWORD(v96) = *(int *)((char *)v50 + v96);
          }
        }
        *(_DWORD *)(v6 + 1176) = v96;
        uint64_t v97 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v97 < 0x2Du)
        {
          LODWORD(v98) = 0;
        }
        else
        {
          uint64_t v98 = v97[22];
          if (v98) {
            LODWORD(v98) = *(int *)((char *)v50 + v98);
          }
        }
        *(_DWORD *)(v6 + 1180) = v98;
        uint64_t v99 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v99 < 0x35u)
        {
          LODWORD(v100) = 0;
        }
        else
        {
          uint64_t v100 = v99[26];
          if (v100) {
            LODWORD(v100) = *(int *)((char *)v50 + v100);
          }
        }
        *(_DWORD *)(v6 + 1220) = v100;
        uint64_t v101 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v101 < 0x43u)
        {
          LODWORD(v102) = 0;
        }
        else
        {
          uint64_t v102 = v101[33];
          if (v102) {
            LODWORD(v102) = *(int *)((char *)v50 + v102);
          }
        }
        *(_DWORD *)(v6 + 1256) = v102;
        if (v505[38])
        {
          int v103 = (unsigned int **)(v505 + 38);
          if (!v505[39]) {
            int v103 = (unsigned int **)(v505 + 108);
          }
          int v104 = *v103;
          if (!*v103)
          {
LABEL_258:
            if (v505[53])
            {
              uint64_t v145 = v505[54];
              if (v145) {
                uint64_t v146 = v505[53];
              }
              else {
                uint64_t v146 = v505[123];
              }
              if (v145) {
                uint64_t v147 = v505 + 53;
              }
              else {
                uint64_t v147 = v505 + 123;
              }
            }
            else
            {
              uint64_t v147 = v505 + 123;
              uint64_t v146 = v505[123];
            }
            MEMORY[0x24566EB30](v6 + 1320, v146, v147[1]);
            std::string::push_back((std::string *)(v6 + 1320), 0);
            uint64_t v148 = *v50;
            uint64_t v149 = (char *)v50 - v148;
            unsigned int v150 = *(unsigned __int16 *)((char *)v50 - v148);
            if (v150 < 0x39) {
              goto LABEL_284;
            }
            uint64_t v151 = -v148;
            uint64_t v152 = *((unsigned __int16 *)v149 + 28);
            if (v152)
            {
              uint64_t v153 = (int *)((char *)v50 + v152 + *(unsigned int *)((char *)v50 + v152));
              if (*v153)
              {
                *(unsigned char *)(v6 + 1064) = 1;
                uint64_t v154 = (_DWORD *)((char *)v153 + v153[1] + 4);
                int v155 = (unsigned __int16 *)((char *)v154 - *v154);
                if (*v155 >= 9u && (uint64_t v156 = v155[4]) != 0) {
                  int v157 = *(int *)((char *)v154 + v156);
                }
                else {
                  int v157 = 0;
                }
                *(_DWORD *)(v6 + 1264) = v157;
                *(unsigned char *)(v6 + 1268) = 1;
                uint64_t v158 = *v50;
                uint64_t v151 = -v158;
                unsigned int v150 = *(unsigned __int16 *)((char *)v50 - v158);
              }
            }
            if (v150 < 0x3B) {
              goto LABEL_284;
            }
            uint64_t v159 = (char *)v50 + v151;
            if (*((_WORD *)v159 + 29))
            {
              uint64_t v160 = (unsigned int *)((char *)v50
                                    + *((unsigned __int16 *)v159 + 29)
                                    + *(unsigned int *)((char *)v50 + *((unsigned __int16 *)v159 + 29)));
              uint64_t v161 = *v160;
              if (v161)
              {
                uint64_t v162 = v160 + 1;
                do
                {
                  unsigned int v164 = *v162++;
                  unsigned int v163 = v164;
                  if (!(v164 >> 20)) {
                    *(void *)(v6 + 1048 + 8 * (v163 > 0x3F)) |= 1 << v163;
                  }
                  --v161;
                }
                while (v161);
              }
            }
            if (v150 < 0x57)
            {
LABEL_284:
              LODWORD(v165) = 0;
            }
            else
            {
              uint64_t v165 = *((unsigned __int16 *)v159 + 43);
              if (*((_WORD *)v159 + 43)) {
                LODWORD(v165) = *(int *)((char *)v50 + v165);
              }
            }
            *(_DWORD *)(v6 + 400) = v165;
            uint64_t v166 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v166 >= 0x21u && (uint64_t v167 = v166[16]) != 0) {
              int v168 = *(int *)((char *)v50 + v167);
            }
            else {
              int v168 = 0;
            }
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(v6 + 404) = getAdditionalSpillBufferBytes(void)::extra + v168;
            int v169 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v169 < 0x59u)
            {
              LODWORD(v170) = 0;
            }
            else
            {
              uint64_t v170 = v169[44];
              if (v170) {
                LODWORD(v170) = *(int *)((char *)v50 + v170);
              }
            }
            *(_DWORD *)(v6 + 432) = v170;
            uint64_t v171 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v171 < 0x51u)
            {
              LODWORD(v172) = 0;
            }
            else
            {
              uint64_t v172 = v171[40];
              if (v172) {
                LODWORD(v172) = *(int *)((char *)v50 + v172);
              }
            }
            *(_DWORD *)(v6 + 436) = v172;
            uint64_t v173 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v173 < 0x4Bu)
            {
              LODWORD(v174) = 0;
            }
            else
            {
              uint64_t v174 = v173[37];
              if (v174) {
                LODWORD(v174) = *(int *)((char *)v50 + v174);
              }
            }
            *(_DWORD *)(v6 + 444) = v174;
            uint64_t v175 = (unsigned __int16 *)((char *)v50 - *v50);
            unsigned int v176 = *v175;
            if (v176 >= 0x25)
            {
              if (v175[18] && *((unsigned char *)v50 + v175[18]))
              {
                if (v176 < 0x27)
                {
                  LOBYTE(v177) = 0;
                  BOOL v178 = 1;
                  goto LABEL_321;
                }
                LODWORD(v177) = v175[19];
                BOOL v178 = 1;
                if (!v175[19])
                {
LABEL_321:
                  *(unsigned char *)(v6 + 454) = v177;
                  uint64_t v181 = (unsigned __int16 *)((char *)v500 - *v500);
                  unsigned int v182 = *v181;
                  if (v182 < 0x21)
                  {
                    uint64_t v184 = 0;
                    LODWORD(v183) = 0;
                  }
                  else
                  {
                    uint64_t v183 = v181[16];
                    if (v181[16]) {
                      LODWORD(v183) = *(int *)((char *)v500 + v183);
                    }
                    if (v182 < 0x4D)
                    {
                      uint64_t v184 = 0;
                    }
                    else
                    {
                      uint64_t v184 = v181[38];
                      if (v181[38]) {
                        uint64_t v184 = *(unsigned int *)((char *)v500 + v184);
                      }
                      if (v182 >= 0x4F)
                      {
                        uint64_t v185 = v181[39];
                        if (v185) {
                          uint64_t v185 = *(void *)((char *)v500 + v185);
                        }
LABEL_333:
                        *(void *)(v6 + 496) = v183 | (unint64_t)(v184 << 32);
                        *(void *)(v6 + 504) = v185;
                        *(unsigned char *)(v6 + 458) = v178 | v177;
                        uint64_t v186 = *v50;
                        uint64_t v187 = (char *)v50 - v186;
                        unsigned int v188 = *(unsigned __int16 *)((char *)v50 - v186);
                        if (v188 < 0x37)
                        {
                          LOBYTE(v189) = 0;
                        }
                        else
                        {
                          uint64_t v189 = *((unsigned __int16 *)v187 + 27);
                          if (*((_WORD *)v187 + 27)) {
                            LOBYTE(v189) = *((unsigned char *)v50 + v189) != 0;
                          }
                        }
                        *(unsigned char *)(v6 + 453) = v189;
                        uint64_t v190 = (unsigned __int16 *)((char *)v500 - *v500);
                        unsigned int v191 = *v190;
                        if (v191 < 0x33)
                        {
                          LOBYTE(v192) = 0;
                        }
                        else
                        {
                          uint64_t v192 = v190[25];
                          if (v190[25]) {
                            LOBYTE(v192) = *((unsigned char *)v500 + v192) != 0;
                          }
                        }
                        uint64_t v193 = -v186;
                        *(unsigned char *)(v6 + 459) = v192;
                        if (v188 < 0x3F)
                        {
                          LOBYTE(v194) = 0;
                        }
                        else
                        {
                          uint64_t v194 = *((unsigned __int16 *)v187 + 31);
                          if (v194)
                          {
                            uint64_t v195 = (unsigned int *)((char *)v50 + v194 + *(unsigned int *)((char *)v50 + v194));
                            uint64_t v194 = *v195;
                            if (v194)
                            {
                              unsigned int v196 = v195 + 1;
                              while (1)
                              {
                                unsigned int v198 = *v196++;
                                char v197 = v198;
                                if (v198 < 0x36 && ((0x3F000000000777uLL >> v197) & 1) != 0) {
                                  break;
                                }
                                if (!--v194) {
                                  goto LABEL_350;
                                }
                              }
                              LOBYTE(v194) = 1;
                            }
                          }
                        }
LABEL_350:
                        *(unsigned char *)(v6 + 461) = v194;
                        char v503 = v178;
                        if (v191 <= 0x14)
                        {
                          *(unsigned char *)(v6 + 455) = 0;
                          *(unsigned char *)(v6 + 1145) = 0;
                          *(unsigned char *)(v6 + 1147) = 0;
                          if (v188 >= 0x21) {
                            goto LABEL_385;
                          }
LABEL_388:
                          int v220 = 0;
                          goto LABEL_389;
                        }
                        uint64_t v199 = v190[10];
                        if (v190[10]) {
                          LOBYTE(v199) = *((unsigned char *)v500 + v199) != 0;
                        }
                        *(unsigned char *)(v6 + 455) = v199;
                        if (v191 < 0x25)
                        {
                          *(unsigned char *)(v6 + 1145) = 0;
                          if (v191 < 0x23) {
                            goto LABEL_383;
                          }
                        }
                        else
                        {
                          uint64_t v200 = v190[18];
                          if (v190[18]) {
                            LOBYTE(v200) = *((unsigned char *)v500 + v200) != 0;
                          }
                          *(unsigned char *)(v6 + 1145) = v200;
                        }
                        uint64_t v201 = v190[17];
                        if (v201)
                        {
                          *(unsigned char *)(v6 + 1147) = 1;
                          uint64_t v202 = (unsigned int *)((char *)v500 + v201);
                          uint64_t v203 = *v202;
                          uint64_t v205 = (unsigned int *)((char *)v202 + v203 + 4);
                          uint64_t v204 = *(unsigned int *)((char *)v202 + v203);
                          if (v204)
                          {
                            uint64_t v206 = &v205[v204];
                            while (1)
                            {
                              uint64_t v207 = (int *)((char *)v205 + *v205);
                              unsigned int v208 = (unsigned __int16 *)((char *)v207 - *v207);
                              unsigned int v209 = *v208;
                              if (v209 < 7)
                              {
                                int v210 = 0;
                                unsigned int v212 = 0;
                                if (v209 < 5) {
                                  goto LABEL_372;
                                }
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_368;
                                }
                              }
                              else if (v208[3])
                              {
                                int v210 = *(int *)((char *)v207 + v208[3]);
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_368;
                                }
                              }
                              else
                              {
                                int v210 = 0;
                                uint64_t v211 = v208[2];
                                if (!v211)
                                {
LABEL_368:
                                  unsigned int v212 = 0;
                                  goto LABEL_372;
                                }
                              }
                              unsigned int v212 = *(int *)((char *)v207 + v211);
LABEL_372:
                              unsigned int v213 = (uint64_t **)(v6 + 1160);
LABEL_373:
                              unsigned int v214 = *v213;
                              unsigned int v215 = v213;
                              if (*v213)
                              {
                                while (1)
                                {
                                  unsigned int v213 = (uint64_t **)v214;
                                  unsigned int v216 = *((_DWORD *)v214 + 7);
                                  if (v212 < v216) {
                                    goto LABEL_373;
                                  }
                                  if (v216 >= v212) {
                                    break;
                                  }
                                  unsigned int v214 = v213[1];
                                  if (!v214)
                                  {
                                    unsigned int v215 = v213 + 1;
                                    goto LABEL_378;
                                  }
                                }
                                unsigned int v217 = v213;
                              }
                              else
                              {
LABEL_378:
                                unsigned int v217 = operator new(0x28uLL);
                                v217[7] = v212;
                                v217[8] = 0;
                                *(void *)unsigned int v217 = 0;
                                *((void *)v217 + 1) = 0;
                                *((void *)v217 + 2) = v213;
                                *unsigned int v215 = (uint64_t *)v217;
                                uint64_t v218 = **(void **)(v6 + 1152);
                                uint64_t v219 = (uint64_t *)v217;
                                if (v218)
                                {
                                  *(void *)(v6 + 1152) = v218;
                                  uint64_t v219 = *v215;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 1160), v219);
                                ++*(void *)(v6 + 1168);
                              }
                              uint64_t v90 = v508;
                              long long v85 = v505;
                              v217[8] = v210;
                              if (++v205 == v206)
                              {
                                uint64_t v50 = v501;
                                uint64_t v221 = *v501;
                                uint64_t v193 = -v221;
                                if (*(unsigned __int16 *)((char *)v501 - v221) < 0x21u) {
                                  goto LABEL_388;
                                }
LABEL_385:
                                if (!*(_WORD *)((char *)v50 + v193 + 32)) {
                                  goto LABEL_388;
                                }
                                int v220 = *(int *)((char *)v50 + *(unsigned __int16 *)((char *)v50 + v193 + 32));
LABEL_389:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                int v222 = getAdditionalSpillBufferBytes(void)::extra + v220;
                                *(_DWORD *)(v6 + 396) = getAdditionalSpillBufferBytes(void)::extra + v220;
                                int v223 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v223 < 0x43u)
                                {
                                  LODWORD(v224) = 0;
                                }
                                else
                                {
                                  uint64_t v224 = v223[33];
                                  if (v224) {
                                    LODWORD(v224) = *(int *)((char *)v50 + v224);
                                  }
                                }
                                *(_DWORD *)(v6 + 408) = v224;
                                uint64_t v225 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v225 < 5u)
                                {
                                  LODWORD(v226) = 0;
                                }
                                else
                                {
                                  uint64_t v226 = v225[2];
                                  if (v226) {
                                    LODWORD(v226) = *(int *)((char *)v50 + v226);
                                  }
                                }
                                *(_DWORD *)(v6 + 392) = v226;
                                uint64_t v227 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v227 < 0x51u)
                                {
                                  LODWORD(v228) = 0;
                                }
                                else
                                {
                                  uint64_t v228 = v227[40];
                                  if (v228) {
                                    LODWORD(v228) = *(int *)((char *)v50 + v228);
                                  }
                                }
                                *(_DWORD *)(v6 + 428) = v228;
                                uint64_t v229 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v229 < 0x4Fu)
                                {
                                  LODWORD(v230) = 0;
                                }
                                else
                                {
                                  uint64_t v230 = v229[39];
                                  if (v230) {
                                    LODWORD(v230) = *(int *)((char *)v50 + v230);
                                  }
                                }
                                *(_DWORD *)(v6 + 440) = v230;
                                *(_DWORD *)(v6 + 448) = *(_DWORD *)(v90 + 468);
                                uint64_t v231 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*(int *)((char *)v50 + v231[6] + *(unsigned int *)((char *)v50 + v231[6])) | v222) {
                                  char v232 = 1;
                                }
                                else {
                                  char v232 = v503;
                                }
                                if (v232) {
                                  goto LABEL_420;
                                }
                                unsigned int v233 = *v231;
                                if (v233 < 0x21)
                                {
                                  int v234 = 0;
                                }
                                else if (v231[16])
                                {
                                  int v234 = *(int *)((char *)v50 + v231[16]);
                                  if (v233 >= 0x43)
                                  {
LABEL_707:
                                    if (v231[33])
                                    {
                                      int v235 = *(int *)((char *)v50 + v231[33]);
                                      goto LABEL_416;
                                    }
                                  }
                                }
                                else
                                {
                                  int v234 = 0;
                                  if (v233 >= 0x43) {
                                    goto LABEL_707;
                                  }
                                }
                                int v235 = 0;
                                {
LABEL_709:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                }
LABEL_416:
                                if (v235 + v234 + getAdditionalSpillBufferBytes(void)::extra)
                                {
LABEL_420:
                                  LOBYTE(v237) = 1;
                                }
                                else
                                {
                                  int v236 = (unsigned __int16 *)((char *)v50 - *v50);
                                  if (*v236 < 0x5Fu)
                                  {
                                    LOBYTE(v237) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v237 = v236[47];
                                    if (v237) {
                                      LOBYTE(v237) = *((unsigned char *)v50 + v237) != 0;
                                    }
                                  }
                                }
                                *(unsigned char *)(v6 + 452) = v237;
                                uint64_t v238 = (unsigned __int16 *)((char *)v500 - *v500);
                                if (*v238 < 0x11u)
                                {
                                  LODWORD(v239) = 0;
                                }
                                else
                                {
                                  uint64_t v239 = v238[8];
                                  if (v239) {
                                    LODWORD(v239) = *(int *)((char *)v500 + v239);
                                  }
                                }
                                *(_DWORD *)(v6 + 960) = v239;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                uint64_t v240 = (_OWORD *)(v6 + 816);
                                uint64_t v241 = (const void **)(v85 + 3);
                                if (v85[3])
                                {
                                  if (v85[4]) {
                                    uint64_t v242 = v85 + 3;
                                  }
                                  else {
                                    uint64_t v242 = v85 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v242 = v85 + 73;
                                }
                                uint64_t v243 = a2 + 5184;
                                AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v242[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(v6 + 1016));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v244 = *(_OWORD *)&__dst[16];
                                *uint64_t v240 = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 832) = v244;
                                *(_OWORD *)(v6 + 841) = *(_OWORD *)&__dst[25];
                                *(void *)(v6 + 608) = *(void *)(v6 + 816);
                                *(void *)(v6 + 640) = a2 + 5352;
                                long long v245 = *(_OWORD *)(v6 + 832);
                                *(_OWORD *)(v6 + 648) = *v240;
                                *(_OWORD *)(v6 + 664) = v245;
                                *(_OWORD *)(v6 + 673) = *(_OWORD *)(v6 + 841);
                                if (*v241)
                                {
                                  long long v246 = v505;
                                  uint64_t v247 = v505[4];
                                  if (v247) {
                                    long long v248 = *v241;
                                  }
                                  else {
                                    long long v248 = (const void *)v505[73];
                                  }
                                  if (v247) {
                                    long long v249 = v241;
                                  }
                                  else {
                                    long long v249 = (const void **)(v505 + 73);
                                  }
                                }
                                else
                                {
                                  long long v246 = v505;
                                  long long v249 = (const void **)(v505 + 73);
                                  long long v248 = (const void *)v505[73];
                                }
                                memcpy(*(void **)(v6 + 824), v248, (size_t)v249[1]);
                                uint64_t v250 = *(void *)(v6 + 824);
                                uint64_t v251 = *(void *)(v6 + 832);
                                *(void *)(v6 + 616) = *(void *)(v6 + 608);
                                *(void *)(v6 + 624) = v250;
                                *(void *)(v6 + 632) = v251;
                                uint64_t v252 = (const void **)(v246 + 8);
                                if (v246[8])
                                {
                                  if (v246[9]) {
                                    uint64_t v253 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v253 = v246 + 78;
                                  }
                                  uint64_t v254 = v253[1];
                                  if (!v254) {
                                    goto LABEL_455;
                                  }
                                }
                                else
                                {
                                  uint64_t v254 = v246[79];
                                  if (!v254) {
                                    goto LABEL_455;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v243, v254, (void *)(v6 + 1024));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v255 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(v6 + 864) = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 880) = v255;
                                *(_OWORD *)(v6 + 889) = *(_OWORD *)&__dst[25];
                                long long v256 = *(_OWORD *)(v6 + 880);
                                *(_OWORD *)(v6 + 696) = *(_OWORD *)(v6 + 864);
                                *(_OWORD *)(v6 + 712) = v256;
                                *(_OWORD *)(v6 + 721) = *(_OWORD *)(v6 + 889);
                                if (*v252)
                                {
                                  uint64_t v257 = v505[9];
                                  if (v257) {
                                    long long v258 = *v252;
                                  }
                                  else {
                                    long long v258 = (const void *)v505[78];
                                  }
                                  if (v257) {
                                    uint64_t v259 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v259 = v505 + 78;
                                  }
                                }
                                else
                                {
                                  uint64_t v259 = v505 + 78;
                                  long long v258 = (const void *)v505[78];
                                }
                                memcpy(*(void **)(v6 + 872), v258, v259[1]);
LABEL_455:
                                long long v260 = (const void **)(v505 + 13);
                                if (v505[13])
                                {
                                  if (v505[14]) {
                                    long long v261 = v505 + 13;
                                  }
                                  else {
                                    long long v261 = v505 + 83;
                                  }
                                  uint64_t v262 = v261[1];
                                  if (!v262) {
                                    goto LABEL_471;
                                  }
                                }
                                else
                                {
                                  uint64_t v262 = v505[84];
                                  if (!v262) {
                                    goto LABEL_471;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v243, v262, (void *)(v6 + 1032));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v263 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(v6 + 912) = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 928) = v263;
                                *(_OWORD *)(v6 + 937) = *(_OWORD *)&__dst[25];
                                long long v264 = *(_OWORD *)(v6 + 928);
                                *(_OWORD *)(v6 + 744) = *(_OWORD *)(v6 + 912);
                                *(_OWORD *)(v6 + 760) = v264;
                                *(_OWORD *)(v6 + 769) = *(_OWORD *)(v6 + 937);
                                if (*v260)
                                {
                                  uint64_t v265 = v505[14];
                                  if (v265) {
                                    uint64_t v266 = *v260;
                                  }
                                  else {
                                    uint64_t v266 = (const void *)v505[83];
                                  }
                                  if (v265) {
                                    uint64_t v267 = v505 + 13;
                                  }
                                  else {
                                    uint64_t v267 = v505 + 83;
                                  }
                                }
                                else
                                {
                                  uint64_t v267 = v505 + 83;
                                  uint64_t v266 = (const void *)v505[83];
                                }
                                memcpy(*(void **)(v6 + 920), v266, v267[1]);
                                uint64_t v268 = *(void *)(v6 + 928);
                                *(_OWORD *)(v6 + 792) = *(_OWORD *)(v6 + 912);
                                *(void *)(v6 + 808) = v268;
LABEL_471:
                                uint64_t v269 = v508;
                                if (*(unsigned char *)(v6 + 600) || *(unsigned char *)(*(void *)(v6 + 8) + 7761))
                                {
                                  {
                                    {
                                      unint64_t v271 = v6 + 528;
                                      if (*(char *)(v6 + 551) < 0) {
                                        unint64_t v271 = *v496;
                                      }
                                      unint64_t v272 = v6 + 576;
                                      if (*(char *)(v6 + 599) < 0) {
                                        unint64_t v272 = v494->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v273 = v6 + 552;
                                      if (*(char *)(v6 + 575) < 0) {
                                        unint64_t v273 = *v495;
                                      }
                                      int v274 = *(_DWORD *)(v6 + 512);
                                      uint64_t v275 = *(void *)(v6 + 608);
                                      unint64_t v276 = *(void **)(v6 + 832);
                                      *(_DWORD *)std::string __dst = 136447490;
                                      *(void *)&__dst[4] = v271;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v272;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v273;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v274;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v275;
                                      LOWORD(v512[0]) = 2050;
                                      *(void **)((char *)v512 + 2) = v276;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v270, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  uint64_t v277 = *(void *)(v6 + 8);
                                  unint64_t v278 = v6 + 528;
                                  if (*(char *)(v6 + 551) < 0) {
                                    unint64_t v278 = *v496;
                                  }
                                  unint64_t v279 = v6 + 576;
                                  if (*(char *)(v6 + 599) < 0) {
                                    unint64_t v279 = v494->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v280 = v6 + 552;
                                  if (*(char *)(v6 + 575) < 0) {
                                    unint64_t v280 = *v495;
                                  }
                                  int v281 = *(_DWORD *)(v6 + 512);
                                  uint64_t v282 = *(void *)(v6 + 608);
                                  uint64_t v283 = *(void *)(v6 + 832);
                                  char v284 = *(unsigned char *)(v6 + 600);
                                  *(void *)std::string __dst = v278;
                                  *(void *)&__dst[8] = v279;
                                  *(void *)&__dst[16] = v280;
                                  *(_DWORD *)&__dst[24] = v281;
                                  *(void *)&__dst[32] = v282;
                                  *(void *)&__dst[40] = v283;
                                  LOBYTE(v512[0]) = v284;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v277, v6, (long long *)__dst);
                                }
                                int v285 = *(_DWORD *)(v508 + 124);
                                int v286 = *(_DWORD *)(v508 + 132);
                                int v287 = *(_DWORD *)(v508 + 140);
                                if (*(unsigned char *)(v508 + 208)) {
                                  int v288 = *(_DWORD *)(v508 + 144);
                                }
                                else {
                                  int v288 = 0;
                                }
                                if (*(_OWORD *)(v508 + 176) == 0) {
                                  int v289 = 0;
                                }
                                else {
                                  int v289 = *(_DWORD *)(v508 + 144);
                                }
                                int v290 = *(_DWORD *)(v508 + 120) + *(_DWORD *)(v508 + 128) + *(_DWORD *)(v508 + 136);
                                unint64_t v291 = v288
                                     + *(_DWORD *)(v508 + 148)
                                     + v289
                                     + *(_DWORD *)(v508 + 152)
                                     + ((v285 + v286 + v287 - v290 + 3) & 0xFFFFFFFC);
                                uint64_t v292 = *(void *)(v6 + 48);
                                unint64_t v293 = (*(void *)(v6 + 56) - v292) >> 2;
                                if (v291 <= v293)
                                {
                                  if (v291 < v293) {
                                    *(void *)(v6 + 56) = v292 + 4 * v291;
                                  }
                                }
                                else
                                {
                                  std::vector<unsigned int>::__append(v507, v291 - v293);
                                  int v285 = *(_DWORD *)(v508 + 124);
                                  int v286 = *(_DWORD *)(v508 + 132);
                                  int v287 = *(_DWORD *)(v508 + 140);
                                  int v290 = *(_DWORD *)(v508 + 120) + *(_DWORD *)(v508 + 128) + *(_DWORD *)(v508 + 136);
                                }
                                *(_DWORD *)(v6 + 412) = v285 + v286 + v287 - v290;
                                uint64_t v294 = *v50;
                                uint64_t v295 = *(unsigned __int16 *)((char *)v50 - v294 + 16);
                                uint64_t v296 = *(unsigned int *)((char *)v50 + v295);
                                uint64_t v297 = *(unsigned int *)((char *)v50 + v295 + v296);
                                if (v297)
                                {
                                  uint64_t v298 = 4 * v297;
                                  uint64_t v299 = v295 + v296;
                                  while (1)
                                  {
                                    uint64_t v301 = *(unsigned int *)((char *)v50 + v299 + 4);
                                    uint64_t v302 = (char *)v50 + v299 + v301;
                                    uint64_t v303 = v301 - *((int *)v302 + 1);
                                    int v304 = (char *)v50 + v299 + v303;
                                    unsigned int v305 = *((unsigned __int16 *)v304 + 2);
                                    if (v305 < 7) {
                                      goto LABEL_512;
                                    }
                                    uint64_t v306 = *((unsigned __int16 *)v304 + 5);
                                    if (!v306 || (*(int *)((char *)v50 + v299 + v301 + v306 + 4) & 0x80000000) == 0) {
                                      break;
                                    }
LABEL_504:
                                    v299 += 4;
                                    v298 -= 4;
                                    if (!v298)
                                    {
                                      uint64_t v294 = *v50;
                                      goto LABEL_519;
                                    }
                                  }
                                  if (v305 < 9)
                                  {
LABEL_512:
                                    int v308 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v307 = *(unsigned __int16 *)((char *)v50 + v299 + v303 + 12);
                                    if (v307) {
                                      LODWORD(v307) = *(int *)((char *)v50 + v299 + v301 + v307 + 4);
                                    }
                                    int v308 = 4 * v307;
                                  }
                                  int v309 = v308 - *(_DWORD *)(v508 + 120);
                                  std::vector<unsigned int>::pointer begin = v507->__begin_;
                                  v507->__begin_[v309] = -1;
                                  begin[v309 + 1] = 0;
                                  begin[v309 + 2] = 1;
                                  begin[v309 + 3] = 2;
                                  uint64_t v311 = v301 - *((int *)v302 + 1);
                                  if (*(unsigned __int16 *)((char *)v50 + v299 + v311 + 4) >= 0xBu
                                    && *(_WORD *)((char *)v50 + v299 + v311 + 14)
                                    && *((unsigned char *)v50
                                       + v299
                                       + v301
                                       + *(unsigned __int16 *)((char *)v50 + v299 + v311 + 14)
                                       + 4))
                                  {
                                    uint64_t v312 = *(unsigned __int16 *)((char *)v50 + v299 + v311 + 10);
                                    if (v312) {
                                      int v300 = *(int *)((char *)v50 + v299 + v301 + v312 + 4);
                                    }
                                    else {
                                      int v300 = 0;
                                    }
                                    *(void *)(v6 + 480 + 8 * ((v300 & 0xFFFC0) != 0)) |= 1 << v300;
                                  }
                                  goto LABEL_504;
                                }
LABEL_519:
                                uint64_t v313 = -v294;
                                int v314 = (char *)v50 + v313;
                                if (*(unsigned char *)(v6 + 454))
                                {
                                  uint64_t v315 = *((unsigned __int16 *)v314 + 12);
                                  uint64_t v316 = *(unsigned int *)((char *)v50 + v315);
                                  uint64_t v317 = (unsigned int *)((char *)v50 + v315 + v316);
                                  uint64_t v318 = *v317;
                                  if (v318)
                                  {
                                    unint64_t v319 = 0;
                                    uint64_t v320 = 4 * v318;
                                    uint64_t v321 = (char *)v50 + v315 + v316;
                                    while (1)
                                    {
                                      uint64_t v322 = v317[v319 / 4 + 1];
                                      uint64_t v323 = v322 - *(int *)((char *)&v317[v319 / 4 + 1] + v322);
                                      uint64_t v324 = &v321[v319 + v323];
                                      unsigned int v325 = *((unsigned __int16 *)v324 + 2);
                                      if (v325 >= 5)
                                      {
                                        uint64_t v326 = *((unsigned __int16 *)v324 + 4);
                                        if (v326)
                                        {
                                          if (v321[v319 + 4 + v322 + v326] == 93)
                                          {
                                            if (v325 < 7) {
                                              break;
                                            }
                                            uint64_t v327 = *(unsigned __int16 *)&v321[v319 + 10 + v323];
                                            if (!v327) {
                                              break;
                                            }
                                            int v328 = *(_DWORD *)&v321[v319 + 4 + v322 + v327];
                                            if ((v328 & 0x80000000) == 0 && (v328 & 0xFFF00000) != 0x400000) {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                      v319 += 4;
                                      if (v320 == v319) {
                                        goto LABEL_531;
                                      }
                                    }
                                    *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), *(int8x16_t *)(v6 + 496));
                                  }
                                }
LABEL_531:
                                uint64_t v329 = *((unsigned __int16 *)v314 + 10);
                                uint64_t v330 = *(unsigned int *)((char *)v50 + v329);
                                uint64_t v331 = *(unsigned int *)((char *)v50 + v329 + v330);
                                if (!v331) {
                                  goto LABEL_547;
                                }
                                uint64_t v332 = 4 * v331;
                                uint64_t v333 = v329 + v330;
                                while (2)
                                {
                                  uint64_t v334 = *(unsigned int *)((char *)v50 + v333 + 4);
                                  uint64_t v335 = v334 - *(int *)((char *)v50 + v333 + v334 + 4);
                                  uint64_t v336 = (char *)v50 + v333 + v335;
                                  unsigned int v337 = *((unsigned __int16 *)v336 + 2);
                                  if (v337 < 7) {
                                    goto LABEL_540;
                                  }
                                  uint64_t v338 = *((unsigned __int16 *)v336 + 5);
                                  if (v338 && *(int *)((char *)v50 + v333 + v334 + v338 + 4) < 0) {
                                    goto LABEL_533;
                                  }
                                  if (v337 < 9 || (uint64_t v339 = *(unsigned __int16 *)((char *)v50 + v333 + v335 + 12)) == 0)
                                  {
LABEL_540:
                                    int v340 = 0;
                                    goto LABEL_541;
                                  }
                                  int v340 = *(int *)((char *)v50 + v333 + v334 + v339 + 4);
LABEL_541:
                                  int v341 = *(unsigned __int8 *)(v6 + 1144);
                                  if (*(unsigned char *)(v6 + 1144)) {
                                    int v342 = 3;
                                  }
                                  else {
                                    int v342 = 1;
                                  }
                                  unsigned int v343 = *(_DWORD *)(v508 + 124)
                                       + v342 * v340
                                       - (*(_DWORD *)(v508 + 120)
                                        + *(_DWORD *)(v508 + 128));
                                  uint64_t v344 = *(void *)(v6 + 48);
                                  *(_DWORD *)(v344 + 4 * v343) = -1;
                                  if (v341)
                                  {
                                    *(_DWORD *)(v344 + 4 * (v343 + 1)) = -1;
                                    *(_DWORD *)(v344 + 4 * (v343 + 2)) = 0;
                                  }
LABEL_533:
                                  v333 += 4;
                                  v332 -= 4;
                                  if (v332) {
                                    continue;
                                  }
                                  break;
                                }
                                uint64_t v313 = -(uint64_t)*v50;
LABEL_547:
                                unint64_t v345 = v6 + 464;
                                int v346 = (unsigned int *)((char *)v50 + *(unsigned __int16 *)((char *)v50 + v313 + 12));
                                uint64_t v347 = *v346;
                                unsigned int v349 = (unsigned int *)((char *)v346 + v347 + 4);
                                uint64_t v348 = *(unsigned int *)((char *)v346 + v347);
                                if (v348)
                                {
                                  uint64_t v350 = &v349[v348];
                                  while (1)
                                  {
                                    uint64_t v351 = (int *)((char *)v349 + *v349);
                                    uint64_t v352 = (unsigned __int16 *)((char *)v351 - *v351);
                                    unsigned int v353 = *v352;
                                    if (v353 < 7)
                                    {
                                      LODWORD(v354) = 0;
                                      goto LABEL_559;
                                    }
                                    if (!v352[3] || (*(int *)((char *)v351 + v352[3]) & 0x80000000) == 0) {
                                      break;
                                    }
LABEL_551:
                                    if (++v349 == v350) {
                                      goto LABEL_585;
                                    }
                                  }
                                  if (v353 < 9)
                                  {
                                    LODWORD(v354) = 0;
                                    goto LABEL_560;
                                  }
                                  uint64_t v354 = v352[4];
                                  if (v352[4])
                                  {
                                    LODWORD(v354) = *(int *)((char *)v351 + v354);
                                    goto LABEL_560;
                                  }
LABEL_559:
                                  if (v353 >= 7)
                                  {
LABEL_560:
                                    uint64_t v355 = v352[3];
                                    if (v355)
                                    {
                                      int v356 = *(int *)((char *)v351 + v355);
LABEL_564:
                                      unsigned int v357 = ((v354 >> 1) & 0x1FFFFFFF)
                                           + *(_DWORD *)(v269 + 124)
                                           + *(_DWORD *)(v269 + 132)
                                           - (*(_DWORD *)(v269 + 120)
                                            + *(_DWORD *)(v269 + 128)
                                            + *(_DWORD *)(v269 + 136));
                                      unsigned int v358 = v356 & 0xFFFFF;
                                      v507->__begin_[v357] = v356 & 0xFFFFF;
                                      int v359 = (unsigned __int16 *)((char *)v351 - *v351);
                                      if (*v359 >= 0xBu)
                                      {
                                        uint64_t v360 = v359[5];
                                        if (v360)
                                        {
                                          if (*((unsigned char *)v351 + v360)) {
                                            *(void *)(v345 + 8 * (v358 > 0x3F)) |= 1 << v356;
                                          }
                                        }
                                      }
                                      if (*(unsigned char *)(v6 + 1147))
                                      {
                                        unsigned int v361 = *v506;
                                        if (!*v506) {
LABEL_760:
                                        }
                                          abort();
                                        unsigned int v362 = (2 * v357) | 1;
                                        while (1)
                                        {
                                          while (1)
                                          {
                                            unsigned int v363 = *((_DWORD *)v361 + 7);
                                            if (v358 >= v363) {
                                              break;
                                            }
                                            unsigned int v361 = (uint64_t *)*v361;
                                            if (!v361) {
                                              goto LABEL_760;
                                            }
                                          }
                                          if (v363 >= v358) {
                                            break;
                                          }
                                          unsigned int v361 = (uint64_t *)v361[1];
                                          if (!v361) {
                                            goto LABEL_760;
                                          }
                                        }
                                        int v364 = *((_DWORD *)v361 + 8);
                                        int v365 = (uint64_t **)(v6 + 272);
LABEL_577:
                                        unsigned int v366 = *v365;
                                        unsigned int v367 = v365;
                                        if (*v365)
                                        {
                                          while (1)
                                          {
                                            int v365 = (uint64_t **)v366;
                                            unsigned int v368 = *((_DWORD *)v366 + 7);
                                            if (v362 < v368) {
                                              goto LABEL_577;
                                            }
                                            if (v368 >= v362) {
                                              break;
                                            }
                                            unsigned int v366 = v365[1];
                                            if (!v366)
                                            {
                                              unsigned int v367 = v365 + 1;
                                              goto LABEL_582;
                                            }
                                          }
                                          int v369 = v365;
                                        }
                                        else
                                        {
LABEL_582:
                                          int v369 = operator new(0x28uLL);
                                          v369[7] = v362;
                                          v369[8] = 0;
                                          *(void *)int v369 = 0;
                                          *((void *)v369 + 1) = 0;
                                          *((void *)v369 + 2) = v365;
                                          *unsigned int v367 = (uint64_t *)v369;
                                          uint64_t v370 = **(void **)(v6 + 264);
                                          long long v371 = (uint64_t *)v369;
                                          if (v370)
                                          {
                                            *(void *)(v6 + 264) = v370;
                                            long long v371 = *v367;
                                          }
                                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 272), v371);
                                          ++*(void *)(v6 + 280);
                                        }
                                        uint64_t v269 = v508;
                                        v369[8] = v364;
                                      }
                                      goto LABEL_551;
                                    }
                                  }
                                  int v356 = 0;
                                  goto LABEL_564;
                                }
LABEL_585:
                                unint64_t v372 = *(void *)(v269 + 160);
                                unint64_t v373 = *(void *)(v269 + 168);
                                if (*(_OWORD *)(v269 + 160) != 0)
                                {
                                  int v374 = *(unsigned __int8 *)(v269 + 208);
                                  int v375 = *(_DWORD *)(v269 + 144);
                                  if (!*(unsigned char *)(v269 + 208)) {
                                    goto LABEL_597;
                                  }
                                  if (v375)
                                  {
                                    unsigned int v376 = (*(_DWORD *)(v269 + 124)
                                          + *(_DWORD *)(v269 + 132)
                                          + *(_DWORD *)(v269 + 140)
                                          - (*(_DWORD *)(v269 + 120)
                                           + *(_DWORD *)(v269 + 128)
                                           + *(_DWORD *)(v269 + 136))
                                          + 3) & 0xFFFFFFFC;
                                    *(void *)std::string __dst = *(void *)(v269 + 160);
                                    v510.n128_u64[0] = v373;
                                    for (unint64_t i = v372; ; unint64_t i = *(void *)__dst)
                                    {
                                      if (i)
                                      {
                                        unsigned int v378 = (__n128 *)__dst;
                                      }
                                      else
                                      {
                                        unint64_t i = v510.n128_u64[0];
                                        if (!v510.n128_u64[0])
                                        {
                                          int v375 = *(_DWORD *)(v269 + 144);
                                          int v374 = v375;
                                          goto LABEL_597;
                                        }
                                        unsigned int v378 = &v510;
                                      }
                                      v378->n128_u64[0] = i & (i - 1);
                                      std::vector<unsigned int>::pointer v379 = v507->__begin_;
                                      v507->__begin_[v376] = -1;
                                      v379[v376 + 1] = 0;
                                      v379[v376 + 2] = 1;
                                      v379[v376 + 3] = 2;
                                      v376 += 4;
                                    }
                                  }
                                  int v374 = 0;
LABEL_597:
                                  int8x16_t v380 = *(int8x16_t *)(v269 + 176);
                                  if (*(_OWORD *)&v380 != 0 && v375 != 0)
                                  {
                                    int v446 = ((*(_DWORD *)(v269 + 140)
                                           + *(_DWORD *)(v269 + 132)
                                           - (*(_DWORD *)(v269 + 136)
                                            + *(_DWORD *)(v269 + 128)
                                            + *(_DWORD *)(v269 + 120))
                                           + *(_DWORD *)(v269 + 124)
                                           + 3) & 0xFFFFFFFC)
                                         + v374;
                                    *(void *)std::string __dst = v372;
                                    v510.n128_u64[0] = v373;
                                    while (1)
                                    {
                                      if (v372)
                                      {
                                        uint64_t v447 = (__n128 *)__dst;
                                      }
                                      else
                                      {
                                        unint64_t v372 = v510.n128_u64[0];
                                        if (!v510.n128_u64[0]) {
                                          break;
                                        }
                                        uint64_t v447 = &v510;
                                      }
                                      v447->n128_u64[0] = v372 & (v372 - 1);
                                      std::vector<unsigned int>::pointer v448 = v507->__begin_;
                                      v507->__begin_[v446] = -1;
                                      v448[v446 + 1] = 0;
                                      v448[v446 + 2] = 1;
                                      v448[v446 + 3] = 2;
                                      v446 += 4;
                                      unint64_t v372 = *(void *)__dst;
                                    }
                                  }
                                  *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), v380);
                                }
                                if (*(_DWORD *)(v269 + 148))
                                {
                                  int v382 = *(_DWORD *)(v269 + 144);
                                  if (*(unsigned char *)(v269 + 208)) {
                                    int v383 = *(_DWORD *)(v269 + 144);
                                  }
                                  else {
                                    int v383 = 0;
                                  }
                                  if (*(_OWORD *)(v269 + 176) == 0) {
                                    int v382 = 0;
                                  }
                                  unsigned int v384 = v383
                                       + v382
                                       + ((*(_DWORD *)(v269 + 124)
                                         + *(_DWORD *)(v269 + 132)
                                         + *(_DWORD *)(v269 + 140)
                                         - (*(_DWORD *)(v269 + 120)
                                          + *(_DWORD *)(v269 + 128)
                                          + *(_DWORD *)(v269 + 136))
                                         + 3) & 0xFFFFFFFC);
                                  unint64_t v386 = *(void *)(v269 + 192);
                                  unint64_t v385 = *(void *)(v269 + 200);
                                  *(void *)std::string __dst = v386;
                                  v510.n128_u64[0] = v385;
                                  while (1)
                                  {
                                    if (v386)
                                    {
                                      int v387 = (__n128 *)__dst;
                                    }
                                    else
                                    {
                                      unint64_t v386 = v510.n128_u64[0];
                                      if (!v510.n128_u64[0]) {
                                        break;
                                      }
                                      int v387 = &v510;
                                    }
                                    v387->n128_u64[0] = v386 & (v386 - 1);
                                    uint64_t v388 = *(void *)(v6 + 48);
                                    *(_DWORD *)(v388 + 4 * v384) = -1;
                                    if (*(unsigned char *)(v6 + 1144))
                                    {
                                      *(_DWORD *)(v388 + 4 * (v384 + 1)) = -1;
                                      *(_DWORD *)(v388 + 4 * (v384 + 2)) = 0;
                                    }
                                    v384 += 4;
                                    unint64_t v386 = *(void *)__dst;
                                  }
                                }
                                int v389 = *v501;
                                if (*(unsigned char *)(v269 + 467))
                                {
                                  unint64_t v390 = (unsigned __int16 *)((char *)v501 - v389);
                                  if (*v390 < 0x67u)
                                  {
                                    unint64_t v391 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v391 = v390[51];
                                    if (v391) {
                                      unint64_t v391 = *(void *)((char *)v501 + v391);
                                    }
                                  }
                                  int v392 = 128 - 2 * __clz(v391);
                                  if (*(_DWORD *)(v6 + 208) > v392) {
                                    int v392 = *(_DWORD *)(v6 + 208);
                                  }
                                  *(_DWORD *)(v6 + 208) = v392;
                                  uint64_t v393 = (unsigned __int16 *)((char *)v501 - *v501);
                                  if (*v393 < 0x17u)
                                  {
                                    LODWORD(v394) = 0;
                                  }
                                  else
                                  {
                                    unint64_t v394 = v393[11];
                                    if (v394) {
                                      unint64_t v394 = ((unint64_t)*(unsigned int *)((char *)v501 + v394) + 3) >> 2;
                                    }
                                  }
                                  *(_DWORD *)(v6 + 200) = v394;
                                  *(_DWORD *)(v6 + 204) = 0;
                                  int v389 = *v501;
                                }
                                uint64_t v395 = (unsigned __int16 *)((char *)v501 - v389);
                                if (*v395 >= 0x17u && (uint64_t v396 = v395[11]) != 0)
                                {
                                  unint64_t v397 = ((unint64_t)*(unsigned int *)((char *)v501 + v396) + 3) >> 2;
                                  unint64_t v398 = (void *)(v6 + 80);
                                  uint64_t v399 = *(void *)(v6 + 72);
                                  unint64_t v400 = (*(void *)(v6 + 80) - v399) >> 2;
                                  if (v397 > v400)
                                  {
                                    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v6 + 72), v397 - v400);
                                    goto LABEL_636;
                                  }
                                }
                                else
                                {
                                  unint64_t v397 = 0;
                                  unint64_t v398 = (void *)(v6 + 80);
                                  uint64_t v399 = *(void *)(v6 + 72);
                                  unint64_t v400 = (*(void *)(v6 + 80) - v399) >> 2;
                                }
                                if (v400 > v397) {
                                  *unint64_t v398 = v399 + 4 * v397;
                                }
LABEL_636:
                                if (v493 != (void *)(v269 + 216)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v493, *(char **)(v269 + 216), *(char **)(v269 + 224), (uint64_t)(*(void *)(v269 + 224) - *(void *)(v269 + 216)) >> 2);
                                }
                                if (v492 != (void *)(v269 + 240)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v492, *(char **)(v269 + 240), *(char **)(v269 + 248), (uint64_t)(*(void *)(v269 + 248) - *(void *)(v269 + 240)) >> 2);
                                }
                                if (v491 != (void *)(v269 + 320)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v491, *(char **)(v269 + 320), *(char **)(v269 + 328), (uint64_t)(*(void *)(v269 + 328) - *(void *)(v269 + 320)) >> 1);
                                }
                                if (v490 != (void *)(v269 + 368)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v490, *(char **)(v269 + 368), *(char **)(v269 + 376), (uint64_t)(*(void *)(v269 + 376) - *(void *)(v269 + 368)) >> 1);
                                }
                                *(unsigned char *)(v6 + 192) = *(unsigned char *)(v269 + 416);
                                *(unsigned char *)(v6 + 456) = *(_OWORD *)(v269 + 160) != 0;
                                *(unsigned char *)(v6 + 457) = *(void *)(v269 + 148) != 0;
                                uint64_t v401 = *(unsigned __int16 *)((char *)v501 - *v501 + 24);
                                uint64_t v402 = *(unsigned int *)((char *)v501 + v401);
                                uint64_t v403 = (unsigned int *)((char *)v501 + v401 + v402);
                                uint64_t v404 = *v403;
                                if (v404)
                                {
                                  unint64_t v405 = 0;
                                  uint64_t v406 = 4 * v404;
                                  uint64_t v407 = (char *)v501 + v401 + v402;
                                  do
                                  {
                                    uint64_t v408 = v403[v405 / 4 + 1];
                                    uint64_t v409 = v408 - *(int *)((char *)&v403[v405 / 4 + 1] + v408);
                                    unint64_t v410 = &v407[v405 + v409];
                                    unsigned int v411 = *((unsigned __int16 *)v410 + 2);
                                    if (v411 >= 5)
                                    {
                                      uint64_t v412 = *((unsigned __int16 *)v410 + 4);
                                      if (v412)
                                      {
                                        if (v411 >= 7 && v407[v405 + 4 + v408 + v412] == 139)
                                        {
                                          if (*(_WORD *)&v407[v405 + 10 + v409])
                                          {
                                            int v413 = *(_DWORD *)&v407[v405
                                                                  + 4
                                                                  + v408
                                                                  + *(unsigned __int16 *)&v407[v405 + 10 + v409]];
                                            if (v411 >= 0xB) {
                                              goto LABEL_655;
                                            }
                                          }
                                          else
                                          {
                                            int v413 = 0;
                                            if (v411 >= 0xB)
                                            {
LABEL_655:
                                              uint64_t v414 = *(unsigned __int16 *)&v407[v405 + 14 + v409];
                                              if (v414 && v407[v405 + 4 + v408 + v414]) {
                                                *(void *)(v345 + 8 * ((v413 & 0xFFFC0) != 0)) |= 1 << v413;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    v405 += 4;
                                  }
                                  while (v406 != v405);
                                }
                                uint64_t v415 = *v500;
                                uint64_t v416 = -v415;
                                uint64_t v417 = (char *)v500 - v415;
                                unsigned int v418 = *(unsigned __int16 *)((char *)v500 - v415);
                                if (v418 >= 0xD)
                                {
                                  if (!*((_WORD *)v417 + 6)) {
                                    goto LABEL_701;
                                  }
                                  uint64_t v419 = (int *)((char *)v500
                                               + *((unsigned __int16 *)v417 + 6)
                                               + *(unsigned int *)((char *)v500 + *((unsigned __int16 *)v417 + 6)));
                                  unint64_t v420 = *v419;
                                  uint64_t v421 = *(unsigned char **)(v6 + 1072);
                                  if (v420 > (uint64_t)(*(void *)(v6 + 1088) - (void)v421) >> 4)
                                  {
                                    uint64_t v422 = *(unsigned char **)(v6 + 1080);
                                    unsigned int v423 = (char *)operator new(16 * v420);
                                    uint64_t v424 = &v423[(v422 - v421) & 0xFFFFFFFFFFFFFFF0];
                                    unsigned int v425 = v424;
                                    if (v422 != v421)
                                    {
                                      unint64_t v426 = &v423[(v422 - v421) & 0xFFFFFFFFFFFFFFF0];
                                      do
                                      {
                                        unsigned int v425 = v426 - 16;
                                        *((_OWORD *)v426 - 1) = *((_OWORD *)v422 - 1);
                                        v422 -= 16;
                                        v426 -= 16;
                                      }
                                      while (v422 != v421);
                                    }
                                    *(void *)(v6 + 1072) = v425;
                                    *(void *)(v6 + 1080) = v424;
                                    *(void *)(v6 + 1088) = &v423[16 * v420];
                                    if (v421) {
                                      operator delete(v421);
                                    }
                                  }
                                  unint64_t v427 = 0;
                                  uint64_t v428 = *v500;
                                  unsigned int v429 = *(unsigned __int16 *)((char *)v500 - v428);
                                  if (v429 < 0x41)
                                  {
LABEL_669:
                                    if (!*v419) {
                                      goto LABEL_712;
                                    }
                                  }
                                  else
                                  {
                                    if (*(_WORD *)((char *)v500 - v428 + 64))
                                    {
                                      unint64_t v430 = (unsigned int *)((char *)v500
                                                            + *(unsigned __int16 *)((char *)v500 - v428 + 64));
                                      unint64_t v427 = (unsigned int *)((char *)v430 + *v430);
                                      goto LABEL_669;
                                    }
                                    unint64_t v427 = 0;
                                    if (!*v419)
                                    {
LABEL_712:
                                      uint64_t v416 = -v428;
                                      if (v429 < 0xB)
                                      {
LABEL_757:
                                        *(unsigned char *)(v6 + 964) = 0;
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        }
                                        *(void *)unint64_t v6 = &unk_26F852998;
                                        std::string __str = *(std::string *)(v6 + 616);
                                        __dst[23] = 0;
                                        __dst[0] = 0;
                                        AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::ProgramVariantESLState(v6 + 1344, a2, v505, (const std::string *)__dst, v269, (long long *)&__str);
                                      }
LABEL_701:
                                      if (!*(_WORD *)((char *)v500 + v416 + 10)) {
                                        goto LABEL_757;
                                      }
                                      unint64_t v450 = (unsigned int *)((char *)v500
                                                            + *(unsigned __int16 *)((char *)v500 + v416 + 10));
                                      uint64_t v451 = (unsigned int *)((char *)v450 + *v450);
                                      std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v498, *v451);
                                      unint64_t v452 = *v451;
                                      unint64_t v453 = *(unsigned char **)(v6 + 1096);
                                      if (v452 > (uint64_t)(*(void *)(v6 + 1112) - (void)v453) >> 3)
                                      {
                                        int v454 = *(unsigned char **)(v6 + 1104);
                                        uint64_t v455 = (char *)operator new(8 * v452);
                                        uint64_t v456 = v454 - v453;
                                        uint64_t v457 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                        unint64_t v458 = v457;
                                        if (v454 != v453)
                                        {
                                          if ((unint64_t)(v456 - 8) < 0x58)
                                          {
                                            unint64_t v458 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                            goto LABEL_718;
                                          }
                                          unint64_t v458 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                          if ((unint64_t)(&v454[-(v456 & 0xFFFFFFFFFFFFFFF8)] - v455) < 0x20) {
                                            goto LABEL_777;
                                          }
                                          uint64_t v459 = v456 >> 3;
                                          unint64_t v460 = ((unint64_t)(v456 - 8) >> 3) + 1;
                                          uint64_t v461 = &v455[8 * v459 - 16];
                                          int v462 = (long long *)(v454 - 16);
                                          uint64_t v463 = v460 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v464 = *v462;
                                            *((_OWORD *)v461 - 1) = *(v462 - 1);
                                            *(_OWORD *)uint64_t v461 = v464;
                                            v461 -= 32;
                                            v462 -= 2;
                                            v463 -= 4;
                                          }
                                          while (v463);
                                          unint64_t v458 = &v457[-8 * (v460 & 0x3FFFFFFFFFFFFFFCLL)];
                                          v454 -= 8 * (v460 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v460 != (v460 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_777:
                                            do
                                            {
LABEL_718:
                                              uint64_t v465 = *((void *)v454 - 1);
                                              v454 -= 8;
                                              *((void *)v458 - 1) = v465;
                                              v458 -= 8;
                                            }
                                            while (v454 != v453);
                                          }
                                        }
                                        *(void *)(v6 + 1096) = v458;
                                        *(void *)(v6 + 1104) = v457;
                                        *(void *)(v6 + 1112) = &v455[8 * v452];
                                        if (v453) {
                                          operator delete(v453);
                                        }
                                      }
                                      if (!*v451) {
                                        goto LABEL_757;
                                      }
                                      uint64_t v466 = 0;
                                      unint64_t v497 = v6;
                                      while (2)
                                      {
                                        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v451[v466 + 1] + v451[v466 + 1]));
                                        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v510, a2, (uint64_t)__dst);
                                        uint64_t v467 = *(__n128 **)(v6 + 1128);
                                        if ((unint64_t)v467 >= *(void *)(v6 + 1136))
                                        {
                                          uint64_t v469 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v498, v510);
                                        }
                                        else
                                        {
                                          v467->n128_u64[0] = v510.n128_u64[0];
                                          unint64_t v468 = v510.n128_u64[1];
                                          v467->n128_u64[1] = v510.n128_u64[1];
                                          if (v468) {
                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v468 + 8), 1uLL, memory_order_relaxed);
                                          }
                                          uint64_t v469 = v467 + 1;
                                        }
                                        *(void *)(v6 + 1128) = v469;
                                        uint64_t v470 = *(unsigned int *)(v510.n128_u64[0] + 96);
                                        uint64_t v471 = *(char **)(v6 + 1104);
                                        unint64_t v472 = *(void *)(v6 + 1112);
                                        if ((unint64_t)v471 < v472)
                                        {
                                          *(void *)uint64_t v471 = v470;
                                          uint64_t v473 = v471 + 8;
                                          goto LABEL_754;
                                        }
                                        uint64_t v474 = *(char **)(v6 + 1096);
                                        uint64_t v475 = (v471 - v474) >> 3;
                                        unint64_t v476 = v475 + 1;
                                        if ((unint64_t)(v475 + 1) >> 61) {
                                          abort();
                                        }
                                        uint64_t v477 = v472 - (void)v474;
                                        if (v477 >> 2 > v476) {
                                          unint64_t v476 = v477 >> 2;
                                        }
                                        if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v478 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v478 = v476;
                                        }
                                        if (v478)
                                        {
                                          if (v478 >> 61) {
                                            std::__throw_bad_array_new_length[abi:nn180100]();
                                          }
                                          uint64_t v479 = operator new(8 * v478);
                                        }
                                        else
                                        {
                                          uint64_t v479 = 0;
                                        }
                                        unint64_t v480 = &v479[8 * v475];
                                        *unint64_t v480 = v470;
                                        uint64_t v473 = v480 + 1;
                                        if (v471 == v474)
                                        {
                                          unint64_t v6 = v497;
                                        }
                                        else
                                        {
                                          unint64_t v481 = v471 - 8 - v474;
                                          if (v481 < 0x58)
                                          {
                                            unint64_t v6 = v497;
                                            goto LABEL_751;
                                          }
                                          unint64_t v6 = v497;
                                          if ((unint64_t)(v474 - v479) < 0x20) {
                                            goto LABEL_778;
                                          }
                                          uint64_t v482 = (v481 >> 3) + 1;
                                          uint64_t v483 = &v479[8 * v475 - 16];
                                          uint64_t v484 = v471 - 16;
                                          uint64_t v485 = v482 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v486 = *(_OWORD *)v484;
                                            *(v483 - 1) = *((_OWORD *)v484 - 1);
                                            *uint64_t v483 = v486;
                                            v483 -= 2;
                                            v484 -= 32;
                                            v485 -= 4;
                                          }
                                          while (v485);
                                          v480 -= v482 & 0x3FFFFFFFFFFFFFFCLL;
                                          v471 -= 8 * (v482 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_778:
                                            do
                                            {
LABEL_751:
                                              uint64_t v487 = *((void *)v471 - 1);
                                              v471 -= 8;
                                              *--unint64_t v480 = v487;
                                            }
                                            while (v471 != v474);
                                          }
                                        }
                                        *(void *)(v6 + 1096) = v480;
                                        *(void *)(v6 + 1104) = v473;
                                        *(void *)(v6 + 1112) = &v479[8 * v478];
                                        if (v474) {
                                          operator delete(v474);
                                        }
LABEL_754:
                                        uint64_t v269 = v508;
                                        *(void *)(v6 + 1104) = v473;
                                        unint64_t v488 = (std::__shared_weak_count *)v510.n128_u64[1];
                                        if (v510.n128_u64[1]
                                          && !atomic_fetch_add((atomic_ullong *volatile)(v510.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                        {
                                          ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
                                          std::__shared_weak_count::__release_weak(v488);
                                        }
                                        if (v513 < 0) {
                                          operator delete(v512[0]);
                                        }
                                        if (++v466 >= (unint64_t)*v451) {
                                          goto LABEL_757;
                                        }
                                        continue;
                                      }
                                    }
                                  }
                                  unint64_t v431 = 0;
                                  uint64_t v432 = v419 + 1;
                                  do
                                  {
                                    if (v427 && *v427) {
                                      uint64_t v434 = *(void *)&v427[2 * v431 + 1];
                                    }
                                    else {
                                      uint64_t v434 = 0;
                                    }
                                    uint64_t v435 = *(void *)&v432[2 * v431];
                                    unsigned int v436 = *(void **)(v6 + 1080);
                                    unint64_t v437 = *(void *)(v6 + 1088);
                                    if ((unint64_t)v436 < v437)
                                    {
                                      void *v436 = v435;
                                      v436[1] = v434;
                                      unint64_t v433 = v436 + 2;
                                    }
                                    else
                                    {
                                      unint64_t v438 = (void *)*v499;
                                      uint64_t v439 = ((uint64_t)v436 - *v499) >> 4;
                                      unint64_t v440 = v439 + 1;
                                      if ((unint64_t)(v439 + 1) >> 60) {
                                        abort();
                                      }
                                      uint64_t v441 = v437 - (void)v438;
                                      if (v441 >> 3 > v440) {
                                        unint64_t v440 = v441 >> 3;
                                      }
                                      if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v442 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v442 = v440;
                                      }
                                      if (v442)
                                      {
                                        if (v442 >> 60) {
                                          std::__throw_bad_array_new_length[abi:nn180100]();
                                        }
                                        unint64_t v443 = (char *)operator new(16 * v442);
                                      }
                                      else
                                      {
                                        unint64_t v443 = 0;
                                      }
                                      unint64_t v444 = &v443[16 * v439];
                                      *(void *)unint64_t v444 = v435;
                                      *((void *)v444 + 1) = v434;
                                      uint64_t v445 = v444;
                                      if (v436 != v438)
                                      {
                                        do
                                        {
                                          *((_OWORD *)v445 - 1) = *((_OWORD *)v436 - 1);
                                          v445 -= 16;
                                          v436 -= 2;
                                        }
                                        while (v436 != v438);
                                        unsigned int v436 = (void *)*v499;
                                      }
                                      *(void *)(v6 + 1072) = v445;
                                      unint64_t v433 = v444 + 16;
                                      *(void *)(v6 + 1080) = v444 + 16;
                                      *(void *)(v6 + 1088) = &v443[16 * v442];
                                      if (v436) {
                                        operator delete(v436);
                                      }
                                      uint64_t v269 = v508;
                                      uint64_t v432 = v419 + 1;
                                    }
                                    *(void *)(v6 + 1080) = v433;
                                    ++v431;
                                  }
                                  while (v431 < *v419);
                                  uint64_t v449 = *v500;
                                  uint64_t v416 = -v449;
                                  unsigned int v418 = *(unsigned __int16 *)((char *)v500 - v449);
                                }
                                if (v418 < 0xB) {
                                  goto LABEL_757;
                                }
                                goto LABEL_701;
                              }
                            }
                          }
LABEL_384:
                          if (v188 < 0x21) {
                            goto LABEL_388;
                          }
                          goto LABEL_385;
                        }
LABEL_383:
                        *(unsigned char *)(v6 + 1147) = 0;
                        goto LABEL_384;
                      }
                    }
                  }
                  uint64_t v185 = 0;
                  goto LABEL_333;
                }
                goto LABEL_319;
              }
              if (v176 >= 0x27)
              {
                uint64_t v177 = v175[19];
                if (v175[19])
                {
                  int v179 = *((unsigned __int8 *)v50 + v177);
                  if (*((unsigned char *)v50 + v177))
                  {
                    BOOL v178 = 1;
LABEL_320:
                    LOBYTE(v177) = v179 != 0;
                    goto LABEL_321;
                  }
                }
                if (v176 >= 0x29 && (uint64_t v180 = v175[20]) != 0)
                {
                  BOOL v178 = *((unsigned char *)v50 + v180) != 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
                else
                {
                  BOOL v178 = 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
LABEL_319:
                int v179 = *((unsigned __int8 *)v50 + v177);
                goto LABEL_320;
              }
            }
            BOOL v178 = 0;
            LOBYTE(v177) = 0;
            goto LABEL_321;
          }
        }
        else
        {
          int v103 = (unsigned int **)(v505 + 108);
          int v104 = (unsigned int *)v505[108];
          if (!v104) {
            goto LABEL_258;
          }
        }
        if (v103[1])
        {
          uint64_t v105 = (int *)((char *)v104 + *v104);
          uint64_t v106 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v106 < 0xDu)
          {
            LODWORD(v107) = 0;
          }
          else
          {
            uint64_t v107 = v106[6];
            if (v107) {
              LODWORD(v107) = *(int *)((char *)v105 + v107);
            }
          }
          *(_DWORD *)(v6 + 1180) = v107;
          uint64_t v108 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v108 < 0xBu)
          {
            LODWORD(v109) = 0;
          }
          else
          {
            uint64_t v109 = v108[5];
            if (v109) {
              LODWORD(v109) = *(int *)((char *)v105 + v109);
            }
          }
          *(_DWORD *)(v6 + 1188) = v109;
          uint64_t v110 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v110 < 0x11u)
          {
            LODWORD(v111) = 0;
          }
          else
          {
            uint64_t v111 = v110[8];
            if (v111) {
              LODWORD(v111) = *(int *)((char *)v105 + v111);
            }
          }
          *(_DWORD *)(v6 + 1192) = v111;
          uint64_t v112 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v112 < 0x13u)
          {
            LODWORD(v113) = 0;
          }
          else
          {
            uint64_t v113 = v112[9];
            if (v113) {
              LODWORD(v113) = *(int *)((char *)v105 + v113);
            }
          }
          *(_DWORD *)(v6 + 1196) = v113;
          uint64_t v114 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v114 < 0x17u)
          {
            LODWORD(v115) = 0;
          }
          else
          {
            uint64_t v115 = v114[11];
            if (v115) {
              LODWORD(v115) = *(int *)((char *)v105 + v115);
            }
          }
          *(_DWORD *)(v6 + 1200) = v115;
          uint64_t v116 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v116 < 0x1Bu)
          {
            LODWORD(v117) = 0;
          }
          else
          {
            uint64_t v117 = v116[13];
            if (v117) {
              LODWORD(v117) = *(int *)((char *)v105 + v117);
            }
          }
          *(_DWORD *)(v6 + 1204) = v117;
          uint64_t v118 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v118 < 0x15u)
          {
            LODWORD(v119) = 0;
          }
          else
          {
            uint64_t v119 = v118[10];
            if (v119) {
              LODWORD(v119) = *(int *)((char *)v105 + v119);
            }
          }
          *(_DWORD *)(v6 + 1208) = v119;
          uint64_t v120 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v120 < 0x19u)
          {
            LODWORD(v121) = 0;
          }
          else
          {
            uint64_t v121 = v120[12];
            if (v121) {
              LODWORD(v121) = *(int *)((char *)v105 + v121);
            }
          }
          *(_DWORD *)(v6 + 1212) = v121;
          uint64_t v122 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v122 < 0x1Du)
          {
            LODWORD(v123) = 0;
          }
          else
          {
            uint64_t v123 = v122[14];
            if (v123) {
              LODWORD(v123) = *(int *)((char *)v105 + v123);
            }
          }
          *(_DWORD *)(v6 + 1216) = v123;
          uint64_t v124 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v124 < 0xFu)
          {
            LODWORD(v125) = 0;
          }
          else
          {
            uint64_t v125 = v124[7];
            if (v125) {
              LODWORD(v125) = *(int *)((char *)v105 + v125);
            }
          }
          *(_DWORD *)(v6 + 1220) = v125;
          uint64_t v126 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v126 < 0x1Fu)
          {
            LODWORD(v127) = 0;
          }
          else
          {
            uint64_t v127 = v126[15];
            if (v127) {
              LODWORD(v127) = *(int *)((char *)v105 + v127);
            }
          }
          *(_DWORD *)(v6 + 1224) = v127;
          uint64_t v128 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v128 < 0x21u)
          {
            LODWORD(v129) = 0;
          }
          else
          {
            uint64_t v129 = v128[16];
            if (v129) {
              LODWORD(v129) = *(int *)((char *)v105 + v129);
            }
          }
          *(_DWORD *)(v6 + 1228) = v129;
          uint64_t v130 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v130 < 0x23u)
          {
            LODWORD(v131) = 0;
          }
          else
          {
            uint64_t v131 = v130[17];
            if (v131) {
              LODWORD(v131) = *(int *)((char *)v105 + v131);
            }
          }
          *(_DWORD *)(v6 + 1232) = v131;
          uint64_t v132 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v132 < 0x25u)
          {
            LODWORD(v133) = 0;
          }
          else
          {
            uint64_t v133 = v132[18];
            if (v133) {
              LODWORD(v133) = *(int *)((char *)v105 + v133);
            }
          }
          *(_DWORD *)(v6 + 1236) = v133;
          uint64_t v134 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v134 < 0x27u)
          {
            LODWORD(v135) = 0;
          }
          else
          {
            uint64_t v135 = v134[19];
            if (v135) {
              LODWORD(v135) = *(int *)((char *)v105 + v135);
            }
          }
          *(_DWORD *)(v6 + 1240) = v135;
          uint64_t v136 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v136 < 0x29u)
          {
            LODWORD(v137) = 0;
          }
          else
          {
            uint64_t v137 = v136[20];
            if (v137) {
              LODWORD(v137) = *(int *)((char *)v105 + v137);
            }
          }
          *(_DWORD *)(v6 + 1244) = v137;
          uint64_t v138 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v138 < 0x2Bu)
          {
            LODWORD(v139) = 0;
          }
          else
          {
            uint64_t v139 = v138[21];
            if (v139) {
              LODWORD(v139) = *(int *)((char *)v105 + v139);
            }
          }
          *(_DWORD *)(v6 + 1248) = v139;
          uint64_t v140 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v140 < 7u)
          {
            LODWORD(v141) = 0;
          }
          else
          {
            uint64_t v141 = v140[3];
            if (v141) {
              LODWORD(v141) = *(int *)((char *)v105 + v141);
            }
          }
          *(_DWORD *)(v6 + 1252) = v141;
          uint64_t v142 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v142 >= 5u && (uint64_t v143 = v142[2]) != 0) {
            int v144 = *(int *)((char *)v105 + v143);
          }
          else {
            int v144 = 0;
          }
          *(_DWORD *)(v6 + 1260) = v144;
        }
        goto LABEL_258;
      }
      unint64_t v51 = (int *)((char *)*v49 + **v49);
      unint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
      unsigned int v53 = *v52;
      if (v52[2])
      {
        uint64_t v54 = (int *)((char *)v51 + v52[2] + *(unsigned int *)((char *)v51 + v52[2]));
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v54 = 0;
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      uint64_t v55 = v52[3];
      if (v55)
      {
        unsigned int v56 = (char *)v51 + v55 + *(unsigned int *)((char *)v51 + v55);
        if (!*v54) {
          goto LABEL_143;
        }
        goto LABEL_105;
      }
LABEL_104:
      unsigned int v56 = 0;
      if (!*v54) {
        goto LABEL_143;
      }
LABEL_105:
      uint64_t v57 = 0;
      uint64_t v502 = v56 + 4;
      while (1)
      {
        unint64_t v59 = (char *)&v54[v57 + 2] + v54[v57 + 1];
        size_t v60 = strlen(v59);
        if (v60 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v61 = v60;
        if (v60 >= 0x17)
        {
          uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17) {
            uint64_t v63 = v60 | 7;
          }
          uint64_t v64 = v63 + 1;
          size_t v62 = operator new(v63 + 1);
          *(void *)&__dst[8] = v61;
          *(void *)&__dst[16] = v64 | 0x8000000000000000;
          *(void *)std::string __dst = v62;
        }
        else
        {
          __dst[23] = v60;
          size_t v62 = __dst;
          if (!v60) {
            goto LABEL_116;
          }
        }
        memmove(v62, v59, v61);
LABEL_116:
        v62[v61] = 0;
        unint64_t v65 = *(void *)(v6 + 1280);
        if (v65 >= *(void *)(v6 + 1288))
        {
          uint64_t v66 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(v6 + 1272), (uint64_t)__dst);
          int v67 = __dst[23];
          *(void *)(v6 + 1280) = v66;
          if (v67 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v65 = *(_OWORD *)__dst;
          *(void *)(v65 + 16) = *(void *)&__dst[16];
          *(void *)(v6 + 1280) = v65 + 24;
        }
        int v68 = *(_DWORD *)&v502[4 * v57];
        int v69 = *(char **)(v6 + 1304);
        unint64_t v70 = *(void *)(v6 + 1312);
        if ((unint64_t)v69 < v70)
        {
          *(_DWORD *)int v69 = v68;
          uint64_t v58 = v69 + 4;
        }
        else
        {
          uint64_t v71 = *(char **)(v6 + 1296);
          uint64_t v72 = (v69 - v71) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            abort();
          }
          uint64_t v74 = v70 - (void)v71;
          if (v74 >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            if (v75 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v76 = operator new(4 * v75);
          }
          else
          {
            uint64_t v76 = 0;
          }
          unint64_t v77 = &v76[4 * v72];
          *unint64_t v77 = v68;
          uint64_t v58 = v77 + 1;
          if (v69 != v71)
          {
            unint64_t v78 = v69 - 4 - v71;
            if (v78 < 0x2C) {
              goto LABEL_779;
            }
            if ((unint64_t)(v71 - v76) < 0x20) {
              goto LABEL_779;
            }
            uint64_t v79 = (v78 >> 2) + 1;
            unint64_t v80 = &v76[4 * v72 - 16];
            uint64_t v81 = v69 - 16;
            uint64_t v82 = v79 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v83 = *(_OWORD *)v81;
              *(v80 - 1) = *((_OWORD *)v81 - 1);
              _OWORD *v80 = v83;
              v80 -= 2;
              v81 -= 32;
              v82 -= 8;
            }
            while (v82);
            v77 -= v79 & 0x7FFFFFFFFFFFFFF8;
            v69 -= 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
            if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_779:
              do
              {
                int v84 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *--unint64_t v77 = v84;
              }
              while (v69 != v71);
            }
          }
          *(void *)(v6 + 1296) = v77;
          *(void *)(v6 + 1304) = v58;
          *(void *)(v6 + 1312) = &v76[4 * v75];
          if (v71) {
            operator delete(v71);
          }
          uint64_t v50 = v501;
        }
        *(void *)(v6 + 1304) = v58;
        if (++v57 >= (unint64_t)*v54) {
          goto LABEL_143;
        }
      }
    }
    size_t v43 = *(void *)(a3 + 8);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    size_t v44 = *(const void **)a3;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      size_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v43;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)std::string __dst = v45;
    }
    else
    {
      __dst[23] = *(void *)(a3 + 8);
      size_t v45 = __dst;
      if (!v43) {
        goto LABEL_82;
      }
    }
    memmove(v45, v44, v43);
LABEL_82:
    v45[v43] = 0;
    if (*(char *)(v6 + 991) < 0) {
      operator delete(*v489);
    }
    *(_OWORD *)unint64_t v489 = *(_OWORD *)__dst;
    *(void *)(v6 + 984) = *(void *)&__dst[16];
    uint64_t v48 = (void *)(a3 + 24);
    if (*(void *)(a3 + 24))
    {
      if (!*(void *)(a3 + 32)) {
        uint64_t v48 = (void *)(a3 + 584);
      }
    }
    else
    {
      uint64_t v48 = (void *)(a3 + 584);
    }
    *(void *)(v6 + 992) = *v48 - *(void *)a3;
    goto LABEL_90;
  }
  if (v18 < 0x45)
  {
    if (v18 < 0x3D)
    {
      LOWORD(v23) = 0;
      if (v18 < 0x3B)
      {
        LODWORD(v25) = 0;
        uint64_t v24 = 0;
        LOWORD(v22) = 0;
        LOBYTE(v26) = 0;
LABEL_53:
        *(_DWORD *)(a1 + 288) = v25;
        __int16 v27 = v23 + v25 - 1;
        int v28 = -(int)v25;
        uint64_t v29 = *(void *)(a1 + 296);
        unint64_t v30 = (unsigned __int16)v22 | ((unint64_t)(unsigned __int16)(v28 & v27) << 32) | (v24 << 48) | (v26 << 16) | (unint64_t)(v29 & 0xFF000000);
        *(void *)(a1 + 296) = v30;
        if (v30 != v29)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v31 = -1;
          *((void *)&v31 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v31;
          *(_OWORD *)(a1 + 360) = v31;
          *(_OWORD *)(a1 + 376) = v31;
        }
        goto LABEL_55;
      }
      LOWORD(v22) = 0;
      uint64_t v24 = v17[29];
      if (!v17[29])
      {
LABEL_38:
        if (v18 < 0x3F)
        {
          LODWORD(v25) = 0;
          LOBYTE(v26) = 0;
        }
        else
        {
          uint64_t v25 = v17[31];
          if (v17[31]) {
            uint64_t v25 = *(void *)((char *)v16 + v25);
          }
          if (v18 < 0x4B)
          {
            LOBYTE(v26) = 0;
          }
          else
          {
            uint64_t v26 = v17[37];
            if (v26) {
              LODWORD(v26) = *(int *)((char *)v16 + v26);
            }
          }
        }
        goto LABEL_53;
      }
LABEL_37:
      uint64_t v24 = *(void *)((char *)v16 + v24);
      goto LABEL_38;
    }
    LOWORD(v22) = 0;
    uint64_t v23 = v17[30];
    if (v17[30]) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v22 = v17[34];
    if (v17[34]) {
      uint64_t v22 = *(void *)((char *)v16 + v22);
    }
    uint64_t v23 = v17[30];
    if (v17[30]) {
LABEL_35:
    }
      uint64_t v23 = *(void *)((char *)v16 + v23);
  }
  uint64_t v24 = v17[29];
  if (!v17[29]) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

void sub_242AC74A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, CompileStatistics *a15, void **a16, uint64_t a17, void **a18, void **a19, void **a20,void **a21,uint64_t a22,void **a23,void **a24,void **a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  CompileStatistics::~CompileStatistics(a15);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v46 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a28);
  uint64_t v49 = *(void **)(v46 + 1096);
  if (v49)
  {
    *(void *)(v46 + 1104) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *a30;
  if (*a30)
  {
    *(void *)(v46 + 1080) = v50;
    operator delete(v50);
  }
  if (*a9 < 0)
  {
    operator delete(*a10);
    if ((*(char *)(v46 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v46 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v46 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a23);
  if (*(char *)(v46 + 575) < 0)
  {
LABEL_8:
    operator delete(*a24);
    if ((*(char *)(v46 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a35);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a13);
      unint64_t v51 = *a18;
      if (*a18)
      {
        *(void *)(v46 + 176) = v51;
        operator delete(v51);
      }
      unint64_t v52 = *a20;
      if (*a20)
      {
        *(void *)(v46 + 152) = v52;
        operator delete(v52);
      }
      unsigned int v53 = *a19;
      if (*a19)
      {
        *(void *)(v46 + 128) = v53;
        operator delete(v53);
      }
      uint64_t v54 = *a21;
      if (*a21)
      {
        *(void *)(v46 + 104) = v54;
        operator delete(v54);
      }
      uint64_t v55 = *a16;
      if (*a16)
      {
        *(void *)(v46 + 80) = v55;
        operator delete(v55);
        unsigned int v56 = *v47;
        if (!*v47)
        {
LABEL_24:
          if (a46 < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        unsigned int v56 = *v47;
        if (!*v47) {
          goto LABEL_24;
        }
      }
      *(void *)(v46 + 56) = v56;
      operator delete(v56);
      if (a46 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a25);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v46 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::HAL200::BlitComputeProgramVariant::~BlitComputeProgramVariant(AGX::HAL200::BlitComputeProgramVariant *this)
{
  *(void *)this = &unk_26F852B78;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F852B78;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 168);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant((unint64_t)this);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  *(void *)a1 = &unk_26F852B98;
  if (*(void *)(a1 + 672))
  {
    uint64_t v2 = *(void *)(a1 + 680);
    int v3 = *(NSObject **)(v2 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    unint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    long long v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v2;
    unint64_t v33 = a1 + 648;
    dispatch_sync(v3, &v28);
    *(_OWORD *)(a1 + 673) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
  }
  if (*(void *)(a1 + 720))
  {
    uint64_t v4 = *(void *)(a1 + 728);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    unint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    long long v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v4;
    unint64_t v33 = a1 + 696;
    dispatch_sync(v5, &v28);
    *(_OWORD *)(a1 + 721) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
  }
  if (*(void *)(a1 + 768))
  {
    uint64_t v6 = *(void *)(a1 + 776);
    long long v7 = *(NSObject **)(v6 + 16);
    uint64_t v28 = MEMORY[0x263EF8330];
    uint64_t v29 = 3221225472;
    unint64_t v30 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    long long v31 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v32 = v6;
    unint64_t v33 = a1 + 744;
    dispatch_sync(v7, &v28);
    *(_OWORD *)(a1 + 769) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v8 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 7952));
  }
  if ((*(char *)(a1 + 1343) & 0x80000000) == 0)
  {
    unint64_t v9 = *(void **)(a1 + 1296);
    if (!v9) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 1320));
  unint64_t v9 = *(void **)(a1 + 1296);
  if (v9)
  {
LABEL_11:
    *(void *)(a1 + 1304) = v9;
    operator delete(v9);
  }
LABEL_12:
  uint64_t v10 = *(void *)(a1 + 1272);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 1280);
    uint64_t v12 = *(void **)(a1 + 1272);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      uint64_t v12 = *(void **)(a1 + 1272);
    }
    *(void *)(a1 + 1280) = v10;
    operator delete(v12);
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 1160));
  uint64_t v13 = *(void *)(a1 + 1120);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 1128);
    uint64_t v15 = *(void **)(a1 + 1120);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      uint64_t v15 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v13;
    operator delete(v15);
  }
  uint64_t v17 = *(void **)(a1 + 1096);
  if (v17)
  {
    *(void *)(a1 + 1104) = v17;
    operator delete(v17);
  }
  unsigned int v18 = *(void **)(a1 + 1072);
  if (v18)
  {
    *(void *)(a1 + 1080) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 991) < 0)
  {
    operator delete(*(void **)(a1 + 968));
    if ((*(char *)(a1 + 599) & 0x80000000) == 0)
    {
LABEL_37:
      if ((*(char *)(a1 + 575) & 0x80000000) == 0) {
        goto LABEL_38;
      }
LABEL_58:
      operator delete(*(void **)(a1 + 552));
      if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_59;
    }
  }
  else if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 576));
  if (*(char *)(a1 + 575) < 0) {
    goto LABEL_58;
  }
LABEL_38:
  if ((*(char *)(a1 + 551) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_59:
  operator delete(*(void **)(a1 + 528));
LABEL_39:
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 272));
  uint64_t v19 = *(void **)(a1 + 240);
  if (v19)
  {
    *(void *)(a1 + 248) = v19;
    operator delete(v19);
  }
  unsigned int v20 = *(void **)(a1 + 216);
  if (v20)
  {
    *(void *)(a1 + 224) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(a1 + 168);
  if (v21)
  {
    *(void *)(a1 + 176) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(a1 + 144);
  if (v22)
  {
    *(void *)(a1 + 152) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(a1 + 120);
  if (v23)
  {
    *(void *)(a1 + 128) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(a1 + 96);
  if (v24)
  {
    *(void *)(a1 + 104) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 72);
  if (v25)
  {
    *(void *)(a1 + 80) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void **)(a1 + 48);
  if (v26)
  {
    *(void *)(a1 + 56) = v26;
    operator delete(v26);
  }
  return a1;
}

void AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(unint64_t a1)
{
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant(a1);

  JUMPOUT(0x24566ED90);
}

void AGX::BlitComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitComputeProgramVariant(void *a1)
{
  *a1 = &unk_26F852B78;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 168);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);

  JUMPOUT(0x24566ED90);
}

unint64_t AGX::BlitComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitComputeProgramVariant(void *a1)
{
  *a1 = &unk_26F852B78;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a1 + 168);

  return AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::~ProgramVariant((unint64_t)a1);
}

unint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::ProgramVariant(unint64_t a1, uint64_t a2, unsigned int **a3, const std::string *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  long long v7 = a3;
  unint64_t v8 = a1;
  uint64_t v540 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F852B98;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  unint64_t v9 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v517 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v516 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v532 = (uint64_t **)(a1 + 272);
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v10 = -1;
  *((void *)&v10 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v10;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v10;
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  v520 = (void *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  unint64_t v512 = a1 + 1048;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a5 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  unint64_t v533 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  uint64_t v522 = (void **)(a1 + 1272);
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  char v513 = (_DWORD *)(a1 + 1176);
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (a3[28])
  {
    if (a3[29]) {
      uint64_t v11 = a3 + 28;
    }
    else {
      uint64_t v11 = a3 + 98;
    }
  }
  else
  {
    uint64_t v11 = a3 + 98;
  }
  uint64_t v12 = 0;
  if (*v11 && v11[1]) {
    uint64_t v12 = (int *)((char *)*v11 + **v11);
  }
  uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  __n128 v510 = (_OWORD *)(a1 + 744);
  if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0)
  {
    uint64_t v15 = (int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
    if (!a3[58])
    {
LABEL_12:
      uint64_t v16 = a3 + 128;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = 0;
    if (!a3[58]) {
      goto LABEL_12;
    }
  }
  if (a3[59]) {
    uint64_t v16 = a3 + 58;
  }
  else {
    uint64_t v16 = a3 + 128;
  }
LABEL_17:
  uint64_t v17 = 0;
  if (*v16 && v16[1]) {
    uint64_t v17 = (int *)((char *)*v16 + **v16);
  }
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  v531 = v15;
  if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0) {
    unsigned int v20 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    unsigned int v20 = 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  unsigned int v22 = *v21;
  if (v22 < 0x25)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    uint64_t v23 = v21[18];
    if (v21[18]) {
      LOBYTE(v23) = *((unsigned char *)v20 + v23) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v23;
  uint64_t v24 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v24 >= 0x55u)
  {
    uint64_t v25 = v24[42];
    if (v25)
    {
      if (*((unsigned char *)v15 + v25))
      {
        if (v22 < 0x45)
        {
          if (v22 < 0x3D)
          {
            LOWORD(v27) = 0;
            if (v22 < 0x3B)
            {
              LODWORD(v29) = 0;
              uint64_t v28 = 0;
              LOWORD(v26) = 0;
              LOBYTE(v30) = 0;
LABEL_53:
              *(_DWORD *)(a1 + 288) = v29;
              __int16 v31 = v27 + v29 - 1;
              int v32 = -(int)v29;
              uint64_t v33 = *(void *)(a1 + 296);
              unint64_t v34 = (unsigned __int16)v26 | ((unint64_t)(unsigned __int16)(v32 & v31) << 32) | (v28 << 48) | (v30 << 16) | (unint64_t)(v33 & 0xFF000000);
              *(void *)(a1 + 296) = v34;
              if (v34 != v33)
              {
                *(void *)(a1 + 336) = 0;
                *(_OWORD *)(a1 + 304) = 0uLL;
                *(_OWORD *)(a1 + 320) = 0uLL;
                *(void *)&long long v35 = -1;
                *((void *)&v35 + 1) = -1;
                *(_OWORD *)(a1 + 344) = v35;
                *(_OWORD *)(a1 + 360) = v35;
                *(_OWORD *)(a1 + 376) = v35;
              }
              goto LABEL_55;
            }
            LOWORD(v26) = 0;
            uint64_t v28 = v21[29];
            if (!v21[29])
            {
LABEL_38:
              if (v22 < 0x3F)
              {
                LODWORD(v29) = 0;
                LOBYTE(v30) = 0;
              }
              else
              {
                uint64_t v29 = v21[31];
                if (v21[31]) {
                  uint64_t v29 = *(void *)((char *)v20 + v29);
                }
                if (v22 < 0x4B)
                {
                  LOBYTE(v30) = 0;
                }
                else
                {
                  uint64_t v30 = v21[37];
                  if (v30) {
                    LODWORD(v30) = *(int *)((char *)v20 + v30);
                  }
                }
              }
              goto LABEL_53;
            }
LABEL_37:
            uint64_t v28 = *(void *)((char *)v20 + v28);
            goto LABEL_38;
          }
          LOWORD(v26) = 0;
          uint64_t v27 = v21[30];
          if (v21[30]) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v26 = v21[34];
          if (v21[34]) {
            uint64_t v26 = *(void *)((char *)v20 + v26);
          }
          uint64_t v27 = v21[30];
          if (v21[30]) {
LABEL_35:
          }
            uint64_t v27 = *(void *)((char *)v20 + v27);
        }
        uint64_t v28 = v21[29];
        if (!v21[29]) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
    }
  }
LABEL_55:
  uint64_t v36 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v36 < 7u)
  {
    LODWORD(v37) = 0;
  }
  else
  {
    uint64_t v37 = v36[3];
    if (v37) {
      LODWORD(v37) = *(int *)((char *)v20 + v37);
    }
  }
  uint64_t v514 = (void *)(a1 + 168);
  unint64_t v515 = (void *)(a1 + 120);
  uint64_t v521 = a1 + 1120;
  *(_DWORD *)(a1 + 512) = v37;
  uint64_t v38 = (unsigned __int16 *)((char *)v20 - *v20);
  uint64_t v509 = (_OWORD *)(a1 + 696);
  v511 = (_OWORD *)(a1 + 648);
  if (*v38 >= 0x13u && (uint64_t v39 = v38[9]) != 0) {
    uint64_t v40 = (char *)v20 + v39 + *(unsigned int *)((char *)v20 + v39) + 4;
  }
  else {
    uint64_t v40 = "";
  }
  uint64_t v507 = (std::vector<unsigned int> *)(a1 + 72);
  unint64_t v518 = (std::string *)(a1 + 576);
  v519 = (void *)(a1 + 552);
  uint64_t v508 = (void **)(a1 + 968);
  __n128 v523 = (void *)(a1 + 1072);
  MEMORY[0x24566EB20](v520, v40);
  uint64_t v41 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v41 >= 9u && (uint64_t v42 = v41[4]) != 0) {
    size_t v43 = (char *)v20 + v42 + *(unsigned int *)((char *)v20 + v42) + 4;
  }
  else {
    size_t v43 = "";
  }
  MEMORY[0x24566EB20](v519, v43);
  size_t v44 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v44 < 0x29u)
  {
    LOBYTE(v45) = 0;
  }
  else
  {
    uint64_t v45 = v44[20];
    if (v45) {
      LOBYTE(v45) = *((unsigned char *)v20 + v45) != 0;
    }
  }
  *(unsigned char *)(v8 + 600) = v45;
  std::string::operator=(v518, a4);
  uint64_t v46 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v46 >= 5u && v46[2] && *(unsigned char *)(a2 + 7440))
  {
    size_t v47 = (size_t)v7[1];
    if (v47 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v48 = *v7;
    if (v47 >= 0x17)
    {
      uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v50 = v47 | 7;
      }
      uint64_t v51 = v50 + 1;
      uint64_t v49 = operator new(v50 + 1);
      *(void *)&__dst[8] = v47;
      *(void *)&__dst[16] = v51 | 0x8000000000000000;
      *(void *)std::string __dst = v49;
    }
    else
    {
      __dst[23] = v7[1];
      uint64_t v49 = __dst;
      if (!v47) {
        goto LABEL_82;
      }
    }
    memmove(v49, v48, v47);
LABEL_82:
    v49[v47] = 0;
    if (*(char *)(v8 + 991) < 0) {
      operator delete(*v508);
    }
    *(_OWORD *)uint64_t v508 = *(_OWORD *)__dst;
    *(void *)(v8 + 984) = *(void *)&__dst[16];
    unint64_t v52 = v7 + 3;
    if (v7[3])
    {
      if (!v7[4]) {
        unint64_t v52 = v7 + 73;
      }
    }
    else
    {
      unint64_t v52 = v7 + 73;
    }
    *(void *)(v8 + 992) = *v52 - (void)*v7;
  }
  __int16 v535 = v9;
  if (v7[43])
  {
    unsigned int v53 = v7 + 43;
    if (!v7[44]) {
      unsigned int v53 = v7 + 113;
    }
  }
  else
  {
    unsigned int v53 = v7 + 113;
  }
  uint64_t v527 = v7;
  char v529 = v20;
  uint64_t v530 = (void *)v8;
  if (*v53 && v53[1])
  {
    uint64_t v54 = (int *)((char *)*v53 + **v53);
    uint64_t v55 = (unsigned __int16 *)((char *)v54 - *v54);
    unsigned int v56 = *v55;
    if (v55[2])
    {
      uint64_t v57 = (int *)((char *)v54 + v55[2] + *(unsigned int *)((char *)v54 + v55[2]));
      if (v56 < 7) {
        goto LABEL_104;
      }
    }
    else
    {
      uint64_t v57 = 0;
      if (v56 < 7) {
        goto LABEL_104;
      }
    }
    uint64_t v58 = v55[3];
    if (v58)
    {
      unint64_t v59 = (char *)v54 + v58 + *(unsigned int *)((char *)v54 + v58);
      if (!*v57) {
        goto LABEL_143;
      }
      goto LABEL_105;
    }
LABEL_104:
    unint64_t v59 = 0;
    if (!*v57) {
      goto LABEL_143;
    }
LABEL_105:
    uint64_t v60 = 0;
    __n128 v525 = v59 + 4;
    char v526 = v57 + 1;
    while (1)
    {
      size_t v62 = (char *)&v526[v60 + 1] + v526[v60];
      size_t v63 = strlen(v62);
      if (v63 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v64 = v63;
      if (v63 >= 0x17) {
        break;
      }
      __dst[23] = v63;
      unint64_t v65 = __dst;
      if (v63) {
        goto LABEL_115;
      }
LABEL_116:
      v65[v64] = 0;
      unint64_t v68 = *(void *)(v8 + 1280);
      if (v68 >= *(void *)(v8 + 1288))
      {
        int v69 = std::vector<std::string>::__push_back_slow_path<std::string>(v522, (uint64_t)__dst);
        int v70 = __dst[23];
        *(void *)(v8 + 1280) = v69;
        if (v70 < 0) {
          operator delete(*(void **)__dst);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v68 = *(_OWORD *)__dst;
        *(void *)(v68 + 16) = *(void *)&__dst[16];
        *(void *)(v8 + 1280) = v68 + 24;
      }
      int v71 = *(_DWORD *)&v525[4 * v60];
      uint64_t v72 = *(char **)(v8 + 1304);
      unint64_t v73 = *(void *)(v8 + 1312);
      if ((unint64_t)v72 >= v73)
      {
        unint64_t v74 = v8;
        uint64_t v75 = v5;
        uint64_t v76 = v57;
        unint64_t v77 = *(char **)(v74 + 1296);
        uint64_t v78 = (v72 - v77) >> 2;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 62) {
          abort();
        }
        uint64_t v80 = v73 - (void)v77;
        if (v80 >> 1 > v79) {
          unint64_t v79 = v80 >> 1;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          if (v81 >> 62) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v82 = operator new(4 * v81);
        }
        else
        {
          uint64_t v82 = 0;
        }
        long long v83 = &v82[4 * v78];
        *long long v83 = v71;
        size_t v61 = v83 + 1;
        if (v72 == v77)
        {
          long long v7 = v527;
        }
        else
        {
          unint64_t v84 = v72 - 4 - v77;
          if (v84 < 0x2C)
          {
            long long v7 = v527;
            goto LABEL_139;
          }
          long long v7 = v527;
          if ((unint64_t)(v77 - v82) < 0x20) {
            goto LABEL_804;
          }
          uint64_t v85 = (v84 >> 2) + 1;
          int v86 = &v82[4 * v78 - 16];
          uint64_t v87 = v72 - 16;
          uint64_t v88 = v85 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *int v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 8;
          }
          while (v88);
          v83 -= v85 & 0x7FFFFFFFFFFFFFF8;
          v72 -= 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
          if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_804:
            do
            {
LABEL_139:
              int v90 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *--long long v83 = v90;
            }
            while (v72 != v77);
          }
        }
        v530[162] = v83;
        v530[163] = v61;
        v530[164] = &v82[4 * v81];
        if (v77) {
          operator delete(v77);
        }
        uint64_t v57 = v76;
        uint64_t v5 = v75;
        unint64_t v8 = (unint64_t)v530;
        goto LABEL_107;
      }
      *(_DWORD *)uint64_t v72 = v71;
      size_t v61 = v72 + 4;
LABEL_107:
      *(void *)(v8 + 1304) = v61;
      if (++v60 >= (unint64_t)*v57) {
        goto LABEL_143;
      }
    }
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    unint64_t v65 = operator new(v66 + 1);
    *(void *)&__dst[8] = v64;
    *(void *)&__dst[16] = v67 | 0x8000000000000000;
    *(void *)std::string __dst = v65;
LABEL_115:
    memmove(v65, v62, v64);
    goto LABEL_116;
  }
LABEL_143:
  if (v7[68])
  {
    uint64_t v91 = v7 + 68;
    if (!v7[69]) {
      uint64_t v91 = v7 + 138;
    }
  }
  else
  {
    uint64_t v91 = v7 + 138;
  }
  uint64_t v93 = *v91;
  uint64_t v92 = v91[1];
  if (v93) {
    BOOL v94 = v92 == 0;
  }
  else {
    BOOL v94 = 1;
  }
  if (v94
    || (uint64_t v95 = (int *)((char *)v93 + *v93), v96 = (unsigned __int16 *)((char *)v95 - *v95), *v96 < 5u)
    || (uint64_t v97 = v96[2]) == 0)
  {
    uint64_t v98 = 0;
  }
  else
  {
    uint64_t v98 = *(void *)((char *)v95 + v97);
  }
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  *(float *)(v8 + 1184) = (float)(v98
                                * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                / *(unsigned int *)algn_268D5B048)
                        / 1000000.0;
  uint64_t v99 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v99 < 5u)
  {
    LODWORD(v100) = 0;
  }
  else
  {
    uint64_t v100 = v99[2];
    if (v100) {
      LODWORD(v100) = *(int *)((char *)v531 + v100);
    }
  }
  *char v513 = v100;
  uint64_t v101 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v101 < 0x2Du)
  {
    LODWORD(v102) = 0;
  }
  else
  {
    uint64_t v102 = v101[22];
    if (v102) {
      LODWORD(v102) = *(int *)((char *)v531 + v102);
    }
  }
  *(_DWORD *)(v8 + 1180) = v102;
  int v103 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v103 < 0x35u)
  {
    LODWORD(v104) = 0;
  }
  else
  {
    uint64_t v104 = v103[26];
    if (v104) {
      LODWORD(v104) = *(int *)((char *)v531 + v104);
    }
  }
  *(_DWORD *)(v8 + 1220) = v104;
  uint64_t v105 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v105 < 0x43u)
  {
    LODWORD(v106) = 0;
  }
  else
  {
    uint64_t v106 = v105[33];
    if (v106) {
      LODWORD(v106) = *(int *)((char *)v531 + v106);
    }
  }
  *(_DWORD *)(v8 + 1256) = v106;
  if (!v7[38])
  {
    uint64_t v107 = v7 + 108;
    uint64_t v108 = v7[108];
    if (!v108) {
      goto LABEL_258;
    }
    goto LABEL_180;
  }
  uint64_t v107 = v7 + 38;
  if (!v7[39]) {
    uint64_t v107 = v7 + 108;
  }
  uint64_t v108 = *v107;
  if (*v107)
  {
LABEL_180:
    if (v107[1])
    {
      uint64_t v109 = (int *)((char *)v108 + *v108);
      uint64_t v110 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v110 < 0xDu)
      {
        LODWORD(v111) = 0;
      }
      else
      {
        uint64_t v111 = v110[6];
        if (v111) {
          LODWORD(v111) = *(int *)((char *)v109 + v111);
        }
      }
      *(_DWORD *)(v8 + 1180) = v111;
      uint64_t v112 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v112 < 0xBu)
      {
        LODWORD(v113) = 0;
      }
      else
      {
        uint64_t v113 = v112[5];
        if (v113) {
          LODWORD(v113) = *(int *)((char *)v109 + v113);
        }
      }
      *(_DWORD *)(v8 + 1188) = v113;
      uint64_t v114 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v114 < 0x11u)
      {
        LODWORD(v115) = 0;
      }
      else
      {
        uint64_t v115 = v114[8];
        if (v115) {
          LODWORD(v115) = *(int *)((char *)v109 + v115);
        }
      }
      *(_DWORD *)(v8 + 1192) = v115;
      uint64_t v116 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v116 < 0x13u)
      {
        LODWORD(v117) = 0;
      }
      else
      {
        uint64_t v117 = v116[9];
        if (v117) {
          LODWORD(v117) = *(int *)((char *)v109 + v117);
        }
      }
      *(_DWORD *)(v8 + 1196) = v117;
      uint64_t v118 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v118 < 0x17u)
      {
        LODWORD(v119) = 0;
      }
      else
      {
        uint64_t v119 = v118[11];
        if (v119) {
          LODWORD(v119) = *(int *)((char *)v109 + v119);
        }
      }
      *(_DWORD *)(v8 + 1200) = v119;
      uint64_t v120 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v120 < 0x1Bu)
      {
        LODWORD(v121) = 0;
      }
      else
      {
        uint64_t v121 = v120[13];
        if (v121) {
          LODWORD(v121) = *(int *)((char *)v109 + v121);
        }
      }
      *(_DWORD *)(v8 + 1204) = v121;
      uint64_t v122 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v122 < 0x15u)
      {
        LODWORD(v123) = 0;
      }
      else
      {
        uint64_t v123 = v122[10];
        if (v123) {
          LODWORD(v123) = *(int *)((char *)v109 + v123);
        }
      }
      *(_DWORD *)(v8 + 1208) = v123;
      uint64_t v124 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v124 < 0x19u)
      {
        LODWORD(v125) = 0;
      }
      else
      {
        uint64_t v125 = v124[12];
        if (v125) {
          LODWORD(v125) = *(int *)((char *)v109 + v125);
        }
      }
      *(_DWORD *)(v8 + 1212) = v125;
      uint64_t v126 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v126 < 0x1Du)
      {
        LODWORD(v127) = 0;
      }
      else
      {
        uint64_t v127 = v126[14];
        if (v127) {
          LODWORD(v127) = *(int *)((char *)v109 + v127);
        }
      }
      *(_DWORD *)(v8 + 1216) = v127;
      uint64_t v128 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v128 < 0xFu)
      {
        LODWORD(v129) = 0;
      }
      else
      {
        uint64_t v129 = v128[7];
        if (v129) {
          LODWORD(v129) = *(int *)((char *)v109 + v129);
        }
      }
      *(_DWORD *)(v8 + 1220) = v129;
      uint64_t v130 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v130 < 0x1Fu)
      {
        LODWORD(v131) = 0;
      }
      else
      {
        uint64_t v131 = v130[15];
        if (v131) {
          LODWORD(v131) = *(int *)((char *)v109 + v131);
        }
      }
      *(_DWORD *)(v8 + 1224) = v131;
      uint64_t v132 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v132 < 0x21u)
      {
        LODWORD(v133) = 0;
      }
      else
      {
        uint64_t v133 = v132[16];
        if (v133) {
          LODWORD(v133) = *(int *)((char *)v109 + v133);
        }
      }
      *(_DWORD *)(v8 + 1228) = v133;
      uint64_t v134 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v134 < 0x23u)
      {
        LODWORD(v135) = 0;
      }
      else
      {
        uint64_t v135 = v134[17];
        if (v135) {
          LODWORD(v135) = *(int *)((char *)v109 + v135);
        }
      }
      *(_DWORD *)(v8 + 1232) = v135;
      uint64_t v136 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v136 < 0x25u)
      {
        LODWORD(v137) = 0;
      }
      else
      {
        uint64_t v137 = v136[18];
        if (v137) {
          LODWORD(v137) = *(int *)((char *)v109 + v137);
        }
      }
      *(_DWORD *)(v8 + 1236) = v137;
      uint64_t v138 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v138 < 0x27u)
      {
        LODWORD(v139) = 0;
      }
      else
      {
        uint64_t v139 = v138[19];
        if (v139) {
          LODWORD(v139) = *(int *)((char *)v109 + v139);
        }
      }
      *(_DWORD *)(v8 + 1240) = v139;
      uint64_t v140 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v140 < 0x29u)
      {
        LODWORD(v141) = 0;
      }
      else
      {
        uint64_t v141 = v140[20];
        if (v141) {
          LODWORD(v141) = *(int *)((char *)v109 + v141);
        }
      }
      *(_DWORD *)(v8 + 1244) = v141;
      uint64_t v142 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v142 < 0x2Bu)
      {
        LODWORD(v143) = 0;
      }
      else
      {
        uint64_t v143 = v142[21];
        if (v143) {
          LODWORD(v143) = *(int *)((char *)v109 + v143);
        }
      }
      *(_DWORD *)(v8 + 1248) = v143;
      int v144 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v144 < 7u)
      {
        LODWORD(v145) = 0;
      }
      else
      {
        uint64_t v145 = v144[3];
        if (v145) {
          LODWORD(v145) = *(int *)((char *)v109 + v145);
        }
      }
      *(_DWORD *)(v8 + 1252) = v145;
      uint64_t v146 = (unsigned __int16 *)((char *)v109 - *v109);
      if (*v146 >= 5u && (uint64_t v147 = v146[2]) != 0) {
        int v148 = *(int *)((char *)v109 + v147);
      }
      else {
        int v148 = 0;
      }
      *(_DWORD *)(v8 + 1260) = v148;
    }
  }
LABEL_258:
  if (v7[53])
  {
    uint64_t v149 = v7[54];
    if (v149) {
      unsigned int v150 = v7[53];
    }
    else {
      unsigned int v150 = v7[123];
    }
    if (v149) {
      uint64_t v151 = v7 + 53;
    }
    else {
      uint64_t v151 = v7 + 123;
    }
  }
  else
  {
    uint64_t v151 = v7 + 123;
    unsigned int v150 = v7[123];
  }
  MEMORY[0x24566EB30](v8 + 1320, v150, v151[1]);
  std::string::push_back((std::string *)(v8 + 1320), 0);
  uint64_t v152 = *v531;
  uint64_t v153 = (char *)v531 - v152;
  unsigned int v154 = *(unsigned __int16 *)((char *)v531 - v152);
  if (v154 < 0x39) {
    goto LABEL_284;
  }
  uint64_t v155 = -v152;
  uint64_t v156 = *((unsigned __int16 *)v153 + 28);
  if (v156)
  {
    int v157 = (int *)((char *)v531 + v156 + *(unsigned int *)((char *)v531 + v156));
    if (*v157)
    {
      *(unsigned char *)(v8 + 1064) = 1;
      uint64_t v158 = (_DWORD *)((char *)v157 + v157[1] + 4);
      uint64_t v159 = (unsigned __int16 *)((char *)v158 - *v158);
      if (*v159 >= 9u && (uint64_t v160 = v159[4]) != 0) {
        int v161 = *(int *)((char *)v158 + v160);
      }
      else {
        int v161 = 0;
      }
      *(_DWORD *)(v8 + 1264) = v161;
      *(unsigned char *)(v8 + 1268) = 1;
      uint64_t v162 = *v531;
      uint64_t v155 = -v162;
      unsigned int v154 = *(unsigned __int16 *)((char *)v531 - v162);
    }
  }
  if (v154 < 0x3B) {
    goto LABEL_284;
  }
  unsigned int v163 = (char *)v531 + v155;
  if (*((_WORD *)v163 + 29))
  {
    unsigned int v164 = (unsigned int *)((char *)v531
                          + *((unsigned __int16 *)v163 + 29)
                          + *(unsigned int *)((char *)v531 + *((unsigned __int16 *)v163 + 29)));
    uint64_t v165 = *v164;
    if (v165)
    {
      uint64_t v166 = v164 + 1;
      do
      {
        unsigned int v168 = *v166++;
        unsigned int v167 = v168;
        if (!(v168 >> 20)) {
          *(void *)(v512 + 8 * (v167 > 0x3F)) |= 1 << v167;
        }
        --v165;
      }
      while (v165);
    }
  }
  if (v154 < 0x57)
  {
LABEL_284:
    LODWORD(v169) = 0;
  }
  else
  {
    uint64_t v169 = *((unsigned __int16 *)v163 + 43);
    if (*((_WORD *)v163 + 43)) {
      LODWORD(v169) = *(int *)((char *)v531 + v169);
    }
  }
  *(_DWORD *)(v8 + 400) = v169;
  uint64_t v170 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v170 >= 0x21u && (uint64_t v171 = v170[16]) != 0) {
    int v172 = *(int *)((char *)v531 + v171);
  }
  else {
    int v172 = 0;
  }
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(v8 + 404) = getAdditionalSpillBufferBytes(void)::extra + v172;
  uint64_t v173 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v173 < 0x59u)
  {
    LODWORD(v174) = 0;
    uint64_t v175 = v529;
  }
  else
  {
    uint64_t v174 = v173[44];
    uint64_t v175 = v529;
    if (v174) {
      LODWORD(v174) = *(int *)((char *)v531 + v174);
    }
  }
  *(_DWORD *)(v8 + 432) = v174;
  unsigned int v176 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v176 < 0x51u)
  {
    LODWORD(v177) = 0;
  }
  else
  {
    uint64_t v177 = v176[40];
    if (v177) {
      LODWORD(v177) = *(int *)((char *)v531 + v177);
    }
  }
  *(_DWORD *)(v8 + 436) = v177;
  BOOL v178 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v178 < 0x4Bu)
  {
    LODWORD(v179) = 0;
  }
  else
  {
    uint64_t v179 = v178[37];
    if (v179) {
      LODWORD(v179) = *(int *)((char *)v531 + v179);
    }
  }
  *(_DWORD *)(v8 + 444) = v179;
  uint64_t v180 = (unsigned __int16 *)((char *)v531 - *v531);
  unsigned int v181 = *v180;
  if (v181 < 0x25) {
    goto LABEL_312;
  }
  if (!v180[18] || !*((unsigned char *)v531 + v180[18]))
  {
    if (v181 >= 0x27)
    {
      uint64_t v182 = v180[19];
      if (v180[19])
      {
        int v184 = *((unsigned __int8 *)v531 + v182);
        if (*((unsigned char *)v531 + v182))
        {
          BOOL v183 = 1;
LABEL_320:
          LOBYTE(v182) = v184 != 0;
          goto LABEL_321;
        }
      }
      if (v181 >= 0x29 && (uint64_t v185 = v180[20]) != 0)
      {
        BOOL v183 = *((unsigned char *)v531 + v185) != 0;
        if (!v182) {
          goto LABEL_321;
        }
      }
      else
      {
        BOOL v183 = 0;
        if (!v182) {
          goto LABEL_321;
        }
      }
LABEL_319:
      int v184 = *((unsigned __int8 *)v531 + v182);
      goto LABEL_320;
    }
LABEL_312:
    BOOL v183 = 0;
    LOBYTE(v182) = 0;
    goto LABEL_321;
  }
  if (v181 < 0x27)
  {
    LOBYTE(v182) = 0;
    BOOL v183 = 1;
    goto LABEL_321;
  }
  LODWORD(v182) = v180[19];
  BOOL v183 = 1;
  if (v180[19]) {
    goto LABEL_319;
  }
LABEL_321:
  *(unsigned char *)(v8 + 454) = v182;
  uint64_t v186 = (unsigned __int16 *)((char *)v175 - *v175);
  unsigned int v187 = *v186;
  if (v187 < 0x21)
  {
    uint64_t v189 = 0;
    LODWORD(v188) = 0;
LABEL_332:
    uint64_t v190 = 0;
    goto LABEL_333;
  }
  uint64_t v188 = v186[16];
  if (v186[16]) {
    LODWORD(v188) = *(int *)((char *)v175 + v188);
  }
  if (v187 < 0x4D)
  {
    uint64_t v189 = 0;
    goto LABEL_332;
  }
  uint64_t v189 = v186[38];
  if (v186[38]) {
    uint64_t v189 = *(unsigned int *)((char *)v175 + v189);
  }
  if (v187 < 0x4F) {
    goto LABEL_332;
  }
  uint64_t v190 = v186[39];
  if (v190) {
    uint64_t v190 = *(void *)((char *)v175 + v190);
  }
LABEL_333:
  *(void *)(v8 + 496) = v188 | (unint64_t)(v189 << 32);
  *(void *)(v8 + 504) = v190;
  *(unsigned char *)(v8 + 458) = v183 | v182;
  uint64_t v191 = *v531;
  uint64_t v192 = (char *)v531 - v191;
  unsigned int v193 = *(unsigned __int16 *)((char *)v531 - v191);
  if (v193 < 0x37)
  {
    LOBYTE(v194) = 0;
  }
  else
  {
    uint64_t v194 = *((unsigned __int16 *)v192 + 27);
    if (*((_WORD *)v192 + 27)) {
      LOBYTE(v194) = *((unsigned char *)v531 + v194) != 0;
    }
  }
  *(unsigned char *)(v8 + 453) = v194;
  uint64_t v195 = (unsigned __int16 *)((char *)v175 - *v175);
  unsigned int v196 = *v195;
  if (v196 < 0x33)
  {
    LOBYTE(v197) = 0;
  }
  else
  {
    uint64_t v197 = v195[25];
    if (v195[25]) {
      LOBYTE(v197) = *((unsigned char *)v175 + v197) != 0;
    }
  }
  uint64_t v198 = -v191;
  *(unsigned char *)(v8 + 459) = v197;
  if (v193 < 0x3F)
  {
    LOBYTE(v199) = 0;
  }
  else
  {
    uint64_t v199 = *((unsigned __int16 *)v192 + 31);
    if (v199)
    {
      uint64_t v200 = (unsigned int *)((char *)v531 + v199 + *(unsigned int *)((char *)v531 + v199));
      uint64_t v199 = *v200;
      if (v199)
      {
        uint64_t v201 = v200 + 1;
        while (1)
        {
          unsigned int v203 = *v201++;
          char v202 = v203;
          if (v203 < 0x36 && ((0x3F000000000777uLL >> v202) & 1) != 0) {
            break;
          }
          if (!--v199) {
            goto LABEL_350;
          }
        }
        LOBYTE(v199) = 1;
      }
    }
  }
LABEL_350:
  *(unsigned char *)(v8 + 461) = v199;
  if (v196 <= 0x14)
  {
    *(unsigned char *)(v8 + 455) = 0;
    *(unsigned char *)(v8 + 1145) = 0;
    *(unsigned char *)(v8 + 1147) = 0;
    if (v193 >= 0x21) {
      goto LABEL_385;
    }
LABEL_388:
    int v225 = 0;
    goto LABEL_389;
  }
  uint64_t v204 = v195[10];
  if (v195[10]) {
    LOBYTE(v204) = *((unsigned char *)v175 + v204) != 0;
  }
  *(unsigned char *)(v8 + 455) = v204;
  if (v196 < 0x25)
  {
    *(unsigned char *)(v8 + 1145) = 0;
    if (v196 < 0x23)
    {
LABEL_383:
      *(unsigned char *)(v8 + 1147) = 0;
LABEL_384:
      if (v193 < 0x21) {
        goto LABEL_388;
      }
      goto LABEL_385;
    }
  }
  else
  {
    uint64_t v205 = v195[18];
    if (v195[18]) {
      LOBYTE(v205) = *((unsigned char *)v175 + v205) != 0;
    }
    *(unsigned char *)(v8 + 1145) = v205;
  }
  uint64_t v206 = v195[17];
  if (!v206) {
    goto LABEL_383;
  }
  *(unsigned char *)(v8 + 1147) = 1;
  uint64_t v207 = (unsigned int *)((char *)v175 + v206);
  uint64_t v208 = *v207;
  int v210 = (unsigned int *)((char *)v207 + v208 + 4);
  uint64_t v209 = *(unsigned int *)((char *)v207 + v208);
  if (!v209) {
    goto LABEL_384;
  }
  uint64_t v211 = &v210[v209];
  do
  {
    unsigned int v212 = (int *)((char *)v210 + *v210);
    unsigned int v213 = (unsigned __int16 *)((char *)v212 - *v212);
    unsigned int v214 = *v213;
    if (v214 < 7)
    {
      int v215 = 0;
      unsigned int v217 = 0;
      if (v214 < 5) {
        goto LABEL_372;
      }
      uint64_t v216 = v213[2];
      if (v216) {
        goto LABEL_371;
      }
    }
    else if (v213[3])
    {
      int v215 = *(int *)((char *)v212 + v213[3]);
      uint64_t v216 = v213[2];
      if (v216) {
        goto LABEL_371;
      }
    }
    else
    {
      int v215 = 0;
      uint64_t v216 = v213[2];
      if (v216)
      {
LABEL_371:
        unsigned int v217 = *(int *)((char *)v212 + v216);
        goto LABEL_372;
      }
    }
    unsigned int v217 = 0;
LABEL_372:
    uint64_t v218 = v533;
    while (1)
    {
      uint64_t v219 = *v218;
      int v220 = v218;
      if (!*v218) {
        break;
      }
      while (1)
      {
        uint64_t v218 = (uint64_t **)v219;
        unsigned int v221 = *((_DWORD *)v219 + 7);
        if (v217 < v221) {
          break;
        }
        if (v221 >= v217)
        {
          int v222 = v218;
          goto LABEL_364;
        }
        uint64_t v219 = v218[1];
        if (!v219)
        {
          int v220 = v218 + 1;
          goto LABEL_378;
        }
      }
    }
LABEL_378:
    int v222 = operator new(0x28uLL);
    v222[7] = v217;
    v222[8] = 0;
    *(void *)int v222 = 0;
    *((void *)v222 + 1) = 0;
    *((void *)v222 + 2) = v218;
    *int v220 = (uint64_t *)v222;
    uint64_t v223 = **(void **)(v8 + 1152);
    uint64_t v224 = (uint64_t *)v222;
    if (v223)
    {
      *(void *)(v8 + 1152) = v223;
      uint64_t v224 = *v220;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v8 + 1160), v224);
    ++*(void *)(v8 + 1168);
LABEL_364:
    v222[8] = v215;
    ++v210;
    long long v7 = v527;
  }
  while (v210 != v211);
  uint64_t v226 = *v531;
  uint64_t v198 = -v226;
  if (*(unsigned __int16 *)((char *)v531 - v226) < 0x21u) {
    goto LABEL_388;
  }
LABEL_385:
  if (!*(_WORD *)((char *)v531 + v198 + 32)) {
    goto LABEL_388;
  }
  int v225 = *(int *)((char *)v531 + *(unsigned __int16 *)((char *)v531 + v198 + 32));
LABEL_389:
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  int v227 = getAdditionalSpillBufferBytes(void)::extra + v225;
  *(_DWORD *)(v8 + 396) = getAdditionalSpillBufferBytes(void)::extra + v225;
  uint64_t v228 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v228 < 0x43u)
  {
    LODWORD(v229) = 0;
    uint64_t v230 = v529;
  }
  else
  {
    uint64_t v229 = v228[33];
    uint64_t v230 = v529;
    if (v229) {
      LODWORD(v229) = *(int *)((char *)v531 + v229);
    }
  }
  *(_DWORD *)(v8 + 408) = v229;
  uint64_t v231 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v231 < 5u)
  {
    LODWORD(v232) = 0;
  }
  else
  {
    uint64_t v232 = v231[2];
    if (v232) {
      LODWORD(v232) = *(int *)((char *)v531 + v232);
    }
  }
  *(_DWORD *)(v8 + 392) = v232;
  unsigned int v233 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v233 < 0x51u)
  {
    LODWORD(v234) = 0;
  }
  else
  {
    uint64_t v234 = v233[40];
    if (v234) {
      LODWORD(v234) = *(int *)((char *)v531 + v234);
    }
  }
  *(_DWORD *)(v8 + 428) = v234;
  int v235 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*v235 < 0x4Fu)
  {
    LODWORD(v236) = 0;
  }
  else
  {
    uint64_t v236 = v235[39];
    if (v236) {
      LODWORD(v236) = *(int *)((char *)v531 + v236);
    }
  }
  *(_DWORD *)(v8 + 440) = v236;
  *(_DWORD *)(v8 + 448) = *(_DWORD *)(v5 + 468);
  uint64_t v237 = (unsigned __int16 *)((char *)v531 - *v531);
  if (*(int *)((char *)v531 + v237[6] + *(unsigned int *)((char *)v531 + v237[6])) | v227) {
    char v238 = 1;
  }
  else {
    char v238 = v183;
  }
  if (v238)
  {
    LOBYTE(v239) = 1;
    goto LABEL_423;
  }
  unsigned int v240 = *v237;
  if (v240 < 0x21)
  {
    int v241 = 0;
  }
  else if (v237[16])
  {
    int v241 = *(int *)((char *)v531 + v237[16]);
    if (v240 >= 0x43)
    {
LABEL_737:
      if (v237[33])
      {
        int v242 = *(int *)((char *)v531 + v237[33]);
        goto LABEL_417;
      }
    }
  }
  else
  {
    int v241 = 0;
    if (v240 >= 0x43) {
      goto LABEL_737;
    }
  }
  int v242 = 0;
  {
LABEL_739:
    {
      getAdditionalSpillBufferBytes(void)::extra = 0;
    }
  }
LABEL_417:
  if (v242 + v241 + getAdditionalSpillBufferBytes(void)::extra)
  {
    LOBYTE(v239) = 1;
    uint64_t v230 = v529;
  }
  else
  {
    uint64_t v243 = (unsigned __int16 *)((char *)v531 - *v531);
    uint64_t v230 = v529;
    if (*v243 < 0x5Fu)
    {
      LOBYTE(v239) = 0;
    }
    else
    {
      uint64_t v239 = v243[47];
      if (v239) {
        LOBYTE(v239) = *((unsigned char *)v531 + v239) != 0;
      }
    }
  }
LABEL_423:
  *(unsigned char *)(v8 + 452) = v239;
  long long v244 = (unsigned __int16 *)((char *)v230 - *v230);
  if (*v244 < 0x11u)
  {
    LODWORD(v245) = 0;
  }
  else
  {
    uint64_t v245 = v244[8];
    if (v245) {
      LODWORD(v245) = *(int *)((char *)v230 + v245);
    }
  }
  *(_DWORD *)(v8 + 960) = v245;
  {
    AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
  }
  long long v246 = (_OWORD *)(v8 + 816);
  uint64_t v247 = (const void **)(v7 + 3);
  if (v7[3])
  {
    if (v7[4]) {
      long long v248 = v7 + 3;
    }
    else {
      long long v248 = v7 + 73;
    }
  }
  else
  {
    long long v248 = v7 + 73;
  }
  uint64_t v249 = a2 + 5184;
  AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v248[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(v8 + 1016));
  *(_DWORD *)(v8 + 1040) += *(_DWORD *)&__dst[16];
  long long v250 = *(_OWORD *)&__dst[16];
  *long long v246 = *(_OWORD *)__dst;
  *(_OWORD *)(v8 + 832) = v250;
  *(_OWORD *)(v8 + 841) = *(_OWORD *)&__dst[25];
  *(void *)(v8 + 608) = *(void *)(v8 + 816);
  *(void *)(v8 + 640) = a2 + 5352;
  long long v251 = *(_OWORD *)(v8 + 832);
  _OWORD *v511 = *v246;
  v511[1] = v251;
  *(_OWORD *)((char *)v511 + 25) = *(_OWORD *)(v8 + 841);
  if (*v247)
  {
    uint64_t v252 = v7[4];
    if (v252) {
      uint64_t v253 = (unsigned int *)*v247;
    }
    else {
      uint64_t v253 = v7[73];
    }
    if (v252) {
      uint64_t v254 = v7 + 3;
    }
    else {
      uint64_t v254 = v7 + 73;
    }
  }
  else
  {
    uint64_t v254 = v7 + 73;
    uint64_t v253 = v7[73];
  }
  memcpy(*(void **)(v8 + 824), v253, v254[1]);
  uint64_t v255 = *(void *)(v8 + 824);
  uint64_t v256 = *(void *)(v8 + 832);
  *(void *)(v8 + 616) = *(void *)(v8 + 608);
  *(void *)(v8 + 624) = v255;
  *(void *)(v8 + 632) = v256;
  uint64_t v257 = (const void **)(v7 + 8);
  if (v7[8])
  {
    if (v7[9]) {
      long long v258 = v7 + 8;
    }
    else {
      long long v258 = v7 + 78;
    }
    uint64_t v259 = v258[1];
    if (!v259) {
      goto LABEL_457;
    }
  }
  else
  {
    uint64_t v259 = (uint64_t)v7[79];
    if (!v259) {
      goto LABEL_457;
    }
  }
  AGX::Heap<true>::allocateImpl(__dst, v249, v259, (void *)(v8 + 1024));
  *(_DWORD *)(v8 + 1040) += *(_DWORD *)&__dst[16];
  long long v260 = *(_OWORD *)&__dst[16];
  *(_OWORD *)(v8 + 864) = *(_OWORD *)__dst;
  *(_OWORD *)(v8 + 880) = v260;
  *(_OWORD *)(v8 + 889) = *(_OWORD *)&__dst[25];
  long long v261 = *(_OWORD *)(v8 + 880);
  *uint64_t v509 = *(_OWORD *)(v8 + 864);
  v509[1] = v261;
  *(_OWORD *)((char *)v509 + 25) = *(_OWORD *)(v8 + 889);
  if (*v257)
  {
    uint64_t v262 = v7[9];
    if (v262) {
      long long v263 = (unsigned int *)*v257;
    }
    else {
      long long v263 = v7[78];
    }
    if (v262) {
      long long v264 = v7 + 8;
    }
    else {
      long long v264 = v7 + 78;
    }
  }
  else
  {
    long long v264 = v7 + 78;
    long long v263 = v7[78];
  }
  memcpy(*(void **)(v8 + 872), v263, v264[1]);
LABEL_457:
  uint64_t v265 = (const void **)(v7 + 13);
  if (v7[13])
  {
    if (v7[14]) {
      uint64_t v266 = v7 + 13;
    }
    else {
      uint64_t v266 = v7 + 83;
    }
    uint64_t v267 = v266[1];
    if (v267) {
      goto LABEL_462;
    }
LABEL_470:
    if (!*(unsigned char *)(v8 + 600)) {
      goto LABEL_474;
    }
LABEL_475:
    {
      {
        uint64_t v275 = v520;
        if (*(char *)(v8 + 551) < 0) {
          uint64_t v275 = (void *)*v520;
        }
        unint64_t v276 = v518;
        if (*(char *)(v8 + 599) < 0) {
          unint64_t v276 = (std::string *)v518->__r_.__value_.__r.__words[0];
        }
        uint64_t v277 = v519;
        if (*(char *)(v8 + 575) < 0) {
          uint64_t v277 = (void *)*v519;
        }
        int v278 = *(_DWORD *)(v8 + 512);
        uint64_t v279 = *(void *)(v8 + 608);
        unint64_t v280 = *(void **)(v8 + 832);
        *(_DWORD *)std::string __dst = 136447490;
        *(void *)&__dst[4] = v275;
        *(_WORD *)&__dst[12] = 2082;
        *(void *)&__dst[14] = v276;
        *(_WORD *)&__dst[22] = 2082;
        *(void *)&__dst[24] = v277;
        *(_WORD *)&__dst[32] = 1026;
        *(_DWORD *)&__dst[34] = v278;
        *(_WORD *)&__dst[38] = 2050;
        *(void *)&__dst[40] = v279;
        LOWORD(v538[0]) = 2050;
        *(void **)((char *)v538 + 2) = v280;
        _os_signpost_emit_with_name_impl(&dword_2427AD000, v274, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
      }
    }
    uint64_t v281 = *(void *)(v8 + 8);
    uint64_t v282 = v520;
    if (*(char *)(v8 + 551) < 0) {
      uint64_t v282 = (void *)*v520;
    }
    uint64_t v283 = v518;
    if (*(char *)(v8 + 599) < 0) {
      uint64_t v283 = (std::string *)v518->__r_.__value_.__r.__words[0];
    }
    char v284 = v519;
    if (*(char *)(v8 + 575) < 0) {
      char v284 = (void *)*v519;
    }
    int v285 = *(_DWORD *)(v8 + 512);
    uint64_t v286 = *(void *)(v8 + 608);
    uint64_t v287 = *(void *)(v8 + 832);
    char v288 = *(unsigned char *)(v8 + 600);
    *(void *)std::string __dst = v282;
    *(void *)&__dst[8] = v283;
    *(void *)&__dst[16] = v284;
    *(_DWORD *)&__dst[24] = v285;
    *(void *)&__dst[32] = v286;
    *(void *)&__dst[40] = v287;
    LOBYTE(v538[0]) = v288;
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v281, v8, (long long *)__dst);
  }
  else
  {
    uint64_t v267 = (uint64_t)v7[84];
    if (!v267) {
      goto LABEL_470;
    }
LABEL_462:
    AGX::Heap<true>::allocateImpl(__dst, v249, v267, (void *)(v8 + 1032));
    *(_DWORD *)(v8 + 1040) += *(_DWORD *)&__dst[16];
    long long v268 = *(_OWORD *)&__dst[16];
    *(_OWORD *)(v8 + 912) = *(_OWORD *)__dst;
    *(_OWORD *)(v8 + 928) = v268;
    *(_OWORD *)(v8 + 937) = *(_OWORD *)&__dst[25];
    long long v269 = *(_OWORD *)(v8 + 928);
    *__n128 v510 = *(_OWORD *)(v8 + 912);
    v510[1] = v269;
    *(_OWORD *)((char *)v510 + 25) = *(_OWORD *)(v8 + 937);
    if (*v265)
    {
      uint64_t v270 = v7[14];
      if (v270) {
        unint64_t v271 = (unsigned int *)*v265;
      }
      else {
        unint64_t v271 = v7[83];
      }
      if (v270) {
        unint64_t v272 = v7 + 13;
      }
      else {
        unint64_t v272 = v7 + 83;
      }
    }
    else
    {
      unint64_t v272 = v7 + 83;
      unint64_t v271 = v7[83];
    }
    memcpy(*(void **)(v8 + 920), v271, v272[1]);
    uint64_t v273 = *(void *)(v8 + 928);
    *(_OWORD *)(v8 + 792) = *(_OWORD *)(v8 + 912);
    *(void *)(v8 + 808) = v273;
    if (*(unsigned char *)(v8 + 600)) {
      goto LABEL_475;
    }
LABEL_474:
    if (*(unsigned char *)(*(void *)(v8 + 8) + 7761)) {
      goto LABEL_475;
    }
  }
  int v289 = *(_DWORD *)(v5 + 124);
  int v290 = *(_DWORD *)(v5 + 132);
  int v291 = *(_DWORD *)(v5 + 140);
  if (*(unsigned char *)(v5 + 208)) {
    int v292 = *(_DWORD *)(v5 + 144);
  }
  else {
    int v292 = 0;
  }
  if (*(_OWORD *)(v5 + 176) == 0) {
    int v293 = 0;
  }
  else {
    int v293 = *(_DWORD *)(v5 + 144);
  }
  int v294 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
  unint64_t v295 = v292 + *(_DWORD *)(v5 + 148) + v293 + *(_DWORD *)(v5 + 152) + ((v289 + v290 + v291 - v294 + 3) & 0xFFFFFFFC);
  uint64_t v296 = *(void *)(v8 + 48);
  unint64_t v297 = (*(void *)(v8 + 56) - v296) >> 2;
  if (v295 <= v297)
  {
    uint64_t v298 = v531;
    if (v295 < v297) {
      *(void *)(v8 + 56) = v296 + 4 * v295;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v535, v295 - v297);
    int v289 = *(_DWORD *)(v5 + 124);
    int v290 = *(_DWORD *)(v5 + 132);
    int v291 = *(_DWORD *)(v5 + 140);
    int v294 = *(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128) + *(_DWORD *)(v5 + 136);
    uint64_t v298 = v531;
  }
  *(_DWORD *)(v8 + 412) = v289 + v290 + v291 - v294;
  uint64_t v299 = *v298;
  uint64_t v300 = *(unsigned __int16 *)((char *)v298 - v299 + 16);
  uint64_t v301 = *(unsigned int *)((char *)v298 + v300);
  uint64_t v302 = *(unsigned int *)((char *)v298 + v300 + v301);
  if (v302)
  {
    uint64_t v303 = 4 * v302;
    uint64_t v304 = v300 + v301;
    while (1)
    {
      uint64_t v306 = *(unsigned int *)((char *)v298 + v304 + 4);
      uint64_t v307 = (char *)v298 + v304 + v306;
      uint64_t v308 = v306 - *((int *)v307 + 1);
      int v309 = (char *)v298 + v304 + v308;
      unsigned int v310 = *((unsigned __int16 *)v309 + 2);
      if (v310 < 7) {
        break;
      }
      uint64_t v311 = *((unsigned __int16 *)v309 + 5);
      if (!v311 || (*(int *)((char *)v298 + v304 + v306 + v311 + 4) & 0x80000000) == 0)
      {
        if (v310 <= 8)
        {
          unsigned int v315 = -*(_DWORD *)(v5 + 120);
        }
        else
        {
          if (*(_WORD *)((char *)v298 + v304 + v308 + 12)) {
            int v312 = *(int *)((char *)v298 + v304 + v306 + *(unsigned __int16 *)((char *)v298 + v304 + v308 + 12) + 4);
          }
          else {
            int v312 = 0;
          }
          unsigned int v315 = 4 * v312 - *(_DWORD *)(v5 + 120);
        }
LABEL_518:
        uint64_t v316 = *(unsigned __int16 *)((char *)v298 + v304 + v308 + 8);
        if (*(_WORD *)((char *)v298 + v304 + v308 + 8)) {
          LODWORD(v316) = *((char *)v298 + v304 + v306 + v316 + 4);
        }
        if (v310 >= 7 && (uint64_t v317 = *(unsigned __int16 *)((char *)v298 + v304 + v308 + 10)) != 0)
        {
          int v313 = *(int *)((char *)v298 + v304 + v306 + v317 + 4);
          if (v316 != 6)
          {
            int v314 = 0;
            goto LABEL_527;
          }
LABEL_525:
          int v314 = 128;
        }
        else
        {
          int v313 = 0;
          if (v316 == 6) {
            goto LABEL_525;
          }
          int v314 = 0;
        }
LABEL_527:
        int v318 = (v313 & 0xFFFFF) + v314;
        if (v318 == 1) {
          int v319 = 8;
        }
        else {
          int v319 = 4;
        }
        if (v318) {
          int v320 = v319;
        }
        else {
          int v320 = 0;
        }
        std::vector<unsigned int>::pointer begin = v535->__begin_;
        v535->__begin_[v315] = v320;
        begin[v315 + 1] = v320 | 1;
        begin[v315 + 2] = v320 | 2;
        begin[v315 + 3] = v320 | 3;
        uint64_t v322 = v306 - *((int *)v307 + 1);
        uint64_t v323 = (char *)v298 + v304 + v322;
        if (*((unsigned __int16 *)v323 + 2) >= 0xBu)
        {
          uint64_t v324 = *((unsigned __int16 *)v323 + 7);
          if (v324)
          {
            if (*((unsigned char *)v298 + v304 + v306 + v324 + 4))
            {
              uint64_t v325 = *(unsigned __int16 *)((char *)v298 + v304 + v322 + 10);
              if (v325) {
                int v305 = *(int *)((char *)v298 + v304 + v306 + v325 + 4);
              }
              else {
                int v305 = 0;
              }
              *(void *)(v8 + 480 + 8 * ((v305 & 0xFFFC0) != 0)) |= 1 << v305;
            }
          }
        }
      }
      v304 += 4;
      v303 -= 4;
      if (!v303)
      {
        uint64_t v299 = *v298;
        goto LABEL_539;
      }
    }
    int v313 = 0;
    int v314 = 0;
    unsigned int v315 = -*(_DWORD *)(v5 + 120);
    if (v310 >= 5) {
      goto LABEL_518;
    }
    goto LABEL_527;
  }
LABEL_539:
  uint64_t v326 = -v299;
  uint64_t v327 = (char *)v298 + v326;
  if (*(unsigned char *)(v8 + 454))
  {
    uint64_t v328 = *((unsigned __int16 *)v327 + 12);
    uint64_t v329 = *(unsigned int *)((char *)v298 + v328);
    uint64_t v330 = (unsigned int *)((char *)v298 + v328 + v329);
    uint64_t v331 = *v330;
    if (v331)
    {
      unint64_t v332 = 0;
      uint64_t v333 = 4 * v331;
      uint64_t v334 = (char *)v298 + v328 + v329;
      while (1)
      {
        uint64_t v335 = v330[v332 / 4 + 1];
        uint64_t v336 = v335 - *(int *)((char *)&v330[v332 / 4 + 1] + v335);
        unsigned int v337 = &v334[v332 + v336];
        unsigned int v338 = *((unsigned __int16 *)v337 + 2);
        if (v338 >= 5)
        {
          uint64_t v339 = *((unsigned __int16 *)v337 + 4);
          if (v339)
          {
            if (v334[v332 + 4 + v335 + v339] == 93)
            {
              if (v338 < 7) {
                break;
              }
              uint64_t v340 = *(unsigned __int16 *)&v334[v332 + 10 + v336];
              if (!v340) {
                break;
              }
              int v341 = *(_DWORD *)&v334[v332 + 4 + v335 + v340];
              if ((v341 & 0x80000000) == 0 && (v341 & 0xFFF00000) != 0x400000) {
                break;
              }
            }
          }
        }
        v332 += 4;
        if (v333 == v332) {
          goto LABEL_551;
        }
      }
      *(int8x16_t *)(v8 + 480) = vorrq_s8(*(int8x16_t *)(v8 + 480), *(int8x16_t *)(v8 + 496));
    }
  }
LABEL_551:
  uint64_t v342 = *((unsigned __int16 *)v327 + 10);
  uint64_t v343 = *(unsigned int *)((char *)v298 + v342);
  uint64_t v344 = *(unsigned int *)((char *)v298 + v342 + v343);
  if (!v344) {
    goto LABEL_567;
  }
  uint64_t v345 = 4 * v344;
  uint64_t v346 = v342 + v343;
  while (2)
  {
    uint64_t v347 = *(unsigned int *)((char *)v298 + v346 + 4);
    uint64_t v348 = v347 - *(int *)((char *)v298 + v346 + v347 + 4);
    unsigned int v349 = (char *)v298 + v346 + v348;
    unsigned int v350 = *((unsigned __int16 *)v349 + 2);
    if (v350 < 7) {
      goto LABEL_560;
    }
    uint64_t v351 = *((unsigned __int16 *)v349 + 5);
    if (v351 && *(int *)((char *)v298 + v346 + v347 + v351 + 4) < 0) {
      goto LABEL_553;
    }
    if (v350 < 9 || (uint64_t v352 = *(unsigned __int16 *)((char *)v298 + v346 + v348 + 12)) == 0)
    {
LABEL_560:
      int v353 = 0;
      goto LABEL_561;
    }
    int v353 = *(int *)((char *)v298 + v346 + v347 + v352 + 4);
LABEL_561:
    int v354 = *(unsigned __int8 *)(v8 + 1144);
    if (*(unsigned char *)(v8 + 1144)) {
      int v355 = 3;
    }
    else {
      int v355 = 1;
    }
    unsigned int v356 = *(_DWORD *)(v5 + 124) + v355 * v353 - (*(_DWORD *)(v5 + 120) + *(_DWORD *)(v5 + 128));
    uint64_t v357 = *(void *)(v8 + 48);
    *(_DWORD *)(v357 + 4 * v356) = 12;
    if (v354)
    {
      *(_DWORD *)(v357 + 4 * (v356 + 1)) = -1;
      *(_DWORD *)(v357 + 4 * (v356 + 2)) = 0;
    }
LABEL_553:
    v346 += 4;
    v345 -= 4;
    if (v345) {
      continue;
    }
    break;
  }
  uint64_t v326 = -(uint64_t)*v298;
LABEL_567:
  unint64_t v528 = v8 + 464;
  unsigned int v358 = (unsigned int *)((char *)v298 + *(unsigned __int16 *)((char *)v298 + v326 + 12));
  uint64_t v359 = *v358;
  unsigned int v361 = (unsigned int *)((char *)v358 + v359 + 4);
  uint64_t v360 = *(unsigned int *)((char *)v358 + v359);
  if (v360)
  {
    unsigned int v362 = &v361[v360];
    while (1)
    {
      unsigned int v363 = (int *)((char *)v361 + *v361);
      int v364 = (unsigned __int16 *)((char *)v363 - *v363);
      unsigned int v365 = *v364;
      if (v365 < 7)
      {
        LODWORD(v366) = 0;
        goto LABEL_579;
      }
      if (!v364[3] || (*(int *)((char *)v363 + v364[3]) & 0x80000000) == 0) {
        break;
      }
LABEL_571:
      if (++v361 == v362) {
        goto LABEL_611;
      }
    }
    if (v365 < 9)
    {
      LODWORD(v366) = 0;
      goto LABEL_580;
    }
    uint64_t v366 = v364[4];
    if (v364[4])
    {
      LODWORD(v366) = *(int *)((char *)v363 + v366);
      goto LABEL_580;
    }
LABEL_579:
    if (v365 < 7)
    {
      LODWORD(v367) = 0;
    }
    else
    {
LABEL_580:
      uint64_t v367 = v364[3];
      if (v367)
      {
        LODWORD(v367) = *(int *)((char *)v363 + v367) & 0xFFFFF;
        switch(v367)
        {
          case ',':
            int v368 = 21;
            goto LABEL_588;
          case '0':
            int v368 = 23;
            goto LABEL_588;
          case '-':
            int v368 = 22;
LABEL_588:
            unsigned int v369 = ((v366 >> 1) & 0x1FFFFFFF)
                 + *(_DWORD *)(v5 + 124)
                 + *(_DWORD *)(v5 + 132)
                 - (*(_DWORD *)(v5 + 120)
                  + *(_DWORD *)(v5 + 128)
                  + *(_DWORD *)(v5 + 136));
            v535->__begin_[v369] = v368;
            uint64_t v370 = (unsigned __int16 *)((char *)v363 - *v363);
            if (*v370 >= 0xBu)
            {
              uint64_t v371 = v370[5];
              if (v371)
              {
                if (*((unsigned char *)v363 + v371)) {
                  *(void *)(v528 + 8 * (v367 > 0x3F)) |= 1 << v367;
                }
              }
            }
            if (*(unsigned char *)(v8 + 1147))
            {
              unint64_t v372 = *v533;
              if (!*v533) {
LABEL_787:
              }
                abort();
              unsigned int v373 = (2 * v369) | 1;
              while (1)
              {
                while (1)
                {
                  unsigned int v374 = *((_DWORD *)v372 + 7);
                  if (v367 >= v374) {
                    break;
                  }
                  unint64_t v372 = (uint64_t *)*v372;
                  if (!v372) {
                    goto LABEL_787;
                  }
                }
                if (v374 >= v367) {
                  break;
                }
                unint64_t v372 = (uint64_t *)v372[1];
                if (!v372) {
                  goto LABEL_787;
                }
              }
              int v375 = *((_DWORD *)v372 + 8);
              unsigned int v376 = v532;
              while (1)
              {
                unint64_t v377 = *v376;
                unsigned int v378 = v376;
                if (!*v376) {
                  break;
                }
                while (1)
                {
                  unsigned int v376 = (uint64_t **)v377;
                  unsigned int v379 = *((_DWORD *)v377 + 7);
                  if (v373 < v379) {
                    break;
                  }
                  if (v379 >= v373)
                  {
                    int8x16_t v380 = v376;
                    goto LABEL_570;
                  }
                  unint64_t v377 = v376[1];
                  if (!v377)
                  {
                    unsigned int v378 = v376 + 1;
                    goto LABEL_606;
                  }
                }
              }
LABEL_606:
              int8x16_t v380 = operator new(0x28uLL);
              v380[7] = v373;
              v380[8] = 0;
              *(void *)int8x16_t v380 = 0;
              *((void *)v380 + 1) = 0;
              *((void *)v380 + 2) = v376;
              *unsigned int v378 = (uint64_t *)v380;
              uint64_t v381 = **(void **)(v8 + 264);
              int v382 = (uint64_t *)v380;
              if (v381)
              {
                *(void *)(v8 + 264) = v381;
                int v382 = *v378;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v8 + 272), v382);
              ++*(void *)(v8 + 280);
LABEL_570:
              v380[8] = v375;
            }
            goto LABEL_571;
        }
      }
    }
    int v368 = v367 + 16;
    goto LABEL_588;
  }
LABEL_611:
  unint64_t v383 = *(void *)(v5 + 160);
  unint64_t v384 = *(void *)(v5 + 168);
  unint64_t v385 = v529;
  if (*(_OWORD *)(v5 + 160) != 0)
  {
    int v386 = *(unsigned __int8 *)(v5 + 208);
    int v387 = *(_DWORD *)(v5 + 144);
    if (!*(unsigned char *)(v5 + 208)) {
      goto LABEL_627;
    }
    if (v387)
    {
      unsigned int v388 = (*(_DWORD *)(v5 + 124)
            + *(_DWORD *)(v5 + 132)
            + *(_DWORD *)(v5 + 140)
            - (*(_DWORD *)(v5 + 120)
             + *(_DWORD *)(v5 + 128)
             + *(_DWORD *)(v5 + 136))
            + 3) & 0xFFFFFFFC;
      *(void *)std::string __dst = *(void *)(v5 + 160);
      v536.n128_u64[0] = v384;
      for (unint64_t i = v383; ; unint64_t i = *(void *)__dst)
      {
        if (i)
        {
          int v390 = __clz(__rbit64(i));
          unint64_t v391 = (__n128 *)__dst;
          int v392 = v390;
        }
        else
        {
          unint64_t i = v536.n128_u64[0];
          if (!v536.n128_u64[0])
          {
            int v387 = *(_DWORD *)(v5 + 144);
            int v386 = v387;
            goto LABEL_627;
          }
          int v390 = __clz(__rbit64(v536.n128_u64[0]));
          int v392 = v390 | 0x40;
          unint64_t v391 = &v536;
        }
        v391->n128_u64[0] = i & ~(1 << v390);
        if (v392 == 1) {
          int v393 = 8;
        }
        else {
          int v393 = 4;
        }
        if (!v392) {
          int v393 = 0;
        }
        std::vector<unsigned int>::pointer v394 = v535->__begin_;
        v535->__begin_[v388] = v393;
        v394[v388 + 1] = v393 | 1;
        v394[v388 + 2] = v393 | 2;
        v394[v388 + 3] = v393 | 3;
        v388 += 4;
      }
    }
    int v386 = 0;
LABEL_627:
    int8x16_t v395 = *(int8x16_t *)(v5 + 176);
    if (*(_OWORD *)&v395 != 0 && v387 != 0)
    {
      int v462 = ((*(_DWORD *)(v5 + 140)
             + *(_DWORD *)(v5 + 132)
             - (*(_DWORD *)(v5 + 136)
              + *(_DWORD *)(v5 + 128)
              + *(_DWORD *)(v5 + 120))
             + *(_DWORD *)(v5 + 124)
             + 3) & 0xFFFFFFFC)
           + v386;
      *(void *)std::string __dst = v383;
      v536.n128_u64[0] = v384;
      while (1)
      {
        if (v383)
        {
          uint64_t v463 = (__n128 *)__dst;
        }
        else
        {
          unint64_t v383 = v536.n128_u64[0];
          if (!v536.n128_u64[0]) {
            break;
          }
          uint64_t v463 = &v536;
        }
        v463->n128_u64[0] = v383 & (v383 - 1);
        std::vector<unsigned int>::pointer v464 = v535->__begin_;
        v535->__begin_[v462] = 4;
        v464[v462 + 1] = 5;
        v464[v462 + 2] = 6;
        v464[v462 + 3] = 7;
        v462 += 4;
        unint64_t v383 = *(void *)__dst;
      }
    }
    *(int8x16_t *)(v8 + 480) = vorrq_s8(*(int8x16_t *)(v8 + 480), v395);
  }
  if (*(_DWORD *)(v5 + 148))
  {
    int v397 = *(_DWORD *)(v5 + 144);
    if (*(unsigned char *)(v5 + 208)) {
      int v398 = *(_DWORD *)(v5 + 144);
    }
    else {
      int v398 = 0;
    }
    if (*(_OWORD *)(v5 + 176) == 0) {
      int v397 = 0;
    }
    unsigned int v399 = v398
         + v397
         + ((*(_DWORD *)(v5 + 124)
           + *(_DWORD *)(v5 + 132)
           + *(_DWORD *)(v5 + 140)
           - (*(_DWORD *)(v5 + 120)
            + *(_DWORD *)(v5 + 128)
            + *(_DWORD *)(v5 + 136))
           + 3) & 0xFFFFFFFC);
    unint64_t v401 = *(void *)(v5 + 192);
    unint64_t v400 = *(void *)(v5 + 200);
    *(void *)std::string __dst = v401;
    v536.n128_u64[0] = v400;
    while (1)
    {
      if (v401)
      {
        uint64_t v402 = (__n128 *)__dst;
      }
      else
      {
        unint64_t v401 = v536.n128_u64[0];
        if (!v536.n128_u64[0]) {
          break;
        }
        uint64_t v402 = &v536;
      }
      v402->n128_u64[0] = v401 & (v401 - 1);
      uint64_t v403 = *(void *)(v8 + 48);
      *(_DWORD *)(v403 + 4 * v399) = 12;
      if (*(unsigned char *)(v8 + 1144))
      {
        *(_DWORD *)(v403 + 4 * (v399 + 1)) = -1;
        *(_DWORD *)(v403 + 4 * (v399 + 2)) = 0;
      }
      v399 += 4;
      unint64_t v401 = *(void *)__dst;
    }
  }
  uint64_t v404 = v531;
  int v405 = *v531;
  if (*(unsigned char *)(v5 + 467))
  {
    uint64_t v406 = (unsigned __int16 *)((char *)v531 - v405);
    if (*v406 < 0x67u)
    {
      unint64_t v407 = 0;
    }
    else
    {
      unint64_t v407 = v406[51];
      if (v407) {
        unint64_t v407 = *(void *)((char *)v531 + v407);
      }
    }
    int v408 = 128 - 2 * __clz(v407);
    if (*(_DWORD *)(v8 + 208) > v408) {
      int v408 = *(_DWORD *)(v8 + 208);
    }
    *(_DWORD *)(v8 + 208) = v408;
    uint64_t v409 = (unsigned __int16 *)((char *)v531 - *v531);
    if (*v409 < 0x17u)
    {
      LODWORD(v410) = 0;
    }
    else
    {
      unint64_t v410 = v409[11];
      if (v410) {
        unint64_t v410 = ((unint64_t)*(unsigned int *)((char *)v531 + v410) + 3) >> 2;
      }
    }
    *(_DWORD *)(v8 + 200) = v410;
    *(_DWORD *)(v8 + 204) = 32;
    uint64_t v404 = v531;
    int v405 = *v531;
  }
  unsigned int v411 = (unsigned __int16 *)((char *)v404 - v405);
  if (*v411 >= 0x17u && (uint64_t v412 = v411[11]) != 0)
  {
    unint64_t v413 = ((unint64_t)*(unsigned int *)((char *)v531 + v412) + 3) >> 2;
    uint64_t v414 = (void *)(v8 + 80);
    uint64_t v415 = *(void *)(v8 + 72);
    unint64_t v416 = (*(void *)(v8 + 80) - v415) >> 2;
    if (v413 > v416)
    {
      std::vector<unsigned int>::__append(v507, v413 - v416);
      goto LABEL_666;
    }
  }
  else
  {
    unint64_t v413 = 0;
    uint64_t v414 = (void *)(v8 + 80);
    uint64_t v415 = *(void *)(v8 + 72);
    unint64_t v416 = (*(void *)(v8 + 80) - v415) >> 2;
  }
  if (v416 > v413) {
    *uint64_t v414 = v415 + 4 * v413;
  }
LABEL_666:
  if (v517 != (void *)(v5 + 216)) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v517, *(char **)(v5 + 216), *(char **)(v5 + 224), (uint64_t)(*(void *)(v5 + 224) - *(void *)(v5 + 216)) >> 2);
  }
  if (v516 != (void *)(v5 + 240)) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v516, *(char **)(v5 + 240), *(char **)(v5 + 248), (uint64_t)(*(void *)(v5 + 248) - *(void *)(v5 + 240)) >> 2);
  }
  if (v515 != (void *)(v5 + 320)) {
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v515, *(char **)(v5 + 320), *(char **)(v5 + 328), (uint64_t)(*(void *)(v5 + 328) - *(void *)(v5 + 320)) >> 1);
  }
  if (v514 != (void *)(v5 + 368)) {
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v514, *(char **)(v5 + 368), *(char **)(v5 + 376), (uint64_t)(*(void *)(v5 + 376) - *(void *)(v5 + 368)) >> 1);
  }
  *(unsigned char *)(v8 + 192) = *(unsigned char *)(v5 + 416);
  *(unsigned char *)(v8 + 456) = *(_OWORD *)(v5 + 160) != 0;
  *(unsigned char *)(v8 + 457) = *(void *)(v5 + 148) != 0;
  uint64_t v417 = *(unsigned __int16 *)((char *)v531 - *v531 + 24);
  uint64_t v418 = *(unsigned int *)((char *)v531 + v417);
  uint64_t v419 = (unsigned int *)((char *)v531 + v417 + v418);
  uint64_t v420 = *v419;
  if (v420)
  {
    unint64_t v421 = 0;
    uint64_t v422 = 4 * v420;
    unsigned int v423 = (char *)v531 + v417 + v418;
    do
    {
      uint64_t v424 = v419[v421 / 4 + 1];
      uint64_t v425 = v424 - *(int *)((char *)&v419[v421 / 4 + 1] + v424);
      unint64_t v426 = &v423[v421 + v425];
      unsigned int v427 = *((unsigned __int16 *)v426 + 2);
      if (v427 >= 5)
      {
        uint64_t v428 = *((unsigned __int16 *)v426 + 4);
        if (v428)
        {
          if (v427 >= 7 && v423[v421 + 4 + v424 + v428] == 139)
          {
            if (*(_WORD *)&v423[v421 + 10 + v425])
            {
              int v429 = *(_DWORD *)&v423[v421 + 4 + v424 + *(unsigned __int16 *)&v423[v421 + 10 + v425]];
              if (v427 >= 0xB) {
                goto LABEL_685;
              }
            }
            else
            {
              int v429 = 0;
              if (v427 >= 0xB)
              {
LABEL_685:
                uint64_t v430 = *(unsigned __int16 *)&v423[v421 + 14 + v425];
                if (v430 && v423[v421 + 4 + v424 + v430]) {
                  *(void *)(v528 + 8 * ((v429 & 0xFFFC0) != 0)) |= 1 << v429;
                }
              }
            }
          }
        }
      }
      v421 += 4;
    }
    while (v422 != v421);
  }
  uint64_t v431 = *v529;
  uint64_t v432 = -v431;
  unint64_t v433 = (char *)v529 - v431;
  unsigned int v434 = *(unsigned __int16 *)((char *)v529 - v431);
  if (v434 < 0xD)
  {
LABEL_730:
    if (v434 >= 0xB) {
      goto LABEL_731;
    }
    goto LABEL_786;
  }
  if (!*((_WORD *)v433 + 6)) {
    goto LABEL_731;
  }
  uint64_t v435 = (int *)((char *)v529
               + *((unsigned __int16 *)v433 + 6)
               + *(unsigned int *)((char *)v529 + *((unsigned __int16 *)v433 + 6)));
  unint64_t v436 = *v435;
  unint64_t v437 = *(unsigned char **)(v8 + 1072);
  if (v436 > (uint64_t)(*(void *)(v8 + 1088) - (void)v437) >> 4)
  {
    unint64_t v438 = *(unsigned char **)(v8 + 1080);
    uint64_t v439 = (char *)operator new(16 * v436);
    unint64_t v440 = &v439[(v438 - v437) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v441 = v440;
    if (v438 != v437)
    {
      unint64_t v442 = &v439[(v438 - v437) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v441 = v442 - 16;
        *((_OWORD *)v442 - 1) = *((_OWORD *)v438 - 1);
        v438 -= 16;
        v442 -= 16;
      }
      while (v438 != v437);
    }
    *(void *)(v8 + 1072) = v441;
    *(void *)(v8 + 1080) = v440;
    *(void *)(v8 + 1088) = &v439[16 * v436];
    unint64_t v385 = v529;
    if (v437) {
      operator delete(v437);
    }
  }
  unint64_t v443 = 0;
  uint64_t v444 = *v385;
  unsigned int v445 = *(unsigned __int16 *)((char *)v385 - v444);
  if (v445 < 0x41)
  {
LABEL_699:
    if (!*v435) {
      goto LABEL_742;
    }
    goto LABEL_700;
  }
  if (*(_WORD *)((char *)v385 - v444 + 64))
  {
    int v446 = (unsigned int *)((char *)v385 + *(unsigned __int16 *)((char *)v385 - v444 + 64));
    unint64_t v443 = (unsigned int *)((char *)v446 + *v446);
    goto LABEL_699;
  }
  unint64_t v443 = 0;
  if (*v435)
  {
LABEL_700:
    unint64_t v447 = 0;
    std::vector<unsigned int>::pointer v448 = v435 + 1;
    do
    {
      if (v443 && *v443) {
        uint64_t v450 = *(void *)&v443[2 * v447 + 1];
      }
      else {
        uint64_t v450 = 0;
      }
      uint64_t v451 = *(void *)&v448[2 * v447];
      unint64_t v452 = *(void **)(v8 + 1080);
      unint64_t v453 = *(void *)(v8 + 1088);
      if ((unint64_t)v452 < v453)
      {
        *unint64_t v452 = v451;
        v452[1] = v450;
        uint64_t v449 = v452 + 2;
      }
      else
      {
        int v454 = (void *)*v523;
        uint64_t v455 = ((uint64_t)v452 - *v523) >> 4;
        unint64_t v456 = v455 + 1;
        if ((unint64_t)(v455 + 1) >> 60) {
          abort();
        }
        uint64_t v457 = v453 - (void)v454;
        if (v457 >> 3 > v456) {
          unint64_t v456 = v457 >> 3;
        }
        if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v458 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v458 = v456;
        }
        if (v458)
        {
          if (v458 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v459 = (char *)operator new(16 * v458);
        }
        else
        {
          uint64_t v459 = 0;
        }
        unint64_t v460 = &v459[16 * v455];
        *(void *)unint64_t v460 = v451;
        *((void *)v460 + 1) = v450;
        uint64_t v461 = v460;
        if (v452 != v454)
        {
          do
          {
            *((_OWORD *)v461 - 1) = *((_OWORD *)v452 - 1);
            v461 -= 16;
            v452 -= 2;
          }
          while (v452 != v454);
          unint64_t v452 = (void *)*v523;
        }
        *(void *)(v8 + 1072) = v461;
        uint64_t v449 = v460 + 16;
        *(void *)(v8 + 1080) = v460 + 16;
        *(void *)(v8 + 1088) = &v459[16 * v458];
        if (v452) {
          operator delete(v452);
        }
        std::vector<unsigned int>::pointer v448 = v435 + 1;
      }
      *(void *)(v8 + 1080) = v449;
      ++v447;
      unint64_t v385 = v529;
    }
    while (v447 < *v435);
    uint64_t v465 = *v529;
    uint64_t v432 = -v465;
    unsigned int v434 = *(unsigned __int16 *)((char *)v529 - v465);
    goto LABEL_730;
  }
LABEL_742:
  uint64_t v432 = -v444;
  if (v445 < 0xB) {
    goto LABEL_786;
  }
LABEL_731:
  if (*(_WORD *)((char *)v385 + v432 + 10))
  {
    uint64_t v466 = (unsigned int *)((char *)v385 + *(unsigned __int16 *)((char *)v385 + v432 + 10));
    uint64_t v467 = (unsigned int *)((char *)v466 + *v466);
    std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v521, *v467);
    unint64_t v468 = *v467;
    uint64_t v469 = *(unsigned char **)(v8 + 1096);
    if (v468 > (uint64_t)(*(void *)(v8 + 1112) - (void)v469) >> 3)
    {
      uint64_t v470 = *(unsigned char **)(v8 + 1104);
      uint64_t v471 = (char *)operator new(8 * v468);
      uint64_t v472 = v470 - v469;
      uint64_t v473 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v474 = v473;
      if (v470 != v469)
      {
        if ((unint64_t)(v472 - 8) < 0x58)
        {
          uint64_t v474 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
          goto LABEL_748;
        }
        uint64_t v474 = &v471[(v470 - v469) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v470[-(v472 & 0xFFFFFFFFFFFFFFF8)] - v471) < 0x20) {
          goto LABEL_805;
        }
        uint64_t v475 = v472 >> 3;
        unint64_t v476 = ((unint64_t)(v472 - 8) >> 3) + 1;
        uint64_t v477 = &v471[8 * v475 - 16];
        unint64_t v478 = (long long *)(v470 - 16);
        uint64_t v479 = v476 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v480 = *v478;
          *((_OWORD *)v477 - 1) = *(v478 - 1);
          *(_OWORD *)uint64_t v477 = v480;
          v477 -= 32;
          v478 -= 2;
          v479 -= 4;
        }
        while (v479);
        uint64_t v474 = &v473[-8 * (v476 & 0x3FFFFFFFFFFFFFFCLL)];
        v470 -= 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
        if (v476 != (v476 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_805:
          do
          {
LABEL_748:
            uint64_t v481 = *((void *)v470 - 1);
            v470 -= 8;
            *((void *)v474 - 1) = v481;
            v474 -= 8;
          }
          while (v470 != v469);
        }
      }
      *(void *)(v8 + 1096) = v474;
      *(void *)(v8 + 1104) = v473;
      *(void *)(v8 + 1112) = &v471[8 * v468];
      if (v469) {
        operator delete(v469);
      }
    }
    if (*v467)
    {
      unint64_t v482 = 0;
      uint64_t v483 = v467 + 1;
      long long v534 = v467;
      do
      {
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v483[v482] + v483[v482]));
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v536, a2, (uint64_t)__dst);
        uint64_t v484 = *(__n128 **)(v8 + 1128);
        if ((unint64_t)v484 >= *(void *)(v8 + 1136))
        {
          long long v486 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v521, v536);
        }
        else
        {
          v484->n128_u64[0] = v536.n128_u64[0];
          unint64_t v485 = v536.n128_u64[1];
          v484->n128_u64[1] = v536.n128_u64[1];
          if (v485) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v485 + 8), 1uLL, memory_order_relaxed);
          }
          long long v486 = v484 + 1;
        }
        *(void *)(v8 + 1128) = v486;
        uint64_t v487 = *(unsigned int *)(v536.n128_u64[0] + 96);
        unint64_t v488 = *(char **)(v8 + 1104);
        unint64_t v489 = *(void *)(v8 + 1112);
        if ((unint64_t)v488 >= v489)
        {
          uint64_t v491 = *(char **)(v8 + 1096);
          uint64_t v492 = (v488 - v491) >> 3;
          unint64_t v493 = v492 + 1;
          if ((unint64_t)(v492 + 1) >> 61) {
            abort();
          }
          uint64_t v494 = v489 - (void)v491;
          if (v494 >> 2 > v493) {
            unint64_t v493 = v494 >> 2;
          }
          if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v495 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v495 = v493;
          }
          if (v495)
          {
            if (v495 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v496 = operator new(8 * v495);
          }
          else
          {
            uint64_t v496 = 0;
          }
          unint64_t v497 = &v496[8 * v492];
          void *v497 = v487;
          unint64_t v490 = v497 + 1;
          if (v488 != v491)
          {
            unint64_t v498 = v488 - 8 - v491;
            if (v498 < 0x58) {
              goto LABEL_806;
            }
            if ((unint64_t)(v491 - v496) < 0x20) {
              goto LABEL_806;
            }
            uint64_t v499 = (v498 >> 3) + 1;
            long long v500 = &v496[8 * v492 - 16];
            int8x16_t v501 = v488 - 16;
            uint64_t v502 = v499 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v503 = *(_OWORD *)v501;
              *(v500 - 1) = *((_OWORD *)v501 - 1);
              *long long v500 = v503;
              v500 -= 2;
              v501 -= 32;
              v502 -= 4;
            }
            while (v502);
            v497 -= v499 & 0x3FFFFFFFFFFFFFFCLL;
            v488 -= 8 * (v499 & 0x3FFFFFFFFFFFFFFCLL);
            if (v499 != (v499 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_806:
              do
              {
                uint64_t v504 = *((void *)v488 - 1);
                v488 -= 8;
                *--unint64_t v497 = v504;
              }
              while (v488 != v491);
            }
          }
          *(void *)(v8 + 1096) = v497;
          *(void *)(v8 + 1104) = v490;
          *(void *)(v8 + 1112) = &v496[8 * v495];
          if (v491) {
            operator delete(v491);
          }
          uint64_t v467 = v534;
        }
        else
        {
          *(void *)unint64_t v488 = v487;
          unint64_t v490 = v488 + 8;
        }
        *(void *)(v8 + 1104) = v490;
        unint64_t v505 = (std::__shared_weak_count *)v536.n128_u64[1];
        if (v536.n128_u64[1]
          && !atomic_fetch_add((atomic_ullong *volatile)(v536.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
          std::__shared_weak_count::__release_weak(v505);
        }
        if (v539 < 0) {
          operator delete(v538[0]);
        }
        ++v482;
      }
      while (v482 < *v467);
    }
  }
LABEL_786:
  *(unsigned char *)(v8 + 964) = 0;
  return v8;
}

void sub_242ACA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, char *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CompileStatistics *a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  uint64_t v39 = *(void ***)(v37 - 200);
  CompileStatistics::~CompileStatistics(a18);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v36 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a26);
  uint64_t v40 = *(void **)(v36 + 1096);
  if (v40)
  {
    *(void *)(v36 + 1104) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *a28;
  if (*a28)
  {
    *(void *)(v36 + 1080) = v41;
    operator delete(v41);
  }
  if (*a12 < 0)
  {
    operator delete(*a13);
    if ((*(char *)(v36 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v36 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v36 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a23);
  if (*(char *)(v36 + 575) < 0)
  {
LABEL_8:
    operator delete(*a24);
    if ((*(char *)(v36 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a36);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a10);
      uint64_t v42 = *a19;
      if (*a19)
      {
        *(void *)(v36 + 176) = v42;
        operator delete(v42);
      }
      size_t v43 = *a21;
      if (*a21)
      {
        *(void *)(v36 + 152) = v43;
        operator delete(v43);
      }
      size_t v44 = *a20;
      if (*a20)
      {
        *(void *)(v36 + 128) = v44;
        operator delete(v44);
      }
      uint64_t v45 = *a22;
      if (*a22)
      {
        *(void *)(v36 + 104) = v45;
        operator delete(v45);
      }
      uint64_t v46 = *a11;
      if (*a11)
      {
        *(void *)(v36 + 80) = v46;
        operator delete(v46);
        size_t v47 = *v39;
        if (!*v39) {
LABEL_24:
        }
          _Unwind_Resume(a1);
      }
      else
      {
        size_t v47 = *v39;
        if (!*v39) {
          goto LABEL_24;
        }
      }
      *(void *)(v36 + 56) = v47;
      operator delete(v47);
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a25);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v36 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t AGX::BlitComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::initCommon(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 224))
  {
    if (*(void *)(a2 + 232)) {
      int v3 = (unsigned int **)(a2 + 224);
    }
    else {
      int v3 = (unsigned int **)(a2 + 784);
    }
  }
  else
  {
    int v3 = (unsigned int **)(a2 + 784);
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    long long v7 = 0;
  }
  else {
    long long v7 = (int *)((char *)v5 + *v5);
  }
  unint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 5u && (uint64_t v9 = v8[2]) != 0) {
    long long v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 0x41u)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[32];
    if (v11[32]) {
      LOBYTE(v12) = *(int *)((char *)v10 + v12) != 0;
    }
  }
  *(unsigned char *)(result + 2688) = v12;
  uint64_t v13 = v11[12];
  uint64_t v14 = *(unsigned int *)((char *)v10 + v13);
  if (*(int *)((char *)v10 + v13 + v14))
  {
    unint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = (uint64_t)&v10[v15] + v13 + v14;
      uint64_t v17 = (int *)(v16 + 4 + *(unsigned int *)(v16 + 4));
      unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
      unsigned int v19 = *v18;
      if (v19 < 9)
      {
        uint64_t v21 = *(_DWORD **)(result + 72);
        unsigned int v22 = v21;
        if (v19 >= 5)
        {
          uint64_t v23 = v18[2];
          if (v23) {
            goto LABEL_32;
          }
        }
      }
      else
      {
        if (v18[4]) {
          uint64_t v20 = *(unsigned int *)((char *)v17 + v18[4]);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(_DWORD **)(result + 72);
        unsigned int v22 = &v21[v20];
        uint64_t v23 = v18[2];
        if (v23)
        {
LABEL_32:
          switch(*((unsigned char *)v17 + v23))
          {
            case 0xD:
              *unsigned int v22 = 28;
              break;
            case 0x23:
              *unsigned int v22 = 3;
              break;
            case 0x24:
              *unsigned int v22 = 4;
              break;
            case 0x25:
              *unsigned int v22 = 5;
              break;
            case 0x33:
              *(void *)unsigned int v22 = 0x1900000018;
              break;
            case 0x34:
              *(void *)unsigned int v22 = 0x1B0000001ALL;
              break;
            case 0x43:
              *unsigned int v22 = 15;
              break;
            case 0x45:
              *unsigned int v22 = 10;
              break;
            case 0x47:
              *unsigned int v22 = 17;
              break;
            case 0x4D:
              *unsigned int v22 = 16;
              break;
            case 0x56:
              *unsigned int v22 = 11;
              break;
            case 0x57:
              *unsigned int v22 = 18;
              break;
            case 0x58:
              *unsigned int v22 = 12;
              break;
            case 0x59:
              *unsigned int v22 = 19;
              break;
            case 0x5A:
              *unsigned int v22 = 20;
              break;
            case 0x5B:
              *unsigned int v22 = 21;
              break;
            case 0x65:
              *unsigned int v22 = 14;
              break;
            case 0x66:
              *unsigned int v22 = 13;
              break;
            case 0x6F:
              *unsigned int v22 = 29;
              break;
            default:
              break;
          }
        }
      }
      ++v15;
      uint64_t v13 = *(unsigned __int16 *)((char *)v10 - *v10 + 24);
      uint64_t v14 = *(unsigned int *)((char *)v10 + v13);
      if (v15 >= *(unsigned int *)((char *)v10 + v13 + v14)) {
        goto LABEL_52;
      }
    }
  }
  uint64_t v21 = *(_DWORD **)(result + 72);
LABEL_52:
  uint64_t v25 = *(void *)(result + 240);
  uint64_t v24 = *(void *)(result + 248);
  if (v24 == v25) {
    int v26 = 0;
  }
  else {
    int v26 = *(_DWORD *)(result + 200) & 1;
  }
  int v27 = *(void *)(result + 80) - v21;
  uint64_t v28 = (*(void *)(result + 56) - *(void *)(result + 48)) >> 2;
  int v29 = 8 * (v28 + ((*(void *)(result + 104) - *(void *)(result + 96)) >> 2));
  unsigned int v30 = (*(_DWORD *)(a3 + 124)
       + *(_DWORD *)(a3 + 132)
       + *(_DWORD *)(a3 + 140)
       - (*(_DWORD *)(a3 + 120)
        + *(_DWORD *)(a3 + 128)
        + *(_DWORD *)(a3 + 136))
       + 3) & 0xFFFFFFFC;
  *(_DWORD *)(result + 16) = ((*(_DWORD *)(result + 152)
                             - *(_DWORD *)(result + 144)
                             + ((v27
                               + 4
                               * (*(_DWORD *)(result + 212)
                                + *(_DWORD *)(result + 208)
                                + v26
                                + (((v24 - v25) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                           + v29;
  *(_DWORD *)(result + 20) = 8 * v30;
  int v31 = *(unsigned __int8 *)(a3 + 208);
  int v32 = *(_DWORD *)(a3 + 144);
  if (!*(unsigned char *)(a3 + 208)) {
    int v32 = 0;
  }
  *(_DWORD *)(result + 24) = 8 * (v32 + v30);
  *(_DWORD *)(result + 28) = 8 * v28;
  *(_DWORD *)(result + 32) = v29;
  *(_DWORD *)(result + 36) = v29 + (v27 & 0xFFFFFFFC);
  int v33 = *(_DWORD *)(a3 + 144);
  if (v31) {
    int v34 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v34 = 0;
  }
  uint64_t v35 = *(void *)(a3 + 176);
  if (*(_OWORD *)(a3 + 176) == 0) {
    int v33 = 0;
  }
  *(_DWORD *)(result + 40) = 8 * (v34 + v33 + v30);
  if (v35 | *(void *)(a3 + 184)) {
    int v36 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v36 = 0;
  }
  BOOL v37 = v31 == 0;
  if (v31) {
    int v38 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v38 = 0;
  }
  uint64_t v39 = *(void *)(a3 + 148);
  *(_DWORD *)(result + 44) = 8 * (v38 + v39 + v36 + v30);
  if (v37) {
    int v40 = 0;
  }
  else {
    int v40 = *(_DWORD *)(a3 + 144);
  }
  if (v35 | *(void *)(a3 + 184)) {
    int v41 = *(_DWORD *)(a3 + 144);
  }
  else {
    int v41 = 0;
  }
  *(_DWORD *)(result + 416) = v41 + v40;
  *(void *)(result + 420) = v39;
  *(_DWORD *)(result + 2676) = 1024;
  if (*(void *)(a2 + 224))
  {
    if (*(void *)(a2 + 232)) {
      uint64_t v42 = (unsigned int **)(a2 + 224);
    }
    else {
      uint64_t v42 = (unsigned int **)(a2 + 784);
    }
  }
  else
  {
    uint64_t v42 = (unsigned int **)(a2 + 784);
  }
  size_t v43 = 0;
  if (*v42 && v42[1]) {
    size_t v43 = (int *)((char *)*v42 + **v42);
  }
  size_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 0xBu && (uint64_t v45 = v44[5]) != 0) {
    uint64_t v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
  }
  else {
    uint64_t v46 = 0;
  }
  *(_DWORD *)(result + 2680) = 3072;
  size_t v47 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v47 >= 0x3Du && (uint64_t v48 = v47[30]) != 0) {
    unsigned int v49 = (*(int *)((char *)v10 + v48) + 15) & 0xFFFFFFF0;
  }
  else {
    unsigned int v49 = 0;
  }
  *(_DWORD *)(result + 2684) = v49;
  uint64_t v50 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v50 < 9u)
  {
    LODWORD(v51) = 0;
  }
  else
  {
    uint64_t v51 = v50[4];
    if (v51) {
      LODWORD(v51) = (*(int *)((char *)v46 + v51) + 3) & 0xFFFFFFFC;
    }
  }
  *(_DWORD *)(result + 2672) = v51;
  return result;
}

void AGX::EndOfTileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::EndOfTileProgramVariant(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v7 = AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::EndOfTileProgramVariantBase(a1, a2, a3, a4, 256);
  long long v8 = *(_OWORD *)(v7 + 280);
  uint64_t v9 = *(void *)(v7 + 296);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::ProgramVariantESLState(v7 + 512, a2, a3, &__p, a4, &v8);
}

void sub_242ACB3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(v18);
  AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(v17);
  _Unwind_Resume(a1);
}

unint64_t AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::EndOfTileProgramVariantBase(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 60) = a5;
  *(_DWORD *)(a1 + 64) = 53;
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v9 = (void *)(a1 + 120);
  *(void *)(a1 + 112) = add;
  *(_OWORD *)(a1 + 184) = 0u;
  long long v10 = (_OWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  uint64_t v11 = (_OWORD *)(a1 + 328);
  *(unsigned char *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 421) = 0;
  *(void *)(a1 + 500) = 0;
  *(_OWORD *)(a1 + 471) = 0u;
  *(_OWORD *)(a1 + 487) = 0u;
  *(_OWORD *)(a1 + 455) = 0u;
  if (a3[28])
  {
    if (a3[29]) {
      uint64_t v12 = (unsigned int **)(a3 + 28);
    }
    else {
      uint64_t v12 = (unsigned int **)(a3 + 98);
    }
  }
  else
  {
    uint64_t v12 = (unsigned int **)(a3 + 98);
  }
  uint64_t v13 = 0;
  if (*v12 && v12[1]) {
    uint64_t v13 = (int *)((char *)*v12 + **v12);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0)
  {
    uint64_t v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
    if (!a3[58])
    {
LABEL_12:
      unint64_t v17 = (unsigned int **)(a3 + 128);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!a3[58]) {
      goto LABEL_12;
    }
  }
  if (a3[59]) {
    unint64_t v17 = (unsigned int **)(a3 + 58);
  }
  else {
    unint64_t v17 = (unsigned int **)(a3 + 128);
  }
LABEL_17:
  unsigned int v18 = 0;
  if (*v17 && v17[1]) {
    unsigned int v18 = (int *)((char *)*v17 + **v17);
  }
  unsigned int v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
    uint64_t v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    uint64_t v21 = 0;
  }
  unsigned int v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 < 7u)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    uint64_t v23 = v22[3];
    if (v23) {
      LODWORD(v23) = *(int *)((char *)v21 + v23);
    }
  }
  uint64_t v24 = (uint64_t *)(a1 + 32);
  *(_DWORD *)(a1 + 108) = v23;
  uint64_t v25 = (unsigned __int16 *)((char *)v21 - *v21);
  BOOL v183 = (_OWORD *)(a1 + 232);
  if (*v25 >= 0x13u && (uint64_t v26 = v25[9]) != 0) {
    int v27 = (char *)v21 + v26 + *(unsigned int *)((char *)v21 + v26) + 4;
  }
  else {
    int v27 = "";
  }
  int v184 = (void *)(a1 + 144);
  uint64_t v185 = (std::vector<unsigned int> *)(a1 + 8);
  MEMORY[0x24566EB20](a1 + 120, v27);
  uint64_t v28 = (unsigned __int16 *)((char *)v21 - *v21);
  int v29 = "";
  if (*v28 >= 9u)
  {
    uint64_t v30 = v28[4];
    if (v30) {
      int v29 = (char *)v21 + v30 + *(unsigned int *)((char *)v21 + v30) + 4;
    }
  }
  MEMORY[0x24566EB20](v9 + 3, v29);
  int v31 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v31 < 0x11u)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[8];
    if (v32) {
      LODWORD(v32) = *(int *)((char *)v21 + v32);
    }
  }
  *(_DWORD *)(a1 + 424) = v32;
  int v33 = (const void **)(a3 + 3);
  if (a3[3])
  {
    if (a3[4]) {
      int v34 = a3 + 3;
    }
    else {
      int v34 = a3 + 73;
    }
  }
  else
  {
    int v34 = a3 + 73;
  }
  AGX::Heap<true>::allocateImpl(buf, a2 + 5352, v34[1], (void *)(a1 + 480));
  *(_DWORD *)(a1 + 504) += *(_DWORD *)&buf[16];
  long long v35 = *(_OWORD *)&buf[16];
  *uint64_t v11 = *(_OWORD *)buf;
  v11[1] = v35;
  *(_OWORD *)((char *)v11 + 25) = *(_OWORD *)&buf[25];
  int v36 = *(void **)(a1 + 336);
  *(void *)(a1 + 168) = *(void *)(a1 + 328);
  *(void *)(a1 + 176) = a2 + 5352;
  long long v37 = v11[1];
  *long long v10 = *v11;
  v10[1] = v37;
  *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
  if (*v33)
  {
    uint64_t v38 = a3[4];
    if (v38) {
      uint64_t v39 = *v33;
    }
    else {
      uint64_t v39 = (const void *)a3[73];
    }
    if (v38) {
      int v40 = a3 + 3;
    }
    else {
      int v40 = a3 + 73;
    }
  }
  else
  {
    int v40 = a3 + 73;
    uint64_t v39 = (const void *)a3[73];
  }
  memcpy(v36, v39, v40[1]);
  uint64_t v41 = *(void *)(a1 + 336);
  uint64_t v42 = *(void *)(a1 + 344);
  *(void *)(a1 + 280) = *(void *)(a1 + 168);
  *(void *)(a1 + 288) = v41;
  *(void *)(a1 + 296) = v42;
  size_t v43 = (const void **)(a3 + 8);
  if (a3[8])
  {
    if (a3[9]) {
      size_t v44 = a3 + 8;
    }
    else {
      size_t v44 = a3 + 78;
    }
    uint64_t v45 = v44[1];
    if (!v45) {
      goto LABEL_68;
    }
LABEL_59:
    AGX::Heap<true>::allocateImpl(buf, a2 + 5184, v45, (void *)(a1 + 488));
    *(_DWORD *)(a1 + 504) += *(_DWORD *)&buf[16];
    long long v46 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 376) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 392) = v46;
    *(_OWORD *)(a1 + 401) = *(_OWORD *)&buf[25];
    long long v47 = *(_OWORD *)(a1 + 392);
    *BOOL v183 = *(_OWORD *)(a1 + 376);
    v183[1] = v47;
    *(_OWORD *)((char *)v183 + 25) = *(_OWORD *)(a1 + 401);
    if (*v43)
    {
      uint64_t v48 = a3[9];
      if (v48) {
        unsigned int v49 = *v43;
      }
      else {
        unsigned int v49 = (const void *)a3[78];
      }
      if (v48) {
        uint64_t v50 = a3 + 8;
      }
      else {
        uint64_t v50 = a3 + 78;
      }
    }
    else
    {
      uint64_t v50 = a3 + 78;
      unsigned int v49 = (const void *)a3[78];
    }
    memcpy(*(void **)(a1 + 384), v49, v50[1]);
    goto LABEL_68;
  }
  uint64_t v45 = a3[79];
  if (v45) {
    goto LABEL_59;
  }
LABEL_68:
  uint64_t v51 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 7761))
  {
    {
      {
        unsigned int v53 = v9;
        if (*(char *)(a1 + 143) < 0) {
          unsigned int v53 = (void *)*v9;
        }
        uint64_t v54 = v9 + 3;
        if (*(char *)(a1 + 167) < 0) {
          uint64_t v54 = (void *)*v184;
        }
        int v55 = *(_DWORD *)(a1 + 108);
        uint64_t v56 = *(void *)(a1 + 168);
        uint64_t v57 = *(void *)(a1 + 344);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = v53;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2082;
        *(void *)&buf[24] = v54;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v55;
        *(_WORD *)&buf[38] = 2050;
        *(void *)&buf[40] = v56;
        __int16 v189 = 2050;
        uint64_t v190 = v57;
        _os_signpost_emit_with_name_impl(&dword_2427AD000, v52, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", buf, 0x3Au);
        uint64_t v51 = *(void *)a1;
      }
    }
    uint64_t v58 = v9;
    if (*(char *)(a1 + 143) < 0) {
      uint64_t v58 = (void *)*v9;
    }
    unint64_t v59 = v9 + 3;
    if (*(char *)(a1 + 167) < 0) {
      unint64_t v59 = (void *)*v184;
    }
    int v60 = *(_DWORD *)(a1 + 108);
    uint64_t v61 = *(void *)(a1 + 168);
    uint64_t v62 = *(void *)(a1 + 344);
    *(void *)buf = v58;
    *(void *)&buf[8] = "";
    *(void *)&buf[16] = v59;
    *(_DWORD *)&buf[24] = v60;
    *(void *)&buf[32] = v61;
    *(void *)&buf[40] = v62;
    LOBYTE(v189) = 0;
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v51, a1, (long long *)buf);
  }
  size_t v63 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v63 < 0x17u)
  {
    LODWORD(v64) = 0;
    unint64_t v65 = v185;
  }
  else
  {
    uint64_t v64 = v63[11];
    unint64_t v65 = v185;
    if (v64) {
      LODWORD(v64) = *(int *)((char *)v16 + v64);
    }
  }
  unint64_t v66 = ((unint64_t)v64 + 3) >> 2;
  uint64_t v67 = *(void *)(a1 + 8);
  unint64_t v68 = (*(void *)(a1 + 16) - v67) >> 2;
  if (v66 <= v68)
  {
    if (v66 < v68) {
      *(void *)(a1 + 16) = v67 + 4 * v66;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v65, v66 - v68);
  }
  if (*(unsigned char *)(a4 + 208)) {
    int v69 = *(_DWORD *)(a4 + 144);
  }
  else {
    int v69 = 0;
  }
  if (*(_OWORD *)(a4 + 176) == 0) {
    int v70 = 0;
  }
  else {
    int v70 = *(_DWORD *)(a4 + 144);
  }
  unint64_t v71 = v69
      + *(_DWORD *)(a4 + 148)
      + v70
      + *(_DWORD *)(a4 + 152)
      + ((*(_DWORD *)(a4 + 124)
        + *(_DWORD *)(a4 + 132)
        + *(_DWORD *)(a4 + 140)
        - (*(_DWORD *)(a4 + 120)
         + *(_DWORD *)(a4 + 128)
         + *(_DWORD *)(a4 + 136))
        + 3) & 0xFFFFFFFC);
  uint64_t v72 = *(void *)(a1 + 32);
  unint64_t v73 = (*(void *)(a1 + 40) - v72) >> 2;
  if (v71 <= v73)
  {
    if (v71 < v73) {
      *(void *)(a1 + 40) = v72 + 4 * v71;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v9 - 11), v71 - v73);
  }
  uint64_t v74 = *(unsigned __int16 *)((char *)v16 - *v16 + 12);
  uint64_t v75 = *(unsigned int *)((char *)v16 + v74);
  uint64_t v76 = (unsigned int *)((char *)v16 + v74 + v75);
  uint64_t v77 = *v76;
  if (v77)
  {
    unint64_t v78 = 0;
    uint64_t v79 = 4 * v77;
    uint64_t v80 = (char *)v16 + v74 + v75;
    do
    {
      uint64_t v82 = v76[v78 / 4 + 1];
      uint64_t v83 = v82 - *(int *)((char *)&v76[v78 / 4 + 1] + v82);
      unint64_t v84 = &v80[v78 + v83];
      unsigned int v85 = *((unsigned __int16 *)v84 + 2);
      if (v85 < 7) {
        goto LABEL_102;
      }
      uint64_t v86 = *((unsigned __int16 *)v84 + 5);
      if (v86 && (*(_DWORD *)&v80[v78 + 4 + v82 + v86] & 0x80000000) != 0) {
        goto LABEL_104;
      }
      if (v85 >= 9 && (uint64_t v87 = *(unsigned __int16 *)&v80[v78 + 12 + v83]) != 0) {
        unsigned int v81 = *(_DWORD *)&v80[v78 + 4 + v82 + v87];
      }
      else {
LABEL_102:
      }
        unsigned int v81 = 0;
      *(_DWORD *)(*(void *)(a1 + 32)
                + 4
                * (((v81 >> 1) & 0x1FFFFFFF)
                 + *(_DWORD *)(a4 + 124)
                 + *(_DWORD *)(a4 + 132)
                 - (*(_DWORD *)(a4 + 120)
                  + *(_DWORD *)(a4 + 128)
                  + *(_DWORD *)(a4 + 136)))) = *(_DWORD *)(a1 + 64);
LABEL_104:
      v78 += 4;
    }
    while (v79 != v78);
  }
  if (*(_OWORD *)(a4 + 176) != 0)
  {
    int v88 = *(_DWORD *)(a4 + 144);
    if (v88)
    {
      unint64_t v89 = *(void *)(a4 + 160);
      unint64_t v187 = *(void *)(a4 + 168);
      *(void *)buf = v89;
      if (!*(unsigned char *)(a4 + 208)) {
        int v88 = 0;
      }
      for (unsigned int i = v88
              + ((*(_DWORD *)(a4 + 124)
                + *(_DWORD *)(a4 + 132)
                + *(_DWORD *)(a4 + 140)
                - (*(_DWORD *)(a4 + 120)
                 + *(_DWORD *)(a4 + 128)
                 + *(_DWORD *)(a4 + 136))
                + 3) & 0xFFFFFFFC); ; i += 4)
      {
        if (v89)
        {
          int v91 = __clz(__rbit64(v89));
          uint64_t v92 = (unint64_t *)buf;
          int v93 = v91;
        }
        else
        {
          unint64_t v89 = v187;
          if (!v187) {
            break;
          }
          int v91 = __clz(__rbit64(v187));
          int v93 = v91 | 0x40;
          uint64_t v92 = &v187;
        }
        *uint64_t v92 = v89 & ~(1 << v91);
        unsigned int v94 = (32 * v93 + 1032) >> 3;
        uint64_t v95 = *v24;
        *(_DWORD *)(*v24 + 4 * i) = v94;
        *(_DWORD *)(v95 + 4 * (i + 1)) = v94 + 1;
        *(_DWORD *)(v95 + 4 * (i + 2)) = v94 | 2;
        *(_DWORD *)(v95 + 4 * (i + 3)) = v94 + 3;
        unint64_t v89 = *(void *)buf;
      }
    }
  }
  uint64_t v96 = *v16;
  uint64_t v97 = *(unsigned __int16 *)((char *)v16 - v96 + 24);
  uint64_t v98 = *(unsigned int *)((char *)v16 + v97);
  if (!*(int *)((char *)v16 + v97 + v98))
  {
    uint64_t v101 = -v96;
    goto LABEL_200;
  }
  uint64_t v99 = 0;
  unint64_t v100 = 0;
  do
  {
    uint64_t v106 = v97;
    uint64_t v107 = v97 + v98;
    uint64_t v108 = *(unsigned int *)((char *)&v16[v99 + 1] + v107);
    uint64_t v109 = v107 + v108;
    uint64_t v110 = *(int *)((char *)&v16[v99 + 1] + v109);
    uint64_t v111 = (char *)&v16[v99] + v109 - v110;
    unsigned int v112 = *((unsigned __int16 *)v111 + 2);
    if (v112 < 9)
    {
      if (v112 < 5) {
        goto LABEL_127;
      }
      uint64_t begin = (uint64_t)v65->__begin_;
    }
    else
    {
      uint64_t v113 = *((unsigned __int16 *)v111 + 6);
      if (v113) {
        uint64_t v113 = *(unsigned int *)((char *)v16 + v106 + v98 + v108 + v99 * 4 + v113 + 4);
      }
      uint64_t begin = (uint64_t)&v65->__begin_[v113];
    }
    uint64_t v115 = v106 + v98 + v108;
    if (*(_WORD *)((char *)&v16[v99 + 2] + v115 - v110))
    {
      switch(*((unsigned char *)v16 + v115 + v99 * 4 + *(unsigned __int16 *)((char *)&v16[v99 + 2] + v115 - v110) + 4))
      {
        case 1:
          if (v112 >= 7
            && (uint64_t v116 = v106 + v98 + v108, (v117 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v116 - v110 + 2)) != 0))
          {
            int v118 = *(int *)((char *)v16 + v116 + v99 * 4 + v117 + 4);
          }
          else
          {
            int v118 = 0;
          }
          int v124 = v118 + 124;
          goto LABEL_197;
        case 3:
          if (v112 >= 7
            && (uint64_t v119 = v106 + v98 + v108, (v120 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v119 - v110 + 2)) != 0))
          {
            int v121 = *(int *)((char *)v16 + v119 + v99 * 4 + v120 + 4);
          }
          else
          {
            int v121 = 0;
          }
          unsigned int v146 = (32 * v121 + 1032) >> 2;
          int8x16_t v147 = (int8x16_t)vdupq_n_s32(v146);
          int8x16_t v148 = vorrq_s8(v147, (int8x16_t)xmmword_242EA8430);
          int32x4_t v149 = vaddq_s32((int32x4_t)v147, (int32x4_t)xmmword_242EA8440);
          v149.i32[0] = v148.i32[0];
          v149.i32[3] = v148.i32[3];
          *(_DWORD *)uint64_t begin = v146;
          *(int32x4_t *)(begin + 4) = v149;
          *(_DWORD *)(begin + 20) = v146 | 5;
          *(int32x2_t *)(begin + 24) = vadd_s32(*(int32x2_t *)v147.i8, (int32x2_t)0x700000006);
          break;
        case 5:
          if (v112 >= 7
            && (uint64_t v122 = v106 + v98 + v108, (v123 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v122 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v122 + v99 * 4 + v123 + 4) + 108;
          }
          else
          {
            int v124 = 108;
          }
          goto LABEL_197;
        case 0x3F:
          int v125 = *(_DWORD *)(a1 + 60);
          goto LABEL_198;
        case 0x40:
          *(void *)uint64_t begin = 0x300000002;
          break;
        case 0x63:
          if (v112 >= 7
            && (uint64_t v126 = v106 + v98 + v108, (v127 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v126 - v110 + 2)) != 0))
          {
            int v128 = *(int *)((char *)v16 + v126 + v99 * 4 + v127 + 4);
          }
          else
          {
            int v128 = 0;
          }
          unsigned int v103 = 8 * v128 + 152;
          goto LABEL_126;
        case 0x64:
          if (v112 >= 7
            && (uint64_t v129 = v106 + v98 + v108, (v130 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v129 - v110 + 2)) != 0))
          {
            int v131 = *(int *)((char *)v16 + v129 + v99 * 4 + v130 + 4);
          }
          else
          {
            int v131 = 0;
          }
          unsigned int v103 = 8 * v131 + 280;
          goto LABEL_126;
        case 0x69:
          *(void *)uint64_t begin = 0x6700000066;
          break;
        case 0x6A:
          *(_DWORD *)uint64_t begin = 104;
          break;
        case 0x6B:
          *(_DWORD *)uint64_t begin = 105;
          break;
        case 0x7A:
          *(_OWORD *)uint64_t begin = xmmword_242EA8330;
          *(_OWORD *)(begin + 16) = xmmword_242EA8340;
          *(_OWORD *)(begin + 32) = xmmword_242EA8350;
          *(_OWORD *)(begin + 48) = xmmword_242EA8360;
          break;
        case 0x7E:
          *(_OWORD *)uint64_t begin = xmmword_242EA83F0;
          *(_OWORD *)(begin + 16) = xmmword_242EA8400;
          *(_OWORD *)(begin + 32) = xmmword_242EA8410;
          *(_OWORD *)(begin + 48) = xmmword_242EA8420;
          break;
        case 0x7F:
          *(_OWORD *)uint64_t begin = xmmword_242EA8370;
          *(_OWORD *)(begin + 16) = xmmword_242EA8380;
          *(_OWORD *)(begin + 32) = xmmword_242EA8390;
          *(_OWORD *)(begin + 48) = xmmword_242EA83A0;
          break;
        case 0x80:
          *(_OWORD *)uint64_t begin = xmmword_242EA83B0;
          *(_OWORD *)(begin + 16) = xmmword_242EA83C0;
          *(_OWORD *)(begin + 32) = xmmword_242EA83D0;
          *(_OWORD *)(begin + 48) = xmmword_242EA83E0;
          break;
        case 0x81:
          *(_OWORD *)uint64_t begin = xmmword_242EA82E0;
          *(_OWORD *)(begin + 16) = xmmword_242EA82F0;
          *(_OWORD *)(begin + 32) = xmmword_242EA8300;
          *(_OWORD *)(begin + 48) = xmmword_242EA8310;
          *(_OWORD *)(begin + 64) = xmmword_242EA8320;
          break;
        case 0x84:
          if (v112 >= 7
            && (uint64_t v132 = v106 + v98 + v108, (v133 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v132 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v132 + v99 * 4 + v133 + 4) + 188;
          }
          else
          {
            int v124 = 188;
          }
          goto LABEL_197;
        case 0x85:
          if (v112 >= 7
            && (uint64_t v134 = v106 + v98 + v108, (v135 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v134 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v134 + v99 * 4 + v135 + 4) + 140;
          }
          else
          {
            int v124 = 140;
          }
          goto LABEL_197;
        case 0x86:
          if (v112 >= 7
            && (uint64_t v136 = v106 + v98 + v108, (v137 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v136 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v136 + v99 * 4 + v137 + 4) + 156;
          }
          else
          {
            int v124 = 156;
          }
          goto LABEL_197;
        case 0x87:
          if (v112 >= 7
            && (uint64_t v138 = v106 + v98 + v108, (v139 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v138 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v138 + v99 * 4 + v139 + 4) + 204;
          }
          else
          {
            int v124 = 204;
          }
          goto LABEL_197;
        case 0x88:
          if (v112 >= 7
            && (uint64_t v140 = v106 + v98 + v108, (v141 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v140 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v140 + v99 * 4 + v141 + 4) + 220;
          }
          else
          {
            int v124 = 220;
          }
          goto LABEL_197;
        case 0x89:
          if (v112 >= 7
            && (uint64_t v142 = v106 + v98 + v108, (v143 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v142 - v110 + 2)) != 0))
          {
            int v102 = *(int *)((char *)v16 + v142 + v99 * 4 + v143 + 4);
          }
          else
          {
            int v102 = 0;
          }
          unsigned int v103 = 8 * v102 + 24;
LABEL_126:
          unsigned int v104 = v103 >> 2;
          *(_DWORD *)uint64_t begin = v104;
          *(_DWORD *)(begin + 4) = v104 | 1;
          break;
        case 0x8A:
          if (v112 >= 7
            && (uint64_t v144 = v106 + v98 + v108, (v145 = *(unsigned __int16 *)((char *)&v16[v99 + 2] + v144 - v110 + 2)) != 0))
          {
            int v124 = *(int *)((char *)v16 + v144 + v99 * 4 + v145 + 4) + 172;
          }
          else
          {
            int v124 = 172;
          }
LABEL_197:
          int v125 = v124 & 0x3FFFFFFF;
LABEL_198:
          *(_DWORD *)uint64_t begin = v125;
          break;
        default:
          break;
      }
    }
LABEL_127:
    ++v100;
    uint64_t v105 = *v16;
    uint64_t v97 = *(unsigned __int16 *)((char *)v16 - v105 + 24);
    uint64_t v98 = *(unsigned int *)((char *)v16 + v97);
    ++v99;
  }
  while (v100 < *(unsigned int *)((char *)v16 + v97 + v98));
  uint64_t v101 = -v105;
  LODWORD(v96) = *v16;
LABEL_200:
  uint64_t v150 = *(unsigned __int16 *)((char *)v16 + v101 + 16);
  uint64_t v151 = *(unsigned int *)((char *)v16 + v150);
  uint64_t v152 = *(unsigned int *)((char *)v16 + v150 + v151);
  if (v152)
  {
    uint64_t v153 = 4 * v152;
    uint64_t v154 = *v24;
    uint64_t v155 = v150 + v151;
    while (1)
    {
      uint64_t v158 = *(unsigned int *)((char *)v16 + v155 + 4);
      uint64_t v159 = v158 - *(int *)((char *)v16 + v155 + v158 + 4);
      uint64_t v160 = (char *)v16 + v155 + v159;
      unsigned int v161 = *((unsigned __int16 *)v160 + 2);
      if (v161 >= 9) {
        break;
      }
      int v156 = 0;
      unsigned int v163 = -*(_DWORD *)(a4 + 120);
      if (v161 >= 7) {
        goto LABEL_209;
      }
LABEL_203:
      unsigned int v157 = (32 * v156 + 1032) >> 3;
      *(_DWORD *)(v154 + 4 * v163) = v157;
      *(_DWORD *)(v154 + 4 * (v163 + 1)) = v157 + 1;
      *(_DWORD *)(v154 + 4 * (v163 + 2)) = v157 | 2;
      *(_DWORD *)(v154 + 4 * (v163 + 3)) = v157 + 3;
      v155 += 4;
      v153 -= 4;
      if (!v153)
      {
        LODWORD(v96) = *v16;
        goto LABEL_212;
      }
    }
    uint64_t v162 = *((unsigned __int16 *)v160 + 6);
    if (v162) {
      LODWORD(v162) = *(int *)((char *)v16 + v155 + v158 + v162 + 4);
    }
    unsigned int v163 = 4 * v162 - *(_DWORD *)(a4 + 120);
LABEL_209:
    uint64_t v164 = *(unsigned __int16 *)((char *)v16 + v155 + v159 + 10);
    if (v164) {
      int v156 = *(int *)((char *)v16 + v155 + v158 + v164 + 4);
    }
    else {
      int v156 = 0;
    }
    goto LABEL_203;
  }
LABEL_212:
  uint64_t v165 = (unsigned __int16 *)((char *)v16 - (int)v96);
  if (*v165 >= 0x21u && (uint64_t v166 = v165[16]) != 0) {
    int v167 = *(int *)((char *)v16 + v166);
  }
  else {
    int v167 = 0;
  }
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 68) = getAdditionalSpillBufferBytes(void)::extra + v167;
  unsigned int v168 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v168 < 0x57u)
  {
    LODWORD(v169) = 0;
  }
  else
  {
    uint64_t v169 = v168[43];
    if (v169) {
      LODWORD(v169) = *(int *)((char *)v16 + v169);
    }
  }
  *(_DWORD *)(a1 + 72) = v169;
  uint64_t v170 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v170 < 0x43u)
  {
    LODWORD(v171) = 0;
  }
  else
  {
    uint64_t v171 = v170[33];
    if (v171) {
      LODWORD(v171) = *(int *)((char *)v16 + v171);
    }
  }
  *(_DWORD *)(a1 + 76) = v171;
  int v172 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v172 < 0x51u)
  {
    LODWORD(v173) = 0;
  }
  else
  {
    uint64_t v173 = v172[40];
    if (v173) {
      LODWORD(v173) = *(int *)((char *)v16 + v173);
    }
  }
  *(_DWORD *)(a1 + 80) = v173;
  uint64_t v174 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v174 < 0x4Fu)
  {
    LODWORD(v175) = 0;
  }
  else
  {
    uint64_t v175 = v174[39];
    if (v175) {
      LODWORD(v175) = *(int *)((char *)v16 + v175);
    }
  }
  *(_DWORD *)(a1 + 88) = v175;
  unsigned int v176 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v176 < 0x59u)
  {
    LODWORD(v177) = 0;
  }
  else
  {
    uint64_t v177 = v176[44];
    if (v177) {
      LODWORD(v177) = *(int *)((char *)v16 + v177);
    }
  }
  *(_DWORD *)(a1 + 84) = v177;
  BOOL v178 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v178 < 5u)
  {
    LODWORD(v179) = 0;
  }
  else
  {
    uint64_t v179 = v178[2];
    if (v179) {
      LODWORD(v179) = *(int *)((char *)v16 + v179);
    }
  }
  *(_DWORD *)(a1 + 92) = v179;
  *(unsigned char *)(a1 + 56) = *(_OWORD *)(a4 + 160) != 0;
  int v180 = 2 * (*(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 32));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 8) + v180;
  if (*(unsigned char *)(a4 + 208)) {
    int v181 = *(_DWORD *)(a4 + 144);
  }
  else {
    int v181 = 0;
  }
  *(_DWORD *)(a1 + 96) = 8
                       * (v181
                        + ((*(_DWORD *)(a4 + 124)
                          + *(_DWORD *)(a4 + 132)
                          + *(_DWORD *)(a4 + 140)
                          - (*(_DWORD *)(a4 + 120)
                           + *(_DWORD *)(a4 + 128)
                           + *(_DWORD *)(a4 + 136))
                          + 3) & 0x1FFFFFFC));
  *(_DWORD *)(a1 + 104) = v180 & 0xFFFFFFF8;
  return a1;
}

void sub_242ACC538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, void **a11, void **a12)
{
  if (*a9 < 0)
  {
    operator delete(*(void **)(v12 + 432));
    if ((*(char *)(v12 + 167) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v12 + 167) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v12 + 143) < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete(*a11);
  if (*(char *)(v12 + 143) < 0)
  {
LABEL_4:
    operator delete(*v14);
    uint64_t v16 = *v13;
    if (!*v13)
    {
LABEL_10:
      unint64_t v17 = *a12;
      if (*a12)
      {
        *(void *)(v12 + 16) = v17;
        operator delete(v17);
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v12 + 40) = v16;
    operator delete(v16);
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v16 = *v13;
  if (!*v13) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

unint64_t AGX::EndOfTileProgramVariantBase<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~EndOfTileProgramVariantBase(unint64_t a1)
{
  if (*(void *)(a1 + 208))
  {
    uint64_t v2 = *(void *)(a1 + 216);
    int v3 = *(NSObject **)(v2 + 16);
    uint64_t v10 = MEMORY[0x263EF8330];
    uint64_t v11 = 3221225472;
    uint64_t v12 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v13 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v14 = v2;
    unint64_t v15 = a1 + 184;
    dispatch_sync(v3, &v10);
    *(_OWORD *)(a1 + 209) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
  }
  if (*(void *)(a1 + 256))
  {
    uint64_t v4 = *(void *)(a1 + 264);
    uint64_t v5 = *(NSObject **)(v4 + 16);
    uint64_t v10 = MEMORY[0x263EF8330];
    uint64_t v11 = 3221225472;
    uint64_t v12 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    uint64_t v13 = &__block_descriptor_48_e5_v8__0l;
    uint64_t v14 = v4;
    unint64_t v15 = a1 + 232;
    dispatch_sync(v5, &v10);
    *(_OWORD *)(a1 + 257) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
  }
  uint64_t v6 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 7761))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 7952));
    std::__hash_table<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,AGX::FunctionCompiledEventInfo>>>::__erase_unique<unsigned long>((uint64_t *)(v6 + 7960), a1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 7952));
  }
  if (*(char *)(a1 + 455) < 0)
  {
    operator delete(*(void **)(a1 + 432));
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(a1 + 143) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_10:
    unint64_t v7 = *(void **)(a1 + 32);
    if (!v7) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 120));
  unint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
LABEL_11:
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
LABEL_12:
  long long v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(void *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void AGX::ClearVisibilityVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::ClearVisibilityVertexProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a1;
  uint64_t v513 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F853088;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v506 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v491 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  unint64_t v490 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v7;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v7;
  *(_OWORD *)(a1 + 376) = v7;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  uint64_t v494 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  unint64_t v505 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (*(void *)(a3 + 224))
  {
    long long v8 = (unsigned int **)(a3 + 784);
    if (*(void *)(a3 + 232)) {
      long long v8 = (unsigned int **)(a3 + 224);
    }
  }
  else
  {
    long long v8 = (unsigned int **)(a3 + 784);
  }
  uint64_t v9 = 0;
  if (*v8 && v8[1]) {
    uint64_t v9 = (int *)((char *)*v8 + **v8);
  }
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0)
  {
    uint64_t v499 = (int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
    if (!*(void *)(a3 + 464))
    {
LABEL_12:
      uint64_t v12 = (unsigned int **)(a3 + 1024);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v499 = 0;
    if (!*(void *)(a3 + 464)) {
      goto LABEL_12;
    }
  }
  if (*(void *)(a3 + 472)) {
    uint64_t v12 = (unsigned int **)(a3 + 464);
  }
  else {
    uint64_t v12 = (unsigned int **)(a3 + 1024);
  }
LABEL_17:
  uint64_t v13 = 0;
  if (*v12 && v12[1]) {
    uint64_t v13 = (int *)((char *)*v12 + **v12);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    uint64_t v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (v18 < 0x25)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v17[18];
    if (v17[18]) {
      LOBYTE(v19) = *((unsigned char *)v16 + v19) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v19;
  uint64_t v20 = (unsigned __int16 *)((char *)v499 - *v499);
  if (*v20 < 0x55u || (uint64_t v21 = v20[42]) == 0 || !*((unsigned char *)v499 + v21))
  {
LABEL_55:
    uint64_t v32 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v32 < 7u)
    {
      LODWORD(v33) = 0;
    }
    else
    {
      uint64_t v33 = v32[3];
      if (v33) {
        LODWORD(v33) = *(int *)((char *)v16 + v33);
      }
    }
    unint64_t v488 = (void *)(a1 + 168);
    unint64_t v489 = (void *)(a1 + 120);
    uint64_t v496 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v33;
    int v34 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v34 >= 0x13u && (uint64_t v35 = v34[9]) != 0) {
      int v36 = (char *)v16 + v35 + *(unsigned int *)((char *)v16 + v35) + 4;
    }
    else {
      int v36 = "";
    }
    uint64_t v492 = (std::string *)(a1 + 576);
    unint64_t v493 = (unint64_t *)(a1 + 552);
    uint64_t v487 = (void **)(a1 + 968);
    unint64_t v497 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v494, v36);
    long long v37 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
      uint64_t v39 = (char *)v16 + v38 + *(unsigned int *)((char *)v16 + v38) + 4;
    }
    else {
      uint64_t v39 = "";
    }
    MEMORY[0x24566EB20](v493, v39);
    int v40 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v40 < 0x29u)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      uint64_t v41 = v40[20];
      if (v41) {
        LOBYTE(v41) = *((unsigned char *)v16 + v41) != 0;
      }
    }
    *(unsigned char *)(v6 + 600) = v41;
    std::string::operator=(v492, &__str);
    uint64_t v42 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v42 < 5u || !v42[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_90:
      uint64_t v507 = a4;
      long long v503 = (void *)a3;
      unint64_t v498 = v16;
      if (*(void *)(a3 + 344))
      {
        unsigned int v49 = (unsigned int **)(a3 + 344);
        if (!*(void *)(a3 + 352)) {
          unsigned int v49 = (unsigned int **)(a3 + 904);
        }
      }
      else
      {
        unsigned int v49 = (unsigned int **)(a3 + 904);
      }
      uint64_t v50 = v499;
      if (!*v49 || !v49[1])
      {
LABEL_143:
        if (v503[68])
        {
          uint64_t v86 = (unsigned int **)(v503 + 68);
          if (!v503[69]) {
            uint64_t v86 = (unsigned int **)(v503 + 138);
          }
        }
        else
        {
          uint64_t v86 = (unsigned int **)(v503 + 138);
        }
        int v88 = *v86;
        uint64_t v87 = v86[1];
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        uint64_t v90 = v507;
        if (v89
          || (int v91 = (int *)((char *)v88 + *v88), v92 = (unsigned __int16 *)((char *)v91 - *v91), *v92 < 5u)
          || (uint64_t v93 = v92[2]) == 0)
        {
          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = *(void *)((char *)v91 + v93);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(v6 + 1184) = (float)(v94
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        uint64_t v95 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v95 < 5u)
        {
          LODWORD(v96) = 0;
        }
        else
        {
          uint64_t v96 = v95[2];
          if (v96) {
            LODWORD(v96) = *(int *)((char *)v50 + v96);
          }
        }
        *(_DWORD *)(v6 + 1176) = v96;
        uint64_t v97 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v97 < 0x2Du)
        {
          LODWORD(v98) = 0;
        }
        else
        {
          uint64_t v98 = v97[22];
          if (v98) {
            LODWORD(v98) = *(int *)((char *)v50 + v98);
          }
        }
        *(_DWORD *)(v6 + 1180) = v98;
        uint64_t v99 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v99 < 0x35u)
        {
          LODWORD(v100) = 0;
        }
        else
        {
          uint64_t v100 = v99[26];
          if (v100) {
            LODWORD(v100) = *(int *)((char *)v50 + v100);
          }
        }
        *(_DWORD *)(v6 + 1220) = v100;
        uint64_t v101 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v101 < 0x43u)
        {
          LODWORD(v102) = 0;
        }
        else
        {
          uint64_t v102 = v101[33];
          if (v102) {
            LODWORD(v102) = *(int *)((char *)v50 + v102);
          }
        }
        *(_DWORD *)(v6 + 1256) = v102;
        if (v503[38])
        {
          unsigned int v103 = (unsigned int **)(v503 + 38);
          if (!v503[39]) {
            unsigned int v103 = (unsigned int **)(v503 + 108);
          }
          unsigned int v104 = *v103;
          if (!*v103)
          {
LABEL_258:
            if (v503[53])
            {
              uint64_t v145 = v503[54];
              if (v145) {
                uint64_t v146 = v503[53];
              }
              else {
                uint64_t v146 = v503[123];
              }
              if (v145) {
                int8x16_t v147 = v503 + 53;
              }
              else {
                int8x16_t v147 = v503 + 123;
              }
            }
            else
            {
              int8x16_t v147 = v503 + 123;
              uint64_t v146 = v503[123];
            }
            MEMORY[0x24566EB30](v6 + 1320, v146, v147[1]);
            std::string::push_back((std::string *)(v6 + 1320), 0);
            uint64_t v148 = *v50;
            int32x4_t v149 = (char *)v50 - v148;
            unsigned int v150 = *(unsigned __int16 *)((char *)v50 - v148);
            if (v150 < 0x39) {
              goto LABEL_284;
            }
            uint64_t v151 = -v148;
            uint64_t v152 = *((unsigned __int16 *)v149 + 28);
            if (v152)
            {
              uint64_t v153 = (int *)((char *)v50 + v152 + *(unsigned int *)((char *)v50 + v152));
              if (*v153)
              {
                *(unsigned char *)(v6 + 1064) = 1;
                uint64_t v154 = (_DWORD *)((char *)v153 + v153[1] + 4);
                uint64_t v155 = (unsigned __int16 *)((char *)v154 - *v154);
                if (*v155 >= 9u && (uint64_t v156 = v155[4]) != 0) {
                  int v157 = *(int *)((char *)v154 + v156);
                }
                else {
                  int v157 = 0;
                }
                *(_DWORD *)(v6 + 1264) = v157;
                *(unsigned char *)(v6 + 1268) = 1;
                uint64_t v158 = *v50;
                uint64_t v151 = -v158;
                unsigned int v150 = *(unsigned __int16 *)((char *)v50 - v158);
              }
            }
            if (v150 < 0x3B) {
              goto LABEL_284;
            }
            uint64_t v159 = (char *)v50 + v151;
            if (*((_WORD *)v159 + 29))
            {
              uint64_t v160 = (unsigned int *)((char *)v50
                                    + *((unsigned __int16 *)v159 + 29)
                                    + *(unsigned int *)((char *)v50 + *((unsigned __int16 *)v159 + 29)));
              uint64_t v161 = *v160;
              if (v161)
              {
                uint64_t v162 = v160 + 1;
                do
                {
                  unsigned int v164 = *v162++;
                  unsigned int v163 = v164;
                  if (!(v164 >> 20)) {
                    *(void *)(v6 + 1048 + 8 * (v163 > 0x3F)) |= 1 << v163;
                  }
                  --v161;
                }
                while (v161);
              }
            }
            if (v150 < 0x57)
            {
LABEL_284:
              LODWORD(v165) = 0;
            }
            else
            {
              uint64_t v165 = *((unsigned __int16 *)v159 + 43);
              if (*((_WORD *)v159 + 43)) {
                LODWORD(v165) = *(int *)((char *)v50 + v165);
              }
            }
            *(_DWORD *)(v6 + 400) = v165;
            uint64_t v166 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v166 >= 0x21u && (uint64_t v167 = v166[16]) != 0) {
              int v168 = *(int *)((char *)v50 + v167);
            }
            else {
              int v168 = 0;
            }
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(v6 + 404) = getAdditionalSpillBufferBytes(void)::extra + v168;
            uint64_t v169 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v169 < 0x59u)
            {
              LODWORD(v170) = 0;
            }
            else
            {
              uint64_t v170 = v169[44];
              if (v170) {
                LODWORD(v170) = *(int *)((char *)v50 + v170);
              }
            }
            *(_DWORD *)(v6 + 432) = v170;
            uint64_t v171 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v171 < 0x51u)
            {
              LODWORD(v172) = 0;
            }
            else
            {
              uint64_t v172 = v171[40];
              if (v172) {
                LODWORD(v172) = *(int *)((char *)v50 + v172);
              }
            }
            *(_DWORD *)(v6 + 436) = v172;
            uint64_t v173 = (unsigned __int16 *)((char *)v50 - *v50);
            if (*v173 < 0x4Bu)
            {
              LODWORD(v174) = 0;
            }
            else
            {
              uint64_t v174 = v173[37];
              if (v174) {
                LODWORD(v174) = *(int *)((char *)v50 + v174);
              }
            }
            *(_DWORD *)(v6 + 444) = v174;
            uint64_t v175 = (unsigned __int16 *)((char *)v50 - *v50);
            unsigned int v176 = *v175;
            if (v176 >= 0x25)
            {
              if (v175[18] && *((unsigned char *)v50 + v175[18]))
              {
                if (v176 < 0x27)
                {
                  LOBYTE(v177) = 0;
                  BOOL v178 = 1;
                  goto LABEL_321;
                }
                LODWORD(v177) = v175[19];
                BOOL v178 = 1;
                if (!v175[19])
                {
LABEL_321:
                  *(unsigned char *)(v6 + 454) = v177;
                  int v181 = (unsigned __int16 *)((char *)v498 - *v498);
                  unsigned int v182 = *v181;
                  if (v182 < 0x21)
                  {
                    uint64_t v184 = 0;
                    LODWORD(v183) = 0;
                  }
                  else
                  {
                    uint64_t v183 = v181[16];
                    if (v181[16]) {
                      LODWORD(v183) = *(int *)((char *)v498 + v183);
                    }
                    if (v182 < 0x4D)
                    {
                      uint64_t v184 = 0;
                    }
                    else
                    {
                      uint64_t v184 = v181[38];
                      if (v181[38]) {
                        uint64_t v184 = *(unsigned int *)((char *)v498 + v184);
                      }
                      if (v182 >= 0x4F)
                      {
                        uint64_t v185 = v181[39];
                        if (v185) {
                          uint64_t v185 = *(void *)((char *)v498 + v185);
                        }
LABEL_333:
                        *(void *)(v6 + 496) = v183 | (unint64_t)(v184 << 32);
                        *(void *)(v6 + 504) = v185;
                        *(unsigned char *)(v6 + 458) = v178 | v177;
                        uint64_t v186 = *v50;
                        unint64_t v187 = (char *)v50 - v186;
                        unsigned int v188 = *(unsigned __int16 *)((char *)v50 - v186);
                        if (v188 < 0x37)
                        {
                          LOBYTE(v189) = 0;
                        }
                        else
                        {
                          uint64_t v189 = *((unsigned __int16 *)v187 + 27);
                          if (*((_WORD *)v187 + 27)) {
                            LOBYTE(v189) = *((unsigned char *)v50 + v189) != 0;
                          }
                        }
                        *(unsigned char *)(v6 + 453) = v189;
                        uint64_t v190 = (unsigned __int16 *)((char *)v498 - *v498);
                        unsigned int v191 = *v190;
                        if (v191 < 0x33)
                        {
                          LOBYTE(v192) = 0;
                        }
                        else
                        {
                          uint64_t v192 = v190[25];
                          if (v190[25]) {
                            LOBYTE(v192) = *((unsigned char *)v498 + v192) != 0;
                          }
                        }
                        uint64_t v193 = -v186;
                        *(unsigned char *)(v6 + 459) = v192;
                        if (v188 < 0x3F)
                        {
                          LOBYTE(v194) = 0;
                        }
                        else
                        {
                          uint64_t v194 = *((unsigned __int16 *)v187 + 31);
                          if (v194)
                          {
                            uint64_t v195 = (unsigned int *)((char *)v50 + v194 + *(unsigned int *)((char *)v50 + v194));
                            uint64_t v194 = *v195;
                            if (v194)
                            {
                              unsigned int v196 = v195 + 1;
                              while (1)
                              {
                                unsigned int v198 = *v196++;
                                char v197 = v198;
                                if (v198 < 0x36 && ((0x3F000000000777uLL >> v197) & 1) != 0) {
                                  break;
                                }
                                if (!--v194) {
                                  goto LABEL_350;
                                }
                              }
                              LOBYTE(v194) = 1;
                            }
                          }
                        }
LABEL_350:
                        *(unsigned char *)(v6 + 461) = v194;
                        char v502 = v178;
                        if (v191 <= 0x14)
                        {
                          *(unsigned char *)(v6 + 455) = 0;
                          *(unsigned char *)(v6 + 1145) = 0;
                          *(unsigned char *)(v6 + 1147) = 0;
                          if (v188 >= 0x21) {
                            goto LABEL_385;
                          }
LABEL_388:
                          int v220 = 0;
                          goto LABEL_389;
                        }
                        uint64_t v199 = v190[10];
                        if (v190[10]) {
                          LOBYTE(v199) = *((unsigned char *)v498 + v199) != 0;
                        }
                        *(unsigned char *)(v6 + 455) = v199;
                        if (v191 < 0x25)
                        {
                          *(unsigned char *)(v6 + 1145) = 0;
                          if (v191 < 0x23) {
                            goto LABEL_383;
                          }
                        }
                        else
                        {
                          uint64_t v200 = v190[18];
                          if (v190[18]) {
                            LOBYTE(v200) = *((unsigned char *)v498 + v200) != 0;
                          }
                          *(unsigned char *)(v6 + 1145) = v200;
                        }
                        uint64_t v201 = v190[17];
                        if (v201)
                        {
                          *(unsigned char *)(v6 + 1147) = 1;
                          char v202 = (unsigned int *)((char *)v498 + v201);
                          uint64_t v203 = *v202;
                          uint64_t v205 = (unsigned int *)((char *)v202 + v203 + 4);
                          uint64_t v204 = *(unsigned int *)((char *)v202 + v203);
                          if (v204)
                          {
                            uint64_t v206 = &v205[v204];
                            while (1)
                            {
                              uint64_t v207 = (int *)((char *)v205 + *v205);
                              uint64_t v208 = (unsigned __int16 *)((char *)v207 - *v207);
                              unsigned int v209 = *v208;
                              if (v209 < 7)
                              {
                                int v210 = 0;
                                unsigned int v212 = 0;
                                if (v209 < 5) {
                                  goto LABEL_372;
                                }
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_368;
                                }
                              }
                              else if (v208[3])
                              {
                                int v210 = *(int *)((char *)v207 + v208[3]);
                                uint64_t v211 = v208[2];
                                if (!v211) {
                                  goto LABEL_368;
                                }
                              }
                              else
                              {
                                int v210 = 0;
                                uint64_t v211 = v208[2];
                                if (!v211)
                                {
LABEL_368:
                                  unsigned int v212 = 0;
                                  goto LABEL_372;
                                }
                              }
                              unsigned int v212 = *(int *)((char *)v207 + v211);
LABEL_372:
                              unsigned int v213 = (uint64_t **)(v6 + 1160);
LABEL_373:
                              unsigned int v214 = *v213;
                              int v215 = v213;
                              if (*v213)
                              {
                                while (1)
                                {
                                  unsigned int v213 = (uint64_t **)v214;
                                  unsigned int v216 = *((_DWORD *)v214 + 7);
                                  if (v212 < v216) {
                                    goto LABEL_373;
                                  }
                                  if (v216 >= v212) {
                                    break;
                                  }
                                  unsigned int v214 = v213[1];
                                  if (!v214)
                                  {
                                    int v215 = v213 + 1;
                                    goto LABEL_378;
                                  }
                                }
                                unsigned int v217 = v213;
                              }
                              else
                              {
LABEL_378:
                                unsigned int v217 = operator new(0x28uLL);
                                v217[7] = v212;
                                v217[8] = 0;
                                *(void *)unsigned int v217 = 0;
                                *((void *)v217 + 1) = 0;
                                *((void *)v217 + 2) = v213;
                                *int v215 = (uint64_t *)v217;
                                uint64_t v218 = **(void **)(v6 + 1152);
                                uint64_t v219 = (uint64_t *)v217;
                                if (v218)
                                {
                                  *(void *)(v6 + 1152) = v218;
                                  uint64_t v219 = *v215;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 1160), v219);
                                ++*(void *)(v6 + 1168);
                              }
                              uint64_t v90 = v507;
                              v217[8] = v210;
                              if (++v205 == v206)
                              {
                                uint64_t v50 = v499;
                                uint64_t v221 = *v499;
                                uint64_t v193 = -v221;
                                if (*(unsigned __int16 *)((char *)v499 - v221) < 0x21u) {
                                  goto LABEL_388;
                                }
LABEL_385:
                                if (!*(_WORD *)((char *)v50 + v193 + 32)) {
                                  goto LABEL_388;
                                }
                                int v220 = *(int *)((char *)v50 + *(unsigned __int16 *)((char *)v50 + v193 + 32));
LABEL_389:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                int v222 = getAdditionalSpillBufferBytes(void)::extra + v220;
                                *(_DWORD *)(v6 + 396) = getAdditionalSpillBufferBytes(void)::extra + v220;
                                uint64_t v223 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v223 < 0x43u)
                                {
                                  LODWORD(v224) = 0;
                                }
                                else
                                {
                                  uint64_t v224 = v223[33];
                                  if (v224) {
                                    LODWORD(v224) = *(int *)((char *)v50 + v224);
                                  }
                                }
                                *(_DWORD *)(v6 + 408) = v224;
                                int v225 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v225 < 5u)
                                {
                                  LODWORD(v226) = 0;
                                }
                                else
                                {
                                  uint64_t v226 = v225[2];
                                  if (v226) {
                                    LODWORD(v226) = *(int *)((char *)v50 + v226);
                                  }
                                }
                                *(_DWORD *)(v6 + 392) = v226;
                                int v227 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v227 < 0x51u)
                                {
                                  LODWORD(v228) = 0;
                                }
                                else
                                {
                                  uint64_t v228 = v227[40];
                                  if (v228) {
                                    LODWORD(v228) = *(int *)((char *)v50 + v228);
                                  }
                                }
                                *(_DWORD *)(v6 + 428) = v228;
                                uint64_t v229 = (unsigned __int16 *)((char *)v50 - *v50);
                                if (*v229 < 0x4Fu)
                                {
                                  LODWORD(v230) = 0;
                                }
                                else
                                {
                                  uint64_t v230 = v229[39];
                                  if (v230) {
                                    LODWORD(v230) = *(int *)((char *)v50 + v230);
                                  }
                                }
                                *(_DWORD *)(v6 + 440) = v230;
                                *(_DWORD *)(v6 + 448) = *(_DWORD *)(v90 + 468);
                                uint64_t v231 = (unsigned __int16 *)((char *)v50 - *v50);
                                BOOL v89 = (*(int *)((char *)v50 + v231[6] + *(unsigned int *)((char *)v50 + v231[6])) | v222) == 0;
                                char v232 = v502;
                                if (!v89) {
                                  char v232 = 1;
                                }
                                if (v232) {
                                  goto LABEL_419;
                                }
                                unsigned int v233 = *v231;
                                if (v233 < 0x21)
                                {
                                  int v234 = 0;
                                }
                                else if (v231[16])
                                {
                                  int v234 = *(int *)((char *)v50 + v231[16]);
                                  if (v233 >= 0x43)
                                  {
LABEL_706:
                                    if (v231[33])
                                    {
                                      int v235 = *(int *)((char *)v50 + v231[33]);
                                      goto LABEL_415;
                                    }
                                  }
                                }
                                else
                                {
                                  int v234 = 0;
                                  if (v233 >= 0x43) {
                                    goto LABEL_706;
                                  }
                                }
                                int v235 = 0;
                                {
LABEL_708:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                }
LABEL_415:
                                if (v235 + v234 + getAdditionalSpillBufferBytes(void)::extra)
                                {
LABEL_419:
                                  LOBYTE(v237) = 1;
                                }
                                else
                                {
                                  uint64_t v236 = (unsigned __int16 *)((char *)v50 - *v50);
                                  if (*v236 < 0x5Fu)
                                  {
                                    LOBYTE(v237) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v237 = v236[47];
                                    if (v237) {
                                      LOBYTE(v237) = *((unsigned char *)v50 + v237) != 0;
                                    }
                                  }
                                }
                                *(unsigned char *)(v6 + 452) = v237;
                                char v238 = (unsigned __int16 *)((char *)v498 - *v498);
                                if (*v238 < 0x11u)
                                {
                                  LODWORD(v239) = 0;
                                }
                                else
                                {
                                  uint64_t v239 = v238[8];
                                  if (v239) {
                                    LODWORD(v239) = *(int *)((char *)v498 + v239);
                                  }
                                }
                                *(_DWORD *)(v6 + 960) = v239;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                unsigned int v240 = (_OWORD *)(v6 + 816);
                                int v241 = (const void **)(v503 + 3);
                                if (v503[3])
                                {
                                  if (v503[4]) {
                                    int v242 = v503 + 3;
                                  }
                                  else {
                                    int v242 = v503 + 73;
                                  }
                                }
                                else
                                {
                                  int v242 = v503 + 73;
                                }
                                uint64_t v243 = a2 + 5184;
                                AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v242[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(v6 + 1016));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v244 = *(_OWORD *)&__dst[16];
                                *unsigned int v240 = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 832) = v244;
                                *(_OWORD *)(v6 + 841) = *(_OWORD *)&__dst[25];
                                *(void *)(v6 + 608) = *(void *)(v6 + 816);
                                *(void *)(v6 + 640) = a2 + 5352;
                                long long v245 = *(_OWORD *)(v6 + 832);
                                *(_OWORD *)(v6 + 648) = *v240;
                                *(_OWORD *)(v6 + 664) = v245;
                                *(_OWORD *)(v6 + 673) = *(_OWORD *)(v6 + 841);
                                if (*v241)
                                {
                                  long long v246 = v503;
                                  uint64_t v247 = v503[4];
                                  if (v247) {
                                    long long v248 = *v241;
                                  }
                                  else {
                                    long long v248 = (const void *)v503[73];
                                  }
                                  if (v247) {
                                    uint64_t v249 = v503 + 3;
                                  }
                                  else {
                                    uint64_t v249 = v503 + 73;
                                  }
                                }
                                else
                                {
                                  long long v246 = v503;
                                  uint64_t v249 = v503 + 73;
                                  long long v248 = (const void *)v503[73];
                                }
                                memcpy(*(void **)(v6 + 824), v248, v249[1]);
                                uint64_t v250 = *(void *)(v6 + 824);
                                uint64_t v251 = *(void *)(v6 + 832);
                                *(void *)(v6 + 616) = *(void *)(v6 + 608);
                                *(void *)(v6 + 624) = v250;
                                *(void *)(v6 + 632) = v251;
                                uint64_t v252 = (const void **)(v246 + 8);
                                if (v246[8])
                                {
                                  if (v246[9]) {
                                    uint64_t v253 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v253 = v246 + 78;
                                  }
                                  uint64_t v254 = v253[1];
                                  if (!v254) {
                                    goto LABEL_454;
                                  }
                                }
                                else
                                {
                                  uint64_t v254 = v246[79];
                                  if (!v254) {
                                    goto LABEL_454;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v243, v254, (void *)(v6 + 1024));
                                *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                long long v255 = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(v6 + 864) = *(_OWORD *)__dst;
                                *(_OWORD *)(v6 + 880) = v255;
                                *(_OWORD *)(v6 + 889) = *(_OWORD *)&__dst[25];
                                long long v256 = *(_OWORD *)(v6 + 880);
                                *(_OWORD *)(v6 + 696) = *(_OWORD *)(v6 + 864);
                                *(_OWORD *)(v6 + 712) = v256;
                                *(_OWORD *)(v6 + 721) = *(_OWORD *)(v6 + 889);
                                if (*v252)
                                {
                                  uint64_t v257 = v503[9];
                                  if (v257) {
                                    long long v258 = *v252;
                                  }
                                  else {
                                    long long v258 = (const void *)v503[78];
                                  }
                                  if (v257) {
                                    uint64_t v259 = v246 + 8;
                                  }
                                  else {
                                    uint64_t v259 = v503 + 78;
                                  }
                                }
                                else
                                {
                                  uint64_t v259 = v503 + 78;
                                  long long v258 = (const void *)v503[78];
                                }
                                memcpy(*(void **)(v6 + 872), v258, v259[1]);
LABEL_454:
                                long long v260 = (const void **)(v503 + 13);
                                if (v503[13])
                                {
                                  if (v503[14]) {
                                    long long v261 = v503 + 13;
                                  }
                                  else {
                                    long long v261 = v503 + 83;
                                  }
                                  uint64_t v262 = v261[1];
                                  if (v262) {
                                    goto LABEL_459;
                                  }
LABEL_467:
                                  if (!*(unsigned char *)(v6 + 600)) {
                                    goto LABEL_471;
                                  }
LABEL_472:
                                  {
                                    {
                                      unint64_t v270 = v6 + 528;
                                      if (*(char *)(v6 + 551) < 0) {
                                        unint64_t v270 = *v494;
                                      }
                                      unint64_t v271 = v6 + 576;
                                      if (*(char *)(v6 + 599) < 0) {
                                        unint64_t v271 = v492->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v272 = v6 + 552;
                                      if (*(char *)(v6 + 575) < 0) {
                                        unint64_t v272 = *v493;
                                      }
                                      int v273 = *(_DWORD *)(v6 + 512);
                                      uint64_t v274 = *(void *)(v6 + 608);
                                      uint64_t v275 = *(void **)(v6 + 832);
                                      *(_DWORD *)std::string __dst = 136447490;
                                      *(void *)&__dst[4] = v270;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v271;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v272;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v273;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v274;
                                      LOWORD(v511[0]) = 2050;
                                      *(void **)((char *)v511 + 2) = v275;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v269, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  uint64_t v276 = *(void *)(v6 + 8);
                                  unint64_t v277 = v6 + 528;
                                  if (*(char *)(v6 + 551) < 0) {
                                    unint64_t v277 = *v494;
                                  }
                                  unint64_t v278 = v6 + 576;
                                  if (*(char *)(v6 + 599) < 0) {
                                    unint64_t v278 = v492->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v279 = v6 + 552;
                                  if (*(char *)(v6 + 575) < 0) {
                                    unint64_t v279 = *v493;
                                  }
                                  int v280 = *(_DWORD *)(v6 + 512);
                                  uint64_t v281 = *(void *)(v6 + 608);
                                  uint64_t v282 = *(void *)(v6 + 832);
                                  char v283 = *(unsigned char *)(v6 + 600);
                                  *(void *)std::string __dst = v277;
                                  *(void *)&__dst[8] = v278;
                                  *(void *)&__dst[16] = v279;
                                  *(_DWORD *)&__dst[24] = v280;
                                  *(void *)&__dst[32] = v281;
                                  *(void *)&__dst[40] = v282;
                                  LOBYTE(v511[0]) = v283;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v276, v6, (long long *)__dst);
                                }
                                else
                                {
                                  uint64_t v262 = v503[84];
                                  if (!v262) {
                                    goto LABEL_467;
                                  }
LABEL_459:
                                  AGX::Heap<true>::allocateImpl(__dst, v243, v262, (void *)(v6 + 1032));
                                  *(_DWORD *)(v6 + 1040) += *(_DWORD *)&__dst[16];
                                  long long v263 = *(_OWORD *)&__dst[16];
                                  *(_OWORD *)(v6 + 912) = *(_OWORD *)__dst;
                                  *(_OWORD *)(v6 + 928) = v263;
                                  *(_OWORD *)(v6 + 937) = *(_OWORD *)&__dst[25];
                                  long long v264 = *(_OWORD *)(v6 + 928);
                                  *(_OWORD *)(v6 + 744) = *(_OWORD *)(v6 + 912);
                                  *(_OWORD *)(v6 + 760) = v264;
                                  *(_OWORD *)(v6 + 769) = *(_OWORD *)(v6 + 937);
                                  if (*v260)
                                  {
                                    uint64_t v265 = v503[14];
                                    if (v265) {
                                      uint64_t v266 = *v260;
                                    }
                                    else {
                                      uint64_t v266 = (const void *)v503[83];
                                    }
                                    if (v265) {
                                      uint64_t v267 = v503 + 13;
                                    }
                                    else {
                                      uint64_t v267 = v503 + 83;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v267 = v503 + 83;
                                    uint64_t v266 = (const void *)v503[83];
                                  }
                                  memcpy(*(void **)(v6 + 920), v266, v267[1]);
                                  uint64_t v268 = *(void *)(v6 + 928);
                                  *(_OWORD *)(v6 + 792) = *(_OWORD *)(v6 + 912);
                                  *(void *)(v6 + 808) = v268;
                                  if (*(unsigned char *)(v6 + 600)) {
                                    goto LABEL_472;
                                  }
LABEL_471:
                                  if (*(unsigned char *)(*(void *)(v6 + 8) + 7761)) {
                                    goto LABEL_472;
                                  }
                                }
                                int v284 = *(_DWORD *)(v90 + 124);
                                int v285 = *(_DWORD *)(v90 + 132);
                                int v286 = *(_DWORD *)(v90 + 140);
                                if (*(unsigned char *)(v90 + 208)) {
                                  int v287 = *(_DWORD *)(v90 + 144);
                                }
                                else {
                                  int v287 = 0;
                                }
                                if (*(_OWORD *)(v90 + 176) == 0) {
                                  int v288 = 0;
                                }
                                else {
                                  int v288 = *(_DWORD *)(v90 + 144);
                                }
                                int v289 = *(_DWORD *)(v90 + 120) + *(_DWORD *)(v90 + 128) + *(_DWORD *)(v90 + 136);
                                unint64_t v290 = v287
                                     + *(_DWORD *)(v90 + 148)
                                     + v288
                                     + *(_DWORD *)(v90 + 152)
                                     + ((v284 + v285 + v286 - v289 + 3) & 0xFFFFFFFC);
                                uint64_t v291 = *(void *)(v6 + 48);
                                unint64_t v292 = (*(void *)(v6 + 56) - v291) >> 2;
                                if (v290 <= v292)
                                {
                                  if (v290 < v292) {
                                    *(void *)(v6 + 56) = v291 + 4 * v290;
                                  }
                                }
                                else
                                {
                                  std::vector<unsigned int>::__append(v506, v290 - v292);
                                  int v284 = *(_DWORD *)(v90 + 124);
                                  int v285 = *(_DWORD *)(v90 + 132);
                                  int v286 = *(_DWORD *)(v90 + 140);
                                  int v289 = *(_DWORD *)(v90 + 120) + *(_DWORD *)(v90 + 128) + *(_DWORD *)(v90 + 136);
                                }
                                *(_DWORD *)(v6 + 412) = v284 + v285 + v286 - v289;
                                uint64_t v293 = *v50;
                                uint64_t v294 = *(unsigned __int16 *)((char *)v50 - v293 + 16);
                                uint64_t v295 = *(unsigned int *)((char *)v50 + v294);
                                uint64_t v296 = *(unsigned int *)((char *)v50 + v294 + v295);
                                if (v296)
                                {
                                  uint64_t v297 = 4 * v296;
                                  uint64_t v298 = v294 + v295;
                                  while (1)
                                  {
                                    uint64_t v300 = *(unsigned int *)((char *)v50 + v298 + 4);
                                    uint64_t v301 = (char *)v50 + v298 + v300;
                                    uint64_t v302 = v300 - *((int *)v301 + 1);
                                    uint64_t v303 = (char *)v50 + v298 + v302;
                                    unsigned int v304 = *((unsigned __int16 *)v303 + 2);
                                    if (v304 < 7) {
                                      goto LABEL_511;
                                    }
                                    uint64_t v305 = *((unsigned __int16 *)v303 + 5);
                                    if (!v305 || (*(int *)((char *)v50 + v298 + v300 + v305 + 4) & 0x80000000) == 0) {
                                      break;
                                    }
LABEL_503:
                                    v298 += 4;
                                    v297 -= 4;
                                    if (!v297)
                                    {
                                      uint64_t v293 = *v50;
                                      goto LABEL_518;
                                    }
                                  }
                                  if (v304 < 9)
                                  {
LABEL_511:
                                    int v307 = 0;
                                  }
                                  else
                                  {
                                    uint64_t v306 = *(unsigned __int16 *)((char *)v50 + v298 + v302 + 12);
                                    if (v306) {
                                      LODWORD(v306) = *(int *)((char *)v50 + v298 + v300 + v306 + 4);
                                    }
                                    int v307 = 4 * v306;
                                  }
                                  int v308 = v307 - *(_DWORD *)(v90 + 120);
                                  std::vector<unsigned int>::pointer begin = v506->__begin_;
                                  v506->__begin_[v308] = -1;
                                  begin[v308 + 1] = 0;
                                  begin[v308 + 2] = 1;
                                  begin[v308 + 3] = 2;
                                  uint64_t v310 = v300 - *((int *)v301 + 1);
                                  if (*(unsigned __int16 *)((char *)v50 + v298 + v310 + 4) >= 0xBu
                                    && *(_WORD *)((char *)v50 + v298 + v310 + 14)
                                    && *((unsigned char *)v50
                                       + v298
                                       + v300
                                       + *(unsigned __int16 *)((char *)v50 + v298 + v310 + 14)
                                       + 4))
                                  {
                                    uint64_t v311 = *(unsigned __int16 *)((char *)v50 + v298 + v310 + 10);
                                    if (v311) {
                                      int v299 = *(int *)((char *)v50 + v298 + v300 + v311 + 4);
                                    }
                                    else {
                                      int v299 = 0;
                                    }
                                    *(void *)(v6 + 480 + 8 * ((v299 & 0xFFFC0) != 0)) |= 1 << v299;
                                  }
                                  goto LABEL_503;
                                }
LABEL_518:
                                uint64_t v312 = -v293;
                                int v313 = (char *)v50 + v312;
                                if (*(unsigned char *)(v6 + 454))
                                {
                                  uint64_t v314 = *((unsigned __int16 *)v313 + 12);
                                  uint64_t v315 = *(unsigned int *)((char *)v50 + v314);
                                  uint64_t v316 = (unsigned int *)((char *)v50 + v314 + v315);
                                  uint64_t v317 = *v316;
                                  if (v317)
                                  {
                                    unint64_t v318 = 0;
                                    uint64_t v319 = 4 * v317;
                                    int v320 = (char *)v50 + v314 + v315;
                                    while (1)
                                    {
                                      uint64_t v321 = v316[v318 / 4 + 1];
                                      uint64_t v322 = v321 - *(int *)((char *)&v316[v318 / 4 + 1] + v321);
                                      uint64_t v323 = &v320[v318 + v322];
                                      unsigned int v324 = *((unsigned __int16 *)v323 + 2);
                                      if (v324 >= 5)
                                      {
                                        uint64_t v325 = *((unsigned __int16 *)v323 + 4);
                                        if (v325)
                                        {
                                          if (v320[v318 + 4 + v321 + v325] == 93)
                                          {
                                            if (v324 < 7) {
                                              break;
                                            }
                                            uint64_t v326 = *(unsigned __int16 *)&v320[v318 + 10 + v322];
                                            if (!v326) {
                                              break;
                                            }
                                            int v327 = *(_DWORD *)&v320[v318 + 4 + v321 + v326];
                                            if ((v327 & 0x80000000) == 0 && (v327 & 0xFFF00000) != 0x400000) {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                      v318 += 4;
                                      if (v319 == v318) {
                                        goto LABEL_530;
                                      }
                                    }
                                    *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), *(int8x16_t *)(v6 + 496));
                                  }
                                }
LABEL_530:
                                uint64_t v328 = *((unsigned __int16 *)v313 + 10);
                                uint64_t v329 = *(unsigned int *)((char *)v50 + v328);
                                uint64_t v330 = *(unsigned int *)((char *)v50 + v328 + v329);
                                if (!v330) {
                                  goto LABEL_546;
                                }
                                uint64_t v331 = 4 * v330;
                                uint64_t v332 = v328 + v329;
                                while (2)
                                {
                                  uint64_t v333 = *(unsigned int *)((char *)v50 + v332 + 4);
                                  uint64_t v334 = v333 - *(int *)((char *)v50 + v332 + v333 + 4);
                                  uint64_t v335 = (char *)v50 + v332 + v334;
                                  unsigned int v336 = *((unsigned __int16 *)v335 + 2);
                                  if (v336 < 7) {
                                    goto LABEL_539;
                                  }
                                  uint64_t v337 = *((unsigned __int16 *)v335 + 5);
                                  if (v337 && *(int *)((char *)v50 + v332 + v333 + v337 + 4) < 0) {
                                    goto LABEL_532;
                                  }
                                  if (v336 < 9 || (uint64_t v338 = *(unsigned __int16 *)((char *)v50 + v332 + v334 + 12)) == 0)
                                  {
LABEL_539:
                                    int v339 = 0;
                                    goto LABEL_540;
                                  }
                                  int v339 = *(int *)((char *)v50 + v332 + v333 + v338 + 4);
LABEL_540:
                                  int v340 = *(unsigned __int8 *)(v6 + 1144);
                                  if (*(unsigned char *)(v6 + 1144)) {
                                    int v341 = 3;
                                  }
                                  else {
                                    int v341 = 1;
                                  }
                                  unsigned int v342 = *(_DWORD *)(v90 + 124)
                                       + v341 * v339
                                       - (*(_DWORD *)(v90 + 120)
                                        + *(_DWORD *)(v90 + 128));
                                  uint64_t v343 = *(void *)(v6 + 48);
                                  *(_DWORD *)(v343 + 4 * v342) = -1;
                                  if (v340)
                                  {
                                    *(_DWORD *)(v343 + 4 * (v342 + 1)) = -1;
                                    *(_DWORD *)(v343 + 4 * (v342 + 2)) = 0;
                                  }
LABEL_532:
                                  v332 += 4;
                                  v331 -= 4;
                                  if (v331) {
                                    continue;
                                  }
                                  break;
                                }
                                uint64_t v312 = -(uint64_t)*v50;
LABEL_546:
                                unint64_t v344 = v6 + 464;
                                uint64_t v345 = (unsigned int *)((char *)v50 + *(unsigned __int16 *)((char *)v50 + v312 + 12));
                                uint64_t v346 = *v345;
                                uint64_t v348 = (unsigned int *)((char *)v345 + v346 + 4);
                                uint64_t v347 = *(unsigned int *)((char *)v345 + v346);
                                if (v347)
                                {
                                  unsigned int v349 = &v348[v347];
                                  while (1)
                                  {
                                    unsigned int v350 = (int *)((char *)v348 + *v348);
                                    uint64_t v351 = (unsigned __int16 *)((char *)v350 - *v350);
                                    unsigned int v352 = *v351;
                                    if (v352 < 7) {
                                      break;
                                    }
                                    if (!v351[3] || (*(int *)((char *)v350 + v351[3]) & 0x80000000) == 0)
                                    {
                                      if (v352 < 9)
                                      {
                                        LODWORD(v353) = 0;
                                        goto LABEL_559;
                                      }
                                      uint64_t v353 = v351[4];
                                      if (v351[4])
                                      {
                                        LODWORD(v353) = *(int *)((char *)v350 + v353);
LABEL_559:
                                        uint64_t v354 = v351[3];
                                        if (v354) {
                                          LODWORD(v354) = *(int *)((char *)v350 + v354);
                                        }
                                        goto LABEL_563;
                                      }
LABEL_558:
                                      if (v352 >= 7) {
                                        goto LABEL_559;
                                      }
                                      LODWORD(v354) = 0;
LABEL_563:
                                      unsigned int v355 = ((v353 >> 1) & 0x1FFFFFFF)
                                           + *(_DWORD *)(v90 + 124)
                                           + *(_DWORD *)(v90 + 132)
                                           - (*(_DWORD *)(v90 + 120)
                                            + *(_DWORD *)(v90 + 128)
                                            + *(_DWORD *)(v90 + 136));
                                      v506->__begin_[v355] = 0;
                                      unsigned int v356 = (unsigned __int16 *)((char *)v350 - *v350);
                                      if (*v356 >= 0xBu)
                                      {
                                        uint64_t v357 = v356[5];
                                        if (v357)
                                        {
                                          if (*((unsigned char *)v350 + v357)) {
                                            *(void *)(v344 + 8 * ((v354 & 0xFFFC0) != 0)) |= 1 << v354;
                                          }
                                        }
                                      }
                                      if (*(unsigned char *)(v6 + 1147))
                                      {
                                        unsigned int v358 = *v505;
                                        if (!*v505) {
LABEL_759:
                                        }
                                          abort();
                                        unsigned int v359 = (2 * v355) | 1;
                                        unsigned int v360 = v354 & 0xFFFFF;
                                        while (1)
                                        {
                                          while (1)
                                          {
                                            unsigned int v361 = *((_DWORD *)v358 + 7);
                                            if (v360 >= v361) {
                                              break;
                                            }
                                            unsigned int v358 = (uint64_t *)*v358;
                                            if (!v358) {
                                              goto LABEL_759;
                                            }
                                          }
                                          if (v361 >= v360) {
                                            break;
                                          }
                                          unsigned int v358 = (uint64_t *)v358[1];
                                          if (!v358) {
                                            goto LABEL_759;
                                          }
                                        }
                                        int v362 = *((_DWORD *)v358 + 8);
                                        unsigned int v363 = (uint64_t **)(v6 + 272);
LABEL_576:
                                        int v364 = *v363;
                                        unsigned int v365 = v363;
                                        if (*v363)
                                        {
                                          while (1)
                                          {
                                            unsigned int v363 = (uint64_t **)v364;
                                            unsigned int v366 = *((_DWORD *)v364 + 7);
                                            if (v359 < v366) {
                                              goto LABEL_576;
                                            }
                                            if (v366 >= v359) {
                                              break;
                                            }
                                            int v364 = v363[1];
                                            if (!v364)
                                            {
                                              unsigned int v365 = v363 + 1;
                                              goto LABEL_581;
                                            }
                                          }
                                          uint64_t v367 = v363;
                                        }
                                        else
                                        {
LABEL_581:
                                          uint64_t v367 = operator new(0x28uLL);
                                          v367[7] = v359;
                                          v367[8] = 0;
                                          *(void *)uint64_t v367 = 0;
                                          *((void *)v367 + 1) = 0;
                                          *((void *)v367 + 2) = v363;
                                          uint64_t *v365 = (uint64_t *)v367;
                                          uint64_t v368 = **(void **)(v6 + 264);
                                          unsigned int v369 = (uint64_t *)v367;
                                          if (v368)
                                          {
                                            *(void *)(v6 + 264) = v368;
                                            unsigned int v369 = *v365;
                                          }
                                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 272), v369);
                                          ++*(void *)(v6 + 280);
                                        }
                                        uint64_t v90 = v507;
                                        v367[8] = v362;
                                      }
                                    }
                                    if (++v348 == v349) {
                                      goto LABEL_584;
                                    }
                                  }
                                  LODWORD(v353) = 0;
                                  goto LABEL_558;
                                }
LABEL_584:
                                unint64_t v370 = *(void *)(v90 + 160);
                                unint64_t v371 = *(void *)(v90 + 168);
                                if (*(_OWORD *)(v90 + 160) != 0)
                                {
                                  int v372 = *(unsigned __int8 *)(v90 + 208);
                                  int v373 = *(_DWORD *)(v90 + 144);
                                  if (!*(unsigned char *)(v90 + 208)) {
                                    goto LABEL_596;
                                  }
                                  if (v373)
                                  {
                                    unsigned int v374 = (*(_DWORD *)(v90 + 124)
                                          + *(_DWORD *)(v90 + 132)
                                          + *(_DWORD *)(v90 + 140)
                                          - (*(_DWORD *)(v90 + 120)
                                           + *(_DWORD *)(v90 + 128)
                                           + *(_DWORD *)(v90 + 136))
                                          + 3) & 0xFFFFFFFC;
                                    *(void *)std::string __dst = *(void *)(v90 + 160);
                                    v508.n128_u64[0] = v371;
                                    for (unint64_t i = v370; ; unint64_t i = *(void *)__dst)
                                    {
                                      if (i)
                                      {
                                        unsigned int v376 = (__n128 *)__dst;
                                      }
                                      else
                                      {
                                        unint64_t i = v508.n128_u64[0];
                                        if (!v508.n128_u64[0])
                                        {
                                          int v373 = *(_DWORD *)(v90 + 144);
                                          int v372 = v373;
                                          goto LABEL_596;
                                        }
                                        unsigned int v376 = &v508;
                                      }
                                      v376->n128_u64[0] = i & (i - 1);
                                      std::vector<unsigned int>::pointer v377 = v506->__begin_;
                                      v506->__begin_[v374] = -1;
                                      v377[v374 + 1] = 0;
                                      v377[v374 + 2] = 1;
                                      v377[v374 + 3] = 2;
                                      v374 += 4;
                                    }
                                  }
                                  int v372 = 0;
LABEL_596:
                                  int8x16_t v378 = *(int8x16_t *)(v90 + 176);
                                  if (*(_OWORD *)&v378 != 0 && v373 != 0)
                                  {
                                    int v444 = ((*(_DWORD *)(v90 + 140)
                                           + *(_DWORD *)(v90 + 132)
                                           - (*(_DWORD *)(v90 + 136)
                                            + *(_DWORD *)(v90 + 128)
                                            + *(_DWORD *)(v90 + 120))
                                           + *(_DWORD *)(v90 + 124)
                                           + 3) & 0xFFFFFFFC)
                                         + v372;
                                    *(void *)std::string __dst = v370;
                                    v508.n128_u64[0] = v371;
                                    while (1)
                                    {
                                      if (v370)
                                      {
                                        unsigned int v445 = (__n128 *)__dst;
                                      }
                                      else
                                      {
                                        unint64_t v370 = v508.n128_u64[0];
                                        if (!v508.n128_u64[0]) {
                                          break;
                                        }
                                        unsigned int v445 = &v508;
                                      }
                                      v445->n128_u64[0] = v370 & (v370 - 1);
                                      std::vector<unsigned int>::pointer v446 = v506->__begin_;
                                      v506->__begin_[v444] = -1;
                                      v446[v444 + 1] = 0;
                                      v446[v444 + 2] = 1;
                                      v446[v444 + 3] = 2;
                                      v444 += 4;
                                      unint64_t v370 = *(void *)__dst;
                                    }
                                  }
                                  *(int8x16_t *)(v6 + 480) = vorrq_s8(*(int8x16_t *)(v6 + 480), v378);
                                }
                                if (*(_DWORD *)(v90 + 148))
                                {
                                  int v380 = *(_DWORD *)(v90 + 144);
                                  if (*(unsigned char *)(v90 + 208)) {
                                    int v381 = *(_DWORD *)(v90 + 144);
                                  }
                                  else {
                                    int v381 = 0;
                                  }
                                  if (*(_OWORD *)(v90 + 176) == 0) {
                                    int v380 = 0;
                                  }
                                  unsigned int v382 = v381
                                       + v380
                                       + ((*(_DWORD *)(v90 + 124)
                                         + *(_DWORD *)(v90 + 132)
                                         + *(_DWORD *)(v90 + 140)
                                         - (*(_DWORD *)(v90 + 120)
                                          + *(_DWORD *)(v90 + 128)
                                          + *(_DWORD *)(v90 + 136))
                                         + 3) & 0xFFFFFFFC);
                                  unint64_t v384 = *(void *)(v90 + 192);
                                  unint64_t v383 = *(void *)(v90 + 200);
                                  *(void *)std::string __dst = v384;
                                  v508.n128_u64[0] = v383;
                                  while (1)
                                  {
                                    if (v384)
                                    {
                                      unint64_t v385 = (__n128 *)__dst;
                                    }
                                    else
                                    {
                                      unint64_t v384 = v508.n128_u64[0];
                                      if (!v508.n128_u64[0]) {
                                        break;
                                      }
                                      unint64_t v385 = &v508;
                                    }
                                    v385->n128_u64[0] = v384 & (v384 - 1);
                                    uint64_t v386 = *(void *)(v6 + 48);
                                    *(_DWORD *)(v386 + 4 * v382) = -1;
                                    if (*(unsigned char *)(v6 + 1144))
                                    {
                                      *(_DWORD *)(v386 + 4 * (v382 + 1)) = -1;
                                      *(_DWORD *)(v386 + 4 * (v382 + 2)) = 0;
                                    }
                                    v382 += 4;
                                    unint64_t v384 = *(void *)__dst;
                                  }
                                }
                                int v387 = *v499;
                                if (*(unsigned char *)(v90 + 467))
                                {
                                  unsigned int v388 = (unsigned __int16 *)((char *)v499 - v387);
                                  if (*v388 < 0x67u)
                                  {
                                    unint64_t v389 = 0;
                                  }
                                  else
                                  {
                                    unint64_t v389 = v388[51];
                                    if (v389) {
                                      unint64_t v389 = *(void *)((char *)v499 + v389);
                                    }
                                  }
                                  int v390 = 128 - 2 * __clz(v389);
                                  if (*(_DWORD *)(v6 + 208) > v390) {
                                    int v390 = *(_DWORD *)(v6 + 208);
                                  }
                                  *(_DWORD *)(v6 + 208) = v390;
                                  unint64_t v391 = (unsigned __int16 *)((char *)v499 - *v499);
                                  if (*v391 < 0x17u)
                                  {
                                    LODWORD(v392) = 0;
                                  }
                                  else
                                  {
                                    unint64_t v392 = v391[11];
                                    if (v392) {
                                      unint64_t v392 = ((unint64_t)*(unsigned int *)((char *)v499 + v392) + 3) >> 2;
                                    }
                                  }
                                  *(_DWORD *)(v6 + 200) = v392;
                                  *(_DWORD *)(v6 + 204) = 0;
                                  int v387 = *v499;
                                }
                                int v393 = (unsigned __int16 *)((char *)v499 - v387);
                                if (*v393 >= 0x17u && (uint64_t v394 = v393[11]) != 0)
                                {
                                  unint64_t v395 = ((unint64_t)*(unsigned int *)((char *)v499 + v394) + 3) >> 2;
                                  uint64_t v396 = (void *)(v6 + 80);
                                  uint64_t v397 = *(void *)(v6 + 72);
                                  unint64_t v398 = (*(void *)(v6 + 80) - v397) >> 2;
                                  if (v395 > v398)
                                  {
                                    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v6 + 72), v395 - v398);
                                    goto LABEL_635;
                                  }
                                }
                                else
                                {
                                  unint64_t v395 = 0;
                                  uint64_t v396 = (void *)(v6 + 80);
                                  uint64_t v397 = *(void *)(v6 + 72);
                                  unint64_t v398 = (*(void *)(v6 + 80) - v397) >> 2;
                                }
                                if (v398 > v395) {
                                  void *v396 = v397 + 4 * v395;
                                }
LABEL_635:
                                if (v491 != (void *)(v90 + 216)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v491, *(char **)(v90 + 216), *(char **)(v90 + 224), (uint64_t)(*(void *)(v90 + 224) - *(void *)(v90 + 216)) >> 2);
                                }
                                if (v490 != (void *)(v90 + 240)) {
                                  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v490, *(char **)(v90 + 240), *(char **)(v90 + 248), (uint64_t)(*(void *)(v90 + 248) - *(void *)(v90 + 240)) >> 2);
                                }
                                if (v489 != (void *)(v90 + 320)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v489, *(char **)(v90 + 320), *(char **)(v90 + 328), (uint64_t)(*(void *)(v90 + 328) - *(void *)(v90 + 320)) >> 1);
                                }
                                if (v488 != (void *)(v90 + 368)) {
                                  std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v488, *(char **)(v90 + 368), *(char **)(v90 + 376), (uint64_t)(*(void *)(v90 + 376) - *(void *)(v90 + 368)) >> 1);
                                }
                                *(unsigned char *)(v6 + 192) = *(unsigned char *)(v90 + 416);
                                *(unsigned char *)(v6 + 456) = *(_OWORD *)(v90 + 160) != 0;
                                *(unsigned char *)(v6 + 457) = *(void *)(v90 + 148) != 0;
                                uint64_t v399 = *(unsigned __int16 *)((char *)v499 - *v499 + 24);
                                uint64_t v400 = *(unsigned int *)((char *)v499 + v399);
                                unint64_t v401 = (unsigned int *)((char *)v499 + v399 + v400);
                                uint64_t v402 = *v401;
                                if (v402)
                                {
                                  unint64_t v403 = 0;
                                  uint64_t v404 = 4 * v402;
                                  int v405 = (char *)v499 + v399 + v400;
                                  do
                                  {
                                    uint64_t v406 = v401[v403 / 4 + 1];
                                    uint64_t v407 = v406 - *(int *)((char *)&v401[v403 / 4 + 1] + v406);
                                    int v408 = &v405[v403 + v407];
                                    unsigned int v409 = *((unsigned __int16 *)v408 + 2);
                                    if (v409 >= 5)
                                    {
                                      uint64_t v410 = *((unsigned __int16 *)v408 + 4);
                                      if (v410)
                                      {
                                        if (v409 >= 7 && v405[v403 + 4 + v406 + v410] == 139)
                                        {
                                          if (*(_WORD *)&v405[v403 + 10 + v407])
                                          {
                                            int v411 = *(_DWORD *)&v405[v403
                                                                  + 4
                                                                  + v406
                                                                  + *(unsigned __int16 *)&v405[v403 + 10 + v407]];
                                            if (v409 >= 0xB) {
                                              goto LABEL_654;
                                            }
                                          }
                                          else
                                          {
                                            int v411 = 0;
                                            if (v409 >= 0xB)
                                            {
LABEL_654:
                                              uint64_t v412 = *(unsigned __int16 *)&v405[v403 + 14 + v407];
                                              if (v412 && v405[v403 + 4 + v406 + v412]) {
                                                *(void *)(v344 + 8 * ((v411 & 0xFFFC0) != 0)) |= 1 << v411;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    v403 += 4;
                                  }
                                  while (v404 != v403);
                                }
                                uint64_t v413 = *v498;
                                uint64_t v414 = -v413;
                                uint64_t v415 = (char *)v498 - v413;
                                unsigned int v416 = *(unsigned __int16 *)((char *)v498 - v413);
                                if (v416 >= 0xD)
                                {
                                  if (!*((_WORD *)v415 + 6)) {
                                    goto LABEL_700;
                                  }
                                  uint64_t v417 = (int *)((char *)v498
                                               + *((unsigned __int16 *)v415 + 6)
                                               + *(unsigned int *)((char *)v498 + *((unsigned __int16 *)v415 + 6)));
                                  unint64_t v418 = *v417;
                                  uint64_t v419 = *(unsigned char **)(v6 + 1072);
                                  if (v418 > (uint64_t)(*(void *)(v6 + 1088) - (void)v419) >> 4)
                                  {
                                    uint64_t v420 = *(unsigned char **)(v6 + 1080);
                                    unint64_t v421 = (char *)operator new(16 * v418);
                                    uint64_t v422 = &v421[(v420 - v419) & 0xFFFFFFFFFFFFFFF0];
                                    unsigned int v423 = v422;
                                    if (v420 != v419)
                                    {
                                      uint64_t v424 = &v421[(v420 - v419) & 0xFFFFFFFFFFFFFFF0];
                                      do
                                      {
                                        unsigned int v423 = v424 - 16;
                                        *((_OWORD *)v424 - 1) = *((_OWORD *)v420 - 1);
                                        v420 -= 16;
                                        v424 -= 16;
                                      }
                                      while (v420 != v419);
                                    }
                                    *(void *)(v6 + 1072) = v423;
                                    *(void *)(v6 + 1080) = v422;
                                    *(void *)(v6 + 1088) = &v421[16 * v418];
                                    if (v419) {
                                      operator delete(v419);
                                    }
                                  }
                                  uint64_t v425 = 0;
                                  uint64_t v426 = *v498;
                                  unsigned int v427 = *(unsigned __int16 *)((char *)v498 - v426);
                                  if (v427 < 0x41)
                                  {
LABEL_668:
                                    if (!*v417) {
                                      goto LABEL_711;
                                    }
                                  }
                                  else
                                  {
                                    if (*(_WORD *)((char *)v498 - v426 + 64))
                                    {
                                      uint64_t v428 = (unsigned int *)((char *)v498
                                                            + *(unsigned __int16 *)((char *)v498 - v426 + 64));
                                      uint64_t v425 = (unsigned int *)((char *)v428 + *v428);
                                      goto LABEL_668;
                                    }
                                    uint64_t v425 = 0;
                                    if (!*v417)
                                    {
LABEL_711:
                                      uint64_t v414 = -v426;
                                      if (v427 < 0xB)
                                      {
LABEL_756:
                                        *(unsigned char *)(v6 + 964) = 0;
                                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(__str.__r_.__value_.__l.__data_);
                                        }
                                        *(void *)unint64_t v6 = &unk_26F8529D8;
                                        std::string __str = *(std::string *)(v6 + 616);
                                        __dst[23] = 0;
                                        __dst[0] = 0;
                                        AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::ProgramVariantESLState(v6 + 1344, a2, v503, (const std::string *)__dst, v90, (long long *)&__str);
                                      }
LABEL_700:
                                      if (!*(_WORD *)((char *)v498 + v414 + 10)) {
                                        goto LABEL_756;
                                      }
                                      std::vector<unsigned int>::pointer v448 = (unsigned int *)((char *)v498
                                                            + *(unsigned __int16 *)((char *)v498 + v414 + 10));
                                      uint64_t v449 = (unsigned int *)((char *)v448 + *v448);
                                      std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v496, *v449);
                                      unint64_t v450 = *v449;
                                      uint64_t v451 = *(unsigned char **)(v6 + 1096);
                                      if (v450 > (uint64_t)(*(void *)(v6 + 1112) - (void)v451) >> 3)
                                      {
                                        unint64_t v452 = *(unsigned char **)(v6 + 1104);
                                        unint64_t v453 = (char *)operator new(8 * v450);
                                        uint64_t v454 = v452 - v451;
                                        uint64_t v455 = &v453[(v452 - v451) & 0xFFFFFFFFFFFFFFF8];
                                        unint64_t v456 = v455;
                                        if (v452 != v451)
                                        {
                                          if ((unint64_t)(v454 - 8) < 0x58)
                                          {
                                            unint64_t v456 = &v453[(v452 - v451) & 0xFFFFFFFFFFFFFFF8];
                                            goto LABEL_717;
                                          }
                                          unint64_t v456 = &v453[(v452 - v451) & 0xFFFFFFFFFFFFFFF8];
                                          if ((unint64_t)(&v452[-(v454 & 0xFFFFFFFFFFFFFFF8)] - v453) < 0x20) {
                                            goto LABEL_776;
                                          }
                                          uint64_t v457 = v454 >> 3;
                                          unint64_t v458 = ((unint64_t)(v454 - 8) >> 3) + 1;
                                          uint64_t v459 = &v453[8 * v457 - 16];
                                          unint64_t v460 = (long long *)(v452 - 16);
                                          uint64_t v461 = v458 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v462 = *v460;
                                            *((_OWORD *)v459 - 1) = *(v460 - 1);
                                            *(_OWORD *)uint64_t v459 = v462;
                                            v459 -= 32;
                                            v460 -= 2;
                                            v461 -= 4;
                                          }
                                          while (v461);
                                          unint64_t v456 = &v455[-8 * (v458 & 0x3FFFFFFFFFFFFFFCLL)];
                                          v452 -= 8 * (v458 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v458 != (v458 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_776:
                                            do
                                            {
LABEL_717:
                                              uint64_t v463 = *((void *)v452 - 1);
                                              v452 -= 8;
                                              *((void *)v456 - 1) = v463;
                                              v456 -= 8;
                                            }
                                            while (v452 != v451);
                                          }
                                        }
                                        *(void *)(v6 + 1096) = v456;
                                        *(void *)(v6 + 1104) = v455;
                                        *(void *)(v6 + 1112) = &v453[8 * v450];
                                        if (v451) {
                                          operator delete(v451);
                                        }
                                      }
                                      if (!*v449) {
                                        goto LABEL_756;
                                      }
                                      uint64_t v464 = 0;
                                      unint64_t v495 = v6;
                                      while (2)
                                      {
                                        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v449[v464 + 1] + v449[v464 + 1]));
                                        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v508, a2, (uint64_t)__dst);
                                        uint64_t v465 = *(__n128 **)(v6 + 1128);
                                        if ((unint64_t)v465 >= *(void *)(v6 + 1136))
                                        {
                                          uint64_t v467 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v496, v508);
                                        }
                                        else
                                        {
                                          v465->n128_u64[0] = v508.n128_u64[0];
                                          unint64_t v466 = v508.n128_u64[1];
                                          v465->n128_u64[1] = v508.n128_u64[1];
                                          if (v466) {
                                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v466 + 8), 1uLL, memory_order_relaxed);
                                          }
                                          uint64_t v467 = v465 + 1;
                                        }
                                        *(void *)(v6 + 1128) = v467;
                                        uint64_t v468 = *(unsigned int *)(v508.n128_u64[0] + 96);
                                        uint64_t v469 = *(char **)(v6 + 1104);
                                        unint64_t v470 = *(void *)(v6 + 1112);
                                        if ((unint64_t)v469 < v470)
                                        {
                                          *(void *)uint64_t v469 = v468;
                                          uint64_t v471 = v469 + 8;
                                          goto LABEL_753;
                                        }
                                        uint64_t v472 = *(char **)(v6 + 1096);
                                        uint64_t v473 = (v469 - v472) >> 3;
                                        unint64_t v474 = v473 + 1;
                                        if ((unint64_t)(v473 + 1) >> 61) {
                                          abort();
                                        }
                                        uint64_t v475 = v470 - (void)v472;
                                        if (v475 >> 2 > v474) {
                                          unint64_t v474 = v475 >> 2;
                                        }
                                        if ((unint64_t)v475 >= 0x7FFFFFFFFFFFFFF8) {
                                          unint64_t v476 = 0x1FFFFFFFFFFFFFFFLL;
                                        }
                                        else {
                                          unint64_t v476 = v474;
                                        }
                                        if (v476)
                                        {
                                          if (v476 >> 61) {
                                            std::__throw_bad_array_new_length[abi:nn180100]();
                                          }
                                          uint64_t v477 = operator new(8 * v476);
                                        }
                                        else
                                        {
                                          uint64_t v477 = 0;
                                        }
                                        unint64_t v478 = &v477[8 * v473];
                                        *unint64_t v478 = v468;
                                        uint64_t v471 = v478 + 1;
                                        if (v469 == v472)
                                        {
                                          unint64_t v6 = v495;
                                        }
                                        else
                                        {
                                          unint64_t v479 = v469 - 8 - v472;
                                          if (v479 < 0x58)
                                          {
                                            unint64_t v6 = v495;
                                            goto LABEL_750;
                                          }
                                          unint64_t v6 = v495;
                                          if ((unint64_t)(v472 - v477) < 0x20) {
                                            goto LABEL_777;
                                          }
                                          uint64_t v480 = (v479 >> 3) + 1;
                                          uint64_t v481 = &v477[8 * v473 - 16];
                                          unint64_t v482 = v469 - 16;
                                          uint64_t v483 = v480 & 0x3FFFFFFFFFFFFFFCLL;
                                          do
                                          {
                                            long long v484 = *(_OWORD *)v482;
                                            *(v481 - 1) = *((_OWORD *)v482 - 1);
                                            *uint64_t v481 = v484;
                                            v481 -= 2;
                                            v482 -= 32;
                                            v483 -= 4;
                                          }
                                          while (v483);
                                          v478 -= v480 & 0x3FFFFFFFFFFFFFFCLL;
                                          v469 -= 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
                                          if (v480 != (v480 & 0x3FFFFFFFFFFFFFFCLL))
                                          {
LABEL_777:
                                            do
                                            {
LABEL_750:
                                              uint64_t v485 = *((void *)v469 - 1);
                                              v469 -= 8;
                                              *--unint64_t v478 = v485;
                                            }
                                            while (v469 != v472);
                                          }
                                        }
                                        *(void *)(v6 + 1096) = v478;
                                        *(void *)(v6 + 1104) = v471;
                                        *(void *)(v6 + 1112) = &v477[8 * v476];
                                        if (v472) {
                                          operator delete(v472);
                                        }
LABEL_753:
                                        uint64_t v90 = v507;
                                        *(void *)(v6 + 1104) = v471;
                                        long long v486 = (std::__shared_weak_count *)v508.n128_u64[1];
                                        if (v508.n128_u64[1]
                                          && !atomic_fetch_add((atomic_ullong *volatile)(v508.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                        {
                                          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
                                          std::__shared_weak_count::__release_weak(v486);
                                        }
                                        if (v512 < 0) {
                                          operator delete(v511[0]);
                                        }
                                        if (++v464 >= (unint64_t)*v449) {
                                          goto LABEL_756;
                                        }
                                        continue;
                                      }
                                    }
                                  }
                                  unint64_t v429 = 0;
                                  uint64_t v430 = v417 + 1;
                                  do
                                  {
                                    if (v425 && *v425) {
                                      uint64_t v432 = *(void *)&v425[2 * v429 + 1];
                                    }
                                    else {
                                      uint64_t v432 = 0;
                                    }
                                    uint64_t v433 = *(void *)&v430[2 * v429];
                                    unsigned int v434 = *(void **)(v6 + 1080);
                                    unint64_t v435 = *(void *)(v6 + 1088);
                                    if ((unint64_t)v434 < v435)
                                    {
                                      *unsigned int v434 = v433;
                                      v434[1] = v432;
                                      uint64_t v431 = v434 + 2;
                                    }
                                    else
                                    {
                                      unint64_t v436 = (void *)*v497;
                                      uint64_t v437 = ((uint64_t)v434 - *v497) >> 4;
                                      unint64_t v438 = v437 + 1;
                                      if ((unint64_t)(v437 + 1) >> 60) {
                                        abort();
                                      }
                                      uint64_t v439 = v435 - (void)v436;
                                      if (v439 >> 3 > v438) {
                                        unint64_t v438 = v439 >> 3;
                                      }
                                      if ((unint64_t)v439 >= 0x7FFFFFFFFFFFFFF0) {
                                        unint64_t v440 = 0xFFFFFFFFFFFFFFFLL;
                                      }
                                      else {
                                        unint64_t v440 = v438;
                                      }
                                      if (v440)
                                      {
                                        if (v440 >> 60) {
                                          std::__throw_bad_array_new_length[abi:nn180100]();
                                        }
                                        uint64_t v441 = (char *)operator new(16 * v440);
                                      }
                                      else
                                      {
                                        uint64_t v441 = 0;
                                      }
                                      unint64_t v442 = &v441[16 * v437];
                                      *(void *)unint64_t v442 = v433;
                                      *((void *)v442 + 1) = v432;
                                      unint64_t v443 = v442;
                                      if (v434 != v436)
                                      {
                                        do
                                        {
                                          *((_OWORD *)v443 - 1) = *((_OWORD *)v434 - 1);
                                          v443 -= 16;
                                          v434 -= 2;
                                        }
                                        while (v434 != v436);
                                        unsigned int v434 = (void *)*v497;
                                      }
                                      *(void *)(v6 + 1072) = v443;
                                      uint64_t v431 = v442 + 16;
                                      *(void *)(v6 + 1080) = v442 + 16;
                                      *(void *)(v6 + 1088) = &v441[16 * v440];
                                      if (v434) {
                                        operator delete(v434);
                                      }
                                      uint64_t v90 = v507;
                                      uint64_t v430 = v417 + 1;
                                    }
                                    *(void *)(v6 + 1080) = v431;
                                    ++v429;
                                  }
                                  while (v429 < *v417);
                                  uint64_t v447 = *v498;
                                  uint64_t v414 = -v447;
                                  unsigned int v416 = *(unsigned __int16 *)((char *)v498 - v447);
                                }
                                if (v416 < 0xB) {
                                  goto LABEL_756;
                                }
                                goto LABEL_700;
                              }
                            }
                          }
LABEL_384:
                          if (v188 < 0x21) {
                            goto LABEL_388;
                          }
                          goto LABEL_385;
                        }
LABEL_383:
                        *(unsigned char *)(v6 + 1147) = 0;
                        goto LABEL_384;
                      }
                    }
                  }
                  uint64_t v185 = 0;
                  goto LABEL_333;
                }
                goto LABEL_319;
              }
              if (v176 >= 0x27)
              {
                uint64_t v177 = v175[19];
                if (v175[19])
                {
                  int v179 = *((unsigned __int8 *)v50 + v177);
                  if (*((unsigned char *)v50 + v177))
                  {
                    BOOL v178 = 1;
LABEL_320:
                    LOBYTE(v177) = v179 != 0;
                    goto LABEL_321;
                  }
                }
                if (v176 >= 0x29 && (uint64_t v180 = v175[20]) != 0)
                {
                  BOOL v178 = *((unsigned char *)v50 + v180) != 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
                else
                {
                  BOOL v178 = 0;
                  if (!v177) {
                    goto LABEL_321;
                  }
                }
LABEL_319:
                int v179 = *((unsigned __int8 *)v50 + v177);
                goto LABEL_320;
              }
            }
            BOOL v178 = 0;
            LOBYTE(v177) = 0;
            goto LABEL_321;
          }
        }
        else
        {
          unsigned int v103 = (unsigned int **)(v503 + 108);
          unsigned int v104 = (unsigned int *)v503[108];
          if (!v104) {
            goto LABEL_258;
          }
        }
        if (v103[1])
        {
          uint64_t v105 = (int *)((char *)v104 + *v104);
          uint64_t v106 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v106 < 0xDu)
          {
            LODWORD(v107) = 0;
          }
          else
          {
            uint64_t v107 = v106[6];
            if (v107) {
              LODWORD(v107) = *(int *)((char *)v105 + v107);
            }
          }
          *(_DWORD *)(v6 + 1180) = v107;
          uint64_t v108 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v108 < 0xBu)
          {
            LODWORD(v109) = 0;
          }
          else
          {
            uint64_t v109 = v108[5];
            if (v109) {
              LODWORD(v109) = *(int *)((char *)v105 + v109);
            }
          }
          *(_DWORD *)(v6 + 1188) = v109;
          uint64_t v110 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v110 < 0x11u)
          {
            LODWORD(v111) = 0;
          }
          else
          {
            uint64_t v111 = v110[8];
            if (v111) {
              LODWORD(v111) = *(int *)((char *)v105 + v111);
            }
          }
          *(_DWORD *)(v6 + 1192) = v111;
          unsigned int v112 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v112 < 0x13u)
          {
            LODWORD(v113) = 0;
          }
          else
          {
            uint64_t v113 = v112[9];
            if (v113) {
              LODWORD(v113) = *(int *)((char *)v105 + v113);
            }
          }
          *(_DWORD *)(v6 + 1196) = v113;
          uint64_t v114 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v114 < 0x17u)
          {
            LODWORD(v115) = 0;
          }
          else
          {
            uint64_t v115 = v114[11];
            if (v115) {
              LODWORD(v115) = *(int *)((char *)v105 + v115);
            }
          }
          *(_DWORD *)(v6 + 1200) = v115;
          uint64_t v116 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v116 < 0x1Bu)
          {
            LODWORD(v117) = 0;
          }
          else
          {
            uint64_t v117 = v116[13];
            if (v117) {
              LODWORD(v117) = *(int *)((char *)v105 + v117);
            }
          }
          *(_DWORD *)(v6 + 1204) = v117;
          int v118 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v118 < 0x15u)
          {
            LODWORD(v119) = 0;
          }
          else
          {
            uint64_t v119 = v118[10];
            if (v119) {
              LODWORD(v119) = *(int *)((char *)v105 + v119);
            }
          }
          *(_DWORD *)(v6 + 1208) = v119;
          uint64_t v120 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v120 < 0x19u)
          {
            LODWORD(v121) = 0;
          }
          else
          {
            uint64_t v121 = v120[12];
            if (v121) {
              LODWORD(v121) = *(int *)((char *)v105 + v121);
            }
          }
          *(_DWORD *)(v6 + 1212) = v121;
          uint64_t v122 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v122 < 0x1Du)
          {
            LODWORD(v123) = 0;
          }
          else
          {
            uint64_t v123 = v122[14];
            if (v123) {
              LODWORD(v123) = *(int *)((char *)v105 + v123);
            }
          }
          *(_DWORD *)(v6 + 1216) = v123;
          int v124 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v124 < 0xFu)
          {
            LODWORD(v125) = 0;
          }
          else
          {
            uint64_t v125 = v124[7];
            if (v125) {
              LODWORD(v125) = *(int *)((char *)v105 + v125);
            }
          }
          *(_DWORD *)(v6 + 1220) = v125;
          uint64_t v126 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v126 < 0x1Fu)
          {
            LODWORD(v127) = 0;
          }
          else
          {
            uint64_t v127 = v126[15];
            if (v127) {
              LODWORD(v127) = *(int *)((char *)v105 + v127);
            }
          }
          *(_DWORD *)(v6 + 1224) = v127;
          int v128 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v128 < 0x21u)
          {
            LODWORD(v129) = 0;
          }
          else
          {
            uint64_t v129 = v128[16];
            if (v129) {
              LODWORD(v129) = *(int *)((char *)v105 + v129);
            }
          }
          *(_DWORD *)(v6 + 1228) = v129;
          uint64_t v130 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v130 < 0x23u)
          {
            LODWORD(v131) = 0;
          }
          else
          {
            uint64_t v131 = v130[17];
            if (v131) {
              LODWORD(v131) = *(int *)((char *)v105 + v131);
            }
          }
          *(_DWORD *)(v6 + 1232) = v131;
          uint64_t v132 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v132 < 0x25u)
          {
            LODWORD(v133) = 0;
          }
          else
          {
            uint64_t v133 = v132[18];
            if (v133) {
              LODWORD(v133) = *(int *)((char *)v105 + v133);
            }
          }
          *(_DWORD *)(v6 + 1236) = v133;
          uint64_t v134 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v134 < 0x27u)
          {
            LODWORD(v135) = 0;
          }
          else
          {
            uint64_t v135 = v134[19];
            if (v135) {
              LODWORD(v135) = *(int *)((char *)v105 + v135);
            }
          }
          *(_DWORD *)(v6 + 1240) = v135;
          uint64_t v136 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v136 < 0x29u)
          {
            LODWORD(v137) = 0;
          }
          else
          {
            uint64_t v137 = v136[20];
            if (v137) {
              LODWORD(v137) = *(int *)((char *)v105 + v137);
            }
          }
          *(_DWORD *)(v6 + 1244) = v137;
          uint64_t v138 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v138 < 0x2Bu)
          {
            LODWORD(v139) = 0;
          }
          else
          {
            uint64_t v139 = v138[21];
            if (v139) {
              LODWORD(v139) = *(int *)((char *)v105 + v139);
            }
          }
          *(_DWORD *)(v6 + 1248) = v139;
          uint64_t v140 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v140 < 7u)
          {
            LODWORD(v141) = 0;
          }
          else
          {
            uint64_t v141 = v140[3];
            if (v141) {
              LODWORD(v141) = *(int *)((char *)v105 + v141);
            }
          }
          *(_DWORD *)(v6 + 1252) = v141;
          uint64_t v142 = (unsigned __int16 *)((char *)v105 - *v105);
          if (*v142 >= 5u && (uint64_t v143 = v142[2]) != 0) {
            int v144 = *(int *)((char *)v105 + v143);
          }
          else {
            int v144 = 0;
          }
          *(_DWORD *)(v6 + 1260) = v144;
        }
        goto LABEL_258;
      }
      uint64_t v51 = (int *)((char *)*v49 + **v49);
      unint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
      unsigned int v53 = *v52;
      if (v52[2])
      {
        uint64_t v54 = (int *)((char *)v51 + v52[2] + *(unsigned int *)((char *)v51 + v52[2]));
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v54 = 0;
        if (v53 < 7) {
          goto LABEL_104;
        }
      }
      uint64_t v55 = v52[3];
      if (v55)
      {
        uint64_t v56 = (char *)v51 + v55 + *(unsigned int *)((char *)v51 + v55);
        if (!*v54) {
          goto LABEL_143;
        }
        goto LABEL_105;
      }
LABEL_104:
      uint64_t v56 = 0;
      if (!*v54) {
        goto LABEL_143;
      }
LABEL_105:
      uint64_t v57 = 0;
      long long v500 = v56 + 4;
      int8x16_t v501 = v54 + 1;
      while (1)
      {
        unint64_t v59 = (char *)&v501[v57 + 1] + v501[v57];
        size_t v60 = strlen(v59);
        if (v60 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v61 = v60;
        if (v60 >= 0x17) {
          break;
        }
        __dst[23] = v60;
        uint64_t v62 = __dst;
        if (v60) {
          goto LABEL_115;
        }
LABEL_116:
        v62[v61] = 0;
        unint64_t v65 = *(void *)(v6 + 1280);
        if (v65 >= *(void *)(v6 + 1288))
        {
          unint64_t v66 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(v6 + 1272), (uint64_t)__dst);
          int v67 = __dst[23];
          *(void *)(v6 + 1280) = v66;
          if (v67 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v65 = *(_OWORD *)__dst;
          *(void *)(v65 + 16) = *(void *)&__dst[16];
          *(void *)(v6 + 1280) = v65 + 24;
        }
        int v68 = *(_DWORD *)&v500[4 * v57];
        int v69 = *(char **)(v6 + 1304);
        unint64_t v70 = *(void *)(v6 + 1312);
        if ((unint64_t)v69 >= v70)
        {
          unint64_t v71 = v54;
          uint64_t v72 = *(char **)(v6 + 1296);
          uint64_t v73 = (v69 - v72) >> 2;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62) {
            abort();
          }
          uint64_t v75 = v70 - (void)v72;
          if (v75 >> 1 > v74) {
            unint64_t v74 = v75 >> 1;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v74;
          }
          if (v76)
          {
            if (v76 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v77 = operator new(4 * v76);
          }
          else
          {
            uint64_t v77 = 0;
          }
          unint64_t v78 = &v77[4 * v73];
          *unint64_t v78 = v68;
          uint64_t v58 = v78 + 1;
          if (v69 == v72)
          {
            uint64_t v50 = v499;
          }
          else
          {
            unint64_t v79 = v69 - 4 - v72;
            if (v79 < 0x2C)
            {
              uint64_t v50 = v499;
              goto LABEL_139;
            }
            uint64_t v50 = v499;
            if ((unint64_t)(v72 - v77) < 0x20) {
              goto LABEL_778;
            }
            uint64_t v80 = (v79 >> 2) + 1;
            unsigned int v81 = &v77[4 * v73 - 16];
            uint64_t v82 = v69 - 16;
            uint64_t v83 = v80 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              _OWORD *v81 = v84;
              v81 -= 2;
              v82 -= 32;
              v83 -= 8;
            }
            while (v83);
            v78 -= v80 & 0x7FFFFFFFFFFFFFF8;
            v69 -= 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
            if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_778:
              do
              {
LABEL_139:
                int v85 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *--unint64_t v78 = v85;
              }
              while (v69 != v72);
            }
          }
          *(void *)(v6 + 1296) = v78;
          *(void *)(v6 + 1304) = v58;
          *(void *)(v6 + 1312) = &v77[4 * v76];
          if (v72) {
            operator delete(v72);
          }
          uint64_t v54 = v71;
          goto LABEL_107;
        }
        *(_DWORD *)int v69 = v68;
        uint64_t v58 = v69 + 4;
LABEL_107:
        *(void *)(v6 + 1304) = v58;
        if (++v57 >= (unint64_t)*v54) {
          goto LABEL_143;
        }
      }
      uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17) {
        uint64_t v63 = v60 | 7;
      }
      uint64_t v64 = v63 + 1;
      uint64_t v62 = operator new(v63 + 1);
      *(void *)&__dst[8] = v61;
      *(void *)&__dst[16] = v64 | 0x8000000000000000;
      *(void *)std::string __dst = v62;
LABEL_115:
      memmove(v62, v59, v61);
      goto LABEL_116;
    }
    size_t v43 = *(void *)(a3 + 8);
    if (v43 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    size_t v44 = *(const void **)a3;
    if (v43 >= 0x17)
    {
      uint64_t v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17) {
        uint64_t v46 = v43 | 7;
      }
      uint64_t v47 = v46 + 1;
      uint64_t v45 = operator new(v46 + 1);
      *(void *)&__dst[8] = v43;
      *(void *)&__dst[16] = v47 | 0x8000000000000000;
      *(void *)std::string __dst = v45;
    }
    else
    {
      __dst[23] = *(void *)(a3 + 8);
      uint64_t v45 = __dst;
      if (!v43) {
        goto LABEL_82;
      }
    }
    memmove(v45, v44, v43);
LABEL_82:
    v45[v43] = 0;
    if (*(char *)(v6 + 991) < 0) {
      operator delete(*v487);
    }
    *(_OWORD *)uint64_t v487 = *(_OWORD *)__dst;
    *(void *)(v6 + 984) = *(void *)&__dst[16];
    uint64_t v48 = (void *)(a3 + 24);
    if (*(void *)(a3 + 24))
    {
      if (!*(void *)(a3 + 32)) {
        uint64_t v48 = (void *)(a3 + 584);
      }
    }
    else
    {
      uint64_t v48 = (void *)(a3 + 584);
    }
    *(void *)(v6 + 992) = *v48 - *(void *)a3;
    goto LABEL_90;
  }
  if (v18 < 0x45)
  {
    if (v18 < 0x3D)
    {
      LOWORD(v23) = 0;
      if (v18 < 0x3B)
      {
        LODWORD(v25) = 0;
        uint64_t v24 = 0;
        LOWORD(v22) = 0;
        LOBYTE(v26) = 0;
LABEL_53:
        *(_DWORD *)(a1 + 288) = v25;
        __int16 v27 = v23 + v25 - 1;
        int v28 = -(int)v25;
        uint64_t v29 = *(void *)(a1 + 296);
        unint64_t v30 = (unsigned __int16)v22 | ((unint64_t)(unsigned __int16)(v28 & v27) << 32) | (v24 << 48) | (v26 << 16) | (unint64_t)(v29 & 0xFF000000);
        *(void *)(a1 + 296) = v30;
        if (v30 != v29)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v31 = -1;
          *((void *)&v31 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v31;
          *(_OWORD *)(a1 + 360) = v31;
          *(_OWORD *)(a1 + 376) = v31;
        }
        goto LABEL_55;
      }
      LOWORD(v22) = 0;
      uint64_t v24 = v17[29];
      if (!v17[29])
      {
LABEL_38:
        if (v18 < 0x3F)
        {
          LODWORD(v25) = 0;
          LOBYTE(v26) = 0;
        }
        else
        {
          uint64_t v25 = v17[31];
          if (v17[31]) {
            uint64_t v25 = *(void *)((char *)v16 + v25);
          }
          if (v18 < 0x4B)
          {
            LOBYTE(v26) = 0;
          }
          else
          {
            uint64_t v26 = v17[37];
            if (v26) {
              LODWORD(v26) = *(int *)((char *)v16 + v26);
            }
          }
        }
        goto LABEL_53;
      }
LABEL_37:
      uint64_t v24 = *(void *)((char *)v16 + v24);
      goto LABEL_38;
    }
    LOWORD(v22) = 0;
    uint64_t v23 = v17[30];
    if (v17[30]) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v22 = v17[34];
    if (v17[34]) {
      uint64_t v22 = *(void *)((char *)v16 + v22);
    }
    uint64_t v23 = v17[30];
    if (v17[30]) {
LABEL_35:
    }
      uint64_t v23 = *(void *)((char *)v16 + v23);
  }
  uint64_t v24 = v17[29];
  if (!v17[29]) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

void sub_242ACFDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, CompileStatistics *a16, void **a17, uint64_t a18, void **a19, void **a20,void **a21,void **a22,uint64_t a23,void **a24,void **a25,void **a26,uint64_t a27,void **a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39)
{
  CompileStatistics::~CompileStatistics(a16);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v39 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a28);
  size_t v43 = *(void **)(v39 + 1096);
  if (v43)
  {
    *(void *)(v39 + 1104) = v43;
    operator delete(v43);
  }
  size_t v44 = *a30;
  if (*a30)
  {
    *(void *)(v39 + 1080) = v44;
    operator delete(v44);
  }
  if (*a9 < 0)
  {
    operator delete(*a10);
    if ((*(char *)(v39 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v39 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v39 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a24);
  if (*(char *)(v39 + 575) < 0)
  {
LABEL_8:
    operator delete(*a25);
    if ((*(char *)(v39 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a37);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a13);
      uint64_t v45 = *a19;
      if (*a19)
      {
        *(void *)(v39 + 176) = v45;
        operator delete(v45);
      }
      uint64_t v46 = *a21;
      if (*a21)
      {
        *(void *)(v39 + 152) = v46;
        operator delete(v46);
      }
      uint64_t v47 = *a20;
      if (*a20)
      {
        *(void *)(v39 + 128) = v47;
        operator delete(v47);
      }
      uint64_t v48 = *a22;
      if (*a22)
      {
        *(void *)(v39 + 104) = v48;
        operator delete(v48);
      }
      unsigned int v49 = *a17;
      if (*a17)
      {
        *(void *)(v39 + 80) = v49;
        operator delete(v49);
        uint64_t v50 = *v40;
        if (!*v40)
        {
LABEL_24:
          if (*(char *)(v41 - 185) < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v50 = *v40;
        if (!*v40) {
          goto LABEL_24;
        }
      }
      *(void *)(v39 + 56) = v50;
      operator delete(v50);
      if (*(char *)(v41 - 185) < 0)
      {
LABEL_25:
        operator delete(*(void **)(v41 - 208));
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a26);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v39 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::TileDispatchVertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::TileDispatchVertexProgramVariant(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v517 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(void *)a1 = &unk_26F8530A8;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  long long v7 = (std::vector<unsigned int> *)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v494 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 144) = 0u;
  unint64_t v493 = (void *)(a1 + 144);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 264) = a1 + 272;
  *(void *)(a1 + 288) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 296) = 1610612736;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)(a1 + 344) = v8;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v8;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 520) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(void *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 964) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  unint64_t v497 = (unint64_t *)(a1 + 528);
  *(_OWORD *)(a1 + 585) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 991) = 0u;
  *(_OWORD *)(a1 + 1007) = 0u;
  *(_OWORD *)(a1 + 1023) = 0u;
  *(void *)(a1 + 1036) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1146) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  uint64_t v509 = (uint64_t **)(a1 + 1160);
  *(void *)(a1 + 1152) = a1 + 1160;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  if (*(void *)(a3 + 224))
  {
    uint64_t v9 = (unsigned int **)(a3 + 784);
    if (*(void *)(a3 + 232)) {
      uint64_t v9 = (unsigned int **)(a3 + 224);
    }
  }
  else
  {
    uint64_t v9 = (unsigned int **)(a3 + 784);
  }
  uint64_t v10 = 0;
  if (*v9 && v9[1]) {
    uint64_t v10 = (int *)((char *)*v9 + **v9);
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0)
  {
    char v502 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    if (!*(void *)(a3 + 464))
    {
LABEL_12:
      uint64_t v13 = (unsigned int **)(a3 + 1024);
      goto LABEL_17;
    }
  }
  else
  {
    char v502 = 0;
    if (!*(void *)(a3 + 464)) {
      goto LABEL_12;
    }
  }
  if (*(void *)(a3 + 472)) {
    uint64_t v13 = (unsigned int **)(a3 + 464);
  }
  else {
    uint64_t v13 = (unsigned int **)(a3 + 1024);
  }
LABEL_17:
  uint64_t v14 = 0;
  if (*v13 && v13[1]) {
    uint64_t v14 = (int *)((char *)*v13 + **v13);
  }
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
    unint64_t v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    unint64_t v17 = 0;
  }
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  unsigned int v19 = *v18;
  if (v19 < 0x25)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    uint64_t v20 = v18[18];
    if (v18[18]) {
      LOBYTE(v20) = *((unsigned char *)v17 + v20) != 0;
    }
  }
  *(unsigned char *)(a1 + 1145) = v20;
  uint64_t v21 = (unsigned __int16 *)((char *)v502 - *v502);
  if (*v21 < 0x55u || (uint64_t v22 = v21[42]) == 0 || !*((unsigned char *)v502 + v22))
  {
LABEL_55:
    uint64_t v33 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v33 < 7u)
    {
      LODWORD(v34) = 0;
    }
    else
    {
      uint64_t v34 = v33[3];
      if (v34) {
        LODWORD(v34) = *(int *)((char *)v17 + v34);
      }
    }
    uint64_t v491 = (void *)(a1 + 168);
    uint64_t v492 = (void *)(a1 + 120);
    uint64_t v498 = a1 + 1120;
    *(_DWORD *)(a1 + 512) = v34;
    uint64_t v35 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v35 >= 0x13u && (uint64_t v36 = v35[9]) != 0) {
      long long v37 = (char *)v17 + v36 + *(unsigned int *)((char *)v17 + v36) + 4;
    }
    else {
      long long v37 = "";
    }
    unint64_t v495 = (std::string *)(a1 + 576);
    uint64_t v496 = (unint64_t *)(a1 + 552);
    unint64_t v490 = (void **)(a1 + 968);
    long long v500 = (void *)(a1 + 1072);
    MEMORY[0x24566EB20](v497, v37);
    uint64_t v38 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v38 >= 9u && (uint64_t v39 = v38[4]) != 0) {
      int v40 = (char *)v17 + v39 + *(unsigned int *)((char *)v17 + v39) + 4;
    }
    else {
      int v40 = "";
    }
    MEMORY[0x24566EB20](v496, v40);
    uint64_t v41 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v41 < 0x29u)
    {
      LOBYTE(v42) = 0;
    }
    else
    {
      uint64_t v42 = v41[20];
      if (v42) {
        LOBYTE(v42) = *((unsigned char *)v17 + v42) != 0;
      }
    }
    *(unsigned char *)(a1 + 600) = v42;
    std::string::operator=(v495, &__str);
    size_t v43 = (unsigned __int16 *)((char *)v17 - *v17);
    __n128 v508 = v7;
    if (*v43 < 5u || !v43[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_90:
      uint64_t v511 = a4;
      int8x16_t v501 = (void *)a3;
      uint64_t v504 = v17;
      if (*(void *)(a3 + 344))
      {
        uint64_t v50 = (unsigned int **)(a3 + 344);
        if (!*(void *)(a3 + 352)) {
          uint64_t v50 = (unsigned int **)(a3 + 904);
        }
        uint64_t v51 = *v50;
        if (!*v50)
        {
LABEL_143:
          if (v501[68])
          {
            uint64_t v87 = (unsigned int **)(v501 + 68);
            if (!v501[69]) {
              uint64_t v87 = (unsigned int **)(v501 + 138);
            }
          }
          else
          {
            uint64_t v87 = (unsigned int **)(v501 + 138);
          }
          BOOL v89 = *v87;
          int v88 = v87[1];
          if (v89) {
            BOOL v90 = v88 == 0;
          }
          else {
            BOOL v90 = 1;
          }
          if (v90
            || (int v91 = (int *)((char *)v89 + *v89), v92 = (unsigned __int16 *)((char *)v91 - *v91), *v92 < 5u)
            || (uint64_t v93 = v92[2]) == 0)
          {
            uint64_t v94 = 0;
          }
          else
          {
            uint64_t v94 = *(void *)((char *)v91 + v93);
          }
          if (getTimebaseInfo(void)::once != -1) {
            dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
          }
          *(float *)(a1 + 1184) = (float)(v94
                                        * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                        / *(unsigned int *)algn_268D5B048)
                                / 1000000.0;
          uint64_t v95 = (unsigned __int16 *)((char *)v502 - *v502);
          if (*v95 < 5u)
          {
            LODWORD(v96) = 0;
          }
          else
          {
            uint64_t v96 = v95[2];
            if (v96) {
              LODWORD(v96) = *(int *)((char *)v502 + v96);
            }
          }
          *(_DWORD *)(a1 + 1176) = v96;
          uint64_t v97 = (unsigned __int16 *)((char *)v502 - *v502);
          if (*v97 < 0x2Du)
          {
            LODWORD(v98) = 0;
          }
          else
          {
            uint64_t v98 = v97[22];
            if (v98) {
              LODWORD(v98) = *(int *)((char *)v502 + v98);
            }
          }
          *(_DWORD *)(a1 + 1180) = v98;
          uint64_t v99 = (unsigned __int16 *)((char *)v502 - *v502);
          if (*v99 < 0x35u)
          {
            LODWORD(v100) = 0;
          }
          else
          {
            uint64_t v100 = v99[26];
            if (v100) {
              LODWORD(v100) = *(int *)((char *)v502 + v100);
            }
          }
          *(_DWORD *)(a1 + 1220) = v100;
          uint64_t v101 = (unsigned __int16 *)((char *)v502 - *v502);
          if (*v101 < 0x43u)
          {
            LODWORD(v102) = 0;
          }
          else
          {
            uint64_t v102 = v101[33];
            if (v102) {
              LODWORD(v102) = *(int *)((char *)v502 + v102);
            }
          }
          *(_DWORD *)(a1 + 1256) = v102;
          if (v501[38])
          {
            unsigned int v103 = (unsigned int **)(v501 + 38);
            if (!v501[39]) {
              unsigned int v103 = (unsigned int **)(v501 + 108);
            }
            unsigned int v104 = *v103;
            if (!*v103)
            {
LABEL_258:
              if (v501[53])
              {
                uint64_t v145 = v501[54];
                if (v145) {
                  uint64_t v146 = v501[53];
                }
                else {
                  uint64_t v146 = v501[123];
                }
                if (v145) {
                  int8x16_t v147 = v501 + 53;
                }
                else {
                  int8x16_t v147 = v501 + 123;
                }
              }
              else
              {
                int8x16_t v147 = v501 + 123;
                uint64_t v146 = v501[123];
              }
              MEMORY[0x24566EB30](a1 + 1320, v146, v147[1]);
              std::string::push_back((std::string *)(a1 + 1320), 0);
              uint64_t v148 = *v502;
              int32x4_t v149 = (char *)v502 - v148;
              unsigned int v150 = *(unsigned __int16 *)((char *)v502 - v148);
              if (v150 < 0x39) {
                goto LABEL_284;
              }
              uint64_t v151 = -v148;
              uint64_t v152 = *((unsigned __int16 *)v149 + 28);
              if (v152)
              {
                uint64_t v153 = (int *)((char *)v502 + v152 + *(unsigned int *)((char *)v502 + v152));
                if (*v153)
                {
                  *(unsigned char *)(a1 + 1064) = 1;
                  uint64_t v154 = (_DWORD *)((char *)v153 + v153[1] + 4);
                  uint64_t v155 = (unsigned __int16 *)((char *)v154 - *v154);
                  if (*v155 >= 9u && (uint64_t v156 = v155[4]) != 0) {
                    int v157 = *(int *)((char *)v154 + v156);
                  }
                  else {
                    int v157 = 0;
                  }
                  *(_DWORD *)(a1 + 1264) = v157;
                  *(unsigned char *)(a1 + 1268) = 1;
                  uint64_t v158 = *v502;
                  uint64_t v151 = -v158;
                  unsigned int v150 = *(unsigned __int16 *)((char *)v502 - v158);
                }
              }
              if (v150 < 0x3B) {
                goto LABEL_284;
              }
              uint64_t v159 = (char *)v502 + v151;
              if (*((_WORD *)v159 + 29))
              {
                uint64_t v160 = (unsigned int *)((char *)v502
                                      + *((unsigned __int16 *)v159 + 29)
                                      + *(unsigned int *)((char *)v502 + *((unsigned __int16 *)v159 + 29)));
                uint64_t v161 = *v160;
                if (v161)
                {
                  uint64_t v162 = v160 + 1;
                  do
                  {
                    unsigned int v164 = *v162++;
                    unsigned int v163 = v164;
                    if (!(v164 >> 20)) {
                      *(void *)(a1 + 1048 + 8 * (v163 > 0x3F)) |= 1 << v163;
                    }
                    --v161;
                  }
                  while (v161);
                }
              }
              if (v150 < 0x57)
              {
LABEL_284:
                LODWORD(v165) = 0;
              }
              else
              {
                uint64_t v165 = *((unsigned __int16 *)v159 + 43);
                if (*((_WORD *)v159 + 43)) {
                  LODWORD(v165) = *(int *)((char *)v502 + v165);
                }
              }
              *(_DWORD *)(a1 + 400) = v165;
              uint64_t v166 = (unsigned __int16 *)((char *)v502 - *v502);
              if (*v166 >= 0x21u && (uint64_t v167 = v166[16]) != 0) {
                int v168 = *(int *)((char *)v502 + v167);
              }
              else {
                int v168 = 0;
              }
              {
                getAdditionalSpillBufferBytes(void)::extra = 0;
              }
              *(_DWORD *)(a1 + 404) = getAdditionalSpillBufferBytes(void)::extra + v168;
              uint64_t v169 = (unsigned __int16 *)((char *)v502 - *v502);
              if (*v169 < 0x59u)
              {
                LODWORD(v170) = 0;
              }
              else
              {
                uint64_t v170 = v169[44];
                if (v170) {
                  LODWORD(v170) = *(int *)((char *)v502 + v170);
                }
              }
              *(_DWORD *)(a1 + 432) = v170;
              uint64_t v171 = (unsigned __int16 *)((char *)v502 - *v502);
              if (*v171 < 0x51u)
              {
                LODWORD(v172) = 0;
              }
              else
              {
                uint64_t v172 = v171[40];
                if (v172) {
                  LODWORD(v172) = *(int *)((char *)v502 + v172);
                }
              }
              *(_DWORD *)(a1 + 436) = v172;
              uint64_t v173 = (unsigned __int16 *)((char *)v502 - *v502);
              if (*v173 < 0x4Bu)
              {
                LODWORD(v174) = 0;
              }
              else
              {
                uint64_t v174 = v173[37];
                if (v174) {
                  LODWORD(v174) = *(int *)((char *)v502 + v174);
                }
              }
              *(_DWORD *)(a1 + 444) = v174;
              uint64_t v175 = (unsigned __int16 *)((char *)v502 - *v502);
              unsigned int v176 = *v175;
              if (v176 >= 0x25)
              {
                if (v175[18] && *((unsigned char *)v502 + v175[18]))
                {
                  if (v176 < 0x27)
                  {
                    LOBYTE(v177) = 0;
                    BOOL v178 = 1;
                    goto LABEL_321;
                  }
                  LODWORD(v177) = v175[19];
                  BOOL v178 = 1;
                  if (!v175[19])
                  {
LABEL_321:
                    *(unsigned char *)(a1 + 454) = v177;
                    int v181 = (unsigned __int16 *)((char *)v504 - *v504);
                    unsigned int v182 = *v181;
                    if (v182 < 0x21)
                    {
                      uint64_t v184 = 0;
                      LODWORD(v183) = 0;
                    }
                    else
                    {
                      uint64_t v183 = v181[16];
                      if (v181[16]) {
                        LODWORD(v183) = *(int *)((char *)v504 + v183);
                      }
                      if (v182 < 0x4D)
                      {
                        uint64_t v184 = 0;
                      }
                      else
                      {
                        uint64_t v184 = v181[38];
                        if (v181[38]) {
                          uint64_t v184 = *(unsigned int *)((char *)v504 + v184);
                        }
                        if (v182 >= 0x4F)
                        {
                          uint64_t v185 = v181[39];
                          if (v185) {
                            uint64_t v185 = *(void *)((char *)v504 + v185);
                          }
LABEL_333:
                          *(void *)(a1 + 496) = v183 | (unint64_t)(v184 << 32);
                          *(void *)(a1 + 504) = v185;
                          *(unsigned char *)(a1 + 458) = v178 | v177;
                          uint64_t v186 = *v502;
                          unint64_t v187 = (char *)v502 - v186;
                          unsigned int v188 = *(unsigned __int16 *)((char *)v502 - v186);
                          if (v188 < 0x37)
                          {
                            LOBYTE(v189) = 0;
                          }
                          else
                          {
                            uint64_t v189 = *((unsigned __int16 *)v187 + 27);
                            if (*((_WORD *)v187 + 27)) {
                              LOBYTE(v189) = *((unsigned char *)v502 + v189) != 0;
                            }
                          }
                          *(unsigned char *)(a1 + 453) = v189;
                          uint64_t v190 = (unsigned __int16 *)((char *)v504 - *v504);
                          unsigned int v191 = *v190;
                          if (v191 < 0x33)
                          {
                            LOBYTE(v192) = 0;
                          }
                          else
                          {
                            uint64_t v192 = v190[25];
                            if (v190[25]) {
                              LOBYTE(v192) = *((unsigned char *)v504 + v192) != 0;
                            }
                          }
                          uint64_t v193 = -v186;
                          *(unsigned char *)(a1 + 459) = v192;
                          if (v188 < 0x3F)
                          {
                            LOBYTE(v194) = 0;
                          }
                          else
                          {
                            uint64_t v194 = *((unsigned __int16 *)v187 + 31);
                            if (v194)
                            {
                              uint64_t v195 = (unsigned int *)((char *)v502 + v194 + *(unsigned int *)((char *)v502 + v194));
                              uint64_t v194 = *v195;
                              if (v194)
                              {
                                unsigned int v196 = v195 + 1;
                                while (1)
                                {
                                  unsigned int v198 = *v196++;
                                  char v197 = v198;
                                  if (v198 < 0x36 && ((0x3F000000000777uLL >> v197) & 1) != 0) {
                                    break;
                                  }
                                  if (!--v194) {
                                    goto LABEL_350;
                                  }
                                }
                                LOBYTE(v194) = 1;
                              }
                            }
                          }
LABEL_350:
                          *(unsigned char *)(a1 + 461) = v194;
                          if (v191 <= 0x14)
                          {
                            *(unsigned char *)(a1 + 455) = 0;
                            *(unsigned char *)(a1 + 1145) = 0;
                            *(unsigned char *)(a1 + 1147) = 0;
                            if (v188 >= 0x21) {
                              goto LABEL_385;
                            }
LABEL_388:
                            int v220 = 0;
                            goto LABEL_389;
                          }
                          uint64_t v199 = v190[10];
                          if (v190[10]) {
                            LOBYTE(v199) = *((unsigned char *)v504 + v199) != 0;
                          }
                          *(unsigned char *)(a1 + 455) = v199;
                          if (v191 < 0x25)
                          {
                            *(unsigned char *)(a1 + 1145) = 0;
                            if (v191 < 0x23) {
                              goto LABEL_383;
                            }
                          }
                          else
                          {
                            uint64_t v200 = v190[18];
                            if (v190[18]) {
                              LOBYTE(v200) = *((unsigned char *)v504 + v200) != 0;
                            }
                            *(unsigned char *)(a1 + 1145) = v200;
                          }
                          uint64_t v201 = v190[17];
                          if (v201)
                          {
                            *(unsigned char *)(a1 + 1147) = 1;
                            char v202 = (unsigned int *)((char *)v504 + v201);
                            uint64_t v203 = *v202;
                            uint64_t v205 = (unsigned int *)((char *)v202 + v203 + 4);
                            uint64_t v204 = *(unsigned int *)((char *)v202 + v203);
                            if (v204)
                            {
                              uint64_t v206 = &v205[v204];
                              while (1)
                              {
                                uint64_t v207 = (int *)((char *)v205 + *v205);
                                uint64_t v208 = (unsigned __int16 *)((char *)v207 - *v207);
                                unsigned int v209 = *v208;
                                if (v209 < 7)
                                {
                                  int v210 = 0;
                                  unsigned int v212 = 0;
                                  if (v209 < 5) {
                                    goto LABEL_372;
                                  }
                                  uint64_t v211 = v208[2];
                                  if (!v211) {
                                    goto LABEL_368;
                                  }
                                }
                                else if (v208[3])
                                {
                                  int v210 = *(int *)((char *)v207 + v208[3]);
                                  uint64_t v211 = v208[2];
                                  if (!v211) {
                                    goto LABEL_368;
                                  }
                                }
                                else
                                {
                                  int v210 = 0;
                                  uint64_t v211 = v208[2];
                                  if (!v211)
                                  {
LABEL_368:
                                    unsigned int v212 = 0;
                                    goto LABEL_372;
                                  }
                                }
                                unsigned int v212 = *(int *)((char *)v207 + v211);
LABEL_372:
                                unsigned int v213 = (uint64_t **)(a1 + 1160);
LABEL_373:
                                unsigned int v214 = *v213;
                                int v215 = v213;
                                if (*v213)
                                {
                                  while (1)
                                  {
                                    unsigned int v213 = (uint64_t **)v214;
                                    unsigned int v216 = *((_DWORD *)v214 + 7);
                                    if (v212 < v216) {
                                      goto LABEL_373;
                                    }
                                    if (v216 >= v212) {
                                      break;
                                    }
                                    unsigned int v214 = v213[1];
                                    if (!v214)
                                    {
                                      int v215 = v213 + 1;
                                      goto LABEL_378;
                                    }
                                  }
                                  unsigned int v217 = v213;
                                }
                                else
                                {
LABEL_378:
                                  unsigned int v217 = operator new(0x28uLL);
                                  v217[7] = v212;
                                  v217[8] = 0;
                                  *(void *)unsigned int v217 = 0;
                                  *((void *)v217 + 1) = 0;
                                  *((void *)v217 + 2) = v213;
                                  *int v215 = (uint64_t *)v217;
                                  uint64_t v218 = **(void **)(a1 + 1152);
                                  uint64_t v219 = (uint64_t *)v217;
                                  if (v218)
                                  {
                                    *(void *)(a1 + 1152) = v218;
                                    uint64_t v219 = *v215;
                                  }
                                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1160), v219);
                                  ++*(void *)(a1 + 1168);
                                }
                                v217[8] = v210;
                                if (++v205 == v206)
                                {
                                  uint64_t v221 = *v502;
                                  uint64_t v193 = -v221;
                                  if (*(unsigned __int16 *)((char *)v502 - v221) < 0x21u) {
                                    goto LABEL_388;
                                  }
LABEL_385:
                                  if (!*(_WORD *)((char *)v502 + v193 + 32)) {
                                    goto LABEL_388;
                                  }
                                  int v220 = *(int *)((char *)v502 + *(unsigned __int16 *)((char *)v502 + v193 + 32));
LABEL_389:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                  int v222 = getAdditionalSpillBufferBytes(void)::extra + v220;
                                  *(_DWORD *)(a1 + 396) = getAdditionalSpillBufferBytes(void)::extra + v220;
                                  uint64_t v223 = (unsigned __int16 *)((char *)v502 - *v502);
                                  if (*v223 < 0x43u)
                                  {
                                    LODWORD(v224) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v224 = v223[33];
                                    if (v224) {
                                      LODWORD(v224) = *(int *)((char *)v502 + v224);
                                    }
                                  }
                                  *(_DWORD *)(a1 + 408) = v224;
                                  int v225 = (unsigned __int16 *)((char *)v502 - *v502);
                                  if (*v225 < 5u)
                                  {
                                    LODWORD(v226) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v226 = v225[2];
                                    if (v226) {
                                      LODWORD(v226) = *(int *)((char *)v502 + v226);
                                    }
                                  }
                                  *(_DWORD *)(a1 + 392) = v226;
                                  int v227 = (unsigned __int16 *)((char *)v502 - *v502);
                                  if (*v227 < 0x51u)
                                  {
                                    LODWORD(v228) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v228 = v227[40];
                                    if (v228) {
                                      LODWORD(v228) = *(int *)((char *)v502 + v228);
                                    }
                                  }
                                  *(_DWORD *)(a1 + 428) = v228;
                                  uint64_t v229 = (unsigned __int16 *)((char *)v502 - *v502);
                                  if (*v229 < 0x4Fu)
                                  {
                                    LODWORD(v230) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v230 = v229[39];
                                    if (v230) {
                                      LODWORD(v230) = *(int *)((char *)v502 + v230);
                                    }
                                  }
                                  *(_DWORD *)(a1 + 440) = v230;
                                  *(_DWORD *)(a1 + 448) = *(_DWORD *)(v511 + 468);
                                  uint64_t v231 = (unsigned __int16 *)((char *)v502 - *v502);
                                  if (*(int *)((char *)v502 + v231[6] + *(unsigned int *)((char *)v502 + v231[6])) | v222) {
                                    char v232 = 1;
                                  }
                                  else {
                                    char v232 = v178;
                                  }
                                  if (v232)
                                  {
                                    LOBYTE(v233) = 1;
                                    uint64_t v234 = v511;
                                    goto LABEL_428;
                                  }
                                  unsigned int v235 = *v231;
                                  if (v235 < 0x21)
                                  {
                                    int v236 = 0;
                                    int v237 = 0;
                                    uint64_t v234 = v511;
                                  }
                                  else
                                  {
                                    uint64_t v234 = v511;
                                    if (v231[16])
                                    {
                                      int v236 = *(int *)((char *)v502 + v231[16]);
                                      if (v235 >= 0x43)
                                      {
LABEL_418:
                                        if (v231[33])
                                        {
                                          int v237 = *(int *)((char *)v502 + v231[33]);
LABEL_422:
                                          if (v237 + v236 + getAdditionalSpillBufferBytes(void)::extra)
                                          {
                                            LOBYTE(v233) = 1;
                                          }
                                          else
                                          {
                                            char v238 = (unsigned __int16 *)((char *)v502 - *v502);
                                            if (*v238 < 0x5Fu)
                                            {
                                              LOBYTE(v233) = 0;
                                            }
                                            else
                                            {
                                              uint64_t v233 = v238[47];
                                              if (v233) {
                                                LOBYTE(v233) = *((unsigned char *)v502 + v233) != 0;
                                              }
                                            }
                                          }
LABEL_428:
                                          *(unsigned char *)(a1 + 452) = v233;
                                          uint64_t v239 = (unsigned __int16 *)((char *)v504 - *v504);
                                          if (*v239 < 0x11u)
                                          {
                                            LODWORD(v240) = 0;
                                          }
                                          else
                                          {
                                            uint64_t v240 = v239[8];
                                            if (v240) {
                                              LODWORD(v240) = *(int *)((char *)v504 + v240);
                                            }
                                          }
                                          *(_DWORD *)(a1 + 960) = v240;
                                          {
                                            AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                          }
                                          int v241 = (_OWORD *)(a1 + 816);
                                          int v242 = (const void **)(v501 + 3);
                                          if (v501[3])
                                          {
                                            if (v501[4]) {
                                              uint64_t v243 = v501 + 3;
                                            }
                                            else {
                                              uint64_t v243 = v501 + 73;
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v243 = v501 + 73;
                                          }
                                          uint64_t v244 = a2 + 5184;
                                          AGX::Heap<true>::allocateImpl(__dst, a2 + 5352, v243[1]+ AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space, (void *)(a1 + 1016));
                                          *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                          long long v245 = *(_OWORD *)&__dst[16];
                                          *int v241 = *(_OWORD *)__dst;
                                          *(_OWORD *)(a1 + 832) = v245;
                                          *(_OWORD *)(a1 + 841) = *(_OWORD *)&__dst[25];
                                          *(void *)(a1 + 608) = *(void *)(a1 + 816);
                                          *(void *)(a1 + 640) = a2 + 5352;
                                          long long v246 = *(_OWORD *)(a1 + 832);
                                          *(_OWORD *)(a1 + 648) = *v241;
                                          *(_OWORD *)(a1 + 664) = v246;
                                          *(_OWORD *)(a1 + 673) = *(_OWORD *)(a1 + 841);
                                          if (*v242)
                                          {
                                            uint64_t v247 = v501;
                                            uint64_t v248 = v501[4];
                                            if (v248) {
                                              uint64_t v249 = *v242;
                                            }
                                            else {
                                              uint64_t v249 = (const void *)v501[73];
                                            }
                                            if (v248) {
                                              uint64_t v250 = v501 + 3;
                                            }
                                            else {
                                              uint64_t v250 = v501 + 73;
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v247 = v501;
                                            uint64_t v250 = v501 + 73;
                                            uint64_t v249 = (const void *)v501[73];
                                          }
                                          uint64_t v251 = v508;
                                          memcpy(*(void **)(a1 + 824), v249, v250[1]);
                                          uint64_t v252 = *(void *)(a1 + 824);
                                          uint64_t v253 = *(void *)(a1 + 832);
                                          *(void *)(a1 + 616) = *(void *)(a1 + 608);
                                          *(void *)(a1 + 624) = v252;
                                          *(void *)(a1 + 632) = v253;
                                          uint64_t v254 = (const void **)(v247 + 8);
                                          if (v247[8])
                                          {
                                            if (v247[9]) {
                                              long long v255 = v247 + 8;
                                            }
                                            else {
                                              long long v255 = v247 + 78;
                                            }
                                            uint64_t v256 = v255[1];
                                            if (!v256) {
                                              goto LABEL_462;
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v256 = v247[79];
                                            if (!v256) {
                                              goto LABEL_462;
                                            }
                                          }
                                          AGX::Heap<true>::allocateImpl(__dst, v244, v256, (void *)(a1 + 1024));
                                          *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                          long long v257 = *(_OWORD *)&__dst[16];
                                          *(_OWORD *)(a1 + 864) = *(_OWORD *)__dst;
                                          *(_OWORD *)(a1 + 880) = v257;
                                          *(_OWORD *)(a1 + 889) = *(_OWORD *)&__dst[25];
                                          long long v258 = *(_OWORD *)(a1 + 880);
                                          *(_OWORD *)(a1 + 696) = *(_OWORD *)(a1 + 864);
                                          *(_OWORD *)(a1 + 712) = v258;
                                          *(_OWORD *)(a1 + 721) = *(_OWORD *)(a1 + 889);
                                          if (*v254)
                                          {
                                            uint64_t v259 = v501[9];
                                            if (v259) {
                                              long long v260 = *v254;
                                            }
                                            else {
                                              long long v260 = (const void *)v501[78];
                                            }
                                            if (v259) {
                                              long long v261 = v247 + 8;
                                            }
                                            else {
                                              long long v261 = v501 + 78;
                                            }
                                          }
                                          else
                                          {
                                            long long v261 = v501 + 78;
                                            long long v260 = (const void *)v501[78];
                                          }
                                          memcpy(*(void **)(a1 + 872), v260, v261[1]);
LABEL_462:
                                          uint64_t v262 = (const void **)(v501 + 13);
                                          if (v501[13])
                                          {
                                            if (v501[14]) {
                                              long long v263 = v501 + 13;
                                            }
                                            else {
                                              long long v263 = v501 + 83;
                                            }
                                            uint64_t v264 = v263[1];
                                            if (!v264) {
                                              goto LABEL_478;
                                            }
                                          }
                                          else
                                          {
                                            uint64_t v264 = v501[84];
                                            if (!v264) {
                                              goto LABEL_478;
                                            }
                                          }
                                          AGX::Heap<true>::allocateImpl(__dst, v244, v264, (void *)(a1 + 1032));
                                          *(_DWORD *)(a1 + 1040) += *(_DWORD *)&__dst[16];
                                          long long v265 = *(_OWORD *)&__dst[16];
                                          *(_OWORD *)(a1 + 912) = *(_OWORD *)__dst;
                                          *(_OWORD *)(a1 + 928) = v265;
                                          *(_OWORD *)(a1 + 937) = *(_OWORD *)&__dst[25];
                                          long long v266 = *(_OWORD *)(a1 + 928);
                                          *(_OWORD *)(a1 + 744) = *(_OWORD *)(a1 + 912);
                                          *(_OWORD *)(a1 + 760) = v266;
                                          *(_OWORD *)(a1 + 769) = *(_OWORD *)(a1 + 937);
                                          if (*v262)
                                          {
                                            uint64_t v267 = v501[14];
                                            if (v267) {
                                              uint64_t v268 = *v262;
                                            }
                                            else {
                                              uint64_t v268 = (const void *)v501[83];
                                            }
                                            if (v267) {
                                              long long v269 = v501 + 13;
                                            }
                                            else {
                                              long long v269 = v501 + 83;
                                            }
                                          }
                                          else
                                          {
                                            long long v269 = v501 + 83;
                                            uint64_t v268 = (const void *)v501[83];
                                          }
                                          memcpy(*(void **)(a1 + 920), v268, v269[1]);
                                          uint64_t v270 = *(void *)(a1 + 928);
                                          *(_OWORD *)(a1 + 792) = *(_OWORD *)(a1 + 912);
                                          *(void *)(a1 + 808) = v270;
LABEL_478:
                                          if (*(unsigned char *)(a1 + 600) || *(unsigned char *)(*(void *)(a1 + 8) + 7761))
                                          {
                                            {
                                              {
                                                unint64_t v272 = a1 + 528;
                                                if (*(char *)(a1 + 551) < 0) {
                                                  unint64_t v272 = *v497;
                                                }
                                                unint64_t v273 = a1 + 576;
                                                if (*(char *)(a1 + 599) < 0) {
                                                  unint64_t v273 = v495->__r_.__value_.__r.__words[0];
                                                }
                                                unint64_t v274 = a1 + 552;
                                                if (*(char *)(a1 + 575) < 0) {
                                                  unint64_t v274 = *v496;
                                                }
                                                int v275 = *(_DWORD *)(a1 + 512);
                                                uint64_t v276 = *(void *)(a1 + 608);
                                                unint64_t v277 = *(void **)(a1 + 832);
                                                *(_DWORD *)std::string __dst = 136447490;
                                                *(void *)&__dst[4] = v272;
                                                *(_WORD *)&__dst[12] = 2082;
                                                *(void *)&__dst[14] = v273;
                                                *(_WORD *)&__dst[22] = 2082;
                                                *(void *)&__dst[24] = v274;
                                                *(_WORD *)&__dst[32] = 1026;
                                                *(_DWORD *)&__dst[34] = v275;
                                                *(_WORD *)&__dst[38] = 2050;
                                                *(void *)&__dst[40] = v276;
                                                LOWORD(v515[0]) = 2050;
                                                *(void **)((char *)v515 + 2) = v277;
                                                _os_signpost_emit_with_name_impl(&dword_2427AD000, v271, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                              }
                                            }
                                            uint64_t v278 = *(void *)(a1 + 8);
                                            unint64_t v279 = a1 + 528;
                                            if (*(char *)(a1 + 551) < 0) {
                                              unint64_t v279 = *v497;
                                            }
                                            unint64_t v280 = a1 + 576;
                                            if (*(char *)(a1 + 599) < 0) {
                                              unint64_t v280 = v495->__r_.__value_.__r.__words[0];
                                            }
                                            unint64_t v281 = a1 + 552;
                                            if (*(char *)(a1 + 575) < 0) {
                                              unint64_t v281 = *v496;
                                            }
                                            int v282 = *(_DWORD *)(a1 + 512);
                                            uint64_t v283 = *(void *)(a1 + 608);
                                            uint64_t v284 = *(void *)(a1 + 832);
                                            char v285 = *(unsigned char *)(a1 + 600);
                                            *(void *)std::string __dst = v279;
                                            *(void *)&__dst[8] = v280;
                                            *(void *)&__dst[16] = v281;
                                            *(_DWORD *)&__dst[24] = v282;
                                            *(void *)&__dst[32] = v283;
                                            *(void *)&__dst[40] = v284;
                                            LOBYTE(v515[0]) = v285;
                                            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v278, a1, (long long *)__dst);
                                          }
                                          int v286 = *(_DWORD *)(v234 + 124);
                                          int v287 = *(_DWORD *)(v234 + 132);
                                          int v288 = *(_DWORD *)(v234 + 140);
                                          if (*(unsigned char *)(v234 + 208)) {
                                            int v289 = *(_DWORD *)(v234 + 144);
                                          }
                                          else {
                                            int v289 = 0;
                                          }
                                          if (*(_OWORD *)(v234 + 176) == 0) {
                                            int v290 = 0;
                                          }
                                          else {
                                            int v290 = *(_DWORD *)(v234 + 144);
                                          }
                                          int v291 = *(_DWORD *)(v234 + 120)
                                               + *(_DWORD *)(v234 + 128)
                                               + *(_DWORD *)(v234 + 136);
                                          unint64_t v292 = v289
                                               + *(_DWORD *)(v234 + 148)
                                               + v290
                                               + *(_DWORD *)(v234 + 152)
                                               + ((v286 + v287 + v288 - v291 + 3) & 0xFFFFFFFC);
                                          uint64_t v293 = *(void *)(a1 + 48);
                                          unint64_t v294 = (*(void *)(a1 + 56) - v293) >> 2;
                                          if (v292 <= v294)
                                          {
                                            if (v292 < v294) {
                                              *(void *)(a1 + 56) = v293 + 4 * v292;
                                            }
                                          }
                                          else
                                          {
                                            std::vector<unsigned int>::__append(v508, v292 - v294);
                                            int v286 = *(_DWORD *)(v234 + 124);
                                            int v287 = *(_DWORD *)(v234 + 132);
                                            int v288 = *(_DWORD *)(v234 + 140);
                                            int v291 = *(_DWORD *)(v234 + 120)
                                                 + *(_DWORD *)(v234 + 128)
                                                 + *(_DWORD *)(v234 + 136);
                                          }
                                          *(_DWORD *)(a1 + 412) = v286 + v287 + v288 - v291;
                                          uint64_t v295 = *v502;
                                          uint64_t v296 = *(unsigned __int16 *)((char *)v502 - v295 + 16);
                                          uint64_t v297 = *(unsigned int *)((char *)v502 + v296);
                                          uint64_t v298 = *(unsigned int *)((char *)v502 + v296 + v297);
                                          if (v298)
                                          {
                                            uint64_t v299 = 4 * v298;
                                            uint64_t v300 = v296 + v297;
                                            while (1)
                                            {
                                              uint64_t v302 = *(unsigned int *)((char *)v502 + v300 + 4);
                                              uint64_t v303 = (char *)v502 + v300 + v302;
                                              uint64_t v304 = v302 - *((int *)v303 + 1);
                                              uint64_t v305 = (char *)v502 + v300 + v304;
                                              unsigned int v306 = *((unsigned __int16 *)v305 + 2);
                                              if (v306 < 7) {
                                                goto LABEL_519;
                                              }
                                              uint64_t v307 = *((unsigned __int16 *)v305 + 5);
                                              if (!v307
                                                || (*(int *)((char *)v502 + v300 + v302 + v307 + 4) & 0x80000000) == 0)
                                              {
                                                break;
                                              }
LABEL_511:
                                              v300 += 4;
                                              v299 -= 4;
                                              if (!v299)
                                              {
                                                uint64_t v295 = *v502;
                                                goto LABEL_526;
                                              }
                                            }
                                            if (v306 < 9)
                                            {
LABEL_519:
                                              int v309 = 0;
                                            }
                                            else
                                            {
                                              uint64_t v308 = *(unsigned __int16 *)((char *)v502 + v300 + v304 + 12);
                                              if (v308) {
                                                LODWORD(v308) = *(int *)((char *)v502 + v300 + v302 + v308 + 4);
                                              }
                                              int v309 = 4 * v308;
                                            }
                                            int v310 = v309 - *(_DWORD *)(v234 + 120);
                                            std::vector<unsigned int>::pointer begin = v508->__begin_;
                                            v508->__begin_[v310] = -1;
                                            begin[v310 + 1] = 0;
                                            begin[v310 + 2] = 1;
                                            begin[v310 + 3] = 2;
                                            uint64_t v312 = v302 - *((int *)v303 + 1);
                                            if (*(unsigned __int16 *)((char *)v502 + v300 + v312 + 4) >= 0xBu
                                              && *(_WORD *)((char *)v502 + v300 + v312 + 14)
                                              && *((unsigned char *)v502
                                                 + v300
                                                 + v302
                                                 + *(unsigned __int16 *)((char *)v502 + v300 + v312 + 14)
                                                 + 4))
                                            {
                                              uint64_t v313 = *(unsigned __int16 *)((char *)v502 + v300 + v312 + 10);
                                              if (v313) {
                                                int v301 = *(int *)((char *)v502 + v300 + v302 + v313 + 4);
                                              }
                                              else {
                                                int v301 = 0;
                                              }
                                              *(void *)(a1 + 480 + 8 * ((v301 & 0xFFFC0) != 0)) |= 1 << v301;
                                            }
                                            goto LABEL_511;
                                          }
LABEL_526:
                                          uint64_t v314 = -v295;
                                          uint64_t v315 = (char *)v502 + v314;
                                          if (*(unsigned char *)(a1 + 454))
                                          {
                                            uint64_t v316 = *((unsigned __int16 *)v315 + 12);
                                            uint64_t v317 = *(unsigned int *)((char *)v502 + v316);
                                            unint64_t v318 = (unsigned int *)((char *)v502 + v316 + v317);
                                            uint64_t v319 = *v318;
                                            if (v319)
                                            {
                                              unint64_t v320 = 0;
                                              uint64_t v321 = 4 * v319;
                                              uint64_t v322 = (char *)v502 + v316 + v317;
                                              while (1)
                                              {
                                                uint64_t v323 = v318[v320 / 4 + 1];
                                                uint64_t v324 = v323 - *(int *)((char *)&v318[v320 / 4 + 1] + v323);
                                                uint64_t v325 = &v322[v320 + v324];
                                                unsigned int v326 = *((unsigned __int16 *)v325 + 2);
                                                if (v326 >= 5)
                                                {
                                                  uint64_t v327 = *((unsigned __int16 *)v325 + 4);
                                                  if (v327)
                                                  {
                                                    if (v322[v320 + 4 + v323 + v327] == 93)
                                                    {
                                                      if (v326 < 7) {
                                                        break;
                                                      }
                                                      uint64_t v328 = *(unsigned __int16 *)&v322[v320 + 10 + v324];
                                                      if (!v328) {
                                                        break;
                                                      }
                                                      int v329 = *(_DWORD *)&v322[v320 + 4 + v323 + v328];
                                                      if ((v329 & 0x80000000) == 0 && (v329 & 0xFFF00000) != 0x400000) {
                                                        break;
                                                      }
                                                    }
                                                  }
                                                }
                                                v320 += 4;
                                                if (v321 == v320) {
                                                  goto LABEL_538;
                                                }
                                              }
                                              *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), *(int8x16_t *)(a1 + 496));
                                            }
                                          }
LABEL_538:
                                          uint64_t v330 = *((unsigned __int16 *)v315 + 10);
                                          uint64_t v331 = *(unsigned int *)((char *)v502 + v330);
                                          uint64_t v332 = *(unsigned int *)((char *)v502 + v330 + v331);
                                          if (!v332) {
                                            goto LABEL_554;
                                          }
                                          uint64_t v333 = 4 * v332;
                                          uint64_t v334 = v330 + v331;
                                          while (2)
                                          {
                                            uint64_t v335 = *(unsigned int *)((char *)v502 + v334 + 4);
                                            uint64_t v336 = v335 - *(int *)((char *)v502 + v334 + v335 + 4);
                                            uint64_t v337 = (char *)v502 + v334 + v336;
                                            unsigned int v338 = *((unsigned __int16 *)v337 + 2);
                                            if (v338 < 7) {
                                              goto LABEL_547;
                                            }
                                            uint64_t v339 = *((unsigned __int16 *)v337 + 5);
                                            if (v339 && *(int *)((char *)v502 + v334 + v335 + v339 + 4) < 0) {
                                              goto LABEL_540;
                                            }
                                            if (v338 < 9
                                              || (uint64_t v340 = *(unsigned __int16 *)((char *)v502 + v334 + v336 + 12)) == 0)
                                            {
LABEL_547:
                                              int v341 = 0;
                                              goto LABEL_548;
                                            }
                                            int v341 = *(int *)((char *)v502 + v334 + v335 + v340 + 4);
LABEL_548:
                                            int v342 = *(unsigned __int8 *)(a1 + 1144);
                                            if (*(unsigned char *)(a1 + 1144)) {
                                              int v343 = 3;
                                            }
                                            else {
                                              int v343 = 1;
                                            }
                                            unsigned int v344 = *(_DWORD *)(v234 + 124)
                                                 + v343 * v341
                                                 - (*(_DWORD *)(v234 + 120)
                                                  + *(_DWORD *)(v234 + 128));
                                            uint64_t v345 = *(void *)(a1 + 48);
                                            *(_DWORD *)(v345 + 4 * v344) = -1;
                                            if (v342)
                                            {
                                              *(_DWORD *)(v345 + 4 * (v344 + 1)) = -1;
                                              *(_DWORD *)(v345 + 4 * (v344 + 2)) = 0;
                                            }
LABEL_540:
                                            v334 += 4;
                                            v333 -= 4;
                                            if (v333) {
                                              continue;
                                            }
                                            break;
                                          }
                                          uint64_t v314 = -(uint64_t)*v502;
LABEL_554:
                                          unint64_t v346 = a1 + 464;
                                          uint64_t v347 = (unsigned int *)((char *)v502
                                                                + *(unsigned __int16 *)((char *)v502 + v314 + 12));
                                          uint64_t v348 = *v347;
                                          unsigned int v350 = (unsigned int *)((char *)v347 + v348 + 4);
                                          uint64_t v349 = *(unsigned int *)((char *)v347 + v348);
                                          if (v349)
                                          {
                                            uint64_t v351 = &v350[v349];
                                            while (1)
                                            {
                                              unsigned int v352 = (int *)((char *)v350 + *v350);
                                              uint64_t v353 = (unsigned __int16 *)((char *)v352 - *v352);
                                              unsigned int v354 = *v353;
                                              if (v354 < 7) {
                                                break;
                                              }
                                              if (!v353[3] || (*(int *)((char *)v352 + v353[3]) & 0x80000000) == 0)
                                              {
                                                if (v354 < 9)
                                                {
                                                  LODWORD(v355) = 0;
                                                  goto LABEL_567;
                                                }
                                                uint64_t v355 = v353[4];
                                                if (v353[4])
                                                {
                                                  LODWORD(v355) = *(int *)((char *)v352 + v355);
LABEL_567:
                                                  uint64_t v356 = v353[3];
                                                  if (v356) {
                                                    LODWORD(v356) = *(int *)((char *)v352 + v356);
                                                  }
                                                  goto LABEL_571;
                                                }
LABEL_566:
                                                if (v354 >= 7) {
                                                  goto LABEL_567;
                                                }
                                                LODWORD(v356) = 0;
LABEL_571:
                                                unsigned int v357 = ((v355 >> 1) & 0x1FFFFFFF)
                                                     + *(_DWORD *)(v234 + 124)
                                                     + *(_DWORD *)(v234 + 132)
                                                     - (*(_DWORD *)(v234 + 120)
                                                      + *(_DWORD *)(v234 + 128)
                                                      + *(_DWORD *)(v234 + 136));
                                                v251->__begin_[v357] = -1;
                                                unsigned int v358 = (unsigned __int16 *)((char *)v352 - *v352);
                                                if (*v358 >= 0xBu)
                                                {
                                                  uint64_t v359 = v358[5];
                                                  if (v359)
                                                  {
                                                    if (*((unsigned char *)v352 + v359)) {
                                                      *(void *)(v346 + 8 * ((v356 & 0xFFFC0) != 0)) |= 1 << v356;
                                                    }
                                                  }
                                                }
                                                if (*(unsigned char *)(a1 + 1147))
                                                {
                                                  unsigned int v360 = *v509;
                                                  if (!*v509) {
LABEL_762:
                                                  }
                                                    abort();
                                                  unsigned int v361 = (2 * v357) | 1;
                                                  unsigned int v362 = v356 & 0xFFFFF;
                                                  while (1)
                                                  {
                                                    while (1)
                                                    {
                                                      unsigned int v363 = *((_DWORD *)v360 + 7);
                                                      if (v362 >= v363) {
                                                        break;
                                                      }
                                                      unsigned int v360 = (uint64_t *)*v360;
                                                      if (!v360) {
                                                        goto LABEL_762;
                                                      }
                                                    }
                                                    if (v363 >= v362) {
                                                      break;
                                                    }
                                                    unsigned int v360 = (uint64_t *)v360[1];
                                                    if (!v360) {
                                                      goto LABEL_762;
                                                    }
                                                  }
                                                  int v364 = *((_DWORD *)v360 + 8);
                                                  unsigned int v365 = (uint64_t **)(a1 + 272);
LABEL_584:
                                                  unsigned int v366 = *v365;
                                                  uint64_t v367 = v365;
                                                  if (*v365)
                                                  {
                                                    while (1)
                                                    {
                                                      unsigned int v365 = (uint64_t **)v366;
                                                      unsigned int v368 = *((_DWORD *)v366 + 7);
                                                      if (v361 < v368) {
                                                        goto LABEL_584;
                                                      }
                                                      if (v368 >= v361) {
                                                        break;
                                                      }
                                                      unsigned int v366 = v365[1];
                                                      if (!v366)
                                                      {
                                                        uint64_t v367 = v365 + 1;
                                                        goto LABEL_589;
                                                      }
                                                    }
                                                    unsigned int v369 = v365;
                                                  }
                                                  else
                                                  {
LABEL_589:
                                                    unsigned int v369 = operator new(0x28uLL);
                                                    v369[7] = v361;
                                                    v369[8] = 0;
                                                    *(void *)unsigned int v369 = 0;
                                                    *((void *)v369 + 1) = 0;
                                                    *((void *)v369 + 2) = v365;
                                                    *uint64_t v367 = (uint64_t *)v369;
                                                    uint64_t v370 = **(void **)(a1 + 264);
                                                    unint64_t v371 = (uint64_t *)v369;
                                                    if (v370)
                                                    {
                                                      *(void *)(a1 + 264) = v370;
                                                      unint64_t v371 = *v367;
                                                    }
                                                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v371);
                                                    ++*(void *)(a1 + 280);
                                                  }
                                                  uint64_t v251 = v508;
                                                  v369[8] = v364;
                                                  uint64_t v234 = v511;
                                                }
                                              }
                                              if (++v350 == v351) {
                                                goto LABEL_592;
                                              }
                                            }
                                            LODWORD(v355) = 0;
                                            goto LABEL_566;
                                          }
LABEL_592:
                                          unint64_t v372 = *(void *)(v234 + 160);
                                          unint64_t v373 = *(void *)(v234 + 168);
                                          if (*(_OWORD *)(v234 + 160) != 0)
                                          {
                                            int v374 = *(unsigned __int8 *)(v234 + 208);
                                            int v375 = *(_DWORD *)(v234 + 144);
                                            if (!*(unsigned char *)(v234 + 208)) {
                                              goto LABEL_603;
                                            }
                                            if (v375)
                                            {
                                              unsigned int v376 = (*(_DWORD *)(v234 + 124)
                                                    + *(_DWORD *)(v234 + 132)
                                                    + *(_DWORD *)(v234 + 140)
                                                    - (*(_DWORD *)(v234 + 120)
                                                     + *(_DWORD *)(v234 + 128)
                                                     + *(_DWORD *)(v234 + 136))
                                                    + 3) & 0xFFFFFFFC;
                                              *(void *)std::string __dst = *(void *)(v234 + 160);
                                              v513.n128_u64[0] = v373;
                                              for (unint64_t i = v372; ; unint64_t i = *(void *)__dst)
                                              {
                                                if (i)
                                                {
                                                  int8x16_t v378 = (__n128 *)__dst;
                                                }
                                                else
                                                {
                                                  unint64_t i = v513.n128_u64[0];
                                                  if (!v513.n128_u64[0])
                                                  {
                                                    int v375 = *(_DWORD *)(v234 + 144);
                                                    int v374 = v375;
                                                    goto LABEL_603;
                                                  }
                                                  int8x16_t v378 = &v513;
                                                }
                                                v378->n128_u64[0] = i & (i - 1);
                                                std::vector<unsigned int>::pointer v379 = v251->__begin_;
                                                v251->__begin_[v376] = -1;
                                                v379[v376 + 1] = 0;
                                                v379[v376 + 2] = 1;
                                                v379[v376 + 3] = 2;
                                                v376 += 4;
                                              }
                                            }
                                            int v374 = 0;
LABEL_603:
                                            int8x16_t v380 = *(int8x16_t *)(v234 + 176);
                                            if (*(_OWORD *)&v380 != 0 && v375 != 0)
                                            {
                                              int v446 = ((*(_DWORD *)(v234 + 140)
                                                     + *(_DWORD *)(v234 + 132)
                                                     - (*(_DWORD *)(v234 + 136)
                                                      + *(_DWORD *)(v234 + 128)
                                                      + *(_DWORD *)(v234 + 120))
                                                     + *(_DWORD *)(v234 + 124)
                                                     + 3) & 0xFFFFFFFC)
                                                   + v374;
                                              *(void *)std::string __dst = v372;
                                              v513.n128_u64[0] = v373;
                                              while (1)
                                              {
                                                if (v372)
                                                {
                                                  uint64_t v447 = (__n128 *)__dst;
                                                }
                                                else
                                                {
                                                  unint64_t v372 = v513.n128_u64[0];
                                                  if (!v513.n128_u64[0]) {
                                                    break;
                                                  }
                                                  uint64_t v447 = &v513;
                                                }
                                                v447->n128_u64[0] = v372 & (v372 - 1);
                                                std::vector<unsigned int>::pointer v448 = v251->__begin_;
                                                v251->__begin_[v446] = -1;
                                                v448[v446 + 1] = 0;
                                                v448[v446 + 2] = 1;
                                                v448[v446 + 3] = 2;
                                                v446 += 4;
                                                unint64_t v372 = *(void *)__dst;
                                              }
                                            }
                                            *(int8x16_t *)(a1 + 480) = vorrq_s8(*(int8x16_t *)(a1 + 480), v380);
                                          }
                                          if (*(_DWORD *)(v234 + 148))
                                          {
                                            int v382 = *(_DWORD *)(v234 + 144);
                                            if (*(unsigned char *)(v234 + 208)) {
                                              int v383 = *(_DWORD *)(v234 + 144);
                                            }
                                            else {
                                              int v383 = 0;
                                            }
                                            if (*(_OWORD *)(v234 + 176) == 0) {
                                              int v382 = 0;
                                            }
                                            unsigned int v384 = v383
                                                 + v382
                                                 + ((*(_DWORD *)(v234 + 124)
                                                   + *(_DWORD *)(v234 + 132)
                                                   + *(_DWORD *)(v234 + 140)
                                                   - (*(_DWORD *)(v234 + 120)
                                                    + *(_DWORD *)(v234 + 128)
                                                    + *(_DWORD *)(v234 + 136))
                                                   + 3) & 0xFFFFFFFC);
                                            unint64_t v386 = *(void *)(v234 + 192);
                                            unint64_t v385 = *(void *)(v234 + 200);
                                            *(void *)std::string __dst = v386;
                                            v513.n128_u64[0] = v385;
                                            while (1)
                                            {
                                              if (v386)
                                              {
                                                int v387 = (__n128 *)__dst;
                                              }
                                              else
                                              {
                                                unint64_t v386 = v513.n128_u64[0];
                                                if (!v513.n128_u64[0]) {
                                                  break;
                                                }
                                                int v387 = &v513;
                                              }
                                              v387->n128_u64[0] = v386 & (v386 - 1);
                                              uint64_t v388 = *(void *)(a1 + 48);
                                              *(_DWORD *)(v388 + 4 * v384) = -1;
                                              if (*(unsigned char *)(a1 + 1144))
                                              {
                                                *(_DWORD *)(v388 + 4 * (v384 + 1)) = -1;
                                                *(_DWORD *)(v388 + 4 * (v384 + 2)) = 0;
                                              }
                                              v384 += 4;
                                              unint64_t v386 = *(void *)__dst;
                                            }
                                          }
                                          int v389 = *v502;
                                          if (*(unsigned char *)(v234 + 467))
                                          {
                                            int v390 = (unsigned __int16 *)((char *)v502 - v389);
                                            if (*v390 < 0x67u)
                                            {
                                              unint64_t v391 = 0;
                                            }
                                            else
                                            {
                                              unint64_t v391 = v390[51];
                                              if (v391) {
                                                unint64_t v391 = *(void *)((char *)v502 + v391);
                                              }
                                            }
                                            int v392 = 128 - 2 * __clz(v391);
                                            if (*(_DWORD *)(a1 + 208) > v392) {
                                              int v392 = *(_DWORD *)(a1 + 208);
                                            }
                                            *(_DWORD *)(a1 + 208) = v392;
                                            int v393 = (unsigned __int16 *)((char *)v502 - *v502);
                                            if (*v393 < 0x17u)
                                            {
                                              LODWORD(v394) = 0;
                                            }
                                            else
                                            {
                                              unint64_t v394 = v393[11];
                                              if (v394) {
                                                unint64_t v394 = ((unint64_t)*(unsigned int *)((char *)v502 + v394) + 3) >> 2;
                                              }
                                            }
                                            *(_DWORD *)(a1 + 200) = v394;
                                            *(_DWORD *)(a1 + 204) = -2;
                                            int v389 = *v502;
                                          }
                                          unint64_t v395 = (unsigned __int16 *)((char *)v502 - v389);
                                          if (*v395 >= 0x17u && (uint64_t v396 = v395[11]) != 0)
                                          {
                                            unint64_t v397 = ((unint64_t)*(unsigned int *)((char *)v502 + v396) + 3) >> 2;
                                            unint64_t v398 = (void *)(a1 + 80);
                                            uint64_t v399 = *(void *)(a1 + 72);
                                            unint64_t v400 = (*(void *)(a1 + 80) - v399) >> 2;
                                            if (v397 > v400)
                                            {
                                              std::vector<unsigned int>::__append((std::vector<unsigned int> *)(a1 + 72), v397 - v400);
                                              goto LABEL_642;
                                            }
                                          }
                                          else
                                          {
                                            unint64_t v397 = 0;
                                            unint64_t v398 = (void *)(a1 + 80);
                                            uint64_t v399 = *(void *)(a1 + 72);
                                            unint64_t v400 = (*(void *)(a1 + 80) - v399) >> 2;
                                          }
                                          if (v400 > v397) {
                                            *unint64_t v398 = v399 + 4 * v397;
                                          }
LABEL_642:
                                          if (v494 != (void *)(v234 + 216)) {
                                            std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v494, *(char **)(v234 + 216), *(char **)(v234 + 224), (uint64_t)(*(void *)(v234 + 224) - *(void *)(v234 + 216)) >> 2);
                                          }
                                          if (v493 != (void *)(v234 + 240)) {
                                            std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v493, *(char **)(v234 + 240), *(char **)(v234 + 248), (uint64_t)(*(void *)(v234 + 248) - *(void *)(v234 + 240)) >> 2);
                                          }
                                          if (v492 != (void *)(v234 + 320)) {
                                            std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v492, *(char **)(v234 + 320), *(char **)(v234 + 328), (uint64_t)(*(void *)(v234 + 328) - *(void *)(v234 + 320)) >> 1);
                                          }
                                          if (v491 != (void *)(v234 + 368)) {
                                            std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>(v491, *(char **)(v234 + 368), *(char **)(v234 + 376), (uint64_t)(*(void *)(v234 + 376) - *(void *)(v234 + 368)) >> 1);
                                          }
                                          *(unsigned char *)(a1 + 192) = *(unsigned char *)(v234 + 416);
                                          *(unsigned char *)(a1 + 456) = *(_OWORD *)(v234 + 160) != 0;
                                          *(unsigned char *)(a1 + 457) = *(void *)(v234 + 148) != 0;
                                          uint64_t v401 = *(unsigned __int16 *)((char *)v502 - *v502 + 24);
                                          uint64_t v402 = *(unsigned int *)((char *)v502 + v401);
                                          unint64_t v403 = (unsigned int *)((char *)v502 + v401 + v402);
                                          uint64_t v404 = *v403;
                                          if (v404)
                                          {
                                            unint64_t v405 = 0;
                                            uint64_t v406 = 4 * v404;
                                            uint64_t v407 = (char *)v502 + v401 + v402;
                                            do
                                            {
                                              uint64_t v408 = v403[v405 / 4 + 1];
                                              uint64_t v409 = v408 - *(int *)((char *)&v403[v405 / 4 + 1] + v408);
                                              uint64_t v410 = &v407[v405 + v409];
                                              unsigned int v411 = *((unsigned __int16 *)v410 + 2);
                                              if (v411 >= 5)
                                              {
                                                uint64_t v412 = *((unsigned __int16 *)v410 + 4);
                                                if (v412)
                                                {
                                                  if (v411 >= 7 && v407[v405 + 4 + v408 + v412] == 139)
                                                  {
                                                    if (*(_WORD *)&v407[v405 + 10 + v409])
                                                    {
                                                      int v413 = *(_DWORD *)&v407[v405
                                                                            + 4
                                                                            + v408
                                                                            + *(unsigned __int16 *)&v407[v405 + 10 + v409]];
                                                      if (v411 >= 0xB) {
                                                        goto LABEL_661;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      int v413 = 0;
                                                      if (v411 >= 0xB)
                                                      {
LABEL_661:
                                                        uint64_t v414 = *(unsigned __int16 *)&v407[v405 + 14 + v409];
                                                        if (v414 && v407[v405 + 4 + v408 + v414]) {
                                                          *(void *)(v346 + 8 * ((v413 & 0xFFFC0) != 0)) |= 1 << v413;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                              v405 += 4;
                                            }
                                            while (v406 != v405);
                                          }
                                          uint64_t v415 = *v504;
                                          uint64_t v416 = -v415;
                                          uint64_t v417 = (char *)v504 - v415;
                                          unsigned int v418 = *(unsigned __int16 *)((char *)v504 - v415);
                                          if (v418 < 0xD) {
                                            goto LABEL_710;
                                          }
                                          if (!*((_WORD *)v417 + 6)) {
                                            goto LABEL_781;
                                          }
                                          uint64_t v419 = (int *)((char *)v504
                                                       + *((unsigned __int16 *)v417 + 6)
                                                       + *(unsigned int *)((char *)v504 + *((unsigned __int16 *)v417 + 6)));
                                          unint64_t v420 = *v419;
                                          unint64_t v421 = *(unsigned char **)(a1 + 1072);
                                          if (v420 > (uint64_t)(*(void *)(a1 + 1088) - (void)v421) >> 4)
                                          {
                                            uint64_t v422 = *(unsigned char **)(a1 + 1080);
                                            unsigned int v423 = (char *)operator new(16 * v420);
                                            uint64_t v424 = &v423[(v422 - v421) & 0xFFFFFFFFFFFFFFF0];
                                            uint64_t v425 = v424;
                                            if (v422 != v421)
                                            {
                                              uint64_t v426 = &v423[(v422 - v421) & 0xFFFFFFFFFFFFFFF0];
                                              do
                                              {
                                                uint64_t v425 = v426 - 16;
                                                *((_OWORD *)v426 - 1) = *((_OWORD *)v422 - 1);
                                                v422 -= 16;
                                                v426 -= 16;
                                              }
                                              while (v422 != v421);
                                            }
                                            *(void *)(a1 + 1072) = v425;
                                            *(void *)(a1 + 1080) = v424;
                                            *(void *)(a1 + 1088) = &v423[16 * v420];
                                            if (v421) {
                                              operator delete(v421);
                                            }
                                          }
                                          unsigned int v427 = 0;
                                          uint64_t v428 = *v504;
                                          unsigned int v418 = *(unsigned __int16 *)((char *)v504 - v428);
                                          if (v418 < 0x41)
                                          {
LABEL_675:
                                            if (!*v419) {
                                              goto LABEL_709;
                                            }
                                          }
                                          else
                                          {
                                            if (*(_WORD *)((char *)v504 - v428 + 64))
                                            {
                                              unint64_t v429 = (unsigned int *)((char *)v504
                                                                    + *(unsigned __int16 *)((char *)v504 - v428 + 64));
                                              unsigned int v427 = (unsigned int *)((char *)v429 + *v429);
                                              goto LABEL_675;
                                            }
                                            unsigned int v427 = 0;
                                            if (!*v419)
                                            {
LABEL_709:
                                              uint64_t v416 = -v428;
                                              goto LABEL_710;
                                            }
                                          }
                                          unint64_t v430 = 0;
                                          long long v503 = v427 + 1;
                                          uint64_t v431 = v419 + 1;
                                          __n128 v510 = v427;
                                          uint64_t v506 = v419 + 1;
                                          do
                                          {
                                            if (v427 && *v427) {
                                              uint64_t v433 = *(void *)&v503[2 * v430];
                                            }
                                            else {
                                              uint64_t v433 = 0;
                                            }
                                            uint64_t v434 = *(void *)&v431[2 * v430];
                                            unint64_t v435 = *(void **)(a1 + 1080);
                                            unint64_t v436 = *(void *)(a1 + 1088);
                                            if ((unint64_t)v435 < v436)
                                            {
                                              *unint64_t v435 = v434;
                                              v435[1] = v433;
                                              uint64_t v432 = v435 + 2;
                                            }
                                            else
                                            {
                                              uint64_t v437 = v419;
                                              unint64_t v438 = (void *)*v500;
                                              uint64_t v439 = ((uint64_t)v435 - *v500) >> 4;
                                              unint64_t v440 = v439 + 1;
                                              if ((unint64_t)(v439 + 1) >> 60) {
                                                abort();
                                              }
                                              uint64_t v441 = v436 - (void)v438;
                                              if (v441 >> 3 > v440) {
                                                unint64_t v440 = v441 >> 3;
                                              }
                                              if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFF0) {
                                                unint64_t v442 = 0xFFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v442 = v440;
                                              }
                                              if (v442)
                                              {
                                                if (v442 >> 60) {
                                                  std::__throw_bad_array_new_length[abi:nn180100]();
                                                }
                                                unint64_t v443 = (char *)operator new(16 * v442);
                                              }
                                              else
                                              {
                                                unint64_t v443 = 0;
                                              }
                                              int v444 = &v443[16 * v439];
                                              *(void *)int v444 = v434;
                                              *((void *)v444 + 1) = v433;
                                              unsigned int v445 = v444;
                                              if (v435 == v438)
                                              {
                                                uint64_t v234 = v511;
                                                uint64_t v419 = v437;
                                              }
                                              else
                                              {
                                                uint64_t v419 = v437;
                                                do
                                                {
                                                  *((_OWORD *)v445 - 1) = *((_OWORD *)v435 - 1);
                                                  v445 -= 16;
                                                  v435 -= 2;
                                                }
                                                while (v435 != v438);
                                                unint64_t v435 = (void *)*v500;
                                                uint64_t v234 = v511;
                                              }
                                              *(void *)(a1 + 1072) = v445;
                                              uint64_t v432 = v444 + 16;
                                              *(void *)(a1 + 1080) = v444 + 16;
                                              *(void *)(a1 + 1088) = &v443[16 * v442];
                                              if (v435) {
                                                operator delete(v435);
                                              }
                                              unsigned int v427 = v510;
                                              uint64_t v431 = v506;
                                            }
                                            *(void *)(a1 + 1080) = v432;
                                            ++v430;
                                          }
                                          while (v430 < *v419);
                                          uint64_t v449 = *v504;
                                          uint64_t v416 = -v449;
                                          unsigned int v418 = *(unsigned __int16 *)((char *)v504 - v449);
LABEL_710:
                                          if (v418 >= 0xB)
                                          {
LABEL_781:
                                            if (*(_WORD *)((char *)v504 + v416 + 10))
                                            {
                                              unint64_t v450 = (unsigned int *)((char *)v504
                                                                    + *(unsigned __int16 *)((char *)v504 + v416 + 10));
                                              uint64_t v451 = (unsigned int *)((char *)v450 + *v450);
                                              std::vector<std::shared_ptr<AGX::HAL200::Sampler>>::reserve(v498, *v451);
                                              unint64_t v452 = *v451;
                                              unint64_t v453 = *(unsigned char **)(a1 + 1096);
                                              if (v452 > (uint64_t)(*(void *)(a1 + 1112) - (void)v453) >> 3)
                                              {
                                                uint64_t v454 = *(unsigned char **)(a1 + 1104);
                                                uint64_t v455 = (char *)operator new(8 * v452);
                                                uint64_t v456 = v454 - v453;
                                                uint64_t v457 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                                unint64_t v458 = v457;
                                                if (v454 != v453)
                                                {
                                                  if ((unint64_t)(v456 - 8) < 0x58)
                                                  {
                                                    unint64_t v458 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                                    goto LABEL_720;
                                                  }
                                                  unint64_t v458 = &v455[(v454 - v453) & 0xFFFFFFFFFFFFFFF8];
                                                  if ((unint64_t)(&v454[-(v456 & 0xFFFFFFFFFFFFFFF8)] - v455) < 0x20) {
                                                    goto LABEL_782;
                                                  }
                                                  uint64_t v459 = v456 >> 3;
                                                  unint64_t v460 = ((unint64_t)(v456 - 8) >> 3) + 1;
                                                  uint64_t v461 = &v455[8 * v459 - 16];
                                                  long long v462 = (long long *)(v454 - 16);
                                                  uint64_t v463 = v460 & 0x3FFFFFFFFFFFFFFCLL;
                                                  do
                                                  {
                                                    long long v464 = *v462;
                                                    *((_OWORD *)v461 - 1) = *(v462 - 1);
                                                    *(_OWORD *)uint64_t v461 = v464;
                                                    v461 -= 32;
                                                    v462 -= 2;
                                                    v463 -= 4;
                                                  }
                                                  while (v463);
                                                  unint64_t v458 = &v457[-8 * (v460 & 0x3FFFFFFFFFFFFFFCLL)];
                                                  v454 -= 8 * (v460 & 0x3FFFFFFFFFFFFFFCLL);
                                                  if (v460 != (v460 & 0x3FFFFFFFFFFFFFFCLL))
                                                  {
LABEL_782:
                                                    do
                                                    {
LABEL_720:
                                                      uint64_t v465 = *((void *)v454 - 1);
                                                      v454 -= 8;
                                                      *((void *)v458 - 1) = v465;
                                                      v458 -= 8;
                                                    }
                                                    while (v454 != v453);
                                                  }
                                                }
                                                *(void *)(a1 + 1096) = v458;
                                                *(void *)(a1 + 1104) = v457;
                                                *(void *)(a1 + 1112) = &v455[8 * v452];
                                                if (v453) {
                                                  operator delete(v453);
                                                }
                                              }
                                              if (*v451)
                                              {
                                                unint64_t v466 = 0;
                                                do
                                                {
                                                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)__dst, (_DWORD *)((char *)&v451[v466 + 1] + v451[v466 + 1]));
                                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v513, a2, (uint64_t)__dst);
                                                  uint64_t v467 = *(__n128 **)(a1 + 1128);
                                                  if ((unint64_t)v467 >= *(void *)(a1 + 1136))
                                                  {
                                                    uint64_t v469 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v498, v513);
                                                  }
                                                  else
                                                  {
                                                    v467->n128_u64[0] = v513.n128_u64[0];
                                                    unint64_t v468 = v513.n128_u64[1];
                                                    v467->n128_u64[1] = v513.n128_u64[1];
                                                    if (v468) {
                                                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v468 + 8), 1uLL, memory_order_relaxed);
                                                    }
                                                    uint64_t v469 = v467 + 1;
                                                  }
                                                  *(void *)(a1 + 1128) = v469;
                                                  uint64_t v470 = *(unsigned int *)(v513.n128_u64[0] + 96);
                                                  uint64_t v471 = *(char **)(a1 + 1104);
                                                  unint64_t v472 = *(void *)(a1 + 1112);
                                                  if ((unint64_t)v471 >= v472)
                                                  {
                                                    unint64_t v474 = *(char **)(a1 + 1096);
                                                    uint64_t v475 = (v471 - v474) >> 3;
                                                    unint64_t v476 = v475 + 1;
                                                    if ((unint64_t)(v475 + 1) >> 61) {
                                                      abort();
                                                    }
                                                    uint64_t v477 = v472 - (void)v474;
                                                    if (v477 >> 2 > v476) {
                                                      unint64_t v476 = v477 >> 2;
                                                    }
                                                    if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF8) {
                                                      unint64_t v478 = 0x1FFFFFFFFFFFFFFFLL;
                                                    }
                                                    else {
                                                      unint64_t v478 = v476;
                                                    }
                                                    if (v478)
                                                    {
                                                      if (v478 >> 61) {
                                                        std::__throw_bad_array_new_length[abi:nn180100]();
                                                      }
                                                      unint64_t v479 = v478;
                                                      uint64_t v480 = operator new(8 * v478);
                                                      unint64_t v478 = v479;
                                                    }
                                                    else
                                                    {
                                                      uint64_t v480 = 0;
                                                    }
                                                    uint64_t v481 = &v480[8 * v475];
                                                    *uint64_t v481 = v470;
                                                    uint64_t v473 = v481 + 1;
                                                    if (v471 != v474)
                                                    {
                                                      unint64_t v482 = v471 - 8 - v474;
                                                      if (v482 < 0x58) {
                                                        goto LABEL_783;
                                                      }
                                                      if ((unint64_t)(v474 - v480) < 0x20) {
                                                        goto LABEL_783;
                                                      }
                                                      uint64_t v483 = (v482 >> 3) + 1;
                                                      long long v484 = &v480[8 * v475 - 16];
                                                      uint64_t v485 = v471 - 16;
                                                      uint64_t v486 = v483 & 0x3FFFFFFFFFFFFFFCLL;
                                                      do
                                                      {
                                                        long long v487 = *(_OWORD *)v485;
                                                        *(v484 - 1) = *((_OWORD *)v485 - 1);
                                                        *long long v484 = v487;
                                                        v484 -= 2;
                                                        v485 -= 32;
                                                        v486 -= 4;
                                                      }
                                                      while (v486);
                                                      v481 -= v483 & 0x3FFFFFFFFFFFFFFCLL;
                                                      v471 -= 8 * (v483 & 0x3FFFFFFFFFFFFFFCLL);
                                                      if (v483 != (v483 & 0x3FFFFFFFFFFFFFFCLL))
                                                      {
LABEL_783:
                                                        do
                                                        {
                                                          uint64_t v488 = *((void *)v471 - 1);
                                                          v471 -= 8;
                                                          *--uint64_t v481 = v488;
                                                        }
                                                        while (v471 != v474);
                                                      }
                                                    }
                                                    *(void *)(a1 + 1096) = v481;
                                                    *(void *)(a1 + 1104) = v473;
                                                    *(void *)(a1 + 1112) = &v480[8 * v478];
                                                    if (v474) {
                                                      operator delete(v474);
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)uint64_t v471 = v470;
                                                    uint64_t v473 = v471 + 8;
                                                  }
                                                  uint64_t v234 = v511;
                                                  *(void *)(a1 + 1104) = v473;
                                                  unint64_t v489 = (std::__shared_weak_count *)v513.n128_u64[1];
                                                  if (v513.n128_u64[1]
                                                    && !atomic_fetch_add((atomic_ullong *volatile)(v513.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                                                  {
                                                    ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                                                    std::__shared_weak_count::__release_weak(v489);
                                                  }
                                                  if (v516 < 0) {
                                                    operator delete(v515[0]);
                                                  }
                                                  ++v466;
                                                }
                                                while (v466 < *v451);
                                              }
                                            }
                                          }
                                          *(unsigned char *)(a1 + 964) = 0;
                                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                                            operator delete(__str.__r_.__value_.__l.__data_);
                                          }
                                          *(void *)a1 = &unk_26F8529F8;
                                          std::string __str = *(std::string *)(a1 + 616);
                                          __dst[23] = 0;
                                          __dst[0] = 0;
                                          AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::ProgramVariantESLState(a1 + 1344, a2, v501, (const std::string *)__dst, v234, (long long *)&__str);
                                        }
                                      }
                                    }
                                    else
                                    {
                                      int v236 = 0;
                                      if (v235 >= 0x43) {
                                        goto LABEL_418;
                                      }
                                    }
                                    int v237 = 0;
                                  }
LABEL_776:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                  goto LABEL_422;
                                }
                              }
                            }
LABEL_384:
                            if (v188 < 0x21) {
                              goto LABEL_388;
                            }
                            goto LABEL_385;
                          }
LABEL_383:
                          *(unsigned char *)(a1 + 1147) = 0;
                          goto LABEL_384;
                        }
                      }
                    }
                    uint64_t v185 = 0;
                    goto LABEL_333;
                  }
                  goto LABEL_319;
                }
                if (v176 >= 0x27)
                {
                  uint64_t v177 = v175[19];
                  if (v175[19])
                  {
                    int v179 = *((unsigned __int8 *)v502 + v177);
                    if (*((unsigned char *)v502 + v177))
                    {
                      BOOL v178 = 1;
LABEL_320:
                      LOBYTE(v177) = v179 != 0;
                      goto LABEL_321;
                    }
                  }
                  if (v176 >= 0x29 && (uint64_t v180 = v175[20]) != 0)
                  {
                    BOOL v178 = *((unsigned char *)v502 + v180) != 0;
                    if (!v177) {
                      goto LABEL_321;
                    }
                  }
                  else
                  {
                    BOOL v178 = 0;
                    if (!v177) {
                      goto LABEL_321;
                    }
                  }
LABEL_319:
                  int v179 = *((unsigned __int8 *)v502 + v177);
                  goto LABEL_320;
                }
              }
              BOOL v178 = 0;
              LOBYTE(v177) = 0;
              goto LABEL_321;
            }
          }
          else
          {
            unsigned int v103 = (unsigned int **)(v501 + 108);
            unsigned int v104 = (unsigned int *)v501[108];
            if (!v104) {
              goto LABEL_258;
            }
          }
          if (v103[1])
          {
            uint64_t v105 = (int *)((char *)v104 + *v104);
            uint64_t v106 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v106 < 0xDu)
            {
              LODWORD(v107) = 0;
            }
            else
            {
              uint64_t v107 = v106[6];
              if (v107) {
                LODWORD(v107) = *(int *)((char *)v105 + v107);
              }
            }
            *(_DWORD *)(a1 + 1180) = v107;
            uint64_t v108 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v108 < 0xBu)
            {
              LODWORD(v109) = 0;
            }
            else
            {
              uint64_t v109 = v108[5];
              if (v109) {
                LODWORD(v109) = *(int *)((char *)v105 + v109);
              }
            }
            *(_DWORD *)(a1 + 1188) = v109;
            uint64_t v110 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v110 < 0x11u)
            {
              LODWORD(v111) = 0;
            }
            else
            {
              uint64_t v111 = v110[8];
              if (v111) {
                LODWORD(v111) = *(int *)((char *)v105 + v111);
              }
            }
            *(_DWORD *)(a1 + 1192) = v111;
            unsigned int v112 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v112 < 0x13u)
            {
              LODWORD(v113) = 0;
            }
            else
            {
              uint64_t v113 = v112[9];
              if (v113) {
                LODWORD(v113) = *(int *)((char *)v105 + v113);
              }
            }
            *(_DWORD *)(a1 + 1196) = v113;
            uint64_t v114 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v114 < 0x17u)
            {
              LODWORD(v115) = 0;
            }
            else
            {
              uint64_t v115 = v114[11];
              if (v115) {
                LODWORD(v115) = *(int *)((char *)v105 + v115);
              }
            }
            *(_DWORD *)(a1 + 1200) = v115;
            uint64_t v116 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v116 < 0x1Bu)
            {
              LODWORD(v117) = 0;
            }
            else
            {
              uint64_t v117 = v116[13];
              if (v117) {
                LODWORD(v117) = *(int *)((char *)v105 + v117);
              }
            }
            *(_DWORD *)(a1 + 1204) = v117;
            int v118 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v118 < 0x15u)
            {
              LODWORD(v119) = 0;
            }
            else
            {
              uint64_t v119 = v118[10];
              if (v119) {
                LODWORD(v119) = *(int *)((char *)v105 + v119);
              }
            }
            *(_DWORD *)(a1 + 1208) = v119;
            uint64_t v120 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v120 < 0x19u)
            {
              LODWORD(v121) = 0;
            }
            else
            {
              uint64_t v121 = v120[12];
              if (v121) {
                LODWORD(v121) = *(int *)((char *)v105 + v121);
              }
            }
            *(_DWORD *)(a1 + 1212) = v121;
            uint64_t v122 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v122 < 0x1Du)
            {
              LODWORD(v123) = 0;
            }
            else
            {
              uint64_t v123 = v122[14];
              if (v123) {
                LODWORD(v123) = *(int *)((char *)v105 + v123);
              }
            }
            *(_DWORD *)(a1 + 1216) = v123;
            int v124 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v124 < 0xFu)
            {
              LODWORD(v125) = 0;
            }
            else
            {
              uint64_t v125 = v124[7];
              if (v125) {
                LODWORD(v125) = *(int *)((char *)v105 + v125);
              }
            }
            *(_DWORD *)(a1 + 1220) = v125;
            uint64_t v126 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v126 < 0x1Fu)
            {
              LODWORD(v127) = 0;
            }
            else
            {
              uint64_t v127 = v126[15];
              if (v127) {
                LODWORD(v127) = *(int *)((char *)v105 + v127);
              }
            }
            *(_DWORD *)(a1 + 1224) = v127;
            int v128 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v128 < 0x21u)
            {
              LODWORD(v129) = 0;
            }
            else
            {
              uint64_t v129 = v128[16];
              if (v129) {
                LODWORD(v129) = *(int *)((char *)v105 + v129);
              }
            }
            *(_DWORD *)(a1 + 1228) = v129;
            uint64_t v130 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v130 < 0x23u)
            {
              LODWORD(v131) = 0;
            }
            else
            {
              uint64_t v131 = v130[17];
              if (v131) {
                LODWORD(v131) = *(int *)((char *)v105 + v131);
              }
            }
            *(_DWORD *)(a1 + 1232) = v131;
            uint64_t v132 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v132 < 0x25u)
            {
              LODWORD(v133) = 0;
            }
            else
            {
              uint64_t v133 = v132[18];
              if (v133) {
                LODWORD(v133) = *(int *)((char *)v105 + v133);
              }
            }
            *(_DWORD *)(a1 + 1236) = v133;
            uint64_t v134 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v134 < 0x27u)
            {
              LODWORD(v135) = 0;
            }
            else
            {
              uint64_t v135 = v134[19];
              if (v135) {
                LODWORD(v135) = *(int *)((char *)v105 + v135);
              }
            }
            *(_DWORD *)(a1 + 1240) = v135;
            uint64_t v136 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v136 < 0x29u)
            {
              LODWORD(v137) = 0;
            }
            else
            {
              uint64_t v137 = v136[20];
              if (v137) {
                LODWORD(v137) = *(int *)((char *)v105 + v137);
              }
            }
            *(_DWORD *)(a1 + 1244) = v137;
            uint64_t v138 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v138 < 0x2Bu)
            {
              LODWORD(v139) = 0;
            }
            else
            {
              uint64_t v139 = v138[21];
              if (v139) {
                LODWORD(v139) = *(int *)((char *)v105 + v139);
              }
            }
            *(_DWORD *)(a1 + 1248) = v139;
            uint64_t v140 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v140 < 7u)
            {
              LODWORD(v141) = 0;
            }
            else
            {
              uint64_t v141 = v140[3];
              if (v141) {
                LODWORD(v141) = *(int *)((char *)v105 + v141);
              }
            }
            *(_DWORD *)(a1 + 1252) = v141;
            uint64_t v142 = (unsigned __int16 *)((char *)v105 - *v105);
            if (*v142 >= 5u && (uint64_t v143 = v142[2]) != 0) {
              int v144 = *(int *)((char *)v105 + v143);
            }
            else {
              int v144 = 0;
            }
            *(_DWORD *)(a1 + 1260) = v144;
          }
          goto LABEL_258;
        }
      }
      else
      {
        uint64_t v50 = (unsigned int **)(a3 + 904);
        uint64_t v51 = *(unsigned int **)(a3 + 904);
        if (!v51) {
          goto LABEL_143;
        }
      }
      if (!v50[1]) {
        goto LABEL_143;
      }
      unint64_t v52 = (int *)((char *)v51 + *v51);
      unsigned int v53 = (unsigned __int16 *)((char *)v52 - *v52);
      unsigned int v54 = *v53;
      if (v53[2])
      {
        uint64_t v55 = (int *)((char *)v52 + v53[2] + *(unsigned int *)((char *)v52 + v53[2]));
        if (v54 < 7) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v55 = 0;
        if (v54 < 7) {
          goto LABEL_104;
        }
      }
      uint64_t v56 = v53[3];
      if (v56)
      {
        uint64_t v57 = (char *)v52 + v56 + *(unsigned int *)((char *)v52 + v56);
        if (!*v55) {
          goto LABEL_143;
        }
        goto LABEL_105;
      }
LABEL_104:
      uint64_t v57 = 0;
      if (!*v55) {
        goto LABEL_143;
      }
LABEL_105:
      uint64_t v58 = 0;
      unint64_t v59 = v55 + 1;
      unint64_t v505 = v57 + 4;
      uint64_t v499 = v55;
      while (1)
      {
        size_t v61 = (char *)&v59[v58 + 1] + v59[v58];
        size_t v62 = strlen(v61);
        if (v62 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v63 = v62;
        if (v62 >= 0x17)
        {
          uint64_t v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17) {
            uint64_t v65 = v62 | 7;
          }
          uint64_t v66 = v65 + 1;
          uint64_t v64 = operator new(v65 + 1);
          *(void *)&__dst[8] = v63;
          *(void *)&__dst[16] = v66 | 0x8000000000000000;
          *(void *)std::string __dst = v64;
        }
        else
        {
          __dst[23] = v62;
          uint64_t v64 = __dst;
          if (!v62) {
            goto LABEL_116;
          }
        }
        memmove(v64, v61, v63);
LABEL_116:
        v64[v63] = 0;
        unint64_t v67 = *(void *)(a1 + 1280);
        if (v67 >= *(void *)(a1 + 1288))
        {
          int v68 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)(a1 + 1272), (uint64_t)__dst);
          int v69 = __dst[23];
          *(void *)(a1 + 1280) = v68;
          if (v69 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v67 = *(_OWORD *)__dst;
          *(void *)(v67 + 16) = *(void *)&__dst[16];
          *(void *)(a1 + 1280) = v67 + 24;
        }
        int v70 = *(_DWORD *)&v505[4 * v58];
        unint64_t v71 = *(char **)(a1 + 1304);
        unint64_t v72 = *(void *)(a1 + 1312);
        if ((unint64_t)v71 < v72)
        {
          *(_DWORD *)unint64_t v71 = v70;
          size_t v60 = v71 + 4;
        }
        else
        {
          uint64_t v73 = *(char **)(a1 + 1296);
          uint64_t v74 = (v71 - v73) >> 2;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62) {
            abort();
          }
          uint64_t v76 = v72 - (void)v73;
          if (v76 >> 1 > v75) {
            unint64_t v75 = v76 >> 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            if (v77 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v78 = operator new(4 * v77);
          }
          else
          {
            unint64_t v78 = 0;
          }
          unint64_t v79 = &v78[4 * v74];
          *unint64_t v79 = v70;
          size_t v60 = v79 + 1;
          if (v71 != v73)
          {
            unint64_t v80 = v71 - 4 - v73;
            if (v80 < 0x2C) {
              goto LABEL_784;
            }
            if ((unint64_t)(v73 - v78) < 0x20) {
              goto LABEL_784;
            }
            uint64_t v81 = (v80 >> 2) + 1;
            uint64_t v82 = &v78[4 * v74 - 16];
            uint64_t v83 = v71 - 16;
            uint64_t v84 = v81 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v85 = *(_OWORD *)v83;
              *(v82 - 1) = *((_OWORD *)v83 - 1);
              *uint64_t v82 = v85;
              v82 -= 2;
              v83 -= 32;
              v84 -= 8;
            }
            while (v84);
            v79 -= v81 & 0x7FFFFFFFFFFFFFF8;
            v71 -= 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
            if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_784:
              do
              {
                int v86 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *--unint64_t v79 = v86;
              }
              while (v71 != v73);
            }
          }
          *(void *)(a1 + 1296) = v79;
          *(void *)(a1 + 1304) = v60;
          *(void *)(a1 + 1312) = &v78[4 * v77];
          if (v73) {
            operator delete(v73);
          }
          uint64_t v55 = v499;
        }
        *(void *)(a1 + 1304) = v60;
        if (++v58 >= (unint64_t)*v55) {
          goto LABEL_143;
        }
      }
    }
    size_t v44 = *(void *)(a3 + 8);
    if (v44 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v45 = *(const void **)a3;
    if (v44 >= 0x17)
    {
      uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v47 = v44 | 7;
      }
      uint64_t v48 = v47 + 1;
      uint64_t v46 = operator new(v47 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v48 | 0x8000000000000000;
      *(void *)std::string __dst = v46;
    }
    else
    {
      __dst[23] = *(void *)(a3 + 8);
      uint64_t v46 = __dst;
      if (!v44) {
        goto LABEL_82;
      }
    }
    memmove(v46, v45, v44);
LABEL_82:
    v46[v44] = 0;
    if (*(char *)(a1 + 991) < 0) {
      operator delete(*v490);
    }
    *(_OWORD *)unint64_t v490 = *(_OWORD *)__dst;
    *(void *)(a1 + 984) = *(void *)&__dst[16];
    unsigned int v49 = (void *)(a3 + 24);
    if (*(void *)(a3 + 24))
    {
      if (!*(void *)(a3 + 32)) {
        unsigned int v49 = (void *)(a3 + 584);
      }
    }
    else
    {
      unsigned int v49 = (void *)(a3 + 584);
    }
    *(void *)(a1 + 992) = *v49 - *(void *)a3;
    goto LABEL_90;
  }
  if (v19 < 0x45)
  {
    if (v19 < 0x3D)
    {
      LOWORD(v24) = 0;
      if (v19 < 0x3B)
      {
        LODWORD(v26) = 0;
        uint64_t v25 = 0;
        LOWORD(v23) = 0;
        LOBYTE(v27) = 0;
LABEL_53:
        *(_DWORD *)(a1 + 288) = v26;
        __int16 v28 = v24 + v26 - 1;
        int v29 = -(int)v26;
        uint64_t v30 = *(void *)(a1 + 296);
        unint64_t v31 = (unsigned __int16)v23 | ((unint64_t)(unsigned __int16)(v29 & v28) << 32) | (v25 << 48) | (v27 << 16) | (unint64_t)(v30 & 0xFF000000);
        *(void *)(a1 + 296) = v31;
        if (v31 != v30)
        {
          *(void *)(a1 + 336) = 0;
          *(_OWORD *)(a1 + 304) = 0uLL;
          *(_OWORD *)(a1 + 320) = 0uLL;
          *(void *)&long long v32 = -1;
          *((void *)&v32 + 1) = -1;
          *(_OWORD *)(a1 + 344) = v32;
          *(_OWORD *)(a1 + 360) = v32;
          *(_OWORD *)(a1 + 376) = v32;
        }
        goto LABEL_55;
      }
      LOWORD(v23) = 0;
      uint64_t v25 = v18[29];
      if (!v18[29])
      {
LABEL_38:
        if (v19 < 0x3F)
        {
          LODWORD(v26) = 0;
          LOBYTE(v27) = 0;
        }
        else
        {
          uint64_t v26 = v18[31];
          if (v18[31]) {
            uint64_t v26 = *(void *)((char *)v17 + v26);
          }
          if (v19 < 0x4B)
          {
            LOBYTE(v27) = 0;
          }
          else
          {
            uint64_t v27 = v18[37];
            if (v27) {
              LODWORD(v27) = *(int *)((char *)v17 + v27);
            }
          }
        }
        goto LABEL_53;
      }
LABEL_37:
      uint64_t v25 = *(void *)((char *)v17 + v25);
      goto LABEL_38;
    }
    LOWORD(v23) = 0;
    uint64_t v24 = v18[30];
    if (v18[30]) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v23 = v18[34];
    if (v18[34]) {
      uint64_t v23 = *(void *)((char *)v17 + v23);
    }
    uint64_t v24 = v18[30];
    if (v18[30]) {
LABEL_35:
    }
      uint64_t v24 = *(void *)((char *)v17 + v24);
  }
  uint64_t v25 = v18[29];
  if (!v18[29]) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

void sub_242AD328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void **a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, CompileStatistics *a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  CompileStatistics::~CompileStatistics(a18);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v46 + 1160));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a28);
  unsigned int v49 = *(void **)(v46 + 1096);
  if (v49)
  {
    *(void *)(v46 + 1104) = v49;
    operator delete(v49);
  }
  uint64_t v50 = *a31;
  if (*a31)
  {
    *(void *)(v46 + 1080) = v50;
    operator delete(v50);
  }
  if (*a10 < 0)
  {
    operator delete(*a11);
    if ((*(char *)(v46 + 599) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v46 + 599) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v46 + 575) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a24);
  if (*(char *)(v46 + 575) < 0)
  {
LABEL_8:
    operator delete(*a25);
    if ((*(char *)(v46 + 551) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*a36);
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a14);
      uint64_t v51 = *a20;
      if (*a20)
      {
        *(void *)(v46 + 176) = v51;
        operator delete(v51);
      }
      unint64_t v52 = *a22;
      if (*a22)
      {
        *(void *)(v46 + 152) = v52;
        operator delete(v52);
      }
      unsigned int v53 = *a21;
      if (*a21)
      {
        *(void *)(v46 + 128) = v53;
        operator delete(v53);
      }
      unsigned int v54 = *a23;
      if (*a23)
      {
        *(void *)(v46 + 104) = v54;
        operator delete(v54);
      }
      uint64_t v55 = *a19;
      if (*a19)
      {
        *(void *)(v46 + 80) = v55;
        operator delete(v55);
        uint64_t v56 = *v47;
        if (!*v47)
        {
LABEL_24:
          if (a46 < 0) {
            goto LABEL_25;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v56 = *v47;
        if (!*v47) {
          goto LABEL_24;
        }
      }
      *(void *)(v46 + 56) = v56;
      operator delete(v56);
      if (a46 < 0)
      {
LABEL_25:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_28:
      _Unwind_Resume(a1);
    }
LABEL_13:
    operator delete(*a26);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v46 + 551) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void AGX::IntersectionProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::IntersectionProgramVariant(unint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, int a5)
{
  uint64_t v5 = a3;
  uint64_t v308 = *MEMORY[0x263EF8340];
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  __str.__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 48) = -1;
  *(void *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)(a1 + 76) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 84) = 1610612736;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 124) = 0;
  *(void *)&long long v7 = -1;
  *((void *)&v7 + 1) = -1;
  *(_OWORD *)(a1 + 132) = v7;
  *(_OWORD *)(a1 + 148) = v7;
  *(_OWORD *)(a1 + 164) = v7;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 397) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 1;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)a1 = &unk_26F852BB8;
  *(void *)(a1 + 552) = a2;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 808) = a1 + 816;
  *(void *)(a1 + 832) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 840) = 1610612736;
  *(void *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 888) = v7;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 904) = v7;
  *(_OWORD *)(a1 + 920) = v7;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1064) = atomic_fetch_add((atomic_ullong *volatile)(a2 + 7824), 1uLL);
  *(void *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_DWORD *)(a1 + 1504) = 0;
  *(unsigned char *)(a1 + 1508) = 0;
  long long v8 = (char *)(a1 + 1535);
  *(unsigned char *)(a1 + 1512) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  uint64_t v295 = (void *)(a1 + 1072);
  *(_OWORD *)(a1 + 1129) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1535) = 0u;
  *(_OWORD *)(a1 + 1551) = 0u;
  *(_OWORD *)(a1 + 1567) = 0u;
  *(void *)(a1 + 1580) = 0;
  unint64_t v290 = a1 + 1592;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(unsigned char *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(void *)(a1 + 1680) = 0;
  *(unsigned char *)(a1 + 1688) = *(unsigned char *)(a4 + 465);
  *(_WORD *)(a1 + 1690) = 0;
  *(void *)(a1 + 1712) = 0;
  *(void *)(a1 + 1704) = 0;
  uint64_t v297 = (uint64_t **)(a1 + 1704);
  *(void *)(a1 + 1696) = a1 + 1704;
  *(_OWORD *)(a1 + 1816) = 0u;
  uint64_t v298 = (void **)(a1 + 1816);
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  int v291 = (_DWORD *)(a1 + 1720);
  *(_OWORD *)(a1 + 1864) = 0u;
  *(void *)(a1 + 1880) = 0;
  if (a3[28])
  {
    if (a3[29]) {
      uint64_t v9 = a3 + 28;
    }
    else {
      uint64_t v9 = a3 + 98;
    }
  }
  else
  {
    uint64_t v9 = a3 + 98;
  }
  uint64_t v10 = 0;
  if (*v9 && v9[1]) {
    uint64_t v10 = (int *)((char *)*v9 + **v9);
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  int v287 = (_OWORD *)(a1 + 1240);
  int v289 = (_OWORD *)(a1 + 1192);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
    uint64_t v299 = (int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
  }
  else {
    uint64_t v299 = 0;
  }
  if (a3[58])
  {
    uint64_t v13 = a3 + 128;
    if (a3[59]) {
      uint64_t v13 = a3 + 58;
    }
  }
  else
  {
    uint64_t v13 = a3 + 128;
  }
  uint64_t v14 = 0;
  if (*v13 && v13[1]) {
    uint64_t v14 = (int *)((char *)*v13 + **v13);
  }
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
    unint64_t v17 = (int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    unint64_t v17 = 0;
  }
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  unsigned int v19 = *v18;
  int v288 = (_OWORD *)(a1 + 1288);
  if (v19 < 0x25)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    uint64_t v20 = v18[18];
    if (v18[18]) {
      LOBYTE(v20) = *((unsigned char *)v17 + v20) != 0;
    }
  }
  *(unsigned char *)(a1 + 1689) = v20;
  uint64_t v21 = (unsigned __int16 *)((char *)v299 - *v299);
  if (*v21 < 0x55u || (uint64_t v22 = v21[42]) == 0 || !*((unsigned char *)v299 + v22))
  {
LABEL_56:
    uint64_t v33 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v33 < 7u)
    {
      LODWORD(v34) = 0;
    }
    else
    {
      uint64_t v34 = v33[3];
      if (v34) {
        LODWORD(v34) = *(int *)((char *)v17 + v34);
      }
    }
    *(_DWORD *)(a1 + 1056) = v34;
    uint64_t v35 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v35 >= 0x13u && (uint64_t v36 = v35[9]) != 0) {
      long long v37 = (char *)v17 + v36 + *(unsigned int *)((char *)v17 + v36) + 4;
    }
    else {
      long long v37 = "";
    }
    uint64_t v293 = (std::string *)(a1 + 1120);
    unint64_t v294 = (void *)(a1 + 1096);
    unint64_t v286 = a1 + 1512;
    MEMORY[0x24566EB20](v295, v37);
    uint64_t v38 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v38 >= 9u && (uint64_t v39 = v38[4]) != 0) {
      int v40 = (char *)v17 + v39 + *(unsigned int *)((char *)v17 + v39) + 4;
    }
    else {
      int v40 = "";
    }
    MEMORY[0x24566EB20](v294, v40);
    uint64_t v41 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v41 < 0x29u)
    {
      LOBYTE(v42) = 0;
    }
    else
    {
      uint64_t v42 = v41[20];
      if (v42) {
        LOBYTE(v42) = *((unsigned char *)v17 + v42) != 0;
      }
    }
    *(unsigned char *)(a1 + 1144) = v42;
    std::string::operator=(v293, &__str);
    size_t v43 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v43 < 5u || !v43[2] || !*(unsigned char *)(a2 + 7440))
    {
LABEL_91:
      if (v5[43])
      {
        uint64_t v50 = v5 + 43;
        if (!v5[44]) {
          uint64_t v50 = v5 + 113;
        }
      }
      else
      {
        uint64_t v50 = v5 + 113;
      }
      uint64_t v300 = v5;
      uint64_t v304 = v17;
      if (!*v50 || !v50[1])
      {
LABEL_144:
        if (v5[68])
        {
          int v86 = v5 + 68;
          if (!v5[69]) {
            int v86 = v5 + 138;
          }
        }
        else
        {
          int v86 = v5 + 138;
        }
        int v88 = *v86;
        uint64_t v87 = v86[1];
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (v89
          || (BOOL v90 = (int *)((char *)v88 + *v88), v91 = (unsigned __int16 *)((char *)v90 - *v90), *v91 < 5u)
          || (uint64_t v92 = v91[2]) == 0)
        {
          uint64_t v93 = 0;
        }
        else
        {
          uint64_t v93 = *(void *)((char *)v90 + v92);
        }
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        *(float *)(a1 + 1728) = (float)(v93
                                      * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                                      / *(unsigned int *)algn_268D5B048)
                              / 1000000.0;
        uint64_t v94 = (unsigned __int16 *)((char *)v299 - *v299);
        if (*v94 < 5u)
        {
          LODWORD(v95) = 0;
        }
        else
        {
          uint64_t v95 = v94[2];
          if (v95) {
            LODWORD(v95) = *(int *)((char *)v299 + v95);
          }
        }
        _DWORD *v291 = v95;
        uint64_t v96 = (unsigned __int16 *)((char *)v299 - *v299);
        if (*v96 < 0x2Du)
        {
          LODWORD(v97) = 0;
        }
        else
        {
          uint64_t v97 = v96[22];
          if (v97) {
            LODWORD(v97) = *(int *)((char *)v299 + v97);
          }
        }
        *(_DWORD *)(a1 + 1724) = v97;
        uint64_t v98 = (unsigned __int16 *)((char *)v299 - *v299);
        if (*v98 < 0x35u)
        {
          LODWORD(v99) = 0;
        }
        else
        {
          uint64_t v99 = v98[26];
          if (v99) {
            LODWORD(v99) = *(int *)((char *)v299 + v99);
          }
        }
        *(_DWORD *)(a1 + 1764) = v99;
        uint64_t v100 = (unsigned __int16 *)((char *)v299 - *v299);
        if (*v100 < 0x43u)
        {
          LODWORD(v101) = 0;
        }
        else
        {
          uint64_t v101 = v100[33];
          if (v101) {
            LODWORD(v101) = *(int *)((char *)v299 + v101);
          }
        }
        *(_DWORD *)(a1 + 1800) = v101;
        if (v5[38])
        {
          uint64_t v102 = v5 + 38;
          if (!v5[39]) {
            uint64_t v102 = v5 + 108;
          }
          unsigned int v103 = *v102;
          if (!*v102)
          {
LABEL_259:
            if (v5[53])
            {
              int v144 = v5[54];
              if (v144) {
                uint64_t v145 = v5[53];
              }
              else {
                uint64_t v145 = v5[123];
              }
              if (v144) {
                uint64_t v146 = v5 + 53;
              }
              else {
                uint64_t v146 = v5 + 123;
              }
            }
            else
            {
              uint64_t v146 = v5 + 123;
              uint64_t v145 = v5[123];
            }
            MEMORY[0x24566EB30](a1 + 1864, v145, v146[1]);
            std::string::push_back((std::string *)(a1 + 1864), 0);
            uint64_t v147 = *v299;
            uint64_t v148 = (char *)v299 - v147;
            unsigned int v149 = *(unsigned __int16 *)((char *)v299 - v147);
            if (v149 < 0x39) {
              goto LABEL_285;
            }
            uint64_t v150 = -v147;
            uint64_t v151 = *((unsigned __int16 *)v148 + 28);
            if (v151)
            {
              uint64_t v152 = (int *)((char *)v299 + v151 + *(unsigned int *)((char *)v299 + v151));
              if (*v152)
              {
                *(unsigned char *)(a1 + 1608) = 1;
                uint64_t v153 = (_DWORD *)((char *)v152 + v152[1] + 4);
                uint64_t v154 = (unsigned __int16 *)((char *)v153 - *v153);
                if (*v154 >= 9u && (uint64_t v155 = v154[4]) != 0) {
                  int v156 = *(int *)((char *)v153 + v155);
                }
                else {
                  int v156 = 0;
                }
                *(_DWORD *)(a1 + 1808) = v156;
                *(unsigned char *)(a1 + 1812) = 1;
                uint64_t v157 = *v299;
                uint64_t v150 = -v157;
                unsigned int v149 = *(unsigned __int16 *)((char *)v299 - v157);
              }
            }
            if (v149 < 0x3B) {
              goto LABEL_285;
            }
            uint64_t v158 = (char *)v299 + v150;
            if (*((_WORD *)v158 + 29))
            {
              uint64_t v159 = (unsigned int *)((char *)v299
                                    + *((unsigned __int16 *)v158 + 29)
                                    + *(unsigned int *)((char *)v299 + *((unsigned __int16 *)v158 + 29)));
              uint64_t v160 = *v159;
              if (v160)
              {
                uint64_t v161 = v159 + 1;
                do
                {
                  unsigned int v163 = *v161++;
                  unsigned int v162 = v163;
                  if (!(v163 >> 20)) {
                    *(void *)(v290 + 8 * (v162 > 0x3F)) |= 1 << v162;
                  }
                  --v160;
                }
                while (v160);
              }
            }
            if (v149 < 0x57)
            {
LABEL_285:
              LODWORD(v164) = 0;
            }
            else
            {
              uint64_t v164 = *((unsigned __int16 *)v158 + 43);
              if (*((_WORD *)v158 + 43)) {
                LODWORD(v164) = *(int *)((char *)v299 + v164);
              }
            }
            *(_DWORD *)(a1 + 944) = v164;
            uint64_t v165 = (unsigned __int16 *)((char *)v299 - *v299);
            if (*v165 >= 0x21u && (uint64_t v166 = v165[16]) != 0) {
              int v167 = *(int *)((char *)v299 + v166);
            }
            else {
              int v167 = 0;
            }
            {
              getAdditionalSpillBufferBytes(void)::extra = 0;
            }
            *(_DWORD *)(a1 + 948) = getAdditionalSpillBufferBytes(void)::extra + v167;
            int v168 = (unsigned __int16 *)((char *)v299 - *v299);
            if (*v168 < 0x59u)
            {
              LODWORD(v169) = 0;
            }
            else
            {
              uint64_t v169 = v168[44];
              if (v169) {
                LODWORD(v169) = *(int *)((char *)v299 + v169);
              }
            }
            *(_DWORD *)(a1 + 976) = v169;
            uint64_t v170 = (unsigned __int16 *)((char *)v299 - *v299);
            if (*v170 < 0x51u)
            {
              LODWORD(v171) = 0;
            }
            else
            {
              uint64_t v171 = v170[40];
              if (v171) {
                LODWORD(v171) = *(int *)((char *)v299 + v171);
              }
            }
            *(_DWORD *)(a1 + 980) = v171;
            uint64_t v172 = (unsigned __int16 *)((char *)v299 - *v299);
            if (*v172 < 0x4Bu)
            {
              LODWORD(v173) = 0;
            }
            else
            {
              uint64_t v173 = v172[37];
              if (v173) {
                LODWORD(v173) = *(int *)((char *)v299 + v173);
              }
            }
            *(_DWORD *)(a1 + 988) = v173;
            uint64_t v174 = (unsigned __int16 *)((char *)v299 - *v299);
            unsigned int v175 = *v174;
            if (v175 >= 0x25)
            {
              if (v174[18] && *((unsigned char *)v299 + v174[18]))
              {
                if (v175 < 0x27)
                {
                  LOBYTE(v176) = 0;
                  BOOL v177 = 1;
                  goto LABEL_322;
                }
                LODWORD(v176) = v174[19];
                BOOL v177 = 1;
                if (!v174[19])
                {
LABEL_322:
                  *(unsigned char *)(a1 + 998) = v176;
                  uint64_t v180 = (unsigned __int16 *)((char *)v304 - *v304);
                  unsigned int v181 = *v180;
                  if (v181 < 0x21)
                  {
                    uint64_t v183 = 0;
                    LODWORD(v182) = 0;
                  }
                  else
                  {
                    uint64_t v182 = v180[16];
                    if (v180[16]) {
                      LODWORD(v182) = *(int *)((char *)v304 + v182);
                    }
                    if (v181 < 0x4D)
                    {
                      uint64_t v183 = 0;
                    }
                    else
                    {
                      uint64_t v183 = v180[38];
                      if (v180[38]) {
                        uint64_t v183 = *(unsigned int *)((char *)v304 + v183);
                      }
                      if (v181 >= 0x4F)
                      {
                        uint64_t v184 = v180[39];
                        if (v184) {
                          uint64_t v184 = *(void *)((char *)v304 + v184);
                        }
LABEL_334:
                        *(void *)(a1 + 1040) = v182 | (unint64_t)(v183 << 32);
                        *(void *)(a1 + 1048) = v184;
                        *(unsigned char *)(a1 + 1002) = v177 | v176;
                        uint64_t v185 = *v299;
                        uint64_t v186 = (char *)v299 - v185;
                        unsigned int v187 = *(unsigned __int16 *)((char *)v299 - v185);
                        if (v187 < 0x37)
                        {
                          LOBYTE(v188) = 0;
                        }
                        else
                        {
                          uint64_t v188 = *((unsigned __int16 *)v186 + 27);
                          if (*((_WORD *)v186 + 27)) {
                            LOBYTE(v188) = *((unsigned char *)v299 + v188) != 0;
                          }
                        }
                        *(unsigned char *)(a1 + 997) = v188;
                        uint64_t v189 = (unsigned __int16 *)((char *)v304 - *v304);
                        unsigned int v190 = *v189;
                        if (v190 < 0x33)
                        {
                          LOBYTE(v191) = 0;
                        }
                        else
                        {
                          uint64_t v191 = v189[25];
                          if (v189[25]) {
                            LOBYTE(v191) = *((unsigned char *)v304 + v191) != 0;
                          }
                        }
                        uint64_t v192 = -v185;
                        *(unsigned char *)(a1 + 1003) = v191;
                        if (v187 < 0x3F)
                        {
                          LOBYTE(v193) = 0;
                        }
                        else
                        {
                          uint64_t v193 = *((unsigned __int16 *)v186 + 31);
                          if (v193)
                          {
                            uint64_t v194 = (unsigned int *)((char *)v299 + v193 + *(unsigned int *)((char *)v299 + v193));
                            uint64_t v193 = *v194;
                            if (v193)
                            {
                              uint64_t v195 = v194 + 1;
                              while (1)
                              {
                                unsigned int v197 = *v195++;
                                char v196 = v197;
                                if (v197 < 0x36 && ((0x3F000000000777uLL >> v196) & 1) != 0) {
                                  break;
                                }
                                if (!--v193) {
                                  goto LABEL_351;
                                }
                              }
                              LOBYTE(v193) = 1;
                            }
                          }
                        }
LABEL_351:
                        *(unsigned char *)(a1 + 1005) = v193;
                        if (v190 <= 0x14)
                        {
                          *(unsigned char *)(a1 + 999) = 0;
                          *(unsigned char *)(a1 + 1689) = 0;
                          *(unsigned char *)(a1 + 1691) = 0;
                          if (v187 >= 0x21) {
                            goto LABEL_386;
                          }
LABEL_389:
                          int v219 = 0;
                          goto LABEL_390;
                        }
                        uint64_t v198 = v189[10];
                        if (v189[10]) {
                          LOBYTE(v198) = *((unsigned char *)v304 + v198) != 0;
                        }
                        *(unsigned char *)(a1 + 999) = v198;
                        if (v190 < 0x25)
                        {
                          *(unsigned char *)(a1 + 1689) = 0;
                          if (v190 < 0x23) {
                            goto LABEL_384;
                          }
                        }
                        else
                        {
                          uint64_t v199 = v189[18];
                          if (v189[18]) {
                            LOBYTE(v199) = *((unsigned char *)v304 + v199) != 0;
                          }
                          *(unsigned char *)(a1 + 1689) = v199;
                        }
                        uint64_t v200 = v189[17];
                        if (v200)
                        {
                          *(unsigned char *)(a1 + 1691) = 1;
                          uint64_t v201 = (unsigned int *)((char *)v304 + v200);
                          uint64_t v202 = *v201;
                          uint64_t v204 = (unsigned int *)((char *)v201 + v202 + 4);
                          uint64_t v203 = *(unsigned int *)((char *)v201 + v202);
                          if (v203)
                          {
                            uint64_t v205 = &v204[v203];
                            while (1)
                            {
                              uint64_t v206 = (int *)((char *)v204 + *v204);
                              uint64_t v207 = (unsigned __int16 *)((char *)v206 - *v206);
                              unsigned int v208 = *v207;
                              if (v208 < 7)
                              {
                                int v209 = 0;
                                unsigned int v211 = 0;
                                if (v208 < 5) {
                                  goto LABEL_373;
                                }
                                uint64_t v210 = v207[2];
                                if (!v210) {
                                  goto LABEL_369;
                                }
                              }
                              else if (v207[3])
                              {
                                int v209 = *(int *)((char *)v206 + v207[3]);
                                uint64_t v210 = v207[2];
                                if (!v210) {
                                  goto LABEL_369;
                                }
                              }
                              else
                              {
                                int v209 = 0;
                                uint64_t v210 = v207[2];
                                if (!v210)
                                {
LABEL_369:
                                  unsigned int v211 = 0;
                                  goto LABEL_373;
                                }
                              }
                              unsigned int v211 = *(int *)((char *)v206 + v210);
LABEL_373:
                              unsigned int v212 = v297;
LABEL_374:
                              unsigned int v213 = *v212;
                              unsigned int v214 = v212;
                              if (*v212)
                              {
                                while (1)
                                {
                                  unsigned int v212 = (uint64_t **)v213;
                                  unsigned int v215 = *((_DWORD *)v213 + 7);
                                  if (v211 < v215) {
                                    goto LABEL_374;
                                  }
                                  if (v215 >= v211) {
                                    break;
                                  }
                                  unsigned int v213 = v212[1];
                                  if (!v213)
                                  {
                                    unsigned int v214 = v212 + 1;
                                    goto LABEL_379;
                                  }
                                }
                                unsigned int v216 = v212;
                              }
                              else
                              {
LABEL_379:
                                unsigned int v216 = operator new(0x28uLL);
                                v216[7] = v211;
                                v216[8] = 0;
                                *(void *)unsigned int v216 = 0;
                                *((void *)v216 + 1) = 0;
                                *((void *)v216 + 2) = v212;
                                *unsigned int v214 = (uint64_t *)v216;
                                uint64_t v217 = **(void **)(a1 + 1696);
                                uint64_t v218 = (uint64_t *)v216;
                                if (v217)
                                {
                                  *(void *)(a1 + 1696) = v217;
                                  uint64_t v218 = *v214;
                                }
                                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1704), v218);
                                ++*(void *)(a1 + 1712);
                              }
                              v216[8] = v209;
                              if (++v204 == v205)
                              {
                                uint64_t v220 = *v299;
                                uint64_t v192 = -v220;
                                if (*(unsigned __int16 *)((char *)v299 - v220) < 0x21u) {
                                  goto LABEL_389;
                                }
LABEL_386:
                                if (!*(_WORD *)((char *)v299 + v192 + 32)) {
                                  goto LABEL_389;
                                }
                                int v219 = *(int *)((char *)v299 + *(unsigned __int16 *)((char *)v299 + v192 + 32));
LABEL_390:
                                {
                                  getAdditionalSpillBufferBytes(void)::extra = 0;
                                }
                                int v221 = getAdditionalSpillBufferBytes(void)::extra + v219;
                                *(_DWORD *)(a1 + 940) = getAdditionalSpillBufferBytes(void)::extra + v219;
                                int v222 = (unsigned __int16 *)((char *)v299 - *v299);
                                if (*v222 < 0x43u)
                                {
                                  LODWORD(v223) = 0;
                                }
                                else
                                {
                                  uint64_t v223 = v222[33];
                                  if (v223) {
                                    LODWORD(v223) = *(int *)((char *)v299 + v223);
                                  }
                                }
                                *(_DWORD *)(a1 + 952) = v223;
                                uint64_t v224 = (unsigned __int16 *)((char *)v299 - *v299);
                                if (*v224 < 5u)
                                {
                                  LODWORD(v225) = 0;
                                }
                                else
                                {
                                  uint64_t v225 = v224[2];
                                  if (v225) {
                                    LODWORD(v225) = *(int *)((char *)v299 + v225);
                                  }
                                }
                                *(_DWORD *)(a1 + 936) = v225;
                                uint64_t v226 = (unsigned __int16 *)((char *)v299 - *v299);
                                if (*v226 < 0x51u)
                                {
                                  LODWORD(v227) = 0;
                                }
                                else
                                {
                                  uint64_t v227 = v226[40];
                                  if (v227) {
                                    LODWORD(v227) = *(int *)((char *)v299 + v227);
                                  }
                                }
                                *(_DWORD *)(a1 + 972) = v227;
                                uint64_t v228 = (unsigned __int16 *)((char *)v299 - *v299);
                                if (*v228 < 0x4Fu)
                                {
                                  LODWORD(v229) = 0;
                                }
                                else
                                {
                                  uint64_t v229 = v228[39];
                                  if (v229) {
                                    LODWORD(v229) = *(int *)((char *)v299 + v229);
                                  }
                                }
                                *(_DWORD *)(a1 + 984) = v229;
                                *(_DWORD *)(a1 + 992) = *(_DWORD *)(a4 + 468);
                                uint64_t v230 = (unsigned __int16 *)((char *)v299 - *v299);
                                if (*(int *)((char *)v299 + v230[6] + *(unsigned int *)((char *)v299 + v230[6])) | v221) {
                                  char v231 = 1;
                                }
                                else {
                                  char v231 = v177;
                                }
                                if (v231)
                                {
                                  LOBYTE(v232) = 1;
                                  uint64_t v233 = v304;
                                  goto LABEL_428;
                                }
                                unsigned int v234 = *v230;
                                uint64_t v233 = v304;
                                if (v234 < 0x21)
                                {
                                  int v235 = 0;
                                }
                                else
                                {
                                  if (v230[16]) {
                                    int v235 = *(int *)((char *)v299 + v230[16]);
                                  }
                                  else {
                                    int v235 = 0;
                                  }
                                  if (v234 >= 0x43 && v230[33])
                                  {
                                    int v236 = *(int *)((char *)v299 + v230[33]);
                                    goto LABEL_422;
                                  }
                                }
                                int v236 = 0;
                                {
LABEL_512:
                                  {
                                    getAdditionalSpillBufferBytes(void)::extra = 0;
                                  }
                                }
LABEL_422:
                                if (v236 + v235 + getAdditionalSpillBufferBytes(void)::extra)
                                {
                                  LOBYTE(v232) = 1;
                                }
                                else
                                {
                                  int v237 = (unsigned __int16 *)((char *)v299 - *v299);
                                  if (*v237 < 0x5Fu)
                                  {
                                    LOBYTE(v232) = 0;
                                  }
                                  else
                                  {
                                    uint64_t v232 = v237[47];
                                    if (v232) {
                                      LOBYTE(v232) = *((unsigned char *)v299 + v232) != 0;
                                    }
                                  }
                                }
LABEL_428:
                                *(unsigned char *)(a1 + 996) = v232;
                                char v238 = (unsigned __int16 *)((char *)v233 - *v233);
                                if (*v238 < 0x11u)
                                {
                                  LODWORD(v239) = 0;
                                }
                                else
                                {
                                  uint64_t v239 = v238[8];
                                  if (v239) {
                                    LODWORD(v239) = *(int *)((char *)v233 + v239);
                                  }
                                }
                                *(_DWORD *)(a1 + 1504) = v239;
                                {
                                  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space = 0;
                                }
                                uint64_t v240 = a2 + 5184;
                                int v241 = (_OWORD *)(a1 + 1360);
                                int v242 = (const void **)(v300 + 3);
                                if (v300[3])
                                {
                                  if (v300[4]) {
                                    uint64_t v243 = v300 + 3;
                                  }
                                  else {
                                    uint64_t v243 = v300 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v243 = v300 + 73;
                                }
                                uint64_t v244 = v243[1]
                                     + AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::ProgramVariant(AGX::HAL200::Device &,AGCDeserializedReply const&,std::string const&,AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,BOOL,BOOL,BOOL,BOOL)::per_shader_brk_space;
                                uint64_t v245 = 168;
                                if (a5) {
                                  uint64_t v245 = 504;
                                }
                                uint64_t v246 = v240 + v245;
                                if (a5) {
                                  uint64_t v247 = 0x1000000000;
                                }
                                else {
                                  uint64_t v247 = 0;
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v246, v244, (void *)(a1 + 1560));
                                *(_DWORD *)(a1 + 1584) += *(_DWORD *)&__dst[16];
                                long long v248 = *(_OWORD *)&__dst[16];
                                *int v241 = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1376) = v248;
                                *(_OWORD *)(a1 + 1385) = *(_OWORD *)&__dst[25];
                                *(void *)(a1 + 1152) = *(void *)(a1 + 1360) + v247;
                                *(void *)(a1 + 1184) = v246;
                                long long v249 = *(_OWORD *)(a1 + 1376);
                                _OWORD *v289 = *v241;
                                v289[1] = v249;
                                *(_OWORD *)((char *)v289 + 25) = *(_OWORD *)(a1 + 1385);
                                if (*v242)
                                {
                                  uint64_t v250 = v300;
                                  uint64_t v251 = v300[4];
                                  if (v251) {
                                    uint64_t v252 = (unsigned int *)*v242;
                                  }
                                  else {
                                    uint64_t v252 = v300[73];
                                  }
                                  if (v251) {
                                    uint64_t v253 = v300 + 3;
                                  }
                                  else {
                                    uint64_t v253 = v300 + 73;
                                  }
                                }
                                else
                                {
                                  uint64_t v250 = v300;
                                  uint64_t v253 = v300 + 73;
                                  uint64_t v252 = v300[73];
                                }
                                memcpy(*(void **)(a1 + 1368), v252, v253[1]);
                                uint64_t v254 = *(void *)(a1 + 1368);
                                uint64_t v255 = *(void *)(a1 + 1376);
                                *(void *)(a1 + 1160) = *(void *)(a1 + 1152);
                                *(void *)(a1 + 1168) = v254;
                                *(void *)(a1 + 1176) = v255;
                                uint64_t v256 = (const void **)(v250 + 8);
                                if (v250[8])
                                {
                                  if (v250[9]) {
                                    long long v257 = v250 + 8;
                                  }
                                  else {
                                    long long v257 = v250 + 78;
                                  }
                                  uint64_t v258 = v257[1];
                                  if (!v258) {
                                    goto LABEL_467;
                                  }
                                }
                                else
                                {
                                  uint64_t v258 = (uint64_t)v250[79];
                                  if (!v258) {
                                    goto LABEL_467;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v240, v258, (void *)(a1 + 1568));
                                *(_DWORD *)(a1 + 1584) += *(_DWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1408) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1424) = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1433) = *(_OWORD *)&__dst[25];
                                long long v259 = *(_OWORD *)(a1 + 1424);
                                _OWORD *v287 = *(_OWORD *)(a1 + 1408);
                                v287[1] = v259;
                                *(_OWORD *)((char *)v287 + 25) = *(_OWORD *)(a1 + 1433);
                                if (*v256)
                                {
                                  long long v260 = v250[9];
                                  if (v260) {
                                    long long v261 = (unsigned int *)*v256;
                                  }
                                  else {
                                    long long v261 = v250[78];
                                  }
                                  if (v260) {
                                    uint64_t v262 = v250 + 8;
                                  }
                                  else {
                                    uint64_t v262 = v250 + 78;
                                  }
                                }
                                else
                                {
                                  uint64_t v262 = v250 + 78;
                                  long long v261 = v250[78];
                                }
                                memcpy(*(void **)(a1 + 1416), v261, v262[1]);
LABEL_467:
                                long long v263 = (const void **)(v250 + 13);
                                if (v250[13])
                                {
                                  if (v250[14]) {
                                    uint64_t v264 = v250 + 13;
                                  }
                                  else {
                                    uint64_t v264 = v250 + 83;
                                  }
                                  uint64_t v265 = v264[1];
                                  if (!v265) {
                                    goto LABEL_483;
                                  }
                                }
                                else
                                {
                                  uint64_t v265 = (uint64_t)v250[84];
                                  if (!v265) {
                                    goto LABEL_483;
                                  }
                                }
                                AGX::Heap<true>::allocateImpl(__dst, v240, v265, (void *)(a1 + 1576));
                                *(_DWORD *)(a1 + 1584) += *(_DWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1456) = *(_OWORD *)__dst;
                                *(_OWORD *)(a1 + 1472) = *(_OWORD *)&__dst[16];
                                *(_OWORD *)(a1 + 1481) = *(_OWORD *)&__dst[25];
                                long long v266 = *(_OWORD *)(a1 + 1472);
                                *int v288 = *(_OWORD *)(a1 + 1456);
                                v288[1] = v266;
                                *(_OWORD *)((char *)v288 + 25) = *(_OWORD *)(a1 + 1481);
                                if (*v263)
                                {
                                  uint64_t v267 = v250[14];
                                  if (v267) {
                                    uint64_t v268 = (unsigned int *)*v263;
                                  }
                                  else {
                                    uint64_t v268 = v250[83];
                                  }
                                  if (v267) {
                                    long long v269 = v250 + 13;
                                  }
                                  else {
                                    long long v269 = v250 + 83;
                                  }
                                }
                                else
                                {
                                  long long v269 = v250 + 83;
                                  uint64_t v268 = v250[83];
                                }
                                memcpy(*(void **)(a1 + 1464), v268, v269[1]);
                                uint64_t v270 = *(void *)(a1 + 1472);
                                *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 1456);
                                *(void *)(a1 + 1352) = v270;
LABEL_483:
                                if (*(unsigned char *)(a1 + 1144) || *(unsigned char *)(*(void *)(a1 + 552) + 7761))
                                {
                                  {
                                    {
                                      unint64_t v272 = v295;
                                      if (*(char *)(a1 + 1095) < 0) {
                                        unint64_t v272 = (void *)*v295;
                                      }
                                      unint64_t v273 = v293;
                                      if (*(char *)(a1 + 1143) < 0) {
                                        unint64_t v273 = (std::string *)v293->__r_.__value_.__r.__words[0];
                                      }
                                      unint64_t v274 = v294;
                                      if (*(char *)(a1 + 1119) < 0) {
                                        unint64_t v274 = (void *)*v294;
                                      }
                                      int v275 = *(_DWORD *)(a1 + 1056);
                                      uint64_t v276 = *(void *)(a1 + 1152);
                                      uint64_t v277 = *(void *)(a1 + 1376);
                                      *(_DWORD *)std::string __dst = 136447490;
                                      *(void *)&__dst[4] = v272;
                                      *(_WORD *)&__dst[12] = 2082;
                                      *(void *)&__dst[14] = v273;
                                      *(_WORD *)&__dst[22] = 2082;
                                      *(void *)&__dst[24] = v274;
                                      *(_WORD *)&__dst[32] = 1026;
                                      *(_DWORD *)&__dst[34] = v275;
                                      *(_WORD *)&__dst[38] = 2050;
                                      *(void *)&__dst[40] = v276;
                                      v307[0] = 2050;
                                      *(void *)&v307[1] = v277;
                                      _os_signpost_emit_with_name_impl(&dword_2427AD000, v271, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FunctionCompiled", "Name=%{public,signpost.description:attribute}s Label=%{public,signpost.description:attribute}s Type=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u Addr=%{public,signpost.description:attribute}llu Size=%{public,signpost.description:attribute}zu", __dst, 0x3Au);
                                    }
                                  }
                                  uint64_t v278 = *(void *)(a1 + 552);
                                  unint64_t v279 = v295;
                                  if (*(char *)(a1 + 1095) < 0) {
                                    unint64_t v279 = (void *)*v295;
                                  }
                                  unint64_t v280 = v293;
                                  if (*(char *)(a1 + 1143) < 0) {
                                    unint64_t v280 = (std::string *)v293->__r_.__value_.__r.__words[0];
                                  }
                                  unint64_t v281 = v294;
                                  if (*(char *)(a1 + 1119) < 0) {
                                    unint64_t v281 = (void *)*v294;
                                  }
                                  int v282 = *(_DWORD *)(a1 + 1056);
                                  uint64_t v283 = *(void *)(a1 + 1152);
                                  uint64_t v284 = *(void *)(a1 + 1376);
                                  char v285 = *(unsigned char *)(a1 + 1144);
                                  *(void *)std::string __dst = v279;
                                  *(void *)&__dst[8] = v280;
                                  *(void *)&__dst[16] = v281;
                                  *(_DWORD *)&__dst[24] = v282;
                                  *(void *)&__dst[32] = v283;
                                  *(void *)&__dst[40] = v284;
                                  LOBYTE(v307[0]) = v285;
                                  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerVariantEventInfo(v278, a1, (long long *)__dst);
                                }
                                operator new();
                              }
                            }
                          }
LABEL_385:
                          if (v187 < 0x21) {
                            goto LABEL_389;
                          }
                          goto LABEL_386;
                        }
LABEL_384:
                        *(unsigned char *)(a1 + 1691) = 0;
                        goto LABEL_385;
                      }
                    }
                  }
                  uint64_t v184 = 0;
                  goto LABEL_334;
                }
                goto LABEL_320;
              }
              if (v175 >= 0x27)
              {
                uint64_t v176 = v174[19];
                if (v174[19])
                {
                  int v178 = *((unsigned __int8 *)v299 + v176);
                  if (*((unsigned char *)v299 + v176))
                  {
                    BOOL v177 = 1;
LABEL_321:
                    LOBYTE(v176) = v178 != 0;
                    goto LABEL_322;
                  }
                }
                if (v175 >= 0x29 && (uint64_t v179 = v174[20]) != 0)
                {
                  BOOL v177 = *((unsigned char *)v299 + v179) != 0;
                  if (!v176) {
                    goto LABEL_322;
                  }
                }
                else
                {
                  BOOL v177 = 0;
                  if (!v176) {
                    goto LABEL_322;
                  }
                }
LABEL_320:
                int v178 = *((unsigned __int8 *)v299 + v176);
                goto LABEL_321;
              }
            }
            BOOL v177 = 0;
            LOBYTE(v176) = 0;
            goto LABEL_322;
          }
        }
        else
        {
          uint64_t v102 = v5 + 108;
          unsigned int v103 = v5[108];
          if (!v103) {
            goto LABEL_259;
          }
        }
        if (v102[1])
        {
          unsigned int v104 = (int *)((char *)v103 + *v103);
          uint64_t v105 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v105 < 0xDu)
          {
            LODWORD(v106) = 0;
          }
          else
          {
            uint64_t v106 = v105[6];
            if (v106) {
              LODWORD(v106) = *(int *)((char *)v104 + v106);
            }
          }
          *(_DWORD *)(a1 + 1724) = v106;
          uint64_t v107 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v107 < 0xBu)
          {
            LODWORD(v108) = 0;
          }
          else
          {
            uint64_t v108 = v107[5];
            if (v108) {
              LODWORD(v108) = *(int *)((char *)v104 + v108);
            }
          }
          *(_DWORD *)(a1 + 1732) = v108;
          uint64_t v109 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v109 < 0x11u)
          {
            LODWORD(v110) = 0;
          }
          else
          {
            uint64_t v110 = v109[8];
            if (v110) {
              LODWORD(v110) = *(int *)((char *)v104 + v110);
            }
          }
          *(_DWORD *)(a1 + 1736) = v110;
          uint64_t v111 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v111 < 0x13u)
          {
            LODWORD(v112) = 0;
          }
          else
          {
            uint64_t v112 = v111[9];
            if (v112) {
              LODWORD(v112) = *(int *)((char *)v104 + v112);
            }
          }
          *(_DWORD *)(a1 + 1740) = v112;
          uint64_t v113 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v113 < 0x17u)
          {
            LODWORD(v114) = 0;
          }
          else
          {
            uint64_t v114 = v113[11];
            if (v114) {
              LODWORD(v114) = *(int *)((char *)v104 + v114);
            }
          }
          *(_DWORD *)(a1 + 1744) = v114;
          uint64_t v115 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v115 < 0x1Bu)
          {
            LODWORD(v116) = 0;
          }
          else
          {
            uint64_t v116 = v115[13];
            if (v116) {
              LODWORD(v116) = *(int *)((char *)v104 + v116);
            }
          }
          *(_DWORD *)(a1 + 1748) = v116;
          uint64_t v117 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v117 < 0x15u)
          {
            LODWORD(v118) = 0;
          }
          else
          {
            uint64_t v118 = v117[10];
            if (v118) {
              LODWORD(v118) = *(int *)((char *)v104 + v118);
            }
          }
          *(_DWORD *)(a1 + 1752) = v118;
          uint64_t v119 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v119 < 0x19u)
          {
            LODWORD(v120) = 0;
          }
          else
          {
            uint64_t v120 = v119[12];
            if (v120) {
              LODWORD(v120) = *(int *)((char *)v104 + v120);
            }
          }
          *(_DWORD *)(a1 + 1756) = v120;
          uint64_t v121 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v121 < 0x1Du)
          {
            LODWORD(v122) = 0;
          }
          else
          {
            uint64_t v122 = v121[14];
            if (v122) {
              LODWORD(v122) = *(int *)((char *)v104 + v122);
            }
          }
          *(_DWORD *)(a1 + 1760) = v122;
          uint64_t v123 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v123 < 0xFu)
          {
            LODWORD(v124) = 0;
          }
          else
          {
            uint64_t v124 = v123[7];
            if (v124) {
              LODWORD(v124) = *(int *)((char *)v104 + v124);
            }
          }
          *(_DWORD *)(a1 + 1764) = v124;
          uint64_t v125 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v125 < 0x1Fu)
          {
            LODWORD(v126) = 0;
          }
          else
          {
            uint64_t v126 = v125[15];
            if (v126) {
              LODWORD(v126) = *(int *)((char *)v104 + v126);
            }
          }
          *(_DWORD *)(a1 + 1768) = v126;
          uint64_t v127 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v127 < 0x21u)
          {
            LODWORD(v128) = 0;
          }
          else
          {
            uint64_t v128 = v127[16];
            if (v128) {
              LODWORD(v128) = *(int *)((char *)v104 + v128);
            }
          }
          *(_DWORD *)(a1 + 1772) = v128;
          uint64_t v129 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v129 < 0x23u)
          {
            LODWORD(v130) = 0;
          }
          else
          {
            uint64_t v130 = v129[17];
            if (v130) {
              LODWORD(v130) = *(int *)((char *)v104 + v130);
            }
          }
          *(_DWORD *)(a1 + 1776) = v130;
          uint64_t v131 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v131 < 0x25u)
          {
            LODWORD(v132) = 0;
          }
          else
          {
            uint64_t v132 = v131[18];
            if (v132) {
              LODWORD(v132) = *(int *)((char *)v104 + v132);
            }
          }
          *(_DWORD *)(a1 + 1780) = v132;
          uint64_t v133 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v133 < 0x27u)
          {
            LODWORD(v134) = 0;
          }
          else
          {
            uint64_t v134 = v133[19];
            if (v134) {
              LODWORD(v134) = *(int *)((char *)v104 + v134);
            }
          }
          *(_DWORD *)(a1 + 1784) = v134;
          uint64_t v135 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v135 < 0x29u)
          {
            LODWORD(v136) = 0;
          }
          else
          {
            uint64_t v136 = v135[20];
            if (v136) {
              LODWORD(v136) = *(int *)((char *)v104 + v136);
            }
          }
          *(_DWORD *)(a1 + 1788) = v136;
          uint64_t v137 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v137 < 0x2Bu)
          {
            LODWORD(v138) = 0;
          }
          else
          {
            uint64_t v138 = v137[21];
            if (v138) {
              LODWORD(v138) = *(int *)((char *)v104 + v138);
            }
          }
          *(_DWORD *)(a1 + 1792) = v138;
          uint64_t v139 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v139 < 7u)
          {
            LODWORD(v140) = 0;
          }
          else
          {
            uint64_t v140 = v139[3];
            if (v140) {
              LODWORD(v140) = *(int *)((char *)v104 + v140);
            }
          }
          *(_DWORD *)(a1 + 1796) = v140;
          uint64_t v141 = (unsigned __int16 *)((char *)v104 - *v104);
          if (*v141 >= 5u && (uint64_t v142 = v141[2]) != 0) {
            int v143 = *(int *)((char *)v104 + v142);
          }
          else {
            int v143 = 0;
          }
          *(_DWORD *)(a1 + 1804) = v143;
        }
        goto LABEL_259;
      }
      uint64_t v51 = (int *)((char *)*v50 + **v50);
      unint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
      unsigned int v53 = *v52;
      if (v52[2])
      {
        unsigned int v54 = (int *)((char *)v51 + v52[2] + *(unsigned int *)((char *)v51 + v52[2]));
        if (v53 < 7) {
          goto LABEL_105;
        }
      }
      else
      {
        unsigned int v54 = 0;
        if (v53 < 7) {
          goto LABEL_105;
        }
      }
      uint64_t v55 = v52[3];
      if (v55)
      {
        uint64_t v56 = (char *)v51 + v55 + *(unsigned int *)((char *)v51 + v55);
        if (!*v54) {
          goto LABEL_144;
        }
        goto LABEL_106;
      }
LABEL_105:
      uint64_t v56 = 0;
      if (!*v54) {
        goto LABEL_144;
      }
LABEL_106:
      uint64_t v57 = 0;
      int v301 = v56 + 4;
      uint64_t v302 = v54 + 1;
      while (1)
      {
        unint64_t v59 = (char *)&v302[v57 + 1] + v302[v57];
        size_t v60 = strlen(v59);
        if (v60 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v61 = v60;
        if (v60 >= 0x17) {
          break;
        }
        __dst[23] = v60;
        size_t v62 = __dst;
        if (v60) {
          goto LABEL_116;
        }
LABEL_117:
        v62[v61] = 0;
        unint64_t v65 = *(void *)(a1 + 1824);
        if (v65 >= *(void *)(a1 + 1832))
        {
          uint64_t v66 = std::vector<std::string>::__push_back_slow_path<std::string>(v298, (uint64_t)__dst);
          int v67 = __dst[23];
          *(void *)(a1 + 1824) = v66;
          if (v67 < 0) {
            operator delete(*(void **)__dst);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v65 = *(_OWORD *)__dst;
          *(void *)(v65 + 16) = *(void *)&__dst[16];
          *(void *)(a1 + 1824) = v65 + 24;
        }
        int v68 = *(_DWORD *)&v301[4 * v57];
        int v69 = *(char **)(a1 + 1848);
        unint64_t v70 = *(void *)(a1 + 1856);
        if ((unint64_t)v69 >= v70)
        {
          unint64_t v71 = v54;
          unint64_t v72 = *(char **)(a1 + 1840);
          uint64_t v73 = (v69 - v72) >> 2;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62) {
            abort();
          }
          uint64_t v75 = v70 - (void)v72;
          if (v75 >> 1 > v74) {
            unint64_t v74 = v75 >> 1;
          }
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v76 = v74;
          }
          if (v76)
          {
            if (v76 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v77 = operator new(4 * v76);
          }
          else
          {
            unint64_t v77 = 0;
          }
          unint64_t v78 = &v77[4 * v73];
          *unint64_t v78 = v68;
          uint64_t v58 = v78 + 1;
          if (v69 == v72)
          {
            uint64_t v5 = v300;
          }
          else
          {
            unint64_t v79 = v69 - 4 - v72;
            if (v79 < 0x2C)
            {
              uint64_t v5 = v300;
              goto LABEL_140;
            }
            uint64_t v5 = v300;
            if ((unint64_t)(v72 - v77) < 0x20) {
              goto LABEL_517;
            }
            uint64_t v80 = (v79 >> 2) + 1;
            uint64_t v81 = &v77[4 * v73 - 16];
            uint64_t v82 = v69 - 16;
            uint64_t v83 = v80 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              _OWORD *v81 = v84;
              v81 -= 2;
              v82 -= 32;
              v83 -= 8;
            }
            while (v83);
            v78 -= v80 & 0x7FFFFFFFFFFFFFF8;
            v69 -= 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
            if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_517:
              do
              {
LABEL_140:
                int v85 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *--unint64_t v78 = v85;
              }
              while (v69 != v72);
            }
          }
          *(void *)(a1 + 1840) = v78;
          *(void *)(a1 + 1848) = v58;
          *(void *)(a1 + 1856) = &v77[4 * v76];
          if (v72) {
            operator delete(v72);
          }
          unsigned int v54 = v71;
          goto LABEL_108;
        }
        *(_DWORD *)int v69 = v68;
        uint64_t v58 = v69 + 4;
LABEL_108:
        *(void *)(a1 + 1848) = v58;
        if (++v57 >= (unint64_t)*v54) {
          goto LABEL_144;
        }
      }
      uint64_t v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17) {
        uint64_t v63 = v60 | 7;
      }
      uint64_t v64 = v63 + 1;
      size_t v62 = operator new(v63 + 1);
      *(void *)&__dst[8] = v61;
      *(void *)&__dst[16] = v64 | 0x8000000000000000;
      *(void *)std::string __dst = v62;
LABEL_116:
      memmove(v62, v59, v61);
      goto LABEL_117;
    }
    size_t v44 = (size_t)v5[1];
    if (v44 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v45 = *v5;
    if (v44 >= 0x17)
    {
      uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v47 = v44 | 7;
      }
      uint64_t v48 = v47 + 1;
      uint64_t v46 = operator new(v47 + 1);
      *(void *)&__dst[8] = v44;
      *(void *)&__dst[16] = v48 | 0x8000000000000000;
      *(void *)std::string __dst = v46;
    }
    else
    {
      __dst[23] = v5[1];
      uint64_t v46 = __dst;
      if (!v44) {
        goto LABEL_83;
      }
    }
    memmove(v46, v45, v44);
LABEL_83:
    v46[v44] = 0;
    if (*v8 < 0) {
      operator delete(*(void **)v286);
    }
    *(_OWORD *)unint64_t v286 = *(_OWORD *)__dst;
    *(void *)(v286 + 16) = *(void *)&__dst[16];
    unsigned int v49 = v5 + 3;
    if (v5[3])
    {
      if (!v5[4]) {
        unsigned int v49 = v5 + 73;
      }
    }
    else
    {
      unsigned int v49 = v5 + 73;
    }
    *(void *)(a1 + 1536) = *v49 - (void)*v5;
    goto LABEL_91;
  }
  if (v19 < 0x45)
  {
    if (v19 < 0x3D)
    {
      LOWORD(v24) = 0;
      if (v19 < 0x3B)
      {
        LODWORD(v26) = 0;
        uint64_t v25 = 0;
        LOWORD(v23) = 0;
        LOBYTE(v27) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 832) = v26;
        __int16 v28 = v24 + v26 - 1;
        int v29 = -(int)v26;
        uint64_t v30 = *(void *)(a1 + 840);
        unint64_t v31 = (unsigned __int16)v23 | ((unint64_t)(unsigned __int16)(v29 & v28) << 32) | (v25 << 48) | (v27 << 16) | (unint64_t)(v30 & 0xFF000000);
        *(void *)(a1 + 840) = v31;
        if (v31 != v30)
        {
          *(void *)(a1 + 880) = 0;
          *(_OWORD *)(a1 + 848) = 0uLL;
          *(_OWORD *)(a1 + 864) = 0uLL;
          *(void *)&long long v32 = -1;
          *((void *)&v32 + 1) = -1;
          *(_OWORD *)(a1 + 888) = v32;
          *(_OWORD *)(a1 + 904) = v32;
          *(_OWORD *)(a1 + 920) = v32;
        }
        goto LABEL_56;
      }
      LOWORD(v23) = 0;
      uint64_t v25 = v18[29];
      if (!v18[29])
      {
LABEL_39:
        if (v19 < 0x3F)
        {
          LODWORD(v26) = 0;
          LOBYTE(v27) = 0;
        }
        else
        {
          uint64_t v26 = v18[31];
          if (v18[31]) {
            uint64_t v26 = *(void *)((char *)v17 + v26);
          }
          if (v19 < 0x4B)
          {
            LOBYTE(v27) = 0;
          }
          else
          {
            uint64_t v27 = v18[37];
            if (v27) {
              LODWORD(v27) = *(int *)((char *)v17 + v27);
            }
          }
        }
        goto LABEL_54;
      }
LABEL_38:
      uint64_t v25 = *(void *)((char *)v17 + v25);
      goto LABEL_39;
    }
    LOWORD(v23) = 0;
    uint64_t v24 = v18[30];
    if (v18[30]) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v23 = v18[34];
    if (v18[34]) {
      uint64_t v23 = *(void *)((char *)v17 + v23);
    }
    uint64_t v24 = v18[30];
    if (v18[30]) {
LABEL_36:
    }
      uint64_t v24 = *(void *)((char *)v17 + v24);
  }
  uint64_t v25 = v18[29];
  if (!v18[29]) {
    goto LABEL_39;
  }
  goto LABEL_38;
}

void sub_242AD5D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CompileStatistics *a23,uint64_t a24,void **a25,void **a26,void **a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,void **a33)
{
  CompileStatistics::~CompileStatistics(a23);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v33 + 1704));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a30);
  uint64_t v36 = *(void **)(v33 + 1640);
  if (v36)
  {
    *(void *)(v33 + 1648) = v36;
    operator delete(v36);
  }
  long long v37 = *a33;
  if (*a33)
  {
    *(void *)(v33 + 1624) = v37;
    operator delete(v37);
  }
  if (*a10 < 0)
  {
    operator delete(*a12);
    if ((*(char *)(v33 + 1143) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v33 + 1143) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v33 + 1119) < 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  operator delete(*a25);
  if (*(char *)(v33 + 1119) < 0)
  {
LABEL_8:
    operator delete(*a26);
    if ((*(char *)(v33 + 1095) & 0x80000000) == 0)
    {
LABEL_14:
      std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v33 + 816));
      AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,false>::GlobalBindingTableInfo::~GlobalBindingTableInfo(a11);
      uint64_t v38 = *(void **)(v33 + 712);
      if (v38)
      {
        *(void *)(v33 + 720) = v38;
        operator delete(v38);
        uint64_t v39 = *(void **)(v33 + 688);
        if (!v39)
        {
LABEL_16:
          int v40 = *(void **)(v33 + 664);
          if (!v40) {
            goto LABEL_17;
          }
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v39 = *(void **)(v33 + 688);
        if (!v39) {
          goto LABEL_16;
        }
      }
      *(void *)(v33 + 696) = v39;
      operator delete(v39);
      int v40 = *(void **)(v33 + 664);
      if (!v40)
      {
LABEL_17:
        uint64_t v41 = *(void **)(v33 + 640);
        if (!v41) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
LABEL_28:
      *(void *)(v33 + 672) = v40;
      operator delete(v40);
      uint64_t v41 = *(void **)(v33 + 640);
      if (!v41)
      {
LABEL_19:
        uint64_t v42 = (void **)(v33 + 592);
        size_t v43 = *(void **)(v33 + 616);
        if (v43)
        {
          *(void *)(v33 + 624) = v43;
          operator delete(v43);
        }
        size_t v44 = *v42;
        if (*v42)
        {
          *(void *)(v33 + 600) = v44;
          operator delete(v44);
        }
        AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::~LinkInfo(a22);
        if (*(char *)(v34 - 185) < 0) {
          operator delete(*(void **)(v34 - 208));
        }
        _Unwind_Resume(a1);
      }
LABEL_18:
      *(void *)(v33 + 648) = v41;
      operator delete(v41);
      goto LABEL_19;
    }
LABEL_13:
    operator delete(*a27);
    goto LABEL_14;
  }
LABEL_12:
  if ((*(char *)(v33 + 1095) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t AGX::IntersectionProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize()
{
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v1 = *(void *)(result + 544);
  if (!v1) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = *(uint64_t ***)(result + 536);
  uint64_t v4 = (char **)(result + 592);
  int v5 = *(_DWORD *)(v1 + 124);
  int v6 = *(_DWORD *)(v1 + 132);
  int v7 = *(_DWORD *)(v1 + 140);
  if (*(unsigned char *)(v1 + 208)) {
    int v8 = *(_DWORD *)(v1 + 144);
  }
  else {
    int v8 = 0;
  }
  if (*(_OWORD *)(v1 + 176) == 0) {
    int v9 = 0;
  }
  else {
    int v9 = *(_DWORD *)(v1 + 144);
  }
  int v10 = *(_DWORD *)(v1 + 120) + *(_DWORD *)(v1 + 128) + *(_DWORD *)(v1 + 136);
  unint64_t v11 = v8 + *(_DWORD *)(v1 + 148) + v9 + *(_DWORD *)(v1 + 152) + ((v5 + v6 + v7 - v10 + 3) & 0xFFFFFFFC);
  uint64_t v12 = (void *)(result + 600);
  uint64_t v13 = *(void *)(result + 592);
  unint64_t v14 = (*(void *)(result + 600) - v13) >> 2;
  if (v11 <= v14)
  {
    if (v11 < v14) {
      *uint64_t v12 = v13 + 4 * v11;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(result + 592), v11 - v14);
    int v5 = *(_DWORD *)(v1 + 124);
    int v6 = *(_DWORD *)(v1 + 132);
    int v7 = *(_DWORD *)(v1 + 140);
    int v10 = *(_DWORD *)(v1 + 120) + *(_DWORD *)(v1 + 128) + *(_DWORD *)(v1 + 136);
  }
  *(_DWORD *)(v2 + 956) = v5 + v6 + v7 - v10;
  uint64_t v15 = *v3;
  uint64_t v16 = v3[1];
  if (*v3 != v16)
  {
    do
    {
      uint64_t v17 = *v15;
      if ((*(_DWORD *)(*v15 + 4) & 0x80000000) == 0)
      {
        unsigned int v18 = 4 * *(_DWORD *)(v17 + 8) - *(_DWORD *)(v1 + 120);
        unsigned int v19 = *v4;
        *(_DWORD *)&(*v4)[4 * v18] = -1;
        *(_DWORD *)&v19[4 * v18 + 4] = 0;
        *(_DWORD *)&v19[4 * v18 + 8] = 1;
        *(_DWORD *)&v19[4 * v18 + 12] = 2;
        if (*(unsigned char *)(v17 + 12)) {
          *(void *)(v2 + 1024 + 8 * ((*(_DWORD *)(v17 + 4) & 0xFFFC0) != 0)) |= 1 << *(_DWORD *)(v17 + 4);
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if (*(unsigned char *)(v2 + 998))
  {
    for (unint64_t i = v3[9]; i != v3[10]; ++i)
    {
      if (*(_DWORD *)*i == 93)
      {
        int v21 = *(_DWORD *)(*i + 4);
        if ((v21 & 0x80000000) == 0 && (v21 & 0xFFF00000) != 0x400000)
        {
          *(int8x16_t *)(v2 + 1024) = vorrq_s8(*(int8x16_t *)(v2 + 1024), *(int8x16_t *)(v2 + 1040));
          break;
        }
      }
    }
  }
  uint64_t v22 = v3[3];
  for (uint64_t j = v3[4]; v22 != j; ++v22)
  {
    if ((*(_DWORD *)(*v22 + 4) & 0x80000000) == 0)
    {
      int v24 = *(unsigned __int8 *)(v2 + 1688);
      int v25 = *(unsigned char *)(v2 + 1688) ? 3 : 1;
      unsigned int v26 = *(_DWORD *)(v1 + 124) + v25 * *(_DWORD *)(*v22 + 8) - (*(_DWORD *)(v1 + 120) + *(_DWORD *)(v1 + 128));
      uint64_t v27 = *(void *)(v2 + 592);
      *(_DWORD *)(v27 + 4 * v26) = -1;
      if (v24)
      {
        *(_DWORD *)(v27 + 4 * (v26 + 1)) = -1;
        *(_DWORD *)(v27 + 4 * (v26 + 2)) = 0;
      }
    }
  }
  uint64_t v141 = v12;
  uint64_t v142 = v3;
  int v29 = v3[6];
  for (unint64_t k = v3[7]; v29 != k; ++v29)
  {
    uint64_t v30 = *v29;
    int v31 = *(_DWORD *)(*v29 + 4);
    if ((v31 & 0x80000000) == 0)
    {
      unsigned int v32 = ((*(_DWORD *)(v30 + 8) >> 1) & 0x1FFFFFFF)
          + *(_DWORD *)(v1 + 124)
          + *(_DWORD *)(v1 + 132)
          - (*(_DWORD *)(v1 + 120)
           + *(_DWORD *)(v1 + 128)
           + *(_DWORD *)(v1 + 136));
      unsigned int v33 = v31 & 0xFFFFF;
      *(_DWORD *)&(*v4)[4 * v32] = (v31 & 0xFFFFF) + 50;
      if (*(unsigned char *)(v30 + 12)) {
        *(void *)(v2 + 1008 + 8 * (v33 > 0x3F)) |= 1 << v31;
      }
      if (*(unsigned char *)(v2 + 1691))
      {
        uint64_t v34 = *(uint64_t **)(v2 + 1704);
        if (!v34) {
LABEL_205:
        }
          abort();
        unsigned int v35 = (2 * v32) | 1;
        while (1)
        {
          while (1)
          {
            unsigned int v36 = *((_DWORD *)v34 + 7);
            if (v33 >= v36) {
              break;
            }
            uint64_t v34 = (uint64_t *)*v34;
            if (!v34) {
              goto LABEL_205;
            }
          }
          if (v36 >= v33) {
            break;
          }
          uint64_t v34 = (uint64_t *)v34[1];
          if (!v34) {
            goto LABEL_205;
          }
        }
        int v37 = *((_DWORD *)v34 + 8);
        uint64_t v38 = (uint64_t **)(v2 + 816);
        while (1)
        {
          uint64_t v39 = *v38;
          int v40 = v38;
          if (!*v38) {
            break;
          }
          while (1)
          {
            uint64_t v38 = (uint64_t **)v39;
            unsigned int v41 = *((_DWORD *)v39 + 7);
            if (v35 < v41) {
              break;
            }
            if (v41 >= v35) {
              goto LABEL_38;
            }
            uint64_t v39 = v38[1];
            if (!v39)
            {
              int v40 = v38 + 1;
              goto LABEL_57;
            }
          }
        }
LABEL_57:
        uint64_t v42 = v1;
        size_t v43 = k;
        size_t v44 = v4;
        uint64_t v45 = (uint64_t *)v38;
        uint64_t v38 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v38 + 7) = v35;
        *((_DWORD *)v38 + 8) = 0;
        *uint64_t v38 = 0;
        v38[1] = 0;
        _OWORD v38[2] = v45;
        *int v40 = (uint64_t *)v38;
        uint64_t v46 = **(void **)(v2 + 808);
        uint64_t v47 = (uint64_t *)v38;
        if (v46)
        {
          *(void *)(v2 + 808) = v46;
          uint64_t v47 = *v40;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 816), v47);
        ++*(void *)(v2 + 824);
        uint64_t v4 = v44;
        unint64_t k = v43;
        uint64_t v1 = v42;
LABEL_38:
        *((_DWORD *)v38 + 8) = v37;
      }
    }
  }
  unint64_t v48 = *(void *)(v1 + 160);
  unint64_t v49 = *(void *)(v1 + 168);
  if (*(_OWORD *)(v1 + 160) != 0)
  {
    int v50 = *(unsigned __int8 *)(v1 + 208);
    int v51 = *(_DWORD *)(v1 + 144);
    if (!*(unsigned char *)(v1 + 208)) {
      goto LABEL_70;
    }
    if (v51)
    {
      unsigned int v52 = (*(_DWORD *)(v1 + 124)
           + *(_DWORD *)(v1 + 132)
           + *(_DWORD *)(v1 + 140)
           - (*(_DWORD *)(v1 + 120)
            + *(_DWORD *)(v1 + 128)
            + *(_DWORD *)(v1 + 136))
           + 3) & 0xFFFFFFFC;
      unint64_t v143 = *(void *)(v1 + 168);
      unint64_t n = v48;
      for (unint64_t m = v48; ; unint64_t m = n)
      {
        if (m)
        {
          unsigned int v54 = &n;
        }
        else
        {
          unint64_t m = v143;
          if (!v143)
          {
            int v51 = *(_DWORD *)(v1 + 144);
            int v50 = v51;
            goto LABEL_70;
          }
          unsigned int v54 = &v143;
        }
        uint64_t v55 = *v4;
        *(_DWORD *)&(*v4)[4 * v52] = -1;
        *(_DWORD *)&v55[4 * v52 + 4] = 0;
        *(_DWORD *)&v55[4 * v52 + 8] = 1;
        *unsigned int v54 = m & (m - 1);
        *(_DWORD *)&v55[4 * v52 + 12] = 2;
        v52 += 4;
      }
    }
    int v50 = 0;
LABEL_70:
    int8x16_t v56 = *(int8x16_t *)(v1 + 176);
    if (*(_OWORD *)&v56 != 0 && v51 != 0)
    {
      int v115 = ((*(_DWORD *)(v1 + 140)
             + *(_DWORD *)(v1 + 132)
             - (*(_DWORD *)(v1 + 136)
              + *(_DWORD *)(v1 + 128)
              + *(_DWORD *)(v1 + 120))
             + *(_DWORD *)(v1 + 124)
             + 3) & 0xFFFFFFFC)
           + v50;
      unint64_t v143 = v49;
      for (n = v48; ; unint64_t v48 = n)
      {
        if (v48)
        {
          p_unint64_t n = &n;
        }
        else
        {
          unint64_t v48 = v143;
          if (!v143) {
            break;
          }
          p_unint64_t n = &v143;
        }
        uint64_t v117 = *v4;
        *(_DWORD *)&(*v4)[4 * v115] = -1;
        *(_DWORD *)&v117[4 * (v115 + 1)] = 0;
        *(_DWORD *)&v117[4 * (v115 + 2)] = 1;
        unint64_t *p_n = v48 & (v48 - 1);
        *(_DWORD *)&v117[4 * (v115 + 3)] = 2;
        v115 += 4;
      }
    }
    *(int8x16_t *)(v2 + 1024) = vorrq_s8(*(int8x16_t *)(v2 + 1024), v56);
  }
  if (*(_DWORD *)(v1 + 148))
  {
    int v58 = *(_DWORD *)(v1 + 144);
    if (*(unsigned char *)(v1 + 208)) {
      int v59 = *(_DWORD *)(v1 + 144);
    }
    else {
      int v59 = 0;
    }
    if (*(_OWORD *)(v1 + 176) == 0) {
      int v58 = 0;
    }
    unsigned int v60 = v59
        + v58
        + ((*(_DWORD *)(v1 + 124)
          + *(_DWORD *)(v1 + 132)
          + *(_DWORD *)(v1 + 140)
          - (*(_DWORD *)(v1 + 120)
           + *(_DWORD *)(v1 + 128)
           + *(_DWORD *)(v1 + 136))
          + 3) & 0xFFFFFFFC);
    unint64_t v61 = *(void *)(v1 + 192);
    unint64_t v143 = *(void *)(v1 + 200);
    for (n = v61; ; unint64_t v61 = n)
    {
      if (v61)
      {
        size_t v62 = &n;
      }
      else
      {
        unint64_t v61 = v143;
        if (!v143) {
          break;
        }
        size_t v62 = &v143;
      }
      unint64_t *v62 = v61 & (v61 - 1);
      uint64_t v63 = *(void *)(v2 + 592);
      *(_DWORD *)(v63 + 4 * v60) = -1;
      if (*(unsigned char *)(v2 + 1688))
      {
        *(_DWORD *)(v63 + 4 * (v60 + 1)) = -1;
        *(_DWORD *)(v63 + 4 * (v60 + 2)) = 0;
      }
      v60 += 4;
    }
  }
  if (*(unsigned char *)(v1 + 467))
  {
    int v64 = 128 - 2 * __clz((unint64_t)v142[13]);
    if (*(_DWORD *)(v2 + 752) > v64) {
      int v64 = *(_DWORD *)(v2 + 752);
    }
    *(_DWORD *)(v2 + 752) = v64;
    unint64_t v65 = ((unint64_t)*((unsigned int *)v142 + 24) + 3) >> 2;
    *(_DWORD *)(v2 + 744) = v65;
    *(_DWORD *)(v2 + 748) = 100;
  }
  else
  {
    unint64_t v65 = ((unint64_t)*((unsigned int *)v142 + 24) + 3) >> 2;
  }
  uint64_t v66 = (void *)(v2 + 616);
  uint64_t v67 = *(void *)(v2 + 616);
  unint64_t v68 = (*(void *)(v2 + 624) - v67) >> 2;
  if (v65 <= v68)
  {
    if (v65 < v68) {
      *(void *)(v2 + 624) = v67 + 4 * v65;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v2 + 616), v65 - v68);
  }
  if (v2 + 640 != v1 + 216) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v2 + 640), *(char **)(v1 + 216), *(char **)(v1 + 224), (uint64_t)(*(void *)(v1 + 224) - *(void *)(v1 + 216)) >> 2);
  }
  if (v2 + 688 != v1 + 240) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v2 + 688), *(char **)(v1 + 240), *(char **)(v1 + 248), (uint64_t)(*(void *)(v1 + 248) - *(void *)(v1 + 240)) >> 2);
  }
  if (v2 + 664 != v1 + 320) {
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((void *)(v2 + 664), *(char **)(v1 + 320), *(char **)(v1 + 328), (uint64_t)(*(void *)(v1 + 328) - *(void *)(v1 + 320)) >> 1);
  }
  if (v2 + 712 != v1 + 368) {
    std::vector<unsigned short>::__assign_with_size[abi:nn180100]<unsigned short *,unsigned short *>((void *)(v2 + 712), *(char **)(v1 + 368), *(char **)(v1 + 376), (uint64_t)(*(void *)(v1 + 376) - *(void *)(v1 + 368)) >> 1);
  }
  *(unsigned char *)(v2 + 736) = *(unsigned char *)(v1 + 416);
  *(unsigned char *)(v2 + 1000) = *(_OWORD *)(v1 + 160) != 0;
  *(unsigned char *)(v2 + 1001) = *(void *)(v1 + 148) != 0;
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::finalizeGatherSizes(v2, v1);
  if (!*(unsigned char *)(v2 + 3119))
  {
    if (*(unsigned char *)(v2 + 3117))
    {
      unsigned int v69 = *(_DWORD *)(v2 + 2480);
      if (v69 <= 8) {
        unsigned int v69 = 8;
      }
      *(_DWORD *)(v2 + 2480) = v69;
    }
    uint64_t v70 = *(void *)(v2 + 1888);
    int v71 = *(_DWORD *)(v2 + 2476);
    int v72 = *(_DWORD *)(v2 + 2488);
    uint64_t v73 = (unsigned __int16)((*(_DWORD *)(v2 + 2472) + 3) >> 2);
    *(void *)(v70 + 88) = *(void *)(v70 + 88) & 0xFFFFF00000000000 | (v73 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v2 + 2484) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v73;
    *(_DWORD *)(v70 + 248) = (v71 + 3) >> 2;
    *(_DWORD *)(v70 + 252) = (((v72 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v70 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v70 + 48), *(_DWORD *)(v70 + 240), *(void *)v70 + *(unsigned __int16 *)(v70 + 244));
    }
  }
  unsigned int v74 = *(_DWORD *)(v2 + 3120);
  if (v74 != -1) {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(*(void *)(v2 + 1888), v74, *(_DWORD *)(v2 + 3124), *(void *)(v2 + 2520), *(void *)(v2 + 2528), *(void *)(v2 + 2536), *(unsigned char *)(v2 + 3132));
  }
  uint64_t v75 = *(void *)(v2 + 2736);
  if (v75)
  {
    int v76 = *(_DWORD *)(v2 + 2476);
    int v77 = *(_DWORD *)(v2 + 2488);
    uint64_t v78 = (unsigned __int16)((*(_DWORD *)(v2 + 2472) + 3) >> 2);
    *(void *)(v75 + 88) = *(void *)(v75 + 88) & 0xFFFFF00000000000 | (v78 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v2 + 2484) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v78;
    *(_DWORD *)(v75 + 248) = (v76 + 3) >> 2;
    *(_DWORD *)(v75 + 252) = (((v77 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v75 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v75 + 48), *(_DWORD *)(v75 + 240), *(void *)v75 + *(unsigned __int16 *)(v75 + 244));
    }
    uint64_t v79 = *(void *)(v2 + 2736);
    uint64_t v80 = *(char **)(v2 + 2688);
    memcpy(v80, *(const void **)v79, *(void *)(v79 + 8) - *(void *)v79);
    if (*(unsigned char *)(v79 + 200)) {
      *(int8x16_t *)&v80[*(unsigned int *)(v79 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v80[*(unsigned int *)(v79 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v81 = *(unsigned int **)(v79 + 176);
    for (iunint64_t i = *(unsigned int **)(v79 + 184); v81 != ii; v81 += 3)
    {
      v83.i64[0] = *(void *)&v145[2 * v81[1] - 2] + *v81;
      v83.i64[1] = (unint64_t)v83.i64[0] >> 5;
      *(int8x16_t *)&v80[v81[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v80[v81[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v83, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v84 = *(void *)(v2 + 2736);
    long long v85 = *(_OWORD *)(v84 + 80);
    long long v86 = *(_OWORD *)(v84 + 96);
    long long v87 = *(_OWORD *)(v84 + 64);
    *(_OWORD *)(v2 + 2744) = *(_OWORD *)(v84 + 48);
    *(_OWORD *)(v2 + 2792) = v86;
    *(_OWORD *)(v2 + 2776) = v85;
    *(_OWORD *)(v2 + 2760) = v87;
    long long v89 = *(_OWORD *)(v84 + 128);
    long long v88 = *(_OWORD *)(v84 + 144);
    uint64_t v90 = *(void *)(v84 + 160);
    *(_OWORD *)(v2 + 2808) = *(_OWORD *)(v84 + 112);
    *(void *)(v2 + 2856) = v90;
    *(_OWORD *)(v2 + 2840) = v88;
    *(_OWORD *)(v2 + 2824) = v89;
  }
  AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)(v2 + 1888));
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(v2 + 1888);
  uint64_t v91 = *(void *)(v2 + 536);
  uint64_t v92 = *(int ***)(v91 + 72);
  for (juint64_t j = *(int ***)(v91 + 80); v92 != jj; ++v92)
  {
    uint64_t v94 = *v92;
    int v95 = **v92;
    switch(v95)
    {
      case 11:
      case 12:
      case 13:
      case 16:
      case 17:
      case 62:
      case 93:
      case 97:
      case 98:
      case 113:
        if (v95 == 64 && (v94[1] & 0x80000000) == 0) {
          goto LABEL_126;
        }
        break;
      case 64:
LABEL_126:
        *(void *)(*v66 + 4 * v94[2]) = 0x100000000;
        break;
      default:
        continue;
    }
  }
  int v96 = *(unsigned __int8 *)(v1 + 312);
  int v97 = *(unsigned __int8 *)(v1 + 313);
  int v98 = *(unsigned __int8 *)(v1 + 314);
  if (*(unsigned char *)(v1 + 312)) {
    BOOL v99 = 0;
  }
  else {
    BOOL v99 = v97 == 0;
  }
  if (!v99 || v98 != 0)
  {
    uint64_t v101 = *(__int16 **)(v2 + 640);
    for (kunint64_t k = *(__int16 **)(v2 + 648); v101 != kk; v101 += 2)
    {
      if (*v101 == -1)
      {
        *uint64_t v101 = 48;
        v101[1] = *(_DWORD *)&(*v4)[4 * (unsigned __int16)v101[1]];
      }
    }
    int v104 = *(_DWORD *)(v1 + 120);
    int v103 = *(_DWORD *)(v1 + 124);
    int v105 = v103 - v104 + 3;
    if (v96) {
      int v105 = 3;
    }
    int v106 = *(_DWORD *)(v1 + 132) - *(_DWORD *)(v1 + 128);
    if (v97) {
      int v106 = 0;
    }
    if (v98) {
      int v107 = 0;
    }
    else {
      int v107 = *(_DWORD *)(v1 + 140) - *(_DWORD *)(v1 + 136);
    }
    if (*(unsigned char *)(v1 + 208)) {
      int v108 = *(_DWORD *)(v1 + 144);
    }
    else {
      int v108 = 0;
    }
    if (*(_OWORD *)(v1 + 176) == 0) {
      int v109 = 0;
    }
    else {
      int v109 = *(_DWORD *)(v1 + 144);
    }
    unsigned int v110 = (v106 + v107 + v105) & 0xFFFFFFFC;
    int v111 = v108 + *(_DWORD *)(v1 + 148) + v109 + *(_DWORD *)(v1 + 152);
    unint64_t n = 0;
    memset(v145, 0, sizeof(v145));
    uint64_t v112 = v110 + v111;
    if (v110 + v111)
    {
      uint64_t v113 = (char *)operator new(4 * v112);
      unint64_t n = (unint64_t)v113;
      *(void *)uint64_t v145 = v113;
      *(void *)&v145[2] = &v113[4 * v112];
      uint64_t v114 = *v4;
      if (v96)
      {
LABEL_168:
        if (!v97)
        {
          int v119 = *(_DWORD *)(v1 + 128);
          int v118 = *(_DWORD *)(v1 + 132);
          if (v118 != v119)
          {
            uint64_t v120 = &v114[4 * (*(_DWORD *)(v1 + 124) - *(_DWORD *)(v1 + 120))];
            std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, *(void **)v145, v120, &v120[4 * (v118 - v119)], (v118 - v119));
          }
        }
        if (!*(unsigned char *)(v1 + 314))
        {
          int v122 = *(_DWORD *)(v1 + 136);
          int v121 = *(_DWORD *)(v1 + 140);
          if (v121 != v122)
          {
            uint64_t v123 = &v114[4 * (*(_DWORD *)(v1 + 124) - *(_DWORD *)(v1 + 120))
                       + 4 * (*(_DWORD *)(v1 + 132) - *(_DWORD *)(v1 + 128))];
            std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, *(void **)v145, v123, &v123[4 * (v121 - v122)], (v121 - v122));
          }
        }
        uint64_t v124 = *(unsigned int *)(v1 + 144);
        if (*(unsigned char *)(v1 + 208) && v124)
        {
          uint64_t v125 = &v114[4
                     * ((*(_DWORD *)(v1 + 124)
                       + *(_DWORD *)(v1 + 132)
                       + *(_DWORD *)(v1 + 140)
                       - (*(_DWORD *)(v1 + 120)
                        + *(_DWORD *)(v1 + 128)
                        + *(_DWORD *)(v1 + 136))
                       + 3) & 0xFFFFFFFC)];
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, *(void **)v145, v125, &v125[4 * v124], v124);
          LODWORD(v124) = *(_DWORD *)(v1 + 144);
        }
        if (*(_OWORD *)(v1 + 176) != 0 && v124)
        {
          if (*(unsigned char *)(v1 + 208)) {
            int v126 = v124;
          }
          else {
            int v126 = 0;
          }
          uint64_t v127 = &v114[4 * v126
                     + 4
                     * ((*(_DWORD *)(v1 + 124)
                       + *(_DWORD *)(v1 + 132)
                       + *(_DWORD *)(v1 + 140)
                       - (*(_DWORD *)(v1 + 120)
                        + *(_DWORD *)(v1 + 128)
                        + *(_DWORD *)(v1 + 136))
                       + 3) & 0xFFFFFFFC)];
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, *(void **)v145, v127, &v127[4 * v124], v124);
        }
        uint64_t v128 = *(unsigned int *)(v1 + 148);
        if (v128)
        {
          int v129 = *(_DWORD *)(v1 + 144);
          if (*(unsigned char *)(v1 + 208)) {
            int v130 = *(_DWORD *)(v1 + 144);
          }
          else {
            int v130 = 0;
          }
          if (*(_OWORD *)(v1 + 176) == 0) {
            int v129 = 0;
          }
          uint64_t v131 = &v114[4 * v130
                     + 4 * v129
                     + 4
                     * ((*(_DWORD *)(v1 + 124)
                       + *(_DWORD *)(v1 + 132)
                       + *(_DWORD *)(v1 + 140)
                       - (*(_DWORD *)(v1 + 120)
                        + *(_DWORD *)(v1 + 128)
                        + *(_DWORD *)(v1 + 136))
                       + 3) & 0xFFFFFFFC)];
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, *(void **)v145, v131, &v131[4 * v128], v128);
        }
        uint64_t v132 = *(void **)(v2 + 592);
        uint64_t v133 = (*(void *)(v2 + 600) - (void)v132) >> 2;
        unint64_t v134 = n;
        int v135 = *(_DWORD *)(v2 + 956);
        *(void *)(v2 + 592) = n;
        uint64_t v136 = *(void *)v145;
        *uint64_t v141 = *(_OWORD *)v145;
        *(_DWORD *)(v2 + 956) = v135 + ((v136 - v134) >> 2) - v133;
        if (v132) {
          operator delete(v132);
        }
        goto LABEL_192;
      }
    }
    else
    {
      uint64_t v113 = 0;
      uint64_t v114 = *v4;
      if (v96) {
        goto LABEL_168;
      }
    }
    if (v103 != v104)
    {
      std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int const*,unsigned int const*>(&n, v113, v114, &v114[4 * (v103 - v104)], (v103 - v104));
      int v97 = *(unsigned __int8 *)(v1 + 313);
    }
    goto LABEL_168;
  }
LABEL_192:
  if (*(unsigned char *)(v1 + 315))
  {
    uint64_t v137 = *(__int16 **)(v2 + 688);
    for (munint64_t m = *(__int16 **)(v2 + 696); v137 != mm; v137 += 2)
    {
      if (*v137 == -1)
      {
        *uint64_t v137 = 49;
        v137[1] = *(_DWORD *)(*v66 + 4 * (unsigned __int16)v137[1]);
      }
    }
    *(void *)(v2 + 624) = *(void *)(v2 + 616);
  }
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::finalizeGatherSizes(v2, v1);
  uint64_t v139 = *(void *)(v2 + 544);
  if (v139)
  {
    uint64_t v140 = AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(v139);
    MEMORY[0x24566ED90](v140, 0x1030C40704B4075);
  }
  *(void *)(v2 + 544) = 0;
  uint64_t result = *(void *)(v2 + 536);
  if (result)
  {
    ProgramBindingsAndDMAList::~ProgramBindingsAndDMAList((ProgramBindingsAndDMAList *)result);
    uint64_t result = MEMORY[0x24566ED90]();
  }
  *(void *)(v2 + 536) = 0;
  return result;
}

void sub_242AD6DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::finalizeGatherSizes(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 792);
  uint64_t v3 = *(void *)(result + 784);
  if (v2 == v3) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(result + 744) & 1;
  }
  int v5 = *(void *)(result + 624) - *(void *)(result + 616);
  uint64_t v6 = (*(void *)(result + 600) - *(void *)(result + 592)) >> 2;
  int v7 = 8 * (v6 + ((*(void *)(result + 648) - *(void *)(result + 640)) >> 2));
  *(_DWORD *)(result + 560) = ((*(_DWORD *)(result + 696)
                              - *(_DWORD *)(result + 688)
                              + ((v5
                                + 4
                                * (*(_DWORD *)(result + 756)
                                 + *(_DWORD *)(result + 752)
                                 + v4
                                 + (((v2 - v3) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                            + v7;
  unsigned int v8 = (*(_DWORD *)(a2 + 124)
      + *(_DWORD *)(a2 + 132)
      + *(_DWORD *)(a2 + 140)
      - (*(_DWORD *)(a2 + 120)
       + *(_DWORD *)(a2 + 128)
       + *(_DWORD *)(a2 + 136))
      + 3) & 0xFFFFFFFC;
  *(_DWORD *)(result + 564) = 8 * v8;
  int v9 = *(unsigned __int8 *)(a2 + 208);
  int v10 = *(_DWORD *)(a2 + 144);
  if (!*(unsigned char *)(a2 + 208)) {
    int v10 = 0;
  }
  *(_DWORD *)(result + 568) = 8 * (v10 + v8);
  *(_DWORD *)(result + 572) = 8 * v6;
  *(_DWORD *)(result + 576) = v7;
  *(_DWORD *)(result + 580) = v7 + (v5 & 0xFFFFFFFC);
  int v11 = *(_DWORD *)(a2 + 144);
  if (v9) {
    int v12 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *(void *)(a2 + 176);
  if (*(_OWORD *)(a2 + 176) == 0) {
    int v11 = 0;
  }
  *(_DWORD *)(result + 584) = 8 * (v12 + v11 + v8);
  int v14 = *(_DWORD *)(a2 + 144);
  if (v13 | *(void *)(a2 + 184)) {
    int v15 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v15 = 0;
  }
  if (!v9) {
    int v14 = 0;
  }
  uint64_t v16 = *(void *)(a2 + 148);
  *(_DWORD *)(result + 588) = 8 * (v14 + v16 + v15 + v8);
  if (v9) {
    int v17 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v17 = 0;
  }
  if (v13 | *(void *)(a2 + 184)) {
    int v18 = *(_DWORD *)(a2 + 144);
  }
  else {
    int v18 = 0;
  }
  *(_DWORD *)(result + 960) = v18 + v17;
  *(void *)(result + 964) = v16;
  return result;
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(uint64_t result)
{
  unsigned int v1 = *(void *)(result + 512) != 0;
  *(_DWORD *)(result + 336) = v1;
  if (*(void *)(result + 520))
  {
    v1 |= 2u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 528))
  {
    v1 |= 4u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 536))
  {
    v1 |= 8u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 544))
  {
    v1 |= 0x10u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 552))
  {
    v1 |= 0x20u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 560))
  {
    v1 |= 0x40u;
    *(_DWORD *)(result + 336) = v1;
  }
  uint64_t v2 = (int *)MEMORY[0x263F4B188];
  unsigned int v3 = v1;
  do
  {
    unsigned int v4 = __clz(__rbit32(v3));
    unsigned int v5 = v3 & ~(1 << v4);
    if (!v5) {
      break;
    }
    uint64_t v6 = result + 8 * v4;
    uint64_t v7 = *v2;
    int v8 = *(_DWORD *)(*(void *)(v6 + 512) + v7 + 48);
    unsigned int v3 = v5;
    do
    {
      unsigned int v9 = __clz(__rbit32(v5));
      int v10 = 1 << v9;
      if (v8 == *(_DWORD *)(*(void *)(result + 8 * v9 + 512) + v7 + 48))
      {
        v1 &= ~v10;
        *(_DWORD *)(result + 336) = v1;
        v3 &= ~v10;
      }
      v5 &= ~v10;
    }
    while (v5);
  }
  while (v3);
  return result;
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const std::string *a5, uint64_t a6, long long *a7, uint64_t a8, char a9)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v11 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v12 = (char *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v213 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v214 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v13 = *a7;
  *(void *)(a1 + 648) = *((void *)a7 + 2);
  *(_OWORD *)(a1 + 632) = v13;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  int v14 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a3;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(unsigned char *)(a1 + 1228) = a9;
  *(_WORD *)(a1 + 1229) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v15 = *(unsigned __int8 *)(a6 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  bzero(v12, 0x30uLL);
  *(unsigned char *)(v11 + 672) = 0;
  uint64_t v221 = v11;
  *(unsigned char *)(v11 + 1191) = 0;
  if (a4[28])
  {
    uint64_t v16 = (unsigned int **)(a4 + 98);
    if (a4[29]) {
      uint64_t v16 = (unsigned int **)(a4 + 28);
    }
  }
  else
  {
    uint64_t v16 = (unsigned int **)(a4 + 98);
  }
  int v17 = 0;
  if (*v16 && v16[1]) {
    int v17 = (int *)((char *)*v16 + **v16);
  }
  int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0) {
    uint64_t v20 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    uint64_t v20 = 0;
  }
  int v21 = a4 + 58;
  if (a4[58])
  {
    uint64_t v22 = (unsigned int **)(a4 + 128);
    if (a4[59]) {
      uint64_t v22 = (unsigned int **)(a4 + 58);
    }
  }
  else
  {
    uint64_t v22 = (unsigned int **)(a4 + 128);
  }
  uint64_t v23 = 0;
  if (*v22 && v22[1]) {
    uint64_t v23 = (int *)((char *)*v22 + **v22);
  }
  int v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
    unsigned int v26 = (int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
  }
  else {
    unsigned int v26 = 0;
  }
  uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 < 0x11u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[8];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v26 + v28);
    }
  }
  *int v14 = v28;
  int v29 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v29 < 7u)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    uint64_t v30 = v29[3];
    if (v30) {
      LODWORD(v30) = *(int *)((char *)v26 + v30);
    }
  }
  *(_DWORD *)(a1 + 408) = v30;
  int v31 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v31 >= 0x13u && (uint64_t v32 = v31[9]) != 0) {
    unsigned int v33 = (char *)v26 + v32 + *(unsigned int *)((char *)v26 + v32) + 4;
  }
  else {
    unsigned int v33 = "";
  }
  int v219 = (unint64_t ***)(v221 + 680);
  MEMORY[0x24566EB20](v214, v33);
  std::string::operator=((std::string *)(v221 + 400), a5);
  uint64_t v34 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v34 >= 9u && (uint64_t v35 = v34[4]) != 0) {
    unsigned int v36 = (char *)v26 + v35 + *(unsigned int *)((char *)v26 + v35) + 4;
  }
  else {
    unsigned int v36 = "";
  }
  MEMORY[0x24566EB20](v213, v36);
  int v37 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v37 < 0x29u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v38 = v37[20];
    if (v38) {
      LOBYTE(v38) = *((unsigned char *)v26 + v38) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v38;
  uint64_t v39 = *v21;
  if (*v21)
  {
    int v40 = (unsigned int **)(a4 + 128);
    if (a4[59]) {
      int v40 = (unsigned int **)(a4 + 58);
    }
  }
  else
  {
    int v40 = (unsigned int **)(a4 + 128);
  }
  unsigned int v41 = 0;
  if (*v40 && v40[1]) {
    unsigned int v41 = (int *)((char *)*v40 + **v40);
  }
  uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
  if (*v42 >= 7u)
  {
    int v43 = v42[3];
    if (!v43)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v43;
      if (v39)
      {
        int v51 = (unsigned int **)(a4 + 128);
        if (a4[59]) {
          int v51 = (unsigned int **)(a4 + 58);
        }
      }
      else
      {
        int v51 = (unsigned int **)(a4 + 128);
      }
      unsigned int v52 = 0;
      if (*v51 && v51[1]) {
        unsigned int v52 = (int *)((char *)*v51 + **v51);
      }
      unsigned int v53 = (unsigned __int16 *)((char *)v52 - *v52);
      if (*v53 < 7u || !v53[3]) {
        goto LABEL_96;
      }
      if (v39)
      {
        unsigned int v54 = (unsigned int **)(a4 + 128);
        if (a4[59]) {
          unsigned int v54 = (unsigned int **)(a4 + 58);
        }
      }
      else
      {
        unsigned int v54 = (unsigned int **)(a4 + 128);
      }
      uint64_t v55 = 0;
      if (*v54 && v54[1]) {
        uint64_t v55 = (int *)((char *)*v54 + **v54);
      }
      int8x16_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v56 >= 7u && (uint64_t v57 = v56[3]) != 0) {
        int v58 = (int *)((char *)v55 + v57 + *(unsigned int *)((char *)v55 + v57));
      }
      else {
        int v58 = 0;
      }
      int v59 = (unsigned __int16 *)((char *)v58 - *v58);
      if (*v59 >= 0xDu && (uint64_t v60 = v59[6]) != 0) {
        int v61 = *(int *)((char *)v58 + v60);
      }
      else {
LABEL_96:
      }
        int v61 = 0;
      *(_DWORD *)(a1 + 572) = v61;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a6 + 465);
      size_t v62 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v62 < 0x4Du)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[38];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v20 + v63);
        }
      }
      *(_DWORD *)(a1 + 400) = v63;
      int v64 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v64 < 0x53u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[41];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v20 + v65);
        }
      }
      *(_DWORD *)(a1 + 404) = v65;
      uint64_t v66 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v66 < 0x43u)
      {
        LODWORD(v67) = 0;
      }
      else
      {
        uint64_t v67 = v66[33];
        if (v67) {
          LODWORD(v67) = *(int *)((char *)v20 + v67);
        }
      }
      int v68 = 0;
      *(_DWORD *)(a1 + 576) = v67;
      *(_DWORD *)(a1 + 580) = 0;
      unsigned int v69 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v69 >= 0x21u)
      {
        uint64_t v70 = v69[16];
        if (v70) {
          int v68 = *(int *)((char *)v20 + v70);
        }
        else {
          int v68 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v68;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v71 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v71 < 5u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[2];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v20 + v72);
        }
      }
      *(_DWORD *)(a1 + 592) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v73 < 0x51u)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[40];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v20 + v74);
        }
      }
      *(_DWORD *)(a1 + 596) = v74;
      uint64_t v75 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v75 < 0x4Fu)
      {
        LODWORD(v76) = 0;
      }
      else
      {
        uint64_t v76 = v75[39];
        if (v76) {
          LODWORD(v76) = *(int *)((char *)v20 + v76);
        }
      }
      *(_DWORD *)(a1 + 600) = v76;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a6 + 465);
      *(void *)(a1 + 496) = 0;
      int v77 = (char *)v20 - *v20;
      size_t v78 = *(unsigned int *)((char *)v20
                            + *((unsigned __int16 *)v77 + 15)
                            + *(unsigned int *)((char *)v20 + *((unsigned __int16 *)v77 + 15)));
      uint64_t v79 = *((unsigned __int16 *)v77 + 13);
      if (v79) {
        LODWORD(v79) = *(int *)((char *)v20 + v79);
      }
      uint64_t v80 = v79;
      uint64_t v81 = *(unsigned int *)(a6 + 152);
      if (*(unsigned char *)(a6 + 416)) {
        unint64_t v82 = ((*(void *)(a6 + 248) + *(void *)(a6 + 224) - (*(void *)(a6 + 240) + *(void *)(a6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(a6 + 400) + *(void *)(a6 + 352) - (*(void *)(a6 + 392) + *(void *)(a6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v82 = 0;
      }
      uint64_t v83 = (v78 + 31) & 0x1FFFFFFE0;
      if (v79) {
        uint64_t v84 = (v78 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v84 = v78;
      }
      uint64_t v223 = v84;
      uint64_t v85 = v84 + v79;
      if (v81) {
        unint64_t v82 = ((v85 + v82 + 31) & 0xFFFFFFFFFFFFFFE0) - v85;
      }
      unint64_t v224 = v82;
      uint64_t v86 = v85 + 8 * v81 + v82;
      uint64_t v220 = v20;
      unsigned int v216 = v26;
      unsigned int v215 = v12;
      if (!v86) {
        goto LABEL_216;
      }
      int v212 = *(_DWORD *)(a6 + 152);
      if (a9)
      {
        AGX::Heap<true>::allocateImpl(&v227, a3 + 5688, v86, 0);
        uint64_t v87 = a1;
        int v88 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v228;
        long long v89 = *(_OWORD *)v228;
        *(_OWORD *)(v221 + 1024) = v227;
        *(_OWORD *)(v221 + 1040) = v89;
        *(_OWORD *)(v221 + 1049) = *(_OWORD *)&v228[9];
        std::string __dst = *(char **)(a1 + 1072);
        uint64_t v217 = *(void *)(a1 + 1064) + 0x1000000000;
        *(void *)(a1 + 976) = v217;
      }
      else
      {
        uint64_t v87 = a1;
        AGX::Heap<true>::allocateImpl(&v227, a3 + 5184, v86, (void *)(a1 + 552));
        int v88 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v228;
        long long v90 = *(_OWORD *)v228;
        *(_OWORD *)(v221 + 624) = v227;
        *(_OWORD *)(v221 + 640) = v90;
        *(_OWORD *)(v221 + 649) = *(_OWORD *)&v228[9];
        std::string __dst = *(char **)(a1 + 672);
        uint64_t v217 = *(void *)(a1 + 664);
      }
      *(_DWORD *)(v87 + 1224) = v88;
      uint64_t v20 = v220;
      int v91 = v212;
      if (v78)
      {
        uint64_t v92 = v85;
        uint64_t v93 = (unsigned __int16 *)((char *)v220 - *v220);
        uint64_t v94 = v80;
        if (*v93 < 0x1Fu)
        {
          int v96 = v15;
          uint64_t v95 = 0;
        }
        else
        {
          uint64_t v95 = v93[15];
          int v96 = v15;
          if (v95) {
            v95 += (uint64_t)v220 + *(unsigned int *)((char *)v220 + v95);
          }
        }
        memcpy(__dst, (const void *)(v95 + 4), v78);
        *(void *)(a1 + 608) = v217;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v223;
        int v15 = v96;
        uint64_t v80 = v94;
        uint64_t v85 = v92;
      }
      if (!v80)
      {
        if (v224) {
          goto LABEL_198;
        }
        goto LABEL_201;
      }
      if (a9) {
        *(void *)(a1 + 984) = v217 + v83;
      }
      int v97 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v97 >= 0xBu && (uint64_t v98 = v97[5]) != 0) {
        BOOL v99 = (char *)v26 + v98 + *(unsigned int *)((char *)v26 + v98);
      }
      else {
        BOOL v99 = 0;
      }
      uint64_t v100 = *(unsigned __int16 *)((char *)v220 - *v220 + 28);
      uint64_t v101 = *(unsigned int *)((char *)v220 + v100);
      if (!*(int *)((char *)v220 + v100 + v101))
      {
        int v12 = v215;
        if (!v224) {
          goto LABEL_201;
        }
        goto LABEL_198;
      }
      uint64_t v102 = 0;
      unint64_t v103 = 0;
      int v104 = &__dst[v83];
      unsigned int v211 = v99 + 4;
      uint64_t v105 = 24;
      if (!v15) {
        uint64_t v105 = 8;
      }
      int v209 = &__dst[v83];
      size_t v210 = v105;
      while (1)
      {
        uint64_t v106 = v100;
        uint64_t v107 = v100 + v101;
        int v108 = &v20[v102];
        uint64_t v109 = *(unsigned int *)((char *)&v20[v102 + 1] + v107);
        uint64_t v110 = v107 + v109;
        int v111 = (char *)&v20[v102] + v107 + v109;
        uint64_t v112 = *((int *)v111 + 1);
        uint64_t v113 = (char *)v108 + v110 - v112;
        unsigned int v114 = *((unsigned __int16 *)v113 + 2);
        if (v114 < 5) {
          goto LABEL_159;
        }
        uint64_t v115 = *((unsigned __int16 *)v113 + 4);
        if (!v115) {
          goto LABEL_159;
        }
        int v116 = *((unsigned __int8 *)v220 + v106 + v101 + v109 + v102 * 4 + v115 + 4);
        if (v116 != 114)
        {
          if (v116 == 18)
          {
            if (v114 < 9)
            {
              uint64_t v118 = 0;
            }
            else
            {
              uint64_t v117 = v106 + v101 + v109;
              uint64_t v118 = *(unsigned __int16 *)((char *)&v220[v102 + 3] + v117 - v112);
              if (v118) {
                uint64_t v118 = *(unsigned int *)((char *)v220 + v117 + v102 * 4 + v118 + 4);
              }
            }
            int v121 = &v104[8 * v118];
            bzero(v121, v210);
            int v122 = (char *)&v220[v102] + v106 + v101 + v109 - *((int *)v111 + 1);
            if (*((unsigned __int16 *)v122 + 2) < 7u)
            {
              uint64_t v123 = 0;
            }
            else
            {
              uint64_t v123 = *((unsigned __int16 *)v122 + 5);
              if (v123) {
                uint64_t v123 = *(unsigned int *)((char *)v220 + v106 + v101 + v109 + v102 * 4 + v123 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (int *)&v211[4 * v123 + *(unsigned int *)&v211[4 * v123]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v231.n128_u64, (uint64_t)&v227);
            *(void *)int v121 = v231.n128_u64[0];
            if (v230 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v219, (uint64_t)v121);
          }
          goto LABEL_159;
        }
        if (v114 < 7)
        {
          uint64_t v120 = 0;
        }
        else
        {
          uint64_t v119 = v106 + v101 + v109;
          uint64_t v120 = *(unsigned __int16 *)((char *)&v220[v102 + 2] + v119 - v112 + 2);
          if (v120) {
            uint64_t v120 = *(unsigned int *)((char *)v220 + v119 + v102 * 4 + v120 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (int *)&v211[4 * v120 + *(unsigned int *)&v211[4 * v120]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v231, *(void *)(a1 + 776), (uint64_t)&v227);
        int v124 = *(_DWORD *)(v231.n128_u64[0] + 96);
        uint64_t v125 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v125 >= *(void *)(a1 + 768))
        {
          uint64_t v127 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v221 + 712, v231);
          int v104 = v209;
        }
        else
        {
          v125->n128_u64[0] = v231.n128_u64[0];
          unint64_t v126 = v231.n128_u64[1];
          v125->n128_u64[1] = v231.n128_u64[1];
          int v104 = v209;
          if (v126) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v127 = v125 + 1;
        }
        *(void *)(a1 + 760) = v127;
        uint64_t v128 = (char *)&v220[v102] + v106 + v101 + v109 - *((int *)v111 + 1);
        if (*((unsigned __int16 *)v128 + 2) < 9u)
        {
          uint64_t v129 = 0;
        }
        else
        {
          uint64_t v129 = *((unsigned __int16 *)v128 + 6);
          if (v129) {
            uint64_t v129 = *(unsigned int *)((char *)v220 + v106 + v101 + v109 + v102 * 4 + v129 + 4);
          }
        }
        *(_DWORD *)&v104[4 * v129] = v124;
        int v130 = (std::__shared_weak_count *)v231.n128_u64[1];
        if (v231.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v231.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v230 < 0) {
          goto LABEL_190;
        }
LABEL_159:
        ++v103;
        uint64_t v20 = v220;
        uint64_t v100 = *(unsigned __int16 *)((char *)v220 - *v220 + 28);
        uint64_t v101 = *(unsigned int *)((char *)v220 + v100);
        ++v102;
        if (v103 >= *(unsigned int *)((char *)v220 + v100 + v101))
        {
          unsigned int v26 = v216;
          int v12 = v215;
          int v91 = v212;
          if (!v224) {
            goto LABEL_201;
          }
LABEL_198:
          *(void *)(a1 + 496) = v85 + v217;
          uint64_t v131 = &__dst[v223 + v80];
          uint64_t v132 = a6;
          uint64_t v133 = *(const void **)(a6 + 216);
          size_t v134 = *(void *)(a6 + 224) - (void)v133;
          *(_WORD *)uint64_t v131 = v134 >> 2;
          *((_WORD *)v131 + 1) = (*(_DWORD *)(a6 + 248) - *(_DWORD *)(a6 + 240)) >> 2;
          *((_WORD *)v131 + 2) = (*(_DWORD *)(a6 + 352) - *(_DWORD *)(a6 + 344)) >> 1;
          *((_WORD *)v131 + 3) = (*(_DWORD *)(a6 + 400) - *(_DWORD *)(a6 + 392)) >> 1;
          memcpy(v131 + 8, v133, v134);
          int v135 = &v131[*(void *)(v132 + 224) - *(void *)(v132 + 216) + 8];
          memcpy(v135, *(const void **)(v132 + 240), *(void *)(v132 + 248) - *(void *)(v132 + 240));
          uint64_t v136 = &v135[*(void *)(v132 + 248) - *(void *)(v132 + 240)];
          memcpy(v136, *(const void **)(v132 + 344), *(void *)(v132 + 352) - *(void *)(v132 + 344));
          memcpy(&v136[*(void *)(v132 + 352) - *(void *)(v132 + 344)], *(const void **)(v132 + 392), *(void *)(v132 + 400) - *(void *)(v132 + 392));
          if (!*((_WORD *)v131 + 2)) {
            *((_WORD *)v131 + 2) = *(_WORD *)v131;
          }
          int v91 = v212;
          if (*((_WORD *)v131 + 3))
          {
LABEL_201:
            if (!v91) {
              goto LABEL_216;
            }
LABEL_202:
            *(void *)(v221 + 464) = &__dst[v223 + v80 + v224];
            uint64_t v137 = (unsigned __int16 *)((char *)v26 - *v26);
            if (*v137 >= 0xBu && (uint64_t v138 = v137[5]) != 0)
            {
              uint64_t v139 = (int *)((char *)v26 + v138 + *(unsigned int *)((char *)v26 + v138));
              if (!a9)
              {
LABEL_208:
                if (v139 && *v139)
                {
                  unint64_t v140 = 0;
                  uint64_t v141 = 1;
                  do
                  {
                    uint64_t v142 = (void *)(*(void *)(v221 + 464) + 8 * (((v141 * 4) - 4) & 0xFFFFFFFC));
                    AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (_DWORD *)((char *)&v139[v141] + v139[v141]));
                    AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v231.n128_u64, (uint64_t)&v227);
                    *uint64_t v142 = v231.n128_u64[0];
                    if (v230 < 0) {
                      operator delete(__p);
                    }
                    std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v219, (uint64_t)v142);
                    ++v140;
                    ++v141;
                  }
                  while (v140 < *v139);
                }
                goto LABEL_216;
              }
            }
            else
            {
              uint64_t v139 = 0;
              if (!a9) {
                goto LABEL_208;
              }
            }
            *(void *)(a1 + 992) = v85 + v224 + v217;
            goto LABEL_208;
          }
          *((_WORD *)v131 + 3) = *((_WORD *)v131 + 1);
          if (v212) {
            goto LABEL_202;
          }
LABEL_216:
          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a3, v219);
          unint64_t v143 = (unsigned __int16 *)((char *)v20 - *v20);
          uint64_t v144 = v143[8];
          uint64_t v145 = *(unsigned int *)((char *)v20 + v144);
          uint64_t v146 = (unsigned int *)((char *)v20 + v144 + v145);
          uint64_t v147 = *v146;
          if (v147)
          {
            unint64_t v148 = 0;
            uint64_t v149 = 4 * v147;
            uint64_t v150 = (char *)v20 + v144 + v145;
            do
            {
              uint64_t v155 = v146[v148 / 4 + 1];
              int v156 = &v150[v148 + v155 - *(int *)((char *)&v146[v148 / 4 + 1] + v155)];
              if (*((unsigned __int16 *)v156 + 2) < 7u)
              {
                LODWORD(v151) = 0;
              }
              else
              {
                uint64_t v151 = *((unsigned __int16 *)v156 + 5);
                if (v151)
                {
                  unint64_t v157 = *(unsigned int *)&v150[v148 + 4 + v155 + v151];
                  LODWORD(v151) = v157;
                  if ((v157 & 0x80000000) != 0)
                  {
                    *(void *)&v12[8 * ((v157 & 0x7C000000) != 0)] |= 1 << (v157 >> 20);
                    uint64_t v152 = 0x11800000000000;
                    uint64_t v154 = v12;
                    goto LABEL_220;
                  }
                }
              }
              uint64_t v152 = 1 << v151;
              uint64_t v153 = 8 * ((v151 & 0xFFFC0) != 0);
              *(void *)(a1 + 56 + v153) |= v152;
              uint64_t v154 = (void *)(a1 + 104 + v153);
LABEL_220:
              *v154 |= v152;
              v148 += 4;
            }
            while (v149 != v148);
          }
          uint64_t v158 = v143[10];
          uint64_t v159 = *(unsigned int *)((char *)v20 + v158);
          uint64_t v160 = (unsigned int *)((char *)v20 + v158 + v159);
          uint64_t v161 = *v160;
          if (v161)
          {
            unint64_t v162 = 0;
            uint64_t v163 = 4 * v161;
            uint64_t v164 = (char *)v20 + v158 + v159;
            do
            {
              uint64_t v169 = v160[v162 / 4 + 1];
              uint64_t v170 = &v164[v162 + v169 - *(int *)((char *)&v160[v162 / 4 + 1] + v169)];
              if (*((unsigned __int16 *)v170 + 2) < 7u)
              {
                LODWORD(v165) = 0;
              }
              else
              {
                uint64_t v165 = *((unsigned __int16 *)v170 + 5);
                if (v165)
                {
                  unint64_t v171 = *(unsigned int *)&v164[v162 + 4 + v169 + v165];
                  LODWORD(v165) = v171;
                  if ((v171 & 0x80000000) != 0)
                  {
                    uint64_t v166 = 1 << (v171 >> 20);
                    int v168 = &v12[8 * ((v171 & 0x7C000000) != 0)];
                    goto LABEL_229;
                  }
                }
              }
              uint64_t v166 = 1 << v165;
              uint64_t v167 = 8 * ((v165 & 0xFFFC0) != 0);
              *(void *)(a1 + 72 + v167) |= v166;
              int v168 = (char *)(a1 + 120 + v167);
LABEL_229:
              *(void *)v168 |= v166;
              v162 += 4;
            }
            while (v163 != v162);
          }
          uint64_t v172 = v143[6];
          uint64_t v173 = *(unsigned int *)((char *)v20 + v172);
          uint64_t v174 = (unsigned int *)((char *)v20 + v172 + v173);
          uint64_t v175 = *v174;
          if (v175)
          {
            unint64_t v176 = 0;
            uint64_t v177 = 4 * v175;
            int v178 = (char *)v20 + v172 + v173;
            do
            {
              uint64_t v182 = v174[v176 / 4 + 1];
              uint64_t v183 = &v178[v176 + v182 - *(int *)((char *)&v174[v176 / 4 + 1] + v182)];
              if (*((unsigned __int16 *)v183 + 2) < 7u)
              {
                LODWORD(v179) = 0;
              }
              else
              {
                unint64_t v179 = *((unsigned __int16 *)v183 + 5);
                if (v179)
                {
                  unint64_t v179 = *(unsigned int *)&v178[v176 + 4 + v182 + v179];
                  if ((v179 & 0x80000000) != 0)
                  {
                    uint64_t v180 = 1 << (v179 >> 20);
                    BOOL v181 = (v179 & 0x7C000000) != 0;
                    goto LABEL_238;
                  }
                  LODWORD(v179) = v179 & 0xFFFFF;
                  if (v179 <= 0x35 && ((1 << v179) & 0x26000000000000) != 0) {
                    goto LABEL_239;
                  }
                }
              }
              uint64_t v180 = 1 << v179;
              BOOL v181 = v179 > 0x3F;
              *(void *)(v221 + 8 * v181) |= v180;
LABEL_238:
              *(void *)&v12[8 * v181] |= v180;
LABEL_239:
              v176 += 4;
            }
            while (v177 != v176);
          }
          int8x16_t v185 = *(int8x16_t *)(a6 + 160);
          if (*(_OWORD *)&v185 != 0)
          {
            *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v185);
            *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v185);
          }
          int8x16_t v186 = *(int8x16_t *)(a6 + 192);
          if (*(_OWORD *)&v186 != 0)
          {
            *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v186);
            *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v186);
          }
          uint64_t v187 = v143[12];
          uint64_t v188 = *(unsigned int *)((char *)v20 + v187);
          uint64_t v189 = (unsigned int *)((char *)v20 + v187 + v188);
          uint64_t v190 = *v189;
          if (!v190)
          {
LABEL_290:
            if (!*(unsigned char *)(a1 + 1231))
            {
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(a6 + 424);
              *(_OWORD *)(a1 + 248) = *(_OWORD *)(a6 + 440);
              *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(a6 + 440), *(int8x16_t *)(a6 + 424));
            }
            operator new();
          }
          unint64_t v191 = 0;
          uint64_t v192 = 4 * v190;
          uint64_t v193 = (char *)v20 + v187 + v188;
          while (2)
          {
            uint64_t v196 = *(unsigned int *)&v193[v191 + 4];
            uint64_t v197 = v196 - *(int *)((char *)&v189[v191 / 4 + 1] + v196);
            uint64_t v198 = &v193[v191 + v197];
            unsigned int v199 = *((unsigned __int16 *)v198 + 2);
            if (v199 < 7)
            {
              if (v199 >= 5) {
                goto LABEL_263;
              }
            }
            else
            {
              uint64_t v200 = *((unsigned __int16 *)v198 + 5);
              if (v200)
              {
                unsigned int v201 = *(_DWORD *)&v193[v191 + 4 + v196 + v200];
                goto LABEL_264;
              }
LABEL_263:
              unsigned int v201 = 0;
LABEL_264:
              uint64_t v202 = *(unsigned __int16 *)&v193[v191 + 8 + v197];
              if (v202)
              {
                int v203 = v193[v191 + 4 + v196 + v202];
                uint64_t v195 = (char *)(a1 + 184);
                uint64_t v194 = 1;
                switch(v193[v191 + 4 + v196 + v202])
                {
                  case 11:
                  case 12:
                  case 13:
                  case 16:
                  case 17:
                  case 62:
                  case 93:
                  case 97:
                  case 98:
                  case 113:
                    if ((v201 & 0x80000000) != 0)
                    {
                      uint64_t v194 = 1 << (v201 >> 20);
                      uint64_t v195 = &v12[8 * ((v201 & 0x7C000000) != 0)];
                      goto LABEL_257;
                    }
                    if ((v201 & 0xFFF00000) != 0x400000)
                    {
                      if (v203 == 113 || v203 == 98) {
                        uint64_t v205 = 32;
                      }
                      else {
                        uint64_t v205 = 16;
                      }
                      uint64_t v194 = 1 << v201;
                      uint64_t v206 = a1 + v205 + 8 * ((v201 & 0xFFFC0) != 0);
                      *(void *)(v206 + 136) |= 1 << v201;
                      uint64_t v195 = (char *)(v206 + 88);
LABEL_257:
                      *(void *)v195 |= v194;
                    }
                    break;
                  case 24:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 4;
                    goto LABEL_257;
                  case 25:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 8;
                    goto LABEL_257;
                  case 27:
                    goto LABEL_257;
                  case 28:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 2;
                    goto LABEL_257;
                  case 59:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 16;
                    goto LABEL_257;
                  case 60:
                  case 61:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 32;
                    goto LABEL_257;
                  case 75:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 64;
                    goto LABEL_257;
                  case 84:
                  case 85:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 128;
                    goto LABEL_257;
                  case 108:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 256;
                    goto LABEL_257;
                  case 109:
                  case 110:
                    uint64_t v194 = 1 << v201;
                    uint64_t v207 = 8 * ((v201 & 0xFFFC0) != 0);
                    *(void *)(a1 + 136 + v207) |= 1 << v201;
                    uint64_t v195 = &v12[v207];
                    goto LABEL_257;
                  case 111:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 512;
                    goto LABEL_257;
                  case 112:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 1024;
                    goto LABEL_257;
                  case 118:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 2048;
                    goto LABEL_257;
                  case 119:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 4096;
                    goto LABEL_257;
                  case 120:
                    uint64_t v195 = (char *)(a1 + 184);
                    uint64_t v194 = 0x2000;
                    goto LABEL_257;
                  case -117:
                    uint64_t v194 = 1 << v201;
                    uint64_t v208 = 8 * ((v201 & 0xFFFC0) != 0);
                    *(void *)(v221 + v208) |= 1 << v201;
                    uint64_t v195 = &v12[v208];
                    goto LABEL_257;
                  default:
                    break;
                }
              }
            }
            v191 += 4;
            if (v192 == v191) {
              goto LABEL_290;
            }
            continue;
          }
        }
      }
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
      if ((v230 & 0x80000000) == 0) {
        goto LABEL_159;
      }
LABEL_190:
      operator delete(__p);
      goto LABEL_159;
    }
    if (v39)
    {
      size_t v44 = (unsigned int **)(a4 + 128);
      if (a4[59]) {
        size_t v44 = (unsigned int **)(a4 + 58);
      }
    }
    else
    {
      size_t v44 = (unsigned int **)(a4 + 128);
    }
    uint64_t v45 = 0;
    if (*v44 && v44[1]) {
      uint64_t v45 = (int *)((char *)*v44 + **v44);
    }
    uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v46 >= 7u && (uint64_t v47 = v46[3]) != 0) {
      unint64_t v48 = (int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
    }
    else {
      unint64_t v48 = 0;
    }
    unint64_t v49 = (unsigned __int16 *)((char *)v48 - *v48);
    if (*v49 >= 0xBu)
    {
      uint64_t v50 = v49[5];
      if (v50)
      {
        int v43 = *(int *)((char *)v48 + v50);
        goto LABEL_71;
      }
    }
  }
  int v43 = 0;
  goto LABEL_71;
}

void sub_242ADA4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, void **a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a10);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a13);
  int v51 = *a30;
  if (*a30)
  {
    *(void *)(a33 + 728) = v51;
    operator delete(v51);
  }
  if (*(char *)(a33 + 487) < 0) {
    operator delete(*a19);
  }
  if (*(char *)(a33 + 463) < 0) {
    operator delete(*a20);
  }
  unsigned int v52 = (void **)(a32 + 336);
  if (*(char *)(a33 + 439) < 0)
  {
    operator delete(*a21);
    unsigned int v53 = *v52;
    if (*v52) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v53 = *v52;
    if (*v52)
    {
LABEL_11:
      *(void *)(a33 + 384) = v53;
      operator delete(v53);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(uint64_t a1)
{
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 416));
  uint64_t v2 = *(void **)(a1 + 384);
  if (v2)
  {
    *(void *)(a1 + 392) = v2;
    operator delete(v2);
  }
  return a1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = (__n128 *)(a2 - 40);
  int v12 = (__n128 *)(a2 - 80);
  long long v13 = (__n128 *)(a2 - 120);
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = a2 - v14;
    uint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v14) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 959)
    {
      uint64_t v147 = (__n128 *)(v14 + 40);
      BOOL v149 = v14 == a2 || v147 == (__n128 *)a2;
      if (a4)
      {
        if (!v149)
        {
          uint64_t v150 = 0;
          unint64_t v151 = v14;
          do
          {
            uint64_t v153 = v147;
            unint64_t v154 = *(void *)(v151 + 64);
            if (v154 < *(void *)(v151 + 24))
            {
              unint64_t v277 = v153[1].n128_u64[0];
              __n128 v244 = *v153;
              int v155 = *(_DWORD *)(v151 + 72);
              uint64_t v156 = v150;
              do
              {
                uint64_t v157 = v14 + v156;
                long long v158 = *(_OWORD *)(v14 + v156 + 16);
                *(_OWORD *)(v157 + 40) = *(_OWORD *)(v14 + v156);
                *(_OWORD *)(v157 + 56) = v158;
                *(_DWORD *)(v157 + 72) = *(_DWORD *)(v14 + v156 + 32);
                if (!v156)
                {
                  uint64_t v152 = v14;
                  goto LABEL_122;
                }
                v156 -= 40;
              }
              while (v154 < *(void *)(v157 - 16));
              uint64_t v152 = v14 + v156 + 40;
LABEL_122:
              uint64_t result = v244;
              *(__n128 *)uint64_t v152 = v244;
              *(void *)(v152 + 16) = v277;
              *(void *)(v152 + 24) = v154;
              *(_DWORD *)(v152 + 32) = v155;
            }
            uint64_t v147 = (__n128 *)((char *)v153 + 40);
            v150 += 40;
            unint64_t v151 = (unint64_t)v153;
          }
          while (&v153[2].n128_i8[8] != (__int8 *)a2);
        }
      }
      else if (!v149)
      {
        do
        {
          unint64_t v183 = (unint64_t)v147;
          unint64_t v184 = *(void *)(a1 + 64);
          if (v184 < *(void *)(a1 + 24))
          {
            unint64_t v281 = v147[1].n128_u64[0];
            __n128 v247 = *v147;
            uint64_t v185 = *(void *)(a1 + 72);
            unint64_t v186 = v183;
            do
            {
              long long v187 = *(_OWORD *)(v186 - 24);
              *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 40);
              *(_OWORD *)(v186 + 16) = v187;
              *(_DWORD *)(v186 + 32) = *(_DWORD *)(v186 - 8);
              unint64_t v188 = *(void *)(v186 - 56);
              v186 -= 40;
            }
            while (v184 < v188);
            uint64_t result = v247;
            *(__n128 *)unint64_t v186 = v247;
            *(void *)(v186 + 16) = v281;
            *(void *)(v186 + 24) = v184;
            *(_DWORD *)(v186 + 32) = v185;
          }
          uint64_t v147 = (__n128 *)(v183 + 40);
          a1 = v183;
        }
        while (v183 + 40 != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v14 != a2)
      {
        int64_t v159 = (unint64_t)(v16 - 2) >> 1;
        int64_t v160 = v159;
        do
        {
          if (v159 >= v160)
          {
            uint64_t v162 = (2 * v160) | 1;
            unint64_t v163 = v14 + 40 * v162;
            if (2 * v160 + 2 < v16)
            {
              unint64_t v164 = *(void *)(v14 + 40 * v162 + 24);
              unint64_t v165 = *(void *)(v163 + 64);
              v163 += 40 * (v164 < v165);
              if (v164 < v165) {
                uint64_t v162 = 2 * v160 + 2;
              }
            }
            unint64_t v166 = *(void *)(v14 + 40 * v160 + 24);
            if (*(void *)(v163 + 24) >= v166)
            {
              unint64_t v167 = v14 + 40 * v160;
              uint64_t v278 = *(void *)(v167 + 16);
              long long v245 = *(_OWORD *)v167;
              int v168 = *(_DWORD *)(v167 + 32);
              do
              {
                unint64_t v169 = v167;
                unint64_t v167 = v163;
                long long v170 = *(_OWORD *)v163;
                long long v171 = *(_OWORD *)(v163 + 16);
                *(_DWORD *)(v169 + 32) = *(_DWORD *)(v163 + 32);
                *(_OWORD *)unint64_t v169 = v170;
                *(_OWORD *)(v169 + 16) = v171;
                if (v159 < v162) {
                  break;
                }
                uint64_t v172 = (2 * v162) | 1;
                unint64_t v163 = v14 + 40 * v172;
                uint64_t v173 = 2 * v162 + 2;
                if (v173 < v16)
                {
                  unint64_t v174 = *(void *)(v14 + 40 * v172 + 24);
                  unint64_t v175 = *(void *)(v163 + 64);
                  v163 += 40 * (v174 < v175);
                  if (v174 < v175) {
                    uint64_t v172 = v173;
                  }
                }
                uint64_t v162 = v172;
              }
              while (*(void *)(v163 + 24) >= v166);
              *(_OWORD *)unint64_t v167 = v245;
              *(void *)(v167 + 16) = v278;
              *(void *)(v167 + 24) = v166;
              *(_DWORD *)(v167 + 32) = v168;
            }
          }
          BOOL v161 = v160-- <= 0;
        }
        while (!v161);
        int64_t v189 = v15 / 0x28uLL;
        do
        {
          uint64_t v190 = 0;
          uint64_t v308 = *(void *)(v14 + 32);
          __n128 v248 = *(__n128 *)v14;
          long long v282 = *(_OWORD *)(v14 + 16);
          unint64_t v191 = v14;
          do
          {
            uint64_t v194 = v190 + 1;
            unint64_t v195 = v191 + 40 * (v190 + 1);
            uint64_t v196 = (2 * v190) | 1;
            uint64_t v197 = 2 * v190 + 2;
            if (v197 < v189)
            {
              unint64_t v198 = *(void *)(v191 + 40 * v194 + 24);
              unint64_t v199 = *(void *)(v195 + 64);
              v195 += 40 * (v198 < v199);
              if (v198 < v199) {
                uint64_t v196 = v197;
              }
            }
            __n128 v192 = *(__n128 *)v195;
            long long v193 = *(_OWORD *)(v195 + 16);
            *(_DWORD *)(v191 + 32) = *(_DWORD *)(v195 + 32);
            *(__n128 *)unint64_t v191 = v192;
            *(_OWORD *)(v191 + 16) = v193;
            unint64_t v191 = v195;
            uint64_t v190 = v196;
          }
          while (v196 <= (uint64_t)((unint64_t)(v189 - 2) >> 1));
          a2 -= 40;
          if (v195 == a2)
          {
            uint64_t result = v248;
            *(_DWORD *)(v195 + 32) = v308;
            *(__n128 *)unint64_t v195 = v248;
            *(_OWORD *)(v195 + 16) = v282;
          }
          else
          {
            long long v200 = *(_OWORD *)a2;
            long long v201 = *(_OWORD *)(a2 + 16);
            *(_DWORD *)(v195 + 32) = *(_DWORD *)(a2 + 32);
            *(_OWORD *)unint64_t v195 = v200;
            *(_OWORD *)(v195 + 16) = v201;
            uint64_t result = v248;
            *(_DWORD *)(a2 + 32) = v308;
            *(__n128 *)a2 = v248;
            *(_OWORD *)(a2 + 16) = v282;
            uint64_t v202 = v195 - v14 + 40;
            if (v202 >= 41)
            {
              unint64_t v203 = (v202 / 0x28uLL - 2) >> 1;
              unint64_t v204 = *(void *)(v195 + 24);
              if (*(void *)(v14 + 40 * v203 + 24) < v204)
              {
                uint64_t v317 = *(void *)(v195 + 16);
                __n128 v314 = *(__n128 *)v195;
                int v205 = *(_DWORD *)(v195 + 32);
                do
                {
                  unint64_t v206 = v195;
                  unint64_t v195 = v14 + 40 * v203;
                  __n128 v207 = *(__n128 *)v195;
                  long long v208 = *(_OWORD *)(v195 + 16);
                  *(_DWORD *)(v206 + 32) = *(_DWORD *)(v195 + 32);
                  *(__n128 *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  if (!v203) {
                    break;
                  }
                  unint64_t v203 = (v203 - 1) >> 1;
                }
                while (*(void *)(v14 + 40 * v203 + 24) < v204);
                uint64_t result = v314;
                *(__n128 *)unint64_t v195 = v314;
                *(void *)(v195 + 16) = v317;
                *(void *)(v195 + 24) = v204;
                *(_DWORD *)(v195 + 32) = v205;
              }
            }
          }
          BOOL v161 = v189-- <= 2;
        }
        while (!v161);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = v14 + 40 * ((unint64_t)v16 >> 1);
    unint64_t v19 = *(void *)(a2 - 16);
    if ((unint64_t)v15 < 0x1401)
    {
      unint64_t v24 = *(void *)(v14 + 24);
      uint64_t v25 = (unint64_t *)(v14 + 24 + 40 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          uint64_t v288 = *(void *)(v18 + 32);
          __n128 v225 = *(__n128 *)v18;
          long long v253 = *(_OWORD *)(v18 + 16);
          __n128 v26 = *v11;
          long long v27 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v26;
          *(_OWORD *)(v18 + 16) = v27;
          goto LABEL_31;
        }
        uint64_t v295 = *(void *)(v18 + 32);
        __n128 v232 = *(__n128 *)v18;
        long long v261 = *(_OWORD *)(v18 + 16);
        __n128 v58 = *(__n128 *)v14;
        long long v59 = *(_OWORD *)(v14 + 16);
        *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
        *(__n128 *)unint64_t v18 = v58;
        *(_OWORD *)(v18 + 16) = v59;
        *(_DWORD *)(v14 + 32) = v295;
        *(__n128 *)unint64_t v14 = v232;
        *(_OWORD *)(v14 + 16) = v261;
        if (*(void *)(a2 - 16) < *(void *)(v14 + 24))
        {
          uint64_t v288 = *(void *)(v14 + 32);
          __n128 v225 = *(__n128 *)v14;
          long long v253 = *(_OWORD *)(v14 + 16);
          __n128 v60 = *v11;
          long long v61 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v60;
          *(_OWORD *)(v14 + 16) = v61;
LABEL_31:
          *(_DWORD *)(a2 - 8) = v288;
          *uint64_t v11 = v225;
          *(_OWORD *)(a2 - 24) = v253;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      uint64_t v291 = *(void *)(v14 + 32);
      __n128 v228 = *(__n128 *)v14;
      long long v256 = *(_OWORD *)(v14 + 16);
      __n128 v32 = *v11;
      long long v33 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
      *(__n128 *)unint64_t v14 = v32;
      *(_OWORD *)(v14 + 16) = v33;
      *(_DWORD *)(a2 - 8) = v291;
      *uint64_t v11 = v228;
      *(_OWORD *)(a2 - 24) = v256;
      if (*(void *)(v14 + 24) >= *v25) {
        goto LABEL_32;
      }
      uint64_t v292 = *(void *)(v18 + 32);
      __n128 v229 = *(__n128 *)v18;
      long long v257 = *(_OWORD *)(v18 + 16);
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(_OWORD *)(v14 + 16);
      *(_DWORD *)(v18 + 32) = *(_DWORD *)(v14 + 32);
      *(__n128 *)unint64_t v18 = v34;
      *(_OWORD *)(v18 + 16) = v35;
      *(_DWORD *)(v14 + 32) = v292;
      *(__n128 *)unint64_t v14 = v229;
      *(_OWORD *)(v14 + 16) = v257;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      unint64_t v62 = *(void *)(v14 + 24);
      if (*(void *)(v14 - 16) < v62) {
        goto LABEL_57;
      }
      uint64_t v316 = *(void *)(v14 + 16);
      __n128 v313 = *(__n128 *)v14;
      if (v62 < *(void *)(a2 - 16))
      {
        unint64_t v122 = v14;
        do
        {
          unint64_t v14 = v122 + 40;
          unint64_t v123 = *(void *)(v122 + 64);
          v122 += 40;
        }
        while (v62 >= v123);
      }
      else
      {
        unint64_t v124 = v14 + 40;
        do
        {
          unint64_t v14 = v124;
          if (v124 >= a2) {
            break;
          }
          unint64_t v125 = *(void *)(v124 + 24);
          v124 += 40;
        }
        while (v62 >= v125);
      }
      unint64_t v126 = a2;
      if (v14 < a2)
      {
        unint64_t v127 = a2;
        do
        {
          unint64_t v126 = v127 - 40;
          unint64_t v128 = *(void *)(v127 - 16);
          v127 -= 40;
        }
        while (v62 < v128);
      }
      uint64_t v129 = *(void *)(a1 + 32);
      while (v14 < v126)
      {
        uint64_t v304 = *(void *)(v14 + 32);
        __n128 v241 = *(__n128 *)v14;
        long long v274 = *(_OWORD *)(v14 + 16);
        long long v130 = *(_OWORD *)v126;
        long long v131 = *(_OWORD *)(v126 + 16);
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v126 + 32);
        *(_OWORD *)unint64_t v14 = v130;
        *(_OWORD *)(v14 + 16) = v131;
        *(_DWORD *)(v126 + 32) = v304;
        *(__n128 *)unint64_t v126 = v241;
        *(_OWORD *)(v126 + 16) = v274;
        do
        {
          unint64_t v132 = *(void *)(v14 + 64);
          v14 += 40;
        }
        while (v62 >= v132);
        do
        {
          unint64_t v133 = *(void *)(v126 - 16);
          v126 -= 40;
        }
        while (v62 < v133);
      }
      size_t v134 = (__n128 *)(v14 - 40);
      BOOL v5 = v14 - 40 >= a1;
      BOOL v6 = v14 - 40 == a1;
      if (v14 - 40 != a1)
      {
        __n128 v135 = *v134;
        long long v136 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v135;
        *(_OWORD *)(a1 + 16) = v136;
      }
      a4 = 0;
      uint64_t result = v313;
      *(void *)(v14 - 24) = v316;
      *size_t v134 = v313;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v129;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 24 + 40 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 24))
      {
        if (v19 < v21)
        {
          uint64_t v289 = *(void *)(v18 + 32);
          __n128 v226 = *(__n128 *)v18;
          long long v254 = *(_OWORD *)(v18 + 16);
          __n128 v28 = *v11;
          long long v29 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v28;
          *(_OWORD *)(v18 + 16) = v29;
          *(_DWORD *)(a2 - 8) = v289;
          *uint64_t v11 = v226;
          *(_OWORD *)(a2 - 24) = v254;
          if (*v20 < *(void *)(v14 + 24))
          {
            uint64_t v290 = *(void *)(v14 + 32);
            __n128 v227 = *(__n128 *)v14;
            long long v255 = *(_OWORD *)(v14 + 16);
            __n128 v30 = *(__n128 *)v18;
            long long v31 = *(_OWORD *)(v18 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
            *(__n128 *)unint64_t v14 = v30;
            *(_OWORD *)(v14 + 16) = v31;
            *(_DWORD *)(v18 + 32) = v290;
            *(__n128 *)unint64_t v18 = v227;
            *(_OWORD *)(v18 + 16) = v255;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          uint64_t v293 = *(void *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          long long v258 = *(_OWORD *)(v14 + 16);
          __n128 v36 = *(__n128 *)v18;
          long long v37 = *(_OWORD *)(v18 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
          *(__n128 *)unint64_t v14 = v36;
          *(_OWORD *)(v14 + 16) = v37;
          *(_DWORD *)(v18 + 32) = v293;
          *(__n128 *)unint64_t v18 = v230;
          *(_OWORD *)(v18 + 16) = v258;
          if (*(void *)(a2 - 16) >= *v20) {
            goto LABEL_23;
          }
          uint64_t v287 = *(void *)(v18 + 32);
          __n128 v224 = *(__n128 *)v18;
          long long v252 = *(_OWORD *)(v18 + 16);
          __n128 v38 = *v11;
          long long v39 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v18 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v18 = v38;
          *(_OWORD *)(v18 + 16) = v39;
        }
        else
        {
          uint64_t v287 = *(void *)(v14 + 32);
          __n128 v224 = *(__n128 *)v14;
          long long v252 = *(_OWORD *)(v14 + 16);
          __n128 v22 = *v11;
          long long v23 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v22;
          *(_OWORD *)(v14 + 16) = v23;
        }
        *(_DWORD *)(a2 - 8) = v287;
        *uint64_t v11 = v224;
        *(_OWORD *)(a2 - 24) = v252;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 40);
      unint64_t v41 = v14 + 40 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (unint64_t *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 3);
      unint64_t v46 = *(void *)(a2 - 56);
      if (v44 >= *(void *)(v14 + 64))
      {
        if (v46 < v43)
        {
          unint64_t v294 = v42[1];
          __n128 v231 = *v45;
          long long v259 = *(_OWORD *)(v42 - 1);
          __n128 v52 = *v12;
          long long v53 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v52;
          *(_OWORD *)(v42 - 1) = v53;
          *(_DWORD *)(a2 - 48) = v294;
          *int v12 = v231;
          *(_OWORD *)(a2 - 64) = v259;
          if (*v42 < *(void *)(v14 + 64))
          {
            __n128 v54 = *v40;
            long long v260 = *(_OWORD *)(v14 + 56);
            uint64_t v55 = *(void *)(v14 + 72);
            __n128 v57 = *v45;
            long long v56 = *(_OWORD *)(v42 - 1);
            *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
            *int v40 = v57;
            *(_OWORD *)(v14 + 56) = v56;
            *((_DWORD *)v42 + 2) = v55;
            *uint64_t v45 = v54;
            *(_OWORD *)(v42 - 1) = v260;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          __n128 v63 = *v40;
          long long v262 = *(_OWORD *)(v14 + 56);
          int v64 = *(void *)(v14 + 72);
          __n128 v66 = *v45;
          long long v65 = *(_OWORD *)(v42 - 1);
          *(_DWORD *)(v14 + 72) = *((_DWORD *)v42 + 2);
          *int v40 = v66;
          *(_OWORD *)(v14 + 56) = v65;
          *((_DWORD *)v42 + 2) = v64;
          *uint64_t v45 = v63;
          *(_OWORD *)(v42 - 1) = v262;
          if (*(void *)(a2 - 56) >= *v42) {
            goto LABEL_37;
          }
          unint64_t v296 = v42[1];
          __n128 v233 = *v45;
          long long v263 = *(_OWORD *)(v42 - 1);
          __n128 v67 = *v12;
          long long v68 = *(_OWORD *)(a2 - 64);
          *((_DWORD *)v42 + 2) = *(_DWORD *)(a2 - 48);
          *uint64_t v45 = v67;
          *(_OWORD *)(v42 - 1) = v68;
          __n128 v47 = v233;
          long long v48 = v263;
          *(_DWORD *)(a2 - 48) = v296;
        }
        else
        {
          __n128 v47 = *v40;
          long long v48 = *(_OWORD *)(v14 + 56);
          uint64_t v49 = *(void *)(v14 + 72);
          __n128 v51 = *v12;
          long long v50 = *(_OWORD *)(a2 - 64);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 48);
          *int v40 = v51;
          *(_OWORD *)(v14 + 56) = v50;
          *(_DWORD *)(a2 - 48) = v49;
        }
        *int v12 = v47;
        *(_OWORD *)(a2 - 64) = v48;
      }
LABEL_37:
      unsigned int v69 = (__n128 *)(v14 + 80);
      unint64_t v70 = v14 + 40 * v17;
      unint64_t v73 = *(void *)(v70 + 64);
      int v71 = (unint64_t *)(v70 + 64);
      unint64_t v72 = v73;
      uint64_t v74 = (__n128 *)(v71 - 3);
      unint64_t v75 = *(void *)(a2 - 96);
      if (v73 >= *(void *)(v14 + 104))
      {
        if (v75 < v72)
        {
          unint64_t v297 = v71[1];
          __n128 v234 = *v74;
          long long v264 = *(_OWORD *)(v71 - 1);
          __n128 v81 = *v13;
          long long v82 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v81;
          *(_OWORD *)(v71 - 1) = v82;
          *(_DWORD *)(a2 - 88) = v297;
          *long long v13 = v234;
          *(_OWORD *)(a2 - 104) = v264;
          if (*v71 < *(void *)(v14 + 104))
          {
            __n128 v83 = *v69;
            long long v265 = *(_OWORD *)(v14 + 96);
            uint64_t v84 = *(void *)(v14 + 112);
            __n128 v86 = *v74;
            long long v85 = *(_OWORD *)(v71 - 1);
            *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
            *unsigned int v69 = v86;
            *(_OWORD *)(v14 + 96) = v85;
            *((_DWORD *)v71 + 2) = v84;
            __n128 *v74 = v83;
            *(_OWORD *)(v71 - 1) = v265;
          }
        }
      }
      else
      {
        if (v75 >= v72)
        {
          __n128 v87 = *v69;
          long long v266 = *(_OWORD *)(v14 + 96);
          int v88 = *(void *)(v14 + 112);
          __n128 v90 = *v74;
          long long v89 = *(_OWORD *)(v71 - 1);
          *(_DWORD *)(v14 + 112) = *((_DWORD *)v71 + 2);
          *unsigned int v69 = v90;
          *(_OWORD *)(v14 + 96) = v89;
          *((_DWORD *)v71 + 2) = v88;
          __n128 *v74 = v87;
          *(_OWORD *)(v71 - 1) = v266;
          if (*(void *)(a2 - 96) >= *v71) {
            goto LABEL_46;
          }
          unint64_t v298 = v71[1];
          __n128 v235 = *v74;
          long long v267 = *(_OWORD *)(v71 - 1);
          __n128 v91 = *v13;
          long long v92 = *(_OWORD *)(a2 - 104);
          *((_DWORD *)v71 + 2) = *(_DWORD *)(a2 - 88);
          __n128 *v74 = v91;
          *(_OWORD *)(v71 - 1) = v92;
          __n128 v76 = v235;
          long long v77 = v267;
          *(_DWORD *)(a2 - 88) = v298;
        }
        else
        {
          __n128 v76 = *v69;
          long long v77 = *(_OWORD *)(v14 + 96);
          uint64_t v78 = *(void *)(v14 + 112);
          __n128 v80 = *v13;
          long long v79 = *(_OWORD *)(a2 - 104);
          *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 88);
          *unsigned int v69 = v80;
          *(_OWORD *)(v14 + 96) = v79;
          *(_DWORD *)(a2 - 88) = v78;
        }
        *long long v13 = v76;
        *(_OWORD *)(a2 - 104) = v77;
      }
LABEL_46:
      unint64_t v93 = *v20;
      unint64_t v94 = *v71;
      if (*v20 >= *v42)
      {
        if (v94 < v93)
        {
          uint64_t v300 = *(void *)(v18 + 32);
          __n128 v237 = *(__n128 *)v18;
          long long v269 = *(_OWORD *)(v18 + 16);
          long long v96 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v96;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
          *((_DWORD *)v71 + 2) = v300;
          __n128 *v74 = v237;
          *(_OWORD *)(v71 - 1) = v269;
          if (*v20 < *v42)
          {
            unint64_t v301 = v42[1];
            __n128 v238 = *v45;
            long long v270 = *(_OWORD *)(v42 - 1);
            long long v97 = *(_OWORD *)(v18 + 16);
            *uint64_t v45 = *(__n128 *)v18;
            *(_OWORD *)(v42 - 1) = v97;
            *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
            *(_DWORD *)(v18 + 32) = v301;
            *(__n128 *)unint64_t v18 = v238;
            *(_OWORD *)(v18 + 16) = v270;
          }
        }
      }
      else
      {
        if (v94 >= v93)
        {
          unint64_t v302 = v42[1];
          __n128 v239 = *v45;
          long long v271 = *(_OWORD *)(v42 - 1);
          long long v98 = *(_OWORD *)(v18 + 16);
          *uint64_t v45 = *(__n128 *)v18;
          *(_OWORD *)(v42 - 1) = v98;
          *((_DWORD *)v42 + 2) = *(_DWORD *)(v18 + 32);
          *(_DWORD *)(v18 + 32) = v302;
          *(__n128 *)unint64_t v18 = v239;
          *(_OWORD *)(v18 + 16) = v271;
          if (*v71 >= *v20) {
            goto LABEL_55;
          }
          unint64_t v299 = *(void *)(v18 + 32);
          __n128 v236 = *(__n128 *)v18;
          long long v268 = *(_OWORD *)(v18 + 16);
          long long v99 = *(_OWORD *)(v71 - 1);
          *(__n128 *)unint64_t v18 = *v74;
          *(_OWORD *)(v18 + 16) = v99;
          *(_DWORD *)(v18 + 32) = *((_DWORD *)v71 + 2);
        }
        else
        {
          unint64_t v299 = v42[1];
          __n128 v236 = *v45;
          long long v268 = *(_OWORD *)(v42 - 1);
          long long v95 = *(_OWORD *)(v71 - 1);
          *uint64_t v45 = *v74;
          *(_OWORD *)(v42 - 1) = v95;
          *((_DWORD *)v42 + 2) = *((_DWORD *)v71 + 2);
        }
        *((_DWORD *)v71 + 2) = v299;
        __n128 *v74 = v236;
        *(_OWORD *)(v71 - 1) = v268;
      }
LABEL_55:
      uint64_t v303 = *(void *)(v14 + 32);
      __n128 v240 = *(__n128 *)v14;
      long long v272 = *(_OWORD *)(v14 + 16);
      __n128 v100 = *(__n128 *)v18;
      long long v101 = *(_OWORD *)(v18 + 16);
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(v18 + 32);
      *(__n128 *)unint64_t v14 = v100;
      *(_OWORD *)(v14 + 16) = v101;
      *(_DWORD *)(v18 + 32) = v303;
      *(__n128 *)unint64_t v18 = v240;
      *(_OWORD *)(v18 + 16) = v272;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      unint64_t v62 = *(void *)(v14 + 24);
LABEL_57:
      uint64_t v315 = *(void *)(v14 + 16);
      __n128 v312 = *(__n128 *)v14;
      uint64_t v102 = *(void *)(v14 + 32);
      unint64_t v103 = v14;
      do
      {
        unint64_t v104 = v103;
        v103 += 40;
      }
      while (*(void *)(v104 + 64) < v62);
      unint64_t v105 = a2;
      if (v104 == v14)
      {
        unint64_t v108 = a2;
        while (v103 < v108)
        {
          unint64_t v106 = v108 - 40;
          unint64_t v109 = *(void *)(v108 - 16);
          v108 -= 40;
          if (v109 < v62) {
            goto LABEL_66;
          }
        }
        unint64_t v106 = v108;
      }
      else
      {
        do
        {
          unint64_t v106 = v105 - 40;
          unint64_t v107 = *(void *)(v105 - 16);
          v105 -= 40;
        }
        while (v107 >= v62);
      }
LABEL_66:
      unint64_t v14 = v103;
      if (v103 < v106)
      {
        unint64_t v110 = v106;
        do
        {
          __n128 v111 = *(__n128 *)v14;
          long long v273 = *(_OWORD *)(v14 + 16);
          uint64_t v112 = *(void *)(v14 + 32);
          long long v114 = *(_OWORD *)v110;
          long long v113 = *(_OWORD *)(v110 + 16);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v110 + 32);
          *(_OWORD *)unint64_t v14 = v114;
          *(_OWORD *)(v14 + 16) = v113;
          *(_DWORD *)(v110 + 32) = v112;
          *(__n128 *)unint64_t v110 = v111;
          *(_OWORD *)(v110 + 16) = v273;
          do
          {
            unint64_t v115 = *(void *)(v14 + 64);
            v14 += 40;
          }
          while (v115 < v62);
          do
          {
            unint64_t v116 = *(void *)(v110 - 16);
            v110 -= 40;
          }
          while (v116 >= v62);
        }
        while (v14 < v110);
      }
      uint64_t v117 = (__n128 *)(v14 - 40);
      if (v14 - 40 != a1)
      {
        __n128 v118 = *v117;
        long long v119 = *(_OWORD *)(v14 - 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 - 8);
        *(__n128 *)a1 = v118;
        *(_OWORD *)(a1 + 16) = v119;
      }
      *(void *)(v14 - 24) = v315;
      *uint64_t v117 = v312;
      *(void *)(v14 - 16) = v62;
      *(_DWORD *)(v14 - 8) = v102;
      if (v103 < v106) {
        goto LABEL_77;
      }
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, v14 - 40, v312);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, a2, v121))
      {
        a2 = v14 - 40;
        if (v120) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v120)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(a1, v14 - 40, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 24)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      unint64_t v137 = v14 + 40;
      unint64_t v138 = *(void *)(v14 + 64);
      unint64_t v139 = *(void *)(a2 - 16);
      if (v138 < *(void *)(v14 + 24))
      {
        if (v139 >= v138)
        {
          uint64_t v309 = *(void *)(v14 + 32);
          __n128 v249 = *(__n128 *)v14;
          long long v283 = *(_OWORD *)(v14 + 16);
          long long v209 = *(_OWORD *)(v14 + 56);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v209;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
          uint64_t result = v249;
          *(__n128 *)unint64_t v137 = v249;
          *(_OWORD *)(v14 + 56) = v283;
          *(_DWORD *)(v14 + 72) = v309;
          if (*(void *)(a2 - 16) >= *(void *)(v14 + 64)) {
            return result;
          }
          uint64_t result = *(__n128 *)v137;
          long long v142 = *(_OWORD *)(v14 + 56);
          uint64_t v210 = *(void *)(v14 + 72);
          __n128 v212 = *v11;
          long long v211 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v137 = v212;
          *(_OWORD *)(v14 + 56) = v211;
          *(_DWORD *)(a2 - 8) = v210;
        }
        else
        {
LABEL_104:
          uint64_t v305 = *(void *)(v14 + 32);
          __n128 v242 = *(__n128 *)v14;
          long long v275 = *(_OWORD *)(v14 + 16);
          __n128 v140 = *v11;
          long long v141 = *(_OWORD *)(a2 - 24);
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(a2 - 8);
          *(__n128 *)unint64_t v14 = v140;
          *(_OWORD *)(v14 + 16) = v141;
          uint64_t result = v242;
          long long v142 = v275;
          *(_DWORD *)(a2 - 8) = v305;
        }
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v142;
        return result;
      }
      if (v139 < v138)
      {
        uint64_t result = *(__n128 *)v137;
        long long v279 = *(_OWORD *)(v14 + 56);
        uint64_t v176 = *(void *)(v14 + 72);
        __n128 v178 = *v11;
        long long v177 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v14 + 72) = *(_DWORD *)(a2 - 8);
        *(__n128 *)unint64_t v137 = v178;
        *(_OWORD *)(v14 + 56) = v177;
        *(_DWORD *)(a2 - 8) = v176;
        *uint64_t v11 = result;
        *(_OWORD *)(a2 - 24) = v279;
LABEL_180:
        if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
        {
          uint64_t v311 = *(void *)(v14 + 32);
          __n128 v251 = *(__n128 *)v14;
          long long v286 = *(_OWORD *)(v14 + 16);
          long long v223 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
          *(_OWORD *)(v14 + 16) = v223;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v137 + 32);
          uint64_t result = v251;
          *(__n128 *)unint64_t v137 = v251;
          *(_OWORD *)(v137 + 16) = v286;
          *(_DWORD *)(v137 + 32) = v311;
        }
      }
      break;
    case 4:
      unint64_t v137 = v14 + 40;
      unint64_t v143 = (__n128 *)(v14 + 80);
      unint64_t v144 = *(void *)(v14 + 64);
      unint64_t v145 = *(void *)(v14 + 104);
      if (v144 >= *(void *)(v14 + 24))
      {
        if (v145 < v144)
        {
          uint64_t v179 = *(void *)(v14 + 72);
          __n128 v180 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v181 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v181;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v180;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v179;
          if (*(void *)(v14 + 64) < *(void *)(v14 + 24))
          {
            uint64_t v307 = *(void *)(v14 + 32);
            __n128 v246 = *(__n128 *)v14;
            long long v280 = *(_OWORD *)(v14 + 16);
            long long v182 = *(_OWORD *)(v14 + 56);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
            *(_OWORD *)(v14 + 16) = v182;
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
            uint64_t result = v246;
            *(__n128 *)unint64_t v137 = v246;
            *(_OWORD *)(v14 + 56) = v280;
            *(_DWORD *)(v14 + 72) = v307;
          }
        }
      }
      else if (v145 >= v144)
      {
        uint64_t v310 = *(void *)(v14 + 32);
        __n128 v250 = *(__n128 *)v14;
        long long v284 = *(_OWORD *)(v14 + 16);
        long long v213 = *(_OWORD *)(v14 + 56);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v137;
        *(_OWORD *)(v14 + 16) = v213;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 72);
        uint64_t result = v250;
        *(__n128 *)unint64_t v137 = v250;
        *(_OWORD *)(v14 + 56) = v284;
        *(_DWORD *)(v14 + 72) = v310;
        if (v145 < *(void *)(v14 + 64))
        {
          uint64_t v214 = *(void *)(v14 + 72);
          __n128 v215 = *(__n128 *)v137;
          uint64_t result = *(__n128 *)(v14 + 56);
          long long v216 = *(_OWORD *)(v14 + 96);
          *(__n128 *)unint64_t v137 = *v143;
          *(_OWORD *)(v14 + 56) = v216;
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
          *unint64_t v143 = v215;
          *(__n128 *)(v14 + 96) = result;
          *(_DWORD *)(v14 + 112) = v214;
        }
      }
      else
      {
        uint64_t v306 = *(void *)(v14 + 32);
        __n128 v243 = *(__n128 *)v14;
        long long v276 = *(_OWORD *)(v14 + 16);
        long long v146 = *(_OWORD *)(v14 + 96);
        *(__n128 *)unint64_t v14 = *v143;
        *(_OWORD *)(v14 + 16) = v146;
        *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 112);
        uint64_t result = v243;
        *unint64_t v143 = v243;
        *(_OWORD *)(v14 + 96) = v276;
        *(_DWORD *)(v14 + 112) = v306;
      }
      if (*(void *)(a2 - 16) >= *(void *)(v14 + 104)) {
        return result;
      }
      uint64_t result = *v143;
      long long v285 = *(_OWORD *)(v14 + 96);
      int v217 = *(void *)(v14 + 112);
      __n128 v219 = *v11;
      long long v218 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(a2 - 8);
      *unint64_t v143 = v219;
      *(_OWORD *)(v14 + 96) = v218;
      *(_DWORD *)(a2 - 8) = v217;
      *uint64_t v11 = result;
      *(_OWORD *)(a2 - 24) = v285;
      if (*(void *)(v14 + 104) >= *(void *)(v14 + 64)) {
        return result;
      }
      uint64_t v220 = *(void *)(v14 + 72);
      __n128 v221 = *(__n128 *)v137;
      uint64_t result = *(__n128 *)(v14 + 56);
      long long v222 = *(_OWORD *)(v14 + 96);
      *(__n128 *)unint64_t v137 = *v143;
      *(_OWORD *)(v14 + 56) = v222;
      *(_DWORD *)(v14 + 72) = *(_DWORD *)(v14 + 112);
      *unint64_t v143 = v221;
      *(__n128 *)(v14 + 96) = result;
      *(_DWORD *)(v14 + 112) = v220;
      goto LABEL_180;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(v14, v14 + 40, v14 + 80, v14 + 120, a2 - 40, result).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = a2 - 3;
  int v12 = a2 - 6;
  long long v13 = a2 - 9;
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (uint64_t)a2 - v14;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 4);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 1151)
    {
      __n128 v140 = (__n128 *)(v14 + 48);
      long long v142 = (__n128 *)v14 == a2 || v140 == a2;
      if (a4)
      {
        if (!v142)
        {
          unint64_t v143 = 0;
          unint64_t v144 = (_OWORD *)v14;
          do
          {
            long long v146 = v140;
            uint64_t v147 = *((void *)v144 + 10);
            if (v147 < *((void *)v144 + 4))
            {
              __n128 v231 = *v146;
              long long v264 = v146[1];
              unint64_t v148 = *((_DWORD *)v144 + 22);
              BOOL v149 = v143;
              do
              {
                uint64_t v150 = (_OWORD *)(v14 + v149);
                unint64_t v151 = *(_OWORD *)(v14 + v149 + 16);
                v150[3] = *(_OWORD *)(v14 + v149);
                v150[4] = v151;
                *(_OWORD *)((char *)v150 + 76) = *(_OWORD *)(v14 + v149 + 28);
                if (!v149)
                {
                  unint64_t v145 = v14;
                  goto LABEL_122;
                }
                v149 -= 48;
              }
              while (v147 < *((void *)v150 - 2));
              unint64_t v145 = v14 + v149 + 48;
LABEL_122:
              uint64_t result = v231;
              *(__n128 *)unint64_t v145 = v231;
              *(__n128 *)(v145 + 16) = v264;
              *(void *)(v145 + 32) = v147;
              *(_DWORD *)(v145 + 40) = v148;
            }
            __n128 v140 = v146 + 3;
            v143 += 48;
            unint64_t v144 = v146;
          }
          while (&v146[3] != a2);
        }
      }
      else if (!v142)
      {
        do
        {
          unint64_t v174 = v140;
          unint64_t v175 = *(void *)(a1 + 80);
          if (v175 < *(void *)(a1 + 32))
          {
            __n128 v234 = *v140;
            long long v269 = v140[1];
            uint64_t v176 = *(void *)(a1 + 88);
            long long v177 = v174;
            do
            {
              __n128 v178 = v177[-2];
              *long long v177 = v177[-3];
              v177[1] = v178;
              *(__n128 *)((char *)v177 + 28) = *(__n128 *)((char *)v177 - 20);
              uint64_t v179 = v177[-4].n128_u64[0];
              v177 -= 3;
            }
            while (v175 < v179);
            uint64_t result = v234;
            *long long v177 = v234;
            v177[1] = v269;
            v177[2].n128_u64[0] = v175;
            v177[2].n128_u32[2] = v176;
          }
          __n128 v140 = v174 + 3;
          a1 = (unint64_t)v174;
        }
        while (&v174[3] != a2);
      }
      return result;
    }
    if (!a3)
    {
      if ((__n128 *)v14 != a2)
      {
        uint64_t v152 = (unint64_t)(v16 - 2) >> 1;
        uint64_t v153 = v152;
        do
        {
          if (v152 >= v153)
          {
            int v155 = (2 * v153) | 1;
            uint64_t v156 = v14 + 48 * v155;
            if (2 * v153 + 2 < v16)
            {
              uint64_t v157 = *(void *)(v14 + 48 * v155 + 32);
              long long v158 = *(void *)(v156 + 80);
              v156 += 48 * (v157 < v158);
              if (v157 < v158) {
                int v155 = 2 * v153 + 2;
              }
            }
            int64_t v159 = *(void *)(v14 + 48 * v153 + 32);
            if (*(void *)(v156 + 32) >= v159)
            {
              int64_t v160 = v14 + 48 * v153;
              __n128 v232 = *(_OWORD *)v160;
              long long v265 = *(_OWORD *)(v160 + 16);
              BOOL v161 = *(_DWORD *)(v160 + 40);
              do
              {
                uint64_t v162 = (_OWORD *)v160;
                int64_t v160 = v156;
                unint64_t v163 = *(_OWORD *)v156;
                unint64_t v164 = *(_OWORD *)(v156 + 16);
                *(_OWORD *)((char *)v162 + 28) = *(_OWORD *)(v156 + 28);
                *uint64_t v162 = v163;
                v162[1] = v164;
                if (v152 < v155) {
                  break;
                }
                unint64_t v165 = (2 * v155) | 1;
                uint64_t v156 = v14 + 48 * v165;
                unint64_t v166 = 2 * v155 + 2;
                if (v166 < v16)
                {
                  unint64_t v167 = *(void *)(v14 + 48 * v165 + 32);
                  int v168 = *(void *)(v156 + 80);
                  v156 += 48 * (v167 < v168);
                  if (v167 < v168) {
                    unint64_t v165 = v166;
                  }
                }
                int v155 = v165;
              }
              while (*(void *)(v156 + 32) >= v159);
              *(_OWORD *)int64_t v160 = v232;
              *(_OWORD *)(v160 + 16) = v265;
              *(void *)(v160 + 32) = v159;
              *(_DWORD *)(v160 + 40) = v161;
            }
          }
          unint64_t v154 = v153-- <= 0;
        }
        while (!v154);
        __n128 v180 = v15 / 0x30uLL;
        do
        {
          long long v181 = 0;
          *(_OWORD *)long long v270 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v270[16] = *(_OWORD *)(v14 + 32);
          __n128 v235 = *(__n128 *)v14;
          long long v182 = (_OWORD *)v14;
          do
          {
            uint64_t v185 = v181 + 1;
            unint64_t v186 = (__n128 *)&v182[3 * v181 + 3];
            long long v187 = (2 * v181) | 1;
            unint64_t v188 = 2 * v181 + 2;
            if (v188 < v180)
            {
              int64_t v189 = *(void *)&v182[3 * v185 + 2];
              uint64_t v190 = v186[5].n128_u64[0];
              v186 += 3 * (v189 < v190);
              if (v189 < v190) {
                long long v187 = v188;
              }
            }
            unint64_t v183 = *v186;
            unint64_t v184 = v186[1];
            *(__n128 *)((char *)v182 + 28) = *(__n128 *)((char *)&v186[1] + 12);
            *long long v182 = v183;
            v182[1] = v184;
            long long v182 = v186;
            long long v181 = v187;
          }
          while (v187 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
          a2 -= 3;
          if (v186 == a2)
          {
            uint64_t result = v235;
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)&v270[12];
            *unint64_t v186 = v235;
            v186[1] = *(__n128 *)v270;
          }
          else
          {
            unint64_t v191 = *a2;
            __n128 v192 = a2[1];
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)((char *)a2 + 28);
            *unint64_t v186 = v191;
            v186[1] = v192;
            uint64_t result = v235;
            *(__n128 *)((char *)a2 + 28) = *(__n128 *)&v270[12];
            *a2 = v235;
            a2[1] = *(__n128 *)v270;
            long long v193 = (uint64_t)&v186[3] - v14;
            if (v193 >= 49)
            {
              uint64_t v194 = (v193 / 0x30uLL - 2) >> 1;
              unint64_t v195 = v186[2].n128_u64[0];
              if (*(void *)(v14 + 48 * v194 + 32) < v195)
              {
                uint64_t v278 = *v186;
                unint64_t v281 = v186[1];
                uint64_t v196 = v186[2].n128_i32[2];
                do
                {
                  uint64_t v197 = v186;
                  unint64_t v186 = (__n128 *)(v14 + 48 * v194);
                  unint64_t v198 = *v186;
                  unint64_t v199 = v186[1];
                  *(__n128 *)((char *)v197 + 28) = *(__n128 *)((char *)v186 + 28);
                  *uint64_t v197 = v198;
                  v197[1] = v199;
                  if (!v194) {
                    break;
                  }
                  uint64_t v194 = (v194 - 1) >> 1;
                }
                while (*(void *)(v14 + 48 * v194 + 32) < v195);
                uint64_t result = v278;
                *unint64_t v186 = v278;
                v186[1] = v281;
                v186[2].n128_u64[0] = v195;
                v186[2].n128_u32[2] = v196;
              }
            }
          }
          unint64_t v154 = v180-- <= 2;
        }
        while (!v154);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = (__n128 *)(v14 + 48 * ((unint64_t)v16 >> 1));
    unint64_t v19 = a2[-1].n128_u64[0];
    if ((unint64_t)v15 < 0x1801)
    {
      unint64_t v24 = *(void *)(v14 + 32);
      uint64_t v25 = (unint64_t *)(v14 + 32 + 48 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          *(__n128 *)__n128 v240 = v18[1];
          *(__n128 *)&v240[16] = v18[2];
          __n128 v212 = *v18;
          __n128 v26 = *v11;
          long long v27 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v26;
          v18[1] = v27;
          goto LABEL_31;
        }
        *(__n128 *)__n128 v249 = v18[1];
        *(__n128 *)&v249[16] = v18[2];
        __n128 v219 = *v18;
        long long v56 = *(__n128 *)v14;
        __n128 v57 = *(__n128 *)(v14 + 16);
        *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
        *unint64_t v18 = v56;
        v18[1] = v57;
        *(_OWORD *)(v14 + 28) = *(_OWORD *)&v249[12];
        *(__n128 *)unint64_t v14 = v219;
        *(_OWORD *)(v14 + 16) = *(_OWORD *)v249;
        if (a2[-1].n128_u64[0] < *(void *)(v14 + 32))
        {
          *(_OWORD *)__n128 v240 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v240[16] = *(_OWORD *)(v14 + 32);
          __n128 v212 = *(__n128 *)v14;
          __n128 v58 = *v11;
          long long v59 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v58;
          *(__n128 *)(v14 + 16) = v59;
LABEL_31:
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v240[12];
          *uint64_t v11 = v212;
          a2[-2] = *(__n128 *)v240;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      *(_OWORD *)__n128 v243 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 32);
      __n128 v215 = *(__n128 *)v14;
      __n128 v32 = *v11;
      long long v33 = a2[-2];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
      *(__n128 *)unint64_t v14 = v32;
      *(__n128 *)(v14 + 16) = v33;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v243[12];
      *uint64_t v11 = v215;
      a2[-2] = *(__n128 *)v243;
      if (*(void *)(v14 + 32) >= *v25) {
        goto LABEL_32;
      }
      *(__n128 *)__n128 v244 = v18[1];
      *(__n128 *)&v244[16] = v18[2];
      long long v216 = *v18;
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(__n128 *)(v14 + 16);
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
      *unint64_t v18 = v34;
      v18[1] = v35;
      *(_OWORD *)(v14 + 28) = *(_OWORD *)&v244[12];
      *(__n128 *)unint64_t v14 = v216;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)v244;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      __n128 v60 = *(void *)(v14 + 32);
      if (*(void *)(v14 - 16) < v60) {
        goto LABEL_57;
      }
      unint64_t v277 = *(__n128 *)v14;
      long long v280 = *(_OWORD *)(v14 + 16);
      if (v60 < a2[-1].n128_u64[0])
      {
        long long v114 = v14;
        do
        {
          unint64_t v14 = v114 + 48;
          unint64_t v115 = *(void *)(v114 + 80);
          v114 += 48;
        }
        while (v60 >= v115);
      }
      else
      {
        unint64_t v116 = v14 + 48;
        do
        {
          unint64_t v14 = v116;
          if (v116 >= (unint64_t)a2) {
            break;
          }
          uint64_t v117 = *(void *)(v116 + 32);
          v116 += 48;
        }
        while (v60 >= v117);
      }
      __n128 v118 = a2;
      if (v14 < (unint64_t)a2)
      {
        long long v119 = a2;
        do
        {
          __n128 v118 = v119 - 3;
          BOOL v120 = v119[-1].n128_u64[0];
          v119 -= 3;
        }
        while (v60 < v120);
      }
      __n128 v121 = *(void *)(a1 + 40);
      while (v14 < (unint64_t)v118)
      {
        *(_OWORD *)long long v261 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)&v261[16] = *(_OWORD *)(v14 + 32);
        __n128 v228 = *(__n128 *)v14;
        unint64_t v122 = *v118;
        unint64_t v123 = v118[1];
        *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v118 + 28);
        *(__n128 *)unint64_t v14 = v122;
        *(__n128 *)(v14 + 16) = v123;
        *(__n128 *)((char *)v118 + 28) = *(__n128 *)&v261[12];
        *__n128 v118 = v228;
        v118[1] = *(__n128 *)v261;
        do
        {
          unint64_t v124 = *(void *)(v14 + 80);
          v14 += 48;
        }
        while (v60 >= v124);
        do
        {
          unint64_t v125 = v118[-1].n128_u64[0];
          v118 -= 3;
        }
        while (v60 < v125);
      }
      unint64_t v126 = (__n128 *)(v14 - 48);
      BOOL v5 = v14 - 48 >= a1;
      BOOL v6 = v14 - 48 == a1;
      if (v14 - 48 != a1)
      {
        unint64_t v127 = *v126;
        unint64_t v128 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v127;
        *(_OWORD *)(a1 + 16) = v128;
      }
      a4 = 0;
      uint64_t result = v277;
      *unint64_t v126 = v277;
      *(_OWORD *)(v14 - 32) = v280;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v121;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 32 + 48 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 32))
      {
        if (v19 < v21)
        {
          *(__n128 *)__n128 v241 = v18[1];
          *(__n128 *)&v241[16] = v18[2];
          long long v213 = *v18;
          __n128 v28 = *v11;
          long long v29 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v28;
          v18[1] = v29;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v241[12];
          *uint64_t v11 = v213;
          a2[-2] = *(__n128 *)v241;
          if (*v20 < *(void *)(v14 + 32))
          {
            *(_OWORD *)__n128 v242 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v242[16] = *(_OWORD *)(v14 + 32);
            uint64_t v214 = *(__n128 *)v14;
            __n128 v30 = *v18;
            long long v31 = v18[1];
            *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
            *(__n128 *)unint64_t v14 = v30;
            *(__n128 *)(v14 + 16) = v31;
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v242[12];
            *unint64_t v18 = v214;
            v18[1] = *(__n128 *)v242;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          *(_OWORD *)long long v245 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v245[16] = *(_OWORD *)(v14 + 32);
          int v217 = *(__n128 *)v14;
          __n128 v36 = *v18;
          long long v37 = v18[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
          *(__n128 *)unint64_t v14 = v36;
          *(__n128 *)(v14 + 16) = v37;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v245[12];
          *unint64_t v18 = v217;
          v18[1] = *(__n128 *)v245;
          if (a2[-1].n128_u64[0] >= *v20) {
            goto LABEL_23;
          }
          *(__n128 *)__n128 v239 = v18[1];
          *(__n128 *)&v239[16] = v18[2];
          long long v211 = *v18;
          __n128 v38 = *v11;
          long long v39 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v38;
          v18[1] = v39;
        }
        else
        {
          *(_OWORD *)__n128 v239 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v239[16] = *(_OWORD *)(v14 + 32);
          long long v211 = *(__n128 *)v14;
          __n128 v22 = *v11;
          long long v23 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v22;
          *(__n128 *)(v14 + 16) = v23;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v239[12];
        *uint64_t v11 = v211;
        a2[-2] = *(__n128 *)v239;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 48);
      unint64_t v41 = v14 + 48 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (_OWORD *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 2);
      unint64_t v46 = a2[-4].n128_u64[0];
      if (v44 >= *(void *)(v14 + 80))
      {
        if (v46 < v43)
        {
          *(_OWORD *)__n128 v247 = *(v42 - 1);
          *(_OWORD *)&v247[16] = *v42;
          long long v218 = *v45;
          __n128 v51 = *v12;
          __n128 v52 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v51;
          *(v42 - 1) = v52;
          *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v247[12];
          *int v12 = v218;
          a2[-5] = *(__n128 *)v247;
          if (*(void *)v42 < *(void *)(v14 + 80))
          {
            *(_OWORD *)__n128 v248 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v248[16] = *(_OWORD *)(v14 + 80);
            long long v53 = *v40;
            uint64_t v55 = *v45;
            __n128 v54 = *(v42 - 1);
            *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
            *int v40 = v55;
            *(_OWORD *)(v14 + 64) = v54;
            *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v248[12];
            *uint64_t v45 = v53;
            *(v42 - 1) = *(_OWORD *)v248;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          *(_OWORD *)__n128 v250 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v250[16] = *(_OWORD *)(v14 + 80);
          long long v61 = *v40;
          __n128 v63 = *v45;
          unint64_t v62 = *(v42 - 1);
          *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
          *int v40 = v63;
          *(_OWORD *)(v14 + 64) = v62;
          *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v250[12];
          *uint64_t v45 = v61;
          *(v42 - 1) = *(_OWORD *)v250;
          if (a2[-4].n128_u64[0] >= *(void *)v42) {
            goto LABEL_37;
          }
          *(_OWORD *)__n128 v246 = *(v42 - 1);
          *(_OWORD *)&v246[16] = *v42;
          uint64_t v220 = *v45;
          int v64 = *v12;
          long long v65 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v64;
          *(v42 - 1) = v65;
          long long v48 = v220;
          __n128 v47 = *(__n128 *)v246;
        }
        else
        {
          __n128 v47 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v246[12] = v47.n128_u32[3];
          *(_OWORD *)&v246[16] = *(_OWORD *)(v14 + 80);
          long long v48 = *v40;
          long long v50 = *v12;
          uint64_t v49 = a2[-5];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 68);
          *int v40 = v50;
          *(__n128 *)(v14 + 64) = v49;
        }
        *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v246[12];
        *int v12 = v48;
        a2[-5] = v47;
      }
LABEL_37:
      __n128 v66 = (__n128 *)(v14 + 96);
      __n128 v67 = v14 + 48 * v17;
      unint64_t v70 = *(void *)(v67 + 80);
      long long v68 = (__n128 *)(v67 + 80);
      unsigned int v69 = v70;
      int v71 = v68 - 2;
      unint64_t v72 = a2[-7].n128_u64[0];
      if (v70 >= *(void *)(v14 + 128))
      {
        if (v72 < v69)
        {
          *(__n128 *)long long v252 = v68[-1];
          *(__n128 *)&v252[16] = *v68;
          __n128 v221 = *v71;
          long long v77 = *v13;
          uint64_t v78 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v77;
          v68[-1] = v78;
          *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v252[12];
          *long long v13 = v221;
          a2[-8] = *(__n128 *)v252;
          if (v68->n128_u64[0] < *(void *)(v14 + 128))
          {
            *(_OWORD *)long long v253 = *(_OWORD *)(v14 + 112);
            *(_OWORD *)&v253[16] = *(_OWORD *)(v14 + 128);
            long long v79 = *v66;
            __n128 v81 = *v71;
            __n128 v80 = v68[-1];
            *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
            unsigned __int16 *v66 = v81;
            *(__n128 *)(v14 + 112) = v80;
            *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v253[12];
            *int v71 = v79;
            v68[-1] = *(__n128 *)v253;
          }
        }
      }
      else
      {
        if (v72 >= v69)
        {
          *(_OWORD *)long long v254 = *(_OWORD *)(v14 + 112);
          *(_OWORD *)&v254[16] = *(_OWORD *)(v14 + 128);
          long long v82 = *v66;
          uint64_t v84 = *v71;
          __n128 v83 = v68[-1];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
          unsigned __int16 *v66 = v84;
          *(__n128 *)(v14 + 112) = v83;
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v254[12];
          *int v71 = v82;
          v68[-1] = *(__n128 *)v254;
          if (a2[-7].n128_u64[0] >= v68->n128_u64[0]) {
            goto LABEL_46;
          }
          *(__n128 *)__n128 v251 = v68[-1];
          *(__n128 *)&v251[16] = *v68;
          long long v222 = *v71;
          long long v85 = *v13;
          __n128 v86 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v85;
          v68[-1] = v86;
          uint64_t v74 = v222;
          unint64_t v73 = *(__n128 *)v251;
        }
        else
        {
          unint64_t v73 = *(__n128 *)(v14 + 112);
          *(_DWORD *)&v251[12] = v73.n128_u32[3];
          *(_OWORD *)&v251[16] = *(_OWORD *)(v14 + 128);
          uint64_t v74 = *v66;
          __n128 v76 = *v13;
          unint64_t v75 = a2[-8];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 116);
          unsigned __int16 *v66 = v76;
          *(__n128 *)(v14 + 112) = v75;
        }
        *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v251[12];
        *long long v13 = v74;
        a2[-8] = v73;
      }
LABEL_46:
      __n128 v87 = *v20;
      int v88 = v68->n128_u64[0];
      if (*v20 >= *(void *)v42)
      {
        if (v88 < v87)
        {
          *(__n128 *)long long v256 = v18[1];
          *(__n128 *)&v256[16] = v18[2];
          __n128 v224 = *v18;
          __n128 v90 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v90;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v256[12];
          *int v71 = v224;
          v68[-1] = *(__n128 *)v256;
          if (*v20 < *(void *)v42)
          {
            *(_OWORD *)long long v257 = *(v42 - 1);
            *(_OWORD *)&v257[16] = *v42;
            __n128 v225 = *v45;
            __n128 v91 = v18[1];
            *uint64_t v45 = *v18;
            *(v42 - 1) = v91;
            *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v257[12];
            *unint64_t v18 = v225;
            v18[1] = *(__n128 *)v257;
          }
        }
      }
      else
      {
        if (v88 >= v87)
        {
          *(_OWORD *)long long v258 = *(v42 - 1);
          *(_OWORD *)&v258[16] = *v42;
          __n128 v226 = *v45;
          long long v92 = v18[1];
          *uint64_t v45 = *v18;
          *(v42 - 1) = v92;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v258[12];
          *unint64_t v18 = v226;
          v18[1] = *(__n128 *)v258;
          if (v68->n128_u64[0] >= *v20) {
            goto LABEL_55;
          }
          *(__n128 *)long long v255 = v18[1];
          *(__n128 *)&v255[16] = v18[2];
          long long v223 = *v18;
          unint64_t v93 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v93;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
        }
        else
        {
          *(_OWORD *)long long v255 = *(v42 - 1);
          *(_OWORD *)&v255[16] = *v42;
          long long v223 = *v45;
          long long v89 = v68[-1];
          *uint64_t v45 = *v71;
          *(v42 - 1) = v89;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v68[-1] + 12);
        }
        *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v255[12];
        *int v71 = v223;
        v68[-1] = *(__n128 *)v255;
      }
LABEL_55:
      *(_OWORD *)long long v259 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v259[16] = *(_OWORD *)(v14 + 32);
      __n128 v227 = *(__n128 *)v14;
      unint64_t v94 = *v18;
      long long v95 = v18[1];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
      *(__n128 *)unint64_t v14 = v94;
      *(__n128 *)(v14 + 16) = v95;
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v259[12];
      *unint64_t v18 = v227;
      v18[1] = *(__n128 *)v259;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      __n128 v60 = *(void *)(v14 + 32);
LABEL_57:
      long long v276 = *(__n128 *)v14;
      long long v279 = *(_OWORD *)(v14 + 16);
      long long v96 = *(void *)(v14 + 40);
      long long v97 = v14;
      do
      {
        long long v98 = v97;
        v97 += 48;
      }
      while (*(void *)(v98 + 80) < v60);
      long long v99 = a2;
      if (v98 == v14)
      {
        uint64_t v102 = a2;
        while (v97 < (unint64_t)v102)
        {
          __n128 v100 = v102 - 3;
          unint64_t v103 = v102[-1].n128_u64[0];
          v102 -= 3;
          if (v103 < v60) {
            goto LABEL_66;
          }
        }
        __n128 v100 = v102;
      }
      else
      {
        do
        {
          __n128 v100 = v99 - 3;
          long long v101 = v99[-1].n128_u64[0];
          v99 -= 3;
        }
        while (v101 >= v60);
      }
LABEL_66:
      unint64_t v14 = v97;
      if (v97 < (unint64_t)v100)
      {
        unint64_t v104 = v100;
        do
        {
          *(_OWORD *)long long v260 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v260[16] = *(_OWORD *)(v14 + 32);
          unint64_t v105 = *(__n128 *)v14;
          unint64_t v107 = *v104;
          unint64_t v106 = v104[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v104 + 28);
          *(__n128 *)unint64_t v14 = v107;
          *(__n128 *)(v14 + 16) = v106;
          *(__n128 *)((char *)v104 + 28) = *(__n128 *)&v260[12];
          *unint64_t v104 = v105;
          v104[1] = *(__n128 *)v260;
          do
          {
            unint64_t v108 = *(void *)(v14 + 80);
            v14 += 48;
          }
          while (v108 < v60);
          do
          {
            unint64_t v109 = v104[-1].n128_u64[0];
            v104 -= 3;
          }
          while (v109 >= v60);
        }
        while (v14 < (unint64_t)v104);
      }
      unint64_t v110 = (__n128 *)(v14 - 48);
      if (v14 - 48 != a1)
      {
        __n128 v111 = *v110;
        uint64_t v112 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v111;
        *(_OWORD *)(a1 + 16) = v112;
      }
      *unint64_t v110 = v276;
      *(_OWORD *)(v14 - 32) = v279;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v96;
      if (v97 < (unint64_t)v100) {
        goto LABEL_77;
      }
      long long v113 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(a1, v14 - 48);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(v14, (uint64_t)a2))
      {
        a2 = (__n128 *)(v14 - 48);
        if (v113) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v113)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(a1, v14 - 48, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 32)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      uint64_t v129 = (__n128 *)(v14 + 48);
      long long v130 = *(void *)(v14 + 80);
      long long v131 = a2[-1].n128_u64[0];
      if (v130 < *(void *)(v14 + 32))
      {
        if (v131 >= v130)
        {
          *(_OWORD *)long long v271 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v271[16] = *(_OWORD *)(v14 + 32);
          __n128 v236 = *(__n128 *)v14;
          long long v200 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v200;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v236;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v271;
          uint64_t result = *(__n128 *)&v271[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v271[12];
          if (a2[-1].n128_u64[0] >= *(void *)(v14 + 80)) {
            return result;
          }
          size_t v134 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v262[12] = v134.n128_u32[3];
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 80);
          uint64_t result = *v129;
          uint64_t v202 = *v11;
          long long v201 = a2[-2];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
          *uint64_t v129 = v202;
          *(__n128 *)(v14 + 64) = v201;
        }
        else
        {
LABEL_104:
          *(_OWORD *)long long v262 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 32);
          __n128 v229 = *(__n128 *)v14;
          unint64_t v132 = *v11;
          unint64_t v133 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v132;
          *(__n128 *)(v14 + 16) = v133;
          uint64_t result = v229;
          size_t v134 = *(__n128 *)v262;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v262[12];
        *uint64_t v11 = result;
        a2[-2] = v134;
        return result;
      }
      if (v131 < v130)
      {
        *(_OWORD *)long long v266 = *(_OWORD *)(v14 + 64);
        *(_OWORD *)&v266[16] = *(_OWORD *)(v14 + 80);
        uint64_t result = *v129;
        long long v170 = *v11;
        unint64_t v169 = a2[-2];
        *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
        *uint64_t v129 = v170;
        *(__n128 *)(v14 + 64) = v169;
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v266[12];
        *uint64_t v11 = result;
        a2[-2] = *(__n128 *)v266;
LABEL_181:
        if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
        {
          *(_OWORD *)long long v275 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v275[16] = *(_OWORD *)(v14 + 32);
          __n128 v238 = *(__n128 *)v14;
          uint64_t v210 = v129[1];
          *(__n128 *)unint64_t v14 = *v129;
          *(__n128 *)(v14 + 16) = v210;
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v129 + 28);
          *uint64_t v129 = v238;
          v129[1] = *(__n128 *)v275;
          uint64_t result = *(__n128 *)&v275[12];
          *(__n128 *)((char *)v129 + 28) = *(__n128 *)&v275[12];
        }
      }
      break;
    case 4:
      uint64_t v129 = (__n128 *)(v14 + 48);
      __n128 v135 = (__n128 *)(v14 + 96);
      long long v136 = *(void *)(v14 + 80);
      unint64_t v137 = *(void *)(v14 + 128);
      if (v136 >= *(void *)(v14 + 32))
      {
        if (v137 < v136)
        {
          long long v171 = *v129;
          *(_OWORD *)long long v267 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v267[16] = *(_OWORD *)(v14 + 80);
          uint64_t v172 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v172;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v171;
          *(_OWORD *)(v14 + 112) = *(_OWORD *)v267;
          uint64_t result = *(__n128 *)&v267[12];
          *(_OWORD *)(v14 + 124) = *(_OWORD *)&v267[12];
          if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
          {
            *(_OWORD *)long long v268 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v268[16] = *(_OWORD *)(v14 + 32);
            __n128 v233 = *(__n128 *)v14;
            uint64_t v173 = *(_OWORD *)(v14 + 64);
            *(__n128 *)unint64_t v14 = *v129;
            *(_OWORD *)(v14 + 16) = v173;
            *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
            *uint64_t v129 = v233;
            *(_OWORD *)(v14 + 64) = *(_OWORD *)v268;
            uint64_t result = *(__n128 *)&v268[12];
            *(_OWORD *)(v14 + 76) = *(_OWORD *)&v268[12];
          }
        }
      }
      else
      {
        if (v137 >= v136)
        {
          *(_OWORD *)long long v272 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v272[16] = *(_OWORD *)(v14 + 32);
          __n128 v237 = *(__n128 *)v14;
          unint64_t v203 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v203;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v237;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v272;
          uint64_t result = *(__n128 *)&v272[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v272[12];
          if (v137 >= *(void *)(v14 + 80)) {
            goto LABEL_178;
          }
          unint64_t v139 = *(_OWORD *)(v14 + 64);
          unint64_t v204 = *v129;
          *(_DWORD *)&v263[12] = HIDWORD(v139);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 80);
          int v205 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v205;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v204;
        }
        else
        {
          *(_OWORD *)long long v263 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          unint64_t v138 = *(_OWORD *)(v14 + 112);
          *(__n128 *)unint64_t v14 = *v135;
          *(_OWORD *)(v14 + 16) = v138;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 124);
          unint64_t v139 = *(_OWORD *)v263;
          *__n128 v135 = v230;
        }
        *(_OWORD *)(v14 + 112) = v139;
        uint64_t result = *(__n128 *)&v263[12];
        *(_OWORD *)(v14 + 124) = *(_OWORD *)&v263[12];
      }
LABEL_178:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 128)) {
        return result;
      }
      *(_OWORD *)long long v273 = *(_OWORD *)(v14 + 112);
      *(_OWORD *)&v273[16] = *(_OWORD *)(v14 + 128);
      uint64_t result = *v135;
      __n128 v207 = *v11;
      unint64_t v206 = a2[-2];
      *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 20);
      *__n128 v135 = v207;
      *(__n128 *)(v14 + 112) = v206;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v273[12];
      *uint64_t v11 = result;
      a2[-2] = *(__n128 *)v273;
      if (*(void *)(v14 + 128) >= *(void *)(v14 + 80)) {
        return result;
      }
      long long v208 = *v129;
      *(_OWORD *)long long v274 = *(_OWORD *)(v14 + 64);
      *(_OWORD *)&v274[16] = *(_OWORD *)(v14 + 80);
      long long v209 = *(_OWORD *)(v14 + 112);
      *uint64_t v129 = *v135;
      *(_OWORD *)(v14 + 64) = v209;
      *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
      *__n128 v135 = v208;
      *(_OWORD *)(v14 + 112) = *(_OWORD *)v274;
      uint64_t result = *(__n128 *)&v274[12];
      *(_OWORD *)(v14 + 124) = *(_OWORD *)&v274[12];
      goto LABEL_181;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), (long long *)(v14 + 144), (long long *)&a2[-3]).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = a2 - 3;
  int v12 = a2 - 6;
  long long v13 = a2 - 9;
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (uint64_t)a2 - v14;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 4);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 1151)
    {
      __n128 v140 = (__n128 *)(v14 + 48);
      long long v142 = (__n128 *)v14 == a2 || v140 == a2;
      if (a4)
      {
        if (!v142)
        {
          unint64_t v143 = 0;
          unint64_t v144 = (_OWORD *)v14;
          do
          {
            long long v146 = v140;
            uint64_t v147 = *((void *)v144 + 10);
            if (v147 < *((void *)v144 + 4))
            {
              __n128 v231 = *v146;
              long long v264 = v146[1];
              unint64_t v148 = *((_DWORD *)v144 + 22);
              BOOL v149 = v143;
              do
              {
                uint64_t v150 = (_OWORD *)(v14 + v149);
                unint64_t v151 = *(_OWORD *)(v14 + v149 + 16);
                v150[3] = *(_OWORD *)(v14 + v149);
                v150[4] = v151;
                *(_OWORD *)((char *)v150 + 76) = *(_OWORD *)(v14 + v149 + 28);
                if (!v149)
                {
                  unint64_t v145 = v14;
                  goto LABEL_122;
                }
                v149 -= 48;
              }
              while (v147 < *((void *)v150 - 2));
              unint64_t v145 = v14 + v149 + 48;
LABEL_122:
              uint64_t result = v231;
              *(__n128 *)unint64_t v145 = v231;
              *(__n128 *)(v145 + 16) = v264;
              *(void *)(v145 + 32) = v147;
              *(_DWORD *)(v145 + 40) = v148;
            }
            __n128 v140 = v146 + 3;
            v143 += 48;
            unint64_t v144 = v146;
          }
          while (&v146[3] != a2);
        }
      }
      else if (!v142)
      {
        do
        {
          unint64_t v174 = v140;
          unint64_t v175 = *(void *)(a1 + 80);
          if (v175 < *(void *)(a1 + 32))
          {
            __n128 v234 = *v140;
            long long v269 = v140[1];
            uint64_t v176 = *(void *)(a1 + 88);
            long long v177 = v174;
            do
            {
              __n128 v178 = v177[-2];
              *long long v177 = v177[-3];
              v177[1] = v178;
              *(__n128 *)((char *)v177 + 28) = *(__n128 *)((char *)v177 - 20);
              uint64_t v179 = v177[-4].n128_u64[0];
              v177 -= 3;
            }
            while (v175 < v179);
            uint64_t result = v234;
            *long long v177 = v234;
            v177[1] = v269;
            v177[2].n128_u64[0] = v175;
            v177[2].n128_u32[2] = v176;
          }
          __n128 v140 = v174 + 3;
          a1 = (unint64_t)v174;
        }
        while (&v174[3] != a2);
      }
      return result;
    }
    if (!a3)
    {
      if ((__n128 *)v14 != a2)
      {
        uint64_t v152 = (unint64_t)(v16 - 2) >> 1;
        uint64_t v153 = v152;
        do
        {
          if (v152 >= v153)
          {
            int v155 = (2 * v153) | 1;
            uint64_t v156 = v14 + 48 * v155;
            if (2 * v153 + 2 < v16)
            {
              uint64_t v157 = *(void *)(v14 + 48 * v155 + 32);
              long long v158 = *(void *)(v156 + 80);
              v156 += 48 * (v157 < v158);
              if (v157 < v158) {
                int v155 = 2 * v153 + 2;
              }
            }
            int64_t v159 = *(void *)(v14 + 48 * v153 + 32);
            if (*(void *)(v156 + 32) >= v159)
            {
              int64_t v160 = v14 + 48 * v153;
              __n128 v232 = *(_OWORD *)v160;
              long long v265 = *(_OWORD *)(v160 + 16);
              BOOL v161 = *(_DWORD *)(v160 + 40);
              do
              {
                uint64_t v162 = (_OWORD *)v160;
                int64_t v160 = v156;
                unint64_t v163 = *(_OWORD *)v156;
                unint64_t v164 = *(_OWORD *)(v156 + 16);
                *(_OWORD *)((char *)v162 + 28) = *(_OWORD *)(v156 + 28);
                *uint64_t v162 = v163;
                v162[1] = v164;
                if (v152 < v155) {
                  break;
                }
                unint64_t v165 = (2 * v155) | 1;
                uint64_t v156 = v14 + 48 * v165;
                unint64_t v166 = 2 * v155 + 2;
                if (v166 < v16)
                {
                  unint64_t v167 = *(void *)(v14 + 48 * v165 + 32);
                  int v168 = *(void *)(v156 + 80);
                  v156 += 48 * (v167 < v168);
                  if (v167 < v168) {
                    unint64_t v165 = v166;
                  }
                }
                int v155 = v165;
              }
              while (*(void *)(v156 + 32) >= v159);
              *(_OWORD *)int64_t v160 = v232;
              *(_OWORD *)(v160 + 16) = v265;
              *(void *)(v160 + 32) = v159;
              *(_DWORD *)(v160 + 40) = v161;
            }
          }
          unint64_t v154 = v153-- <= 0;
        }
        while (!v154);
        __n128 v180 = v15 / 0x30uLL;
        do
        {
          long long v181 = 0;
          *(_OWORD *)long long v270 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v270[16] = *(_OWORD *)(v14 + 32);
          __n128 v235 = *(__n128 *)v14;
          long long v182 = (_OWORD *)v14;
          do
          {
            uint64_t v185 = v181 + 1;
            unint64_t v186 = (__n128 *)&v182[3 * v181 + 3];
            long long v187 = (2 * v181) | 1;
            unint64_t v188 = 2 * v181 + 2;
            if (v188 < v180)
            {
              int64_t v189 = *(void *)&v182[3 * v185 + 2];
              uint64_t v190 = v186[5].n128_u64[0];
              v186 += 3 * (v189 < v190);
              if (v189 < v190) {
                long long v187 = v188;
              }
            }
            unint64_t v183 = *v186;
            unint64_t v184 = v186[1];
            *(__n128 *)((char *)v182 + 28) = *(__n128 *)((char *)&v186[1] + 12);
            *long long v182 = v183;
            v182[1] = v184;
            long long v182 = v186;
            long long v181 = v187;
          }
          while (v187 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
          a2 -= 3;
          if (v186 == a2)
          {
            uint64_t result = v235;
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)&v270[12];
            *unint64_t v186 = v235;
            v186[1] = *(__n128 *)v270;
          }
          else
          {
            unint64_t v191 = *a2;
            __n128 v192 = a2[1];
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)((char *)a2 + 28);
            *unint64_t v186 = v191;
            v186[1] = v192;
            uint64_t result = v235;
            *(__n128 *)((char *)a2 + 28) = *(__n128 *)&v270[12];
            *a2 = v235;
            a2[1] = *(__n128 *)v270;
            long long v193 = (uint64_t)&v186[3] - v14;
            if (v193 >= 49)
            {
              uint64_t v194 = (v193 / 0x30uLL - 2) >> 1;
              unint64_t v195 = v186[2].n128_u64[0];
              if (*(void *)(v14 + 48 * v194 + 32) < v195)
              {
                uint64_t v278 = *v186;
                unint64_t v281 = v186[1];
                uint64_t v196 = v186[2].n128_i32[2];
                do
                {
                  uint64_t v197 = v186;
                  unint64_t v186 = (__n128 *)(v14 + 48 * v194);
                  unint64_t v198 = *v186;
                  unint64_t v199 = v186[1];
                  *(__n128 *)((char *)v197 + 28) = *(__n128 *)((char *)v186 + 28);
                  *uint64_t v197 = v198;
                  v197[1] = v199;
                  if (!v194) {
                    break;
                  }
                  uint64_t v194 = (v194 - 1) >> 1;
                }
                while (*(void *)(v14 + 48 * v194 + 32) < v195);
                uint64_t result = v278;
                *unint64_t v186 = v278;
                v186[1] = v281;
                v186[2].n128_u64[0] = v195;
                v186[2].n128_u32[2] = v196;
              }
            }
          }
          unint64_t v154 = v180-- <= 2;
        }
        while (!v154);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = (__n128 *)(v14 + 48 * ((unint64_t)v16 >> 1));
    unint64_t v19 = a2[-1].n128_u64[0];
    if ((unint64_t)v15 < 0x1801)
    {
      unint64_t v24 = *(void *)(v14 + 32);
      uint64_t v25 = (unint64_t *)(v14 + 32 + 48 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          *(__n128 *)__n128 v240 = v18[1];
          *(__n128 *)&v240[16] = v18[2];
          __n128 v212 = *v18;
          __n128 v26 = *v11;
          long long v27 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v26;
          v18[1] = v27;
          goto LABEL_31;
        }
        *(__n128 *)__n128 v249 = v18[1];
        *(__n128 *)&v249[16] = v18[2];
        __n128 v219 = *v18;
        long long v56 = *(__n128 *)v14;
        __n128 v57 = *(__n128 *)(v14 + 16);
        *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
        *unint64_t v18 = v56;
        v18[1] = v57;
        *(_OWORD *)(v14 + 28) = *(_OWORD *)&v249[12];
        *(__n128 *)unint64_t v14 = v219;
        *(_OWORD *)(v14 + 16) = *(_OWORD *)v249;
        if (a2[-1].n128_u64[0] < *(void *)(v14 + 32))
        {
          *(_OWORD *)__n128 v240 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v240[16] = *(_OWORD *)(v14 + 32);
          __n128 v212 = *(__n128 *)v14;
          __n128 v58 = *v11;
          long long v59 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v58;
          *(__n128 *)(v14 + 16) = v59;
LABEL_31:
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v240[12];
          *uint64_t v11 = v212;
          a2[-2] = *(__n128 *)v240;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      *(_OWORD *)__n128 v243 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 32);
      __n128 v215 = *(__n128 *)v14;
      __n128 v32 = *v11;
      long long v33 = a2[-2];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
      *(__n128 *)unint64_t v14 = v32;
      *(__n128 *)(v14 + 16) = v33;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v243[12];
      *uint64_t v11 = v215;
      a2[-2] = *(__n128 *)v243;
      if (*(void *)(v14 + 32) >= *v25) {
        goto LABEL_32;
      }
      *(__n128 *)__n128 v244 = v18[1];
      *(__n128 *)&v244[16] = v18[2];
      long long v216 = *v18;
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(__n128 *)(v14 + 16);
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
      *unint64_t v18 = v34;
      v18[1] = v35;
      *(_OWORD *)(v14 + 28) = *(_OWORD *)&v244[12];
      *(__n128 *)unint64_t v14 = v216;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)v244;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      __n128 v60 = *(void *)(v14 + 32);
      if (*(void *)(v14 - 16) < v60) {
        goto LABEL_57;
      }
      unint64_t v277 = *(__n128 *)v14;
      long long v280 = *(_OWORD *)(v14 + 16);
      if (v60 < a2[-1].n128_u64[0])
      {
        long long v114 = v14;
        do
        {
          unint64_t v14 = v114 + 48;
          unint64_t v115 = *(void *)(v114 + 80);
          v114 += 48;
        }
        while (v60 >= v115);
      }
      else
      {
        unint64_t v116 = v14 + 48;
        do
        {
          unint64_t v14 = v116;
          if (v116 >= (unint64_t)a2) {
            break;
          }
          uint64_t v117 = *(void *)(v116 + 32);
          v116 += 48;
        }
        while (v60 >= v117);
      }
      __n128 v118 = a2;
      if (v14 < (unint64_t)a2)
      {
        long long v119 = a2;
        do
        {
          __n128 v118 = v119 - 3;
          BOOL v120 = v119[-1].n128_u64[0];
          v119 -= 3;
        }
        while (v60 < v120);
      }
      __n128 v121 = *(void *)(a1 + 40);
      while (v14 < (unint64_t)v118)
      {
        *(_OWORD *)long long v261 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)&v261[16] = *(_OWORD *)(v14 + 32);
        __n128 v228 = *(__n128 *)v14;
        unint64_t v122 = *v118;
        unint64_t v123 = v118[1];
        *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v118 + 28);
        *(__n128 *)unint64_t v14 = v122;
        *(__n128 *)(v14 + 16) = v123;
        *(__n128 *)((char *)v118 + 28) = *(__n128 *)&v261[12];
        *__n128 v118 = v228;
        v118[1] = *(__n128 *)v261;
        do
        {
          unint64_t v124 = *(void *)(v14 + 80);
          v14 += 48;
        }
        while (v60 >= v124);
        do
        {
          unint64_t v125 = v118[-1].n128_u64[0];
          v118 -= 3;
        }
        while (v60 < v125);
      }
      unint64_t v126 = (__n128 *)(v14 - 48);
      BOOL v5 = v14 - 48 >= a1;
      BOOL v6 = v14 - 48 == a1;
      if (v14 - 48 != a1)
      {
        unint64_t v127 = *v126;
        unint64_t v128 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v127;
        *(_OWORD *)(a1 + 16) = v128;
      }
      a4 = 0;
      uint64_t result = v277;
      *unint64_t v126 = v277;
      *(_OWORD *)(v14 - 32) = v280;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v121;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 32 + 48 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 32))
      {
        if (v19 < v21)
        {
          *(__n128 *)__n128 v241 = v18[1];
          *(__n128 *)&v241[16] = v18[2];
          long long v213 = *v18;
          __n128 v28 = *v11;
          long long v29 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v28;
          v18[1] = v29;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v241[12];
          *uint64_t v11 = v213;
          a2[-2] = *(__n128 *)v241;
          if (*v20 < *(void *)(v14 + 32))
          {
            *(_OWORD *)__n128 v242 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v242[16] = *(_OWORD *)(v14 + 32);
            uint64_t v214 = *(__n128 *)v14;
            __n128 v30 = *v18;
            long long v31 = v18[1];
            *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
            *(__n128 *)unint64_t v14 = v30;
            *(__n128 *)(v14 + 16) = v31;
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v242[12];
            *unint64_t v18 = v214;
            v18[1] = *(__n128 *)v242;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          *(_OWORD *)long long v245 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v245[16] = *(_OWORD *)(v14 + 32);
          int v217 = *(__n128 *)v14;
          __n128 v36 = *v18;
          long long v37 = v18[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
          *(__n128 *)unint64_t v14 = v36;
          *(__n128 *)(v14 + 16) = v37;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v245[12];
          *unint64_t v18 = v217;
          v18[1] = *(__n128 *)v245;
          if (a2[-1].n128_u64[0] >= *v20) {
            goto LABEL_23;
          }
          *(__n128 *)__n128 v239 = v18[1];
          *(__n128 *)&v239[16] = v18[2];
          long long v211 = *v18;
          __n128 v38 = *v11;
          long long v39 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v38;
          v18[1] = v39;
        }
        else
        {
          *(_OWORD *)__n128 v239 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v239[16] = *(_OWORD *)(v14 + 32);
          long long v211 = *(__n128 *)v14;
          __n128 v22 = *v11;
          long long v23 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v22;
          *(__n128 *)(v14 + 16) = v23;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v239[12];
        *uint64_t v11 = v211;
        a2[-2] = *(__n128 *)v239;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 48);
      unint64_t v41 = v14 + 48 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (_OWORD *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 2);
      unint64_t v46 = a2[-4].n128_u64[0];
      if (v44 >= *(void *)(v14 + 80))
      {
        if (v46 < v43)
        {
          *(_OWORD *)__n128 v247 = *(v42 - 1);
          *(_OWORD *)&v247[16] = *v42;
          long long v218 = *v45;
          __n128 v51 = *v12;
          __n128 v52 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v51;
          *(v42 - 1) = v52;
          *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v247[12];
          *int v12 = v218;
          a2[-5] = *(__n128 *)v247;
          if (*(void *)v42 < *(void *)(v14 + 80))
          {
            *(_OWORD *)__n128 v248 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v248[16] = *(_OWORD *)(v14 + 80);
            long long v53 = *v40;
            uint64_t v55 = *v45;
            __n128 v54 = *(v42 - 1);
            *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
            *int v40 = v55;
            *(_OWORD *)(v14 + 64) = v54;
            *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v248[12];
            *uint64_t v45 = v53;
            *(v42 - 1) = *(_OWORD *)v248;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          *(_OWORD *)__n128 v250 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v250[16] = *(_OWORD *)(v14 + 80);
          long long v61 = *v40;
          __n128 v63 = *v45;
          unint64_t v62 = *(v42 - 1);
          *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
          *int v40 = v63;
          *(_OWORD *)(v14 + 64) = v62;
          *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v250[12];
          *uint64_t v45 = v61;
          *(v42 - 1) = *(_OWORD *)v250;
          if (a2[-4].n128_u64[0] >= *(void *)v42) {
            goto LABEL_37;
          }
          *(_OWORD *)__n128 v246 = *(v42 - 1);
          *(_OWORD *)&v246[16] = *v42;
          uint64_t v220 = *v45;
          int v64 = *v12;
          long long v65 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v64;
          *(v42 - 1) = v65;
          long long v48 = v220;
          __n128 v47 = *(__n128 *)v246;
        }
        else
        {
          __n128 v47 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v246[12] = v47.n128_u32[3];
          *(_OWORD *)&v246[16] = *(_OWORD *)(v14 + 80);
          long long v48 = *v40;
          long long v50 = *v12;
          uint64_t v49 = a2[-5];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 68);
          *int v40 = v50;
          *(__n128 *)(v14 + 64) = v49;
        }
        *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v246[12];
        *int v12 = v48;
        a2[-5] = v47;
      }
LABEL_37:
      __n128 v66 = (__n128 *)(v14 + 96);
      __n128 v67 = v14 + 48 * v17;
      unint64_t v70 = *(void *)(v67 + 80);
      long long v68 = (__n128 *)(v67 + 80);
      unsigned int v69 = v70;
      int v71 = v68 - 2;
      unint64_t v72 = a2[-7].n128_u64[0];
      if (v70 >= *(void *)(v14 + 128))
      {
        if (v72 < v69)
        {
          *(__n128 *)long long v252 = v68[-1];
          *(__n128 *)&v252[16] = *v68;
          __n128 v221 = *v71;
          long long v77 = *v13;
          uint64_t v78 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v77;
          v68[-1] = v78;
          *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v252[12];
          *long long v13 = v221;
          a2[-8] = *(__n128 *)v252;
          if (v68->n128_u64[0] < *(void *)(v14 + 128))
          {
            *(_OWORD *)long long v253 = *(_OWORD *)(v14 + 112);
            *(_OWORD *)&v253[16] = *(_OWORD *)(v14 + 128);
            long long v79 = *v66;
            __n128 v81 = *v71;
            __n128 v80 = v68[-1];
            *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
            unsigned __int16 *v66 = v81;
            *(__n128 *)(v14 + 112) = v80;
            *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v253[12];
            *int v71 = v79;
            v68[-1] = *(__n128 *)v253;
          }
        }
      }
      else
      {
        if (v72 >= v69)
        {
          *(_OWORD *)long long v254 = *(_OWORD *)(v14 + 112);
          *(_OWORD *)&v254[16] = *(_OWORD *)(v14 + 128);
          long long v82 = *v66;
          uint64_t v84 = *v71;
          __n128 v83 = v68[-1];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
          unsigned __int16 *v66 = v84;
          *(__n128 *)(v14 + 112) = v83;
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v254[12];
          *int v71 = v82;
          v68[-1] = *(__n128 *)v254;
          if (a2[-7].n128_u64[0] >= v68->n128_u64[0]) {
            goto LABEL_46;
          }
          *(__n128 *)__n128 v251 = v68[-1];
          *(__n128 *)&v251[16] = *v68;
          long long v222 = *v71;
          long long v85 = *v13;
          __n128 v86 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v85;
          v68[-1] = v86;
          uint64_t v74 = v222;
          unint64_t v73 = *(__n128 *)v251;
        }
        else
        {
          unint64_t v73 = *(__n128 *)(v14 + 112);
          *(_DWORD *)&v251[12] = v73.n128_u32[3];
          *(_OWORD *)&v251[16] = *(_OWORD *)(v14 + 128);
          uint64_t v74 = *v66;
          __n128 v76 = *v13;
          unint64_t v75 = a2[-8];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 116);
          unsigned __int16 *v66 = v76;
          *(__n128 *)(v14 + 112) = v75;
        }
        *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v251[12];
        *long long v13 = v74;
        a2[-8] = v73;
      }
LABEL_46:
      __n128 v87 = *v20;
      int v88 = v68->n128_u64[0];
      if (*v20 >= *(void *)v42)
      {
        if (v88 < v87)
        {
          *(__n128 *)long long v256 = v18[1];
          *(__n128 *)&v256[16] = v18[2];
          __n128 v224 = *v18;
          __n128 v90 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v90;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v256[12];
          *int v71 = v224;
          v68[-1] = *(__n128 *)v256;
          if (*v20 < *(void *)v42)
          {
            *(_OWORD *)long long v257 = *(v42 - 1);
            *(_OWORD *)&v257[16] = *v42;
            __n128 v225 = *v45;
            __n128 v91 = v18[1];
            *uint64_t v45 = *v18;
            *(v42 - 1) = v91;
            *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v257[12];
            *unint64_t v18 = v225;
            v18[1] = *(__n128 *)v257;
          }
        }
      }
      else
      {
        if (v88 >= v87)
        {
          *(_OWORD *)long long v258 = *(v42 - 1);
          *(_OWORD *)&v258[16] = *v42;
          __n128 v226 = *v45;
          long long v92 = v18[1];
          *uint64_t v45 = *v18;
          *(v42 - 1) = v92;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v258[12];
          *unint64_t v18 = v226;
          v18[1] = *(__n128 *)v258;
          if (v68->n128_u64[0] >= *v20) {
            goto LABEL_55;
          }
          *(__n128 *)long long v255 = v18[1];
          *(__n128 *)&v255[16] = v18[2];
          long long v223 = *v18;
          unint64_t v93 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v93;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
        }
        else
        {
          *(_OWORD *)long long v255 = *(v42 - 1);
          *(_OWORD *)&v255[16] = *v42;
          long long v223 = *v45;
          long long v89 = v68[-1];
          *uint64_t v45 = *v71;
          *(v42 - 1) = v89;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v68[-1] + 12);
        }
        *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v255[12];
        *int v71 = v223;
        v68[-1] = *(__n128 *)v255;
      }
LABEL_55:
      *(_OWORD *)long long v259 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v259[16] = *(_OWORD *)(v14 + 32);
      __n128 v227 = *(__n128 *)v14;
      unint64_t v94 = *v18;
      long long v95 = v18[1];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
      *(__n128 *)unint64_t v14 = v94;
      *(__n128 *)(v14 + 16) = v95;
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v259[12];
      *unint64_t v18 = v227;
      v18[1] = *(__n128 *)v259;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      __n128 v60 = *(void *)(v14 + 32);
LABEL_57:
      long long v276 = *(__n128 *)v14;
      long long v279 = *(_OWORD *)(v14 + 16);
      long long v96 = *(void *)(v14 + 40);
      long long v97 = v14;
      do
      {
        long long v98 = v97;
        v97 += 48;
      }
      while (*(void *)(v98 + 80) < v60);
      long long v99 = a2;
      if (v98 == v14)
      {
        uint64_t v102 = a2;
        while (v97 < (unint64_t)v102)
        {
          __n128 v100 = v102 - 3;
          unint64_t v103 = v102[-1].n128_u64[0];
          v102 -= 3;
          if (v103 < v60) {
            goto LABEL_66;
          }
        }
        __n128 v100 = v102;
      }
      else
      {
        do
        {
          __n128 v100 = v99 - 3;
          long long v101 = v99[-1].n128_u64[0];
          v99 -= 3;
        }
        while (v101 >= v60);
      }
LABEL_66:
      unint64_t v14 = v97;
      if (v97 < (unint64_t)v100)
      {
        unint64_t v104 = v100;
        do
        {
          *(_OWORD *)long long v260 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v260[16] = *(_OWORD *)(v14 + 32);
          unint64_t v105 = *(__n128 *)v14;
          unint64_t v107 = *v104;
          unint64_t v106 = v104[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v104 + 28);
          *(__n128 *)unint64_t v14 = v107;
          *(__n128 *)(v14 + 16) = v106;
          *(__n128 *)((char *)v104 + 28) = *(__n128 *)&v260[12];
          *unint64_t v104 = v105;
          v104[1] = *(__n128 *)v260;
          do
          {
            unint64_t v108 = *(void *)(v14 + 80);
            v14 += 48;
          }
          while (v108 < v60);
          do
          {
            unint64_t v109 = v104[-1].n128_u64[0];
            v104 -= 3;
          }
          while (v109 >= v60);
        }
        while (v14 < (unint64_t)v104);
      }
      unint64_t v110 = (__n128 *)(v14 - 48);
      if (v14 - 48 != a1)
      {
        __n128 v111 = *v110;
        uint64_t v112 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v111;
        *(_OWORD *)(a1 + 16) = v112;
      }
      *unint64_t v110 = v276;
      *(_OWORD *)(v14 - 32) = v279;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v96;
      if (v97 < (unint64_t)v100) {
        goto LABEL_77;
      }
      long long v113 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(a1, v14 - 48);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(v14, (uint64_t)a2))
      {
        a2 = (__n128 *)(v14 - 48);
        if (v113) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v113)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(a1, v14 - 48, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 32)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      uint64_t v129 = (__n128 *)(v14 + 48);
      long long v130 = *(void *)(v14 + 80);
      long long v131 = a2[-1].n128_u64[0];
      if (v130 < *(void *)(v14 + 32))
      {
        if (v131 >= v130)
        {
          *(_OWORD *)long long v271 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v271[16] = *(_OWORD *)(v14 + 32);
          __n128 v236 = *(__n128 *)v14;
          long long v200 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v200;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v236;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v271;
          uint64_t result = *(__n128 *)&v271[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v271[12];
          if (a2[-1].n128_u64[0] >= *(void *)(v14 + 80)) {
            return result;
          }
          size_t v134 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v262[12] = v134.n128_u32[3];
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 80);
          uint64_t result = *v129;
          uint64_t v202 = *v11;
          long long v201 = a2[-2];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
          *uint64_t v129 = v202;
          *(__n128 *)(v14 + 64) = v201;
        }
        else
        {
LABEL_104:
          *(_OWORD *)long long v262 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 32);
          __n128 v229 = *(__n128 *)v14;
          unint64_t v132 = *v11;
          unint64_t v133 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v132;
          *(__n128 *)(v14 + 16) = v133;
          uint64_t result = v229;
          size_t v134 = *(__n128 *)v262;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v262[12];
        *uint64_t v11 = result;
        a2[-2] = v134;
        return result;
      }
      if (v131 < v130)
      {
        *(_OWORD *)long long v266 = *(_OWORD *)(v14 + 64);
        *(_OWORD *)&v266[16] = *(_OWORD *)(v14 + 80);
        uint64_t result = *v129;
        long long v170 = *v11;
        unint64_t v169 = a2[-2];
        *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
        *uint64_t v129 = v170;
        *(__n128 *)(v14 + 64) = v169;
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v266[12];
        *uint64_t v11 = result;
        a2[-2] = *(__n128 *)v266;
LABEL_181:
        if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
        {
          *(_OWORD *)long long v275 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v275[16] = *(_OWORD *)(v14 + 32);
          __n128 v238 = *(__n128 *)v14;
          uint64_t v210 = v129[1];
          *(__n128 *)unint64_t v14 = *v129;
          *(__n128 *)(v14 + 16) = v210;
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v129 + 28);
          *uint64_t v129 = v238;
          v129[1] = *(__n128 *)v275;
          uint64_t result = *(__n128 *)&v275[12];
          *(__n128 *)((char *)v129 + 28) = *(__n128 *)&v275[12];
        }
      }
      break;
    case 4:
      uint64_t v129 = (__n128 *)(v14 + 48);
      __n128 v135 = (__n128 *)(v14 + 96);
      long long v136 = *(void *)(v14 + 80);
      unint64_t v137 = *(void *)(v14 + 128);
      if (v136 >= *(void *)(v14 + 32))
      {
        if (v137 < v136)
        {
          long long v171 = *v129;
          *(_OWORD *)long long v267 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v267[16] = *(_OWORD *)(v14 + 80);
          uint64_t v172 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v172;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v171;
          *(_OWORD *)(v14 + 112) = *(_OWORD *)v267;
          uint64_t result = *(__n128 *)&v267[12];
          *(_OWORD *)(v14 + 124) = *(_OWORD *)&v267[12];
          if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
          {
            *(_OWORD *)long long v268 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v268[16] = *(_OWORD *)(v14 + 32);
            __n128 v233 = *(__n128 *)v14;
            uint64_t v173 = *(_OWORD *)(v14 + 64);
            *(__n128 *)unint64_t v14 = *v129;
            *(_OWORD *)(v14 + 16) = v173;
            *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
            *uint64_t v129 = v233;
            *(_OWORD *)(v14 + 64) = *(_OWORD *)v268;
            uint64_t result = *(__n128 *)&v268[12];
            *(_OWORD *)(v14 + 76) = *(_OWORD *)&v268[12];
          }
        }
      }
      else
      {
        if (v137 >= v136)
        {
          *(_OWORD *)long long v272 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v272[16] = *(_OWORD *)(v14 + 32);
          __n128 v237 = *(__n128 *)v14;
          unint64_t v203 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v203;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v237;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v272;
          uint64_t result = *(__n128 *)&v272[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v272[12];
          if (v137 >= *(void *)(v14 + 80)) {
            goto LABEL_178;
          }
          unint64_t v139 = *(_OWORD *)(v14 + 64);
          unint64_t v204 = *v129;
          *(_DWORD *)&v263[12] = HIDWORD(v139);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 80);
          int v205 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v205;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v204;
        }
        else
        {
          *(_OWORD *)long long v263 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          unint64_t v138 = *(_OWORD *)(v14 + 112);
          *(__n128 *)unint64_t v14 = *v135;
          *(_OWORD *)(v14 + 16) = v138;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 124);
          unint64_t v139 = *(_OWORD *)v263;
          *__n128 v135 = v230;
        }
        *(_OWORD *)(v14 + 112) = v139;
        uint64_t result = *(__n128 *)&v263[12];
        *(_OWORD *)(v14 + 124) = *(_OWORD *)&v263[12];
      }
LABEL_178:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 128)) {
        return result;
      }
      *(_OWORD *)long long v273 = *(_OWORD *)(v14 + 112);
      *(_OWORD *)&v273[16] = *(_OWORD *)(v14 + 128);
      uint64_t result = *v135;
      __n128 v207 = *v11;
      unint64_t v206 = a2[-2];
      *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 20);
      *__n128 v135 = v207;
      *(__n128 *)(v14 + 112) = v206;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v273[12];
      *uint64_t v11 = result;
      a2[-2] = *(__n128 *)v273;
      if (*(void *)(v14 + 128) >= *(void *)(v14 + 80)) {
        return result;
      }
      long long v208 = *v129;
      *(_OWORD *)long long v274 = *(_OWORD *)(v14 + 64);
      *(_OWORD *)&v274[16] = *(_OWORD *)(v14 + 80);
      long long v209 = *(_OWORD *)(v14 + 112);
      *uint64_t v129 = *v135;
      *(_OWORD *)(v14 + 64) = v209;
      *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
      *__n128 v135 = v208;
      *(_OWORD *)(v14 + 112) = *(_OWORD *)v274;
      uint64_t result = *(__n128 *)&v274[12];
      *(_OWORD *)(v14 + 124) = *(_OWORD *)&v274[12];
      goto LABEL_181;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), (long long *)(v14 + 144), (long long *)&a2[-3]).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

  uint64_t v11 = a2 - 3;
  int v12 = a2 - 6;
  long long v13 = a2 - 9;
  unint64_t v14 = a1;
  while (1)
  {
    a1 = v14;
    uint64_t v15 = (uint64_t)a2 - v14;
    uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 4);
    if (v6 || !v5) {
      break;
    }
    if (v15 <= 1151)
    {
      __n128 v140 = (__n128 *)(v14 + 48);
      long long v142 = (__n128 *)v14 == a2 || v140 == a2;
      if (a4)
      {
        if (!v142)
        {
          unint64_t v143 = 0;
          unint64_t v144 = (_OWORD *)v14;
          do
          {
            long long v146 = v140;
            uint64_t v147 = *((void *)v144 + 10);
            if (v147 < *((void *)v144 + 4))
            {
              __n128 v231 = *v146;
              long long v264 = v146[1];
              unint64_t v148 = *((_DWORD *)v144 + 22);
              BOOL v149 = v143;
              do
              {
                uint64_t v150 = (_OWORD *)(v14 + v149);
                unint64_t v151 = *(_OWORD *)(v14 + v149 + 16);
                v150[3] = *(_OWORD *)(v14 + v149);
                v150[4] = v151;
                *(_OWORD *)((char *)v150 + 76) = *(_OWORD *)(v14 + v149 + 28);
                if (!v149)
                {
                  unint64_t v145 = v14;
                  goto LABEL_122;
                }
                v149 -= 48;
              }
              while (v147 < *((void *)v150 - 2));
              unint64_t v145 = v14 + v149 + 48;
LABEL_122:
              uint64_t result = v231;
              *(__n128 *)unint64_t v145 = v231;
              *(__n128 *)(v145 + 16) = v264;
              *(void *)(v145 + 32) = v147;
              *(_DWORD *)(v145 + 40) = v148;
            }
            __n128 v140 = v146 + 3;
            v143 += 48;
            unint64_t v144 = v146;
          }
          while (&v146[3] != a2);
        }
      }
      else if (!v142)
      {
        do
        {
          unint64_t v174 = v140;
          unint64_t v175 = *(void *)(a1 + 80);
          if (v175 < *(void *)(a1 + 32))
          {
            __n128 v234 = *v140;
            long long v269 = v140[1];
            uint64_t v176 = *(void *)(a1 + 88);
            long long v177 = v174;
            do
            {
              __n128 v178 = v177[-2];
              *long long v177 = v177[-3];
              v177[1] = v178;
              *(__n128 *)((char *)v177 + 28) = *(__n128 *)((char *)v177 - 20);
              uint64_t v179 = v177[-4].n128_u64[0];
              v177 -= 3;
            }
            while (v175 < v179);
            uint64_t result = v234;
            *long long v177 = v234;
            v177[1] = v269;
            v177[2].n128_u64[0] = v175;
            v177[2].n128_u32[2] = v176;
          }
          __n128 v140 = v174 + 3;
          a1 = (unint64_t)v174;
        }
        while (&v174[3] != a2);
      }
      return result;
    }
    if (!a3)
    {
      if ((__n128 *)v14 != a2)
      {
        uint64_t v152 = (unint64_t)(v16 - 2) >> 1;
        uint64_t v153 = v152;
        do
        {
          if (v152 >= v153)
          {
            int v155 = (2 * v153) | 1;
            uint64_t v156 = v14 + 48 * v155;
            if (2 * v153 + 2 < v16)
            {
              uint64_t v157 = *(void *)(v14 + 48 * v155 + 32);
              long long v158 = *(void *)(v156 + 80);
              v156 += 48 * (v157 < v158);
              if (v157 < v158) {
                int v155 = 2 * v153 + 2;
              }
            }
            int64_t v159 = *(void *)(v14 + 48 * v153 + 32);
            if (*(void *)(v156 + 32) >= v159)
            {
              int64_t v160 = v14 + 48 * v153;
              __n128 v232 = *(_OWORD *)v160;
              long long v265 = *(_OWORD *)(v160 + 16);
              BOOL v161 = *(_DWORD *)(v160 + 40);
              do
              {
                uint64_t v162 = (_OWORD *)v160;
                int64_t v160 = v156;
                unint64_t v163 = *(_OWORD *)v156;
                unint64_t v164 = *(_OWORD *)(v156 + 16);
                *(_OWORD *)((char *)v162 + 28) = *(_OWORD *)(v156 + 28);
                *uint64_t v162 = v163;
                v162[1] = v164;
                if (v152 < v155) {
                  break;
                }
                unint64_t v165 = (2 * v155) | 1;
                uint64_t v156 = v14 + 48 * v165;
                unint64_t v166 = 2 * v155 + 2;
                if (v166 < v16)
                {
                  unint64_t v167 = *(void *)(v14 + 48 * v165 + 32);
                  int v168 = *(void *)(v156 + 80);
                  v156 += 48 * (v167 < v168);
                  if (v167 < v168) {
                    unint64_t v165 = v166;
                  }
                }
                int v155 = v165;
              }
              while (*(void *)(v156 + 32) >= v159);
              *(_OWORD *)int64_t v160 = v232;
              *(_OWORD *)(v160 + 16) = v265;
              *(void *)(v160 + 32) = v159;
              *(_DWORD *)(v160 + 40) = v161;
            }
          }
          unint64_t v154 = v153-- <= 0;
        }
        while (!v154);
        __n128 v180 = v15 / 0x30uLL;
        do
        {
          long long v181 = 0;
          *(_OWORD *)long long v270 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v270[16] = *(_OWORD *)(v14 + 32);
          __n128 v235 = *(__n128 *)v14;
          long long v182 = (_OWORD *)v14;
          do
          {
            uint64_t v185 = v181 + 1;
            unint64_t v186 = (__n128 *)&v182[3 * v181 + 3];
            long long v187 = (2 * v181) | 1;
            unint64_t v188 = 2 * v181 + 2;
            if (v188 < v180)
            {
              int64_t v189 = *(void *)&v182[3 * v185 + 2];
              uint64_t v190 = v186[5].n128_u64[0];
              v186 += 3 * (v189 < v190);
              if (v189 < v190) {
                long long v187 = v188;
              }
            }
            unint64_t v183 = *v186;
            unint64_t v184 = v186[1];
            *(__n128 *)((char *)v182 + 28) = *(__n128 *)((char *)&v186[1] + 12);
            *long long v182 = v183;
            v182[1] = v184;
            long long v182 = v186;
            long long v181 = v187;
          }
          while (v187 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
          a2 -= 3;
          if (v186 == a2)
          {
            uint64_t result = v235;
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)&v270[12];
            *unint64_t v186 = v235;
            v186[1] = *(__n128 *)v270;
          }
          else
          {
            unint64_t v191 = *a2;
            __n128 v192 = a2[1];
            *(__n128 *)((char *)v186 + 28) = *(__n128 *)((char *)a2 + 28);
            *unint64_t v186 = v191;
            v186[1] = v192;
            uint64_t result = v235;
            *(__n128 *)((char *)a2 + 28) = *(__n128 *)&v270[12];
            *a2 = v235;
            a2[1] = *(__n128 *)v270;
            long long v193 = (uint64_t)&v186[3] - v14;
            if (v193 >= 49)
            {
              uint64_t v194 = (v193 / 0x30uLL - 2) >> 1;
              unint64_t v195 = v186[2].n128_u64[0];
              if (*(void *)(v14 + 48 * v194 + 32) < v195)
              {
                uint64_t v278 = *v186;
                unint64_t v281 = v186[1];
                uint64_t v196 = v186[2].n128_i32[2];
                do
                {
                  uint64_t v197 = v186;
                  unint64_t v186 = (__n128 *)(v14 + 48 * v194);
                  unint64_t v198 = *v186;
                  unint64_t v199 = v186[1];
                  *(__n128 *)((char *)v197 + 28) = *(__n128 *)((char *)v186 + 28);
                  *uint64_t v197 = v198;
                  v197[1] = v199;
                  if (!v194) {
                    break;
                  }
                  uint64_t v194 = (v194 - 1) >> 1;
                }
                while (*(void *)(v14 + 48 * v194 + 32) < v195);
                uint64_t result = v278;
                *unint64_t v186 = v278;
                v186[1] = v281;
                v186[2].n128_u64[0] = v195;
                v186[2].n128_u32[2] = v196;
              }
            }
          }
          unint64_t v154 = v180-- <= 2;
        }
        while (!v154);
      }
      return result;
    }
    unint64_t v17 = (unint64_t)v16 >> 1;
    unint64_t v18 = (__n128 *)(v14 + 48 * ((unint64_t)v16 >> 1));
    unint64_t v19 = a2[-1].n128_u64[0];
    if ((unint64_t)v15 < 0x1801)
    {
      unint64_t v24 = *(void *)(v14 + 32);
      uint64_t v25 = (unint64_t *)(v14 + 32 + 48 * v17);
      if (v24 < *v25)
      {
        if (v19 < v24)
        {
          *(__n128 *)__n128 v240 = v18[1];
          *(__n128 *)&v240[16] = v18[2];
          __n128 v212 = *v18;
          __n128 v26 = *v11;
          long long v27 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v26;
          v18[1] = v27;
          goto LABEL_31;
        }
        *(__n128 *)__n128 v249 = v18[1];
        *(__n128 *)&v249[16] = v18[2];
        __n128 v219 = *v18;
        long long v56 = *(__n128 *)v14;
        __n128 v57 = *(__n128 *)(v14 + 16);
        *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
        *unint64_t v18 = v56;
        v18[1] = v57;
        *(_OWORD *)(v14 + 28) = *(_OWORD *)&v249[12];
        *(__n128 *)unint64_t v14 = v219;
        *(_OWORD *)(v14 + 16) = *(_OWORD *)v249;
        if (a2[-1].n128_u64[0] < *(void *)(v14 + 32))
        {
          *(_OWORD *)__n128 v240 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v240[16] = *(_OWORD *)(v14 + 32);
          __n128 v212 = *(__n128 *)v14;
          __n128 v58 = *v11;
          long long v59 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v58;
          *(__n128 *)(v14 + 16) = v59;
LABEL_31:
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v240[12];
          *uint64_t v11 = v212;
          a2[-2] = *(__n128 *)v240;
        }
LABEL_32:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_33;
      }
      if (v19 >= v24) {
        goto LABEL_32;
      }
      *(_OWORD *)__n128 v243 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 32);
      __n128 v215 = *(__n128 *)v14;
      __n128 v32 = *v11;
      long long v33 = a2[-2];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
      *(__n128 *)unint64_t v14 = v32;
      *(__n128 *)(v14 + 16) = v33;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v243[12];
      *uint64_t v11 = v215;
      a2[-2] = *(__n128 *)v243;
      if (*(void *)(v14 + 32) >= *v25) {
        goto LABEL_32;
      }
      *(__n128 *)__n128 v244 = v18[1];
      *(__n128 *)&v244[16] = v18[2];
      long long v216 = *v18;
      __n128 v34 = *(__n128 *)v14;
      long long v35 = *(__n128 *)(v14 + 16);
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)(v14 + 28);
      *unint64_t v18 = v34;
      v18[1] = v35;
      *(_OWORD *)(v14 + 28) = *(_OWORD *)&v244[12];
      *(__n128 *)unint64_t v14 = v216;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)v244;
      --a3;
      if (a4) {
        goto LABEL_33;
      }
LABEL_56:
      __n128 v60 = *(void *)(v14 + 32);
      if (*(void *)(v14 - 16) < v60) {
        goto LABEL_57;
      }
      unint64_t v277 = *(__n128 *)v14;
      long long v280 = *(_OWORD *)(v14 + 16);
      if (v60 < a2[-1].n128_u64[0])
      {
        long long v114 = v14;
        do
        {
          unint64_t v14 = v114 + 48;
          unint64_t v115 = *(void *)(v114 + 80);
          v114 += 48;
        }
        while (v60 >= v115);
      }
      else
      {
        unint64_t v116 = v14 + 48;
        do
        {
          unint64_t v14 = v116;
          if (v116 >= (unint64_t)a2) {
            break;
          }
          uint64_t v117 = *(void *)(v116 + 32);
          v116 += 48;
        }
        while (v60 >= v117);
      }
      __n128 v118 = a2;
      if (v14 < (unint64_t)a2)
      {
        long long v119 = a2;
        do
        {
          __n128 v118 = v119 - 3;
          BOOL v120 = v119[-1].n128_u64[0];
          v119 -= 3;
        }
        while (v60 < v120);
      }
      __n128 v121 = *(void *)(a1 + 40);
      while (v14 < (unint64_t)v118)
      {
        *(_OWORD *)long long v261 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)&v261[16] = *(_OWORD *)(v14 + 32);
        __n128 v228 = *(__n128 *)v14;
        unint64_t v122 = *v118;
        unint64_t v123 = v118[1];
        *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v118 + 28);
        *(__n128 *)unint64_t v14 = v122;
        *(__n128 *)(v14 + 16) = v123;
        *(__n128 *)((char *)v118 + 28) = *(__n128 *)&v261[12];
        *__n128 v118 = v228;
        v118[1] = *(__n128 *)v261;
        do
        {
          unint64_t v124 = *(void *)(v14 + 80);
          v14 += 48;
        }
        while (v60 >= v124);
        do
        {
          unint64_t v125 = v118[-1].n128_u64[0];
          v118 -= 3;
        }
        while (v60 < v125);
      }
      unint64_t v126 = (__n128 *)(v14 - 48);
      BOOL v5 = v14 - 48 >= a1;
      BOOL v6 = v14 - 48 == a1;
      if (v14 - 48 != a1)
      {
        unint64_t v127 = *v126;
        unint64_t v128 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v127;
        *(_OWORD *)(a1 + 16) = v128;
      }
      a4 = 0;
      uint64_t result = v277;
      *unint64_t v126 = v277;
      *(_OWORD *)(v14 - 32) = v280;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v121;
    }
    else
    {
      uint64_t v20 = (unint64_t *)(v14 + 32 + 48 * v17);
      unint64_t v21 = *v20;
      if (*v20 >= *(void *)(v14 + 32))
      {
        if (v19 < v21)
        {
          *(__n128 *)__n128 v241 = v18[1];
          *(__n128 *)&v241[16] = v18[2];
          long long v213 = *v18;
          __n128 v28 = *v11;
          long long v29 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v28;
          v18[1] = v29;
          *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v241[12];
          *uint64_t v11 = v213;
          a2[-2] = *(__n128 *)v241;
          if (*v20 < *(void *)(v14 + 32))
          {
            *(_OWORD *)__n128 v242 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v242[16] = *(_OWORD *)(v14 + 32);
            uint64_t v214 = *(__n128 *)v14;
            __n128 v30 = *v18;
            long long v31 = v18[1];
            *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
            *(__n128 *)unint64_t v14 = v30;
            *(__n128 *)(v14 + 16) = v31;
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v242[12];
            *unint64_t v18 = v214;
            v18[1] = *(__n128 *)v242;
          }
        }
      }
      else
      {
        if (v19 >= v21)
        {
          *(_OWORD *)long long v245 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v245[16] = *(_OWORD *)(v14 + 32);
          int v217 = *(__n128 *)v14;
          __n128 v36 = *v18;
          long long v37 = v18[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
          *(__n128 *)unint64_t v14 = v36;
          *(__n128 *)(v14 + 16) = v37;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v245[12];
          *unint64_t v18 = v217;
          v18[1] = *(__n128 *)v245;
          if (a2[-1].n128_u64[0] >= *v20) {
            goto LABEL_23;
          }
          *(__n128 *)__n128 v239 = v18[1];
          *(__n128 *)&v239[16] = v18[2];
          long long v211 = *v18;
          __n128 v38 = *v11;
          long long v39 = a2[-2];
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)a2 - 20);
          *unint64_t v18 = v38;
          v18[1] = v39;
        }
        else
        {
          *(_OWORD *)__n128 v239 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v239[16] = *(_OWORD *)(v14 + 32);
          long long v211 = *(__n128 *)v14;
          __n128 v22 = *v11;
          long long v23 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v22;
          *(__n128 *)(v14 + 16) = v23;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v239[12];
        *uint64_t v11 = v211;
        a2[-2] = *(__n128 *)v239;
      }
LABEL_23:
      int v40 = (__n128 *)(v14 + 48);
      unint64_t v41 = v14 + 48 * v17;
      unint64_t v44 = *(void *)(v41 - 16);
      uint64_t v42 = (_OWORD *)(v41 - 16);
      unint64_t v43 = v44;
      uint64_t v45 = (__n128 *)(v42 - 2);
      unint64_t v46 = a2[-4].n128_u64[0];
      if (v44 >= *(void *)(v14 + 80))
      {
        if (v46 < v43)
        {
          *(_OWORD *)__n128 v247 = *(v42 - 1);
          *(_OWORD *)&v247[16] = *v42;
          long long v218 = *v45;
          __n128 v51 = *v12;
          __n128 v52 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v51;
          *(v42 - 1) = v52;
          *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v247[12];
          *int v12 = v218;
          a2[-5] = *(__n128 *)v247;
          if (*(void *)v42 < *(void *)(v14 + 80))
          {
            *(_OWORD *)__n128 v248 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v248[16] = *(_OWORD *)(v14 + 80);
            long long v53 = *v40;
            uint64_t v55 = *v45;
            __n128 v54 = *(v42 - 1);
            *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
            *int v40 = v55;
            *(_OWORD *)(v14 + 64) = v54;
            *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v248[12];
            *uint64_t v45 = v53;
            *(v42 - 1) = *(_OWORD *)v248;
          }
        }
      }
      else
      {
        if (v46 >= v43)
        {
          *(_OWORD *)__n128 v250 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v250[16] = *(_OWORD *)(v14 + 80);
          long long v61 = *v40;
          __n128 v63 = *v45;
          unint64_t v62 = *(v42 - 1);
          *(_OWORD *)(v14 + 76) = *(_OWORD *)((char *)v42 - 4);
          *int v40 = v63;
          *(_OWORD *)(v14 + 64) = v62;
          *(_OWORD *)((char *)v42 - 4) = *(_OWORD *)&v250[12];
          *uint64_t v45 = v61;
          *(v42 - 1) = *(_OWORD *)v250;
          if (a2[-4].n128_u64[0] >= *(void *)v42) {
            goto LABEL_37;
          }
          *(_OWORD *)__n128 v246 = *(v42 - 1);
          *(_OWORD *)&v246[16] = *v42;
          uint64_t v220 = *v45;
          int v64 = *v12;
          long long v65 = a2[-5];
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&a2[-5] + 12);
          *uint64_t v45 = v64;
          *(v42 - 1) = v65;
          long long v48 = v220;
          __n128 v47 = *(__n128 *)v246;
        }
        else
        {
          __n128 v47 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v246[12] = v47.n128_u32[3];
          *(_OWORD *)&v246[16] = *(_OWORD *)(v14 + 80);
          long long v48 = *v40;
          long long v50 = *v12;
          uint64_t v49 = a2[-5];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 68);
          *int v40 = v50;
          *(__n128 *)(v14 + 64) = v49;
        }
        *(__n128 *)((char *)a2 - 68) = *(__n128 *)&v246[12];
        *int v12 = v48;
        a2[-5] = v47;
      }
LABEL_37:
      __n128 v66 = (__n128 *)(v14 + 96);
      __n128 v67 = v14 + 48 * v17;
      unint64_t v70 = *(void *)(v67 + 80);
      long long v68 = (__n128 *)(v67 + 80);
      unsigned int v69 = v70;
      int v71 = v68 - 2;
      unint64_t v72 = a2[-7].n128_u64[0];
      if (v70 >= *(void *)(v14 + 128))
      {
        if (v72 < v69)
        {
          *(__n128 *)long long v252 = v68[-1];
          *(__n128 *)&v252[16] = *v68;
          __n128 v221 = *v71;
          long long v77 = *v13;
          uint64_t v78 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v77;
          v68[-1] = v78;
          *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v252[12];
          *long long v13 = v221;
          a2[-8] = *(__n128 *)v252;
          if (v68->n128_u64[0] < *(void *)(v14 + 128))
          {
            *(_OWORD *)long long v253 = *(_OWORD *)(v14 + 112);
            *(_OWORD *)&v253[16] = *(_OWORD *)(v14 + 128);
            long long v79 = *v66;
            __n128 v81 = *v71;
            __n128 v80 = v68[-1];
            *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
            unsigned __int16 *v66 = v81;
            *(__n128 *)(v14 + 112) = v80;
            *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v253[12];
            *int v71 = v79;
            v68[-1] = *(__n128 *)v253;
          }
        }
      }
      else
      {
        if (v72 >= v69)
        {
          *(_OWORD *)long long v254 = *(_OWORD *)(v14 + 112);
          *(_OWORD *)&v254[16] = *(_OWORD *)(v14 + 128);
          long long v82 = *v66;
          uint64_t v84 = *v71;
          __n128 v83 = v68[-1];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)v68 - 4);
          unsigned __int16 *v66 = v84;
          *(__n128 *)(v14 + 112) = v83;
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v254[12];
          *int v71 = v82;
          v68[-1] = *(__n128 *)v254;
          if (a2[-7].n128_u64[0] >= v68->n128_u64[0]) {
            goto LABEL_46;
          }
          *(__n128 *)__n128 v251 = v68[-1];
          *(__n128 *)&v251[16] = *v68;
          long long v222 = *v71;
          long long v85 = *v13;
          __n128 v86 = a2[-8];
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)((char *)a2 - 116);
          *int v71 = v85;
          v68[-1] = v86;
          uint64_t v74 = v222;
          unint64_t v73 = *(__n128 *)v251;
        }
        else
        {
          unint64_t v73 = *(__n128 *)(v14 + 112);
          *(_DWORD *)&v251[12] = v73.n128_u32[3];
          *(_OWORD *)&v251[16] = *(_OWORD *)(v14 + 128);
          uint64_t v74 = *v66;
          __n128 v76 = *v13;
          unint64_t v75 = a2[-8];
          *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 116);
          unsigned __int16 *v66 = v76;
          *(__n128 *)(v14 + 112) = v75;
        }
        *(__n128 *)((char *)a2 - 116) = *(__n128 *)&v251[12];
        *long long v13 = v74;
        a2[-8] = v73;
      }
LABEL_46:
      __n128 v87 = *v20;
      int v88 = v68->n128_u64[0];
      if (*v20 >= *(void *)v42)
      {
        if (v88 < v87)
        {
          *(__n128 *)long long v256 = v18[1];
          *(__n128 *)&v256[16] = v18[2];
          __n128 v224 = *v18;
          __n128 v90 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v90;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
          *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v256[12];
          *int v71 = v224;
          v68[-1] = *(__n128 *)v256;
          if (*v20 < *(void *)v42)
          {
            *(_OWORD *)long long v257 = *(v42 - 1);
            *(_OWORD *)&v257[16] = *v42;
            __n128 v225 = *v45;
            __n128 v91 = v18[1];
            *uint64_t v45 = *v18;
            *(v42 - 1) = v91;
            *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
            *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v257[12];
            *unint64_t v18 = v225;
            v18[1] = *(__n128 *)v257;
          }
        }
      }
      else
      {
        if (v88 >= v87)
        {
          *(_OWORD *)long long v258 = *(v42 - 1);
          *(_OWORD *)&v258[16] = *v42;
          __n128 v226 = *v45;
          long long v92 = v18[1];
          *uint64_t v45 = *v18;
          *(v42 - 1) = v92;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v18[1] + 12);
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v258[12];
          *unint64_t v18 = v226;
          v18[1] = *(__n128 *)v258;
          if (v68->n128_u64[0] >= *v20) {
            goto LABEL_55;
          }
          *(__n128 *)long long v255 = v18[1];
          *(__n128 *)&v255[16] = v18[2];
          long long v223 = *v18;
          unint64_t v93 = v68[-1];
          *unint64_t v18 = *v71;
          v18[1] = v93;
          *(__n128 *)((char *)v18 + 28) = *(__n128 *)((char *)v68 - 4);
        }
        else
        {
          *(_OWORD *)long long v255 = *(v42 - 1);
          *(_OWORD *)&v255[16] = *v42;
          long long v223 = *v45;
          long long v89 = v68[-1];
          *uint64_t v45 = *v71;
          *(v42 - 1) = v89;
          *(__n128 *)((char *)v42 - 4) = *(__n128 *)((char *)&v68[-1] + 12);
        }
        *(__n128 *)((char *)v68 - 4) = *(__n128 *)&v255[12];
        *int v71 = v223;
        v68[-1] = *(__n128 *)v255;
      }
LABEL_55:
      *(_OWORD *)long long v259 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)&v259[16] = *(_OWORD *)(v14 + 32);
      __n128 v227 = *(__n128 *)v14;
      unint64_t v94 = *v18;
      long long v95 = v18[1];
      *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v18 + 28);
      *(__n128 *)unint64_t v14 = v94;
      *(__n128 *)(v14 + 16) = v95;
      *(__n128 *)((char *)v18 + 28) = *(__n128 *)&v259[12];
      *unint64_t v18 = v227;
      v18[1] = *(__n128 *)v259;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      __n128 v60 = *(void *)(v14 + 32);
LABEL_57:
      long long v276 = *(__n128 *)v14;
      long long v279 = *(_OWORD *)(v14 + 16);
      long long v96 = *(void *)(v14 + 40);
      long long v97 = v14;
      do
      {
        long long v98 = v97;
        v97 += 48;
      }
      while (*(void *)(v98 + 80) < v60);
      long long v99 = a2;
      if (v98 == v14)
      {
        uint64_t v102 = a2;
        while (v97 < (unint64_t)v102)
        {
          __n128 v100 = v102 - 3;
          unint64_t v103 = v102[-1].n128_u64[0];
          v102 -= 3;
          if (v103 < v60) {
            goto LABEL_66;
          }
        }
        __n128 v100 = v102;
      }
      else
      {
        do
        {
          __n128 v100 = v99 - 3;
          long long v101 = v99[-1].n128_u64[0];
          v99 -= 3;
        }
        while (v101 >= v60);
      }
LABEL_66:
      unint64_t v14 = v97;
      if (v97 < (unint64_t)v100)
      {
        unint64_t v104 = v100;
        do
        {
          *(_OWORD *)long long v260 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v260[16] = *(_OWORD *)(v14 + 32);
          unint64_t v105 = *(__n128 *)v14;
          unint64_t v107 = *v104;
          unint64_t v106 = v104[1];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v104 + 28);
          *(__n128 *)unint64_t v14 = v107;
          *(__n128 *)(v14 + 16) = v106;
          *(__n128 *)((char *)v104 + 28) = *(__n128 *)&v260[12];
          *unint64_t v104 = v105;
          v104[1] = *(__n128 *)v260;
          do
          {
            unint64_t v108 = *(void *)(v14 + 80);
            v14 += 48;
          }
          while (v108 < v60);
          do
          {
            unint64_t v109 = v104[-1].n128_u64[0];
            v104 -= 3;
          }
          while (v109 >= v60);
        }
        while (v14 < (unint64_t)v104);
      }
      unint64_t v110 = (__n128 *)(v14 - 48);
      if (v14 - 48 != a1)
      {
        __n128 v111 = *v110;
        uint64_t v112 = *(_OWORD *)(v14 - 32);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
        *(__n128 *)a1 = v111;
        *(_OWORD *)(a1 + 16) = v112;
      }
      *unint64_t v110 = v276;
      *(_OWORD *)(v14 - 32) = v279;
      *(void *)(v14 - 16) = v60;
      *(_DWORD *)(v14 - 8) = v96;
      if (v97 < (unint64_t)v100) {
        goto LABEL_77;
      }
      long long v113 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(a1, v14 - 48);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(v14, (uint64_t)a2))
      {
        a2 = (__n128 *)(v14 - 48);
        if (v113) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v113)
      {
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(a1, v14 - 48, a3, a4 & 1);
        a4 = 0;
      }
    }
  }
  switch(v16)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 32)) {
        return result;
      }
      goto LABEL_104;
    case 3:
      uint64_t v129 = (__n128 *)(v14 + 48);
      long long v130 = *(void *)(v14 + 80);
      long long v131 = a2[-1].n128_u64[0];
      if (v130 < *(void *)(v14 + 32))
      {
        if (v131 >= v130)
        {
          *(_OWORD *)long long v271 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v271[16] = *(_OWORD *)(v14 + 32);
          __n128 v236 = *(__n128 *)v14;
          long long v200 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v200;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v236;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v271;
          uint64_t result = *(__n128 *)&v271[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v271[12];
          if (a2[-1].n128_u64[0] >= *(void *)(v14 + 80)) {
            return result;
          }
          size_t v134 = *(__n128 *)(v14 + 64);
          *(_DWORD *)&v262[12] = v134.n128_u32[3];
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 80);
          uint64_t result = *v129;
          uint64_t v202 = *v11;
          long long v201 = a2[-2];
          *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
          *uint64_t v129 = v202;
          *(__n128 *)(v14 + 64) = v201;
        }
        else
        {
LABEL_104:
          *(_OWORD *)long long v262 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v262[16] = *(_OWORD *)(v14 + 32);
          __n128 v229 = *(__n128 *)v14;
          unint64_t v132 = *v11;
          unint64_t v133 = a2[-2];
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)a2 - 20);
          *(__n128 *)unint64_t v14 = v132;
          *(__n128 *)(v14 + 16) = v133;
          uint64_t result = v229;
          size_t v134 = *(__n128 *)v262;
        }
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v262[12];
        *uint64_t v11 = result;
        a2[-2] = v134;
        return result;
      }
      if (v131 < v130)
      {
        *(_OWORD *)long long v266 = *(_OWORD *)(v14 + 64);
        *(_OWORD *)&v266[16] = *(_OWORD *)(v14 + 80);
        uint64_t result = *v129;
        long long v170 = *v11;
        unint64_t v169 = a2[-2];
        *(__n128 *)(v14 + 76) = *(__n128 *)((char *)a2 - 20);
        *uint64_t v129 = v170;
        *(__n128 *)(v14 + 64) = v169;
        *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v266[12];
        *uint64_t v11 = result;
        a2[-2] = *(__n128 *)v266;
LABEL_181:
        if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
        {
          *(_OWORD *)long long v275 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v275[16] = *(_OWORD *)(v14 + 32);
          __n128 v238 = *(__n128 *)v14;
          uint64_t v210 = v129[1];
          *(__n128 *)unint64_t v14 = *v129;
          *(__n128 *)(v14 + 16) = v210;
          *(__n128 *)(v14 + 28) = *(__n128 *)((char *)v129 + 28);
          *uint64_t v129 = v238;
          v129[1] = *(__n128 *)v275;
          uint64_t result = *(__n128 *)&v275[12];
          *(__n128 *)((char *)v129 + 28) = *(__n128 *)&v275[12];
        }
      }
      break;
    case 4:
      uint64_t v129 = (__n128 *)(v14 + 48);
      __n128 v135 = (__n128 *)(v14 + 96);
      long long v136 = *(void *)(v14 + 80);
      unint64_t v137 = *(void *)(v14 + 128);
      if (v136 >= *(void *)(v14 + 32))
      {
        if (v137 < v136)
        {
          long long v171 = *v129;
          *(_OWORD *)long long v267 = *(_OWORD *)(v14 + 64);
          *(_OWORD *)&v267[16] = *(_OWORD *)(v14 + 80);
          uint64_t v172 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v172;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v171;
          *(_OWORD *)(v14 + 112) = *(_OWORD *)v267;
          uint64_t result = *(__n128 *)&v267[12];
          *(_OWORD *)(v14 + 124) = *(_OWORD *)&v267[12];
          if (*(void *)(v14 + 80) < *(void *)(v14 + 32))
          {
            *(_OWORD *)long long v268 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v268[16] = *(_OWORD *)(v14 + 32);
            __n128 v233 = *(__n128 *)v14;
            uint64_t v173 = *(_OWORD *)(v14 + 64);
            *(__n128 *)unint64_t v14 = *v129;
            *(_OWORD *)(v14 + 16) = v173;
            *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
            *uint64_t v129 = v233;
            *(_OWORD *)(v14 + 64) = *(_OWORD *)v268;
            uint64_t result = *(__n128 *)&v268[12];
            *(_OWORD *)(v14 + 76) = *(_OWORD *)&v268[12];
          }
        }
      }
      else
      {
        if (v137 >= v136)
        {
          *(_OWORD *)long long v272 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v272[16] = *(_OWORD *)(v14 + 32);
          __n128 v237 = *(__n128 *)v14;
          unint64_t v203 = *(_OWORD *)(v14 + 64);
          *(__n128 *)unint64_t v14 = *v129;
          *(_OWORD *)(v14 + 16) = v203;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
          *uint64_t v129 = v237;
          *(_OWORD *)(v14 + 64) = *(_OWORD *)v272;
          uint64_t result = *(__n128 *)&v272[12];
          *(_OWORD *)(v14 + 76) = *(_OWORD *)&v272[12];
          if (v137 >= *(void *)(v14 + 80)) {
            goto LABEL_178;
          }
          unint64_t v139 = *(_OWORD *)(v14 + 64);
          unint64_t v204 = *v129;
          *(_DWORD *)&v263[12] = HIDWORD(v139);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 80);
          int v205 = *(_OWORD *)(v14 + 112);
          *uint64_t v129 = *v135;
          *(_OWORD *)(v14 + 64) = v205;
          *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
          *__n128 v135 = v204;
        }
        else
        {
          *(_OWORD *)long long v263 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v263[16] = *(_OWORD *)(v14 + 32);
          __n128 v230 = *(__n128 *)v14;
          unint64_t v138 = *(_OWORD *)(v14 + 112);
          *(__n128 *)unint64_t v14 = *v135;
          *(_OWORD *)(v14 + 16) = v138;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 124);
          unint64_t v139 = *(_OWORD *)v263;
          *__n128 v135 = v230;
        }
        *(_OWORD *)(v14 + 112) = v139;
        uint64_t result = *(__n128 *)&v263[12];
        *(_OWORD *)(v14 + 124) = *(_OWORD *)&v263[12];
      }
LABEL_178:
      if (a2[-1].n128_u64[0] >= *(void *)(v14 + 128)) {
        return result;
      }
      *(_OWORD *)long long v273 = *(_OWORD *)(v14 + 112);
      *(_OWORD *)&v273[16] = *(_OWORD *)(v14 + 128);
      uint64_t result = *v135;
      __n128 v207 = *v11;
      unint64_t v206 = a2[-2];
      *(__n128 *)(v14 + 124) = *(__n128 *)((char *)a2 - 20);
      *__n128 v135 = v207;
      *(__n128 *)(v14 + 112) = v206;
      *(__n128 *)((char *)a2 - 20) = *(__n128 *)&v273[12];
      *uint64_t v11 = result;
      a2[-2] = *(__n128 *)v273;
      if (*(void *)(v14 + 128) >= *(void *)(v14 + 80)) {
        return result;
      }
      long long v208 = *v129;
      *(_OWORD *)long long v274 = *(_OWORD *)(v14 + 64);
      *(_OWORD *)&v274[16] = *(_OWORD *)(v14 + 80);
      long long v209 = *(_OWORD *)(v14 + 112);
      *uint64_t v129 = *v135;
      *(_OWORD *)(v14 + 64) = v209;
      *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
      *__n128 v135 = v208;
      *(_OWORD *)(v14 + 112) = *(_OWORD *)v274;
      uint64_t result = *(__n128 *)&v274[12];
      *(_OWORD *)(v14 + 124) = *(_OWORD *)&v274[12];
      goto LABEL_181;
    case 5:
      result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), (long long *)(v14 + 144), (long long *)&a2[-3]).n128_u64[0];
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}