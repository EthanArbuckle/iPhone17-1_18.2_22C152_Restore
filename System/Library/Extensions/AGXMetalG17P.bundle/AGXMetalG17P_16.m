void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  uint64_t v25;
  uint32x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  BOOL v47;
  int v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  BOOL v59;
  BOOL v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unsigned char *v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int64x2_t *v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  const double *v78;
  int64x2_t v79;
  int64x2_t *v80;
  uint64_t v81;
  int64x2_t *v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  const double *v88;
  int64x2_t v89;
  int64x2_t *v90;
  uint64_t v91;
  int64x2_t *v92;
  unsigned int v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  const double *v98;
  int64x2_t v99;
  int64x2_t *v100;
  uint64_t v101;
  int64x2_t *v102;
  unsigned int v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  const double *v108;
  int64x2_t v109;
  int64x2_t *v110;
  uint64_t v111;
  int64x2_t *v112;
  unsigned int v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  const double *v118;
  int64x2_t v119;
  int64x2_t *v120;
  uint64_t v121;
  int64x2_t *v122;
  unsigned int v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  const double *v128;
  int64x2_t v129;
  int64x2_t *v130;
  uint64_t v131;
  int64x2_t *v132;
  unsigned int v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void *v137;
  const double *v138;
  int64x2_t v139;
  int64x2_t *v140;
  uint64_t v141;
  int64x2_t *v142;
  unsigned int v143;
  unsigned int v144;
  void *v145;
  void *v146;
  void *v147;
  const double *v148;
  int64x2_t v149;
  int64x2_t *v150;
  const double *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  const double *v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  const double *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  const double *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  const double *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  const double *v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  const double *v175;
  uint64_t v176;
  unsigned int v177;
  const double *v178;
  unint64_t v179;
  unint64_t v180;
  __int8 *v181;
  unsigned int v182;
  uint64_t v183;
  __int8 *v184;
  unsigned int v185;
  uint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  BOOL v198;
  BOOL v199;
  int v200;
  unint64_t v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  BOOL v214;
  uint64_t v215;
  __int32 v216;
  unsigned int v217;
  BOOL isLevelTiled;
  int v219;
  uint64_t v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  void block[7];
  int64x2_t *v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  char v237;
  char v238;
  unsigned char __dst[512];
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  uint64_t v272;

  v16 = a1;
  v272 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  v225 = a8;
  v17 = a8 >> 3;
  v206 = a8 + a10 - 1;
  v208 = v206 >> 3;
  v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v20 = 0;
  }
  v21 = (v20 & 0xD00) == 0 || v20 == 768;
  v22 = v20 & 0xE00;
  v24 = !v21 && v22 != 1024;
  v219 = v24;
  isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v208)
  {
    v217 = a7 + a9 - 1;
    v205 = a7 >> 4;
    if (a7 >> 4 <= v217 >> 4)
    {
      v25 = a11;
      v202 = a5 - 1;
      v228 = (a5 - 1) >> 4;
      v227 = ((a5 - 1) & 0xF) + 1;
      v203 = ((a6 - 1) & 7) + 1;
      v204 = (a6 - 1) >> 3;
      v211 = 4 * a11;
      v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v29.i64[0] = 0x2000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      v216 = v30.i32[0] | v30.i32[1];
      v215 = v30.i64[0];
      v214 = v30.i32[0] != 0;
      v213 = v30.i32[1] != 0;
      v201 = 8 * v19 * (unint64_t)v18;
      v226 = v16;
      v209 = 3 * a11;
      v210 = 2 * a11;
      do
      {
        v31 = (8 * v17) | 7;
        if (8 * v17 <= v225) {
          v32 = v225;
        }
        else {
          v32 = 8 * v17;
        }
        v33 = v205;
        if (v206 < v31) {
          v31 = v206;
        }
        v224 = 8 * v17;
        v212 = v32 - 8 * v17;
        v223 = v31 - v32 + 1;
        v34 = v203;
        if (v17 != v204) {
          v34 = 8;
        }
        v229 = v34;
        v222 = a2 + (v32 - v225) * v25;
        do
        {
          v35 = 16 * v33;
          v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            v37 = a7;
          }
          else {
            v37 = 16 * v33;
          }
          if (v217 < v36) {
            v36 = v217;
          }
          v38 = v36 - v37 + 1;
          if (v33 == v228) {
            v39 = v227;
          }
          else {
            v39 = 16;
          }
          v40 = 1;
          if (v224 >= v225 && v35 >= a7)
          {
            v41 = v227;
            if (v33 != v228) {
              v41 = 16;
            }
            v40 = v38 != v41 || v223 != v229;
          }
          if (isLevelTiled)
          {
            v185 = 0;
            v186 = v201 >> (*(unsigned char *)(v16 + 57) != 0);
            v187 = 1;
            if (v186 > 127)
            {
              if (v186 > 511)
              {
                if (v186 == 512)
                {
                  v188 = 0;
                  v185 = 16;
                  v189 = 16;
                }
                else
                {
                  v188 = 1;
                  v189 = 0;
                  if (v186 == 1024)
                  {
                    v189 = 8;
                    v185 = 16;
                  }
                }
              }
              else if (v186 == 128)
              {
                v187 = 0;
                v188 = 0;
                v185 = 32;
                v189 = 32;
              }
              else
              {
                v188 = 1;
                v189 = 0;
                if (v186 == 256)
                {
                  v187 = 0;
                  v188 = 0;
                  v189 = 16;
                  v185 = 32;
                }
              }
            }
            else
            {
              v188 = 1;
              v189 = 0;
              switch(v186)
              {
                case 4:
                  v187 = 0;
                  v188 = 0;
                  v189 = 128;
                  v185 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  v187 = 0;
                  v188 = 0;
                  v185 = 128;
                  v189 = 128;
                  break;
                case 16:
                  v187 = 0;
                  v188 = 0;
                  v189 = 64;
                  v185 = 128;
                  break;
                case 32:
                  v187 = 0;
                  v188 = 0;
                  v185 = 64;
                  v189 = 64;
                  break;
                default:
                  if (v186 == 64)
                  {
                    v187 = 0;
                    v188 = 0;
                    v189 = 32;
                    v185 = 64;
                  }
                  break;
              }
            }
            v190 = (v185 >> 4) - 1;
            if (v187) {
              v191 = 0;
            }
            else {
              v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            v192 = (v189 >> 3) - 1;
            if (v188)
            {
              v193 = 0;
              if (v191) {
                goto LABEL_233;
              }
            }
            else
            {
              v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_233:
                v194 = 0;
                v195 = 0;
                v196 = v33 & v190;
                v197 = v17 & v192;
                v198 = v193 != 0;
                v199 = v191 != 0;
                v200 = 1;
                do
                {
                  --v193;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    v193 = 0;
                  }
                  --v191;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    v191 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  v199 = v191 != 0;
                  v198 = v193 != 0;
                }
                while (v191 | v193);
                goto LABEL_245;
              }
            }
            v195 = 0;
LABEL_245:
            v50 = ((unint64_t)(v35 / v185 + v224 / v189 * ((v185 + v202) / v185)) << 14) + (v195 << 9);
            goto LABEL_59;
          }
          if (v216)
          {
            v43 = 0;
            v44 = 0;
            v45 = 1;
            v46 = v214;
            v47 = v213;
            v48 = v215;
            v49 = HIDWORD(v215);
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                v49 = 0;
              }
              v45 *= 2;
              --v43;
              v47 = v49 != 0;
              v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            v44 = 0;
          }
          v50 = v44 << 9;
LABEL_59:
          v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            v51 = 1;
          }
          v52 = v51 + 15;
          if (v52 < 0x20) {
            v53 = 0;
          }
          else {
            v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            v54 = 1;
          }
          v55 = v54 + 7;
          if (v55 < 0x10) {
            v56 = 0;
          }
          else {
            v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          if (v56 | v53)
          {
            v57 = 0;
            v58 = 0;
            v59 = v53 != 0;
            v60 = v56 != 0;
            v61 = 1;
            do
            {
              --v53;
              v62 = !v59;
              if (v59)
              {
                v63 = ((unint64_t)(v61 & v33) << v57) | v58;
              }
              else
              {
                v53 = 0;
                v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                v56 = 0;
                v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              v60 = v56 != 0;
              v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            v58 = 0;
          }
          v64 = (unsigned char *)(a3 + v50);
          if (v219)
          {
            v65 = v38;
            memcpy(__dst, (const void *)(a3 + v50), sizeof(__dst));
            v38 = v65;
            v64 = __dst;
          }
          v66 = (unsigned __int8 *)(a4 + 8 * v58);
          v67 = a7;
          v68 = (int64x2_t *)(v222 + 4 * (v37 - a7));
          v69 = v39 < 0x10 || v40;
          if ((v69 & 1) != 0 || v229 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v226;
            block[5] = v64;
            v237 = v39;
            v238 = v229;
            v233 = v212;
            v234 = v37 - v35;
            block[6] = v66;
            v231 = v68;
            v25 = a11;
            v232 = a11;
            v235 = v223;
            v236 = v38;
            if (v40)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v226 + 8) + 7384), block);
              a7 = v67;
              v16 = v226;
LABEL_149:
              v144 = v33 + 1;
              goto LABEL_27;
            }
            v76 = *v66;
            a7 = v67;
            if (v76 == 63)
            {
              v28 = *((int64x2_t *)v64 + 1);
              v151 = (const double *)(v64 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v151);
              v30 = vzip2q_s64(*(int64x2_t *)v64, v28);
              v240 = vzip1q_s64(*(int64x2_t *)v64, v28);
              v244 = v30;
              v248 = v29;
              v252 = v27;
              v77 = 64;
            }
            else if (v76 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v64);
              v240 = v30;
              v244 = v30;
              v248 = v30;
              v252 = v30;
              v77 = 2;
            }
            else if (*v66)
            {
              v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v240, 64, (uint64_t)v64, v76, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v77 = 0;
              v240 = 0uLL;
              v244 = 0uLL;
              v248 = 0uLL;
              v252 = 0uLL;
            }
            v152 = (uint64_t)&v64[v77];
            v153 = v66[1];
            if (v153 == 63)
            {
              v28 = *(int64x2_t *)(v152 + 16);
              v155 = (const double *)(v152 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v155);
              v30 = vzip2q_s64(*(int64x2_t *)v152, v28);
              v241 = vzip1q_s64(*(int64x2_t *)v152, v28);
              v245 = v30;
              v249 = v29;
              v253 = v27;
              v154 = 64;
            }
            else if (v153 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v152);
              v241 = v30;
              v245 = v30;
              v249 = v30;
              v253 = v30;
              v154 = 2;
            }
            else if (v66[1])
            {
              v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 64, v152, v153, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v154 = 0;
              v241 = 0uLL;
              v245 = 0uLL;
              v249 = 0uLL;
              v253 = 0uLL;
            }
            v156 = v152 + v154;
            v157 = v66[2];
            if (v157 == 63)
            {
              v28 = *(int64x2_t *)(v156 + 16);
              v159 = (const double *)(v156 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v159);
              v30 = vzip2q_s64(*(int64x2_t *)v156, v28);
              v256 = vzip1q_s64(*(int64x2_t *)v156, v28);
              v260 = v30;
              v264 = v29;
              v268 = v27;
              v158 = 64;
            }
            else if (v157 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v156);
              v256 = v30;
              v260 = v30;
              v264 = v30;
              v268 = v30;
              v158 = 2;
            }
            else if (v66[2])
            {
              v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 64, v156, v157, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v158 = 0;
              v256 = 0uLL;
              v260 = 0uLL;
              v264 = 0uLL;
              v268 = 0uLL;
            }
            v160 = v156 + v158;
            v161 = v66[3];
            if (v161 == 63)
            {
              v28 = *(int64x2_t *)(v160 + 16);
              v163 = (const double *)(v160 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v163);
              v30 = vzip2q_s64(*(int64x2_t *)v160, v28);
              v257 = vzip1q_s64(*(int64x2_t *)v160, v28);
              v261 = v30;
              v265 = v29;
              v269 = v27;
              v162 = 64;
            }
            else if (v161 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v160);
              v257 = v30;
              v261 = v30;
              v265 = v30;
              v269 = v30;
              v162 = 2;
            }
            else if (v66[3])
            {
              v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v160, v161, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v162 = 0;
              v257 = 0uLL;
              v261 = 0uLL;
              v265 = 0uLL;
              v269 = 0uLL;
            }
            v164 = v160 + v162;
            v165 = v66[4];
            if (v165 == 63)
            {
              v28 = *(int64x2_t *)(v164 + 16);
              v167 = (const double *)(v164 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v167);
              v30 = vzip2q_s64(*(int64x2_t *)v164, v28);
              v242 = vzip1q_s64(*(int64x2_t *)v164, v28);
              v246 = v30;
              v250 = v29;
              v254 = v27;
              v166 = 64;
            }
            else if (v165 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v164);
              v242 = v30;
              v246 = v30;
              v250 = v30;
              v254 = v30;
              v166 = 2;
            }
            else if (v66[4])
            {
              v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 64, v164, v165, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v166 = 0;
              v242 = 0uLL;
              v246 = 0uLL;
              v250 = 0uLL;
              v254 = 0uLL;
            }
            v168 = v164 + v166;
            v169 = v66[5];
            if (v169 == 63)
            {
              v28 = *(int64x2_t *)(v168 + 16);
              v171 = (const double *)(v168 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v171);
              v30 = vzip2q_s64(*(int64x2_t *)v168, v28);
              v243 = vzip1q_s64(*(int64x2_t *)v168, v28);
              v247 = v30;
              v251 = v29;
              v255 = v27;
              v170 = 64;
            }
            else if (v169 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v168);
              v243 = v30;
              v247 = v30;
              v251 = v30;
              v255 = v30;
              v170 = 2;
            }
            else if (v66[5])
            {
              v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, v168, v169, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v170 = 0;
              v243 = 0uLL;
              v247 = 0uLL;
              v251 = 0uLL;
              v255 = 0uLL;
            }
            v172 = v168 + v170;
            v173 = v66[6];
            if (v173 == 63)
            {
              v28 = *(int64x2_t *)(v172 + 16);
              v175 = (const double *)(v172 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v175);
              v30 = vzip2q_s64(*(int64x2_t *)v172, v28);
              v258 = vzip1q_s64(*(int64x2_t *)v172, v28);
              v262 = v30;
              v266 = v29;
              v270 = v27;
              v174 = 64;
            }
            else if (v173 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v172);
              v258 = v30;
              v262 = v30;
              v266 = v30;
              v270 = v30;
              v174 = 2;
            }
            else if (v66[6])
            {
              v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, v172, v173, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v174 = 0;
              v258 = 0uLL;
              v262 = 0uLL;
              v266 = 0uLL;
              v270 = 0uLL;
            }
            v176 = v172 + v174;
            v177 = v66[7];
            if (v177 == 63)
            {
              v28 = *(int64x2_t *)(v176 + 16);
              v178 = (const double *)(v176 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v178);
              v30 = vzip2q_s64(*(int64x2_t *)v176, v28);
              v259 = vzip1q_s64(*(int64x2_t *)v176, v28);
              v263 = v30;
              v267 = v29;
              v271 = v27;
              v16 = v226;
              v144 = v33 + 1;
            }
            else
            {
              v16 = v226;
              v144 = v33 + 1;
              if (v177 == 1)
              {
                v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v176);
                v259 = v30;
                v263 = v30;
                v267 = v30;
                v271 = v30;
              }
              else if (v66[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v176, v177, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v259 = 0uLL;
                v263 = 0uLL;
                v267 = 0uLL;
                v271 = 0uLL;
              }
            }
            v179 = v235;
            if (v235)
            {
              v180 = 0;
              v181 = &v240.i8[64 * (unint64_t)v233 + 4 * v234];
              v182 = v236;
              do
              {
                if (v182)
                {
                  v183 = 0;
                  v184 = &v231->i8[v232 * v180];
                  do
                  {
                    v184[v183] = v181[v183];
                    ++v183;
                    v182 = v236;
                  }
                  while (4 * (unint64_t)v236 > v183);
                  v179 = v235;
                }
                ++v180;
                v181 += 64;
              }
              while (v180 < v179);
            }
          }
          else
          {
            v70 = *v66;
            if (v70 == 63)
            {
              v78 = (const double *)(v64 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v78);
              v79 = *(int64x2_t *)v64;
              v27 = *((int64x2_t *)v64 + 1);
              *v68 = vzip1q_s64(*(int64x2_t *)v64, v27);
              v29 = vzip2q_s64(v79, v27);
              v25 = a11;
              *(int64x2_t *)((char *)v68 + a11) = v29;
              v71 = 2 * a11;
              v80 = (int64x2_t *)((char *)v68 + v210);
              *v80 = v30;
              *(int64x2_t *)((char *)v80 + a11) = v28;
              v72 = 64;
            }
            else
            {
              v25 = a11;
              v71 = 2 * a11;
              if (v70 == 1)
              {
                v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v64);
                *v68 = v30;
                *(int64x2_t *)((char *)v68 + a11) = v30;
                *(int64x2_t *)((char *)v68 + 2 * a11) = v30;
                *(int64x2_t *)((char *)v68 + 3 * a11) = v30;
                v72 = 2;
              }
              else if (*v66)
              {
                v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v68, a11, (uint64_t)v64, v70, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v72 = 0;
                v68->i64[0] = 0;
                v68->i64[1] = 0;
                v73 = (uint64_t *)((char *)v68->i64 + a11);
                *v73 = 0;
                v73[1] = 0;
                v74 = (uint64_t *)((char *)v68->i64 + v210);
                *v74 = 0;
                v74[1] = 0;
                v75 = (uint64_t *)((char *)v68->i64 + v209);
                *v75 = 0;
                v75[1] = 0;
              }
            }
            v81 = (uint64_t)&v64[v72];
            v82 = v68 + 1;
            v83 = v66[1];
            if (v83 == 63)
            {
              v88 = (const double *)(v81 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v88);
              v89 = *(int64x2_t *)v81;
              v27 = *(int64x2_t *)(v81 + 16);
              *v82 = vzip1q_s64(*(int64x2_t *)v81, v27);
              v29 = vzip2q_s64(v89, v27);
              *(int64x2_t *)((char *)v82 + v25) = v29;
              v90 = (int64x2_t *)((char *)v82 + v71);
              *v90 = v30;
              *(int64x2_t *)((char *)v90 + v25) = v28;
              v84 = 64;
            }
            else if (v83 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v81);
              *v82 = v30;
              *(int64x2_t *)((char *)v82 + v25) = v30;
              *(int64x2_t *)((char *)v82 + v71) = v30;
              *(int64x2_t *)((char *)v82 + 3 * a11) = v30;
              v84 = 2;
            }
            else if (v66[1])
            {
              v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v84 = 0;
              v82->i64[0] = 0;
              v68[1].i64[1] = 0;
              v85 = (uint64_t *)((char *)v82->i64 + v25);
              *v85 = 0;
              v85[1] = 0;
              v86 = (uint64_t *)((char *)v82->i64 + v71);
              *v86 = 0;
              v86[1] = 0;
              v87 = (uint64_t *)((char *)v82->i64 + v209);
              *v87 = 0;
              v87[1] = 0;
            }
            v91 = v81 + v84;
            v92 = (int64x2_t *)((char *)v68 + v211);
            v93 = v66[2];
            if (v93 == 63)
            {
              v98 = (const double *)(v91 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v98);
              v99 = *(int64x2_t *)v91;
              v27 = *(int64x2_t *)(v91 + 16);
              *v92 = vzip1q_s64(*(int64x2_t *)v91, v27);
              v29 = vzip2q_s64(v99, v27);
              *(int64x2_t *)((char *)v92 + v25) = v29;
              v100 = (int64x2_t *)((char *)v92 + v71);
              *v100 = v30;
              *(int64x2_t *)((char *)v100 + v25) = v28;
              v94 = 64;
            }
            else if (v93 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v91);
              *v92 = v30;
              *(int64x2_t *)((char *)v92 + v25) = v30;
              *(int64x2_t *)((char *)v92 + v71) = v30;
              *(int64x2_t *)((char *)v92 + 3 * a11) = v30;
              v94 = 2;
            }
            else if (v66[2])
            {
              v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v68 + v211), v25, v91, v93, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v94 = 0;
              v92->i64[0] = 0;
              v92->i64[1] = 0;
              v95 = (uint64_t *)((char *)v92->i64 + v25);
              *v95 = 0;
              v95[1] = 0;
              v96 = (uint64_t *)((char *)v92->i64 + v71);
              *v96 = 0;
              v96[1] = 0;
              v97 = (uint64_t *)((char *)v92->i64 + v209);
              *v97 = 0;
              v97[1] = 0;
            }
            v101 = v91 + v94;
            v102 = v92 + 1;
            v103 = v66[3];
            if (v103 == 63)
            {
              v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v108);
              v109 = *(int64x2_t *)v101;
              v27 = *(int64x2_t *)(v101 + 16);
              *v102 = vzip1q_s64(*(int64x2_t *)v101, v27);
              v29 = vzip2q_s64(v109, v27);
              *(int64x2_t *)((char *)v102 + v25) = v29;
              v110 = (int64x2_t *)((char *)v102 + v71);
              *v110 = v30;
              *(int64x2_t *)((char *)v110 + v25) = v28;
              v104 = 64;
            }
            else if (v103 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              *v102 = v30;
              *(int64x2_t *)((char *)v102 + v25) = v30;
              *(int64x2_t *)((char *)v102 + v71) = v30;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v30;
              v104 = 2;
            }
            else if (v66[3])
            {
              v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v25, v101, v103, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v104 = 0;
              v102->i64[0] = 0;
              v92[1].i64[1] = 0;
              v105 = (uint64_t *)((char *)v102->i64 + v25);
              *v105 = 0;
              v105[1] = 0;
              v106 = (uint64_t *)((char *)v102->i64 + v71);
              *v106 = 0;
              v106[1] = 0;
              v107 = (uint64_t *)((char *)v102->i64 + v209);
              *v107 = 0;
              v107[1] = 0;
            }
            v111 = v101 + v104;
            v112 = v68 + 2;
            v113 = v66[4];
            if (v113 == 63)
            {
              v118 = (const double *)(v111 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v118);
              v119 = *(int64x2_t *)v111;
              v27 = *(int64x2_t *)(v111 + 16);
              *v112 = vzip1q_s64(*(int64x2_t *)v111, v27);
              v29 = vzip2q_s64(v119, v27);
              *(int64x2_t *)((char *)v112 + v25) = v29;
              v120 = (int64x2_t *)((char *)v112 + v71);
              *v120 = v30;
              *(int64x2_t *)((char *)v120 + v25) = v28;
              v114 = 64;
            }
            else if (v113 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v111);
              *v112 = v30;
              *(int64x2_t *)((char *)v112 + v25) = v30;
              *(int64x2_t *)((char *)v112 + v71) = v30;
              *(int64x2_t *)((char *)v112 + 3 * a11) = v30;
              v114 = 2;
            }
            else if (v66[4])
            {
              v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v112, v25, v111, v113, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v114 = 0;
              v112->i64[0] = 0;
              v68[2].i64[1] = 0;
              v115 = (uint64_t *)((char *)v112->i64 + v25);
              *v115 = 0;
              v115[1] = 0;
              v116 = (uint64_t *)((char *)v112->i64 + v71);
              *v116 = 0;
              v116[1] = 0;
              v117 = (uint64_t *)((char *)v112->i64 + v209);
              *v117 = 0;
              v117[1] = 0;
            }
            v121 = v111 + v114;
            v122 = v68 + 3;
            v123 = v66[5];
            if (v123 == 63)
            {
              v128 = (const double *)(v121 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v128);
              v129 = *(int64x2_t *)v121;
              v27 = *(int64x2_t *)(v121 + 16);
              *v122 = vzip1q_s64(*(int64x2_t *)v121, v27);
              v29 = vzip2q_s64(v129, v27);
              *(int64x2_t *)((char *)v122 + v25) = v29;
              v130 = (int64x2_t *)((char *)v122 + v71);
              *v130 = v30;
              *(int64x2_t *)((char *)v130 + v25) = v28;
              v124 = 64;
              a7 = v67;
            }
            else
            {
              a7 = v67;
              if (v123 == 1)
              {
                v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v121);
                *v122 = v30;
                *(int64x2_t *)((char *)v122 + v25) = v30;
                *(int64x2_t *)((char *)v122 + v71) = v30;
                *(int64x2_t *)((char *)v122 + 3 * a11) = v30;
                v124 = 2;
              }
              else if (v66[5])
              {
                v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v122, v25, v121, v123, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                v124 = 0;
                v122->i64[0] = 0;
                v122->i64[1] = 0;
                v125 = (uint64_t *)((char *)v122->i64 + v25);
                *v125 = 0;
                v125[1] = 0;
                v126 = (uint64_t *)((char *)v122->i64 + v71);
                *v126 = 0;
                v126[1] = 0;
                v127 = (uint64_t *)((char *)v122->i64 + v209);
                *v127 = 0;
                v127[1] = 0;
              }
            }
            v131 = v121 + v124;
            v132 = v92 + 2;
            v133 = v66[6];
            if (v133 == 63)
            {
              v138 = (const double *)(v131 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v138);
              v139 = *(int64x2_t *)v131;
              v27 = *(int64x2_t *)(v131 + 16);
              *v132 = vzip1q_s64(*(int64x2_t *)v131, v27);
              v29 = vzip2q_s64(v139, v27);
              *(int64x2_t *)((char *)v132 + v25) = v29;
              v140 = (int64x2_t *)((char *)v132 + v71);
              *v140 = v30;
              *(int64x2_t *)((char *)v140 + v25) = v28;
              v134 = 64;
            }
            else if (v133 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v131);
              *v132 = v30;
              *(int64x2_t *)((char *)v132 + v25) = v30;
              *(int64x2_t *)((char *)v132 + v71) = v30;
              *(int64x2_t *)((char *)v132 + 3 * a11) = v30;
              v134 = 2;
            }
            else if (v66[6])
            {
              v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v25, v131, v133, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v134 = 0;
              v132->i64[0] = 0;
              v92[2].i64[1] = 0;
              v135 = (uint64_t *)((char *)v132->i64 + v25);
              *v135 = 0;
              v135[1] = 0;
              v136 = (uint64_t *)((char *)v132->i64 + v71);
              *v136 = 0;
              v136[1] = 0;
              v137 = (uint64_t *)((char *)v132->i64 + v209);
              *v137 = 0;
              v137[1] = 0;
            }
            v141 = v131 + v134;
            v142 = v92 + 3;
            v143 = v66[7];
            if (v143 == 63)
            {
              v148 = (const double *)(v141 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v148);
              v149 = *(int64x2_t *)v141;
              v27 = *(int64x2_t *)(v141 + 16);
              *v142 = vzip1q_s64(*(int64x2_t *)v141, v27);
              v29 = vzip2q_s64(v149, v27);
              *(int64x2_t *)((char *)v142 + v25) = v29;
              v150 = (int64x2_t *)((char *)v142 + v71);
              *v150 = v30;
              *(int64x2_t *)((char *)v150 + v25) = v28;
              v16 = v226;
              goto LABEL_149;
            }
            v16 = v226;
            v144 = v33 + 1;
            if (v143 == 1)
            {
              v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v141);
              *v142 = v30;
              *(int64x2_t *)((char *)v142 + v25) = v30;
              *(int64x2_t *)((char *)v142 + v71) = v30;
              *(int64x2_t *)((char *)v142 + 3 * a11) = v30;
            }
            else if (v66[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v142->i64[0] = 0;
              v142->i64[1] = 0;
              v145 = (uint64_t *)((char *)v142->i64 + v25);
              *v145 = 0;
              v145[1] = 0;
              v146 = (uint64_t *)((char *)v142->i64 + v71);
              *v146 = 0;
              v146[1] = 0;
              v147 = (uint64_t *)((char *)v142->i64 + v209);
              *v147 = 0;
              v147[1] = 0;
            }
          }
LABEL_27:
          v21 = v33 == v217 >> 4;
          v33 = v144;
        }
        while (!v21);
        v21 = v17++ == v208;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v272 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v225 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v206 = a8 + a10 - 1;
  unsigned int v208 = v206 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v219 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v208)
  {
    unsigned int v217 = a7 + a9 - 1;
    unsigned int v205 = a7 >> 4;
    if (a7 >> 4 <= v217 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v202 = a5 - 1;
      unsigned int v228 = (a5 - 1) >> 4;
      int v227 = ((a5 - 1) & 0xF) + 1;
      int v203 = ((a6 - 1) & 7) + 1;
      unsigned int v204 = (a6 - 1) >> 3;
      uint64_t v211 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v27.i64[0] = 0x2000000020;
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v29.i64[0] = 0x2000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v216 = v30.i32[0] | v30.i32[1];
      uint64_t v215 = v30.i64[0];
      BOOL v214 = v30.i32[0] != 0;
      BOOL v213 = v30.i32[1] != 0;
      unint64_t v201 = 8 * v19 * (unint64_t)v18;
      uint64_t v226 = v16;
      uint64_t v209 = 3 * a11;
      uint64_t v210 = 2 * a11;
      do
      {
        unsigned int v31 = (8 * v17) | 7;
        if (8 * v17 <= v225) {
          int v32 = v225;
        }
        else {
          int v32 = 8 * v17;
        }
        unsigned int v33 = v205;
        if (v206 < v31) {
          unsigned int v31 = v206;
        }
        unsigned int v224 = 8 * v17;
        int v212 = v32 - 8 * v17;
        int v223 = v31 - v32 + 1;
        int v34 = v203;
        if (v17 != v204) {
          int v34 = 8;
        }
        unsigned int v229 = v34;
        uint64_t v222 = a2 + (v32 - v225) * v25;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v217 < v36) {
            unsigned int v36 = v217;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v228) {
            unsigned int v39 = v227;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v224 >= v225 && v35 >= a7)
          {
            int v41 = v227;
            if (v33 != v228) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v223 != v229;
          }
          if (isLevelTiled)
          {
            unsigned int v185 = 0;
            uint64_t v186 = v201 >> (*(unsigned char *)(v16 + 57) != 0);
            char v187 = 1;
            if (v186 > 127)
            {
              if (v186 > 511)
              {
                if (v186 == 512)
                {
                  char v188 = 0;
                  unsigned int v185 = 16;
                  unsigned int v189 = 16;
                }
                else
                {
                  char v188 = 1;
                  unsigned int v189 = 0;
                  if (v186 == 1024)
                  {
                    unsigned int v189 = 8;
                    unsigned int v185 = 16;
                  }
                }
              }
              else if (v186 == 128)
              {
                char v187 = 0;
                char v188 = 0;
                unsigned int v185 = 32;
                unsigned int v189 = 32;
              }
              else
              {
                char v188 = 1;
                unsigned int v189 = 0;
                if (v186 == 256)
                {
                  char v187 = 0;
                  char v188 = 0;
                  unsigned int v189 = 16;
                  unsigned int v185 = 32;
                }
              }
            }
            else
            {
              char v188 = 1;
              unsigned int v189 = 0;
              switch(v186)
              {
                case 4:
                  char v187 = 0;
                  char v188 = 0;
                  unsigned int v189 = 128;
                  unsigned int v185 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v187 = 0;
                  char v188 = 0;
                  unsigned int v185 = 128;
                  unsigned int v189 = 128;
                  break;
                case 16:
                  char v187 = 0;
                  char v188 = 0;
                  unsigned int v189 = 64;
                  unsigned int v185 = 128;
                  break;
                case 32:
                  char v187 = 0;
                  char v188 = 0;
                  unsigned int v185 = 64;
                  unsigned int v189 = 64;
                  break;
                default:
                  if (v186 == 64)
                  {
                    char v187 = 0;
                    char v188 = 0;
                    unsigned int v189 = 32;
                    unsigned int v185 = 64;
                  }
                  break;
              }
            }
            unsigned int v190 = (v185 >> 4) - 1;
            if (v187) {
              unsigned int v191 = 0;
            }
            else {
              unsigned int v191 = 32 - __clz(~(-1 << -(char)__clz(v190)));
            }
            unsigned int v192 = (v189 >> 3) - 1;
            if (v188)
            {
              unsigned int v193 = 0;
              if (v191) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v193 = 32 - __clz(~(-1 << -(char)__clz(v192)));
              if (v193 | v191)
              {
LABEL_233:
                int v194 = 0;
                uint64_t v195 = 0;
                int v196 = v33 & v190;
                int v197 = v17 & v192;
                BOOL v198 = v193 != 0;
                BOOL v199 = v191 != 0;
                int v200 = 1;
                do
                {
                  --v193;
                  if (v198) {
                    v195 |= (unint64_t)(v200 & v197) << v194++;
                  }
                  else {
                    unsigned int v193 = 0;
                  }
                  --v191;
                  if (v199) {
                    v195 |= (unint64_t)(v200 & v196) << v194++;
                  }
                  else {
                    unsigned int v191 = 0;
                  }
                  v200 *= 2;
                  --v194;
                  BOOL v199 = v191 != 0;
                  BOOL v198 = v193 != 0;
                }
                while (v191 | v193);
                goto LABEL_245;
              }
            }
            uint64_t v195 = 0;
LABEL_245:
            unint64_t v50 = ((unint64_t)(v35 / v185 + v224 / v189 * ((v185 + v202) / v185)) << 14) + (v195 << 9);
            goto LABEL_59;
          }
          if (v216)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v214;
            BOOL v47 = v213;
            int v48 = v215;
            int v49 = HIDWORD(v215);
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                int v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                int v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          if (v56 | v53)
          {
            int v57 = 0;
            unint64_t v58 = 0;
            BOOL v59 = v53 != 0;
            BOOL v60 = v56 != 0;
            int v61 = 1;
            do
            {
              --v53;
              BOOL v62 = !v59;
              if (v59)
              {
                unint64_t v63 = ((unint64_t)(v61 & v33) << v57) | v58;
              }
              else
              {
                unsigned int v53 = 0;
                unint64_t v63 = v58;
              }
              if (!v62) {
                ++v57;
              }
              --v56;
              if (v60)
              {
                unint64_t v58 = ((unint64_t)(v61 & v17) << v57) | v63;
              }
              else
              {
                unsigned int v56 = 0;
                unint64_t v58 = v63;
              }
              if (v60) {
                ++v57;
              }
              v61 *= 2;
              --v57;
              BOOL v60 = v56 != 0;
              BOOL v59 = v53 != 0;
            }
            while (v56 | v53);
          }
          else
          {
            unint64_t v58 = 0;
          }
          v64 = (unsigned char *)(a3 + v50);
          if (v219)
          {
            int v65 = v38;
            memcpy(__dst, (const void *)(a3 + v50), sizeof(__dst));
            int v38 = v65;
            v64 = __dst;
          }
          v66 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v67 = a7;
          v68 = (int64x2_t *)(v222 + 4 * (v37 - a7));
          char v69 = v39 < 0x10 || v40;
          if ((v69 & 1) != 0 || v229 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v226;
            block[5] = v64;
            char v237 = v39;
            char v238 = v229;
            unsigned int v233 = v212;
            unsigned int v234 = v37 - v35;
            block[6] = v66;
            v231 = v68;
            uint64_t v25 = a11;
            uint64_t v232 = a11;
            unsigned int v235 = v223;
            unsigned int v236 = v38;
            if (v40)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v226 + 8) + 7384), block);
              a7 = v67;
              uint64_t v16 = v226;
LABEL_149:
              unsigned int v144 = v33 + 1;
              goto LABEL_27;
            }
            unsigned int v76 = *v66;
            a7 = v67;
            if (v76 == 63)
            {
              int64x2_t v28 = *((int64x2_t *)v64 + 1);
              v151 = (const double *)(v64 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v151);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v64, v28);
              int64x2_t v240 = vzip1q_s64(*(int64x2_t *)v64, v28);
              int64x2_t v244 = v30;
              int64x2_t v248 = v29;
              int64x2_t v252 = v27;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v64);
              int64x2_t v240 = v30;
              int64x2_t v244 = v30;
              int64x2_t v248 = v30;
              int64x2_t v252 = v30;
              uint64_t v77 = 2;
            }
            else if (*v66)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v240, 64, (uint64_t)v64, v76, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v77 = 0;
              int64x2_t v240 = 0uLL;
              int64x2_t v244 = 0uLL;
              int64x2_t v248 = 0uLL;
              int64x2_t v252 = 0uLL;
            }
            uint64_t v152 = (uint64_t)&v64[v77];
            unsigned int v153 = v66[1];
            if (v153 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v152 + 16);
              v155 = (const double *)(v152 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v155);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v152, v28);
              int64x2_t v241 = vzip1q_s64(*(int64x2_t *)v152, v28);
              int64x2_t v245 = v30;
              int64x2_t v249 = v29;
              int64x2_t v253 = v27;
              uint64_t v154 = 64;
            }
            else if (v153 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v152);
              int64x2_t v241 = v30;
              int64x2_t v245 = v30;
              int64x2_t v249 = v30;
              int64x2_t v253 = v30;
              uint64_t v154 = 2;
            }
            else if (v66[1])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 64, v152, v153, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v154 = 0;
              int64x2_t v241 = 0uLL;
              int64x2_t v245 = 0uLL;
              int64x2_t v249 = 0uLL;
              int64x2_t v253 = 0uLL;
            }
            uint64_t v156 = v152 + v154;
            unsigned int v157 = v66[2];
            if (v157 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v156 + 16);
              v159 = (const double *)(v156 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v159);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v156, v28);
              int64x2_t v256 = vzip1q_s64(*(int64x2_t *)v156, v28);
              int64x2_t v260 = v30;
              int64x2_t v264 = v29;
              int64x2_t v268 = v27;
              uint64_t v158 = 64;
            }
            else if (v157 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v156);
              int64x2_t v256 = v30;
              int64x2_t v260 = v30;
              int64x2_t v264 = v30;
              int64x2_t v268 = v30;
              uint64_t v158 = 2;
            }
            else if (v66[2])
            {
              uint64_t v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 64, v156, v157, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v158 = 0;
              int64x2_t v256 = 0uLL;
              int64x2_t v260 = 0uLL;
              int64x2_t v264 = 0uLL;
              int64x2_t v268 = 0uLL;
            }
            uint64_t v160 = v156 + v158;
            unsigned int v161 = v66[3];
            if (v161 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v160 + 16);
              v163 = (const double *)(v160 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v163);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v160, v28);
              int64x2_t v257 = vzip1q_s64(*(int64x2_t *)v160, v28);
              int64x2_t v261 = v30;
              int64x2_t v265 = v29;
              int64x2_t v269 = v27;
              uint64_t v162 = 64;
            }
            else if (v161 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v160);
              int64x2_t v257 = v30;
              int64x2_t v261 = v30;
              int64x2_t v265 = v30;
              int64x2_t v269 = v30;
              uint64_t v162 = 2;
            }
            else if (v66[3])
            {
              uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v160, v161, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v162 = 0;
              int64x2_t v257 = 0uLL;
              int64x2_t v261 = 0uLL;
              int64x2_t v265 = 0uLL;
              int64x2_t v269 = 0uLL;
            }
            uint64_t v164 = v160 + v162;
            unsigned int v165 = v66[4];
            if (v165 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v164 + 16);
              v167 = (const double *)(v164 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v167);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v164, v28);
              int64x2_t v242 = vzip1q_s64(*(int64x2_t *)v164, v28);
              int64x2_t v246 = v30;
              int64x2_t v250 = v29;
              int64x2_t v254 = v27;
              uint64_t v166 = 64;
            }
            else if (v165 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v164);
              int64x2_t v242 = v30;
              int64x2_t v246 = v30;
              int64x2_t v250 = v30;
              int64x2_t v254 = v30;
              uint64_t v166 = 2;
            }
            else if (v66[4])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 64, v164, v165, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v166 = 0;
              int64x2_t v242 = 0uLL;
              int64x2_t v246 = 0uLL;
              int64x2_t v250 = 0uLL;
              int64x2_t v254 = 0uLL;
            }
            uint64_t v168 = v164 + v166;
            unsigned int v169 = v66[5];
            if (v169 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v168 + 16);
              v171 = (const double *)(v168 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v171);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v168, v28);
              int64x2_t v243 = vzip1q_s64(*(int64x2_t *)v168, v28);
              int64x2_t v247 = v30;
              int64x2_t v251 = v29;
              int64x2_t v255 = v27;
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v243 = v30;
              int64x2_t v247 = v30;
              int64x2_t v251 = v30;
              int64x2_t v255 = v30;
              uint64_t v170 = 2;
            }
            else if (v66[5])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, v168, v169, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v243 = 0uLL;
              int64x2_t v247 = 0uLL;
              int64x2_t v251 = 0uLL;
              int64x2_t v255 = 0uLL;
            }
            uint64_t v172 = v168 + v170;
            unsigned int v173 = v66[6];
            if (v173 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v172 + 16);
              v175 = (const double *)(v172 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v175);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v172, v28);
              int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v172, v28);
              int64x2_t v262 = v30;
              int64x2_t v266 = v29;
              int64x2_t v270 = v27;
              uint64_t v174 = 64;
            }
            else if (v173 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v172);
              int64x2_t v258 = v30;
              int64x2_t v262 = v30;
              int64x2_t v266 = v30;
              int64x2_t v270 = v30;
              uint64_t v174 = 2;
            }
            else if (v66[6])
            {
              uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, v172, v173, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v174 = 0;
              int64x2_t v258 = 0uLL;
              int64x2_t v262 = 0uLL;
              int64x2_t v266 = 0uLL;
              int64x2_t v270 = 0uLL;
            }
            uint64_t v176 = v172 + v174;
            unsigned int v177 = v66[7];
            if (v177 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v176 + 16);
              v178 = (const double *)(v176 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v178);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v176, v28);
              int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v176, v28);
              int64x2_t v263 = v30;
              int64x2_t v267 = v29;
              int64x2_t v271 = v27;
              uint64_t v16 = v226;
              unsigned int v144 = v33 + 1;
            }
            else
            {
              uint64_t v16 = v226;
              unsigned int v144 = v33 + 1;
              if (v177 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v176);
                int64x2_t v259 = v30;
                int64x2_t v263 = v30;
                int64x2_t v267 = v30;
                int64x2_t v271 = v30;
              }
              else if (v66[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v176, v177, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                int64x2_t v259 = 0uLL;
                int64x2_t v263 = 0uLL;
                int64x2_t v267 = 0uLL;
                int64x2_t v271 = 0uLL;
              }
            }
            unint64_t v179 = v235;
            if (v235)
            {
              unint64_t v180 = 0;
              v181 = &v240.i8[64 * (unint64_t)v233 + 4 * v234];
              unsigned int v182 = v236;
              do
              {
                if (v182)
                {
                  uint64_t v183 = 0;
                  v184 = &v231->i8[v232 * v180];
                  do
                  {
                    v184[v183] = v181[v183];
                    ++v183;
                    unsigned int v182 = v236;
                  }
                  while (4 * (unint64_t)v236 > v183);
                  unint64_t v179 = v235;
                }
                ++v180;
                v181 += 64;
              }
              while (v180 < v179);
            }
          }
          else
          {
            unsigned int v70 = *v66;
            if (v70 == 63)
            {
              v78 = (const double *)(v64 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v78);
              int64x2_t v79 = *(int64x2_t *)v64;
              int64x2_t v27 = *((int64x2_t *)v64 + 1);
              int64x2_t *v68 = vzip1q_s64(*(int64x2_t *)v64, v27);
              int64x2_t v29 = vzip2q_s64(v79, v27);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v68 + a11) = v29;
              uint64_t v71 = 2 * a11;
              v80 = (int64x2_t *)((char *)v68 + v210);
              int64x2_t *v80 = v30;
              *(int64x2_t *)((char *)v80 + a11) = v28;
              uint64_t v72 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v71 = 2 * a11;
              if (v70 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v64);
                int64x2_t *v68 = v30;
                *(int64x2_t *)((char *)v68 + a11) = v30;
                *(int64x2_t *)((char *)v68 + 2 * a11) = v30;
                *(int64x2_t *)((char *)v68 + 3 * a11) = v30;
                uint64_t v72 = 2;
              }
              else if (*v66)
              {
                uint64_t v72 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v68, a11, (uint64_t)v64, v70, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v72 = 0;
                v68->i64[0] = 0;
                v68->i64[1] = 0;
                v73 = (uint64_t *)((char *)v68->i64 + a11);
                void *v73 = 0;
                v73[1] = 0;
                v74 = (uint64_t *)((char *)v68->i64 + v210);
                void *v74 = 0;
                v74[1] = 0;
                v75 = (uint64_t *)((char *)v68->i64 + v209);
                void *v75 = 0;
                v75[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v64[v72];
            v82 = v68 + 1;
            unsigned int v83 = v66[1];
            if (v83 == 63)
            {
              v88 = (const double *)(v81 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v88);
              int64x2_t v89 = *(int64x2_t *)v81;
              int64x2_t v27 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v27);
              int64x2_t v29 = vzip2q_s64(v89, v27);
              *(int64x2_t *)((char *)v82 + v25) = v29;
              v90 = (int64x2_t *)((char *)v82 + v71);
              int64x2_t *v90 = v30;
              *(int64x2_t *)((char *)v90 + v25) = v28;
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = v30;
              *(int64x2_t *)((char *)v82 + v25) = v30;
              *(int64x2_t *)((char *)v82 + v71) = v30;
              *(int64x2_t *)((char *)v82 + 3 * a11) = v30;
              uint64_t v84 = 2;
            }
            else if (v66[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v68[1].i64[1] = 0;
              v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              v86 = (uint64_t *)((char *)v82->i64 + v71);
              void *v86 = 0;
              v86[1] = 0;
              v87 = (uint64_t *)((char *)v82->i64 + v209);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v91 = v81 + v84;
            v92 = (int64x2_t *)((char *)v68 + v211);
            unsigned int v93 = v66[2];
            if (v93 == 63)
            {
              v98 = (const double *)(v91 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v98);
              int64x2_t v99 = *(int64x2_t *)v91;
              int64x2_t v27 = *(int64x2_t *)(v91 + 16);
              int64x2_t *v92 = vzip1q_s64(*(int64x2_t *)v91, v27);
              int64x2_t v29 = vzip2q_s64(v99, v27);
              *(int64x2_t *)((char *)v92 + v25) = v29;
              v100 = (int64x2_t *)((char *)v92 + v71);
              int64x2_t *v100 = v30;
              *(int64x2_t *)((char *)v100 + v25) = v28;
              uint64_t v94 = 64;
            }
            else if (v93 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v91);
              int64x2_t *v92 = v30;
              *(int64x2_t *)((char *)v92 + v25) = v30;
              *(int64x2_t *)((char *)v92 + v71) = v30;
              *(int64x2_t *)((char *)v92 + 3 * a11) = v30;
              uint64_t v94 = 2;
            }
            else if (v66[2])
            {
              uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v68 + v211), v25, v91, v93, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v94 = 0;
              v92->i64[0] = 0;
              v92->i64[1] = 0;
              v95 = (uint64_t *)((char *)v92->i64 + v25);
              void *v95 = 0;
              v95[1] = 0;
              v96 = (uint64_t *)((char *)v92->i64 + v71);
              void *v96 = 0;
              v96[1] = 0;
              v97 = (uint64_t *)((char *)v92->i64 + v209);
              void *v97 = 0;
              v97[1] = 0;
            }
            uint64_t v101 = v91 + v94;
            v102 = v92 + 1;
            unsigned int v103 = v66[3];
            if (v103 == 63)
            {
              v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v101;
              int64x2_t v27 = *(int64x2_t *)(v101 + 16);
              int64x2_t *v102 = vzip1q_s64(*(int64x2_t *)v101, v27);
              int64x2_t v29 = vzip2q_s64(v109, v27);
              *(int64x2_t *)((char *)v102 + v25) = v29;
              v110 = (int64x2_t *)((char *)v102 + v71);
              int64x2_t *v110 = v30;
              *(int64x2_t *)((char *)v110 + v25) = v28;
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              int64x2_t *v102 = v30;
              *(int64x2_t *)((char *)v102 + v25) = v30;
              *(int64x2_t *)((char *)v102 + v71) = v30;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v30;
              uint64_t v104 = 2;
            }
            else if (v66[3])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v25, v101, v103, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v92[1].i64[1] = 0;
              v105 = (uint64_t *)((char *)v102->i64 + v25);
              void *v105 = 0;
              v105[1] = 0;
              v106 = (uint64_t *)((char *)v102->i64 + v71);
              void *v106 = 0;
              v106[1] = 0;
              v107 = (uint64_t *)((char *)v102->i64 + v209);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v111 = v101 + v104;
            v112 = v68 + 2;
            unsigned int v113 = v66[4];
            if (v113 == 63)
            {
              v118 = (const double *)(v111 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v118);
              int64x2_t v119 = *(int64x2_t *)v111;
              int64x2_t v27 = *(int64x2_t *)(v111 + 16);
              int64x2_t *v112 = vzip1q_s64(*(int64x2_t *)v111, v27);
              int64x2_t v29 = vzip2q_s64(v119, v27);
              *(int64x2_t *)((char *)v112 + v25) = v29;
              v120 = (int64x2_t *)((char *)v112 + v71);
              int64x2_t *v120 = v30;
              *(int64x2_t *)((char *)v120 + v25) = v28;
              uint64_t v114 = 64;
            }
            else if (v113 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v111);
              int64x2_t *v112 = v30;
              *(int64x2_t *)((char *)v112 + v25) = v30;
              *(int64x2_t *)((char *)v112 + v71) = v30;
              *(int64x2_t *)((char *)v112 + 3 * a11) = v30;
              uint64_t v114 = 2;
            }
            else if (v66[4])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v112, v25, v111, v113, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v114 = 0;
              v112->i64[0] = 0;
              v68[2].i64[1] = 0;
              v115 = (uint64_t *)((char *)v112->i64 + v25);
              void *v115 = 0;
              v115[1] = 0;
              v116 = (uint64_t *)((char *)v112->i64 + v71);
              void *v116 = 0;
              v116[1] = 0;
              v117 = (uint64_t *)((char *)v112->i64 + v209);
              void *v117 = 0;
              v117[1] = 0;
            }
            uint64_t v121 = v111 + v114;
            v122 = v68 + 3;
            unsigned int v123 = v66[5];
            if (v123 == 63)
            {
              v128 = (const double *)(v121 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v128);
              int64x2_t v129 = *(int64x2_t *)v121;
              int64x2_t v27 = *(int64x2_t *)(v121 + 16);
              int64x2_t *v122 = vzip1q_s64(*(int64x2_t *)v121, v27);
              int64x2_t v29 = vzip2q_s64(v129, v27);
              *(int64x2_t *)((char *)v122 + v25) = v29;
              v130 = (int64x2_t *)((char *)v122 + v71);
              int64x2_t *v130 = v30;
              *(int64x2_t *)((char *)v130 + v25) = v28;
              uint64_t v124 = 64;
              a7 = v67;
            }
            else
            {
              a7 = v67;
              if (v123 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v121);
                int64x2_t *v122 = v30;
                *(int64x2_t *)((char *)v122 + v25) = v30;
                *(int64x2_t *)((char *)v122 + v71) = v30;
                *(int64x2_t *)((char *)v122 + 3 * a11) = v30;
                uint64_t v124 = 2;
              }
              else if (v66[5])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v122, v25, v121, v123, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
              }
              else
              {
                uint64_t v124 = 0;
                v122->i64[0] = 0;
                v122->i64[1] = 0;
                v125 = (uint64_t *)((char *)v122->i64 + v25);
                void *v125 = 0;
                v125[1] = 0;
                v126 = (uint64_t *)((char *)v122->i64 + v71);
                void *v126 = 0;
                v126[1] = 0;
                v127 = (uint64_t *)((char *)v122->i64 + v209);
                void *v127 = 0;
                v127[1] = 0;
              }
            }
            uint64_t v131 = v121 + v124;
            v132 = v92 + 2;
            unsigned int v133 = v66[6];
            if (v133 == 63)
            {
              v138 = (const double *)(v131 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v138);
              int64x2_t v139 = *(int64x2_t *)v131;
              int64x2_t v27 = *(int64x2_t *)(v131 + 16);
              int64x2_t *v132 = vzip1q_s64(*(int64x2_t *)v131, v27);
              int64x2_t v29 = vzip2q_s64(v139, v27);
              *(int64x2_t *)((char *)v132 + v25) = v29;
              v140 = (int64x2_t *)((char *)v132 + v71);
              int64x2_t *v140 = v30;
              *(int64x2_t *)((char *)v140 + v25) = v28;
              uint64_t v134 = 64;
            }
            else if (v133 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v131);
              int64x2_t *v132 = v30;
              *(int64x2_t *)((char *)v132 + v25) = v30;
              *(int64x2_t *)((char *)v132 + v71) = v30;
              *(int64x2_t *)((char *)v132 + 3 * a11) = v30;
              uint64_t v134 = 2;
            }
            else if (v66[6])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v25, v131, v133, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              uint64_t v134 = 0;
              v132->i64[0] = 0;
              v92[2].i64[1] = 0;
              v135 = (uint64_t *)((char *)v132->i64 + v25);
              void *v135 = 0;
              v135[1] = 0;
              v136 = (uint64_t *)((char *)v132->i64 + v71);
              void *v136 = 0;
              v136[1] = 0;
              v137 = (uint64_t *)((char *)v132->i64 + v209);
              void *v137 = 0;
              v137[1] = 0;
            }
            uint64_t v141 = v131 + v134;
            v142 = v92 + 3;
            unsigned int v143 = v66[7];
            if (v143 == 63)
            {
              v148 = (const double *)(v141 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v148);
              int64x2_t v149 = *(int64x2_t *)v141;
              int64x2_t v27 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v27);
              int64x2_t v29 = vzip2q_s64(v149, v27);
              *(int64x2_t *)((char *)v142 + v25) = v29;
              v150 = (int64x2_t *)((char *)v142 + v71);
              int64x2_t *v150 = v30;
              *(int64x2_t *)((char *)v150 + v25) = v28;
              uint64_t v16 = v226;
              goto LABEL_149;
            }
            uint64_t v16 = v226;
            unsigned int v144 = v33 + 1;
            if (v143 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = v30;
              *(int64x2_t *)((char *)v142 + v25) = v30;
              *(int64x2_t *)((char *)v142 + v71) = v30;
              *(int64x2_t *)((char *)v142 + 3 * a11) = v30;
            }
            else if (v66[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143, *(double *)v30.i64, *(double *)v28.i64, *(double *)v29.i64, *(int8x8_t *)v27.i8);
            }
            else
            {
              v142->i64[0] = 0;
              v142->i64[1] = 0;
              v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              v146 = (uint64_t *)((char *)v142->i64 + v71);
              void *v146 = 0;
              v146[1] = 0;
              v147 = (uint64_t *)((char *)v142->i64 + v209);
              void *v147 = 0;
              v147[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v33 == v217 >> 4;
          unsigned int v33 = v144;
        }
        while (!v21);
        BOOL v21 = v17++ == v208;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            v78 = __dst;
          }
          v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              uint64_t v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *uint64_t v104 = v103;
              v104[1] = v101;
              v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                int64x2_t v89 = (_OWORD *)(v83 + v351);
                *int64x2_t v89 = 0u;
                v89[1] = 0u;
                v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            v108 = (int32x4_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int32x4_t *v108 = *(int32x4_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              v125 = &v108->i8[v86];
              v126 = &v108->i8[v32];
              *(_OWORD *)v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              v127 = &v108->i8[v86 + v32];
              *(_OWORD *)v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int32x4_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              uint64_t v111 = &v108->i8[v32];
              *(_OWORD *)uint64_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              v112 = &v108->i8[v86];
              *(_OWORD *)v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              unsigned int v113 = &v108->i8[v350];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            int64x2_t v129 = (int32x4_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int32x4_t v140 = *(int32x4_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *int64x2_t v129 = *(int32x4_t *)v128;
              v129[1] = v140;
              v146 = &v129->i8[v86];
              v147 = &v129->i8[v32];
              *(_OWORD *)v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              v148 = &v129->i8[v86 + v32];
              *(_OWORD *)v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *int64x2_t v129 = (int32x4_t)v135;
              v129[1] = (int32x4_t)v135;
              v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *int64x2_t v129 = 0u;
              v129[1] = 0u;
              v132 = &v129->i8[v32];
              *(_OWORD *)v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              unsigned int v133 = &v129->i8[v86];
              *(_OWORD *)unsigned int v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              uint64_t v134 = &v129->i8[v350];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int32x4_t v161 = *(int32x4_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int32x4_t *v150 = *(int32x4_t *)v149;
              v129[3] = v161;
              v167 = &v150->i8[v86];
              uint64_t v168 = &v150->i8[v32];
              *(_OWORD *)uint64_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int32x4_t)v156;
              v129[3] = (int32x4_t)v156;
              unsigned int v157 = (float32x4_t *)&v150->i8[v32];
              *unsigned int v157 = v156;
              v157[1] = v156;
              uint64_t v158 = (float32x4_t *)&v150->i8[v86];
              *uint64_t v158 = v156;
              v158[1] = v156;
              v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int32x4_t *v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v150->i8[v350];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            v171 = (int32x4_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int32x4_t *v171 = *(int32x4_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              char v188 = &v171->i8[v86];
              unsigned int v189 = &v171->i8[v32];
              *(_OWORD *)unsigned int v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)char v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              unint64_t v179 = (float32x4_t *)&v171->i8[v86];
              *unint64_t v179 = v177;
              v179[1] = v177;
              unint64_t v180 = (float32x4_t *)&v171->i8[v350];
              *unint64_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int32x4_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              uint64_t v174 = &v171->i8[v32];
              *(_OWORD *)uint64_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              v175 = &v171->i8[v86];
              *(_OWORD *)v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              uint64_t v176 = &v171->i8[v350];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            unsigned int v192 = (int32x4_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *unsigned int v192 = *(int32x4_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              uint64_t v209 = &v192->i8[v86];
              uint64_t v210 = &v192->i8[v32];
              *(_OWORD *)uint64_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)uint64_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              uint64_t v211 = &v192->i8[v86 + v32];
              *(_OWORD *)uint64_t v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              BOOL v199 = (float32x4_t *)&v192->i8[v32];
              *BOOL v199 = v198;
              v199[1] = v198;
              int v200 = (float32x4_t *)&v192->i8[v86];
              *int v200 = v198;
              v200[1] = v198;
              unint64_t v201 = (float32x4_t *)&v192->i8[v350];
              *unint64_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *unsigned int v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              uint64_t v195 = &v192->i8[v32];
              *(_OWORD *)uint64_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              int v196 = &v192->i8[v86];
              *(_OWORD *)int v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              int v197 = &v192->i8[v350];
              *(_OWORD *)int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            BOOL v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int32x4_t v224 = *(int32x4_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *BOOL v213 = *(int32x4_t *)v212;
              v129[5] = v224;
              v230 = &v213->i8[v86];
              v231 = &v213->i8[v32];
              *(_OWORD *)v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)uint64_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int32x4_t)v219;
              v129[5] = (int32x4_t)v219;
              v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              uint64_t v222 = (float32x4_t *)&v213->i8[v350];
              *uint64_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *BOOL v213 = 0u;
              v129[5] = 0u;
              __int32 v216 = &v213->i8[v32];
              *(_OWORD *)__int32 v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unsigned int v217 = &v213->i8[v86];
              *(_OWORD *)unsigned int v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              v218 = &v213->i8[v350];
              *(_OWORD *)v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            unsigned int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int32x4_t v241 = *(int32x4_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *unsigned int v234 = *(int32x4_t *)v233;
              v129[7] = v241;
              int64x2_t v247 = &v234->i8[v86];
              int64x2_t v248 = &v234->i8[v32];
              *(_OWORD *)int64x2_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)int64x2_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int64x2_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int64x2_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int32x4_t)v236;
                v129[7] = (int32x4_t)v236;
LABEL_182:
                char v237 = (float32x4_t *)&v234->i8[v32];
                *char v237 = v236;
                v237[1] = v236;
                char v238 = (float32x4_t *)&v234->i8[v86];
                *char v238 = v236;
                v238[1] = v236;
                v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *unsigned int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int32x4_t v379 = *(int32x4_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int32x4_t v379 = (int32x4_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int32x4_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int32x4_t v381 = *(int32x4_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int32x4_t v381 = (int32x4_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int32x4_t v411 = *(int32x4_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int32x4_t v411 = (int32x4_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int32x4_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int32x4_t v413 = *(int32x4_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int32x4_t v413 = (int32x4_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int32x4_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int32x4_t v383 = *(int32x4_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int32x4_t v383 = (int32x4_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int32x4_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int32x4_t v385 = *(int32x4_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int32x4_t v385 = (int32x4_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int32x4_t v415 = *(int32x4_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int32x4_t v415 = (int32x4_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int32x4_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int32x4_t v417 = *(int32x4_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int32x4_t v417 = (int32x4_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int32x4_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            v78 = __dst;
          }
          v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              uint64_t v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *uint64_t v104 = v103;
              v104[1] = v101;
              v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                int64x2_t v89 = (_OWORD *)(v83 + v351);
                *int64x2_t v89 = 0u;
                v89[1] = 0u;
                v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            v108 = (int32x4_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int32x4_t *v108 = *(int32x4_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              v125 = &v108->i8[v86];
              v126 = &v108->i8[v32];
              *(_OWORD *)v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              v127 = &v108->i8[v86 + v32];
              *(_OWORD *)v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int32x4_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              uint64_t v111 = &v108->i8[v32];
              *(_OWORD *)uint64_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              v112 = &v108->i8[v86];
              *(_OWORD *)v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              unsigned int v113 = &v108->i8[v350];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            int64x2_t v129 = (int32x4_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int32x4_t v140 = *(int32x4_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *int64x2_t v129 = *(int32x4_t *)v128;
              v129[1] = v140;
              v146 = &v129->i8[v86];
              v147 = &v129->i8[v32];
              *(_OWORD *)v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              v148 = &v129->i8[v86 + v32];
              *(_OWORD *)v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *int64x2_t v129 = (int32x4_t)v135;
              v129[1] = (int32x4_t)v135;
              v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *int64x2_t v129 = 0u;
              v129[1] = 0u;
              v132 = &v129->i8[v32];
              *(_OWORD *)v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              unsigned int v133 = &v129->i8[v86];
              *(_OWORD *)unsigned int v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              uint64_t v134 = &v129->i8[v350];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int32x4_t v161 = *(int32x4_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int32x4_t *v150 = *(int32x4_t *)v149;
              v129[3] = v161;
              v167 = &v150->i8[v86];
              uint64_t v168 = &v150->i8[v32];
              *(_OWORD *)uint64_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int32x4_t)v156;
              v129[3] = (int32x4_t)v156;
              unsigned int v157 = (float32x4_t *)&v150->i8[v32];
              *unsigned int v157 = v156;
              v157[1] = v156;
              uint64_t v158 = (float32x4_t *)&v150->i8[v86];
              *uint64_t v158 = v156;
              v158[1] = v156;
              v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int32x4_t *v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v150->i8[v350];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            v171 = (int32x4_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int32x4_t *v171 = *(int32x4_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              char v188 = &v171->i8[v86];
              unsigned int v189 = &v171->i8[v32];
              *(_OWORD *)unsigned int v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)char v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              unint64_t v179 = (float32x4_t *)&v171->i8[v86];
              *unint64_t v179 = v177;
              v179[1] = v177;
              unint64_t v180 = (float32x4_t *)&v171->i8[v350];
              *unint64_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int32x4_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              uint64_t v174 = &v171->i8[v32];
              *(_OWORD *)uint64_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              v175 = &v171->i8[v86];
              *(_OWORD *)v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              uint64_t v176 = &v171->i8[v350];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            unsigned int v192 = (int32x4_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *unsigned int v192 = *(int32x4_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              uint64_t v209 = &v192->i8[v86];
              uint64_t v210 = &v192->i8[v32];
              *(_OWORD *)uint64_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)uint64_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              uint64_t v211 = &v192->i8[v86 + v32];
              *(_OWORD *)uint64_t v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              BOOL v199 = (float32x4_t *)&v192->i8[v32];
              *BOOL v199 = v198;
              v199[1] = v198;
              int v200 = (float32x4_t *)&v192->i8[v86];
              *int v200 = v198;
              v200[1] = v198;
              unint64_t v201 = (float32x4_t *)&v192->i8[v350];
              *unint64_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *unsigned int v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              uint64_t v195 = &v192->i8[v32];
              *(_OWORD *)uint64_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              int v196 = &v192->i8[v86];
              *(_OWORD *)int v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              int v197 = &v192->i8[v350];
              *(_OWORD *)int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            BOOL v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int32x4_t v224 = *(int32x4_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *BOOL v213 = *(int32x4_t *)v212;
              v129[5] = v224;
              v230 = &v213->i8[v86];
              v231 = &v213->i8[v32];
              *(_OWORD *)v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)uint64_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int32x4_t)v219;
              v129[5] = (int32x4_t)v219;
              v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              uint64_t v222 = (float32x4_t *)&v213->i8[v350];
              *uint64_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *BOOL v213 = 0u;
              v129[5] = 0u;
              __int32 v216 = &v213->i8[v32];
              *(_OWORD *)__int32 v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unsigned int v217 = &v213->i8[v86];
              *(_OWORD *)unsigned int v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              v218 = &v213->i8[v350];
              *(_OWORD *)v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            unsigned int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int32x4_t v241 = *(int32x4_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *unsigned int v234 = *(int32x4_t *)v233;
              v129[7] = v241;
              int64x2_t v247 = &v234->i8[v86];
              int64x2_t v248 = &v234->i8[v32];
              *(_OWORD *)int64x2_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)int64x2_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int64x2_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int64x2_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int32x4_t)v236;
                v129[7] = (int32x4_t)v236;
LABEL_182:
                char v237 = (float32x4_t *)&v234->i8[v32];
                *char v237 = v236;
                v237[1] = v236;
                char v238 = (float32x4_t *)&v234->i8[v86];
                *char v238 = v236;
                v238[1] = v236;
                v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *unsigned int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int32x4_t v379 = *(int32x4_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int32x4_t v379 = (int32x4_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int32x4_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int32x4_t v381 = *(int32x4_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int32x4_t v381 = (int32x4_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int32x4_t v411 = *(int32x4_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int32x4_t v411 = (int32x4_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int32x4_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int32x4_t v413 = *(int32x4_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int32x4_t v413 = (int32x4_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int32x4_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int32x4_t v383 = *(int32x4_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int32x4_t v383 = (int32x4_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int32x4_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int32x4_t v385 = *(int32x4_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int32x4_t v385 = (int32x4_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int32x4_t v415 = *(int32x4_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int32x4_t v415 = (int32x4_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int32x4_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int32x4_t v417 = *(int32x4_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int32x4_t v417 = (int32x4_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int32x4_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int64x2_t v89 = (int32x4_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int64x2_t v89 = *(int32x4_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              v108 = &v89->i8[v67 + v25];
              *(_OWORD *)v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int64x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int32x4_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int32x4_t v121 = *(int32x4_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int32x4_t *v110 = *(int32x4_t *)v109;
              v110[1] = v121;
              v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              int64x2_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)int64x2_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int32x4_t *v110 = (int32x4_t)v116;
              v110[1] = (int32x4_t)v116;
              v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int32x4_t *v110 = 0u;
              v110[1] = 0u;
              unsigned int v113 = &v110->i8[v25];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v110->i8[v345];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int32x4_t v142 = *(int32x4_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int32x4_t *)v130;
              v110[3] = v142;
              v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              v150 = &v131->i8[v67 + v25];
              *(_OWORD *)v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int32x4_t)v137;
              v110[3] = (int32x4_t)v137;
              v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int32x4_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              uint64_t v134 = &v131->i8[v25];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              v136 = &v131->i8[v345];
              *(_OWORD *)v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int32x4_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int32x4_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              v171 = &v152->i8[v67 + v25];
              *(_OWORD *)v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int32x4_t v161 = (float32x4_t *)&v152->i8[v345];
              *int32x4_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              v155 = &v152->i8[v25];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              unsigned int v157 = &v152->i8[v345];
              *(_OWORD *)unsigned int v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int32x4_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int32x4_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              unsigned int v192 = &v173->i8[v67 + v25];
              *(_OWORD *)unsigned int v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              unint64_t v180 = (float32x4_t *)&v173->i8[v25];
              *unint64_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              uint64_t v176 = &v173->i8[v25];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              v178 = &v173->i8[v345];
              *(_OWORD *)v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int32x4_t v205 = *(int32x4_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int32x4_t *)v193;
              v110[5] = v205;
              uint64_t v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)uint64_t v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              BOOL v213 = &v194->i8[v67 + v25];
              *(_OWORD *)BOOL v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int32x4_t)v200;
              v110[5] = (int32x4_t)v200;
              unint64_t v201 = (float32x4_t *)&v194->i8[v25];
              *unint64_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              int v197 = &v194->i8[v25];
              *(_OWORD *)int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              BOOL v199 = &v194->i8[v345];
              *(_OWORD *)BOOL v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int32x4_t v222 = *(int32x4_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int32x4_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              v230 = &v215->i8[v67 + v25];
              *(_OWORD *)v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int32x4_t)v217;
                v110[7] = (int32x4_t)v217;
LABEL_149:
                v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int32x4_t v377 = *(int32x4_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int32x4_t v377 = (int32x4_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int32x4_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int32x4_t v379 = *(int32x4_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int32x4_t v379 = (int32x4_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int32x4_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int32x4_t v409 = *(int32x4_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int32x4_t v409 = (int32x4_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int32x4_t v411 = *(int32x4_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int32x4_t v411 = (int32x4_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int32x4_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int32x4_t v381 = *(int32x4_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int32x4_t v381 = (int32x4_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int32x4_t v383 = *(int32x4_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int32x4_t v383 = (int32x4_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int32x4_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int32x4_t v413 = *(int32x4_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int32x4_t v413 = (int32x4_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int32x4_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int32x4_t v415 = *(int32x4_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int32x4_t v415 = (int32x4_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int32x4_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int64x2_t v89 = (int32x4_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int64x2_t v89 = *(int32x4_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              v108 = &v89->i8[v67 + v25];
              *(_OWORD *)v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int64x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int32x4_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int32x4_t v121 = *(int32x4_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int32x4_t *v110 = *(int32x4_t *)v109;
              v110[1] = v121;
              v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              int64x2_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)int64x2_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int32x4_t *v110 = (int32x4_t)v116;
              v110[1] = (int32x4_t)v116;
              v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int32x4_t *v110 = 0u;
              v110[1] = 0u;
              unsigned int v113 = &v110->i8[v25];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v110->i8[v345];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int32x4_t v142 = *(int32x4_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int32x4_t *)v130;
              v110[3] = v142;
              v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              v150 = &v131->i8[v67 + v25];
              *(_OWORD *)v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int32x4_t)v137;
              v110[3] = (int32x4_t)v137;
              v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int32x4_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              uint64_t v134 = &v131->i8[v25];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              v136 = &v131->i8[v345];
              *(_OWORD *)v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int32x4_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int32x4_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              v171 = &v152->i8[v67 + v25];
              *(_OWORD *)v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int32x4_t v161 = (float32x4_t *)&v152->i8[v345];
              *int32x4_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              v155 = &v152->i8[v25];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              unsigned int v157 = &v152->i8[v345];
              *(_OWORD *)unsigned int v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int32x4_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int32x4_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              unsigned int v192 = &v173->i8[v67 + v25];
              *(_OWORD *)unsigned int v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              unint64_t v180 = (float32x4_t *)&v173->i8[v25];
              *unint64_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              uint64_t v176 = &v173->i8[v25];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              v178 = &v173->i8[v345];
              *(_OWORD *)v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int32x4_t v205 = *(int32x4_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int32x4_t *)v193;
              v110[5] = v205;
              uint64_t v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)uint64_t v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              BOOL v213 = &v194->i8[v67 + v25];
              *(_OWORD *)BOOL v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int32x4_t)v200;
              v110[5] = (int32x4_t)v200;
              unint64_t v201 = (float32x4_t *)&v194->i8[v25];
              *unint64_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              int v197 = &v194->i8[v25];
              *(_OWORD *)int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              BOOL v199 = &v194->i8[v345];
              *(_OWORD *)BOOL v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int32x4_t v222 = *(int32x4_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int32x4_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              v230 = &v215->i8[v67 + v25];
              *(_OWORD *)v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int32x4_t)v217;
                v110[7] = (int32x4_t)v217;
LABEL_149:
                v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int32x4_t v377 = *(int32x4_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int32x4_t v377 = (int32x4_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int32x4_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int32x4_t v379 = *(int32x4_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int32x4_t v379 = (int32x4_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int32x4_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int32x4_t v409 = *(int32x4_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int32x4_t v409 = (int32x4_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int32x4_t v411 = *(int32x4_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int32x4_t v411 = (int32x4_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int32x4_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int32x4_t v381 = *(int32x4_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int32x4_t v381 = (int32x4_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int32x4_t v383 = *(int32x4_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int32x4_t v383 = (int32x4_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int32x4_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int32x4_t v413 = *(int32x4_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int32x4_t v413 = (int32x4_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int32x4_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int32x4_t v415 = *(int32x4_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int32x4_t v415 = (int32x4_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int32x4_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v426 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v347 = a8;
  unsigned int v328 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v327 = v328 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v341 = v25;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v27 = *(unsigned __int8 *)(v15 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v340 = 0;
LABEL_32:
      unsigned int v338 = v27 - 4;
      unsigned int v332 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v325 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v340 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v340 = 0;
  unsigned int v325 = 0;
  unsigned int v332 = 0;
  unsigned int v338 = 0;
LABEL_33:
  if (v21 <= v327)
  {
    unsigned int v339 = a7 + a9 - 1;
    if (a7 >> 4 <= v339 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v350 = v19 >> 4;
      unsigned int v324 = v20 >> 3;
      int v349 = (v19 & 0xF) + 1;
      int v323 = (v20 & 7) + 1;
      uint64_t v336 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v17.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v17.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v335 = v16.i32[0] | v16.i32[1];
      uint64_t v331 = v16.i64[0];
      BOOL v330 = v16.i32[0] != 0;
      BOOL v329 = v16.i32[1] != 0;
      uint64_t v348 = v15;
      uint64_t v333 = 3 * a11;
      uint64_t v334 = 2 * a11;
      do
      {
        unsigned int v36 = (8 * v21) | 7;
        if (8 * v21 <= v347) {
          int v37 = v347;
        }
        else {
          int v37 = 8 * v21;
        }
        if (v328 < v36) {
          unsigned int v36 = v328;
        }
        int v337 = v37 - 8 * v21;
        int v345 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 4;
        int v39 = v323;
        if (v21 != v324) {
          int v39 = 8;
        }
        unsigned int v351 = v39;
        uint64_t v40 = v21 & ~(-1 << v332);
        uint64_t v344 = a2 + (v37 - v347) * v34;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 16 * v38;
          unsigned int v44 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 16 * v38;
          }
          if (v339 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v350) {
            unsigned int v47 = v349;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (8 * v21 >= v347 && v43 >= v41)
          {
            int v49 = v349;
            if (v38 != v350) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v345 != v351;
          }
          if (v340)
          {
            if (v338 | v332)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v332 != 0;
              BOOL v55 = v338 != 0;
              unsigned int v56 = v332;
              unsigned int v57 = v338;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v338) & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v338) + (v21 >> v332) * v325) + (v52 << 10);
          }
          else
          {
            if (v335)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v330;
              BOOL v62 = v329;
              int v63 = v331;
              int v64 = HIDWORD(v331);
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v21) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v21) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          float32x4_t v79 = (int32x4_t *)(a3 + v65);
          if (v341)
          {
            uint64_t v80 = v40;
            int v81 = v46;
            BOOL v82 = v48;
            memcpy(__dst, (const void *)(a3 + v65), sizeof(__dst));
            BOOL v48 = v82;
            int v46 = v81;
            uint64_t v40 = v80;
            float32x4_t v79 = (int32x4_t *)__dst;
          }
          float32x4_t v83 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v84 = v344 + 8 * (v45 - v41);
          char v85 = v47 < 0x10 || v48;
          if ((v85 & 1) == 0 && v351 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 127)
            {
              int32x4_t v89 = *v79;
              int32x4_t v17 = v79[1];
              int32x4_t v99 = v79[2];
              int32x4_t v100 = v79[3];
              int32x4_t v101 = v79[5];
              int32x4_t v102 = v79[6];
              int32x4_t v103 = v79[7];
              int32x4_t v104 = v79[4];
              uint64_t v87 = 2 * a11;
              *(int32x4_t *)uint64_t v84 = *v79;
              *(int32x4_t *)(v84 + 16) = v99;
              long long v105 = (int32x4_t *)(v84 + v334);
              uint64_t v34 = a11;
              v106 = (int32x4_t *)(v84 + a11);
              int32x4_t *v106 = v17;
              v106[1] = v100;
              int32x4_t *v105 = v104;
              v105[1] = v102;
              uint64_t v107 = (int32x4_t *)(v84 + v334 + a11);
              int32x4_t *v107 = v101;
              v107[1] = v103;
              uint64_t v88 = 128;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v87 = 2 * a11;
              if (v86 == 3)
              {
                int32x4_t v89 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v84 = v89;
                *(int32x4_t *)(v84 + 16) = v89;
                v96 = (int32x4_t *)(v84 + a11);
                int32x4_t *v96 = v89;
                v96[1] = v89;
                long long v97 = (int32x4_t *)(v84 + v334);
                int32x4_t *v97 = v89;
                v97[1] = v89;
                long long v98 = (int32x4_t *)(v84 + v333);
                int32x4_t *v98 = v89;
                v98[1] = v89;
                uint64_t v88 = 4;
              }
              else if (*v83)
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v84, a11, (uint64_t)v79, v86, v16, v17);
              }
              else
              {
                uint64_t v88 = 0;
                int32x4_t v89 = 0uLL;
                *(_OWORD *)uint64_t v84 = 0u;
                *(_OWORD *)(v84 + 16) = 0u;
                unsigned int v90 = (_OWORD *)(v84 + a11);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
                uint64_t v91 = (_OWORD *)(v84 + v334);
                *uint64_t v91 = 0u;
                v91[1] = 0u;
                uint64_t v92 = (_OWORD *)(v84 + v333);
                _OWORD *v92 = 0u;
                v92[1] = 0u;
              }
            }
            uint64_t v108 = (uint64_t)v79->i64 + v88;
            uint64_t v109 = (int16x8_t *)(v84 + 32);
            unsigned int v110 = v83[1];
            if (v110 == 127)
            {
              int32x4_t v112 = *(int32x4_t *)v108;
              int32x4_t v17 = *(int32x4_t *)(v108 + 16);
              long long v119 = *(_OWORD *)(v108 + 32);
              int32x4_t v120 = *(int32x4_t *)(v108 + 48);
              long long v121 = *(_OWORD *)(v108 + 80);
              long long v122 = *(_OWORD *)(v108 + 96);
              long long v123 = *(_OWORD *)(v108 + 112);
              long long v124 = *(_OWORD *)(v108 + 64);
              *uint64_t v109 = *(int16x8_t *)v108;
              *(_OWORD *)(v84 + 48) = v119;
              long long v125 = &v109->i8[v87];
              long long v126 = (int32x4_t *)&v109->i8[v34];
              int32x4_t *v126 = v17;
              v126[1] = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              v127 = &v109->i8[v87 + v34];
              *(_OWORD *)v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v111 = 128;
            }
            else if (v110 == 3)
            {
              int32x4_t v112 = (int32x4_t)vld1q_dup_f32((const float *)v108);
              *(int32x4_t *)(v84 + 32) = v112;
              *(int32x4_t *)(v84 + 48) = v112;
              float32x4_t v116 = (int32x4_t *)&v109->i8[v34];
              int32x4_t *v116 = v112;
              v116[1] = v112;
              v117 = (int32x4_t *)&v109->i8[v87];
              int32x4_t *v117 = v112;
              v117[1] = v112;
              long long v118 = (int32x4_t *)&v109->i8[v333];
              int32x4_t *v118 = v112;
              v118[1] = v112;
              uint64_t v111 = 4;
            }
            else if (v83[1])
            {
              uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, v34, v108, v110, v89, v17);
            }
            else
            {
              uint64_t v111 = 0;
              int32x4_t v112 = 0uLL;
              *uint64_t v109 = 0u;
              *(_OWORD *)(v84 + 48) = 0u;
              unsigned int v113 = &v109->i8[v34];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v109->i8[v87];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v109->i8[v333];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v128 = v108 + v111;
            int64x2_t v129 = (int16x8_t *)(v84 + v336);
            unsigned int v130 = v83[2];
            if (v130 == 127)
            {
              int32x4_t v132 = *(int32x4_t *)v128;
              int32x4_t v17 = *(int32x4_t *)(v128 + 16);
              int16x8_t v139 = *(int16x8_t *)(v128 + 32);
              int32x4_t v140 = *(int32x4_t *)(v128 + 48);
              long long v141 = *(_OWORD *)(v128 + 80);
              long long v142 = *(_OWORD *)(v128 + 96);
              long long v143 = *(_OWORD *)(v128 + 112);
              long long v144 = *(_OWORD *)(v128 + 64);
              *int64x2_t v129 = *(int16x8_t *)v128;
              v129[1] = v139;
              long long v145 = &v129->i8[v87];
              long long v146 = (int32x4_t *)&v129->i8[v34];
              int32x4_t *v146 = v17;
              v146[1] = v140;
              *(_OWORD *)long long v145 = v144;
              *((_OWORD *)v145 + 1) = v142;
              long long v147 = &v129->i8[v87 + v34];
              *(_OWORD *)long long v147 = v141;
              *((_OWORD *)v147 + 1) = v143;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              int32x4_t v132 = (int32x4_t)vld1q_dup_f32((const float *)v128);
              *int64x2_t v129 = (int16x8_t)v132;
              v129[1] = (int16x8_t)v132;
              v136 = (int32x4_t *)&v129->i8[v34];
              int32x4_t *v136 = v132;
              v136[1] = v132;
              float32x4_t v137 = (int32x4_t *)&v129->i8[v87];
              int32x4_t *v137 = v132;
              v137[1] = v132;
              v138 = (int32x4_t *)&v129->i8[v333];
              int32x4_t *v138 = v132;
              v138[1] = v132;
              uint64_t v131 = 4;
            }
            else if (v83[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v336), v34, v128, v130, v112, v17);
            }
            else
            {
              uint64_t v131 = 0;
              int32x4_t v132 = 0uLL;
              *int64x2_t v129 = 0u;
              v129[1] = 0u;
              uint64_t v133 = &v129->i8[v34];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              uint64_t v134 = &v129->i8[v87];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v129->i8[v333];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
            }
            uint64_t v148 = v128 + v131;
            uint64_t v149 = v129 + 2;
            unsigned int v150 = v83[3];
            if (v150 == 127)
            {
              int32x4_t v152 = *(int32x4_t *)v148;
              int32x4_t v17 = *(int32x4_t *)(v148 + 16);
              int16x8_t v159 = *(int16x8_t *)(v148 + 32);
              int32x4_t v160 = *(int32x4_t *)(v148 + 48);
              long long v161 = *(_OWORD *)(v148 + 80);
              long long v162 = *(_OWORD *)(v148 + 96);
              long long v163 = *(_OWORD *)(v148 + 112);
              long long v164 = *(_OWORD *)(v148 + 64);
              *uint64_t v149 = *(int16x8_t *)v148;
              v129[3] = v159;
              long long v165 = &v149->i8[v87];
              long long v166 = (int32x4_t *)&v149->i8[v34];
              *long long v166 = v17;
              v166[1] = v160;
              *(_OWORD *)long long v165 = v164;
              *((_OWORD *)v165 + 1) = v162;
              long long v167 = &v149->i8[v87 + v34];
              *(_OWORD *)long long v167 = v161;
              *((_OWORD *)v167 + 1) = v163;
              uint64_t v151 = 128;
            }
            else if (v150 == 3)
            {
              int32x4_t v152 = (int32x4_t)vld1q_dup_f32((const float *)v148);
              v129[2] = (int16x8_t)v152;
              v129[3] = (int16x8_t)v152;
              float32x4_t v156 = (int32x4_t *)&v149->i8[v34];
              *float32x4_t v156 = v152;
              v156[1] = v152;
              unsigned int v157 = (int32x4_t *)&v149->i8[v87];
              *unsigned int v157 = v152;
              v157[1] = v152;
              float32x4_t v158 = (int32x4_t *)&v149->i8[v333];
              *float32x4_t v158 = v152;
              v158[1] = v152;
              uint64_t v151 = 4;
            }
            else if (v83[3])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150, v132, v17);
            }
            else
            {
              uint64_t v151 = 0;
              int32x4_t v152 = 0uLL;
              *uint64_t v149 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v149->i8[v34];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v149->i8[v87];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v149->i8[v333];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v168 = v148 + v151;
            unsigned int v169 = (int16x8_t *)(v84 + 64);
            unsigned int v170 = v83[4];
            if (v170 == 127)
            {
              int32x4_t v172 = *(int32x4_t *)v168;
              int32x4_t v17 = *(int32x4_t *)(v168 + 16);
              long long v179 = *(_OWORD *)(v168 + 32);
              int32x4_t v180 = *(int32x4_t *)(v168 + 48);
              long long v181 = *(_OWORD *)(v168 + 80);
              long long v182 = *(_OWORD *)(v168 + 96);
              long long v183 = *(_OWORD *)(v168 + 112);
              long long v184 = *(_OWORD *)(v168 + 64);
              *unsigned int v169 = *(int16x8_t *)v168;
              *(_OWORD *)(v84 + 80) = v179;
              long long v185 = &v169->i8[v87];
              long long v186 = (int32x4_t *)&v169->i8[v34];
              *long long v186 = v17;
              v186[1] = v180;
              *(_OWORD *)long long v185 = v184;
              *((_OWORD *)v185 + 1) = v182;
              long long v187 = &v169->i8[v87 + v34];
              *(_OWORD *)long long v187 = v181;
              *((_OWORD *)v187 + 1) = v183;
              uint64_t v171 = 128;
            }
            else if (v170 == 3)
            {
              int32x4_t v172 = (int32x4_t)vld1q_dup_f32((const float *)v168);
              *(int32x4_t *)(v84 + 64) = v172;
              *(int32x4_t *)(v84 + 80) = v172;
              uint64_t v176 = (int32x4_t *)&v169->i8[v34];
              *uint64_t v176 = v172;
              v176[1] = v172;
              float32x4_t v177 = (int32x4_t *)&v169->i8[v87];
              *float32x4_t v177 = v172;
              v177[1] = v172;
              v178 = (int32x4_t *)&v169->i8[v333];
              int32x4_t *v178 = v172;
              v178[1] = v172;
              uint64_t v171 = 4;
            }
            else if (v83[4])
            {
              uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v169, v34, v168, v170, v152, v17);
            }
            else
            {
              uint64_t v171 = 0;
              int32x4_t v172 = 0uLL;
              *unsigned int v169 = 0u;
              *(_OWORD *)(v84 + 80) = 0u;
              uint64_t v173 = &v169->i8[v34];
              *(_OWORD *)uint64_t v173 = 0u;
              *((_OWORD *)v173 + 1) = 0u;
              unsigned int v174 = &v169->i8[v87];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v169->i8[v333];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
            }
            uint64_t v188 = v168 + v171;
            long long v189 = (int16x8_t *)(v84 + 96);
            unsigned int v190 = v83[5];
            if (v190 == 127)
            {
              int32x4_t v192 = *(int32x4_t *)v188;
              int32x4_t v17 = *(int32x4_t *)(v188 + 16);
              long long v199 = *(_OWORD *)(v188 + 32);
              int32x4_t v200 = *(int32x4_t *)(v188 + 48);
              long long v201 = *(_OWORD *)(v188 + 80);
              long long v202 = *(_OWORD *)(v188 + 96);
              long long v203 = *(_OWORD *)(v188 + 112);
              long long v204 = *(_OWORD *)(v188 + 64);
              *long long v189 = *(int16x8_t *)v188;
              *(_OWORD *)(v84 + 112) = v199;
              int32x4_t v205 = &v189->i8[v87];
              long long v206 = (int32x4_t *)&v189->i8[v34];
              *long long v206 = v17;
              v206[1] = v200;
              *(_OWORD *)int32x4_t v205 = v204;
              *((_OWORD *)v205 + 1) = v202;
              long long v207 = &v189->i8[v87 + v34];
              *(_OWORD *)long long v207 = v201;
              *((_OWORD *)v207 + 1) = v203;
              uint64_t v191 = 128;
            }
            else if (v190 == 3)
            {
              int32x4_t v192 = (int32x4_t)vld1q_dup_f32((const float *)v188);
              *(int32x4_t *)(v84 + 96) = v192;
              *(int32x4_t *)(v84 + 112) = v192;
              uint64_t v196 = (int32x4_t *)&v189->i8[v34];
              *uint64_t v196 = v192;
              v196[1] = v192;
              int v197 = (int32x4_t *)&v189->i8[v87];
              *int v197 = v192;
              v197[1] = v192;
              float32x4_t v198 = (int32x4_t *)&v189->i8[v333];
              *float32x4_t v198 = v192;
              v198[1] = v192;
              uint64_t v191 = 4;
            }
            else if (v83[5])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v189, v34, v188, v190, v172, v17);
            }
            else
            {
              uint64_t v191 = 0;
              int32x4_t v192 = 0uLL;
              *long long v189 = 0u;
              *(_OWORD *)(v84 + 112) = 0u;
              uint64_t v193 = &v189->i8[v34];
              *(_OWORD *)uint64_t v193 = 0u;
              *((_OWORD *)v193 + 1) = 0u;
              uint64_t v194 = &v189->i8[v87];
              *(_OWORD *)uint64_t v194 = 0u;
              *((_OWORD *)v194 + 1) = 0u;
              unsigned int v195 = &v189->i8[v333];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
            }
            uint64_t v208 = v188 + v191;
            long long v209 = v129 + 4;
            unsigned int v210 = v83[6];
            if (v210 == 127)
            {
              int32x4_t v212 = *(int32x4_t *)v208;
              int32x4_t v17 = *(int32x4_t *)(v208 + 16);
              int16x8_t v219 = *(int16x8_t *)(v208 + 32);
              int32x4_t v220 = *(int32x4_t *)(v208 + 48);
              long long v221 = *(_OWORD *)(v208 + 80);
              long long v222 = *(_OWORD *)(v208 + 96);
              long long v223 = *(_OWORD *)(v208 + 112);
              long long v224 = *(_OWORD *)(v208 + 64);
              *long long v209 = *(int16x8_t *)v208;
              v129[5] = v219;
              long long v225 = &v209->i8[v87];
              long long v226 = (int32x4_t *)&v209->i8[v34];
              *long long v226 = v17;
              v226[1] = v220;
              *(_OWORD *)long long v225 = v224;
              *((_OWORD *)v225 + 1) = v222;
              long long v227 = &v209->i8[v87 + v34];
              *(_OWORD *)long long v227 = v221;
              *((_OWORD *)v227 + 1) = v223;
              uint64_t v211 = 128;
            }
            else if (v210 == 3)
            {
              int32x4_t v212 = (int32x4_t)vld1q_dup_f32((const float *)v208);
              v129[4] = (int16x8_t)v212;
              v129[5] = (int16x8_t)v212;
              unsigned int v216 = (int32x4_t *)&v209->i8[v34];
              *unsigned int v216 = v212;
              v216[1] = v212;
              float32x4_t v217 = (int32x4_t *)&v209->i8[v87];
              *float32x4_t v217 = v212;
              v217[1] = v212;
              v218 = (int32x4_t *)&v209->i8[v333];
              int32x4_t *v218 = v212;
              v218[1] = v212;
              uint64_t v211 = 4;
            }
            else if (v83[6])
            {
              uint64_t v211 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v209, v34, v188 + v191, v210, v192, v17);
            }
            else
            {
              uint64_t v211 = 0;
              int32x4_t v212 = 0uLL;
              *long long v209 = 0u;
              v129[5] = 0u;
              BOOL v213 = &v209->i8[v34];
              *(_OWORD *)BOOL v213 = 0u;
              *((_OWORD *)v213 + 1) = 0u;
              uint64_t v214 = &v209->i8[v87];
              *(_OWORD *)uint64_t v214 = 0u;
              *((_OWORD *)v214 + 1) = 0u;
              uint64_t v215 = &v209->i8[v333];
              *(_OWORD *)uint64_t v215 = 0u;
              *((_OWORD *)v215 + 1) = 0u;
            }
            uint64_t v228 = v208 + v211;
            long long v229 = v129 + 6;
            unsigned int v230 = v83[7];
            if (v230 == 127)
            {
              int32x4_t v16 = *(int32x4_t *)v228;
              int32x4_t v17 = *(int32x4_t *)(v228 + 16);
              int16x8_t v234 = *(int16x8_t *)(v228 + 32);
              int32x4_t v235 = *(int32x4_t *)(v228 + 48);
              long long v236 = *(_OWORD *)(v228 + 64);
              long long v237 = *(_OWORD *)(v228 + 80);
              long long v238 = *(_OWORD *)(v228 + 96);
              long long v239 = *(_OWORD *)(v228 + 112);
              *long long v229 = *(int16x8_t *)v228;
              v129[7] = v234;
              unsigned int v240 = &v229->i8[v87];
              uint64_t v241 = (int32x4_t *)&v229->i8[v34];
              *uint64_t v241 = v17;
              v241[1] = v235;
              *(_OWORD *)unsigned int v240 = v236;
              *((_OWORD *)v240 + 1) = v238;
              float32x4_t v242 = &v229->i8[v87 + v34];
              *(_OWORD *)float32x4_t v242 = v237;
              *((_OWORD *)v242 + 1) = v239;
              unsigned int v41 = a7;
              uint64_t v15 = v348;
            }
            else
            {
              unsigned int v41 = a7;
              uint64_t v15 = v348;
              if (v230 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v228);
                v129[6] = (int16x8_t)v16;
                v129[7] = (int16x8_t)v16;
LABEL_182:
                float32x4_t v231 = (int32x4_t *)&v229->i8[v34];
                int32x4_t *v231 = v16;
                v231[1] = v16;
                float32x4_t v232 = (int32x4_t *)&v229->i8[v87];
                *float32x4_t v232 = v16;
                v232[1] = v16;
                float32x4_t v233 = (int32x4_t *)&v229->i8[v333];
                *float32x4_t v233 = v16;
                v233[1] = v16;
              }
              else
              {
                if (!v230)
                {
                  int32x4_t v16 = 0uLL;
                  *long long v229 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v229, v34, v228, v230, v212, v17);
              }
            }
LABEL_47:
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v348;
          block[5] = v79;
          char v359 = v47;
          char v360 = v351;
          unsigned int v355 = v337;
          unsigned int v356 = v45 - v43;
          block[6] = v83;
          uint64_t v353 = v84;
          uint64_t v34 = a11;
          uint64_t v354 = a11;
          unsigned int v357 = v345;
          unsigned int v358 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v348 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v348;
            goto LABEL_47;
          }
          unsigned int v93 = *v83;
          if (v93 == 127)
          {
            int32x4_t v95 = *v79;
            int32x4_t v17 = v79[1];
            int32x4_t v243 = v79[2];
            int32x4_t v244 = v79[3];
            int32x4_t v245 = v79[4];
            int32x4_t v246 = v79[5];
            int32x4_t v247 = v79[6];
            int32x4_t v248 = v79[7];
            int16x8_t v362 = *(int16x8_t *)v79;
            int32x4_t v363 = v243;
            int32x4_t v370 = v17;
            int32x4_t v371 = v244;
            int32x4_t v378 = v245;
            int32x4_t v379 = v247;
            int32x4_t v386 = v246;
            int32x4_t v387 = v248;
            uint64_t v94 = 128;
          }
          else if (v93 == 3)
          {
            int32x4_t v95 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int16x8_t v362 = (int16x8_t)v95;
            int32x4_t v363 = v95;
            int32x4_t v370 = v95;
            int32x4_t v371 = v95;
            int32x4_t v378 = v95;
            int32x4_t v379 = v95;
            int32x4_t v386 = v95;
            int32x4_t v387 = v95;
            uint64_t v94 = 4;
          }
          else if (*v83)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v362, 128, (uint64_t)v79, v93, v16, v17);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v95 = 0uLL;
            int32x4_t v363 = 0u;
            int16x8_t v362 = 0u;
            int32x4_t v370 = 0u;
            int32x4_t v371 = 0u;
            int32x4_t v378 = 0u;
            int32x4_t v379 = 0u;
            int32x4_t v386 = 0u;
            int32x4_t v387 = 0u;
          }
          uint64_t v249 = (uint64_t)v79->i64 + v94;
          unsigned int v250 = v83[1];
          if (v250 == 127)
          {
            int32x4_t v252 = *(int32x4_t *)v249;
            int32x4_t v17 = *(int32x4_t *)(v249 + 16);
            int32x4_t v253 = *(int32x4_t *)(v249 + 32);
            int32x4_t v254 = *(int32x4_t *)(v249 + 48);
            int32x4_t v255 = *(int32x4_t *)(v249 + 64);
            int32x4_t v256 = *(int32x4_t *)(v249 + 80);
            int32x4_t v257 = *(int32x4_t *)(v249 + 96);
            int32x4_t v258 = *(int32x4_t *)(v249 + 112);
            int16x8_t v364 = *(int16x8_t *)v249;
            int32x4_t v365 = v253;
            int32x4_t v372 = v17;
            int32x4_t v373 = v254;
            int32x4_t v380 = v255;
            int32x4_t v381 = v257;
            int32x4_t v388 = v256;
            int32x4_t v389 = v258;
            uint64_t v251 = 128;
          }
          else if (v250 == 3)
          {
            int32x4_t v252 = (int32x4_t)vld1q_dup_f32((const float *)v249);
            int16x8_t v364 = (int16x8_t)v252;
            int32x4_t v365 = v252;
            int32x4_t v372 = v252;
            int32x4_t v373 = v252;
            int32x4_t v380 = v252;
            int32x4_t v381 = v252;
            int32x4_t v388 = v252;
            int32x4_t v389 = v252;
            uint64_t v251 = 4;
          }
          else if (v83[1])
          {
            uint64_t v251 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v364, 128, v249, v250, v95, v17);
          }
          else
          {
            uint64_t v251 = 0;
            int32x4_t v252 = 0uLL;
            int16x8_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v388 = 0u;
            int32x4_t v389 = 0u;
          }
          uint64_t v259 = v249 + v251;
          unsigned int v260 = v83[2];
          if (v260 == 127)
          {
            int32x4_t v262 = *(int32x4_t *)v259;
            int32x4_t v17 = *(int32x4_t *)(v259 + 16);
            int32x4_t v263 = *(int32x4_t *)(v259 + 32);
            int32x4_t v264 = *(int32x4_t *)(v259 + 48);
            int32x4_t v265 = *(int32x4_t *)(v259 + 64);
            int32x4_t v266 = *(int32x4_t *)(v259 + 80);
            int32x4_t v267 = *(int32x4_t *)(v259 + 96);
            int32x4_t v268 = *(int32x4_t *)(v259 + 112);
            int16x8_t v394 = *(int16x8_t *)v259;
            int32x4_t v395 = v263;
            int32x4_t v402 = v17;
            int32x4_t v403 = v264;
            int32x4_t v410 = v265;
            int32x4_t v411 = v267;
            int32x4_t v418 = v266;
            int32x4_t v419 = v268;
            uint64_t v261 = 128;
          }
          else if (v260 == 3)
          {
            int32x4_t v262 = (int32x4_t)vld1q_dup_f32((const float *)v259);
            int16x8_t v394 = (int16x8_t)v262;
            int32x4_t v395 = v262;
            int32x4_t v402 = v262;
            int32x4_t v403 = v262;
            int32x4_t v410 = v262;
            int32x4_t v411 = v262;
            int32x4_t v418 = v262;
            int32x4_t v419 = v262;
            uint64_t v261 = 4;
          }
          else if (v83[2])
          {
            uint64_t v261 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 128, v259, v260, v252, v17);
          }
          else
          {
            uint64_t v261 = 0;
            int32x4_t v262 = 0uLL;
            int16x8_t v394 = 0u;
            int32x4_t v395 = 0u;
            int32x4_t v402 = 0u;
            int32x4_t v403 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
            int32x4_t v418 = 0u;
            int32x4_t v419 = 0u;
          }
          uint64_t v269 = v259 + v261;
          unsigned int v270 = v83[3];
          if (v270 == 127)
          {
            int32x4_t v272 = *(int32x4_t *)v269;
            int32x4_t v17 = *(int32x4_t *)(v269 + 16);
            int32x4_t v273 = *(int32x4_t *)(v269 + 32);
            int32x4_t v274 = *(int32x4_t *)(v269 + 48);
            int32x4_t v275 = *(int32x4_t *)(v269 + 64);
            int32x4_t v276 = *(int32x4_t *)(v269 + 80);
            int32x4_t v277 = *(int32x4_t *)(v269 + 96);
            int32x4_t v278 = *(int32x4_t *)(v269 + 112);
            int16x8_t v396 = *(int16x8_t *)v269;
            int32x4_t v397 = v273;
            int32x4_t v404 = v17;
            int32x4_t v405 = v274;
            int32x4_t v412 = v275;
            int32x4_t v413 = v277;
            int32x4_t v420 = v276;
            int32x4_t v421 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            int32x4_t v272 = (int32x4_t)vld1q_dup_f32((const float *)v269);
            int16x8_t v396 = (int16x8_t)v272;
            int32x4_t v397 = v272;
            int32x4_t v404 = v272;
            int32x4_t v405 = v272;
            int32x4_t v412 = v272;
            int32x4_t v413 = v272;
            int32x4_t v420 = v272;
            int32x4_t v421 = v272;
            uint64_t v271 = 4;
          }
          else if (v83[3])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 128, v269, v270, v262, v17);
          }
          else
          {
            uint64_t v271 = 0;
            int32x4_t v272 = 0uLL;
            int16x8_t v396 = 0u;
            int32x4_t v397 = 0u;
            int32x4_t v404 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
            int32x4_t v420 = 0u;
            int32x4_t v421 = 0u;
          }
          uint64_t v279 = v269 + v271;
          unsigned int v280 = v83[4];
          if (v280 == 127)
          {
            int32x4_t v282 = *(int32x4_t *)v279;
            int32x4_t v17 = *(int32x4_t *)(v279 + 16);
            int32x4_t v283 = *(int32x4_t *)(v279 + 32);
            int32x4_t v284 = *(int32x4_t *)(v279 + 48);
            int32x4_t v285 = *(int32x4_t *)(v279 + 64);
            int32x4_t v286 = *(int32x4_t *)(v279 + 80);
            int32x4_t v287 = *(int32x4_t *)(v279 + 96);
            int32x4_t v288 = *(int32x4_t *)(v279 + 112);
            int16x8_t v366 = *(int16x8_t *)v279;
            int32x4_t v367 = v283;
            int32x4_t v374 = v17;
            int32x4_t v375 = v284;
            int32x4_t v382 = v285;
            int32x4_t v383 = v287;
            int32x4_t v390 = v286;
            int32x4_t v391 = v288;
            uint64_t v281 = 128;
          }
          else if (v280 == 3)
          {
            int32x4_t v282 = (int32x4_t)vld1q_dup_f32((const float *)v279);
            int16x8_t v366 = (int16x8_t)v282;
            int32x4_t v367 = v282;
            int32x4_t v374 = v282;
            int32x4_t v375 = v282;
            int32x4_t v382 = v282;
            int32x4_t v383 = v282;
            int32x4_t v390 = v282;
            int32x4_t v391 = v282;
            uint64_t v281 = 4;
          }
          else if (v83[4])
          {
            uint64_t v281 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v279, v280, v272, v17);
          }
          else
          {
            uint64_t v281 = 0;
            int32x4_t v282 = 0uLL;
            int16x8_t v366 = 0u;
            int32x4_t v367 = 0u;
            int32x4_t v374 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
            int32x4_t v390 = 0u;
            int32x4_t v391 = 0u;
          }
          uint64_t v289 = v279 + v281;
          unsigned int v290 = v83[5];
          if (v290 == 127)
          {
            int32x4_t v292 = *(int32x4_t *)v289;
            int32x4_t v17 = *(int32x4_t *)(v289 + 16);
            int32x4_t v293 = *(int32x4_t *)(v289 + 32);
            int32x4_t v294 = *(int32x4_t *)(v289 + 48);
            int32x4_t v295 = *(int32x4_t *)(v289 + 64);
            int32x4_t v296 = *(int32x4_t *)(v289 + 80);
            int32x4_t v297 = *(int32x4_t *)(v289 + 96);
            int32x4_t v298 = *(int32x4_t *)(v289 + 112);
            int16x8_t v368 = *(int16x8_t *)v289;
            int32x4_t v369 = v293;
            int32x4_t v376 = v17;
            int32x4_t v377 = v294;
            int32x4_t v384 = v295;
            int32x4_t v385 = v297;
            int32x4_t v392 = v296;
            int32x4_t v393 = v298;
            uint64_t v291 = 128;
          }
          else if (v290 == 3)
          {
            int32x4_t v292 = (int32x4_t)vld1q_dup_f32((const float *)v289);
            int16x8_t v368 = (int16x8_t)v292;
            int32x4_t v369 = v292;
            int32x4_t v376 = v292;
            int32x4_t v377 = v292;
            int32x4_t v384 = v292;
            int32x4_t v385 = v292;
            int32x4_t v392 = v292;
            int32x4_t v393 = v292;
            uint64_t v291 = 4;
          }
          else if (v83[5])
          {
            uint64_t v291 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v368, 128, v289, v290, v282, v17);
          }
          else
          {
            uint64_t v291 = 0;
            int32x4_t v292 = 0uLL;
            int16x8_t v368 = 0u;
            int32x4_t v369 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v384 = 0u;
            int32x4_t v385 = 0u;
            int32x4_t v392 = 0u;
            int32x4_t v393 = 0u;
          }
          uint64_t v299 = v289 + v291;
          unsigned int v300 = v83[6];
          if (v300 == 127)
          {
            int32x4_t v302 = *(int32x4_t *)v299;
            int32x4_t v17 = *(int32x4_t *)(v299 + 16);
            int32x4_t v303 = *(int32x4_t *)(v299 + 32);
            int32x4_t v304 = *(int32x4_t *)(v299 + 48);
            int32x4_t v305 = *(int32x4_t *)(v299 + 64);
            int32x4_t v306 = *(int32x4_t *)(v299 + 80);
            int32x4_t v307 = *(int32x4_t *)(v299 + 96);
            int32x4_t v308 = *(int32x4_t *)(v299 + 112);
            int16x8_t v398 = *(int16x8_t *)v299;
            int32x4_t v399 = v303;
            int32x4_t v406 = v17;
            int32x4_t v407 = v304;
            int32x4_t v414 = v305;
            int32x4_t v415 = v307;
            int32x4_t v422 = v306;
            int32x4_t v423 = v308;
            uint64_t v301 = 128;
          }
          else if (v300 == 3)
          {
            int32x4_t v302 = (int32x4_t)vld1q_dup_f32((const float *)v299);
            int16x8_t v398 = (int16x8_t)v302;
            int32x4_t v399 = v302;
            int32x4_t v406 = v302;
            int32x4_t v407 = v302;
            int32x4_t v414 = v302;
            int32x4_t v415 = v302;
            int32x4_t v422 = v302;
            int32x4_t v423 = v302;
            uint64_t v301 = 4;
          }
          else if (v83[6])
          {
            uint64_t v301 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v398, 128, v299, v300, v292, v17);
          }
          else
          {
            uint64_t v301 = 0;
            int32x4_t v302 = 0uLL;
            int16x8_t v398 = 0u;
            int32x4_t v399 = 0u;
            int32x4_t v406 = 0u;
            int32x4_t v407 = 0u;
            int32x4_t v414 = 0u;
            int32x4_t v415 = 0u;
            int32x4_t v422 = 0u;
            int32x4_t v423 = 0u;
          }
          uint64_t v309 = v299 + v301;
          unsigned int v310 = v83[7];
          if (v310 == 127)
          {
            int32x4_t v16 = *(int32x4_t *)v309;
            int32x4_t v17 = *(int32x4_t *)(v309 + 16);
            int32x4_t v311 = *(int32x4_t *)(v309 + 32);
            int32x4_t v312 = *(int32x4_t *)(v309 + 48);
            int32x4_t v313 = *(int32x4_t *)(v309 + 80);
            int32x4_t v314 = *(int32x4_t *)(v309 + 96);
            int32x4_t v315 = *(int32x4_t *)(v309 + 112);
            int32x4_t v316 = *(int32x4_t *)(v309 + 64);
            int16x8_t v400 = *(int16x8_t *)v309;
            int32x4_t v401 = v311;
            int32x4_t v408 = v17;
            int32x4_t v409 = v312;
            int32x4_t v416 = v316;
            int32x4_t v417 = v314;
            int32x4_t v424 = v313;
            int32x4_t v425 = v315;
            unsigned int v41 = a7;
            uint64_t v15 = v348;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v348;
            if (v310 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v309);
              int16x8_t v400 = (int16x8_t)v16;
              int32x4_t v401 = v16;
              int32x4_t v408 = v16;
              int32x4_t v409 = v16;
              int32x4_t v416 = v16;
              int32x4_t v417 = v16;
              int32x4_t v424 = v16;
              int32x4_t v425 = v16;
            }
            else if (v310)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v400, 128, v309, v310, v302, v17);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int16x8_t v400 = 0u;
              int32x4_t v401 = 0u;
              int32x4_t v408 = 0u;
              int32x4_t v409 = 0u;
              int32x4_t v416 = 0u;
              int32x4_t v417 = 0u;
              int32x4_t v424 = 0u;
              int32x4_t v425 = 0u;
            }
          }
          unint64_t v317 = v357;
          unsigned int v42 = v38 + 1;
          if (v357)
          {
            unint64_t v318 = 0;
            uint64_t v319 = &v362.i8[128 * (unint64_t)v355 + 8 * v356];
            unsigned int v320 = v358;
            do
            {
              if (v320)
              {
                uint64_t v321 = 0;
                uint64_t v322 = v353 + v354 * v318;
                do
                {
                  *(unsigned char *)(v322 + v321) = v319[v321];
                  ++v321;
                  unsigned int v320 = v358;
                }
                while (8 * (unint64_t)v358 > v321);
                unint64_t v317 = v357;
              }
              ++v318;
              v319 += 128;
            }
            while (v318 < v317);
          }
LABEL_48:
          BOOL v22 = v38 == v339 >> 4;
          unsigned int v38 = v42;
        }
        while (!v22);
        BOOL v22 = v21++ == v327;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v426 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v347 = a8;
  unsigned int v328 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 3;
  unsigned int v327 = v328 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v341 = v25;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v27 = *(unsigned __int8 *)(v15 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v340 = 0;
LABEL_32:
      unsigned int v338 = v27 - 4;
      unsigned int v332 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v325 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v340 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v340 = 0;
  unsigned int v325 = 0;
  unsigned int v332 = 0;
  unsigned int v338 = 0;
LABEL_33:
  if (v21 <= v327)
  {
    unsigned int v339 = a7 + a9 - 1;
    if (a7 >> 4 <= v339 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v350 = v19 >> 4;
      unsigned int v324 = v20 >> 3;
      int v349 = (v19 & 0xF) + 1;
      int v323 = (v20 & 7) + 1;
      uint64_t v336 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v17.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v17.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v335 = v16.i32[0] | v16.i32[1];
      uint64_t v331 = v16.i64[0];
      BOOL v330 = v16.i32[0] != 0;
      BOOL v329 = v16.i32[1] != 0;
      uint64_t v348 = v15;
      uint64_t v333 = 3 * a11;
      uint64_t v334 = 2 * a11;
      do
      {
        unsigned int v36 = (8 * v21) | 7;
        if (8 * v21 <= v347) {
          int v37 = v347;
        }
        else {
          int v37 = 8 * v21;
        }
        if (v328 < v36) {
          unsigned int v36 = v328;
        }
        int v337 = v37 - 8 * v21;
        int v345 = v36 - v37 + 1;
        unsigned int v38 = a7 >> 4;
        int v39 = v323;
        if (v21 != v324) {
          int v39 = 8;
        }
        unsigned int v351 = v39;
        uint64_t v40 = v21 & ~(-1 << v332);
        uint64_t v344 = a2 + (v37 - v347) * v34;
        unsigned int v41 = a7;
        do
        {
          unsigned int v43 = 16 * v38;
          unsigned int v44 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v41) {
            int v45 = v41;
          }
          else {
            int v45 = 16 * v38;
          }
          if (v339 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v38 == v350) {
            unsigned int v47 = v349;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (8 * v21 >= v347 && v43 >= v41)
          {
            int v49 = v349;
            if (v38 != v350) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v345 != v351;
          }
          if (v340)
          {
            if (v338 | v332)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v332 != 0;
              BOOL v55 = v338 != 0;
              unsigned int v56 = v332;
              unsigned int v57 = v338;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v40 & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v38 & ~(-1 << v338) & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(v15 + 320) * ((v38 >> v338) + (v21 >> v332) * v325) + (v52 << 10);
          }
          else
          {
            if (v335)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v330;
              BOOL v62 = v329;
              int v63 = v331;
              int v64 = HIDWORD(v331);
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v21) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v38) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 7;
          if (v70 < 0x10)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_115:
              unint64_t v73 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 3) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_115;
            }
          }
          int v72 = 0;
          unint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            BOOL v77 = !v74;
            if (v74)
            {
              unint64_t v78 = ((unint64_t)(v76 & v38) << v72) | v73;
            }
            else
            {
              unsigned int v68 = 0;
              unint64_t v78 = v73;
            }
            if (!v77) {
              ++v72;
            }
            --v71;
            if (v75)
            {
              unint64_t v73 = ((unint64_t)(v76 & v21) << v72) | v78;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v73 = v78;
            }
            if (v75) {
              ++v72;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_116:
          float32x4_t v79 = (int32x4_t *)(a3 + v65);
          if (v341)
          {
            uint64_t v80 = v40;
            int v81 = v46;
            BOOL v82 = v48;
            memcpy(__dst, (const void *)(a3 + v65), sizeof(__dst));
            BOOL v48 = v82;
            int v46 = v81;
            uint64_t v40 = v80;
            float32x4_t v79 = (int32x4_t *)__dst;
          }
          float32x4_t v83 = (unsigned __int8 *)(a4 + 8 * v73);
          uint64_t v84 = v344 + 8 * (v45 - v41);
          char v85 = v47 < 0x10 || v48;
          if ((v85 & 1) == 0 && v351 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 127)
            {
              int32x4_t v89 = *v79;
              int32x4_t v17 = v79[1];
              int32x4_t v99 = v79[2];
              int32x4_t v100 = v79[3];
              int32x4_t v101 = v79[5];
              int32x4_t v102 = v79[6];
              int32x4_t v103 = v79[7];
              int32x4_t v104 = v79[4];
              uint64_t v87 = 2 * a11;
              *(int32x4_t *)uint64_t v84 = *v79;
              *(int32x4_t *)(v84 + 16) = v99;
              long long v105 = (int32x4_t *)(v84 + v334);
              uint64_t v34 = a11;
              v106 = (int32x4_t *)(v84 + a11);
              int32x4_t *v106 = v17;
              v106[1] = v100;
              int32x4_t *v105 = v104;
              v105[1] = v102;
              uint64_t v107 = (int32x4_t *)(v84 + v334 + a11);
              int32x4_t *v107 = v101;
              v107[1] = v103;
              uint64_t v88 = 128;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v87 = 2 * a11;
              if (v86 == 3)
              {
                int32x4_t v89 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
                *(int32x4_t *)uint64_t v84 = v89;
                *(int32x4_t *)(v84 + 16) = v89;
                v96 = (int32x4_t *)(v84 + a11);
                int32x4_t *v96 = v89;
                v96[1] = v89;
                long long v97 = (int32x4_t *)(v84 + v334);
                int32x4_t *v97 = v89;
                v97[1] = v89;
                long long v98 = (int32x4_t *)(v84 + v333);
                int32x4_t *v98 = v89;
                v98[1] = v89;
                uint64_t v88 = 4;
              }
              else if (*v83)
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v84, a11, (uint64_t)v79, v86, v16, v17);
              }
              else
              {
                uint64_t v88 = 0;
                int32x4_t v89 = 0uLL;
                *(_OWORD *)uint64_t v84 = 0u;
                *(_OWORD *)(v84 + 16) = 0u;
                unsigned int v90 = (_OWORD *)(v84 + a11);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
                uint64_t v91 = (_OWORD *)(v84 + v334);
                *uint64_t v91 = 0u;
                v91[1] = 0u;
                uint64_t v92 = (_OWORD *)(v84 + v333);
                _OWORD *v92 = 0u;
                v92[1] = 0u;
              }
            }
            uint64_t v108 = (uint64_t)v79->i64 + v88;
            uint64_t v109 = (int16x8_t *)(v84 + 32);
            unsigned int v110 = v83[1];
            if (v110 == 127)
            {
              int32x4_t v112 = *(int32x4_t *)v108;
              int32x4_t v17 = *(int32x4_t *)(v108 + 16);
              long long v119 = *(_OWORD *)(v108 + 32);
              int32x4_t v120 = *(int32x4_t *)(v108 + 48);
              long long v121 = *(_OWORD *)(v108 + 80);
              long long v122 = *(_OWORD *)(v108 + 96);
              long long v123 = *(_OWORD *)(v108 + 112);
              long long v124 = *(_OWORD *)(v108 + 64);
              *uint64_t v109 = *(int16x8_t *)v108;
              *(_OWORD *)(v84 + 48) = v119;
              long long v125 = &v109->i8[v87];
              long long v126 = (int32x4_t *)&v109->i8[v34];
              int32x4_t *v126 = v17;
              v126[1] = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              v127 = &v109->i8[v87 + v34];
              *(_OWORD *)v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v111 = 128;
            }
            else if (v110 == 3)
            {
              int32x4_t v112 = (int32x4_t)vld1q_dup_f32((const float *)v108);
              *(int32x4_t *)(v84 + 32) = v112;
              *(int32x4_t *)(v84 + 48) = v112;
              float32x4_t v116 = (int32x4_t *)&v109->i8[v34];
              int32x4_t *v116 = v112;
              v116[1] = v112;
              v117 = (int32x4_t *)&v109->i8[v87];
              int32x4_t *v117 = v112;
              v117[1] = v112;
              long long v118 = (int32x4_t *)&v109->i8[v333];
              int32x4_t *v118 = v112;
              v118[1] = v112;
              uint64_t v111 = 4;
            }
            else if (v83[1])
            {
              uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, v34, v108, v110, v89, v17);
            }
            else
            {
              uint64_t v111 = 0;
              int32x4_t v112 = 0uLL;
              *uint64_t v109 = 0u;
              *(_OWORD *)(v84 + 48) = 0u;
              unsigned int v113 = &v109->i8[v34];
              *(_OWORD *)unsigned int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v109->i8[v87];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v109->i8[v333];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v128 = v108 + v111;
            int64x2_t v129 = (int16x8_t *)(v84 + v336);
            unsigned int v130 = v83[2];
            if (v130 == 127)
            {
              int32x4_t v132 = *(int32x4_t *)v128;
              int32x4_t v17 = *(int32x4_t *)(v128 + 16);
              int16x8_t v139 = *(int16x8_t *)(v128 + 32);
              int32x4_t v140 = *(int32x4_t *)(v128 + 48);
              long long v141 = *(_OWORD *)(v128 + 80);
              long long v142 = *(_OWORD *)(v128 + 96);
              long long v143 = *(_OWORD *)(v128 + 112);
              long long v144 = *(_OWORD *)(v128 + 64);
              *int64x2_t v129 = *(int16x8_t *)v128;
              v129[1] = v139;
              long long v145 = &v129->i8[v87];
              long long v146 = (int32x4_t *)&v129->i8[v34];
              int32x4_t *v146 = v17;
              v146[1] = v140;
              *(_OWORD *)long long v145 = v144;
              *((_OWORD *)v145 + 1) = v142;
              long long v147 = &v129->i8[v87 + v34];
              *(_OWORD *)long long v147 = v141;
              *((_OWORD *)v147 + 1) = v143;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              int32x4_t v132 = (int32x4_t)vld1q_dup_f32((const float *)v128);
              *int64x2_t v129 = (int16x8_t)v132;
              v129[1] = (int16x8_t)v132;
              v136 = (int32x4_t *)&v129->i8[v34];
              int32x4_t *v136 = v132;
              v136[1] = v132;
              float32x4_t v137 = (int32x4_t *)&v129->i8[v87];
              int32x4_t *v137 = v132;
              v137[1] = v132;
              v138 = (int32x4_t *)&v129->i8[v333];
              int32x4_t *v138 = v132;
              v138[1] = v132;
              uint64_t v131 = 4;
            }
            else if (v83[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v84 + v336), v34, v128, v130, v112, v17);
            }
            else
            {
              uint64_t v131 = 0;
              int32x4_t v132 = 0uLL;
              *int64x2_t v129 = 0u;
              v129[1] = 0u;
              uint64_t v133 = &v129->i8[v34];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              uint64_t v134 = &v129->i8[v87];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v129->i8[v333];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
            }
            uint64_t v148 = v128 + v131;
            uint64_t v149 = v129 + 2;
            unsigned int v150 = v83[3];
            if (v150 == 127)
            {
              int32x4_t v152 = *(int32x4_t *)v148;
              int32x4_t v17 = *(int32x4_t *)(v148 + 16);
              int16x8_t v159 = *(int16x8_t *)(v148 + 32);
              int32x4_t v160 = *(int32x4_t *)(v148 + 48);
              long long v161 = *(_OWORD *)(v148 + 80);
              long long v162 = *(_OWORD *)(v148 + 96);
              long long v163 = *(_OWORD *)(v148 + 112);
              long long v164 = *(_OWORD *)(v148 + 64);
              *uint64_t v149 = *(int16x8_t *)v148;
              v129[3] = v159;
              long long v165 = &v149->i8[v87];
              long long v166 = (int32x4_t *)&v149->i8[v34];
              *long long v166 = v17;
              v166[1] = v160;
              *(_OWORD *)long long v165 = v164;
              *((_OWORD *)v165 + 1) = v162;
              long long v167 = &v149->i8[v87 + v34];
              *(_OWORD *)long long v167 = v161;
              *((_OWORD *)v167 + 1) = v163;
              uint64_t v151 = 128;
            }
            else if (v150 == 3)
            {
              int32x4_t v152 = (int32x4_t)vld1q_dup_f32((const float *)v148);
              v129[2] = (int16x8_t)v152;
              v129[3] = (int16x8_t)v152;
              float32x4_t v156 = (int32x4_t *)&v149->i8[v34];
              *float32x4_t v156 = v152;
              v156[1] = v152;
              unsigned int v157 = (int32x4_t *)&v149->i8[v87];
              *unsigned int v157 = v152;
              v157[1] = v152;
              float32x4_t v158 = (int32x4_t *)&v149->i8[v333];
              *float32x4_t v158 = v152;
              v158[1] = v152;
              uint64_t v151 = 4;
            }
            else if (v83[3])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150, v132, v17);
            }
            else
            {
              uint64_t v151 = 0;
              int32x4_t v152 = 0uLL;
              *uint64_t v149 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v149->i8[v34];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v149->i8[v87];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v149->i8[v333];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v168 = v148 + v151;
            unsigned int v169 = (int16x8_t *)(v84 + 64);
            unsigned int v170 = v83[4];
            if (v170 == 127)
            {
              int32x4_t v172 = *(int32x4_t *)v168;
              int32x4_t v17 = *(int32x4_t *)(v168 + 16);
              long long v179 = *(_OWORD *)(v168 + 32);
              int32x4_t v180 = *(int32x4_t *)(v168 + 48);
              long long v181 = *(_OWORD *)(v168 + 80);
              long long v182 = *(_OWORD *)(v168 + 96);
              long long v183 = *(_OWORD *)(v168 + 112);
              long long v184 = *(_OWORD *)(v168 + 64);
              *unsigned int v169 = *(int16x8_t *)v168;
              *(_OWORD *)(v84 + 80) = v179;
              long long v185 = &v169->i8[v87];
              long long v186 = (int32x4_t *)&v169->i8[v34];
              *long long v186 = v17;
              v186[1] = v180;
              *(_OWORD *)long long v185 = v184;
              *((_OWORD *)v185 + 1) = v182;
              long long v187 = &v169->i8[v87 + v34];
              *(_OWORD *)long long v187 = v181;
              *((_OWORD *)v187 + 1) = v183;
              uint64_t v171 = 128;
            }
            else if (v170 == 3)
            {
              int32x4_t v172 = (int32x4_t)vld1q_dup_f32((const float *)v168);
              *(int32x4_t *)(v84 + 64) = v172;
              *(int32x4_t *)(v84 + 80) = v172;
              uint64_t v176 = (int32x4_t *)&v169->i8[v34];
              *uint64_t v176 = v172;
              v176[1] = v172;
              float32x4_t v177 = (int32x4_t *)&v169->i8[v87];
              *float32x4_t v177 = v172;
              v177[1] = v172;
              v178 = (int32x4_t *)&v169->i8[v333];
              int32x4_t *v178 = v172;
              v178[1] = v172;
              uint64_t v171 = 4;
            }
            else if (v83[4])
            {
              uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v169, v34, v168, v170, v152, v17);
            }
            else
            {
              uint64_t v171 = 0;
              int32x4_t v172 = 0uLL;
              *unsigned int v169 = 0u;
              *(_OWORD *)(v84 + 80) = 0u;
              uint64_t v173 = &v169->i8[v34];
              *(_OWORD *)uint64_t v173 = 0u;
              *((_OWORD *)v173 + 1) = 0u;
              unsigned int v174 = &v169->i8[v87];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v169->i8[v333];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
            }
            uint64_t v188 = v168 + v171;
            long long v189 = (int16x8_t *)(v84 + 96);
            unsigned int v190 = v83[5];
            if (v190 == 127)
            {
              int32x4_t v192 = *(int32x4_t *)v188;
              int32x4_t v17 = *(int32x4_t *)(v188 + 16);
              long long v199 = *(_OWORD *)(v188 + 32);
              int32x4_t v200 = *(int32x4_t *)(v188 + 48);
              long long v201 = *(_OWORD *)(v188 + 80);
              long long v202 = *(_OWORD *)(v188 + 96);
              long long v203 = *(_OWORD *)(v188 + 112);
              long long v204 = *(_OWORD *)(v188 + 64);
              *long long v189 = *(int16x8_t *)v188;
              *(_OWORD *)(v84 + 112) = v199;
              int32x4_t v205 = &v189->i8[v87];
              long long v206 = (int32x4_t *)&v189->i8[v34];
              *long long v206 = v17;
              v206[1] = v200;
              *(_OWORD *)int32x4_t v205 = v204;
              *((_OWORD *)v205 + 1) = v202;
              long long v207 = &v189->i8[v87 + v34];
              *(_OWORD *)long long v207 = v201;
              *((_OWORD *)v207 + 1) = v203;
              uint64_t v191 = 128;
            }
            else if (v190 == 3)
            {
              int32x4_t v192 = (int32x4_t)vld1q_dup_f32((const float *)v188);
              *(int32x4_t *)(v84 + 96) = v192;
              *(int32x4_t *)(v84 + 112) = v192;
              uint64_t v196 = (int32x4_t *)&v189->i8[v34];
              *uint64_t v196 = v192;
              v196[1] = v192;
              int v197 = (int32x4_t *)&v189->i8[v87];
              *int v197 = v192;
              v197[1] = v192;
              float32x4_t v198 = (int32x4_t *)&v189->i8[v333];
              *float32x4_t v198 = v192;
              v198[1] = v192;
              uint64_t v191 = 4;
            }
            else if (v83[5])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v189, v34, v188, v190, v172, v17);
            }
            else
            {
              uint64_t v191 = 0;
              int32x4_t v192 = 0uLL;
              *long long v189 = 0u;
              *(_OWORD *)(v84 + 112) = 0u;
              uint64_t v193 = &v189->i8[v34];
              *(_OWORD *)uint64_t v193 = 0u;
              *((_OWORD *)v193 + 1) = 0u;
              uint64_t v194 = &v189->i8[v87];
              *(_OWORD *)uint64_t v194 = 0u;
              *((_OWORD *)v194 + 1) = 0u;
              unsigned int v195 = &v189->i8[v333];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
            }
            uint64_t v208 = v188 + v191;
            long long v209 = v129 + 4;
            unsigned int v210 = v83[6];
            if (v210 == 127)
            {
              int32x4_t v212 = *(int32x4_t *)v208;
              int32x4_t v17 = *(int32x4_t *)(v208 + 16);
              int16x8_t v219 = *(int16x8_t *)(v208 + 32);
              int32x4_t v220 = *(int32x4_t *)(v208 + 48);
              long long v221 = *(_OWORD *)(v208 + 80);
              long long v222 = *(_OWORD *)(v208 + 96);
              long long v223 = *(_OWORD *)(v208 + 112);
              long long v224 = *(_OWORD *)(v208 + 64);
              *long long v209 = *(int16x8_t *)v208;
              v129[5] = v219;
              long long v225 = &v209->i8[v87];
              long long v226 = (int32x4_t *)&v209->i8[v34];
              *long long v226 = v17;
              v226[1] = v220;
              *(_OWORD *)long long v225 = v224;
              *((_OWORD *)v225 + 1) = v222;
              long long v227 = &v209->i8[v87 + v34];
              *(_OWORD *)long long v227 = v221;
              *((_OWORD *)v227 + 1) = v223;
              uint64_t v211 = 128;
            }
            else if (v210 == 3)
            {
              int32x4_t v212 = (int32x4_t)vld1q_dup_f32((const float *)v208);
              v129[4] = (int16x8_t)v212;
              v129[5] = (int16x8_t)v212;
              unsigned int v216 = (int32x4_t *)&v209->i8[v34];
              *unsigned int v216 = v212;
              v216[1] = v212;
              float32x4_t v217 = (int32x4_t *)&v209->i8[v87];
              *float32x4_t v217 = v212;
              v217[1] = v212;
              v218 = (int32x4_t *)&v209->i8[v333];
              int32x4_t *v218 = v212;
              v218[1] = v212;
              uint64_t v211 = 4;
            }
            else if (v83[6])
            {
              uint64_t v211 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v209, v34, v188 + v191, v210, v192, v17);
            }
            else
            {
              uint64_t v211 = 0;
              int32x4_t v212 = 0uLL;
              *long long v209 = 0u;
              v129[5] = 0u;
              BOOL v213 = &v209->i8[v34];
              *(_OWORD *)BOOL v213 = 0u;
              *((_OWORD *)v213 + 1) = 0u;
              uint64_t v214 = &v209->i8[v87];
              *(_OWORD *)uint64_t v214 = 0u;
              *((_OWORD *)v214 + 1) = 0u;
              uint64_t v215 = &v209->i8[v333];
              *(_OWORD *)uint64_t v215 = 0u;
              *((_OWORD *)v215 + 1) = 0u;
            }
            uint64_t v228 = v208 + v211;
            long long v229 = v129 + 6;
            unsigned int v230 = v83[7];
            if (v230 == 127)
            {
              int32x4_t v16 = *(int32x4_t *)v228;
              int32x4_t v17 = *(int32x4_t *)(v228 + 16);
              int16x8_t v234 = *(int16x8_t *)(v228 + 32);
              int32x4_t v235 = *(int32x4_t *)(v228 + 48);
              long long v236 = *(_OWORD *)(v228 + 64);
              long long v237 = *(_OWORD *)(v228 + 80);
              long long v238 = *(_OWORD *)(v228 + 96);
              long long v239 = *(_OWORD *)(v228 + 112);
              *long long v229 = *(int16x8_t *)v228;
              v129[7] = v234;
              unsigned int v240 = &v229->i8[v87];
              uint64_t v241 = (int32x4_t *)&v229->i8[v34];
              *uint64_t v241 = v17;
              v241[1] = v235;
              *(_OWORD *)unsigned int v240 = v236;
              *((_OWORD *)v240 + 1) = v238;
              float32x4_t v242 = &v229->i8[v87 + v34];
              *(_OWORD *)float32x4_t v242 = v237;
              *((_OWORD *)v242 + 1) = v239;
              unsigned int v41 = a7;
              uint64_t v15 = v348;
            }
            else
            {
              unsigned int v41 = a7;
              uint64_t v15 = v348;
              if (v230 == 3)
              {
                int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v228);
                v129[6] = (int16x8_t)v16;
                v129[7] = (int16x8_t)v16;
LABEL_182:
                float32x4_t v231 = (int32x4_t *)&v229->i8[v34];
                int32x4_t *v231 = v16;
                v231[1] = v16;
                float32x4_t v232 = (int32x4_t *)&v229->i8[v87];
                *float32x4_t v232 = v16;
                v232[1] = v16;
                float32x4_t v233 = (int32x4_t *)&v229->i8[v333];
                *float32x4_t v233 = v16;
                v233[1] = v16;
              }
              else
              {
                if (!v230)
                {
                  int32x4_t v16 = 0uLL;
                  *long long v229 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v229, v34, v228, v230, v212, v17);
              }
            }
LABEL_47:
            unsigned int v42 = v38 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v348;
          block[5] = v79;
          char v359 = v47;
          char v360 = v351;
          unsigned int v355 = v337;
          unsigned int v356 = v45 - v43;
          block[6] = v83;
          uint64_t v353 = v84;
          uint64_t v34 = a11;
          uint64_t v354 = a11;
          unsigned int v357 = v345;
          unsigned int v358 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v348 + 8) + 7384), block);
            unsigned int v41 = a7;
            uint64_t v15 = v348;
            goto LABEL_47;
          }
          unsigned int v93 = *v83;
          if (v93 == 127)
          {
            int32x4_t v95 = *v79;
            int32x4_t v17 = v79[1];
            int32x4_t v243 = v79[2];
            int32x4_t v244 = v79[3];
            int32x4_t v245 = v79[4];
            int32x4_t v246 = v79[5];
            int32x4_t v247 = v79[6];
            int32x4_t v248 = v79[7];
            int16x8_t v362 = *(int16x8_t *)v79;
            int32x4_t v363 = v243;
            int32x4_t v370 = v17;
            int32x4_t v371 = v244;
            int32x4_t v378 = v245;
            int32x4_t v379 = v247;
            int32x4_t v386 = v246;
            int32x4_t v387 = v248;
            uint64_t v94 = 128;
          }
          else if (v93 == 3)
          {
            int32x4_t v95 = (int32x4_t)vld1q_dup_f32((const float *)v79->i32);
            int16x8_t v362 = (int16x8_t)v95;
            int32x4_t v363 = v95;
            int32x4_t v370 = v95;
            int32x4_t v371 = v95;
            int32x4_t v378 = v95;
            int32x4_t v379 = v95;
            int32x4_t v386 = v95;
            int32x4_t v387 = v95;
            uint64_t v94 = 4;
          }
          else if (*v83)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v362, 128, (uint64_t)v79, v93, v16, v17);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v95 = 0uLL;
            int32x4_t v363 = 0u;
            int16x8_t v362 = 0u;
            int32x4_t v370 = 0u;
            int32x4_t v371 = 0u;
            int32x4_t v378 = 0u;
            int32x4_t v379 = 0u;
            int32x4_t v386 = 0u;
            int32x4_t v387 = 0u;
          }
          uint64_t v249 = (uint64_t)v79->i64 + v94;
          unsigned int v250 = v83[1];
          if (v250 == 127)
          {
            int32x4_t v252 = *(int32x4_t *)v249;
            int32x4_t v17 = *(int32x4_t *)(v249 + 16);
            int32x4_t v253 = *(int32x4_t *)(v249 + 32);
            int32x4_t v254 = *(int32x4_t *)(v249 + 48);
            int32x4_t v255 = *(int32x4_t *)(v249 + 64);
            int32x4_t v256 = *(int32x4_t *)(v249 + 80);
            int32x4_t v257 = *(int32x4_t *)(v249 + 96);
            int32x4_t v258 = *(int32x4_t *)(v249 + 112);
            int16x8_t v364 = *(int16x8_t *)v249;
            int32x4_t v365 = v253;
            int32x4_t v372 = v17;
            int32x4_t v373 = v254;
            int32x4_t v380 = v255;
            int32x4_t v381 = v257;
            int32x4_t v388 = v256;
            int32x4_t v389 = v258;
            uint64_t v251 = 128;
          }
          else if (v250 == 3)
          {
            int32x4_t v252 = (int32x4_t)vld1q_dup_f32((const float *)v249);
            int16x8_t v364 = (int16x8_t)v252;
            int32x4_t v365 = v252;
            int32x4_t v372 = v252;
            int32x4_t v373 = v252;
            int32x4_t v380 = v252;
            int32x4_t v381 = v252;
            int32x4_t v388 = v252;
            int32x4_t v389 = v252;
            uint64_t v251 = 4;
          }
          else if (v83[1])
          {
            uint64_t v251 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v364, 128, v249, v250, v95, v17);
          }
          else
          {
            uint64_t v251 = 0;
            int32x4_t v252 = 0uLL;
            int16x8_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v388 = 0u;
            int32x4_t v389 = 0u;
          }
          uint64_t v259 = v249 + v251;
          unsigned int v260 = v83[2];
          if (v260 == 127)
          {
            int32x4_t v262 = *(int32x4_t *)v259;
            int32x4_t v17 = *(int32x4_t *)(v259 + 16);
            int32x4_t v263 = *(int32x4_t *)(v259 + 32);
            int32x4_t v264 = *(int32x4_t *)(v259 + 48);
            int32x4_t v265 = *(int32x4_t *)(v259 + 64);
            int32x4_t v266 = *(int32x4_t *)(v259 + 80);
            int32x4_t v267 = *(int32x4_t *)(v259 + 96);
            int32x4_t v268 = *(int32x4_t *)(v259 + 112);
            int16x8_t v394 = *(int16x8_t *)v259;
            int32x4_t v395 = v263;
            int32x4_t v402 = v17;
            int32x4_t v403 = v264;
            int32x4_t v410 = v265;
            int32x4_t v411 = v267;
            int32x4_t v418 = v266;
            int32x4_t v419 = v268;
            uint64_t v261 = 128;
          }
          else if (v260 == 3)
          {
            int32x4_t v262 = (int32x4_t)vld1q_dup_f32((const float *)v259);
            int16x8_t v394 = (int16x8_t)v262;
            int32x4_t v395 = v262;
            int32x4_t v402 = v262;
            int32x4_t v403 = v262;
            int32x4_t v410 = v262;
            int32x4_t v411 = v262;
            int32x4_t v418 = v262;
            int32x4_t v419 = v262;
            uint64_t v261 = 4;
          }
          else if (v83[2])
          {
            uint64_t v261 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 128, v259, v260, v252, v17);
          }
          else
          {
            uint64_t v261 = 0;
            int32x4_t v262 = 0uLL;
            int16x8_t v394 = 0u;
            int32x4_t v395 = 0u;
            int32x4_t v402 = 0u;
            int32x4_t v403 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
            int32x4_t v418 = 0u;
            int32x4_t v419 = 0u;
          }
          uint64_t v269 = v259 + v261;
          unsigned int v270 = v83[3];
          if (v270 == 127)
          {
            int32x4_t v272 = *(int32x4_t *)v269;
            int32x4_t v17 = *(int32x4_t *)(v269 + 16);
            int32x4_t v273 = *(int32x4_t *)(v269 + 32);
            int32x4_t v274 = *(int32x4_t *)(v269 + 48);
            int32x4_t v275 = *(int32x4_t *)(v269 + 64);
            int32x4_t v276 = *(int32x4_t *)(v269 + 80);
            int32x4_t v277 = *(int32x4_t *)(v269 + 96);
            int32x4_t v278 = *(int32x4_t *)(v269 + 112);
            int16x8_t v396 = *(int16x8_t *)v269;
            int32x4_t v397 = v273;
            int32x4_t v404 = v17;
            int32x4_t v405 = v274;
            int32x4_t v412 = v275;
            int32x4_t v413 = v277;
            int32x4_t v420 = v276;
            int32x4_t v421 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            int32x4_t v272 = (int32x4_t)vld1q_dup_f32((const float *)v269);
            int16x8_t v396 = (int16x8_t)v272;
            int32x4_t v397 = v272;
            int32x4_t v404 = v272;
            int32x4_t v405 = v272;
            int32x4_t v412 = v272;
            int32x4_t v413 = v272;
            int32x4_t v420 = v272;
            int32x4_t v421 = v272;
            uint64_t v271 = 4;
          }
          else if (v83[3])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 128, v269, v270, v262, v17);
          }
          else
          {
            uint64_t v271 = 0;
            int32x4_t v272 = 0uLL;
            int16x8_t v396 = 0u;
            int32x4_t v397 = 0u;
            int32x4_t v404 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
            int32x4_t v420 = 0u;
            int32x4_t v421 = 0u;
          }
          uint64_t v279 = v269 + v271;
          unsigned int v280 = v83[4];
          if (v280 == 127)
          {
            int32x4_t v282 = *(int32x4_t *)v279;
            int32x4_t v17 = *(int32x4_t *)(v279 + 16);
            int32x4_t v283 = *(int32x4_t *)(v279 + 32);
            int32x4_t v284 = *(int32x4_t *)(v279 + 48);
            int32x4_t v285 = *(int32x4_t *)(v279 + 64);
            int32x4_t v286 = *(int32x4_t *)(v279 + 80);
            int32x4_t v287 = *(int32x4_t *)(v279 + 96);
            int32x4_t v288 = *(int32x4_t *)(v279 + 112);
            int16x8_t v366 = *(int16x8_t *)v279;
            int32x4_t v367 = v283;
            int32x4_t v374 = v17;
            int32x4_t v375 = v284;
            int32x4_t v382 = v285;
            int32x4_t v383 = v287;
            int32x4_t v390 = v286;
            int32x4_t v391 = v288;
            uint64_t v281 = 128;
          }
          else if (v280 == 3)
          {
            int32x4_t v282 = (int32x4_t)vld1q_dup_f32((const float *)v279);
            int16x8_t v366 = (int16x8_t)v282;
            int32x4_t v367 = v282;
            int32x4_t v374 = v282;
            int32x4_t v375 = v282;
            int32x4_t v382 = v282;
            int32x4_t v383 = v282;
            int32x4_t v390 = v282;
            int32x4_t v391 = v282;
            uint64_t v281 = 4;
          }
          else if (v83[4])
          {
            uint64_t v281 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v279, v280, v272, v17);
          }
          else
          {
            uint64_t v281 = 0;
            int32x4_t v282 = 0uLL;
            int16x8_t v366 = 0u;
            int32x4_t v367 = 0u;
            int32x4_t v374 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
            int32x4_t v390 = 0u;
            int32x4_t v391 = 0u;
          }
          uint64_t v289 = v279 + v281;
          unsigned int v290 = v83[5];
          if (v290 == 127)
          {
            int32x4_t v292 = *(int32x4_t *)v289;
            int32x4_t v17 = *(int32x4_t *)(v289 + 16);
            int32x4_t v293 = *(int32x4_t *)(v289 + 32);
            int32x4_t v294 = *(int32x4_t *)(v289 + 48);
            int32x4_t v295 = *(int32x4_t *)(v289 + 64);
            int32x4_t v296 = *(int32x4_t *)(v289 + 80);
            int32x4_t v297 = *(int32x4_t *)(v289 + 96);
            int32x4_t v298 = *(int32x4_t *)(v289 + 112);
            int16x8_t v368 = *(int16x8_t *)v289;
            int32x4_t v369 = v293;
            int32x4_t v376 = v17;
            int32x4_t v377 = v294;
            int32x4_t v384 = v295;
            int32x4_t v385 = v297;
            int32x4_t v392 = v296;
            int32x4_t v393 = v298;
            uint64_t v291 = 128;
          }
          else if (v290 == 3)
          {
            int32x4_t v292 = (int32x4_t)vld1q_dup_f32((const float *)v289);
            int16x8_t v368 = (int16x8_t)v292;
            int32x4_t v369 = v292;
            int32x4_t v376 = v292;
            int32x4_t v377 = v292;
            int32x4_t v384 = v292;
            int32x4_t v385 = v292;
            int32x4_t v392 = v292;
            int32x4_t v393 = v292;
            uint64_t v291 = 4;
          }
          else if (v83[5])
          {
            uint64_t v291 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v368, 128, v289, v290, v282, v17);
          }
          else
          {
            uint64_t v291 = 0;
            int32x4_t v292 = 0uLL;
            int16x8_t v368 = 0u;
            int32x4_t v369 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v384 = 0u;
            int32x4_t v385 = 0u;
            int32x4_t v392 = 0u;
            int32x4_t v393 = 0u;
          }
          uint64_t v299 = v289 + v291;
          unsigned int v300 = v83[6];
          if (v300 == 127)
          {
            int32x4_t v302 = *(int32x4_t *)v299;
            int32x4_t v17 = *(int32x4_t *)(v299 + 16);
            int32x4_t v303 = *(int32x4_t *)(v299 + 32);
            int32x4_t v304 = *(int32x4_t *)(v299 + 48);
            int32x4_t v305 = *(int32x4_t *)(v299 + 64);
            int32x4_t v306 = *(int32x4_t *)(v299 + 80);
            int32x4_t v307 = *(int32x4_t *)(v299 + 96);
            int32x4_t v308 = *(int32x4_t *)(v299 + 112);
            int16x8_t v398 = *(int16x8_t *)v299;
            int32x4_t v399 = v303;
            int32x4_t v406 = v17;
            int32x4_t v407 = v304;
            int32x4_t v414 = v305;
            int32x4_t v415 = v307;
            int32x4_t v422 = v306;
            int32x4_t v423 = v308;
            uint64_t v301 = 128;
          }
          else if (v300 == 3)
          {
            int32x4_t v302 = (int32x4_t)vld1q_dup_f32((const float *)v299);
            int16x8_t v398 = (int16x8_t)v302;
            int32x4_t v399 = v302;
            int32x4_t v406 = v302;
            int32x4_t v407 = v302;
            int32x4_t v414 = v302;
            int32x4_t v415 = v302;
            int32x4_t v422 = v302;
            int32x4_t v423 = v302;
            uint64_t v301 = 4;
          }
          else if (v83[6])
          {
            uint64_t v301 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v398, 128, v299, v300, v292, v17);
          }
          else
          {
            uint64_t v301 = 0;
            int32x4_t v302 = 0uLL;
            int16x8_t v398 = 0u;
            int32x4_t v399 = 0u;
            int32x4_t v406 = 0u;
            int32x4_t v407 = 0u;
            int32x4_t v414 = 0u;
            int32x4_t v415 = 0u;
            int32x4_t v422 = 0u;
            int32x4_t v423 = 0u;
          }
          uint64_t v309 = v299 + v301;
          unsigned int v310 = v83[7];
          if (v310 == 127)
          {
            int32x4_t v16 = *(int32x4_t *)v309;
            int32x4_t v17 = *(int32x4_t *)(v309 + 16);
            int32x4_t v311 = *(int32x4_t *)(v309 + 32);
            int32x4_t v312 = *(int32x4_t *)(v309 + 48);
            int32x4_t v313 = *(int32x4_t *)(v309 + 80);
            int32x4_t v314 = *(int32x4_t *)(v309 + 96);
            int32x4_t v315 = *(int32x4_t *)(v309 + 112);
            int32x4_t v316 = *(int32x4_t *)(v309 + 64);
            int16x8_t v400 = *(int16x8_t *)v309;
            int32x4_t v401 = v311;
            int32x4_t v408 = v17;
            int32x4_t v409 = v312;
            int32x4_t v416 = v316;
            int32x4_t v417 = v314;
            int32x4_t v424 = v313;
            int32x4_t v425 = v315;
            unsigned int v41 = a7;
            uint64_t v15 = v348;
          }
          else
          {
            unsigned int v41 = a7;
            uint64_t v15 = v348;
            if (v310 == 3)
            {
              int32x4_t v16 = (int32x4_t)vld1q_dup_f32((const float *)v309);
              int16x8_t v400 = (int16x8_t)v16;
              int32x4_t v401 = v16;
              int32x4_t v408 = v16;
              int32x4_t v409 = v16;
              int32x4_t v416 = v16;
              int32x4_t v417 = v16;
              int32x4_t v424 = v16;
              int32x4_t v425 = v16;
            }
            else if (v310)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v400, 128, v309, v310, v302, v17);
            }
            else
            {
              int32x4_t v16 = 0uLL;
              int16x8_t v400 = 0u;
              int32x4_t v401 = 0u;
              int32x4_t v408 = 0u;
              int32x4_t v409 = 0u;
              int32x4_t v416 = 0u;
              int32x4_t v417 = 0u;
              int32x4_t v424 = 0u;
              int32x4_t v425 = 0u;
            }
          }
          unint64_t v317 = v357;
          unsigned int v42 = v38 + 1;
          if (v357)
          {
            unint64_t v318 = 0;
            uint64_t v319 = &v362.i8[128 * (unint64_t)v355 + 8 * v356];
            unsigned int v320 = v358;
            do
            {
              if (v320)
              {
                uint64_t v321 = 0;
                uint64_t v322 = v353 + v354 * v318;
                do
                {
                  *(unsigned char *)(v322 + v321) = v319[v321];
                  ++v321;
                  unsigned int v320 = v358;
                }
                while (8 * (unint64_t)v358 > v321);
                unint64_t v317 = v357;
              }
              ++v318;
              v319 += 128;
            }
            while (v318 < v317);
          }
LABEL_48:
          BOOL v22 = v38 == v339 >> 4;
          unsigned int v38 = v42;
        }
        while (!v22);
        BOOL v22 = v21++ == v327;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v424 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v345 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v325 = a8 + a10 - 1;
  unsigned int v327 = v325 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v339 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v327)
  {
    unsigned int v337 = a7 + a9 - 1;
    unsigned int v324 = a7 >> 4;
    if (a7 >> 4 <= v337 >> 4)
    {
      uint64_t v27 = a11;
      unsigned int v321 = a5 - 1;
      unsigned int v348 = (a5 - 1) >> 4;
      int v347 = ((a5 - 1) & 0xF) + 1;
      int v322 = ((a6 - 1) & 7) + 1;
      unsigned int v323 = (a6 - 1) >> 3;
      uint64_t v330 = 4 * a11;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v26.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v28, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v26.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v28));
      __int32 v335 = v25.i32[0] | v25.i32[1];
      uint64_t v334 = v25.i64[0];
      BOOL v333 = v25.i32[0] != 0;
      BOOL v332 = v25.i32[1] != 0;
      unint64_t v320 = 8 * v19 * (unint64_t)v18;
      unsigned int v336 = a7;
      uint64_t v346 = v16;
      uint64_t v328 = 3 * a11;
      uint64_t v329 = 2 * a11;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v345) {
          int v30 = v345;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v324;
        if (v325 < v29) {
          unsigned int v29 = v325;
        }
        unsigned int v344 = 8 * v17;
        int v331 = v30 - 8 * v17;
        int v343 = v29 - v30 + 1;
        int v32 = v322;
        if (v17 != v323) {
          int v32 = 8;
        }
        unsigned int v349 = v32;
        uint64_t v342 = a2 + (v30 - v345) * v27;
        do
        {
          unsigned int v34 = 16 * v31;
          unsigned int v35 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v31;
          }
          if (v337 < v35) {
            unsigned int v35 = v337;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v348) {
            unsigned int v38 = v347;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v344 >= v345 && v34 >= a7)
          {
            int v40 = v347;
            if (v31 != v348) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v343 != v349;
          }
          if (isLevelTiled)
          {
            unsigned int v304 = 0;
            uint64_t v305 = v320 >> (*(unsigned char *)(v16 + 57) != 0);
            char v306 = 1;
            if (v305 > 127)
            {
              if (v305 > 511)
              {
                if (v305 == 512)
                {
                  char v307 = 0;
                  unsigned int v304 = 16;
                  unsigned int v308 = 16;
                }
                else
                {
                  char v307 = 1;
                  unsigned int v308 = 0;
                  if (v305 == 1024)
                  {
                    unsigned int v308 = 8;
                    unsigned int v304 = 16;
                  }
                }
              }
              else if (v305 == 128)
              {
                char v306 = 0;
                char v307 = 0;
                unsigned int v304 = 32;
                unsigned int v308 = 32;
              }
              else
              {
                char v307 = 1;
                unsigned int v308 = 0;
                if (v305 == 256)
                {
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 16;
                  unsigned int v304 = 32;
                }
              }
            }
            else
            {
              char v307 = 1;
              unsigned int v308 = 0;
              switch(v305)
              {
                case 4:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 128;
                  unsigned int v304 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v304 = 128;
                  unsigned int v308 = 128;
                  break;
                case 16:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 64;
                  unsigned int v304 = 128;
                  break;
                case 32:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v304 = 64;
                  unsigned int v308 = 64;
                  break;
                default:
                  if (v305 == 64)
                  {
                    char v306 = 0;
                    char v307 = 0;
                    unsigned int v308 = 32;
                    unsigned int v304 = 64;
                  }
                  break;
              }
            }
            unsigned int v309 = (v304 >> 4) - 1;
            if (v306) {
              unsigned int v310 = 0;
            }
            else {
              unsigned int v310 = 32 - __clz(~(-1 << -(char)__clz(v309)));
            }
            unsigned int v311 = (v308 >> 3) - 1;
            if (v307)
            {
              unsigned int v312 = 0;
              if (v310) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v312 = 32 - __clz(~(-1 << -(char)__clz(v311)));
              if (v312 | v310)
              {
LABEL_234:
                int v313 = 0;
                uint64_t v314 = 0;
                int v315 = v31 & v309;
                int v316 = v17 & v311;
                BOOL v317 = v312 != 0;
                BOOL v318 = v310 != 0;
                int v319 = 1;
                do
                {
                  --v312;
                  if (v317) {
                    v314 |= (unint64_t)(v319 & v316) << v313++;
                  }
                  else {
                    unsigned int v312 = 0;
                  }
                  --v310;
                  if (v318) {
                    v314 |= (unint64_t)(v319 & v315) << v313++;
                  }
                  else {
                    unsigned int v310 = 0;
                  }
                  v319 *= 2;
                  --v313;
                  BOOL v318 = v310 != 0;
                  BOOL v317 = v312 != 0;
                }
                while (v310 | v312);
                goto LABEL_246;
              }
            }
            uint64_t v314 = 0;
LABEL_246:
            unint64_t v49 = ((unint64_t)(v34 / v304 + v344 / v308 * ((v304 + v321) / v304)) << 14) + (v314 << 10);
            goto LABEL_60;
          }
          if (v335)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v333;
            BOOL v46 = v332;
            int v47 = v334;
            int v48 = HIDWORD(v334);
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_60:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v339)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v342 + 8 * (v36 - a7);
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) == 0 && v349 > 7)
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int32x4_t v70 = *v63;
              int32x4_t v26 = v63[1];
              int32x4_t v80 = v63[2];
              int32x4_t v81 = v63[3];
              int32x4_t v82 = v63[5];
              int32x4_t v83 = v63[6];
              int32x4_t v84 = v63[7];
              int32x4_t v85 = v63[4];
              uint64_t v68 = 2 * a11;
              *(int32x4_t *)uint64_t v65 = *v63;
              *(int32x4_t *)(v65 + 16) = v80;
              unsigned int v86 = (int32x4_t *)(v65 + v329);
              uint64_t v27 = a11;
              uint64_t v87 = (int32x4_t *)(v65 + a11);
              int32x4_t *v87 = v26;
              v87[1] = v81;
              int32x4_t *v86 = v85;
              v86[1] = v83;
              uint64_t v88 = (int32x4_t *)(v65 + v329 + a11);
              int32x4_t *v88 = v82;
              v88[1] = v84;
              uint64_t v69 = 128;
            }
            else
            {
              uint64_t v27 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 3)
              {
                int32x4_t v70 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v70;
                *(int32x4_t *)(v65 + 16) = v70;
                BOOL v77 = (int32x4_t *)(v65 + a11);
                *BOOL v77 = v70;
                v77[1] = v70;
                unint64_t v78 = (int32x4_t *)(v65 + v329);
                int32x4_t *v78 = v70;
                v78[1] = v70;
                float32x4_t v79 = (int32x4_t *)(v65 + v328);
                *float32x4_t v79 = v70;
                v79[1] = v70;
                uint64_t v69 = 4;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v65, a11, (uint64_t)v63, v67, v25, v26);
              }
              else
              {
                uint64_t v69 = 0;
                int32x4_t v70 = 0uLL;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v71 = (_OWORD *)(v65 + a11);
                *unsigned int v71 = 0u;
                v71[1] = 0u;
                int v72 = (_OWORD *)(v65 + v329);
                *int v72 = 0u;
                v72[1] = 0u;
                unint64_t v73 = (_OWORD *)(v65 + v328);
                _OWORD *v73 = 0u;
                v73[1] = 0u;
              }
            }
            uint64_t v89 = (uint64_t)v63->i64 + v69;
            unsigned int v90 = (int16x8_t *)(v65 + 32);
            unsigned int v91 = v64[1];
            if (v91 == 127)
            {
              int32x4_t v93 = *(int32x4_t *)v89;
              int32x4_t v26 = *(int32x4_t *)(v89 + 16);
              long long v100 = *(_OWORD *)(v89 + 32);
              int32x4_t v101 = *(int32x4_t *)(v89 + 48);
              long long v102 = *(_OWORD *)(v89 + 80);
              long long v103 = *(_OWORD *)(v89 + 96);
              long long v104 = *(_OWORD *)(v89 + 112);
              long long v105 = *(_OWORD *)(v89 + 64);
              int16x8_t *v90 = *(int16x8_t *)v89;
              *(_OWORD *)(v65 + 48) = v100;
              v106 = &v90->i8[v68];
              uint64_t v107 = (int32x4_t *)&v90->i8[v27];
              int32x4_t *v107 = v26;
              v107[1] = v101;
              *(_OWORD *)v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v90->i8[v68 + v27];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v92 = 128;
            }
            else if (v91 == 3)
            {
              int32x4_t v93 = (int32x4_t)vld1q_dup_f32((const float *)v89);
              *(int32x4_t *)(v65 + 32) = v93;
              *(int32x4_t *)(v65 + 48) = v93;
              long long v97 = (int32x4_t *)&v90->i8[v27];
              int32x4_t *v97 = v93;
              v97[1] = v93;
              long long v98 = (int32x4_t *)&v90->i8[v68];
              int32x4_t *v98 = v93;
              v98[1] = v93;
              int32x4_t v99 = (int32x4_t *)&v90->i8[v328];
              *int32x4_t v99 = v93;
              v99[1] = v93;
              uint64_t v92 = 4;
            }
            else if (v64[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v90, v27, v89, v91, v70, v26);
            }
            else
            {
              uint64_t v92 = 0;
              int32x4_t v93 = 0uLL;
              int16x8_t *v90 = 0u;
              *(_OWORD *)(v65 + 48) = 0u;
              uint64_t v94 = &v90->i8[v27];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
              int32x4_t v95 = &v90->i8[v68];
              *(_OWORD *)int32x4_t v95 = 0u;
              *((_OWORD *)v95 + 1) = 0u;
              v96 = &v90->i8[v328];
              *(_OWORD *)v96 = 0u;
              *((_OWORD *)v96 + 1) = 0u;
            }
            uint64_t v109 = v89 + v92;
            unsigned int v110 = (int16x8_t *)(v65 + v330);
            unsigned int v111 = v64[2];
            if (v111 == 127)
            {
              int32x4_t v113 = *(int32x4_t *)v109;
              int32x4_t v26 = *(int32x4_t *)(v109 + 16);
              int16x8_t v120 = *(int16x8_t *)(v109 + 32);
              int32x4_t v121 = *(int32x4_t *)(v109 + 48);
              long long v122 = *(_OWORD *)(v109 + 80);
              long long v123 = *(_OWORD *)(v109 + 96);
              long long v124 = *(_OWORD *)(v109 + 112);
              long long v125 = *(_OWORD *)(v109 + 64);
              int16x8_t *v110 = *(int16x8_t *)v109;
              v110[1] = v120;
              long long v126 = &v110->i8[v68];
              v127 = (int32x4_t *)&v110->i8[v27];
              int32x4_t *v127 = v26;
              v127[1] = v121;
              *(_OWORD *)long long v126 = v125;
              *((_OWORD *)v126 + 1) = v123;
              uint64_t v128 = &v110->i8[v68 + v27];
              *(_OWORD *)uint64_t v128 = v122;
              *((_OWORD *)v128 + 1) = v124;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              int32x4_t v113 = (int32x4_t)vld1q_dup_f32((const float *)v109);
              int16x8_t *v110 = (int16x8_t)v113;
              v110[1] = (int16x8_t)v113;
              v117 = (int32x4_t *)&v110->i8[v27];
              int32x4_t *v117 = v113;
              v117[1] = v113;
              long long v118 = (int32x4_t *)&v110->i8[v68];
              int32x4_t *v118 = v113;
              v118[1] = v113;
              long long v119 = (int32x4_t *)&v110->i8[v328];
              *long long v119 = v113;
              v119[1] = v113;
              uint64_t v112 = 4;
            }
            else if (v64[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v330), v27, v109, v111, v93, v26);
            }
            else
            {
              uint64_t v112 = 0;
              int32x4_t v113 = 0uLL;
              int16x8_t *v110 = 0u;
              v110[1] = 0u;
              float32x4_t v114 = &v110->i8[v27];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v110->i8[v68];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
              float32x4_t v116 = &v110->i8[v328];
              *(_OWORD *)float32x4_t v116 = 0u;
              *((_OWORD *)v116 + 1) = 0u;
            }
            uint64_t v129 = v109 + v112;
            unsigned int v130 = v110 + 2;
            unsigned int v131 = v64[3];
            if (v131 == 127)
            {
              int32x4_t v133 = *(int32x4_t *)v129;
              int32x4_t v26 = *(int32x4_t *)(v129 + 16);
              int16x8_t v140 = *(int16x8_t *)(v129 + 32);
              int32x4_t v141 = *(int32x4_t *)(v129 + 48);
              long long v142 = *(_OWORD *)(v129 + 80);
              long long v143 = *(_OWORD *)(v129 + 96);
              long long v144 = *(_OWORD *)(v129 + 112);
              long long v145 = *(_OWORD *)(v129 + 64);
              int16x8_t *v130 = *(int16x8_t *)v129;
              v110[3] = v140;
              long long v146 = &v130->i8[v68];
              long long v147 = (int32x4_t *)&v130->i8[v27];
              int32x4_t *v147 = v26;
              v147[1] = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v130->i8[v68 + v27];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v132 = 128;
            }
            else if (v131 == 3)
            {
              int32x4_t v133 = (int32x4_t)vld1q_dup_f32((const float *)v129);
              v110[2] = (int16x8_t)v133;
              v110[3] = (int16x8_t)v133;
              float32x4_t v137 = (int32x4_t *)&v130->i8[v27];
              int32x4_t *v137 = v133;
              v137[1] = v133;
              v138 = (int32x4_t *)&v130->i8[v68];
              int32x4_t *v138 = v133;
              v138[1] = v133;
              int16x8_t v139 = (int32x4_t *)&v130->i8[v328];
              *int16x8_t v139 = v133;
              v139[1] = v133;
              uint64_t v132 = 4;
            }
            else if (v64[3])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v27, v129, v131, v113, v26);
            }
            else
            {
              uint64_t v132 = 0;
              int32x4_t v133 = 0uLL;
              int16x8_t *v130 = 0u;
              v110[3] = 0u;
              uint64_t v134 = &v130->i8[v27];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v130->i8[v68];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              v136 = &v130->i8[v328];
              *(_OWORD *)v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v149 = v129 + v132;
            unsigned int v150 = (int16x8_t *)(v65 + 64);
            unsigned int v151 = v64[4];
            if (v151 == 127)
            {
              int32x4_t v153 = *(int32x4_t *)v149;
              int32x4_t v26 = *(int32x4_t *)(v149 + 16);
              long long v160 = *(_OWORD *)(v149 + 32);
              int32x4_t v161 = *(int32x4_t *)(v149 + 48);
              long long v162 = *(_OWORD *)(v149 + 80);
              long long v163 = *(_OWORD *)(v149 + 96);
              long long v164 = *(_OWORD *)(v149 + 112);
              long long v165 = *(_OWORD *)(v149 + 64);
              int16x8_t *v150 = *(int16x8_t *)v149;
              *(_OWORD *)(v65 + 80) = v160;
              long long v166 = &v150->i8[v68];
              long long v167 = (int32x4_t *)&v150->i8[v27];
              int32x4_t *v167 = v26;
              v167[1] = v161;
              *(_OWORD *)long long v166 = v165;
              *((_OWORD *)v166 + 1) = v163;
              uint64_t v168 = &v150->i8[v68 + v27];
              *(_OWORD *)uint64_t v168 = v162;
              *((_OWORD *)v168 + 1) = v164;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              int32x4_t v153 = (int32x4_t)vld1q_dup_f32((const float *)v149);
              *(int32x4_t *)(v65 + 64) = v153;
              *(int32x4_t *)(v65 + 80) = v153;
              unsigned int v157 = (int32x4_t *)&v150->i8[v27];
              *unsigned int v157 = v153;
              v157[1] = v153;
              float32x4_t v158 = (int32x4_t *)&v150->i8[v68];
              *float32x4_t v158 = v153;
              v158[1] = v153;
              int16x8_t v159 = (int32x4_t *)&v150->i8[v328];
              int32x4_t *v159 = v153;
              v159[1] = v153;
              uint64_t v152 = 4;
            }
            else if (v64[4])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v27, v149, v151, v133, v26);
            }
            else
            {
              uint64_t v152 = 0;
              int32x4_t v153 = 0uLL;
              int16x8_t *v150 = 0u;
              *(_OWORD *)(v65 + 80) = 0u;
              uint64_t v154 = &v150->i8[v27];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v150->i8[v68];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v150->i8[v328];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
            }
            uint64_t v169 = v149 + v152;
            unsigned int v170 = (int16x8_t *)(v65 + 96);
            unsigned int v171 = v64[5];
            if (v171 == 127)
            {
              int32x4_t v173 = *(int32x4_t *)v169;
              int32x4_t v26 = *(int32x4_t *)(v169 + 16);
              long long v180 = *(_OWORD *)(v169 + 32);
              int32x4_t v181 = *(int32x4_t *)(v169 + 48);
              long long v182 = *(_OWORD *)(v169 + 80);
              long long v183 = *(_OWORD *)(v169 + 96);
              long long v184 = *(_OWORD *)(v169 + 112);
              long long v185 = *(_OWORD *)(v169 + 64);
              *unsigned int v170 = *(int16x8_t *)v169;
              *(_OWORD *)(v65 + 112) = v180;
              long long v186 = &v170->i8[v68];
              long long v187 = (int32x4_t *)&v170->i8[v27];
              *long long v187 = v26;
              v187[1] = v181;
              *(_OWORD *)long long v186 = v185;
              *((_OWORD *)v186 + 1) = v183;
              uint64_t v188 = &v170->i8[v68 + v27];
              *(_OWORD *)uint64_t v188 = v182;
              *((_OWORD *)v188 + 1) = v184;
              uint64_t v172 = 128;
            }
            else if (v171 == 3)
            {
              int32x4_t v173 = (int32x4_t)vld1q_dup_f32((const float *)v169);
              *(int32x4_t *)(v65 + 96) = v173;
              *(int32x4_t *)(v65 + 112) = v173;
              float32x4_t v177 = (int32x4_t *)&v170->i8[v27];
              *float32x4_t v177 = v173;
              v177[1] = v173;
              v178 = (int32x4_t *)&v170->i8[v68];
              int32x4_t *v178 = v173;
              v178[1] = v173;
              long long v179 = (int32x4_t *)&v170->i8[v328];
              *long long v179 = v173;
              v179[1] = v173;
              uint64_t v172 = 4;
            }
            else if (v64[5])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v170, v27, v169, v171, v153, v26);
            }
            else
            {
              uint64_t v172 = 0;
              int32x4_t v173 = 0uLL;
              *unsigned int v170 = 0u;
              *(_OWORD *)(v65 + 112) = 0u;
              unsigned int v174 = &v170->i8[v27];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v170->i8[v68];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              uint64_t v176 = &v170->i8[v328];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            a7 = v336;
            uint64_t v189 = v169 + v172;
            unsigned int v190 = v110 + 4;
            unsigned int v191 = v64[6];
            if (v191 == 127)
            {
              int32x4_t v193 = *(int32x4_t *)v189;
              int32x4_t v26 = *(int32x4_t *)(v189 + 16);
              int16x8_t v200 = *(int16x8_t *)(v189 + 32);
              int32x4_t v201 = *(int32x4_t *)(v189 + 48);
              long long v202 = *(_OWORD *)(v189 + 80);
              long long v203 = *(_OWORD *)(v189 + 96);
              long long v204 = *(_OWORD *)(v189 + 112);
              long long v205 = *(_OWORD *)(v189 + 64);
              *unsigned int v190 = *(int16x8_t *)v189;
              v110[5] = v200;
              long long v206 = &v190->i8[v68];
              long long v207 = (int32x4_t *)&v190->i8[v27];
              *long long v207 = v26;
              v207[1] = v201;
              *(_OWORD *)long long v206 = v205;
              *((_OWORD *)v206 + 1) = v203;
              uint64_t v208 = &v190->i8[v68 + v27];
              *(_OWORD *)uint64_t v208 = v202;
              *((_OWORD *)v208 + 1) = v204;
              uint64_t v192 = 128;
            }
            else if (v191 == 3)
            {
              int32x4_t v193 = (int32x4_t)vld1q_dup_f32((const float *)v189);
              v110[4] = (int16x8_t)v193;
              v110[5] = (int16x8_t)v193;
              int v197 = (int32x4_t *)&v190->i8[v27];
              *int v197 = v193;
              v197[1] = v193;
              float32x4_t v198 = (int32x4_t *)&v190->i8[v68];
              *float32x4_t v198 = v193;
              v198[1] = v193;
              long long v199 = (int32x4_t *)&v190->i8[v328];
              *long long v199 = v193;
              v199[1] = v193;
              uint64_t v192 = 4;
            }
            else if (v64[6])
            {
              uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v190, v27, v189, v191, v173, v26);
            }
            else
            {
              uint64_t v192 = 0;
              int32x4_t v193 = 0uLL;
              *unsigned int v190 = 0u;
              v110[5] = 0u;
              uint64_t v194 = &v190->i8[v27];
              *(_OWORD *)uint64_t v194 = 0u;
              *((_OWORD *)v194 + 1) = 0u;
              unsigned int v195 = &v190->i8[v68];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v190->i8[v328];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
            }
            uint64_t v209 = v189 + v192;
            unsigned int v210 = v110 + 6;
            unsigned int v211 = v64[7];
            if (v211 == 127)
            {
              int32x4_t v25 = *(int32x4_t *)v209;
              int32x4_t v26 = *(int32x4_t *)(v209 + 16);
              int16x8_t v215 = *(int16x8_t *)(v209 + 32);
              int32x4_t v216 = *(int32x4_t *)(v209 + 48);
              long long v217 = *(_OWORD *)(v209 + 64);
              long long v218 = *(_OWORD *)(v209 + 80);
              long long v219 = *(_OWORD *)(v209 + 96);
              long long v220 = *(_OWORD *)(v209 + 112);
              *unsigned int v210 = *(int16x8_t *)v209;
              v110[7] = v215;
              long long v221 = &v210->i8[v68];
              long long v222 = (int32x4_t *)&v210->i8[v27];
              *long long v222 = v26;
              v222[1] = v216;
              *(_OWORD *)long long v221 = v217;
              *((_OWORD *)v221 + 1) = v219;
              long long v223 = &v210->i8[v68 + v27];
              *(_OWORD *)long long v223 = v218;
              *((_OWORD *)v223 + 1) = v220;
              uint64_t v16 = v346;
            }
            else
            {
              uint64_t v16 = v346;
              if (v211 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v209);
                v110[6] = (int16x8_t)v25;
                v110[7] = (int16x8_t)v25;
LABEL_149:
                int32x4_t v212 = (int32x4_t *)&v210->i8[v27];
                *int32x4_t v212 = v25;
                v212[1] = v25;
                BOOL v213 = (int32x4_t *)&v210->i8[v68];
                *BOOL v213 = v25;
                v213[1] = v25;
                uint64_t v214 = (int32x4_t *)&v210->i8[v328];
                *uint64_t v214 = v25;
                v214[1] = v25;
              }
              else
              {
                if (!v211)
                {
                  int32x4_t v25 = 0uLL;
                  *unsigned int v210 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v210, v27, v209, v211, v193, v26);
              }
            }
LABEL_27:
            unsigned int v33 = v31 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v346;
          block[5] = v63;
          char v357 = v38;
          char v358 = v349;
          unsigned int v353 = v331;
          unsigned int v354 = v36 - v34;
          block[6] = v64;
          uint64_t v351 = v65;
          uint64_t v27 = a11;
          uint64_t v352 = a11;
          unsigned int v355 = v343;
          unsigned int v356 = v37;
          if (v39)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v346 + 8) + 7384), block);
            a7 = v336;
            uint64_t v16 = v346;
            goto LABEL_27;
          }
          unsigned int v74 = *v64;
          a7 = v336;
          if (v74 == 127)
          {
            int32x4_t v76 = *v63;
            int32x4_t v26 = v63[1];
            int32x4_t v224 = v63[2];
            int32x4_t v225 = v63[3];
            int32x4_t v226 = v63[4];
            int32x4_t v227 = v63[5];
            int32x4_t v228 = v63[6];
            int32x4_t v229 = v63[7];
            int16x8_t v360 = *(int16x8_t *)v63;
            int32x4_t v361 = v224;
            int32x4_t v368 = v26;
            int32x4_t v369 = v225;
            int32x4_t v376 = v226;
            int32x4_t v377 = v228;
            int32x4_t v384 = v227;
            int32x4_t v385 = v229;
            uint64_t v75 = 128;
          }
          else if (v74 == 3)
          {
            int32x4_t v76 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
            int16x8_t v360 = (int16x8_t)v76;
            int32x4_t v361 = v76;
            int32x4_t v368 = v76;
            int32x4_t v369 = v76;
            int32x4_t v376 = v76;
            int32x4_t v377 = v76;
            int32x4_t v384 = v76;
            int32x4_t v385 = v76;
            uint64_t v75 = 4;
          }
          else if (*v64)
          {
            uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v360, 128, (uint64_t)v63, v74, v25, v26);
          }
          else
          {
            uint64_t v75 = 0;
            int32x4_t v76 = 0uLL;
            int32x4_t v361 = 0u;
            int16x8_t v360 = 0u;
            int32x4_t v368 = 0u;
            int32x4_t v369 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v384 = 0u;
            int32x4_t v385 = 0u;
          }
          uint64_t v230 = (uint64_t)v63->i64 + v75;
          unsigned int v231 = v64[1];
          if (v231 == 127)
          {
            int32x4_t v233 = *(int32x4_t *)v230;
            int32x4_t v26 = *(int32x4_t *)(v230 + 16);
            int32x4_t v234 = *(int32x4_t *)(v230 + 32);
            int32x4_t v235 = *(int32x4_t *)(v230 + 48);
            int32x4_t v236 = *(int32x4_t *)(v230 + 64);
            int32x4_t v237 = *(int32x4_t *)(v230 + 80);
            int32x4_t v238 = *(int32x4_t *)(v230 + 96);
            int32x4_t v239 = *(int32x4_t *)(v230 + 112);
            int16x8_t v362 = *(int16x8_t *)v230;
            int32x4_t v363 = v234;
            int32x4_t v370 = v26;
            int32x4_t v371 = v235;
            int32x4_t v378 = v236;
            int32x4_t v379 = v238;
            int32x4_t v386 = v237;
            int32x4_t v387 = v239;
            uint64_t v232 = 128;
          }
          else if (v231 == 3)
          {
            int32x4_t v233 = (int32x4_t)vld1q_dup_f32((const float *)v230);
            int16x8_t v362 = (int16x8_t)v233;
            int32x4_t v363 = v233;
            int32x4_t v370 = v233;
            int32x4_t v371 = v233;
            int32x4_t v378 = v233;
            int32x4_t v379 = v233;
            int32x4_t v386 = v233;
            int32x4_t v387 = v233;
            uint64_t v232 = 4;
          }
          else if (v64[1])
          {
            uint64_t v232 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v362, 128, v230, v231, v76, v26);
          }
          else
          {
            uint64_t v232 = 0;
            int32x4_t v233 = 0uLL;
            int16x8_t v362 = 0u;
            int32x4_t v363 = 0u;
            int32x4_t v370 = 0u;
            int32x4_t v371 = 0u;
            int32x4_t v378 = 0u;
            int32x4_t v379 = 0u;
            int32x4_t v386 = 0u;
            int32x4_t v387 = 0u;
          }
          uint64_t v240 = v230 + v232;
          unsigned int v241 = v64[2];
          if (v241 == 127)
          {
            int32x4_t v243 = *(int32x4_t *)v240;
            int32x4_t v26 = *(int32x4_t *)(v240 + 16);
            int32x4_t v244 = *(int32x4_t *)(v240 + 32);
            int32x4_t v245 = *(int32x4_t *)(v240 + 48);
            int32x4_t v246 = *(int32x4_t *)(v240 + 64);
            int32x4_t v247 = *(int32x4_t *)(v240 + 80);
            int32x4_t v248 = *(int32x4_t *)(v240 + 96);
            int32x4_t v249 = *(int32x4_t *)(v240 + 112);
            int16x8_t v392 = *(int16x8_t *)v240;
            int32x4_t v393 = v244;
            int32x4_t v400 = v26;
            int32x4_t v401 = v245;
            int32x4_t v408 = v246;
            int32x4_t v409 = v248;
            int32x4_t v416 = v247;
            int32x4_t v417 = v249;
            uint64_t v242 = 128;
          }
          else if (v241 == 3)
          {
            int32x4_t v243 = (int32x4_t)vld1q_dup_f32((const float *)v240);
            int16x8_t v392 = (int16x8_t)v243;
            int32x4_t v393 = v243;
            int32x4_t v400 = v243;
            int32x4_t v401 = v243;
            int32x4_t v408 = v243;
            int32x4_t v409 = v243;
            int32x4_t v416 = v243;
            int32x4_t v417 = v243;
            uint64_t v242 = 4;
          }
          else if (v64[2])
          {
            uint64_t v242 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v392, 128, v240, v241, v233, v26);
          }
          else
          {
            uint64_t v242 = 0;
            int32x4_t v243 = 0uLL;
            int16x8_t v392 = 0u;
            int32x4_t v393 = 0u;
            int32x4_t v400 = 0u;
            int32x4_t v401 = 0u;
            int32x4_t v408 = 0u;
            int32x4_t v409 = 0u;
            int32x4_t v416 = 0u;
            int32x4_t v417 = 0u;
          }
          uint64_t v250 = v240 + v242;
          unsigned int v251 = v64[3];
          if (v251 == 127)
          {
            int32x4_t v253 = *(int32x4_t *)v250;
            int32x4_t v26 = *(int32x4_t *)(v250 + 16);
            int32x4_t v254 = *(int32x4_t *)(v250 + 32);
            int32x4_t v255 = *(int32x4_t *)(v250 + 48);
            int32x4_t v256 = *(int32x4_t *)(v250 + 64);
            int32x4_t v257 = *(int32x4_t *)(v250 + 80);
            int32x4_t v258 = *(int32x4_t *)(v250 + 96);
            int32x4_t v259 = *(int32x4_t *)(v250 + 112);
            int16x8_t v394 = *(int16x8_t *)v250;
            int32x4_t v395 = v254;
            int32x4_t v402 = v26;
            int32x4_t v403 = v255;
            int32x4_t v410 = v256;
            int32x4_t v411 = v258;
            int32x4_t v418 = v257;
            int32x4_t v419 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            int32x4_t v253 = (int32x4_t)vld1q_dup_f32((const float *)v250);
            int16x8_t v394 = (int16x8_t)v253;
            int32x4_t v395 = v253;
            int32x4_t v402 = v253;
            int32x4_t v403 = v253;
            int32x4_t v410 = v253;
            int32x4_t v411 = v253;
            int32x4_t v418 = v253;
            int32x4_t v419 = v253;
            uint64_t v252 = 4;
          }
          else if (v64[3])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 128, v250, v251, v243, v26);
          }
          else
          {
            uint64_t v252 = 0;
            int32x4_t v253 = 0uLL;
            int16x8_t v394 = 0u;
            int32x4_t v395 = 0u;
            int32x4_t v402 = 0u;
            int32x4_t v403 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
            int32x4_t v418 = 0u;
            int32x4_t v419 = 0u;
          }
          uint64_t v260 = v250 + v252;
          unsigned int v261 = v64[4];
          if (v261 == 127)
          {
            int32x4_t v263 = *(int32x4_t *)v260;
            int32x4_t v26 = *(int32x4_t *)(v260 + 16);
            int32x4_t v264 = *(int32x4_t *)(v260 + 32);
            int32x4_t v265 = *(int32x4_t *)(v260 + 48);
            int32x4_t v266 = *(int32x4_t *)(v260 + 64);
            int32x4_t v267 = *(int32x4_t *)(v260 + 80);
            int32x4_t v268 = *(int32x4_t *)(v260 + 96);
            int32x4_t v269 = *(int32x4_t *)(v260 + 112);
            int16x8_t v364 = *(int16x8_t *)v260;
            int32x4_t v365 = v264;
            int32x4_t v372 = v26;
            int32x4_t v373 = v265;
            int32x4_t v380 = v266;
            int32x4_t v381 = v268;
            int32x4_t v388 = v267;
            int32x4_t v389 = v269;
            uint64_t v262 = 128;
          }
          else if (v261 == 3)
          {
            int32x4_t v263 = (int32x4_t)vld1q_dup_f32((const float *)v260);
            int16x8_t v364 = (int16x8_t)v263;
            int32x4_t v365 = v263;
            int32x4_t v372 = v263;
            int32x4_t v373 = v263;
            int32x4_t v380 = v263;
            int32x4_t v381 = v263;
            int32x4_t v388 = v263;
            int32x4_t v389 = v263;
            uint64_t v262 = 4;
          }
          else if (v64[4])
          {
            uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v364, 128, v260, v261, v253, v26);
          }
          else
          {
            uint64_t v262 = 0;
            int32x4_t v263 = 0uLL;
            int16x8_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v388 = 0u;
            int32x4_t v389 = 0u;
          }
          uint64_t v270 = v260 + v262;
          unsigned int v271 = v64[5];
          if (v271 == 127)
          {
            int32x4_t v273 = *(int32x4_t *)v270;
            int32x4_t v26 = *(int32x4_t *)(v270 + 16);
            int32x4_t v274 = *(int32x4_t *)(v270 + 32);
            int32x4_t v275 = *(int32x4_t *)(v270 + 48);
            int32x4_t v276 = *(int32x4_t *)(v270 + 64);
            int32x4_t v277 = *(int32x4_t *)(v270 + 80);
            int32x4_t v278 = *(int32x4_t *)(v270 + 96);
            int32x4_t v279 = *(int32x4_t *)(v270 + 112);
            int16x8_t v366 = *(int16x8_t *)v270;
            int32x4_t v367 = v274;
            int32x4_t v374 = v26;
            int32x4_t v375 = v275;
            int32x4_t v382 = v276;
            int32x4_t v383 = v278;
            int32x4_t v390 = v277;
            int32x4_t v391 = v279;
            uint64_t v272 = 128;
          }
          else if (v271 == 3)
          {
            int32x4_t v273 = (int32x4_t)vld1q_dup_f32((const float *)v270);
            int16x8_t v366 = (int16x8_t)v273;
            int32x4_t v367 = v273;
            int32x4_t v374 = v273;
            int32x4_t v375 = v273;
            int32x4_t v382 = v273;
            int32x4_t v383 = v273;
            int32x4_t v390 = v273;
            int32x4_t v391 = v273;
            uint64_t v272 = 4;
          }
          else if (v64[5])
          {
            uint64_t v272 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v270, v271, v263, v26);
          }
          else
          {
            uint64_t v272 = 0;
            int32x4_t v273 = 0uLL;
            int16x8_t v366 = 0u;
            int32x4_t v367 = 0u;
            int32x4_t v374 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
            int32x4_t v390 = 0u;
            int32x4_t v391 = 0u;
          }
          uint64_t v280 = v270 + v272;
          unsigned int v281 = v64[6];
          if (v281 == 127)
          {
            int32x4_t v283 = *(int32x4_t *)v280;
            int32x4_t v26 = *(int32x4_t *)(v280 + 16);
            int32x4_t v284 = *(int32x4_t *)(v280 + 32);
            int32x4_t v285 = *(int32x4_t *)(v280 + 48);
            int32x4_t v286 = *(int32x4_t *)(v280 + 64);
            int32x4_t v287 = *(int32x4_t *)(v280 + 80);
            int32x4_t v288 = *(int32x4_t *)(v280 + 96);
            int32x4_t v289 = *(int32x4_t *)(v280 + 112);
            int16x8_t v396 = *(int16x8_t *)v280;
            int32x4_t v397 = v284;
            int32x4_t v404 = v26;
            int32x4_t v405 = v285;
            int32x4_t v412 = v286;
            int32x4_t v413 = v288;
            int32x4_t v420 = v287;
            int32x4_t v421 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            int32x4_t v283 = (int32x4_t)vld1q_dup_f32((const float *)v280);
            int16x8_t v396 = (int16x8_t)v283;
            int32x4_t v397 = v283;
            int32x4_t v404 = v283;
            int32x4_t v405 = v283;
            int32x4_t v412 = v283;
            int32x4_t v413 = v283;
            int32x4_t v420 = v283;
            int32x4_t v421 = v283;
            uint64_t v282 = 4;
          }
          else if (v64[6])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 128, v280, v281, v273, v26);
          }
          else
          {
            uint64_t v282 = 0;
            int32x4_t v283 = 0uLL;
            int16x8_t v396 = 0u;
            int32x4_t v397 = 0u;
            int32x4_t v404 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
            int32x4_t v420 = 0u;
            int32x4_t v421 = 0u;
          }
          uint64_t v290 = v280 + v282;
          unsigned int v291 = v64[7];
          if (v291 == 127)
          {
            int32x4_t v25 = *(int32x4_t *)v290;
            int32x4_t v26 = *(int32x4_t *)(v290 + 16);
            int32x4_t v292 = *(int32x4_t *)(v290 + 32);
            int32x4_t v293 = *(int32x4_t *)(v290 + 48);
            int32x4_t v294 = *(int32x4_t *)(v290 + 80);
            int32x4_t v295 = *(int32x4_t *)(v290 + 96);
            int32x4_t v296 = *(int32x4_t *)(v290 + 112);
            int32x4_t v297 = *(int32x4_t *)(v290 + 64);
            int16x8_t v398 = *(int16x8_t *)v290;
            int32x4_t v399 = v292;
            int32x4_t v406 = v26;
            int32x4_t v407 = v293;
            int32x4_t v414 = v297;
            int32x4_t v415 = v295;
            int32x4_t v422 = v294;
            int32x4_t v423 = v296;
            uint64_t v16 = v346;
            unsigned int v33 = v31 + 1;
          }
          else
          {
            uint64_t v16 = v346;
            unsigned int v33 = v31 + 1;
            if (v291 == 3)
            {
              int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v290);
              int16x8_t v398 = (int16x8_t)v25;
              int32x4_t v399 = v25;
              int32x4_t v406 = v25;
              int32x4_t v407 = v25;
              int32x4_t v414 = v25;
              int32x4_t v415 = v25;
              int32x4_t v422 = v25;
              int32x4_t v423 = v25;
            }
            else if (v291)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v398, 128, v290, v291, v283, v26);
            }
            else
            {
              int32x4_t v25 = 0uLL;
              int16x8_t v398 = 0u;
              int32x4_t v399 = 0u;
              int32x4_t v406 = 0u;
              int32x4_t v407 = 0u;
              int32x4_t v414 = 0u;
              int32x4_t v415 = 0u;
              int32x4_t v422 = 0u;
              int32x4_t v423 = 0u;
            }
          }
          unint64_t v298 = v355;
          if (v355)
          {
            unint64_t v299 = 0;
            unsigned int v300 = &v360.i8[128 * (unint64_t)v353 + 8 * v354];
            unsigned int v301 = v356;
            do
            {
              if (v301)
              {
                uint64_t v302 = 0;
                uint64_t v303 = v351 + v352 * v299;
                do
                {
                  *(unsigned char *)(v303 + v302) = v300[v302];
                  ++v302;
                  unsigned int v301 = v356;
                }
                while (8 * (unint64_t)v356 > v302);
                unint64_t v298 = v355;
              }
              ++v299;
              v300 += 128;
            }
            while (v299 < v298);
          }
LABEL_28:
          BOOL v21 = v31 == v337 >> 4;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v327;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v424 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v345 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v325 = a8 + a10 - 1;
  unsigned int v327 = v325 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v339 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v327)
  {
    unsigned int v337 = a7 + a9 - 1;
    unsigned int v324 = a7 >> 4;
    if (a7 >> 4 <= v337 >> 4)
    {
      uint64_t v27 = a11;
      unsigned int v321 = a5 - 1;
      unsigned int v348 = (a5 - 1) >> 4;
      int v347 = ((a5 - 1) & 0xF) + 1;
      int v322 = ((a6 - 1) & 7) + 1;
      unsigned int v323 = (a6 - 1) >> 3;
      uint64_t v330 = 4 * a11;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v26.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v28, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v25.i8 = vbic_s8(*(int8x8_t *)v26.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v28));
      __int32 v335 = v25.i32[0] | v25.i32[1];
      uint64_t v334 = v25.i64[0];
      BOOL v333 = v25.i32[0] != 0;
      BOOL v332 = v25.i32[1] != 0;
      unint64_t v320 = 8 * v19 * (unint64_t)v18;
      unsigned int v336 = a7;
      uint64_t v346 = v16;
      uint64_t v328 = 3 * a11;
      uint64_t v329 = 2 * a11;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v345) {
          int v30 = v345;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v324;
        if (v325 < v29) {
          unsigned int v29 = v325;
        }
        unsigned int v344 = 8 * v17;
        int v331 = v30 - 8 * v17;
        int v343 = v29 - v30 + 1;
        int v32 = v322;
        if (v17 != v323) {
          int v32 = 8;
        }
        unsigned int v349 = v32;
        uint64_t v342 = a2 + (v30 - v345) * v27;
        do
        {
          unsigned int v34 = 16 * v31;
          unsigned int v35 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v31;
          }
          if (v337 < v35) {
            unsigned int v35 = v337;
          }
          int v37 = v35 - v36 + 1;
          if (v31 == v348) {
            unsigned int v38 = v347;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v344 >= v345 && v34 >= a7)
          {
            int v40 = v347;
            if (v31 != v348) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v343 != v349;
          }
          if (isLevelTiled)
          {
            unsigned int v304 = 0;
            uint64_t v305 = v320 >> (*(unsigned char *)(v16 + 57) != 0);
            char v306 = 1;
            if (v305 > 127)
            {
              if (v305 > 511)
              {
                if (v305 == 512)
                {
                  char v307 = 0;
                  unsigned int v304 = 16;
                  unsigned int v308 = 16;
                }
                else
                {
                  char v307 = 1;
                  unsigned int v308 = 0;
                  if (v305 == 1024)
                  {
                    unsigned int v308 = 8;
                    unsigned int v304 = 16;
                  }
                }
              }
              else if (v305 == 128)
              {
                char v306 = 0;
                char v307 = 0;
                unsigned int v304 = 32;
                unsigned int v308 = 32;
              }
              else
              {
                char v307 = 1;
                unsigned int v308 = 0;
                if (v305 == 256)
                {
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 16;
                  unsigned int v304 = 32;
                }
              }
            }
            else
            {
              char v307 = 1;
              unsigned int v308 = 0;
              switch(v305)
              {
                case 4:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 128;
                  unsigned int v304 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v304 = 128;
                  unsigned int v308 = 128;
                  break;
                case 16:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v308 = 64;
                  unsigned int v304 = 128;
                  break;
                case 32:
                  char v306 = 0;
                  char v307 = 0;
                  unsigned int v304 = 64;
                  unsigned int v308 = 64;
                  break;
                default:
                  if (v305 == 64)
                  {
                    char v306 = 0;
                    char v307 = 0;
                    unsigned int v308 = 32;
                    unsigned int v304 = 64;
                  }
                  break;
              }
            }
            unsigned int v309 = (v304 >> 4) - 1;
            if (v306) {
              unsigned int v310 = 0;
            }
            else {
              unsigned int v310 = 32 - __clz(~(-1 << -(char)__clz(v309)));
            }
            unsigned int v311 = (v308 >> 3) - 1;
            if (v307)
            {
              unsigned int v312 = 0;
              if (v310) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v312 = 32 - __clz(~(-1 << -(char)__clz(v311)));
              if (v312 | v310)
              {
LABEL_234:
                int v313 = 0;
                uint64_t v314 = 0;
                int v315 = v31 & v309;
                int v316 = v17 & v311;
                BOOL v317 = v312 != 0;
                BOOL v318 = v310 != 0;
                int v319 = 1;
                do
                {
                  --v312;
                  if (v317) {
                    v314 |= (unint64_t)(v319 & v316) << v313++;
                  }
                  else {
                    unsigned int v312 = 0;
                  }
                  --v310;
                  if (v318) {
                    v314 |= (unint64_t)(v319 & v315) << v313++;
                  }
                  else {
                    unsigned int v310 = 0;
                  }
                  v319 *= 2;
                  --v313;
                  BOOL v318 = v310 != 0;
                  BOOL v317 = v312 != 0;
                }
                while (v310 | v312);
                goto LABEL_246;
              }
            }
            uint64_t v314 = 0;
LABEL_246:
            unint64_t v49 = ((unint64_t)(v34 / v304 + v344 / v308 * ((v304 + v321) / v304)) << 14) + (v314 << 10);
            goto LABEL_60;
          }
          if (v335)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v333;
            BOOL v46 = v332;
            int v47 = v334;
            int v48 = HIDWORD(v334);
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v31) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 10;
LABEL_60:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v31) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(a3 + v49);
          if (v339)
          {
            memcpy(__dst, v63, sizeof(__dst));
            int v63 = (int32x4_t *)__dst;
          }
          int v64 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v65 = v342 + 8 * (v36 - a7);
          char v66 = v38 < 0x10 || v39;
          if ((v66 & 1) == 0 && v349 > 7)
          {
            unsigned int v67 = *v64;
            if (v67 == 127)
            {
              int32x4_t v70 = *v63;
              int32x4_t v26 = v63[1];
              int32x4_t v80 = v63[2];
              int32x4_t v81 = v63[3];
              int32x4_t v82 = v63[5];
              int32x4_t v83 = v63[6];
              int32x4_t v84 = v63[7];
              int32x4_t v85 = v63[4];
              uint64_t v68 = 2 * a11;
              *(int32x4_t *)uint64_t v65 = *v63;
              *(int32x4_t *)(v65 + 16) = v80;
              unsigned int v86 = (int32x4_t *)(v65 + v329);
              uint64_t v27 = a11;
              uint64_t v87 = (int32x4_t *)(v65 + a11);
              int32x4_t *v87 = v26;
              v87[1] = v81;
              int32x4_t *v86 = v85;
              v86[1] = v83;
              uint64_t v88 = (int32x4_t *)(v65 + v329 + a11);
              int32x4_t *v88 = v82;
              v88[1] = v84;
              uint64_t v69 = 128;
            }
            else
            {
              uint64_t v27 = a11;
              uint64_t v68 = 2 * a11;
              if (v67 == 3)
              {
                int32x4_t v70 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
                *(int32x4_t *)uint64_t v65 = v70;
                *(int32x4_t *)(v65 + 16) = v70;
                BOOL v77 = (int32x4_t *)(v65 + a11);
                *BOOL v77 = v70;
                v77[1] = v70;
                unint64_t v78 = (int32x4_t *)(v65 + v329);
                int32x4_t *v78 = v70;
                v78[1] = v70;
                float32x4_t v79 = (int32x4_t *)(v65 + v328);
                *float32x4_t v79 = v70;
                v79[1] = v70;
                uint64_t v69 = 4;
              }
              else if (*v64)
              {
                uint64_t v69 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)v65, a11, (uint64_t)v63, v67, v25, v26);
              }
              else
              {
                uint64_t v69 = 0;
                int32x4_t v70 = 0uLL;
                *(_OWORD *)uint64_t v65 = 0u;
                *(_OWORD *)(v65 + 16) = 0u;
                unsigned int v71 = (_OWORD *)(v65 + a11);
                *unsigned int v71 = 0u;
                v71[1] = 0u;
                int v72 = (_OWORD *)(v65 + v329);
                *int v72 = 0u;
                v72[1] = 0u;
                unint64_t v73 = (_OWORD *)(v65 + v328);
                _OWORD *v73 = 0u;
                v73[1] = 0u;
              }
            }
            uint64_t v89 = (uint64_t)v63->i64 + v69;
            unsigned int v90 = (int16x8_t *)(v65 + 32);
            unsigned int v91 = v64[1];
            if (v91 == 127)
            {
              int32x4_t v93 = *(int32x4_t *)v89;
              int32x4_t v26 = *(int32x4_t *)(v89 + 16);
              long long v100 = *(_OWORD *)(v89 + 32);
              int32x4_t v101 = *(int32x4_t *)(v89 + 48);
              long long v102 = *(_OWORD *)(v89 + 80);
              long long v103 = *(_OWORD *)(v89 + 96);
              long long v104 = *(_OWORD *)(v89 + 112);
              long long v105 = *(_OWORD *)(v89 + 64);
              int16x8_t *v90 = *(int16x8_t *)v89;
              *(_OWORD *)(v65 + 48) = v100;
              v106 = &v90->i8[v68];
              uint64_t v107 = (int32x4_t *)&v90->i8[v27];
              int32x4_t *v107 = v26;
              v107[1] = v101;
              *(_OWORD *)v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v90->i8[v68 + v27];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v92 = 128;
            }
            else if (v91 == 3)
            {
              int32x4_t v93 = (int32x4_t)vld1q_dup_f32((const float *)v89);
              *(int32x4_t *)(v65 + 32) = v93;
              *(int32x4_t *)(v65 + 48) = v93;
              long long v97 = (int32x4_t *)&v90->i8[v27];
              int32x4_t *v97 = v93;
              v97[1] = v93;
              long long v98 = (int32x4_t *)&v90->i8[v68];
              int32x4_t *v98 = v93;
              v98[1] = v93;
              int32x4_t v99 = (int32x4_t *)&v90->i8[v328];
              *int32x4_t v99 = v93;
              v99[1] = v93;
              uint64_t v92 = 4;
            }
            else if (v64[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v90, v27, v89, v91, v70, v26);
            }
            else
            {
              uint64_t v92 = 0;
              int32x4_t v93 = 0uLL;
              int16x8_t *v90 = 0u;
              *(_OWORD *)(v65 + 48) = 0u;
              uint64_t v94 = &v90->i8[v27];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
              int32x4_t v95 = &v90->i8[v68];
              *(_OWORD *)int32x4_t v95 = 0u;
              *((_OWORD *)v95 + 1) = 0u;
              v96 = &v90->i8[v328];
              *(_OWORD *)v96 = 0u;
              *((_OWORD *)v96 + 1) = 0u;
            }
            uint64_t v109 = v89 + v92;
            unsigned int v110 = (int16x8_t *)(v65 + v330);
            unsigned int v111 = v64[2];
            if (v111 == 127)
            {
              int32x4_t v113 = *(int32x4_t *)v109;
              int32x4_t v26 = *(int32x4_t *)(v109 + 16);
              int16x8_t v120 = *(int16x8_t *)(v109 + 32);
              int32x4_t v121 = *(int32x4_t *)(v109 + 48);
              long long v122 = *(_OWORD *)(v109 + 80);
              long long v123 = *(_OWORD *)(v109 + 96);
              long long v124 = *(_OWORD *)(v109 + 112);
              long long v125 = *(_OWORD *)(v109 + 64);
              int16x8_t *v110 = *(int16x8_t *)v109;
              v110[1] = v120;
              long long v126 = &v110->i8[v68];
              v127 = (int32x4_t *)&v110->i8[v27];
              int32x4_t *v127 = v26;
              v127[1] = v121;
              *(_OWORD *)long long v126 = v125;
              *((_OWORD *)v126 + 1) = v123;
              uint64_t v128 = &v110->i8[v68 + v27];
              *(_OWORD *)uint64_t v128 = v122;
              *((_OWORD *)v128 + 1) = v124;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              int32x4_t v113 = (int32x4_t)vld1q_dup_f32((const float *)v109);
              int16x8_t *v110 = (int16x8_t)v113;
              v110[1] = (int16x8_t)v113;
              v117 = (int32x4_t *)&v110->i8[v27];
              int32x4_t *v117 = v113;
              v117[1] = v113;
              long long v118 = (int32x4_t *)&v110->i8[v68];
              int32x4_t *v118 = v113;
              v118[1] = v113;
              long long v119 = (int32x4_t *)&v110->i8[v328];
              *long long v119 = v113;
              v119[1] = v113;
              uint64_t v112 = 4;
            }
            else if (v64[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int16x8_t *)(v65 + v330), v27, v109, v111, v93, v26);
            }
            else
            {
              uint64_t v112 = 0;
              int32x4_t v113 = 0uLL;
              int16x8_t *v110 = 0u;
              v110[1] = 0u;
              float32x4_t v114 = &v110->i8[v27];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              v115 = &v110->i8[v68];
              *(_OWORD *)v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
              float32x4_t v116 = &v110->i8[v328];
              *(_OWORD *)float32x4_t v116 = 0u;
              *((_OWORD *)v116 + 1) = 0u;
            }
            uint64_t v129 = v109 + v112;
            unsigned int v130 = v110 + 2;
            unsigned int v131 = v64[3];
            if (v131 == 127)
            {
              int32x4_t v133 = *(int32x4_t *)v129;
              int32x4_t v26 = *(int32x4_t *)(v129 + 16);
              int16x8_t v140 = *(int16x8_t *)(v129 + 32);
              int32x4_t v141 = *(int32x4_t *)(v129 + 48);
              long long v142 = *(_OWORD *)(v129 + 80);
              long long v143 = *(_OWORD *)(v129 + 96);
              long long v144 = *(_OWORD *)(v129 + 112);
              long long v145 = *(_OWORD *)(v129 + 64);
              int16x8_t *v130 = *(int16x8_t *)v129;
              v110[3] = v140;
              long long v146 = &v130->i8[v68];
              long long v147 = (int32x4_t *)&v130->i8[v27];
              int32x4_t *v147 = v26;
              v147[1] = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v130->i8[v68 + v27];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v132 = 128;
            }
            else if (v131 == 3)
            {
              int32x4_t v133 = (int32x4_t)vld1q_dup_f32((const float *)v129);
              v110[2] = (int16x8_t)v133;
              v110[3] = (int16x8_t)v133;
              float32x4_t v137 = (int32x4_t *)&v130->i8[v27];
              int32x4_t *v137 = v133;
              v137[1] = v133;
              v138 = (int32x4_t *)&v130->i8[v68];
              int32x4_t *v138 = v133;
              v138[1] = v133;
              int16x8_t v139 = (int32x4_t *)&v130->i8[v328];
              *int16x8_t v139 = v133;
              v139[1] = v133;
              uint64_t v132 = 4;
            }
            else if (v64[3])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v27, v129, v131, v113, v26);
            }
            else
            {
              uint64_t v132 = 0;
              int32x4_t v133 = 0uLL;
              int16x8_t *v130 = 0u;
              v110[3] = 0u;
              uint64_t v134 = &v130->i8[v27];
              *(_OWORD *)uint64_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v130->i8[v68];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              v136 = &v130->i8[v328];
              *(_OWORD *)v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v149 = v129 + v132;
            unsigned int v150 = (int16x8_t *)(v65 + 64);
            unsigned int v151 = v64[4];
            if (v151 == 127)
            {
              int32x4_t v153 = *(int32x4_t *)v149;
              int32x4_t v26 = *(int32x4_t *)(v149 + 16);
              long long v160 = *(_OWORD *)(v149 + 32);
              int32x4_t v161 = *(int32x4_t *)(v149 + 48);
              long long v162 = *(_OWORD *)(v149 + 80);
              long long v163 = *(_OWORD *)(v149 + 96);
              long long v164 = *(_OWORD *)(v149 + 112);
              long long v165 = *(_OWORD *)(v149 + 64);
              int16x8_t *v150 = *(int16x8_t *)v149;
              *(_OWORD *)(v65 + 80) = v160;
              long long v166 = &v150->i8[v68];
              long long v167 = (int32x4_t *)&v150->i8[v27];
              int32x4_t *v167 = v26;
              v167[1] = v161;
              *(_OWORD *)long long v166 = v165;
              *((_OWORD *)v166 + 1) = v163;
              uint64_t v168 = &v150->i8[v68 + v27];
              *(_OWORD *)uint64_t v168 = v162;
              *((_OWORD *)v168 + 1) = v164;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              int32x4_t v153 = (int32x4_t)vld1q_dup_f32((const float *)v149);
              *(int32x4_t *)(v65 + 64) = v153;
              *(int32x4_t *)(v65 + 80) = v153;
              unsigned int v157 = (int32x4_t *)&v150->i8[v27];
              *unsigned int v157 = v153;
              v157[1] = v153;
              float32x4_t v158 = (int32x4_t *)&v150->i8[v68];
              *float32x4_t v158 = v153;
              v158[1] = v153;
              int16x8_t v159 = (int32x4_t *)&v150->i8[v328];
              int32x4_t *v159 = v153;
              v159[1] = v153;
              uint64_t v152 = 4;
            }
            else if (v64[4])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v27, v149, v151, v133, v26);
            }
            else
            {
              uint64_t v152 = 0;
              int32x4_t v153 = 0uLL;
              int16x8_t *v150 = 0u;
              *(_OWORD *)(v65 + 80) = 0u;
              uint64_t v154 = &v150->i8[v27];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              v155 = &v150->i8[v68];
              *(_OWORD *)v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v150->i8[v328];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
            }
            uint64_t v169 = v149 + v152;
            unsigned int v170 = (int16x8_t *)(v65 + 96);
            unsigned int v171 = v64[5];
            if (v171 == 127)
            {
              int32x4_t v173 = *(int32x4_t *)v169;
              int32x4_t v26 = *(int32x4_t *)(v169 + 16);
              long long v180 = *(_OWORD *)(v169 + 32);
              int32x4_t v181 = *(int32x4_t *)(v169 + 48);
              long long v182 = *(_OWORD *)(v169 + 80);
              long long v183 = *(_OWORD *)(v169 + 96);
              long long v184 = *(_OWORD *)(v169 + 112);
              long long v185 = *(_OWORD *)(v169 + 64);
              *unsigned int v170 = *(int16x8_t *)v169;
              *(_OWORD *)(v65 + 112) = v180;
              long long v186 = &v170->i8[v68];
              long long v187 = (int32x4_t *)&v170->i8[v27];
              *long long v187 = v26;
              v187[1] = v181;
              *(_OWORD *)long long v186 = v185;
              *((_OWORD *)v186 + 1) = v183;
              uint64_t v188 = &v170->i8[v68 + v27];
              *(_OWORD *)uint64_t v188 = v182;
              *((_OWORD *)v188 + 1) = v184;
              uint64_t v172 = 128;
            }
            else if (v171 == 3)
            {
              int32x4_t v173 = (int32x4_t)vld1q_dup_f32((const float *)v169);
              *(int32x4_t *)(v65 + 96) = v173;
              *(int32x4_t *)(v65 + 112) = v173;
              float32x4_t v177 = (int32x4_t *)&v170->i8[v27];
              *float32x4_t v177 = v173;
              v177[1] = v173;
              v178 = (int32x4_t *)&v170->i8[v68];
              int32x4_t *v178 = v173;
              v178[1] = v173;
              long long v179 = (int32x4_t *)&v170->i8[v328];
              *long long v179 = v173;
              v179[1] = v173;
              uint64_t v172 = 4;
            }
            else if (v64[5])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v170, v27, v169, v171, v153, v26);
            }
            else
            {
              uint64_t v172 = 0;
              int32x4_t v173 = 0uLL;
              *unsigned int v170 = 0u;
              *(_OWORD *)(v65 + 112) = 0u;
              unsigned int v174 = &v170->i8[v27];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v170->i8[v68];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              uint64_t v176 = &v170->i8[v328];
              *(_OWORD *)uint64_t v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            a7 = v336;
            uint64_t v189 = v169 + v172;
            unsigned int v190 = v110 + 4;
            unsigned int v191 = v64[6];
            if (v191 == 127)
            {
              int32x4_t v193 = *(int32x4_t *)v189;
              int32x4_t v26 = *(int32x4_t *)(v189 + 16);
              int16x8_t v200 = *(int16x8_t *)(v189 + 32);
              int32x4_t v201 = *(int32x4_t *)(v189 + 48);
              long long v202 = *(_OWORD *)(v189 + 80);
              long long v203 = *(_OWORD *)(v189 + 96);
              long long v204 = *(_OWORD *)(v189 + 112);
              long long v205 = *(_OWORD *)(v189 + 64);
              *unsigned int v190 = *(int16x8_t *)v189;
              v110[5] = v200;
              long long v206 = &v190->i8[v68];
              long long v207 = (int32x4_t *)&v190->i8[v27];
              *long long v207 = v26;
              v207[1] = v201;
              *(_OWORD *)long long v206 = v205;
              *((_OWORD *)v206 + 1) = v203;
              uint64_t v208 = &v190->i8[v68 + v27];
              *(_OWORD *)uint64_t v208 = v202;
              *((_OWORD *)v208 + 1) = v204;
              uint64_t v192 = 128;
            }
            else if (v191 == 3)
            {
              int32x4_t v193 = (int32x4_t)vld1q_dup_f32((const float *)v189);
              v110[4] = (int16x8_t)v193;
              v110[5] = (int16x8_t)v193;
              int v197 = (int32x4_t *)&v190->i8[v27];
              *int v197 = v193;
              v197[1] = v193;
              float32x4_t v198 = (int32x4_t *)&v190->i8[v68];
              *float32x4_t v198 = v193;
              v198[1] = v193;
              long long v199 = (int32x4_t *)&v190->i8[v328];
              *long long v199 = v193;
              v199[1] = v193;
              uint64_t v192 = 4;
            }
            else if (v64[6])
            {
              uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v190, v27, v189, v191, v173, v26);
            }
            else
            {
              uint64_t v192 = 0;
              int32x4_t v193 = 0uLL;
              *unsigned int v190 = 0u;
              v110[5] = 0u;
              uint64_t v194 = &v190->i8[v27];
              *(_OWORD *)uint64_t v194 = 0u;
              *((_OWORD *)v194 + 1) = 0u;
              unsigned int v195 = &v190->i8[v68];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v190->i8[v328];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
            }
            uint64_t v209 = v189 + v192;
            unsigned int v210 = v110 + 6;
            unsigned int v211 = v64[7];
            if (v211 == 127)
            {
              int32x4_t v25 = *(int32x4_t *)v209;
              int32x4_t v26 = *(int32x4_t *)(v209 + 16);
              int16x8_t v215 = *(int16x8_t *)(v209 + 32);
              int32x4_t v216 = *(int32x4_t *)(v209 + 48);
              long long v217 = *(_OWORD *)(v209 + 64);
              long long v218 = *(_OWORD *)(v209 + 80);
              long long v219 = *(_OWORD *)(v209 + 96);
              long long v220 = *(_OWORD *)(v209 + 112);
              *unsigned int v210 = *(int16x8_t *)v209;
              v110[7] = v215;
              long long v221 = &v210->i8[v68];
              long long v222 = (int32x4_t *)&v210->i8[v27];
              *long long v222 = v26;
              v222[1] = v216;
              *(_OWORD *)long long v221 = v217;
              *((_OWORD *)v221 + 1) = v219;
              long long v223 = &v210->i8[v68 + v27];
              *(_OWORD *)long long v223 = v218;
              *((_OWORD *)v223 + 1) = v220;
              uint64_t v16 = v346;
            }
            else
            {
              uint64_t v16 = v346;
              if (v211 == 3)
              {
                int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v209);
                v110[6] = (int16x8_t)v25;
                v110[7] = (int16x8_t)v25;
LABEL_149:
                int32x4_t v212 = (int32x4_t *)&v210->i8[v27];
                *int32x4_t v212 = v25;
                v212[1] = v25;
                BOOL v213 = (int32x4_t *)&v210->i8[v68];
                *BOOL v213 = v25;
                v213[1] = v25;
                uint64_t v214 = (int32x4_t *)&v210->i8[v328];
                *uint64_t v214 = v25;
                v214[1] = v25;
              }
              else
              {
                if (!v211)
                {
                  int32x4_t v25 = 0uLL;
                  *unsigned int v210 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v210, v27, v209, v211, v193, v26);
              }
            }
LABEL_27:
            unsigned int v33 = v31 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v346;
          block[5] = v63;
          char v357 = v38;
          char v358 = v349;
          unsigned int v353 = v331;
          unsigned int v354 = v36 - v34;
          block[6] = v64;
          uint64_t v351 = v65;
          uint64_t v27 = a11;
          uint64_t v352 = a11;
          unsigned int v355 = v343;
          unsigned int v356 = v37;
          if (v39)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v346 + 8) + 7384), block);
            a7 = v336;
            uint64_t v16 = v346;
            goto LABEL_27;
          }
          unsigned int v74 = *v64;
          a7 = v336;
          if (v74 == 127)
          {
            int32x4_t v76 = *v63;
            int32x4_t v26 = v63[1];
            int32x4_t v224 = v63[2];
            int32x4_t v225 = v63[3];
            int32x4_t v226 = v63[4];
            int32x4_t v227 = v63[5];
            int32x4_t v228 = v63[6];
            int32x4_t v229 = v63[7];
            int16x8_t v360 = *(int16x8_t *)v63;
            int32x4_t v361 = v224;
            int32x4_t v368 = v26;
            int32x4_t v369 = v225;
            int32x4_t v376 = v226;
            int32x4_t v377 = v228;
            int32x4_t v384 = v227;
            int32x4_t v385 = v229;
            uint64_t v75 = 128;
          }
          else if (v74 == 3)
          {
            int32x4_t v76 = (int32x4_t)vld1q_dup_f32((const float *)v63->i32);
            int16x8_t v360 = (int16x8_t)v76;
            int32x4_t v361 = v76;
            int32x4_t v368 = v76;
            int32x4_t v369 = v76;
            int32x4_t v376 = v76;
            int32x4_t v377 = v76;
            int32x4_t v384 = v76;
            int32x4_t v385 = v76;
            uint64_t v75 = 4;
          }
          else if (*v64)
          {
            uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v360, 128, (uint64_t)v63, v74, v25, v26);
          }
          else
          {
            uint64_t v75 = 0;
            int32x4_t v76 = 0uLL;
            int32x4_t v361 = 0u;
            int16x8_t v360 = 0u;
            int32x4_t v368 = 0u;
            int32x4_t v369 = 0u;
            int32x4_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v384 = 0u;
            int32x4_t v385 = 0u;
          }
          uint64_t v230 = (uint64_t)v63->i64 + v75;
          unsigned int v231 = v64[1];
          if (v231 == 127)
          {
            int32x4_t v233 = *(int32x4_t *)v230;
            int32x4_t v26 = *(int32x4_t *)(v230 + 16);
            int32x4_t v234 = *(int32x4_t *)(v230 + 32);
            int32x4_t v235 = *(int32x4_t *)(v230 + 48);
            int32x4_t v236 = *(int32x4_t *)(v230 + 64);
            int32x4_t v237 = *(int32x4_t *)(v230 + 80);
            int32x4_t v238 = *(int32x4_t *)(v230 + 96);
            int32x4_t v239 = *(int32x4_t *)(v230 + 112);
            int16x8_t v362 = *(int16x8_t *)v230;
            int32x4_t v363 = v234;
            int32x4_t v370 = v26;
            int32x4_t v371 = v235;
            int32x4_t v378 = v236;
            int32x4_t v379 = v238;
            int32x4_t v386 = v237;
            int32x4_t v387 = v239;
            uint64_t v232 = 128;
          }
          else if (v231 == 3)
          {
            int32x4_t v233 = (int32x4_t)vld1q_dup_f32((const float *)v230);
            int16x8_t v362 = (int16x8_t)v233;
            int32x4_t v363 = v233;
            int32x4_t v370 = v233;
            int32x4_t v371 = v233;
            int32x4_t v378 = v233;
            int32x4_t v379 = v233;
            int32x4_t v386 = v233;
            int32x4_t v387 = v233;
            uint64_t v232 = 4;
          }
          else if (v64[1])
          {
            uint64_t v232 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v362, 128, v230, v231, v76, v26);
          }
          else
          {
            uint64_t v232 = 0;
            int32x4_t v233 = 0uLL;
            int16x8_t v362 = 0u;
            int32x4_t v363 = 0u;
            int32x4_t v370 = 0u;
            int32x4_t v371 = 0u;
            int32x4_t v378 = 0u;
            int32x4_t v379 = 0u;
            int32x4_t v386 = 0u;
            int32x4_t v387 = 0u;
          }
          uint64_t v240 = v230 + v232;
          unsigned int v241 = v64[2];
          if (v241 == 127)
          {
            int32x4_t v243 = *(int32x4_t *)v240;
            int32x4_t v26 = *(int32x4_t *)(v240 + 16);
            int32x4_t v244 = *(int32x4_t *)(v240 + 32);
            int32x4_t v245 = *(int32x4_t *)(v240 + 48);
            int32x4_t v246 = *(int32x4_t *)(v240 + 64);
            int32x4_t v247 = *(int32x4_t *)(v240 + 80);
            int32x4_t v248 = *(int32x4_t *)(v240 + 96);
            int32x4_t v249 = *(int32x4_t *)(v240 + 112);
            int16x8_t v392 = *(int16x8_t *)v240;
            int32x4_t v393 = v244;
            int32x4_t v400 = v26;
            int32x4_t v401 = v245;
            int32x4_t v408 = v246;
            int32x4_t v409 = v248;
            int32x4_t v416 = v247;
            int32x4_t v417 = v249;
            uint64_t v242 = 128;
          }
          else if (v241 == 3)
          {
            int32x4_t v243 = (int32x4_t)vld1q_dup_f32((const float *)v240);
            int16x8_t v392 = (int16x8_t)v243;
            int32x4_t v393 = v243;
            int32x4_t v400 = v243;
            int32x4_t v401 = v243;
            int32x4_t v408 = v243;
            int32x4_t v409 = v243;
            int32x4_t v416 = v243;
            int32x4_t v417 = v243;
            uint64_t v242 = 4;
          }
          else if (v64[2])
          {
            uint64_t v242 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v392, 128, v240, v241, v233, v26);
          }
          else
          {
            uint64_t v242 = 0;
            int32x4_t v243 = 0uLL;
            int16x8_t v392 = 0u;
            int32x4_t v393 = 0u;
            int32x4_t v400 = 0u;
            int32x4_t v401 = 0u;
            int32x4_t v408 = 0u;
            int32x4_t v409 = 0u;
            int32x4_t v416 = 0u;
            int32x4_t v417 = 0u;
          }
          uint64_t v250 = v240 + v242;
          unsigned int v251 = v64[3];
          if (v251 == 127)
          {
            int32x4_t v253 = *(int32x4_t *)v250;
            int32x4_t v26 = *(int32x4_t *)(v250 + 16);
            int32x4_t v254 = *(int32x4_t *)(v250 + 32);
            int32x4_t v255 = *(int32x4_t *)(v250 + 48);
            int32x4_t v256 = *(int32x4_t *)(v250 + 64);
            int32x4_t v257 = *(int32x4_t *)(v250 + 80);
            int32x4_t v258 = *(int32x4_t *)(v250 + 96);
            int32x4_t v259 = *(int32x4_t *)(v250 + 112);
            int16x8_t v394 = *(int16x8_t *)v250;
            int32x4_t v395 = v254;
            int32x4_t v402 = v26;
            int32x4_t v403 = v255;
            int32x4_t v410 = v256;
            int32x4_t v411 = v258;
            int32x4_t v418 = v257;
            int32x4_t v419 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            int32x4_t v253 = (int32x4_t)vld1q_dup_f32((const float *)v250);
            int16x8_t v394 = (int16x8_t)v253;
            int32x4_t v395 = v253;
            int32x4_t v402 = v253;
            int32x4_t v403 = v253;
            int32x4_t v410 = v253;
            int32x4_t v411 = v253;
            int32x4_t v418 = v253;
            int32x4_t v419 = v253;
            uint64_t v252 = 4;
          }
          else if (v64[3])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v394, 128, v250, v251, v243, v26);
          }
          else
          {
            uint64_t v252 = 0;
            int32x4_t v253 = 0uLL;
            int16x8_t v394 = 0u;
            int32x4_t v395 = 0u;
            int32x4_t v402 = 0u;
            int32x4_t v403 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
            int32x4_t v418 = 0u;
            int32x4_t v419 = 0u;
          }
          uint64_t v260 = v250 + v252;
          unsigned int v261 = v64[4];
          if (v261 == 127)
          {
            int32x4_t v263 = *(int32x4_t *)v260;
            int32x4_t v26 = *(int32x4_t *)(v260 + 16);
            int32x4_t v264 = *(int32x4_t *)(v260 + 32);
            int32x4_t v265 = *(int32x4_t *)(v260 + 48);
            int32x4_t v266 = *(int32x4_t *)(v260 + 64);
            int32x4_t v267 = *(int32x4_t *)(v260 + 80);
            int32x4_t v268 = *(int32x4_t *)(v260 + 96);
            int32x4_t v269 = *(int32x4_t *)(v260 + 112);
            int16x8_t v364 = *(int16x8_t *)v260;
            int32x4_t v365 = v264;
            int32x4_t v372 = v26;
            int32x4_t v373 = v265;
            int32x4_t v380 = v266;
            int32x4_t v381 = v268;
            int32x4_t v388 = v267;
            int32x4_t v389 = v269;
            uint64_t v262 = 128;
          }
          else if (v261 == 3)
          {
            int32x4_t v263 = (int32x4_t)vld1q_dup_f32((const float *)v260);
            int16x8_t v364 = (int16x8_t)v263;
            int32x4_t v365 = v263;
            int32x4_t v372 = v263;
            int32x4_t v373 = v263;
            int32x4_t v380 = v263;
            int32x4_t v381 = v263;
            int32x4_t v388 = v263;
            int32x4_t v389 = v263;
            uint64_t v262 = 4;
          }
          else if (v64[4])
          {
            uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v364, 128, v260, v261, v253, v26);
          }
          else
          {
            uint64_t v262 = 0;
            int32x4_t v263 = 0uLL;
            int16x8_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v388 = 0u;
            int32x4_t v389 = 0u;
          }
          uint64_t v270 = v260 + v262;
          unsigned int v271 = v64[5];
          if (v271 == 127)
          {
            int32x4_t v273 = *(int32x4_t *)v270;
            int32x4_t v26 = *(int32x4_t *)(v270 + 16);
            int32x4_t v274 = *(int32x4_t *)(v270 + 32);
            int32x4_t v275 = *(int32x4_t *)(v270 + 48);
            int32x4_t v276 = *(int32x4_t *)(v270 + 64);
            int32x4_t v277 = *(int32x4_t *)(v270 + 80);
            int32x4_t v278 = *(int32x4_t *)(v270 + 96);
            int32x4_t v279 = *(int32x4_t *)(v270 + 112);
            int16x8_t v366 = *(int16x8_t *)v270;
            int32x4_t v367 = v274;
            int32x4_t v374 = v26;
            int32x4_t v375 = v275;
            int32x4_t v382 = v276;
            int32x4_t v383 = v278;
            int32x4_t v390 = v277;
            int32x4_t v391 = v279;
            uint64_t v272 = 128;
          }
          else if (v271 == 3)
          {
            int32x4_t v273 = (int32x4_t)vld1q_dup_f32((const float *)v270);
            int16x8_t v366 = (int16x8_t)v273;
            int32x4_t v367 = v273;
            int32x4_t v374 = v273;
            int32x4_t v375 = v273;
            int32x4_t v382 = v273;
            int32x4_t v383 = v273;
            int32x4_t v390 = v273;
            int32x4_t v391 = v273;
            uint64_t v272 = 4;
          }
          else if (v64[5])
          {
            uint64_t v272 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v270, v271, v263, v26);
          }
          else
          {
            uint64_t v272 = 0;
            int32x4_t v273 = 0uLL;
            int16x8_t v366 = 0u;
            int32x4_t v367 = 0u;
            int32x4_t v374 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
            int32x4_t v390 = 0u;
            int32x4_t v391 = 0u;
          }
          uint64_t v280 = v270 + v272;
          unsigned int v281 = v64[6];
          if (v281 == 127)
          {
            int32x4_t v283 = *(int32x4_t *)v280;
            int32x4_t v26 = *(int32x4_t *)(v280 + 16);
            int32x4_t v284 = *(int32x4_t *)(v280 + 32);
            int32x4_t v285 = *(int32x4_t *)(v280 + 48);
            int32x4_t v286 = *(int32x4_t *)(v280 + 64);
            int32x4_t v287 = *(int32x4_t *)(v280 + 80);
            int32x4_t v288 = *(int32x4_t *)(v280 + 96);
            int32x4_t v289 = *(int32x4_t *)(v280 + 112);
            int16x8_t v396 = *(int16x8_t *)v280;
            int32x4_t v397 = v284;
            int32x4_t v404 = v26;
            int32x4_t v405 = v285;
            int32x4_t v412 = v286;
            int32x4_t v413 = v288;
            int32x4_t v420 = v287;
            int32x4_t v421 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            int32x4_t v283 = (int32x4_t)vld1q_dup_f32((const float *)v280);
            int16x8_t v396 = (int16x8_t)v283;
            int32x4_t v397 = v283;
            int32x4_t v404 = v283;
            int32x4_t v405 = v283;
            int32x4_t v412 = v283;
            int32x4_t v413 = v283;
            int32x4_t v420 = v283;
            int32x4_t v421 = v283;
            uint64_t v282 = 4;
          }
          else if (v64[6])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v396, 128, v280, v281, v273, v26);
          }
          else
          {
            uint64_t v282 = 0;
            int32x4_t v283 = 0uLL;
            int16x8_t v396 = 0u;
            int32x4_t v397 = 0u;
            int32x4_t v404 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
            int32x4_t v420 = 0u;
            int32x4_t v421 = 0u;
          }
          uint64_t v290 = v280 + v282;
          unsigned int v291 = v64[7];
          if (v291 == 127)
          {
            int32x4_t v25 = *(int32x4_t *)v290;
            int32x4_t v26 = *(int32x4_t *)(v290 + 16);
            int32x4_t v292 = *(int32x4_t *)(v290 + 32);
            int32x4_t v293 = *(int32x4_t *)(v290 + 48);
            int32x4_t v294 = *(int32x4_t *)(v290 + 80);
            int32x4_t v295 = *(int32x4_t *)(v290 + 96);
            int32x4_t v296 = *(int32x4_t *)(v290 + 112);
            int32x4_t v297 = *(int32x4_t *)(v290 + 64);
            int16x8_t v398 = *(int16x8_t *)v290;
            int32x4_t v399 = v292;
            int32x4_t v406 = v26;
            int32x4_t v407 = v293;
            int32x4_t v414 = v297;
            int32x4_t v415 = v295;
            int32x4_t v422 = v294;
            int32x4_t v423 = v296;
            uint64_t v16 = v346;
            unsigned int v33 = v31 + 1;
          }
          else
          {
            uint64_t v16 = v346;
            unsigned int v33 = v31 + 1;
            if (v291 == 3)
            {
              int32x4_t v25 = (int32x4_t)vld1q_dup_f32((const float *)v290);
              int16x8_t v398 = (int16x8_t)v25;
              int32x4_t v399 = v25;
              int32x4_t v406 = v25;
              int32x4_t v407 = v25;
              int32x4_t v414 = v25;
              int32x4_t v415 = v25;
              int32x4_t v422 = v25;
              int32x4_t v423 = v25;
            }
            else if (v291)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v398, 128, v290, v291, v283, v26);
            }
            else
            {
              int32x4_t v25 = 0uLL;
              int16x8_t v398 = 0u;
              int32x4_t v399 = 0u;
              int32x4_t v406 = 0u;
              int32x4_t v407 = 0u;
              int32x4_t v414 = 0u;
              int32x4_t v415 = 0u;
              int32x4_t v422 = 0u;
              int32x4_t v423 = 0u;
            }
          }
          unint64_t v298 = v355;
          if (v355)
          {
            unint64_t v299 = 0;
            unsigned int v300 = &v360.i8[128 * (unint64_t)v353 + 8 * v354];
            unsigned int v301 = v356;
            do
            {
              if (v301)
              {
                uint64_t v302 = 0;
                uint64_t v303 = v351 + v352 * v299;
                do
                {
                  *(unsigned char *)(v303 + v302) = v300[v302];
                  ++v302;
                  unsigned int v301 = v356;
                }
                while (8 * (unint64_t)v356 > v302);
                unint64_t v298 = v355;
              }
              ++v299;
              v300 += 128;
            }
            while (v299 < v298);
          }
LABEL_28:
          BOOL v21 = v31 == v337 >> 4;
          unsigned int v31 = v33;
        }
        while (!v21);
        BOOL v21 = v17++ == v327;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v148 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v141 = v20;
  uint64_t v142 = v21;
  uint64_t v126 = v22;
  uint64_t v23 = v12;
  uint64_t v168 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v145 = v14;
  unsigned int v128 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v127 = v128 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v140 = v31;
  unsigned int v32 = v148;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v139 = 0;
LABEL_32:
      unsigned int v136 = v34 - 4;
      unsigned int v132 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v125 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v139 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v139 = 0;
  unsigned int v125 = 0;
  unsigned int v132 = 0;
  unsigned int v136 = 0;
LABEL_33:
  if (v27 <= v127)
  {
    unsigned int v138 = v148 + a9 - 1;
    if (v148 >> 4 <= v138 >> 4)
    {
      unsigned int v147 = v25 >> 4;
      unsigned int v124 = v26 >> 3;
      int v146 = (v25 & 0xF) + 1;
      int v123 = (v26 & 7) + 1;
      uint64_t v134 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v133 = v42.i32[0] | v42.i32[1];
      int8x8_t v131 = v42;
      BOOL v129 = v42.i32[1] != 0;
      BOOL v130 = v42.i32[0] != 0;
      uint64_t v137 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v145) {
          int v44 = v145;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v128 < v43) {
          unsigned int v43 = v128;
        }
        int v135 = v44 - 8 * v27;
        int v144 = v43 - v44 + 1;
        unsigned int v45 = v148 >> 4;
        int v46 = v123;
        if (v27 != v124) {
          int v46 = 8;
        }
        unsigned int v149 = v46;
        uint64_t v143 = v126 + (v44 - v145) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v138 < v48) {
            unsigned int v48 = v148 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v147) {
            unsigned int v51 = v146;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v145 && v47 >= v32)
          {
            int v53 = v146;
            if (v45 != v147) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v144 != v149;
          }
          if (v139)
          {
            if (v136 | v132)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v136 != 0;
              int v58 = 1;
              BOOL v60 = v132 != 0;
              unsigned int v59 = v132;
              unsigned int v61 = v136;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v132) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v136) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v136) + (v27 >> v132) * v125) + (v56 << 11);
          }
          else
          {
            if (v133)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v129;
              BOOL v66 = v130;
              __int32 v67 = v131.i32[0];
              __int32 v68 = v131.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          int32x4_t v83 = (unsigned char *)(v141 + v69);
          if (v140)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v148;
            int32x4_t v83 = __dst;
          }
          int32x4_t v85 = (unsigned __int8 *)(v142 + 8 * v77);
          unsigned int v86 = (float64x2_t *)(v143 + 16 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v149 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v137;
            block[5] = v83;
            char v157 = v51;
            char v158 = v149;
            unsigned int v153 = v135;
            unsigned int v154 = v49 - v47;
            block[6] = v85;
            uint64_t v151 = v143 + 16 * (v49 - v32);
            uint64_t v152 = a11;
            unsigned int v155 = v144;
            unsigned int v156 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v137 + 8) + 7384), block);
              unsigned int v32 = v148;
              uint64_t v23 = v137;
            }
            else
            {
              uint64_t v103 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v160, 256, (uint64_t)v83, *v85, v42)];
              uint64_t v105 = v103
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v161, 256, v103, v85[1], v104);
              uint64_t v107 = v105
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v105, v85[2], v106);
              uint64_t v109 = v107
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v107, v85[3], v108);
              uint64_t v111 = v109
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, v109, v85[4], v110);
              uint64_t v113 = v111
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v111, v85[5], v112);
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v113, v85[6], v114);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v113 + v115, v85[7], v116);
              unint64_t v117 = v155;
              uint64_t v23 = v137;
              if (v155)
              {
                unint64_t v118 = 0;
                long long v119 = &v160[16 * (unint64_t)v153 + v154];
                unsigned int v120 = v156;
                do
                {
                  if (v120)
                  {
                    uint64_t v121 = 0;
                    uint64_t v122 = v151 + v152 * v118;
                    do
                    {
                      *(unsigned char *)(v122 + v121) = *((unsigned char *)v119->f64 + v121);
                      ++v121;
                      unsigned int v120 = v156;
                    }
                    while (16 * (unint64_t)v156 > v121);
                    unint64_t v117 = v155;
                  }
                  ++v118;
                  v119 += 16;
                }
                while (v118 < v117);
              }
              unsigned int v32 = v148;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v88, v85[1], v89);
            unsigned int v91 = (float64x2_t *)((char *)v86 + v134);
            uint64_t v93 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v134), a11, v90, v85[2], v92);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v134 + 64), a11, v93, v85[3], v94);
            uint64_t v97 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v95, v85[4], v96);
            uint64_t v99 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 12, a11, v97, v85[5], v98);
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v91 + 8, a11, v99, v85[6], v100);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v91 + 12, a11, v99 + v101, v85[7], v102);
            unsigned int v32 = v148;
            uint64_t v23 = v137;
          }
          BOOL v28 = v45++ == v138 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v127;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v148 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v141 = v20;
  uint64_t v142 = v21;
  uint64_t v126 = v22;
  uint64_t v23 = v12;
  uint64_t v168 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v145 = v14;
  unsigned int v128 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v127 = v128 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v140 = v31;
  unsigned int v32 = v148;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v139 = 0;
LABEL_32:
      unsigned int v136 = v34 - 4;
      unsigned int v132 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v125 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v139 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v139 = 0;
  unsigned int v125 = 0;
  unsigned int v132 = 0;
  unsigned int v136 = 0;
LABEL_33:
  if (v27 <= v127)
  {
    unsigned int v138 = v148 + a9 - 1;
    if (v148 >> 4 <= v138 >> 4)
    {
      unsigned int v147 = v25 >> 4;
      unsigned int v124 = v26 >> 3;
      int v146 = (v25 & 0xF) + 1;
      int v123 = (v26 & 7) + 1;
      uint64_t v134 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v133 = v42.i32[0] | v42.i32[1];
      int8x8_t v131 = v42;
      BOOL v129 = v42.i32[1] != 0;
      BOOL v130 = v42.i32[0] != 0;
      uint64_t v137 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v145) {
          int v44 = v145;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v128 < v43) {
          unsigned int v43 = v128;
        }
        int v135 = v44 - 8 * v27;
        int v144 = v43 - v44 + 1;
        unsigned int v45 = v148 >> 4;
        int v46 = v123;
        if (v27 != v124) {
          int v46 = 8;
        }
        unsigned int v149 = v46;
        uint64_t v143 = v126 + (v44 - v145) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v138 < v48) {
            unsigned int v48 = v148 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v147) {
            unsigned int v51 = v146;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v145 && v47 >= v32)
          {
            int v53 = v146;
            if (v45 != v147) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v144 != v149;
          }
          if (v139)
          {
            if (v136 | v132)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v136 != 0;
              int v58 = 1;
              BOOL v60 = v132 != 0;
              unsigned int v59 = v132;
              unsigned int v61 = v136;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v132) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v136) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v136) + (v27 >> v132) * v125) + (v56 << 11);
          }
          else
          {
            if (v133)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v129;
              BOOL v66 = v130;
              __int32 v67 = v131.i32[0];
              __int32 v68 = v131.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          int32x4_t v83 = (unsigned char *)(v141 + v69);
          if (v140)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v148;
            int32x4_t v83 = __dst;
          }
          int32x4_t v85 = (unsigned __int8 *)(v142 + 8 * v77);
          unsigned int v86 = (float64x2_t *)(v143 + 16 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v149 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v137;
            block[5] = v83;
            char v157 = v51;
            char v158 = v149;
            unsigned int v153 = v135;
            unsigned int v154 = v49 - v47;
            block[6] = v85;
            uint64_t v151 = v143 + 16 * (v49 - v32);
            uint64_t v152 = a11;
            unsigned int v155 = v144;
            unsigned int v156 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v137 + 8) + 7384), block);
              unsigned int v32 = v148;
              uint64_t v23 = v137;
            }
            else
            {
              uint64_t v103 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v160, 256, (uint64_t)v83, *v85, v42)];
              uint64_t v105 = v103
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v161, 256, v103, v85[1], v104);
              uint64_t v107 = v105
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v105, v85[2], v106);
              uint64_t v109 = v107
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v107, v85[3], v108);
              uint64_t v111 = v109
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, v109, v85[4], v110);
              uint64_t v113 = v111
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v111, v85[5], v112);
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v113, v85[6], v114);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v113 + v115, v85[7], v116);
              unint64_t v117 = v155;
              uint64_t v23 = v137;
              if (v155)
              {
                unint64_t v118 = 0;
                long long v119 = &v160[16 * (unint64_t)v153 + v154];
                unsigned int v120 = v156;
                do
                {
                  if (v120)
                  {
                    uint64_t v121 = 0;
                    uint64_t v122 = v151 + v152 * v118;
                    do
                    {
                      *(unsigned char *)(v122 + v121) = *((unsigned char *)v119->f64 + v121);
                      ++v121;
                      unsigned int v120 = v156;
                    }
                    while (16 * (unint64_t)v156 > v121);
                    unint64_t v117 = v155;
                  }
                  ++v118;
                  v119 += 16;
                }
                while (v118 < v117);
              }
              unsigned int v32 = v148;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85, v42)];
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v88, v85[1], v89);
            unsigned int v91 = (float64x2_t *)((char *)v86 + v134);
            uint64_t v93 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v134), a11, v90, v85[2], v92);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v86 + v134 + 64), a11, v93, v85[3], v94);
            uint64_t v97 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v95, v85[4], v96);
            uint64_t v99 = v97
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 12, a11, v97, v85[5], v98);
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v91 + 8, a11, v99, v85[6], v100);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v91 + 12, a11, v99 + v101, v85[7], v102);
            unsigned int v32 = v148;
            uint64_t v23 = v137;
          }
          BOOL v28 = v45++ == v138 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v127;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v142 = v21;
  uint64_t v143 = v22;
  uint64_t v131 = v23;
  uint64_t v24 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v130 = v14 + a10 - 1;
  unsigned int v132 = v130 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v141 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v132)
  {
    unsigned int v139 = v16 + a9 - 1;
    unsigned int v129 = v16 >> 4;
    if (v16 >> 4 <= v139 >> 4)
    {
      unsigned int v126 = v20 - 1;
      unsigned int v128 = (v18 - 1) >> 3;
      int v148 = ((v20 - 1) & 0xF) + 1;
      unsigned int v149 = (v20 - 1) >> 4;
      int v127 = ((v18 - 1) & 7) + 1;
      uint64_t v133 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v138 = v34.i32[0] | v34.i32[1];
      int8x8_t v137 = v34;
      BOOL v135 = v34.i32[1] != 0;
      BOOL v136 = v34.i32[0] != 0;
      unint64_t v125 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v147) {
          int v36 = v147;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v129;
        if (v130 < v35) {
          unsigned int v35 = v130;
        }
        int v134 = v36 - 8 * v25;
        int v145 = v35 - v36 + 1;
        unsigned int v146 = 8 * v25;
        int v38 = v127;
        if (v25 != v128) {
          int v38 = 8;
        }
        unsigned int v150 = v38;
        uint64_t v144 = v131 + (v36 - v147) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v139 < v40) {
            unsigned int v40 = v139;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v149) {
            unsigned int v43 = v148;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v146 >= v147 && v39 >= v16)
          {
            int v45 = v148;
            if (v37 != v149) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v145 != v150;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v125 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v114 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v115 = 0;
            }
            else {
              unsigned int v115 = 32 - __clz(~(-1 << -(char)__clz(v114)));
            }
            unsigned int v116 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v117 = 0;
              if (v115) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
              if (v117 | v115)
              {
LABEL_121:
                int v118 = 0;
                uint64_t v119 = 0;
                int v120 = v37 & v114;
                int v121 = v25 & v116;
                BOOL v122 = v117 != 0;
                BOOL v123 = v115 != 0;
                int v124 = 1;
                do
                {
                  --v117;
                  if (v122) {
                    v119 |= (unint64_t)(v124 & v121) << v118++;
                  }
                  else {
                    unsigned int v117 = 0;
                  }
                  --v115;
                  if (v123) {
                    v119 |= (unint64_t)(v124 & v120) << v118++;
                  }
                  else {
                    unsigned int v115 = 0;
                  }
                  v124 *= 2;
                  --v118;
                  BOOL v123 = v115 != 0;
                  BOOL v122 = v117 != 0;
                }
                while (v115 | v117);
                goto LABEL_133;
              }
            }
            uint64_t v119 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v146 / v72 * ((v68 + v126) / v68)) << 14) + (v119 << 11);
            goto LABEL_60;
          }
          if (v138)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v135;
            BOOL v51 = v136;
            __int32 v52 = v137.i32[0];
            __int32 v53 = v137.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v142 + v54);
          if (v141)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v142 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v143 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v144 + 16 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v150 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133), a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 64), a11, v84, v76[3], v85);
            uint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v86, v76[4], v87);
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 12, a11, v88, v76[5], v89);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 128), a11, v90, v76[6], v91);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 192), a11, v90 + v92, v76[7], v93);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v158 = v43;
          char v159 = v150;
          unsigned int v154 = v134;
          unsigned int v155 = v41 - v39;
          block[6] = v76;
          uint64_t v152 = v78;
          uint64_t v153 = a11;
          unsigned int v156 = v145;
          unsigned int v157 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v94 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v161, 256, (uint64_t)v73, *v76, v34)];
          uint64_t v96 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, v94, v76[1], v95);
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v96, v76[2], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v98, v76[3], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v100, v76[4], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v102, v76[5], v103);
          uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v104, v76[6], v105);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v104 + v106, v76[7], v107);
          unint64_t v108 = v156;
          uint64_t v16 = v77;
          if (v156)
          {
            unint64_t v109 = 0;
            int8x8_t v110 = &v161[16 * (unint64_t)v154 + v155];
            unsigned int v111 = v157;
            do
            {
              if (v111)
              {
                uint64_t v112 = 0;
                uint64_t v113 = (char *)v152 + v153 * v109;
                do
                {
                  v113[v112] = *((unsigned char *)v110->f64 + v112);
                  ++v112;
                  unsigned int v111 = v157;
                }
                while (16 * (unint64_t)v157 > v112);
                unint64_t v108 = v156;
              }
              ++v109;
              v110 += 16;
            }
            while (v109 < v108);
          }
LABEL_28:
          BOOL v29 = v37++ == v139 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v132;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v142 = v21;
  uint64_t v143 = v22;
  uint64_t v131 = v23;
  uint64_t v24 = v12;
  uint64_t v169 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v147 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v130 = v14 + a10 - 1;
  unsigned int v132 = v130 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v141 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v132)
  {
    unsigned int v139 = v16 + a9 - 1;
    unsigned int v129 = v16 >> 4;
    if (v16 >> 4 <= v139 >> 4)
    {
      unsigned int v126 = v20 - 1;
      unsigned int v128 = (v18 - 1) >> 3;
      int v148 = ((v20 - 1) & 0xF) + 1;
      unsigned int v149 = (v20 - 1) >> 4;
      int v127 = ((v18 - 1) & 7) + 1;
      uint64_t v133 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v138 = v34.i32[0] | v34.i32[1];
      int8x8_t v137 = v34;
      BOOL v135 = v34.i32[1] != 0;
      BOOL v136 = v34.i32[0] != 0;
      unint64_t v125 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v147) {
          int v36 = v147;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v129;
        if (v130 < v35) {
          unsigned int v35 = v130;
        }
        int v134 = v36 - 8 * v25;
        int v145 = v35 - v36 + 1;
        unsigned int v146 = 8 * v25;
        int v38 = v127;
        if (v25 != v128) {
          int v38 = 8;
        }
        unsigned int v150 = v38;
        uint64_t v144 = v131 + (v36 - v147) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v139 < v40) {
            unsigned int v40 = v139;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v149) {
            unsigned int v43 = v148;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v146 >= v147 && v39 >= v16)
          {
            int v45 = v148;
            if (v37 != v149) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v145 != v150;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v125 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v114 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v115 = 0;
            }
            else {
              unsigned int v115 = 32 - __clz(~(-1 << -(char)__clz(v114)));
            }
            unsigned int v116 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v117 = 0;
              if (v115) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v117 = 32 - __clz(~(-1 << -(char)__clz(v116)));
              if (v117 | v115)
              {
LABEL_121:
                int v118 = 0;
                uint64_t v119 = 0;
                int v120 = v37 & v114;
                int v121 = v25 & v116;
                BOOL v122 = v117 != 0;
                BOOL v123 = v115 != 0;
                int v124 = 1;
                do
                {
                  --v117;
                  if (v122) {
                    v119 |= (unint64_t)(v124 & v121) << v118++;
                  }
                  else {
                    unsigned int v117 = 0;
                  }
                  --v115;
                  if (v123) {
                    v119 |= (unint64_t)(v124 & v120) << v118++;
                  }
                  else {
                    unsigned int v115 = 0;
                  }
                  v124 *= 2;
                  --v118;
                  BOOL v123 = v115 != 0;
                  BOOL v122 = v117 != 0;
                }
                while (v115 | v117);
                goto LABEL_133;
              }
            }
            uint64_t v119 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v146 / v72 * ((v68 + v126) / v68)) << 14) + (v119 << 11);
            goto LABEL_60;
          }
          if (v138)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v135;
            BOOL v51 = v136;
            __int32 v52 = v137.i32[0];
            __int32 v53 = v137.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v142 + v54);
          if (v141)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v142 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v143 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (float64x2_t *)(v144 + 16 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v150 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76, v34)];
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v80, v76[1], v81);
            uint64_t v84 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133), a11, v82, v76[2], v83);
            uint64_t v86 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 64), a11, v84, v76[3], v85);
            uint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v86, v76[4], v87);
            uint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 12, a11, v88, v76[5], v89);
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 128), a11, v90, v76[6], v91);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v78 + v133 + 192), a11, v90 + v92, v76[7], v93);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v158 = v43;
          char v159 = v150;
          unsigned int v154 = v134;
          unsigned int v155 = v41 - v39;
          block[6] = v76;
          uint64_t v152 = v78;
          uint64_t v153 = a11;
          unsigned int v156 = v145;
          unsigned int v157 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v94 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v161, 256, (uint64_t)v73, *v76, v34)];
          uint64_t v96 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v162, 256, v94, v76[1], v95);
          uint64_t v98 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v165, 256, v96, v76[2], v97);
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v166, 256, v98, v76[3], v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v163, 256, v100, v76[4], v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v164, 256, v102, v76[5], v103);
          uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 256, v104, v76[6], v105);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 256, v104 + v106, v76[7], v107);
          unint64_t v108 = v156;
          uint64_t v16 = v77;
          if (v156)
          {
            unint64_t v109 = 0;
            int8x8_t v110 = &v161[16 * (unint64_t)v154 + v155];
            unsigned int v111 = v157;
            do
            {
              if (v111)
              {
                uint64_t v112 = 0;
                uint64_t v113 = (char *)v152 + v153 * v109;
                do
                {
                  v113[v112] = *((unsigned char *)v110->f64 + v112);
                  ++v112;
                  unsigned int v111 = v157;
                }
                while (16 * (unint64_t)v157 > v112);
                unint64_t v108 = v156;
              }
              ++v109;
              v110 += 16;
            }
            while (v109 < v108);
          }
LABEL_28:
          BOOL v29 = v37++ == v139 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v132;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v290 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v243 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v224 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v243 >> 3;
  unsigned int v223 = v224 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v237 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v236 = 0;
LABEL_32:
      unsigned int v234 = v27 - 4;
      unsigned int v228 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v221 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v236 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v236 = 0;
  unsigned int v221 = 0;
  unsigned int v228 = 0;
  unsigned int v234 = 0;
LABEL_33:
  if (v21 <= v223)
  {
    unsigned int v235 = a7 + a9 - 1;
    if (a7 >> 4 <= v235 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v246 = v19 >> 4;
      unsigned int v220 = v20 >> 3;
      int v245 = (v19 & 0xF) + 1;
      int v219 = (v20 & 7) + 1;
      uint64_t v232 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v37.i64[0] = 0x2000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v231 = v38.i32[0] | v38.i32[1];
      uint64_t v227 = v38.i64[0];
      BOOL v226 = v38.i32[0] != 0;
      BOOL v225 = v38.i32[1] != 0;
      uint64_t v244 = a1;
      uint64_t v229 = 3 * a11;
      uint64_t v230 = 2 * a11;
      do
      {
        unsigned int v39 = (8 * v21) | 7;
        if (8 * v21 <= v243) {
          int v40 = v243;
        }
        else {
          int v40 = 8 * v21;
        }
        if (v224 < v39) {
          unsigned int v39 = v224;
        }
        int v233 = v40 - 8 * v21;
        int v241 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 4;
        int v42 = v219;
        if (v21 != v220) {
          int v42 = 8;
        }
        unsigned int v247 = v42;
        uint64_t v43 = v21 & ~(-1 << v228);
        uint64_t v240 = a2 + (v40 - v243) * v34;
        unsigned int v44 = a7;
        do
        {
          unsigned int v46 = 16 * v41;
          unsigned int v47 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v44) {
            int v48 = v44;
          }
          else {
            int v48 = 16 * v41;
          }
          if (v235 < v47) {
            unsigned int v47 = a7 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v41 == v246) {
            unsigned int v50 = v245;
          }
          else {
            unsigned int v50 = 16;
          }
          BOOL v51 = 1;
          if (8 * v21 >= v243 && v46 >= v44)
          {
            int v52 = v245;
            if (v41 != v246) {
              int v52 = 16;
            }
            BOOL v51 = v49 != v52 || v241 != v247;
          }
          if (v236)
          {
            if (v234 | v228)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v228 != 0;
              BOOL v58 = v234 != 0;
              unsigned int v59 = v228;
              unsigned int v60 = v234;
              do
              {
                --v59;
                if (v57) {
                  v55 |= (unint64_t)(v43 & v56) << v54++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v60;
                if (v58) {
                  v55 |= (unint64_t)(v41 & ~(-1 << v234) & v56) << v54++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v58 = v60 != 0;
                BOOL v57 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v68 = *(void *)(v17 + 320) * ((v41 >> v234) + (v21 >> v228) * v221) + (v55 << 9);
          }
          else
          {
            if (v231)
            {
              int v61 = 0;
              uint64_t v62 = 0;
              int v63 = 1;
              BOOL v64 = v226;
              BOOL v65 = v225;
              int v66 = v227;
              int v67 = HIDWORD(v227);
              do
              {
                --v66;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  int v66 = 0;
                }
                --v67;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v41) << v61++;
                }
                else {
                  int v67 = 0;
                }
                v63 *= 2;
                --v61;
                BOOL v65 = v67 != 0;
                BOOL v64 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v68 = v62 << 9;
          }
          unsigned int v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
          }
          unsigned int v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10)
          {
            unsigned int v74 = 0;
            if (!v71)
            {
LABEL_115:
              unint64_t v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          int v75 = 0;
          unint64_t v76 = 0;
          BOOL v77 = v71 != 0;
          BOOL v78 = v74 != 0;
          int v79 = 1;
          do
          {
            --v71;
            BOOL v80 = !v77;
            if (v77)
            {
              unint64_t v81 = ((unint64_t)(v79 & v41) << v75) | v76;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              unint64_t v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              unsigned int v74 = 0;
              unint64_t v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            BOOL v78 = v74 != 0;
            BOOL v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          uint64_t v82 = (unsigned char *)(a3 + v68);
          if (v237)
          {
            uint64_t v83 = v43;
            int v84 = v49;
            BOOL v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            BOOL v51 = v85;
            int v49 = v84;
            uint64_t v43 = v83;
            uint64_t v82 = __dst;
          }
          uint64_t v86 = (unsigned __int8 *)(a4 + 8 * v76);
          int8x8_t v87 = (int64x2_t *)(v240 + 4 * (v48 - v44));
          char v88 = v50 < 0x10 || v51;
          if ((v88 & 1) == 0 && v247 > 7)
          {
            unsigned int v89 = *v86;
            if (v89 == 63)
            {
              int8x8_t v97 = (const double *)(v82 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v97);
              int64x2_t v98 = *(int64x2_t *)v82;
              int64x2_t v99 = *((int64x2_t *)v82 + 1);
              int64x2_t *v87 = vzip1q_s64(*(int64x2_t *)v82, v99);
              int64x2_t v37 = vzip2q_s64(v98, v99);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v87 + a11) = v37;
              uint64_t v90 = 2 * a11;
              uint64_t v100 = (int64x2_t *)((char *)v87 + v230);
              int64x2_t *v100 = v38;
              *(int64x2_t *)((char *)v100 + a11) = v36;
              uint64_t v91 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v90 = 2 * a11;
              if (v89 == 1)
              {
                int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v82);
                int64x2_t *v87 = v38;
                *(int64x2_t *)((char *)v87 + a11) = v38;
                *(int64x2_t *)((char *)v87 + 2 * a11) = v38;
                *(int64x2_t *)((char *)v87 + 3 * a11) = v38;
                uint64_t v91 = 2;
              }
              else if (*v86)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                uint64_t v91 = 0;
                v87->i64[0] = 0;
                v87->i64[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v87->i64 + a11);
                void *v92 = 0;
                v92[1] = 0;
                int8x8_t v93 = (uint64_t *)((char *)v87->i64 + v230);
                *int8x8_t v93 = 0;
                v93[1] = 0;
                uint64_t v94 = (uint64_t *)((char *)v87->i64 + v229);
                *uint64_t v94 = 0;
                v94[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)&v82[v91];
            uint64_t v102 = v87 + 1;
            unsigned int v103 = v86[1];
            if (v103 == 63)
            {
              unint64_t v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v101;
              int64x2_t v110 = *(int64x2_t *)(v101 + 16);
              int64x2_t *v102 = vzip1q_s64(*(int64x2_t *)v101, v110);
              int64x2_t v37 = vzip2q_s64(v109, v110);
              *(int64x2_t *)((char *)v102 + v34) = v37;
              unsigned int v111 = (int64x2_t *)((char *)v102 + v90);
              *unsigned int v111 = v38;
              *(int64x2_t *)((char *)v111 + v34) = v36;
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              int64x2_t *v102 = v38;
              *(int64x2_t *)((char *)v102 + v34) = v38;
              *(int64x2_t *)((char *)v102 + v90) = v38;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v38;
              uint64_t v104 = 2;
            }
            else if (v86[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v34, v101, v103, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v87[1].i64[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              void *v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v90);
              void *v106 = 0;
              v106[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v102->i64 + v229);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v112 = v101 + v104;
            uint64_t v113 = (int64x2_t *)((char *)v87 + v232);
            unsigned int v114 = v86[2];
            if (v114 == 63)
            {
              uint64_t v119 = (const double *)(v112 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v119);
              int64x2_t v120 = *(int64x2_t *)v112;
              int64x2_t v121 = *(int64x2_t *)(v112 + 16);
              *uint64_t v113 = vzip1q_s64(*(int64x2_t *)v112, v121);
              int64x2_t v37 = vzip2q_s64(v120, v121);
              *(int64x2_t *)((char *)v113 + v34) = v37;
              BOOL v122 = (int64x2_t *)((char *)v113 + v90);
              int64x2_t *v122 = v38;
              *(int64x2_t *)((char *)v122 + v34) = v36;
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
              *uint64_t v113 = v38;
              *(int64x2_t *)((char *)v113 + v34) = v38;
              *(int64x2_t *)((char *)v113 + v90) = v38;
              *(int64x2_t *)((char *)v113 + 3 * a11) = v38;
              uint64_t v115 = 2;
            }
            else if (v86[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v87 + v232), v34, v112, v114, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              unsigned int v117 = (uint64_t *)((char *)v113->i64 + v90);
              void *v117 = 0;
              v117[1] = 0;
              int v118 = (uint64_t *)((char *)v113->i64 + v229);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v123 = v112 + v115;
            int v124 = v113 + 1;
            unsigned int v125 = v86[3];
            if (v125 == 63)
            {
              unsigned int v130 = (const double *)(v123 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v130);
              int64x2_t v131 = *(int64x2_t *)v123;
              int64x2_t v132 = *(int64x2_t *)(v123 + 16);
              *int v124 = vzip1q_s64(*(int64x2_t *)v123, v132);
              int64x2_t v37 = vzip2q_s64(v131, v132);
              *(int64x2_t *)((char *)v124 + v34) = v37;
              uint64_t v133 = (int64x2_t *)((char *)v124 + v90);
              *uint64_t v133 = v38;
              *(int64x2_t *)((char *)v133 + v34) = v36;
              uint64_t v126 = 64;
            }
            else if (v125 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v123);
              *int v124 = v38;
              *(int64x2_t *)((char *)v124 + v34) = v38;
              *(int64x2_t *)((char *)v124 + v90) = v38;
              *(int64x2_t *)((char *)v124 + 3 * a11) = v38;
              uint64_t v126 = 2;
            }
            else if (v86[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v124, v34, v123, v125, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v126 = 0;
              v124->i64[0] = 0;
              v113[1].i64[1] = 0;
              int v127 = (uint64_t *)((char *)v124->i64 + v34);
              void *v127 = 0;
              v127[1] = 0;
              unsigned int v128 = (uint64_t *)((char *)v124->i64 + v90);
              void *v128 = 0;
              v128[1] = 0;
              unsigned int v129 = (uint64_t *)((char *)v124->i64 + v229);
              *unsigned int v129 = 0;
              v129[1] = 0;
            }
            uint64_t v134 = v123 + v126;
            BOOL v135 = v87 + 2;
            unsigned int v136 = v86[4];
            if (v136 == 63)
            {
              int v141 = (const double *)(v134 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v141);
              int64x2_t v142 = *(int64x2_t *)v134;
              int64x2_t v143 = *(int64x2_t *)(v134 + 16);
              int64x2_t *v135 = vzip1q_s64(*(int64x2_t *)v134, v143);
              int64x2_t v37 = vzip2q_s64(v142, v143);
              *(int64x2_t *)((char *)v135 + v34) = v37;
              uint64_t v144 = (int64x2_t *)((char *)v135 + v90);
              *uint64_t v144 = v38;
              *(int64x2_t *)((char *)v144 + v34) = v36;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v134);
              int64x2_t *v135 = v38;
              *(int64x2_t *)((char *)v135 + v34) = v38;
              *(int64x2_t *)((char *)v135 + v90) = v38;
              *(int64x2_t *)((char *)v135 + 3 * a11) = v38;
              uint64_t v137 = 2;
            }
            else if (v86[4])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v135, v34, v134, v136, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v135->i64[0] = 0;
              v87[2].i64[1] = 0;
              __int32 v138 = (uint64_t *)((char *)v135->i64 + v34);
              void *v138 = 0;
              v138[1] = 0;
              unsigned int v139 = (uint64_t *)((char *)v135->i64 + v90);
              *unsigned int v139 = 0;
              v139[1] = 0;
              int v140 = (uint64_t *)((char *)v135->i64 + v229);
              void *v140 = 0;
              v140[1] = 0;
            }
            uint64_t v145 = v134 + v137;
            unsigned int v146 = v87 + 3;
            unsigned int v147 = v86[5];
            if (v147 == 63)
            {
              uint64_t v152 = (const double *)(v145 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v152);
              int64x2_t v153 = *(int64x2_t *)v145;
              int64x2_t v154 = *(int64x2_t *)(v145 + 16);
              int64x2_t *v146 = vzip1q_s64(*(int64x2_t *)v145, v154);
              int64x2_t v37 = vzip2q_s64(v153, v154);
              *(int64x2_t *)((char *)v146 + v34) = v37;
              unsigned int v155 = (int64x2_t *)((char *)v146 + v90);
              int64x2_t *v155 = v38;
              *(int64x2_t *)((char *)v155 + v34) = v36;
              uint64_t v148 = 64;
            }
            else if (v147 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v145);
              int64x2_t *v146 = v38;
              *(int64x2_t *)((char *)v146 + v34) = v38;
              *(int64x2_t *)((char *)v146 + v90) = v38;
              *(int64x2_t *)((char *)v146 + 3 * a11) = v38;
              uint64_t v148 = 2;
            }
            else if (v86[5])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v146, v34, v145, v147, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v148 = 0;
              v146->i64[0] = 0;
              v87[3].i64[1] = 0;
              unsigned int v149 = (uint64_t *)((char *)v146->i64 + v34);
              *unsigned int v149 = 0;
              v149[1] = 0;
              unsigned int v150 = (uint64_t *)((char *)v146->i64 + v90);
              void *v150 = 0;
              v150[1] = 0;
              uint64_t v151 = (uint64_t *)((char *)v146->i64 + v229);
              void *v151 = 0;
              v151[1] = 0;
            }
            uint64_t v156 = v145 + v148;
            unsigned int v157 = v113 + 2;
            unsigned int v158 = v86[6];
            if (v158 == 63)
            {
              long long v163 = (const double *)(v156 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v163);
              int64x2_t v164 = *(int64x2_t *)v156;
              int64x2_t v165 = *(int64x2_t *)(v156 + 16);
              *unsigned int v157 = vzip1q_s64(*(int64x2_t *)v156, v165);
              int64x2_t v37 = vzip2q_s64(v164, v165);
              *(int64x2_t *)((char *)v157 + v34) = v37;
              long long v166 = (int64x2_t *)((char *)v157 + v90);
              *long long v166 = v38;
              *(int64x2_t *)((char *)v166 + v34) = v36;
              uint64_t v159 = 64;
            }
            else if (v158 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v156);
              *unsigned int v157 = v38;
              *(int64x2_t *)((char *)v157 + v34) = v38;
              *(int64x2_t *)((char *)v157 + v90) = v38;
              *(int64x2_t *)((char *)v157 + 3 * a11) = v38;
              uint64_t v159 = 2;
            }
            else if (v86[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, v34, v145 + v148, v158, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v159 = 0;
              v157->i64[0] = 0;
              v113[2].i64[1] = 0;
              long long v160 = (uint64_t *)((char *)v157->i64 + v34);
              *long long v160 = 0;
              v160[1] = 0;
              int32x4_t v161 = (uint64_t *)((char *)v157->i64 + v90);
              *int32x4_t v161 = 0;
              v161[1] = 0;
              long long v162 = (uint64_t *)((char *)v157->i64 + v229);
              *long long v162 = 0;
              v162[1] = 0;
            }
            uint64_t v167 = v156 + v159;
            uint64_t v168 = v113 + 3;
            unsigned int v169 = v86[7];
            if (v169 == 63)
            {
              int32x4_t v173 = (const double *)(v167 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v173);
              int64x2_t v174 = *(int64x2_t *)v167;
              int64x2_t v175 = *(int64x2_t *)(v167 + 16);
              *uint64_t v168 = vzip1q_s64(*(int64x2_t *)v167, v175);
              int64x2_t v37 = vzip2q_s64(v174, v175);
              *(int64x2_t *)((char *)v168 + v34) = v37;
              uint64_t v176 = (int64x2_t *)((char *)v168 + v90);
              *uint64_t v176 = v38;
              *(int64x2_t *)((char *)v176 + v34) = v36;
              unsigned int v44 = a7;
              uint64_t v17 = v244;
            }
            else
            {
              unsigned int v44 = a7;
              uint64_t v17 = v244;
              if (v169 == 1)
              {
                int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v167);
                *uint64_t v168 = v38;
                *(int64x2_t *)((char *)v168 + v34) = v38;
                *(int64x2_t *)((char *)v168 + v90) = v38;
                *(int64x2_t *)((char *)v168 + 3 * a11) = v38;
              }
              else if (v169)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v168, v34, v167, v169, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                v168->i64[0] = 0;
                v113[3].i64[1] = 0;
                unsigned int v170 = (uint64_t *)((char *)v168->i64 + v34);
                *unsigned int v170 = 0;
                v170[1] = 0;
                unsigned int v171 = (uint64_t *)((char *)v168->i64 + v90);
                void *v171 = 0;
                v171[1] = 0;
                uint64_t v172 = (uint64_t *)((char *)v168->i64 + v229);
                *uint64_t v172 = 0;
                v172[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v244;
          block[5] = v82;
          char v255 = v50;
          char v256 = v247;
          unsigned int v251 = v233;
          unsigned int v252 = v48 - v46;
          block[6] = v86;
          int32x4_t v249 = v87;
          uint64_t v34 = a11;
          uint64_t v250 = a11;
          unsigned int v253 = v241;
          unsigned int v254 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v244 + 8) + 7384), block);
            unsigned int v44 = a7;
            uint64_t v17 = v244;
LABEL_47:
            unsigned int v45 = v41 + 1;
            goto LABEL_48;
          }
          unsigned int v95 = *v86;
          if (v95 == 63)
          {
            int64x2_t v36 = *((int64x2_t *)v82 + 1);
            float32x4_t v177 = (const double *)(v82 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v177);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v82, v36);
            int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v82, v36);
            int64x2_t v262 = v38;
            int64x2_t v266 = v37;
            int64x2_t v270 = v178;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v82);
            int64x2_t v258 = v38;
            int64x2_t v262 = v38;
            int64x2_t v266 = v38;
            int64x2_t v270 = v38;
            uint64_t v96 = 2;
          }
          else if (*v86)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, (uint64_t)v82, v95, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v96 = 0;
            int64x2_t v258 = 0uLL;
            int64x2_t v262 = 0uLL;
            int64x2_t v266 = 0uLL;
            int64x2_t v270 = 0uLL;
          }
          uint64_t v179 = (uint64_t)&v82[v96];
          unsigned int v180 = v86[1];
          if (v180 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v179 + 16);
            long long v182 = (const double *)(v179 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v182);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v179, v36);
            int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v179, v36);
            int64x2_t v263 = v38;
            int64x2_t v267 = v37;
            int64x2_t v271 = v183;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v179);
            int64x2_t v259 = v38;
            int64x2_t v263 = v38;
            int64x2_t v267 = v38;
            int64x2_t v271 = v38;
            uint64_t v181 = 2;
          }
          else if (v86[1])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v179, v180, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int64x2_t v259 = 0uLL;
            int64x2_t v263 = 0uLL;
            int64x2_t v267 = 0uLL;
            int64x2_t v271 = 0uLL;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v86[2];
          if (v185 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v184 + 16);
            long long v187 = (const double *)(v184 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v187);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v184, v36);
            int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v184, v36);
            int64x2_t v278 = v38;
            int64x2_t v282 = v37;
            int64x2_t v286 = v188;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v184);
            int64x2_t v274 = v38;
            int64x2_t v278 = v38;
            int64x2_t v282 = v38;
            int64x2_t v286 = v38;
            uint64_t v186 = 2;
          }
          else if (v86[2])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 64, v184, v185, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int64x2_t v274 = 0uLL;
            int64x2_t v278 = 0uLL;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v86[3];
          if (v190 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v189 + 16);
            uint64_t v192 = (const double *)(v189 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v192);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v189, v36);
            int64x2_t v275 = vzip1q_s64(*(int64x2_t *)v189, v36);
            int64x2_t v279 = v38;
            int64x2_t v283 = v37;
            int64x2_t v287 = v193;
            uint64_t v191 = 64;
          }
          else if (v190 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v189);
            int64x2_t v275 = v38;
            int64x2_t v279 = v38;
            int64x2_t v283 = v38;
            int64x2_t v287 = v38;
            uint64_t v191 = 2;
          }
          else if (v86[3])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 64, v189, v190, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v191 = 0;
            int64x2_t v275 = 0uLL;
            int64x2_t v279 = 0uLL;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
          }
          uint64_t v194 = v189 + v191;
          unsigned int v195 = v86[4];
          if (v195 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v194 + 16);
            int v197 = (const double *)(v194 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v197);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v194, v36);
            int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v194, v36);
            int64x2_t v264 = v38;
            int64x2_t v268 = v37;
            int64x2_t v272 = v198;
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v260 = v38;
            int64x2_t v264 = v38;
            int64x2_t v268 = v38;
            int64x2_t v272 = v38;
            uint64_t v196 = 2;
          }
          else if (v86[4])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v194, v195, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v199 = v194 + v196;
          unsigned int v200 = v86[5];
          if (v200 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v199 + 16);
            long long v202 = (const double *)(v199 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v202);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v199, v36);
            int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v199, v36);
            int64x2_t v265 = v38;
            int64x2_t v269 = v37;
            int64x2_t v273 = v203;
            uint64_t v201 = 64;
          }
          else if (v200 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v199);
            int64x2_t v261 = v38;
            int64x2_t v265 = v38;
            int64x2_t v269 = v38;
            int64x2_t v273 = v38;
            uint64_t v201 = 2;
          }
          else if (v86[5])
          {
            uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 64, v199, v200, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v201 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v204 = v199 + v201;
          unsigned int v205 = v86[6];
          if (v205 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v204 + 16);
            long long v207 = (const double *)(v204 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v207);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v204, v36);
            int64x2_t v276 = vzip1q_s64(*(int64x2_t *)v204, v36);
            int64x2_t v280 = v38;
            int64x2_t v284 = v37;
            int64x2_t v288 = v208;
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v204);
            int64x2_t v276 = v38;
            int64x2_t v280 = v38;
            int64x2_t v284 = v38;
            int64x2_t v288 = v38;
            uint64_t v206 = 2;
          }
          else if (v86[6])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 64, v204, v205, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v206 = 0;
            int64x2_t v276 = 0uLL;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            int64x2_t v288 = 0uLL;
          }
          uint64_t v209 = v204 + v206;
          unsigned int v210 = v86[7];
          if (v210 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v209 + 16);
            unsigned int v211 = (const double *)(v209 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v211);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v209, v36);
            int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v209, v36);
            int64x2_t v281 = v38;
            int64x2_t v285 = v37;
            int64x2_t v289 = v212;
            unsigned int v44 = a7;
            uint64_t v17 = v244;
          }
          else
          {
            unsigned int v44 = a7;
            uint64_t v17 = v244;
            if (v210 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v209);
              int64x2_t v277 = v38;
              int64x2_t v281 = v38;
              int64x2_t v285 = v38;
              int64x2_t v289 = v38;
            }
            else if (v210)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, v209, v210, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              int64x2_t v285 = 0uLL;
              int64x2_t v289 = 0uLL;
            }
          }
          unint64_t v213 = v253;
          unsigned int v45 = v41 + 1;
          if (v253)
          {
            unint64_t v214 = 0;
            int16x8_t v215 = &v258.i8[64 * (unint64_t)v251 + 4 * v252];
            unsigned int v216 = v254;
            do
            {
              if (v216)
              {
                uint64_t v217 = 0;
                long long v218 = &v249->i8[v250 * v214];
                do
                {
                  v218[v217] = v215[v217];
                  ++v217;
                  unsigned int v216 = v254;
                }
                while (4 * (unint64_t)v254 > v217);
                unint64_t v213 = v253;
              }
              ++v214;
              v215 += 64;
            }
            while (v214 < v213);
          }
LABEL_48:
          BOOL v22 = v41 == v235 >> 4;
          unsigned int v41 = v45;
        }
        while (!v22);
        BOOL v22 = v21++ == v223;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v290 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v243 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v224 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v243 >> 3;
  unsigned int v223 = v224 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v237 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v236 = 0;
LABEL_32:
      unsigned int v234 = v27 - 4;
      unsigned int v228 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v221 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v236 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v236 = 0;
  unsigned int v221 = 0;
  unsigned int v228 = 0;
  unsigned int v234 = 0;
LABEL_33:
  if (v21 <= v223)
  {
    unsigned int v235 = a7 + a9 - 1;
    if (a7 >> 4 <= v235 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v246 = v19 >> 4;
      unsigned int v220 = v20 >> 3;
      int v245 = (v19 & 0xF) + 1;
      int v219 = (v20 & 7) + 1;
      uint64_t v232 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v37.i64[0] = 0x2000000010;
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v231 = v38.i32[0] | v38.i32[1];
      uint64_t v227 = v38.i64[0];
      BOOL v226 = v38.i32[0] != 0;
      BOOL v225 = v38.i32[1] != 0;
      uint64_t v244 = a1;
      uint64_t v229 = 3 * a11;
      uint64_t v230 = 2 * a11;
      do
      {
        unsigned int v39 = (8 * v21) | 7;
        if (8 * v21 <= v243) {
          int v40 = v243;
        }
        else {
          int v40 = 8 * v21;
        }
        if (v224 < v39) {
          unsigned int v39 = v224;
        }
        int v233 = v40 - 8 * v21;
        int v241 = v39 - v40 + 1;
        unsigned int v41 = a7 >> 4;
        int v42 = v219;
        if (v21 != v220) {
          int v42 = 8;
        }
        unsigned int v247 = v42;
        uint64_t v43 = v21 & ~(-1 << v228);
        uint64_t v240 = a2 + (v40 - v243) * v34;
        unsigned int v44 = a7;
        do
        {
          unsigned int v46 = 16 * v41;
          unsigned int v47 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v44) {
            int v48 = v44;
          }
          else {
            int v48 = 16 * v41;
          }
          if (v235 < v47) {
            unsigned int v47 = a7 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v41 == v246) {
            unsigned int v50 = v245;
          }
          else {
            unsigned int v50 = 16;
          }
          BOOL v51 = 1;
          if (8 * v21 >= v243 && v46 >= v44)
          {
            int v52 = v245;
            if (v41 != v246) {
              int v52 = 16;
            }
            BOOL v51 = v49 != v52 || v241 != v247;
          }
          if (v236)
          {
            if (v234 | v228)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v228 != 0;
              BOOL v58 = v234 != 0;
              unsigned int v59 = v228;
              unsigned int v60 = v234;
              do
              {
                --v59;
                if (v57) {
                  v55 |= (unint64_t)(v43 & v56) << v54++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v60;
                if (v58) {
                  v55 |= (unint64_t)(v41 & ~(-1 << v234) & v56) << v54++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v58 = v60 != 0;
                BOOL v57 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v68 = *(void *)(v17 + 320) * ((v41 >> v234) + (v21 >> v228) * v221) + (v55 << 9);
          }
          else
          {
            if (v231)
            {
              int v61 = 0;
              uint64_t v62 = 0;
              int v63 = 1;
              BOOL v64 = v226;
              BOOL v65 = v225;
              int v66 = v227;
              int v67 = HIDWORD(v227);
              do
              {
                --v66;
                if (v64) {
                  v62 |= (unint64_t)(v63 & v21) << v61++;
                }
                else {
                  int v66 = 0;
                }
                --v67;
                if (v65) {
                  v62 |= (unint64_t)(v63 & v41) << v61++;
                }
                else {
                  int v67 = 0;
                }
                v63 *= 2;
                --v61;
                BOOL v65 = v67 != 0;
                BOOL v64 = v66 != 0;
              }
              while (v67 | v66);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v68 = v62 << 9;
          }
          unsigned int v69 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
          }
          unsigned int v72 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 7;
          if (v73 < 0x10)
          {
            unsigned int v74 = 0;
            if (!v71)
            {
LABEL_115:
              unint64_t v76 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 3) - 1)));
            if (!(v74 | v71)) {
              goto LABEL_115;
            }
          }
          int v75 = 0;
          unint64_t v76 = 0;
          BOOL v77 = v71 != 0;
          BOOL v78 = v74 != 0;
          int v79 = 1;
          do
          {
            --v71;
            BOOL v80 = !v77;
            if (v77)
            {
              unint64_t v81 = ((unint64_t)(v79 & v41) << v75) | v76;
            }
            else
            {
              unsigned int v71 = 0;
              unint64_t v81 = v76;
            }
            if (!v80) {
              ++v75;
            }
            --v74;
            if (v78)
            {
              unint64_t v76 = ((unint64_t)(v79 & v21) << v75) | v81;
            }
            else
            {
              unsigned int v74 = 0;
              unint64_t v76 = v81;
            }
            if (v78) {
              ++v75;
            }
            v79 *= 2;
            --v75;
            BOOL v78 = v74 != 0;
            BOOL v77 = v71 != 0;
          }
          while (v74 | v71);
LABEL_116:
          uint64_t v82 = (unsigned char *)(a3 + v68);
          if (v237)
          {
            uint64_t v83 = v43;
            int v84 = v49;
            BOOL v85 = v51;
            memcpy(__dst, (const void *)(a3 + v68), sizeof(__dst));
            BOOL v51 = v85;
            int v49 = v84;
            uint64_t v43 = v83;
            uint64_t v82 = __dst;
          }
          uint64_t v86 = (unsigned __int8 *)(a4 + 8 * v76);
          int8x8_t v87 = (int64x2_t *)(v240 + 4 * (v48 - v44));
          char v88 = v50 < 0x10 || v51;
          if ((v88 & 1) == 0 && v247 > 7)
          {
            unsigned int v89 = *v86;
            if (v89 == 63)
            {
              int8x8_t v97 = (const double *)(v82 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v97);
              int64x2_t v98 = *(int64x2_t *)v82;
              int64x2_t v99 = *((int64x2_t *)v82 + 1);
              int64x2_t *v87 = vzip1q_s64(*(int64x2_t *)v82, v99);
              int64x2_t v37 = vzip2q_s64(v98, v99);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v87 + a11) = v37;
              uint64_t v90 = 2 * a11;
              uint64_t v100 = (int64x2_t *)((char *)v87 + v230);
              int64x2_t *v100 = v38;
              *(int64x2_t *)((char *)v100 + a11) = v36;
              uint64_t v91 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v90 = 2 * a11;
              if (v89 == 1)
              {
                int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v82);
                int64x2_t *v87 = v38;
                *(int64x2_t *)((char *)v87 + a11) = v38;
                *(int64x2_t *)((char *)v87 + 2 * a11) = v38;
                *(int64x2_t *)((char *)v87 + 3 * a11) = v38;
                uint64_t v91 = 2;
              }
              else if (*v86)
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, (uint64_t)v82, v89, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                uint64_t v91 = 0;
                v87->i64[0] = 0;
                v87->i64[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v87->i64 + a11);
                void *v92 = 0;
                v92[1] = 0;
                int8x8_t v93 = (uint64_t *)((char *)v87->i64 + v230);
                *int8x8_t v93 = 0;
                v93[1] = 0;
                uint64_t v94 = (uint64_t *)((char *)v87->i64 + v229);
                *uint64_t v94 = 0;
                v94[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)&v82[v91];
            uint64_t v102 = v87 + 1;
            unsigned int v103 = v86[1];
            if (v103 == 63)
            {
              unint64_t v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v101;
              int64x2_t v110 = *(int64x2_t *)(v101 + 16);
              int64x2_t *v102 = vzip1q_s64(*(int64x2_t *)v101, v110);
              int64x2_t v37 = vzip2q_s64(v109, v110);
              *(int64x2_t *)((char *)v102 + v34) = v37;
              unsigned int v111 = (int64x2_t *)((char *)v102 + v90);
              *unsigned int v111 = v38;
              *(int64x2_t *)((char *)v111 + v34) = v36;
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              int64x2_t *v102 = v38;
              *(int64x2_t *)((char *)v102 + v34) = v38;
              *(int64x2_t *)((char *)v102 + v90) = v38;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v38;
              uint64_t v104 = 2;
            }
            else if (v86[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v34, v101, v103, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v87[1].i64[1] = 0;
              int8x8_t v105 = (uint64_t *)((char *)v102->i64 + v34);
              void *v105 = 0;
              v105[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v102->i64 + v90);
              void *v106 = 0;
              v106[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v102->i64 + v229);
              void *v107 = 0;
              v107[1] = 0;
            }
            uint64_t v112 = v101 + v104;
            uint64_t v113 = (int64x2_t *)((char *)v87 + v232);
            unsigned int v114 = v86[2];
            if (v114 == 63)
            {
              uint64_t v119 = (const double *)(v112 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v119);
              int64x2_t v120 = *(int64x2_t *)v112;
              int64x2_t v121 = *(int64x2_t *)(v112 + 16);
              *uint64_t v113 = vzip1q_s64(*(int64x2_t *)v112, v121);
              int64x2_t v37 = vzip2q_s64(v120, v121);
              *(int64x2_t *)((char *)v113 + v34) = v37;
              BOOL v122 = (int64x2_t *)((char *)v113 + v90);
              int64x2_t *v122 = v38;
              *(int64x2_t *)((char *)v122 + v34) = v36;
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v112);
              *uint64_t v113 = v38;
              *(int64x2_t *)((char *)v113 + v34) = v38;
              *(int64x2_t *)((char *)v113 + v90) = v38;
              *(int64x2_t *)((char *)v113 + 3 * a11) = v38;
              uint64_t v115 = 2;
            }
            else if (v86[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v87 + v232), v34, v112, v114, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              unsigned int v117 = (uint64_t *)((char *)v113->i64 + v90);
              void *v117 = 0;
              v117[1] = 0;
              int v118 = (uint64_t *)((char *)v113->i64 + v229);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v123 = v112 + v115;
            int v124 = v113 + 1;
            unsigned int v125 = v86[3];
            if (v125 == 63)
            {
              unsigned int v130 = (const double *)(v123 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v130);
              int64x2_t v131 = *(int64x2_t *)v123;
              int64x2_t v132 = *(int64x2_t *)(v123 + 16);
              *int v124 = vzip1q_s64(*(int64x2_t *)v123, v132);
              int64x2_t v37 = vzip2q_s64(v131, v132);
              *(int64x2_t *)((char *)v124 + v34) = v37;
              uint64_t v133 = (int64x2_t *)((char *)v124 + v90);
              *uint64_t v133 = v38;
              *(int64x2_t *)((char *)v133 + v34) = v36;
              uint64_t v126 = 64;
            }
            else if (v125 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v123);
              *int v124 = v38;
              *(int64x2_t *)((char *)v124 + v34) = v38;
              *(int64x2_t *)((char *)v124 + v90) = v38;
              *(int64x2_t *)((char *)v124 + 3 * a11) = v38;
              uint64_t v126 = 2;
            }
            else if (v86[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v124, v34, v123, v125, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v126 = 0;
              v124->i64[0] = 0;
              v113[1].i64[1] = 0;
              int v127 = (uint64_t *)((char *)v124->i64 + v34);
              void *v127 = 0;
              v127[1] = 0;
              unsigned int v128 = (uint64_t *)((char *)v124->i64 + v90);
              void *v128 = 0;
              v128[1] = 0;
              unsigned int v129 = (uint64_t *)((char *)v124->i64 + v229);
              *unsigned int v129 = 0;
              v129[1] = 0;
            }
            uint64_t v134 = v123 + v126;
            BOOL v135 = v87 + 2;
            unsigned int v136 = v86[4];
            if (v136 == 63)
            {
              int v141 = (const double *)(v134 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v141);
              int64x2_t v142 = *(int64x2_t *)v134;
              int64x2_t v143 = *(int64x2_t *)(v134 + 16);
              int64x2_t *v135 = vzip1q_s64(*(int64x2_t *)v134, v143);
              int64x2_t v37 = vzip2q_s64(v142, v143);
              *(int64x2_t *)((char *)v135 + v34) = v37;
              uint64_t v144 = (int64x2_t *)((char *)v135 + v90);
              *uint64_t v144 = v38;
              *(int64x2_t *)((char *)v144 + v34) = v36;
              uint64_t v137 = 64;
            }
            else if (v136 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v134);
              int64x2_t *v135 = v38;
              *(int64x2_t *)((char *)v135 + v34) = v38;
              *(int64x2_t *)((char *)v135 + v90) = v38;
              *(int64x2_t *)((char *)v135 + 3 * a11) = v38;
              uint64_t v137 = 2;
            }
            else if (v86[4])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v135, v34, v134, v136, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v137 = 0;
              v135->i64[0] = 0;
              v87[2].i64[1] = 0;
              __int32 v138 = (uint64_t *)((char *)v135->i64 + v34);
              void *v138 = 0;
              v138[1] = 0;
              unsigned int v139 = (uint64_t *)((char *)v135->i64 + v90);
              *unsigned int v139 = 0;
              v139[1] = 0;
              int v140 = (uint64_t *)((char *)v135->i64 + v229);
              void *v140 = 0;
              v140[1] = 0;
            }
            uint64_t v145 = v134 + v137;
            unsigned int v146 = v87 + 3;
            unsigned int v147 = v86[5];
            if (v147 == 63)
            {
              uint64_t v152 = (const double *)(v145 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v152);
              int64x2_t v153 = *(int64x2_t *)v145;
              int64x2_t v154 = *(int64x2_t *)(v145 + 16);
              int64x2_t *v146 = vzip1q_s64(*(int64x2_t *)v145, v154);
              int64x2_t v37 = vzip2q_s64(v153, v154);
              *(int64x2_t *)((char *)v146 + v34) = v37;
              unsigned int v155 = (int64x2_t *)((char *)v146 + v90);
              int64x2_t *v155 = v38;
              *(int64x2_t *)((char *)v155 + v34) = v36;
              uint64_t v148 = 64;
            }
            else if (v147 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v145);
              int64x2_t *v146 = v38;
              *(int64x2_t *)((char *)v146 + v34) = v38;
              *(int64x2_t *)((char *)v146 + v90) = v38;
              *(int64x2_t *)((char *)v146 + 3 * a11) = v38;
              uint64_t v148 = 2;
            }
            else if (v86[5])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v146, v34, v145, v147, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v148 = 0;
              v146->i64[0] = 0;
              v87[3].i64[1] = 0;
              unsigned int v149 = (uint64_t *)((char *)v146->i64 + v34);
              *unsigned int v149 = 0;
              v149[1] = 0;
              unsigned int v150 = (uint64_t *)((char *)v146->i64 + v90);
              void *v150 = 0;
              v150[1] = 0;
              uint64_t v151 = (uint64_t *)((char *)v146->i64 + v229);
              void *v151 = 0;
              v151[1] = 0;
            }
            uint64_t v156 = v145 + v148;
            unsigned int v157 = v113 + 2;
            unsigned int v158 = v86[6];
            if (v158 == 63)
            {
              long long v163 = (const double *)(v156 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v163);
              int64x2_t v164 = *(int64x2_t *)v156;
              int64x2_t v165 = *(int64x2_t *)(v156 + 16);
              *unsigned int v157 = vzip1q_s64(*(int64x2_t *)v156, v165);
              int64x2_t v37 = vzip2q_s64(v164, v165);
              *(int64x2_t *)((char *)v157 + v34) = v37;
              long long v166 = (int64x2_t *)((char *)v157 + v90);
              *long long v166 = v38;
              *(int64x2_t *)((char *)v166 + v34) = v36;
              uint64_t v159 = 64;
            }
            else if (v158 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v156);
              *unsigned int v157 = v38;
              *(int64x2_t *)((char *)v157 + v34) = v38;
              *(int64x2_t *)((char *)v157 + v90) = v38;
              *(int64x2_t *)((char *)v157 + 3 * a11) = v38;
              uint64_t v159 = 2;
            }
            else if (v86[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, v34, v145 + v148, v158, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              uint64_t v159 = 0;
              v157->i64[0] = 0;
              v113[2].i64[1] = 0;
              long long v160 = (uint64_t *)((char *)v157->i64 + v34);
              *long long v160 = 0;
              v160[1] = 0;
              int32x4_t v161 = (uint64_t *)((char *)v157->i64 + v90);
              *int32x4_t v161 = 0;
              v161[1] = 0;
              long long v162 = (uint64_t *)((char *)v157->i64 + v229);
              *long long v162 = 0;
              v162[1] = 0;
            }
            uint64_t v167 = v156 + v159;
            uint64_t v168 = v113 + 3;
            unsigned int v169 = v86[7];
            if (v169 == 63)
            {
              int32x4_t v173 = (const double *)(v167 + 32);
              *(float64x2x2_t *)v38.i8 = vld2q_f64(v173);
              int64x2_t v174 = *(int64x2_t *)v167;
              int64x2_t v175 = *(int64x2_t *)(v167 + 16);
              *uint64_t v168 = vzip1q_s64(*(int64x2_t *)v167, v175);
              int64x2_t v37 = vzip2q_s64(v174, v175);
              *(int64x2_t *)((char *)v168 + v34) = v37;
              uint64_t v176 = (int64x2_t *)((char *)v168 + v90);
              *uint64_t v176 = v38;
              *(int64x2_t *)((char *)v176 + v34) = v36;
              unsigned int v44 = a7;
              uint64_t v17 = v244;
            }
            else
            {
              unsigned int v44 = a7;
              uint64_t v17 = v244;
              if (v169 == 1)
              {
                int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v167);
                *uint64_t v168 = v38;
                *(int64x2_t *)((char *)v168 + v34) = v38;
                *(int64x2_t *)((char *)v168 + v90) = v38;
                *(int64x2_t *)((char *)v168 + 3 * a11) = v38;
              }
              else if (v169)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v168, v34, v167, v169, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
              }
              else
              {
                v168->i64[0] = 0;
                v113[3].i64[1] = 0;
                unsigned int v170 = (uint64_t *)((char *)v168->i64 + v34);
                *unsigned int v170 = 0;
                v170[1] = 0;
                unsigned int v171 = (uint64_t *)((char *)v168->i64 + v90);
                void *v171 = 0;
                v171[1] = 0;
                uint64_t v172 = (uint64_t *)((char *)v168->i64 + v229);
                *uint64_t v172 = 0;
                v172[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v244;
          block[5] = v82;
          char v255 = v50;
          char v256 = v247;
          unsigned int v251 = v233;
          unsigned int v252 = v48 - v46;
          block[6] = v86;
          int32x4_t v249 = v87;
          uint64_t v34 = a11;
          uint64_t v250 = a11;
          unsigned int v253 = v241;
          unsigned int v254 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v244 + 8) + 7384), block);
            unsigned int v44 = a7;
            uint64_t v17 = v244;
LABEL_47:
            unsigned int v45 = v41 + 1;
            goto LABEL_48;
          }
          unsigned int v95 = *v86;
          if (v95 == 63)
          {
            int64x2_t v36 = *((int64x2_t *)v82 + 1);
            float32x4_t v177 = (const double *)(v82 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v177);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v82, v36);
            int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v82, v36);
            int64x2_t v262 = v38;
            int64x2_t v266 = v37;
            int64x2_t v270 = v178;
            uint64_t v96 = 64;
          }
          else if (v95 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v82);
            int64x2_t v258 = v38;
            int64x2_t v262 = v38;
            int64x2_t v266 = v38;
            int64x2_t v270 = v38;
            uint64_t v96 = 2;
          }
          else if (*v86)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, (uint64_t)v82, v95, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v96 = 0;
            int64x2_t v258 = 0uLL;
            int64x2_t v262 = 0uLL;
            int64x2_t v266 = 0uLL;
            int64x2_t v270 = 0uLL;
          }
          uint64_t v179 = (uint64_t)&v82[v96];
          unsigned int v180 = v86[1];
          if (v180 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v179 + 16);
            long long v182 = (const double *)(v179 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v182);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v179, v36);
            int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v179, v36);
            int64x2_t v263 = v38;
            int64x2_t v267 = v37;
            int64x2_t v271 = v183;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v179);
            int64x2_t v259 = v38;
            int64x2_t v263 = v38;
            int64x2_t v267 = v38;
            int64x2_t v271 = v38;
            uint64_t v181 = 2;
          }
          else if (v86[1])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v179, v180, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int64x2_t v259 = 0uLL;
            int64x2_t v263 = 0uLL;
            int64x2_t v267 = 0uLL;
            int64x2_t v271 = 0uLL;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v86[2];
          if (v185 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v184 + 16);
            long long v187 = (const double *)(v184 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v187);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v184, v36);
            int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v184, v36);
            int64x2_t v278 = v38;
            int64x2_t v282 = v37;
            int64x2_t v286 = v188;
            uint64_t v186 = 64;
          }
          else if (v185 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v184);
            int64x2_t v274 = v38;
            int64x2_t v278 = v38;
            int64x2_t v282 = v38;
            int64x2_t v286 = v38;
            uint64_t v186 = 2;
          }
          else if (v86[2])
          {
            uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 64, v184, v185, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v186 = 0;
            int64x2_t v274 = 0uLL;
            int64x2_t v278 = 0uLL;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v86[3];
          if (v190 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v189 + 16);
            uint64_t v192 = (const double *)(v189 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v192);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v189, v36);
            int64x2_t v275 = vzip1q_s64(*(int64x2_t *)v189, v36);
            int64x2_t v279 = v38;
            int64x2_t v283 = v37;
            int64x2_t v287 = v193;
            uint64_t v191 = 64;
          }
          else if (v190 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v189);
            int64x2_t v275 = v38;
            int64x2_t v279 = v38;
            int64x2_t v283 = v38;
            int64x2_t v287 = v38;
            uint64_t v191 = 2;
          }
          else if (v86[3])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 64, v189, v190, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v191 = 0;
            int64x2_t v275 = 0uLL;
            int64x2_t v279 = 0uLL;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
          }
          uint64_t v194 = v189 + v191;
          unsigned int v195 = v86[4];
          if (v195 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v194 + 16);
            int v197 = (const double *)(v194 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v197);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v194, v36);
            int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v194, v36);
            int64x2_t v264 = v38;
            int64x2_t v268 = v37;
            int64x2_t v272 = v198;
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v260 = v38;
            int64x2_t v264 = v38;
            int64x2_t v268 = v38;
            int64x2_t v272 = v38;
            uint64_t v196 = 2;
          }
          else if (v86[4])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v194, v195, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v199 = v194 + v196;
          unsigned int v200 = v86[5];
          if (v200 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v199 + 16);
            long long v202 = (const double *)(v199 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v202);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v199, v36);
            int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v199, v36);
            int64x2_t v265 = v38;
            int64x2_t v269 = v37;
            int64x2_t v273 = v203;
            uint64_t v201 = 64;
          }
          else if (v200 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v199);
            int64x2_t v261 = v38;
            int64x2_t v265 = v38;
            int64x2_t v269 = v38;
            int64x2_t v273 = v38;
            uint64_t v201 = 2;
          }
          else if (v86[5])
          {
            uint64_t v201 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 64, v199, v200, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v201 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v204 = v199 + v201;
          unsigned int v205 = v86[6];
          if (v205 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v204 + 16);
            long long v207 = (const double *)(v204 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v207);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v204, v36);
            int64x2_t v276 = vzip1q_s64(*(int64x2_t *)v204, v36);
            int64x2_t v280 = v38;
            int64x2_t v284 = v37;
            int64x2_t v288 = v208;
            uint64_t v206 = 64;
          }
          else if (v205 == 1)
          {
            int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v204);
            int64x2_t v276 = v38;
            int64x2_t v280 = v38;
            int64x2_t v284 = v38;
            int64x2_t v288 = v38;
            uint64_t v206 = 2;
          }
          else if (v86[6])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 64, v204, v205, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
          }
          else
          {
            uint64_t v206 = 0;
            int64x2_t v276 = 0uLL;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            int64x2_t v288 = 0uLL;
          }
          uint64_t v209 = v204 + v206;
          unsigned int v210 = v86[7];
          if (v210 == 63)
          {
            int64x2_t v36 = *(int64x2_t *)(v209 + 16);
            unsigned int v211 = (const double *)(v209 + 32);
            *(float64x2x2_t *)v37.i8 = vld2q_f64(v211);
            int64x2_t v38 = vzip2q_s64(*(int64x2_t *)v209, v36);
            int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v209, v36);
            int64x2_t v281 = v38;
            int64x2_t v285 = v37;
            int64x2_t v289 = v212;
            unsigned int v44 = a7;
            uint64_t v17 = v244;
          }
          else
          {
            unsigned int v44 = a7;
            uint64_t v17 = v244;
            if (v210 == 1)
            {
              int64x2_t v38 = (int64x2_t)vld1q_dup_s16((const __int16 *)v209);
              int64x2_t v277 = v38;
              int64x2_t v281 = v38;
              int64x2_t v285 = v38;
              int64x2_t v289 = v38;
            }
            else if (v210)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, v209, v210, *(int8x8_t *)v38.i8, *(double *)v36.i64, *(int8x8_t *)v37.i8);
            }
            else
            {
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              int64x2_t v285 = 0uLL;
              int64x2_t v289 = 0uLL;
            }
          }
          unint64_t v213 = v253;
          unsigned int v45 = v41 + 1;
          if (v253)
          {
            unint64_t v214 = 0;
            int16x8_t v215 = &v258.i8[64 * (unint64_t)v251 + 4 * v252];
            unsigned int v216 = v254;
            do
            {
              if (v216)
              {
                uint64_t v217 = 0;
                long long v218 = &v249->i8[v250 * v214];
                do
                {
                  v218[v217] = v215[v217];
                  ++v217;
                  unsigned int v216 = v254;
                }
                while (4 * (unint64_t)v254 > v217);
                unint64_t v213 = v253;
              }
              ++v214;
              v215 += 64;
            }
            while (v214 < v213);
          }
LABEL_48:
          BOOL v22 = v41 == v235 >> 4;
          unsigned int v41 = v45;
        }
        while (!v22);
        BOOL v22 = v21++ == v223;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v287 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v221 = a8 + a10 - 1;
  unsigned int v223 = v221 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v223)
  {
    unsigned int v232 = a7 + a9 - 1;
    unsigned int v220 = a7 >> 4;
    if (a7 >> 4 <= v232 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v217 = a5 - 1;
      unsigned int v243 = (a5 - 1) >> 4;
      int v242 = ((a5 - 1) & 0xF) + 1;
      int v218 = ((a6 - 1) & 7) + 1;
      unsigned int v219 = (a6 - 1) >> 3;
      uint64_t v226 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v28.i64[0] = 0x2000000010;
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v27.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v231 = v29.i32[0] | v29.i32[1];
      uint64_t v230 = v29.i64[0];
      BOOL v229 = v29.i32[0] != 0;
      BOOL v228 = v29.i32[1] != 0;
      unint64_t v216 = 8 * v19 * (unint64_t)v18;
      uint64_t v241 = v16;
      uint64_t v224 = 3 * a11;
      uint64_t v225 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v17) | 7;
        if (8 * v17 <= v240) {
          int v31 = v240;
        }
        else {
          int v31 = 8 * v17;
        }
        unsigned int v32 = v220;
        if (v221 < v30) {
          unsigned int v30 = v221;
        }
        unsigned int v239 = 8 * v17;
        int v227 = v31 - 8 * v17;
        int v238 = v30 - v31 + 1;
        int v33 = v218;
        if (v17 != v219) {
          int v33 = 8;
        }
        unsigned int v244 = v33;
        uint64_t v237 = a2 + (v31 - v240) * v25;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v232 < v35) {
            unsigned int v35 = v232;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v243) {
            unsigned int v38 = v242;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v239 >= v240 && v34 >= a7)
          {
            int v40 = v242;
            if (v32 != v243) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v238 != v244;
          }
          if (isLevelTiled)
          {
            unsigned int v200 = 0;
            uint64_t v201 = v216 >> (*(unsigned char *)(v16 + 57) != 0);
            char v202 = 1;
            if (v201 > 127)
            {
              if (v201 > 511)
              {
                if (v201 == 512)
                {
                  char v203 = 0;
                  unsigned int v200 = 16;
                  unsigned int v204 = 16;
                }
                else
                {
                  char v203 = 1;
                  unsigned int v204 = 0;
                  if (v201 == 1024)
                  {
                    unsigned int v204 = 8;
                    unsigned int v200 = 16;
                  }
                }
              }
              else if (v201 == 128)
              {
                char v202 = 0;
                char v203 = 0;
                unsigned int v200 = 32;
                unsigned int v204 = 32;
              }
              else
              {
                char v203 = 1;
                unsigned int v204 = 0;
                if (v201 == 256)
                {
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 16;
                  unsigned int v200 = 32;
                }
              }
            }
            else
            {
              char v203 = 1;
              unsigned int v204 = 0;
              switch(v201)
              {
                case 4:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 128;
                  unsigned int v200 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v200 = 128;
                  unsigned int v204 = 128;
                  break;
                case 16:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 64;
                  unsigned int v200 = 128;
                  break;
                case 32:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v200 = 64;
                  unsigned int v204 = 64;
                  break;
                default:
                  if (v201 == 64)
                  {
                    char v202 = 0;
                    char v203 = 0;
                    unsigned int v204 = 32;
                    unsigned int v200 = 64;
                  }
                  break;
              }
            }
            unsigned int v205 = (v200 >> 4) - 1;
            if (v202) {
              unsigned int v206 = 0;
            }
            else {
              unsigned int v206 = 32 - __clz(~(-1 << -(char)__clz(v205)));
            }
            unsigned int v207 = (v204 >> 3) - 1;
            if (v203)
            {
              unsigned int v208 = 0;
              if (v206) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v208 = 32 - __clz(~(-1 << -(char)__clz(v207)));
              if (v208 | v206)
              {
LABEL_233:
                int v209 = 0;
                uint64_t v210 = 0;
                int v211 = v32 & v205;
                int v212 = v17 & v207;
                BOOL v213 = v208 != 0;
                BOOL v214 = v206 != 0;
                int v215 = 1;
                do
                {
                  --v208;
                  if (v213) {
                    v210 |= (unint64_t)(v215 & v212) << v209++;
                  }
                  else {
                    unsigned int v208 = 0;
                  }
                  --v206;
                  if (v214) {
                    v210 |= (unint64_t)(v215 & v211) << v209++;
                  }
                  else {
                    unsigned int v206 = 0;
                  }
                  v215 *= 2;
                  --v209;
                  BOOL v214 = v206 != 0;
                  BOOL v213 = v208 != 0;
                }
                while (v206 | v208);
                goto LABEL_245;
              }
            }
            uint64_t v210 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v200 + v239 / v204 * ((v200 + v217) / v200)) << 14) + (v210 << 9);
            goto LABEL_59;
          }
          if (v231)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v229;
            BOOL v46 = v228;
            int v47 = v230;
            int v48 = HIDWORD(v230);
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v32) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (unsigned char *)(a3 + v49);
          if (v234)
          {
            int v64 = v37;
            memcpy(__dst, (const void *)(a3 + v49), sizeof(__dst));
            int v37 = v64;
            int v63 = __dst;
          }
          BOOL v65 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v66 = a7;
          int v67 = (int64x2_t *)(v237 + 4 * (v36 - a7));
          char v68 = v38 < 0x10 || v39;
          if ((v68 & 1) != 0 || v244 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v241;
            block[5] = v63;
            char v252 = v38;
            char v253 = v244;
            unsigned int v248 = v227;
            unsigned int v249 = v36 - v34;
            block[6] = v65;
            unsigned int v246 = v67;
            uint64_t v25 = a11;
            uint64_t v247 = a11;
            unsigned int v250 = v238;
            unsigned int v251 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v241 + 8) + 7384), block);
              a7 = v66;
              uint64_t v16 = v241;
LABEL_149:
              unsigned int v150 = v32 + 1;
              goto LABEL_27;
            }
            unsigned int v75 = *v65;
            a7 = v66;
            if (v75 == 63)
            {
              int64x2_t v27 = *((int64x2_t *)v63 + 1);
              unsigned int v158 = (const double *)(v63 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v158);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v63, v27);
              int64x2_t v255 = vzip1q_s64(*(int64x2_t *)v63, v27);
              int64x2_t v259 = v29;
              int64x2_t v263 = v28;
              int64x2_t v267 = v159;
              uint64_t v76 = 64;
            }
            else if (v75 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v63);
              int64x2_t v255 = v29;
              int64x2_t v259 = v29;
              int64x2_t v263 = v29;
              int64x2_t v267 = v29;
              uint64_t v76 = 2;
            }
            else if (*v65)
            {
              uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 64, (uint64_t)v63, v75, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v76 = 0;
              int64x2_t v255 = 0uLL;
              int64x2_t v259 = 0uLL;
              int64x2_t v263 = 0uLL;
              int64x2_t v267 = 0uLL;
            }
            uint64_t v160 = (uint64_t)&v63[v76];
            unsigned int v161 = v65[1];
            if (v161 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v160 + 16);
              long long v163 = (const double *)(v160 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v163);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v160, v27);
              int64x2_t v256 = vzip1q_s64(*(int64x2_t *)v160, v27);
              int64x2_t v260 = v29;
              int64x2_t v264 = v28;
              int64x2_t v268 = v164;
              uint64_t v162 = 64;
            }
            else if (v161 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v160);
              int64x2_t v256 = v29;
              int64x2_t v260 = v29;
              int64x2_t v264 = v29;
              int64x2_t v268 = v29;
              uint64_t v162 = 2;
            }
            else if (v65[1])
            {
              uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 64, v160, v161, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v162 = 0;
              int64x2_t v256 = 0uLL;
              int64x2_t v260 = 0uLL;
              int64x2_t v264 = 0uLL;
              int64x2_t v268 = 0uLL;
            }
            uint64_t v165 = v160 + v162;
            unsigned int v166 = v65[2];
            if (v166 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v165 + 16);
              uint64_t v168 = (const double *)(v165 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v168);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v165, v27);
              int64x2_t v271 = vzip1q_s64(*(int64x2_t *)v165, v27);
              int64x2_t v275 = v29;
              int64x2_t v279 = v28;
              int64x2_t v283 = v169;
              uint64_t v167 = 64;
            }
            else if (v166 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v165);
              int64x2_t v271 = v29;
              int64x2_t v275 = v29;
              int64x2_t v279 = v29;
              int64x2_t v283 = v29;
              uint64_t v167 = 2;
            }
            else if (v65[2])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 64, v165, v166, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v167 = 0;
              int64x2_t v271 = 0uLL;
              int64x2_t v275 = 0uLL;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
            }
            uint64_t v170 = v165 + v167;
            unsigned int v171 = v65[3];
            if (v171 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v170 + 16);
              int32x4_t v173 = (const double *)(v170 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v173);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v170, v27);
              int64x2_t v272 = vzip1q_s64(*(int64x2_t *)v170, v27);
              int64x2_t v276 = v29;
              int64x2_t v280 = v28;
              int64x2_t v284 = v174;
              uint64_t v172 = 64;
            }
            else if (v171 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v170);
              int64x2_t v272 = v29;
              int64x2_t v276 = v29;
              int64x2_t v280 = v29;
              int64x2_t v284 = v29;
              uint64_t v172 = 2;
            }
            else if (v65[3])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 64, v170, v171, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v172 = 0;
              int64x2_t v272 = 0uLL;
              int64x2_t v276 = 0uLL;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
            }
            uint64_t v175 = v170 + v172;
            unsigned int v176 = v65[4];
            if (v176 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v175 + 16);
              int64x2_t v178 = (const double *)(v175 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v178);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v175, v27);
              int64x2_t v257 = vzip1q_s64(*(int64x2_t *)v175, v27);
              int64x2_t v261 = v29;
              int64x2_t v265 = v28;
              int64x2_t v269 = v179;
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v257 = v29;
              int64x2_t v261 = v29;
              int64x2_t v265 = v29;
              int64x2_t v269 = v29;
              uint64_t v177 = 2;
            }
            else if (v65[4])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v175, v176, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v257 = 0uLL;
              int64x2_t v261 = 0uLL;
              int64x2_t v265 = 0uLL;
              int64x2_t v269 = 0uLL;
            }
            uint64_t v180 = v175 + v177;
            unsigned int v181 = v65[5];
            if (v181 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v180 + 16);
              int64x2_t v183 = (const double *)(v180 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v183);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v180, v27);
              int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v180, v27);
              int64x2_t v262 = v29;
              int64x2_t v266 = v28;
              int64x2_t v270 = v184;
              uint64_t v182 = 64;
            }
            else if (v181 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v180);
              int64x2_t v258 = v29;
              int64x2_t v262 = v29;
              int64x2_t v266 = v29;
              int64x2_t v270 = v29;
              uint64_t v182 = 2;
            }
            else if (v65[5])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, v180, v181, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v182 = 0;
              int64x2_t v258 = 0uLL;
              int64x2_t v262 = 0uLL;
              int64x2_t v266 = 0uLL;
              int64x2_t v270 = 0uLL;
            }
            uint64_t v185 = v180 + v182;
            unsigned int v186 = v65[6];
            if (v186 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v185 + 16);
              int64x2_t v188 = (const double *)(v185 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v188);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v185, v27);
              int64x2_t v273 = vzip1q_s64(*(int64x2_t *)v185, v27);
              int64x2_t v277 = v29;
              int64x2_t v281 = v28;
              int64x2_t v285 = v189;
              uint64_t v187 = 64;
            }
            else if (v186 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v185);
              int64x2_t v273 = v29;
              int64x2_t v277 = v29;
              int64x2_t v281 = v29;
              int64x2_t v285 = v29;
              uint64_t v187 = 2;
            }
            else if (v65[6])
            {
              uint64_t v187 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 64, v185, v186, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v187 = 0;
              int64x2_t v273 = 0uLL;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              int64x2_t v285 = 0uLL;
            }
            uint64_t v190 = v185 + v187;
            unsigned int v191 = v65[7];
            if (v191 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v190 + 16);
              uint64_t v192 = (const double *)(v190 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v192);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v190, v27);
              int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v190, v27);
              int64x2_t v278 = v29;
              int64x2_t v282 = v28;
              int64x2_t v286 = v193;
              uint64_t v16 = v241;
              unsigned int v150 = v32 + 1;
            }
            else
            {
              uint64_t v16 = v241;
              unsigned int v150 = v32 + 1;
              if (v191 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v190);
                int64x2_t v274 = v29;
                int64x2_t v278 = v29;
                int64x2_t v282 = v29;
                int64x2_t v286 = v29;
              }
              else if (v65[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 64, v190, v191, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                int64x2_t v274 = 0uLL;
                int64x2_t v278 = 0uLL;
                int64x2_t v282 = 0uLL;
                int64x2_t v286 = 0uLL;
              }
            }
            unint64_t v194 = v250;
            if (v250)
            {
              unint64_t v195 = 0;
              uint64_t v196 = &v255.i8[64 * (unint64_t)v248 + 4 * v249];
              unsigned int v197 = v251;
              do
              {
                if (v197)
                {
                  uint64_t v198 = 0;
                  uint64_t v199 = &v246->i8[v247 * v195];
                  do
                  {
                    v199[v198] = v196[v198];
                    ++v198;
                    unsigned int v197 = v251;
                  }
                  while (4 * (unint64_t)v251 > v198);
                  unint64_t v194 = v250;
                }
                ++v195;
                v196 += 64;
              }
              while (v195 < v194);
            }
          }
          else
          {
            unsigned int v69 = *v65;
            if (v69 == 63)
            {
              BOOL v77 = (const double *)(v63 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v63;
              int64x2_t v79 = *((int64x2_t *)v63 + 1);
              *int v67 = vzip1q_s64(*(int64x2_t *)v63, v79);
              int64x2_t v28 = vzip2q_s64(v78, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v67 + a11) = v28;
              uint64_t v70 = 2 * a11;
              BOOL v80 = (int64x2_t *)((char *)v67 + v225);
              int64x2_t *v80 = v29;
              *(int64x2_t *)((char *)v80 + a11) = v27;
              uint64_t v71 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v70 = 2 * a11;
              if (v69 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v63);
                *int v67 = v29;
                *(int64x2_t *)((char *)v67 + a11) = v29;
                *(int64x2_t *)((char *)v67 + 2 * a11) = v29;
                *(int64x2_t *)((char *)v67 + 3 * a11) = v29;
                uint64_t v71 = 2;
              }
              else if (*v65)
              {
                uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v67, a11, (uint64_t)v63, v69, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v71 = 0;
                v67->i64[0] = 0;
                v67->i64[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v67->i64 + a11);
                *unsigned int v72 = 0;
                v72[1] = 0;
                unsigned int v73 = (uint64_t *)((char *)v67->i64 + v225);
                void *v73 = 0;
                v73[1] = 0;
                unsigned int v74 = (uint64_t *)((char *)v67->i64 + v224);
                void *v74 = 0;
                v74[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v63[v71];
            uint64_t v82 = v67 + 1;
            unsigned int v83 = v65[1];
            if (v83 == 63)
            {
              char v88 = (const double *)(v81 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v88);
              int64x2_t v89 = *(int64x2_t *)v81;
              int64x2_t v90 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v90);
              int64x2_t v28 = vzip2q_s64(v89, v90);
              *(int64x2_t *)((char *)v82 + v25) = v28;
              uint64_t v91 = (int64x2_t *)((char *)v82 + v70);
              *uint64_t v91 = v29;
              *(int64x2_t *)((char *)v91 + v25) = v27;
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = v29;
              *(int64x2_t *)((char *)v82 + v25) = v29;
              *(int64x2_t *)((char *)v82 + v70) = v29;
              *(int64x2_t *)((char *)v82 + 3 * a11) = v29;
              uint64_t v84 = 2;
            }
            else if (v65[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v67[1].i64[1] = 0;
              BOOL v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              uint64_t v86 = (uint64_t *)((char *)v82->i64 + v70);
              void *v86 = 0;
              v86[1] = 0;
              int8x8_t v87 = (uint64_t *)((char *)v82->i64 + v224);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v92 = v81 + v84;
            int8x8_t v93 = (int64x2_t *)((char *)v67 + v226);
            unsigned int v94 = v65[2];
            if (v94 == 63)
            {
              int64x2_t v99 = (const double *)(v92 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v99);
              int64x2_t v100 = *(int64x2_t *)v92;
              int64x2_t v101 = *(int64x2_t *)(v92 + 16);
              *int8x8_t v93 = vzip1q_s64(*(int64x2_t *)v92, v101);
              int64x2_t v28 = vzip2q_s64(v100, v101);
              *(int64x2_t *)((char *)v93 + v25) = v28;
              uint64_t v102 = (int64x2_t *)((char *)v93 + v70);
              int64x2_t *v102 = v29;
              *(int64x2_t *)((char *)v102 + v25) = v27;
              uint64_t v95 = 64;
            }
            else if (v94 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
              *int8x8_t v93 = v29;
              *(int64x2_t *)((char *)v93 + v25) = v29;
              *(int64x2_t *)((char *)v93 + v70) = v29;
              *(int64x2_t *)((char *)v93 + 3 * a11) = v29;
              uint64_t v95 = 2;
            }
            else if (v65[2])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v67 + v226), v25, v92, v94, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v95 = 0;
              v93->i64[0] = 0;
              v93->i64[1] = 0;
              uint64_t v96 = (uint64_t *)((char *)v93->i64 + v25);
              void *v96 = 0;
              v96[1] = 0;
              int8x8_t v97 = (uint64_t *)((char *)v93->i64 + v70);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v93->i64 + v224);
              void *v98 = 0;
              v98[1] = 0;
            }
            uint64_t v103 = v92 + v95;
            uint64_t v104 = v93 + 1;
            unsigned int v105 = v65[3];
            if (v105 == 63)
            {
              int64x2_t v110 = (const double *)(v103 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v110);
              int64x2_t v111 = *(int64x2_t *)v103;
              int64x2_t v112 = *(int64x2_t *)(v103 + 16);
              *uint64_t v104 = vzip1q_s64(*(int64x2_t *)v103, v112);
              int64x2_t v28 = vzip2q_s64(v111, v112);
              *(int64x2_t *)((char *)v104 + v25) = v28;
              uint64_t v113 = (int64x2_t *)((char *)v104 + v70);
              *uint64_t v113 = v29;
              *(int64x2_t *)((char *)v113 + v25) = v27;
              uint64_t v106 = 64;
            }
            else if (v105 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v103);
              *uint64_t v104 = v29;
              *(int64x2_t *)((char *)v104 + v25) = v29;
              *(int64x2_t *)((char *)v104 + v70) = v29;
              *(int64x2_t *)((char *)v104 + 3 * a11) = v29;
              uint64_t v106 = 2;
            }
            else if (v65[3])
            {
              uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v104, v25, v103, v105, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v106 = 0;
              v104->i64[0] = 0;
              v93[1].i64[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v104->i64 + v25);
              void *v107 = 0;
              v107[1] = 0;
              unint64_t v108 = (uint64_t *)((char *)v104->i64 + v70);
              void *v108 = 0;
              v108[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v104->i64 + v224);
              *int64x2_t v109 = 0;
              v109[1] = 0;
            }
            uint64_t v114 = v103 + v106;
            uint64_t v115 = v67 + 2;
            unsigned int v116 = v65[4];
            if (v116 == 63)
            {
              int64x2_t v121 = (const double *)(v114 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v121);
              int64x2_t v122 = *(int64x2_t *)v114;
              int64x2_t v123 = *(int64x2_t *)(v114 + 16);
              int64x2_t *v115 = vzip1q_s64(*(int64x2_t *)v114, v123);
              int64x2_t v28 = vzip2q_s64(v122, v123);
              *(int64x2_t *)((char *)v115 + v25) = v28;
              int v124 = (int64x2_t *)((char *)v115 + v70);
              *int v124 = v29;
              *(int64x2_t *)((char *)v124 + v25) = v27;
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v114);
              int64x2_t *v115 = v29;
              *(int64x2_t *)((char *)v115 + v25) = v29;
              *(int64x2_t *)((char *)v115 + v70) = v29;
              *(int64x2_t *)((char *)v115 + 3 * a11) = v29;
              uint64_t v117 = 2;
            }
            else if (v65[4])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v25, v114, v116, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v67[2].i64[1] = 0;
              int v118 = (uint64_t *)((char *)v115->i64 + v25);
              void *v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v70);
              *uint64_t v119 = 0;
              v119[1] = 0;
              int64x2_t v120 = (uint64_t *)((char *)v115->i64 + v224);
              void *v120 = 0;
              v120[1] = 0;
            }
            uint64_t v125 = v114 + v117;
            uint64_t v126 = v67 + 3;
            unsigned int v127 = v65[5];
            if (v127 == 63)
            {
              int64x2_t v132 = (const double *)(v125 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v125;
              int64x2_t v134 = *(int64x2_t *)(v125 + 16);
              int64x2_t *v126 = vzip1q_s64(*(int64x2_t *)v125, v134);
              int64x2_t v28 = vzip2q_s64(v133, v134);
              *(int64x2_t *)((char *)v126 + v25) = v28;
              BOOL v135 = (int64x2_t *)((char *)v126 + v70);
              int64x2_t *v135 = v29;
              *(int64x2_t *)((char *)v135 + v25) = v27;
              uint64_t v128 = 64;
              a7 = v66;
            }
            else
            {
              a7 = v66;
              if (v127 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v125);
                int64x2_t *v126 = v29;
                *(int64x2_t *)((char *)v126 + v25) = v29;
                *(int64x2_t *)((char *)v126 + v70) = v29;
                *(int64x2_t *)((char *)v126 + 3 * a11) = v29;
                uint64_t v128 = 2;
              }
              else if (v65[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v126, v25, v125, v127, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v128 = 0;
                v126->i64[0] = 0;
                v126->i64[1] = 0;
                unsigned int v129 = (uint64_t *)((char *)v126->i64 + v25);
                *unsigned int v129 = 0;
                v129[1] = 0;
                unsigned int v130 = (uint64_t *)((char *)v126->i64 + v70);
                void *v130 = 0;
                v130[1] = 0;
                int64x2_t v131 = (uint64_t *)((char *)v126->i64 + v224);
                *int64x2_t v131 = 0;
                v131[1] = 0;
              }
            }
            uint64_t v136 = v125 + v128;
            uint64_t v137 = v93 + 2;
            unsigned int v138 = v65[6];
            if (v138 == 63)
            {
              int64x2_t v143 = (const double *)(v136 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v143);
              int64x2_t v144 = *(int64x2_t *)v136;
              int64x2_t v145 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v145);
              int64x2_t v28 = vzip2q_s64(v144, v145);
              *(int64x2_t *)((char *)v137 + v25) = v28;
              unsigned int v146 = (int64x2_t *)((char *)v137 + v70);
              int64x2_t *v146 = v29;
              *(int64x2_t *)((char *)v146 + v25) = v27;
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = v29;
              *(int64x2_t *)((char *)v137 + v25) = v29;
              *(int64x2_t *)((char *)v137 + v70) = v29;
              *(int64x2_t *)((char *)v137 + 3 * a11) = v29;
              uint64_t v139 = 2;
            }
            else if (v65[6])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v25, v136, v138, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v93[2].i64[1] = 0;
              int v140 = (uint64_t *)((char *)v137->i64 + v25);
              void *v140 = 0;
              v140[1] = 0;
              int v141 = (uint64_t *)((char *)v137->i64 + v70);
              *int v141 = 0;
              v141[1] = 0;
              int64x2_t v142 = (uint64_t *)((char *)v137->i64 + v224);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v147 = v136 + v139;
            uint64_t v148 = v93 + 3;
            unsigned int v149 = v65[7];
            if (v149 == 63)
            {
              int64x2_t v154 = (const double *)(v147 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v154);
              int64x2_t v155 = *(int64x2_t *)v147;
              int64x2_t v156 = *(int64x2_t *)(v147 + 16);
              int64x2_t *v148 = vzip1q_s64(*(int64x2_t *)v147, v156);
              int64x2_t v28 = vzip2q_s64(v155, v156);
              *(int64x2_t *)((char *)v148 + v25) = v28;
              unsigned int v157 = (int64x2_t *)((char *)v148 + v70);
              *unsigned int v157 = v29;
              *(int64x2_t *)((char *)v157 + v25) = v27;
              uint64_t v16 = v241;
              goto LABEL_149;
            }
            uint64_t v16 = v241;
            unsigned int v150 = v32 + 1;
            if (v149 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v147);
              int64x2_t *v148 = v29;
              *(int64x2_t *)((char *)v148 + v25) = v29;
              *(int64x2_t *)((char *)v148 + v70) = v29;
              *(int64x2_t *)((char *)v148 + 3 * a11) = v29;
            }
            else if (v65[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v148, v25, v147, v149, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              v148->i64[0] = 0;
              v148->i64[1] = 0;
              uint64_t v151 = (uint64_t *)((char *)v148->i64 + v25);
              void *v151 = 0;
              v151[1] = 0;
              uint64_t v152 = (uint64_t *)((char *)v148->i64 + v70);
              *uint64_t v152 = 0;
              v152[1] = 0;
              int64x2_t v153 = (uint64_t *)((char *)v148->i64 + v224);
              *int64x2_t v153 = 0;
              v153[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v32 == v232 >> 4;
          unsigned int v32 = v150;
        }
        while (!v21);
        BOOL v21 = v17++ == v223;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v287 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v221 = a8 + a10 - 1;
  unsigned int v223 = v221 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v234 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v223)
  {
    unsigned int v232 = a7 + a9 - 1;
    unsigned int v220 = a7 >> 4;
    if (a7 >> 4 <= v232 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v217 = a5 - 1;
      unsigned int v243 = (a5 - 1) >> 4;
      int v242 = ((a5 - 1) & 0xF) + 1;
      int v218 = ((a6 - 1) & 7) + 1;
      unsigned int v219 = (a6 - 1) >> 3;
      uint64_t v226 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v27.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v28.i64[0] = 0x2000000010;
      *(int8x8_t *)v29.i8 = vbic_s8(*(int8x8_t *)v27.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v231 = v29.i32[0] | v29.i32[1];
      uint64_t v230 = v29.i64[0];
      BOOL v229 = v29.i32[0] != 0;
      BOOL v228 = v29.i32[1] != 0;
      unint64_t v216 = 8 * v19 * (unint64_t)v18;
      uint64_t v241 = v16;
      uint64_t v224 = 3 * a11;
      uint64_t v225 = 2 * a11;
      do
      {
        unsigned int v30 = (8 * v17) | 7;
        if (8 * v17 <= v240) {
          int v31 = v240;
        }
        else {
          int v31 = 8 * v17;
        }
        unsigned int v32 = v220;
        if (v221 < v30) {
          unsigned int v30 = v221;
        }
        unsigned int v239 = 8 * v17;
        int v227 = v31 - 8 * v17;
        int v238 = v30 - v31 + 1;
        int v33 = v218;
        if (v17 != v219) {
          int v33 = 8;
        }
        unsigned int v244 = v33;
        uint64_t v237 = a2 + (v31 - v240) * v25;
        do
        {
          unsigned int v34 = 16 * v32;
          unsigned int v35 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 16 * v32;
          }
          if (v232 < v35) {
            unsigned int v35 = v232;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v243) {
            unsigned int v38 = v242;
          }
          else {
            unsigned int v38 = 16;
          }
          BOOL v39 = 1;
          if (v239 >= v240 && v34 >= a7)
          {
            int v40 = v242;
            if (v32 != v243) {
              int v40 = 16;
            }
            BOOL v39 = v37 != v40 || v238 != v244;
          }
          if (isLevelTiled)
          {
            unsigned int v200 = 0;
            uint64_t v201 = v216 >> (*(unsigned char *)(v16 + 57) != 0);
            char v202 = 1;
            if (v201 > 127)
            {
              if (v201 > 511)
              {
                if (v201 == 512)
                {
                  char v203 = 0;
                  unsigned int v200 = 16;
                  unsigned int v204 = 16;
                }
                else
                {
                  char v203 = 1;
                  unsigned int v204 = 0;
                  if (v201 == 1024)
                  {
                    unsigned int v204 = 8;
                    unsigned int v200 = 16;
                  }
                }
              }
              else if (v201 == 128)
              {
                char v202 = 0;
                char v203 = 0;
                unsigned int v200 = 32;
                unsigned int v204 = 32;
              }
              else
              {
                char v203 = 1;
                unsigned int v204 = 0;
                if (v201 == 256)
                {
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 16;
                  unsigned int v200 = 32;
                }
              }
            }
            else
            {
              char v203 = 1;
              unsigned int v204 = 0;
              switch(v201)
              {
                case 4:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 128;
                  unsigned int v200 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v200 = 128;
                  unsigned int v204 = 128;
                  break;
                case 16:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v204 = 64;
                  unsigned int v200 = 128;
                  break;
                case 32:
                  char v202 = 0;
                  char v203 = 0;
                  unsigned int v200 = 64;
                  unsigned int v204 = 64;
                  break;
                default:
                  if (v201 == 64)
                  {
                    char v202 = 0;
                    char v203 = 0;
                    unsigned int v204 = 32;
                    unsigned int v200 = 64;
                  }
                  break;
              }
            }
            unsigned int v205 = (v200 >> 4) - 1;
            if (v202) {
              unsigned int v206 = 0;
            }
            else {
              unsigned int v206 = 32 - __clz(~(-1 << -(char)__clz(v205)));
            }
            unsigned int v207 = (v204 >> 3) - 1;
            if (v203)
            {
              unsigned int v208 = 0;
              if (v206) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v208 = 32 - __clz(~(-1 << -(char)__clz(v207)));
              if (v208 | v206)
              {
LABEL_233:
                int v209 = 0;
                uint64_t v210 = 0;
                int v211 = v32 & v205;
                int v212 = v17 & v207;
                BOOL v213 = v208 != 0;
                BOOL v214 = v206 != 0;
                int v215 = 1;
                do
                {
                  --v208;
                  if (v213) {
                    v210 |= (unint64_t)(v215 & v212) << v209++;
                  }
                  else {
                    unsigned int v208 = 0;
                  }
                  --v206;
                  if (v214) {
                    v210 |= (unint64_t)(v215 & v211) << v209++;
                  }
                  else {
                    unsigned int v206 = 0;
                  }
                  v215 *= 2;
                  --v209;
                  BOOL v214 = v206 != 0;
                  BOOL v213 = v208 != 0;
                }
                while (v206 | v208);
                goto LABEL_245;
              }
            }
            uint64_t v210 = 0;
LABEL_245:
            unint64_t v49 = ((unint64_t)(v34 / v200 + v239 / v204 * ((v200 + v217) / v200)) << 14) + (v210 << 9);
            goto LABEL_59;
          }
          if (v231)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v229;
            BOOL v46 = v228;
            int v47 = v230;
            int v48 = HIDWORD(v230);
            do
            {
              --v47;
              if (v45) {
                v43 |= (unint64_t)(v44 & v17) << v42++;
              }
              else {
                int v47 = 0;
              }
              --v48;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                int v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v46 = v48 != 0;
              BOOL v45 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 9;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 15;
          if (v51 < 0x20) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 4) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          if (v55 | v52)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v52 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v52;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v32) << v56) | v57;
              }
              else
              {
                unsigned int v52 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v17) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v52 != 0;
            }
            while (v55 | v52);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (unsigned char *)(a3 + v49);
          if (v234)
          {
            int v64 = v37;
            memcpy(__dst, (const void *)(a3 + v49), sizeof(__dst));
            int v37 = v64;
            int v63 = __dst;
          }
          BOOL v65 = (unsigned __int8 *)(a4 + 8 * v57);
          uint64_t v66 = a7;
          int v67 = (int64x2_t *)(v237 + 4 * (v36 - a7));
          char v68 = v38 < 0x10 || v39;
          if ((v68 & 1) != 0 || v244 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v241;
            block[5] = v63;
            char v252 = v38;
            char v253 = v244;
            unsigned int v248 = v227;
            unsigned int v249 = v36 - v34;
            block[6] = v65;
            unsigned int v246 = v67;
            uint64_t v25 = a11;
            uint64_t v247 = a11;
            unsigned int v250 = v238;
            unsigned int v251 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v241 + 8) + 7384), block);
              a7 = v66;
              uint64_t v16 = v241;
LABEL_149:
              unsigned int v150 = v32 + 1;
              goto LABEL_27;
            }
            unsigned int v75 = *v65;
            a7 = v66;
            if (v75 == 63)
            {
              int64x2_t v27 = *((int64x2_t *)v63 + 1);
              unsigned int v158 = (const double *)(v63 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v158);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v63, v27);
              int64x2_t v255 = vzip1q_s64(*(int64x2_t *)v63, v27);
              int64x2_t v259 = v29;
              int64x2_t v263 = v28;
              int64x2_t v267 = v159;
              uint64_t v76 = 64;
            }
            else if (v75 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v63);
              int64x2_t v255 = v29;
              int64x2_t v259 = v29;
              int64x2_t v263 = v29;
              int64x2_t v267 = v29;
              uint64_t v76 = 2;
            }
            else if (*v65)
            {
              uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 64, (uint64_t)v63, v75, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v76 = 0;
              int64x2_t v255 = 0uLL;
              int64x2_t v259 = 0uLL;
              int64x2_t v263 = 0uLL;
              int64x2_t v267 = 0uLL;
            }
            uint64_t v160 = (uint64_t)&v63[v76];
            unsigned int v161 = v65[1];
            if (v161 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v160 + 16);
              long long v163 = (const double *)(v160 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v163);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v160, v27);
              int64x2_t v256 = vzip1q_s64(*(int64x2_t *)v160, v27);
              int64x2_t v260 = v29;
              int64x2_t v264 = v28;
              int64x2_t v268 = v164;
              uint64_t v162 = 64;
            }
            else if (v161 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v160);
              int64x2_t v256 = v29;
              int64x2_t v260 = v29;
              int64x2_t v264 = v29;
              int64x2_t v268 = v29;
              uint64_t v162 = 2;
            }
            else if (v65[1])
            {
              uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 64, v160, v161, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v162 = 0;
              int64x2_t v256 = 0uLL;
              int64x2_t v260 = 0uLL;
              int64x2_t v264 = 0uLL;
              int64x2_t v268 = 0uLL;
            }
            uint64_t v165 = v160 + v162;
            unsigned int v166 = v65[2];
            if (v166 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v165 + 16);
              uint64_t v168 = (const double *)(v165 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v168);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v165, v27);
              int64x2_t v271 = vzip1q_s64(*(int64x2_t *)v165, v27);
              int64x2_t v275 = v29;
              int64x2_t v279 = v28;
              int64x2_t v283 = v169;
              uint64_t v167 = 64;
            }
            else if (v166 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v165);
              int64x2_t v271 = v29;
              int64x2_t v275 = v29;
              int64x2_t v279 = v29;
              int64x2_t v283 = v29;
              uint64_t v167 = 2;
            }
            else if (v65[2])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 64, v165, v166, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v167 = 0;
              int64x2_t v271 = 0uLL;
              int64x2_t v275 = 0uLL;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
            }
            uint64_t v170 = v165 + v167;
            unsigned int v171 = v65[3];
            if (v171 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v170 + 16);
              int32x4_t v173 = (const double *)(v170 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v173);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v170, v27);
              int64x2_t v272 = vzip1q_s64(*(int64x2_t *)v170, v27);
              int64x2_t v276 = v29;
              int64x2_t v280 = v28;
              int64x2_t v284 = v174;
              uint64_t v172 = 64;
            }
            else if (v171 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v170);
              int64x2_t v272 = v29;
              int64x2_t v276 = v29;
              int64x2_t v280 = v29;
              int64x2_t v284 = v29;
              uint64_t v172 = 2;
            }
            else if (v65[3])
            {
              uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 64, v170, v171, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v172 = 0;
              int64x2_t v272 = 0uLL;
              int64x2_t v276 = 0uLL;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
            }
            uint64_t v175 = v170 + v172;
            unsigned int v176 = v65[4];
            if (v176 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v175 + 16);
              int64x2_t v178 = (const double *)(v175 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v178);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v175, v27);
              int64x2_t v257 = vzip1q_s64(*(int64x2_t *)v175, v27);
              int64x2_t v261 = v29;
              int64x2_t v265 = v28;
              int64x2_t v269 = v179;
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v257 = v29;
              int64x2_t v261 = v29;
              int64x2_t v265 = v29;
              int64x2_t v269 = v29;
              uint64_t v177 = 2;
            }
            else if (v65[4])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v175, v176, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v257 = 0uLL;
              int64x2_t v261 = 0uLL;
              int64x2_t v265 = 0uLL;
              int64x2_t v269 = 0uLL;
            }
            uint64_t v180 = v175 + v177;
            unsigned int v181 = v65[5];
            if (v181 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v180 + 16);
              int64x2_t v183 = (const double *)(v180 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v183);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v180, v27);
              int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v180, v27);
              int64x2_t v262 = v29;
              int64x2_t v266 = v28;
              int64x2_t v270 = v184;
              uint64_t v182 = 64;
            }
            else if (v181 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v180);
              int64x2_t v258 = v29;
              int64x2_t v262 = v29;
              int64x2_t v266 = v29;
              int64x2_t v270 = v29;
              uint64_t v182 = 2;
            }
            else if (v65[5])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, v180, v181, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v182 = 0;
              int64x2_t v258 = 0uLL;
              int64x2_t v262 = 0uLL;
              int64x2_t v266 = 0uLL;
              int64x2_t v270 = 0uLL;
            }
            uint64_t v185 = v180 + v182;
            unsigned int v186 = v65[6];
            if (v186 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v185 + 16);
              int64x2_t v188 = (const double *)(v185 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v188);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v185, v27);
              int64x2_t v273 = vzip1q_s64(*(int64x2_t *)v185, v27);
              int64x2_t v277 = v29;
              int64x2_t v281 = v28;
              int64x2_t v285 = v189;
              uint64_t v187 = 64;
            }
            else if (v186 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v185);
              int64x2_t v273 = v29;
              int64x2_t v277 = v29;
              int64x2_t v281 = v29;
              int64x2_t v285 = v29;
              uint64_t v187 = 2;
            }
            else if (v65[6])
            {
              uint64_t v187 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 64, v185, v186, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v187 = 0;
              int64x2_t v273 = 0uLL;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              int64x2_t v285 = 0uLL;
            }
            uint64_t v190 = v185 + v187;
            unsigned int v191 = v65[7];
            if (v191 == 63)
            {
              int64x2_t v27 = *(int64x2_t *)(v190 + 16);
              uint64_t v192 = (const double *)(v190 + 32);
              *(float64x2x2_t *)v28.i8 = vld2q_f64(v192);
              int64x2_t v29 = vzip2q_s64(*(int64x2_t *)v190, v27);
              int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v190, v27);
              int64x2_t v278 = v29;
              int64x2_t v282 = v28;
              int64x2_t v286 = v193;
              uint64_t v16 = v241;
              unsigned int v150 = v32 + 1;
            }
            else
            {
              uint64_t v16 = v241;
              unsigned int v150 = v32 + 1;
              if (v191 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v190);
                int64x2_t v274 = v29;
                int64x2_t v278 = v29;
                int64x2_t v282 = v29;
                int64x2_t v286 = v29;
              }
              else if (v65[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 64, v190, v191, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                int64x2_t v274 = 0uLL;
                int64x2_t v278 = 0uLL;
                int64x2_t v282 = 0uLL;
                int64x2_t v286 = 0uLL;
              }
            }
            unint64_t v194 = v250;
            if (v250)
            {
              unint64_t v195 = 0;
              uint64_t v196 = &v255.i8[64 * (unint64_t)v248 + 4 * v249];
              unsigned int v197 = v251;
              do
              {
                if (v197)
                {
                  uint64_t v198 = 0;
                  uint64_t v199 = &v246->i8[v247 * v195];
                  do
                  {
                    v199[v198] = v196[v198];
                    ++v198;
                    unsigned int v197 = v251;
                  }
                  while (4 * (unint64_t)v251 > v198);
                  unint64_t v194 = v250;
                }
                ++v195;
                v196 += 64;
              }
              while (v195 < v194);
            }
          }
          else
          {
            unsigned int v69 = *v65;
            if (v69 == 63)
            {
              BOOL v77 = (const double *)(v63 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v63;
              int64x2_t v79 = *((int64x2_t *)v63 + 1);
              *int v67 = vzip1q_s64(*(int64x2_t *)v63, v79);
              int64x2_t v28 = vzip2q_s64(v78, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v67 + a11) = v28;
              uint64_t v70 = 2 * a11;
              BOOL v80 = (int64x2_t *)((char *)v67 + v225);
              int64x2_t *v80 = v29;
              *(int64x2_t *)((char *)v80 + a11) = v27;
              uint64_t v71 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v70 = 2 * a11;
              if (v69 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v63);
                *int v67 = v29;
                *(int64x2_t *)((char *)v67 + a11) = v29;
                *(int64x2_t *)((char *)v67 + 2 * a11) = v29;
                *(int64x2_t *)((char *)v67 + 3 * a11) = v29;
                uint64_t v71 = 2;
              }
              else if (*v65)
              {
                uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v67, a11, (uint64_t)v63, v69, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v71 = 0;
                v67->i64[0] = 0;
                v67->i64[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v67->i64 + a11);
                *unsigned int v72 = 0;
                v72[1] = 0;
                unsigned int v73 = (uint64_t *)((char *)v67->i64 + v225);
                void *v73 = 0;
                v73[1] = 0;
                unsigned int v74 = (uint64_t *)((char *)v67->i64 + v224);
                void *v74 = 0;
                v74[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v63[v71];
            uint64_t v82 = v67 + 1;
            unsigned int v83 = v65[1];
            if (v83 == 63)
            {
              char v88 = (const double *)(v81 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v88);
              int64x2_t v89 = *(int64x2_t *)v81;
              int64x2_t v90 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v90);
              int64x2_t v28 = vzip2q_s64(v89, v90);
              *(int64x2_t *)((char *)v82 + v25) = v28;
              uint64_t v91 = (int64x2_t *)((char *)v82 + v70);
              *uint64_t v91 = v29;
              *(int64x2_t *)((char *)v91 + v25) = v27;
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = v29;
              *(int64x2_t *)((char *)v82 + v25) = v29;
              *(int64x2_t *)((char *)v82 + v70) = v29;
              *(int64x2_t *)((char *)v82 + 3 * a11) = v29;
              uint64_t v84 = 2;
            }
            else if (v65[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v67[1].i64[1] = 0;
              BOOL v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              uint64_t v86 = (uint64_t *)((char *)v82->i64 + v70);
              void *v86 = 0;
              v86[1] = 0;
              int8x8_t v87 = (uint64_t *)((char *)v82->i64 + v224);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v92 = v81 + v84;
            int8x8_t v93 = (int64x2_t *)((char *)v67 + v226);
            unsigned int v94 = v65[2];
            if (v94 == 63)
            {
              int64x2_t v99 = (const double *)(v92 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v99);
              int64x2_t v100 = *(int64x2_t *)v92;
              int64x2_t v101 = *(int64x2_t *)(v92 + 16);
              *int8x8_t v93 = vzip1q_s64(*(int64x2_t *)v92, v101);
              int64x2_t v28 = vzip2q_s64(v100, v101);
              *(int64x2_t *)((char *)v93 + v25) = v28;
              uint64_t v102 = (int64x2_t *)((char *)v93 + v70);
              int64x2_t *v102 = v29;
              *(int64x2_t *)((char *)v102 + v25) = v27;
              uint64_t v95 = 64;
            }
            else if (v94 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v92);
              *int8x8_t v93 = v29;
              *(int64x2_t *)((char *)v93 + v25) = v29;
              *(int64x2_t *)((char *)v93 + v70) = v29;
              *(int64x2_t *)((char *)v93 + 3 * a11) = v29;
              uint64_t v95 = 2;
            }
            else if (v65[2])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v67 + v226), v25, v92, v94, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v95 = 0;
              v93->i64[0] = 0;
              v93->i64[1] = 0;
              uint64_t v96 = (uint64_t *)((char *)v93->i64 + v25);
              void *v96 = 0;
              v96[1] = 0;
              int8x8_t v97 = (uint64_t *)((char *)v93->i64 + v70);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v93->i64 + v224);
              void *v98 = 0;
              v98[1] = 0;
            }
            uint64_t v103 = v92 + v95;
            uint64_t v104 = v93 + 1;
            unsigned int v105 = v65[3];
            if (v105 == 63)
            {
              int64x2_t v110 = (const double *)(v103 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v110);
              int64x2_t v111 = *(int64x2_t *)v103;
              int64x2_t v112 = *(int64x2_t *)(v103 + 16);
              *uint64_t v104 = vzip1q_s64(*(int64x2_t *)v103, v112);
              int64x2_t v28 = vzip2q_s64(v111, v112);
              *(int64x2_t *)((char *)v104 + v25) = v28;
              uint64_t v113 = (int64x2_t *)((char *)v104 + v70);
              *uint64_t v113 = v29;
              *(int64x2_t *)((char *)v113 + v25) = v27;
              uint64_t v106 = 64;
            }
            else if (v105 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v103);
              *uint64_t v104 = v29;
              *(int64x2_t *)((char *)v104 + v25) = v29;
              *(int64x2_t *)((char *)v104 + v70) = v29;
              *(int64x2_t *)((char *)v104 + 3 * a11) = v29;
              uint64_t v106 = 2;
            }
            else if (v65[3])
            {
              uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v104, v25, v103, v105, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v106 = 0;
              v104->i64[0] = 0;
              v93[1].i64[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v104->i64 + v25);
              void *v107 = 0;
              v107[1] = 0;
              unint64_t v108 = (uint64_t *)((char *)v104->i64 + v70);
              void *v108 = 0;
              v108[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v104->i64 + v224);
              *int64x2_t v109 = 0;
              v109[1] = 0;
            }
            uint64_t v114 = v103 + v106;
            uint64_t v115 = v67 + 2;
            unsigned int v116 = v65[4];
            if (v116 == 63)
            {
              int64x2_t v121 = (const double *)(v114 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v121);
              int64x2_t v122 = *(int64x2_t *)v114;
              int64x2_t v123 = *(int64x2_t *)(v114 + 16);
              int64x2_t *v115 = vzip1q_s64(*(int64x2_t *)v114, v123);
              int64x2_t v28 = vzip2q_s64(v122, v123);
              *(int64x2_t *)((char *)v115 + v25) = v28;
              int v124 = (int64x2_t *)((char *)v115 + v70);
              *int v124 = v29;
              *(int64x2_t *)((char *)v124 + v25) = v27;
              uint64_t v117 = 64;
            }
            else if (v116 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v114);
              int64x2_t *v115 = v29;
              *(int64x2_t *)((char *)v115 + v25) = v29;
              *(int64x2_t *)((char *)v115 + v70) = v29;
              *(int64x2_t *)((char *)v115 + 3 * a11) = v29;
              uint64_t v117 = 2;
            }
            else if (v65[4])
            {
              uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v115, v25, v114, v116, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v117 = 0;
              v115->i64[0] = 0;
              v67[2].i64[1] = 0;
              int v118 = (uint64_t *)((char *)v115->i64 + v25);
              void *v118 = 0;
              v118[1] = 0;
              uint64_t v119 = (uint64_t *)((char *)v115->i64 + v70);
              *uint64_t v119 = 0;
              v119[1] = 0;
              int64x2_t v120 = (uint64_t *)((char *)v115->i64 + v224);
              void *v120 = 0;
              v120[1] = 0;
            }
            uint64_t v125 = v114 + v117;
            uint64_t v126 = v67 + 3;
            unsigned int v127 = v65[5];
            if (v127 == 63)
            {
              int64x2_t v132 = (const double *)(v125 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v125;
              int64x2_t v134 = *(int64x2_t *)(v125 + 16);
              int64x2_t *v126 = vzip1q_s64(*(int64x2_t *)v125, v134);
              int64x2_t v28 = vzip2q_s64(v133, v134);
              *(int64x2_t *)((char *)v126 + v25) = v28;
              BOOL v135 = (int64x2_t *)((char *)v126 + v70);
              int64x2_t *v135 = v29;
              *(int64x2_t *)((char *)v135 + v25) = v27;
              uint64_t v128 = 64;
              a7 = v66;
            }
            else
            {
              a7 = v66;
              if (v127 == 1)
              {
                int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v125);
                int64x2_t *v126 = v29;
                *(int64x2_t *)((char *)v126 + v25) = v29;
                *(int64x2_t *)((char *)v126 + v70) = v29;
                *(int64x2_t *)((char *)v126 + 3 * a11) = v29;
                uint64_t v128 = 2;
              }
              else if (v65[5])
              {
                uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v126, v25, v125, v127, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
              }
              else
              {
                uint64_t v128 = 0;
                v126->i64[0] = 0;
                v126->i64[1] = 0;
                unsigned int v129 = (uint64_t *)((char *)v126->i64 + v25);
                *unsigned int v129 = 0;
                v129[1] = 0;
                unsigned int v130 = (uint64_t *)((char *)v126->i64 + v70);
                void *v130 = 0;
                v130[1] = 0;
                int64x2_t v131 = (uint64_t *)((char *)v126->i64 + v224);
                *int64x2_t v131 = 0;
                v131[1] = 0;
              }
            }
            uint64_t v136 = v125 + v128;
            uint64_t v137 = v93 + 2;
            unsigned int v138 = v65[6];
            if (v138 == 63)
            {
              int64x2_t v143 = (const double *)(v136 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v143);
              int64x2_t v144 = *(int64x2_t *)v136;
              int64x2_t v145 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v145);
              int64x2_t v28 = vzip2q_s64(v144, v145);
              *(int64x2_t *)((char *)v137 + v25) = v28;
              unsigned int v146 = (int64x2_t *)((char *)v137 + v70);
              int64x2_t *v146 = v29;
              *(int64x2_t *)((char *)v146 + v25) = v27;
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = v29;
              *(int64x2_t *)((char *)v137 + v25) = v29;
              *(int64x2_t *)((char *)v137 + v70) = v29;
              *(int64x2_t *)((char *)v137 + 3 * a11) = v29;
              uint64_t v139 = 2;
            }
            else if (v65[6])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v25, v136, v138, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v93[2].i64[1] = 0;
              int v140 = (uint64_t *)((char *)v137->i64 + v25);
              void *v140 = 0;
              v140[1] = 0;
              int v141 = (uint64_t *)((char *)v137->i64 + v70);
              *int v141 = 0;
              v141[1] = 0;
              int64x2_t v142 = (uint64_t *)((char *)v137->i64 + v224);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v147 = v136 + v139;
            uint64_t v148 = v93 + 3;
            unsigned int v149 = v65[7];
            if (v149 == 63)
            {
              int64x2_t v154 = (const double *)(v147 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v154);
              int64x2_t v155 = *(int64x2_t *)v147;
              int64x2_t v156 = *(int64x2_t *)(v147 + 16);
              int64x2_t *v148 = vzip1q_s64(*(int64x2_t *)v147, v156);
              int64x2_t v28 = vzip2q_s64(v155, v156);
              *(int64x2_t *)((char *)v148 + v25) = v28;
              unsigned int v157 = (int64x2_t *)((char *)v148 + v70);
              *unsigned int v157 = v29;
              *(int64x2_t *)((char *)v157 + v25) = v27;
              uint64_t v16 = v241;
              goto LABEL_149;
            }
            uint64_t v16 = v241;
            unsigned int v150 = v32 + 1;
            if (v149 == 1)
            {
              int64x2_t v29 = (int64x2_t)vld1q_dup_s16((const __int16 *)v147);
              int64x2_t *v148 = v29;
              *(int64x2_t *)((char *)v148 + v25) = v29;
              *(int64x2_t *)((char *)v148 + v70) = v29;
              *(int64x2_t *)((char *)v148 + 3 * a11) = v29;
            }
            else if (v65[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v148, v25, v147, v149, *(int8x8_t *)v29.i8, *(double *)v27.i64, *(int8x8_t *)v28.i8);
            }
            else
            {
              v148->i64[0] = 0;
              v148->i64[1] = 0;
              uint64_t v151 = (uint64_t *)((char *)v148->i64 + v25);
              void *v151 = 0;
              v151[1] = 0;
              uint64_t v152 = (uint64_t *)((char *)v148->i64 + v70);
              *uint64_t v152 = 0;
              v152[1] = 0;
              int64x2_t v153 = (uint64_t *)((char *)v148->i64 + v224);
              *int64x2_t v153 = 0;
              v153[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v32 == v232 >> 4;
          unsigned int v32 = v150;
        }
        while (!v21);
        BOOL v21 = v17++ == v223;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v502 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v499 = v20;
  uint64_t v500 = v21;
  uint64_t v483 = v22;
  uint64_t v23 = v12;
  uint64_t v647 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v503 = v14;
  unsigned int v485 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v484 = v485 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v498 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v497 = 0;
LABEL_32:
      unsigned int v495 = v33 - 4;
      unsigned int v489 = v32 - 3;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v482 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v497 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v497 = 0;
  unsigned int v482 = 0;
  unsigned int v489 = 0;
  unsigned int v495 = 0;
LABEL_33:
  if (v27 <= v484)
  {
    unsigned int v496 = v502 + a9 - 1;
    if (v502 >> 4 <= v496 >> 4)
    {
      uint64_t v40 = a11;
      unsigned int v507 = v25 >> 4;
      unsigned int v481 = v26 >> 3;
      int v506 = (v25 & 0xF) + 1;
      int v480 = (v26 & 7) + 1;
      int v479 = ~(-1 << v489);
      uint64_t v493 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v492 = v42.i32[0] | v42.i32[1];
      int8x8_t v488 = v42;
      BOOL v487 = v42.i32[0] != 0;
      BOOL v486 = v42.i32[1] != 0;
      uint64_t v505 = v23;
      uint64_t v490 = 3 * a11;
      uint64_t v491 = 2 * a11;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v503) {
          int v44 = v503;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v485 < v43) {
          unsigned int v43 = v485;
        }
        int v494 = v44 - 8 * v27;
        int v504 = v43 - v44 + 1;
        unsigned int v45 = v502 >> 4;
        int v46 = v480;
        if (v27 != v481) {
          int v46 = 8;
        }
        unsigned int v508 = v46;
        int v47 = v27 & v479;
        uint64_t v501 = v483 + (v44 - v503) * v40;
        unsigned int v48 = v502;
        do
        {
          unsigned int v50 = 16 * v45;
          unsigned int v51 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 16 * v45;
          }
          if (v496 < v51) {
            unsigned int v51 = v502 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v507) {
            unsigned int v54 = v506;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (8 * v27 >= v503 && v50 >= v48)
          {
            int v56 = v506;
            if (v45 != v507) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v504 != v508;
          }
          if (v497)
          {
            if (v495 | v489)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v489 != 0;
              BOOL v62 = v495 != 0;
              unsigned int v63 = v489;
              unsigned int v64 = v495;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v495) & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v495) + (v27 >> v489) * v482) + (v59 << 11);
          }
          else
          {
            if (v492)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v487;
              BOOL v69 = v486;
              __int32 v70 = v488.i32[0];
              __int32 v71 = v488.i32[1];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          uint64_t v86 = (float64x2_t *)(v499 + v72);
          if (v498)
          {
            memcpy(__dst, v86, sizeof(__dst));
            uint64_t v86 = (float64x2_t *)__dst;
          }
          int8x8_t v87 = (unsigned __int8 *)(v500 + 8 * v80);
          char v88 = (float64x2_t *)(v501 + 16 * (v52 - v48));
          char v89 = v54 < 0x10 || v55;
          if ((v89 & 1) == 0 && v508 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v104 = v86[1];
              float64x2_t v105 = v86[2];
              float64x2_t v106 = v86[3];
              float64x2_t v107 = v86[8];
              float64x2_t v108 = v86[9];
              float64x2_t v109 = v86[6];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[13];
              float64x2_t v112 = v86[15];
              float64x2_t v113 = v86[7];
              float64x2_t v114 = v86[4];
              float64x2_t v115 = v86[5];
              float64x2_t v116 = v86[10];
              float64x2_t v117 = v86[11];
              float64x2_t v118 = v86[14];
              uint64_t v91 = 2 * a11;
              float64x2_t *v88 = *v86;
              v88[1] = v104;
              v88[2] = v114;
              v88[3] = v115;
              uint64_t v119 = (float64x2_t *)((char *)v88 + v491);
              uint64_t v40 = a11;
              int64x2_t v120 = (float64x2_t *)((char *)v88 + a11);
              float64x2_t *v120 = v105;
              v120[1] = v106;
              v120[2] = v109;
              v120[3] = v113;
              *uint64_t v119 = v107;
              v119[1] = v108;
              v119[2] = v110;
              v119[3] = v111;
              int64x2_t v121 = (float64x2_t *)((char *)v88 + v491 + a11);
              uint64_t v92 = 256;
              *int64x2_t v121 = v116;
              v121[1] = v117;
              v121[2] = v118;
              v121[3] = v112;
            }
            else
            {
              uint64_t v40 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 7)
              {
                float64x2_t v100 = vld1q_dup_f64(v86->f64);
                float64x2_t *v88 = v100;
                v88[1] = v100;
                v88[2] = v100;
                v88[3] = v100;
                int64x2_t v101 = (float64x2_t *)((char *)v88 + a11);
                *int64x2_t v101 = v100;
                v101[1] = v100;
                v101[2] = v100;
                v101[3] = v100;
                uint64_t v102 = (float64x2_t *)((char *)v88 + v491);
                float64x2_t *v102 = v100;
                v102[1] = v100;
                v102[2] = v100;
                v102[3] = v100;
                uint64_t v103 = (float64x2_t *)((char *)v88 + v490);
                *uint64_t v103 = v100;
                v103[1] = v100;
                v103[2] = v100;
                v103[3] = v100;
                uint64_t v92 = 8;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v92 = 0;
                v88[2] = 0u;
                v88[3] = 0u;
                float64x2_t *v88 = 0u;
                v88[1] = 0u;
                int8x8_t v93 = (_OWORD *)((char *)v88->f64 + a11);
                v93[2] = 0u;
                v93[3] = 0u;
                *int8x8_t v93 = 0u;
                v93[1] = 0u;
                unsigned int v94 = (_OWORD *)((char *)v88->f64 + v491);
                v94[2] = 0u;
                v94[3] = 0u;
                *unsigned int v94 = 0u;
                v94[1] = 0u;
                uint64_t v95 = (_OWORD *)((char *)v88->f64 + v490);
                v95[2] = 0u;
                v95[3] = 0u;
                _OWORD *v95 = 0u;
                v95[1] = 0u;
              }
            }
            uint64_t v122 = (uint64_t)v86 + v92;
            f64 = (_OWORD *)v88[4].f64;
            unsigned int v124 = v87[1];
            if (v124 == 255)
            {
              float64x2_t v133 = *(float64x2_t *)(v122 + 16);
              long long v134 = *(_OWORD *)(v122 + 32);
              long long v135 = *(_OWORD *)(v122 + 48);
              long long v136 = *(_OWORD *)(v122 + 128);
              long long v137 = *(_OWORD *)(v122 + 144);
              long long v138 = *(_OWORD *)(v122 + 96);
              long long v139 = *(_OWORD *)(v122 + 192);
              long long v140 = *(_OWORD *)(v122 + 208);
              long long v141 = *(_OWORD *)(v122 + 240);
              long long v142 = *(_OWORD *)(v122 + 112);
              float64x2_t v143 = *(float64x2_t *)(v122 + 64);
              float64x2_t v144 = *(float64x2_t *)(v122 + 80);
              long long v145 = *(_OWORD *)(v122 + 160);
              long long v146 = *(_OWORD *)(v122 + 176);
              long long v147 = *(_OWORD *)(v122 + 224);
              _OWORD *f64 = *(_OWORD *)v122;
              v88[5] = v133;
              v88[6] = v143;
              v88[7] = v144;
              uint64_t v148 = (_OWORD *)((char *)f64 + v91);
              unsigned int v149 = (_OWORD *)((char *)f64 + v40);
              *unsigned int v149 = v134;
              v149[1] = v135;
              v149[2] = v138;
              v149[3] = v142;
              _OWORD *v148 = v136;
              v148[1] = v137;
              v148[2] = v139;
              v148[3] = v140;
              unsigned int v150 = (_OWORD *)((char *)f64 + v91 + v40);
              uint64_t v125 = 256;
              _OWORD *v150 = v145;
              v150[1] = v146;
              v150[2] = v147;
              v150[3] = v141;
            }
            else if (v124 == 7)
            {
              float64x2_t v129 = vld1q_dup_f64((const double *)v122);
              v88[4] = v129;
              v88[5] = v129;
              v88[6] = v129;
              v88[7] = v129;
              unsigned int v130 = (float64x2_t *)((char *)f64 + v40);
              float64x2_t *v130 = v129;
              v130[1] = v129;
              v130[2] = v129;
              v130[3] = v129;
              int64x2_t v131 = (float64x2_t *)((char *)f64 + v91);
              *int64x2_t v131 = v129;
              v131[1] = v129;
              v131[2] = v129;
              v131[3] = v129;
              int64x2_t v132 = (float64x2_t *)((char *)f64 + v490);
              float64x2_t *v132 = v129;
              v132[1] = v129;
              uint64_t v125 = 8;
              v132[2] = v129;
              v132[3] = v129;
            }
            else if (v87[1])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v40, v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              v88[6] = 0u;
              v88[7] = 0u;
              _OWORD *f64 = 0u;
              v88[5] = 0u;
              uint64_t v126 = (_OWORD *)((char *)f64 + v40);
              v126[2] = 0u;
              v126[3] = 0u;
              _OWORD *v126 = 0u;
              v126[1] = 0u;
              unsigned int v127 = (_OWORD *)((char *)f64 + v91);
              v127[2] = 0u;
              v127[3] = 0u;
              _OWORD *v127 = 0u;
              v127[1] = 0u;
              uint64_t v128 = (_OWORD *)((char *)f64 + v490);
              v128[2] = 0u;
              v128[3] = 0u;
              _OWORD *v128 = 0u;
              v128[1] = 0u;
            }
            uint64_t v151 = v122 + v125;
            uint64_t v152 = (float64x2_t *)((char *)v88 + v493);
            unsigned int v153 = v87[2];
            if (v153 == 255)
            {
              float64x2_t v162 = *(float64x2_t *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 128);
              long long v166 = *(_OWORD *)(v151 + 144);
              long long v167 = *(_OWORD *)(v151 + 96);
              long long v168 = *(_OWORD *)(v151 + 192);
              long long v169 = *(_OWORD *)(v151 + 208);
              long long v170 = *(_OWORD *)(v151 + 240);
              long long v171 = *(_OWORD *)(v151 + 112);
              float64x2_t v172 = *(float64x2_t *)(v151 + 64);
              float64x2_t v173 = *(float64x2_t *)(v151 + 80);
              long long v174 = *(_OWORD *)(v151 + 160);
              long long v175 = *(_OWORD *)(v151 + 176);
              long long v176 = *(_OWORD *)(v151 + 224);
              *uint64_t v152 = *(float64x2_t *)v151;
              v152[1] = v162;
              v152[2] = v172;
              v152[3] = v173;
              uint64_t v177 = (_OWORD *)((char *)v152->f64 + v91);
              int64x2_t v178 = (_OWORD *)((char *)v152->f64 + v40);
              _OWORD *v178 = v163;
              v178[1] = v164;
              v178[2] = v167;
              v178[3] = v171;
              *uint64_t v177 = v165;
              v177[1] = v166;
              v177[2] = v168;
              v177[3] = v169;
              int64x2_t v179 = (_OWORD *)((char *)v152->f64 + v91 + v40);
              uint64_t v154 = 256;
              *int64x2_t v179 = v174;
              v179[1] = v175;
              v179[2] = v176;
              v179[3] = v170;
            }
            else if (v153 == 7)
            {
              float64x2_t v158 = vld1q_dup_f64((const double *)v151);
              *uint64_t v152 = v158;
              v152[1] = v158;
              v152[2] = v158;
              v152[3] = v158;
              int64x2_t v159 = (float64x2_t *)((char *)v152 + v40);
              float64x2_t *v159 = v158;
              v159[1] = v158;
              v159[2] = v158;
              v159[3] = v158;
              uint64_t v160 = (float64x2_t *)((char *)v152 + v91);
              *uint64_t v160 = v158;
              v160[1] = v158;
              v160[2] = v158;
              v160[3] = v158;
              unsigned int v161 = (float64x2_t *)((char *)v152 + v490);
              *unsigned int v161 = v158;
              v161[1] = v158;
              v161[2] = v158;
              v161[3] = v158;
              uint64_t v154 = 8;
            }
            else if (v87[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v493, v40, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              v152[2] = 0u;
              v152[3] = 0u;
              *uint64_t v152 = 0u;
              v152[1] = 0u;
              int64x2_t v155 = (_OWORD *)((char *)v152->f64 + v40);
              v155[2] = 0u;
              v155[3] = 0u;
              _OWORD *v155 = 0u;
              v155[1] = 0u;
              int64x2_t v156 = (_OWORD *)((char *)v152->f64 + v91);
              v156[2] = 0u;
              v156[3] = 0u;
              *int64x2_t v156 = 0u;
              v156[1] = 0u;
              unsigned int v157 = (_OWORD *)((char *)v152->f64 + v490);
              v157[2] = 0u;
              v157[3] = 0u;
              *unsigned int v157 = 0u;
              v157[1] = 0u;
            }
            uint64_t v180 = v151 + v154;
            unsigned int v181 = (_OWORD *)v152[4].f64;
            unsigned int v182 = v87[3];
            if (v182 == 255)
            {
              float64x2_t v191 = *(float64x2_t *)(v180 + 16);
              long long v192 = *(_OWORD *)(v180 + 32);
              long long v193 = *(_OWORD *)(v180 + 48);
              long long v194 = *(_OWORD *)(v180 + 128);
              long long v195 = *(_OWORD *)(v180 + 144);
              long long v196 = *(_OWORD *)(v180 + 96);
              long long v197 = *(_OWORD *)(v180 + 192);
              long long v198 = *(_OWORD *)(v180 + 208);
              long long v199 = *(_OWORD *)(v180 + 240);
              long long v200 = *(_OWORD *)(v180 + 112);
              float64x2_t v201 = *(float64x2_t *)(v180 + 64);
              float64x2_t v202 = *(float64x2_t *)(v180 + 80);
              long long v203 = *(_OWORD *)(v180 + 160);
              long long v204 = *(_OWORD *)(v180 + 176);
              long long v205 = *(_OWORD *)(v180 + 224);
              _OWORD *v181 = *(_OWORD *)v180;
              v152[5] = v191;
              v152[6] = v201;
              v152[7] = v202;
              unsigned int v206 = (_OWORD *)((char *)v181 + v91);
              unsigned int v207 = (_OWORD *)((char *)v181 + v40);
              *unsigned int v207 = v192;
              v207[1] = v193;
              v207[2] = v196;
              v207[3] = v200;
              *unsigned int v206 = v194;
              v206[1] = v195;
              v206[2] = v197;
              v206[3] = v198;
              unsigned int v208 = (_OWORD *)((char *)v181 + v91 + v40);
              uint64_t v183 = 256;
              *unsigned int v208 = v203;
              v208[1] = v204;
              v208[2] = v205;
              v208[3] = v199;
            }
            else if (v182 == 7)
            {
              float64x2_t v187 = vld1q_dup_f64((const double *)v180);
              v152[4] = v187;
              v152[5] = v187;
              v152[6] = v187;
              v152[7] = v187;
              int64x2_t v188 = (float64x2_t *)((char *)v181 + v40);
              *int64x2_t v188 = v187;
              v188[1] = v187;
              v188[2] = v187;
              v188[3] = v187;
              int64x2_t v189 = (float64x2_t *)((char *)v181 + v91);
              *int64x2_t v189 = v187;
              v189[1] = v187;
              v189[2] = v187;
              v189[3] = v187;
              uint64_t v190 = (float64x2_t *)((char *)v181 + v490);
              *uint64_t v190 = v187;
              v190[1] = v187;
              uint64_t v183 = 8;
              v190[2] = v187;
              v190[3] = v187;
            }
            else if (v87[3])
            {
              uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v181, v40, v180, v182);
            }
            else
            {
              uint64_t v183 = 0;
              v152[6] = 0u;
              v152[7] = 0u;
              _OWORD *v181 = 0u;
              v152[5] = 0u;
              int64x2_t v184 = (_OWORD *)((char *)v181 + v40);
              v184[2] = 0u;
              v184[3] = 0u;
              _OWORD *v184 = 0u;
              v184[1] = 0u;
              uint64_t v185 = (_OWORD *)((char *)v181 + v91);
              v185[2] = 0u;
              v185[3] = 0u;
              *uint64_t v185 = 0u;
              v185[1] = 0u;
              unsigned int v186 = (_OWORD *)((char *)v181 + v490);
              v186[2] = 0u;
              v186[3] = 0u;
              *unsigned int v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v209 = v180 + v183;
            uint64_t v210 = (_OWORD *)v88[8].f64;
            unsigned int v211 = v87[4];
            if (v211 == 255)
            {
              float64x2_t v220 = *(float64x2_t *)(v209 + 16);
              long long v221 = *(_OWORD *)(v209 + 32);
              long long v222 = *(_OWORD *)(v209 + 48);
              long long v223 = *(_OWORD *)(v209 + 128);
              long long v224 = *(_OWORD *)(v209 + 144);
              long long v225 = *(_OWORD *)(v209 + 96);
              long long v226 = *(_OWORD *)(v209 + 192);
              long long v227 = *(_OWORD *)(v209 + 208);
              long long v228 = *(_OWORD *)(v209 + 240);
              long long v229 = *(_OWORD *)(v209 + 112);
              float64x2_t v230 = *(float64x2_t *)(v209 + 64);
              float64x2_t v231 = *(float64x2_t *)(v209 + 80);
              long long v232 = *(_OWORD *)(v209 + 160);
              long long v233 = *(_OWORD *)(v209 + 176);
              long long v234 = *(_OWORD *)(v209 + 224);
              *uint64_t v210 = *(_OWORD *)v209;
              v88[9] = v220;
              v88[10] = v230;
              v88[11] = v231;
              unsigned int v235 = (_OWORD *)((char *)v210 + v91);
              BOOL v236 = (_OWORD *)((char *)v210 + v40);
              *BOOL v236 = v221;
              v236[1] = v222;
              v236[2] = v225;
              v236[3] = v229;
              *unsigned int v235 = v223;
              v235[1] = v224;
              v235[2] = v226;
              v235[3] = v227;
              uint64_t v237 = (_OWORD *)((char *)v210 + v91 + v40);
              uint64_t v212 = 256;
              *uint64_t v237 = v232;
              v237[1] = v233;
              v237[2] = v234;
              v237[3] = v228;
            }
            else if (v211 == 7)
            {
              float64x2_t v216 = vld1q_dup_f64((const double *)v209);
              v88[8] = v216;
              v88[9] = v216;
              v88[10] = v216;
              v88[11] = v216;
              unsigned int v217 = (float64x2_t *)((char *)v210 + v40);
              *unsigned int v217 = v216;
              v217[1] = v216;
              v217[2] = v216;
              v217[3] = v216;
              int v218 = (float64x2_t *)((char *)v210 + v91);
              float64x2_t *v218 = v216;
              v218[1] = v216;
              v218[2] = v216;
              v218[3] = v216;
              unsigned int v219 = (float64x2_t *)((char *)v210 + v490);
              *unsigned int v219 = v216;
              v219[1] = v216;
              uint64_t v212 = 8;
              v219[2] = v216;
              v219[3] = v216;
            }
            else if (v87[4])
            {
              uint64_t v212 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v210, v40, v209, v211);
            }
            else
            {
              uint64_t v212 = 0;
              v88[10] = 0u;
              v88[11] = 0u;
              *uint64_t v210 = 0u;
              v88[9] = 0u;
              BOOL v213 = (_OWORD *)((char *)v210 + v40);
              v213[2] = 0u;
              v213[3] = 0u;
              *BOOL v213 = 0u;
              v213[1] = 0u;
              BOOL v214 = (_OWORD *)((char *)v210 + v91);
              v214[2] = 0u;
              v214[3] = 0u;
              *BOOL v214 = 0u;
              v214[1] = 0u;
              int v215 = (_OWORD *)((char *)v210 + v490);
              v215[2] = 0u;
              v215[3] = 0u;
              *int v215 = 0u;
              v215[1] = 0u;
            }
            uint64_t v238 = v209 + v212;
            unsigned int v239 = (_OWORD *)v88[12].f64;
            unsigned int v240 = v87[5];
            if (v240 == 255)
            {
              float64x2_t v249 = *(float64x2_t *)(v238 + 16);
              long long v250 = *(_OWORD *)(v238 + 32);
              long long v251 = *(_OWORD *)(v238 + 48);
              long long v252 = *(_OWORD *)(v238 + 128);
              long long v253 = *(_OWORD *)(v238 + 144);
              long long v254 = *(_OWORD *)(v238 + 96);
              long long v255 = *(_OWORD *)(v238 + 192);
              long long v256 = *(_OWORD *)(v238 + 208);
              long long v257 = *(_OWORD *)(v238 + 240);
              long long v258 = *(_OWORD *)(v238 + 112);
              float64x2_t v259 = *(float64x2_t *)(v238 + 64);
              float64x2_t v260 = *(float64x2_t *)(v238 + 80);
              long long v261 = *(_OWORD *)(v238 + 160);
              long long v262 = *(_OWORD *)(v238 + 176);
              long long v263 = *(_OWORD *)(v238 + 224);
              _OWORD *v239 = *(_OWORD *)v238;
              v88[13] = v249;
              v88[14] = v259;
              v88[15] = v260;
              int64x2_t v264 = (_OWORD *)((char *)v239 + v91);
              int64x2_t v265 = (_OWORD *)((char *)v239 + v40);
              *int64x2_t v265 = v250;
              v265[1] = v251;
              v265[2] = v254;
              v265[3] = v258;
              *int64x2_t v264 = v252;
              v264[1] = v253;
              v264[2] = v255;
              v264[3] = v256;
              int64x2_t v266 = (_OWORD *)((char *)v239 + v91 + v40);
              uint64_t v241 = 256;
              *int64x2_t v266 = v261;
              v266[1] = v262;
              v266[2] = v263;
              v266[3] = v257;
            }
            else if (v240 == 7)
            {
              float64x2_t v245 = vld1q_dup_f64((const double *)v238);
              v88[12] = v245;
              v88[13] = v245;
              v88[14] = v245;
              v88[15] = v245;
              unsigned int v246 = (float64x2_t *)((char *)v239 + v40);
              *unsigned int v246 = v245;
              v246[1] = v245;
              v246[2] = v245;
              v246[3] = v245;
              uint64_t v247 = (float64x2_t *)((char *)v239 + v91);
              *uint64_t v247 = v245;
              v247[1] = v245;
              v247[2] = v245;
              v247[3] = v245;
              unsigned int v248 = (float64x2_t *)((char *)v239 + v490);
              *unsigned int v248 = v245;
              v248[1] = v245;
              uint64_t v241 = 8;
              v248[2] = v245;
              v248[3] = v245;
            }
            else if (v87[5])
            {
              uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v239, v40, v238, v240);
            }
            else
            {
              uint64_t v241 = 0;
              v88[14] = 0u;
              v88[15] = 0u;
              _OWORD *v239 = 0u;
              v88[13] = 0u;
              int v242 = (_OWORD *)((char *)v239 + v40);
              v242[2] = 0u;
              v242[3] = 0u;
              *int v242 = 0u;
              v242[1] = 0u;
              unsigned int v243 = (_OWORD *)((char *)v239 + v91);
              v243[2] = 0u;
              v243[3] = 0u;
              *unsigned int v243 = 0u;
              v243[1] = 0u;
              unsigned int v244 = (_OWORD *)((char *)v239 + v490);
              v244[2] = 0u;
              v244[3] = 0u;
              *unsigned int v244 = 0u;
              v244[1] = 0u;
            }
            uint64_t v267 = v238 + v241;
            int64x2_t v268 = (_OWORD *)v152[8].f64;
            unsigned int v269 = v87[6];
            if (v269 == 255)
            {
              float64x2_t v278 = *(float64x2_t *)(v267 + 16);
              long long v279 = *(_OWORD *)(v267 + 32);
              long long v280 = *(_OWORD *)(v267 + 48);
              long long v281 = *(_OWORD *)(v267 + 128);
              long long v282 = *(_OWORD *)(v267 + 144);
              long long v283 = *(_OWORD *)(v267 + 96);
              long long v284 = *(_OWORD *)(v267 + 192);
              long long v285 = *(_OWORD *)(v267 + 208);
              long long v286 = *(_OWORD *)(v267 + 240);
              long long v287 = *(_OWORD *)(v267 + 112);
              float64x2_t v288 = *(float64x2_t *)(v267 + 64);
              float64x2_t v289 = *(float64x2_t *)(v267 + 80);
              long long v290 = *(_OWORD *)(v267 + 160);
              long long v291 = *(_OWORD *)(v267 + 176);
              long long v292 = *(_OWORD *)(v267 + 224);
              *int64x2_t v268 = *(_OWORD *)v267;
              v152[9] = v278;
              v152[10] = v288;
              v152[11] = v289;
              int32x4_t v293 = (_OWORD *)((char *)v268 + v91);
              int32x4_t v294 = (_OWORD *)((char *)v268 + v40);
              *int32x4_t v294 = v279;
              v294[1] = v280;
              v294[2] = v283;
              v294[3] = v287;
              *int32x4_t v293 = v281;
              v293[1] = v282;
              v293[2] = v284;
              v293[3] = v285;
              int32x4_t v295 = (_OWORD *)((char *)v268 + v91 + v40);
              uint64_t v270 = 256;
              *int32x4_t v295 = v290;
              v295[1] = v291;
              v295[2] = v292;
              v295[3] = v286;
            }
            else if (v269 == 7)
            {
              float64x2_t v274 = vld1q_dup_f64((const double *)v267);
              v152[8] = v274;
              v152[9] = v274;
              v152[10] = v274;
              v152[11] = v274;
              int64x2_t v275 = (float64x2_t *)((char *)v268 + v40);
              *int64x2_t v275 = v274;
              v275[1] = v274;
              v275[2] = v274;
              v275[3] = v274;
              int64x2_t v276 = (float64x2_t *)((char *)v268 + v91);
              *int64x2_t v276 = v274;
              v276[1] = v274;
              v276[2] = v274;
              v276[3] = v274;
              int64x2_t v277 = (float64x2_t *)((char *)v268 + v490);
              *int64x2_t v277 = v274;
              v277[1] = v274;
              uint64_t v270 = 8;
              v277[2] = v274;
              v277[3] = v274;
            }
            else if (v87[6])
            {
              uint64_t v270 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v268, v40, v238 + v241, v269);
            }
            else
            {
              uint64_t v270 = 0;
              v152[10] = 0u;
              v152[11] = 0u;
              *int64x2_t v268 = 0u;
              v152[9] = 0u;
              int64x2_t v271 = (_OWORD *)((char *)v268 + v40);
              v271[2] = 0u;
              v271[3] = 0u;
              *int64x2_t v271 = 0u;
              v271[1] = 0u;
              int64x2_t v272 = (_OWORD *)((char *)v268 + v91);
              v272[2] = 0u;
              v272[3] = 0u;
              *int64x2_t v272 = 0u;
              v272[1] = 0u;
              int64x2_t v273 = (_OWORD *)((char *)v268 + v490);
              v273[2] = 0u;
              v273[3] = 0u;
              *int64x2_t v273 = 0u;
              v273[1] = 0u;
            }
            uint64_t v296 = v267 + v270;
            int32x4_t v297 = (_OWORD *)v152[12].f64;
            unsigned int v298 = v87[7];
            if (v298 == 255)
            {
              float64x2_t v306 = *(float64x2_t *)(v296 + 16);
              long long v307 = *(_OWORD *)(v296 + 32);
              long long v308 = *(_OWORD *)(v296 + 48);
              long long v309 = *(_OWORD *)(v296 + 96);
              long long v310 = *(_OWORD *)(v296 + 112);
              float64x2_t v311 = *(float64x2_t *)(v296 + 64);
              float64x2_t v312 = *(float64x2_t *)(v296 + 80);
              long long v313 = *(_OWORD *)(v296 + 128);
              long long v314 = *(_OWORD *)(v296 + 144);
              long long v315 = *(_OWORD *)(v296 + 192);
              long long v316 = *(_OWORD *)(v296 + 208);
              long long v317 = *(_OWORD *)(v296 + 224);
              long long v318 = *(_OWORD *)(v296 + 240);
              long long v319 = *(_OWORD *)(v296 + 160);
              long long v320 = *(_OWORD *)(v296 + 176);
              *int32x4_t v297 = *(_OWORD *)v296;
              v152[13] = v306;
              v152[14] = v311;
              v152[15] = v312;
              unsigned int v321 = (_OWORD *)((char *)v297 + v91);
              int v322 = (_OWORD *)((char *)v297 + v40);
              *int v322 = v307;
              v322[1] = v308;
              v322[2] = v309;
              v322[3] = v310;
              *unsigned int v321 = v313;
              v321[1] = v314;
              v321[2] = v315;
              v321[3] = v316;
              unsigned int v323 = (_OWORD *)((char *)v297 + v91 + v40);
              *unsigned int v323 = v319;
              v323[1] = v320;
              v323[2] = v317;
              v323[3] = v318;
              unsigned int v48 = v502;
              uint64_t v23 = v505;
            }
            else
            {
              unsigned int v48 = v502;
              uint64_t v23 = v505;
              if (v298 == 7)
              {
                float64x2_t v302 = vld1q_dup_f64((const double *)v296);
                v152[12] = v302;
                v152[13] = v302;
                v152[14] = v302;
                v152[15] = v302;
                uint64_t v303 = (float64x2_t *)((char *)v297 + v40);
                *uint64_t v303 = v302;
                v303[1] = v302;
                v303[2] = v302;
                v303[3] = v302;
                unsigned int v304 = (float64x2_t *)((char *)v297 + v91);
                *unsigned int v304 = v302;
                v304[1] = v302;
                v304[2] = v302;
                v304[3] = v302;
                uint64_t v305 = (float64x2_t *)((char *)v297 + v490);
                *uint64_t v305 = v302;
                v305[1] = v302;
                v305[2] = v302;
                v305[3] = v302;
              }
              else if (v298)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v297, v40, v296, v298);
              }
              else
              {
                v152[14] = 0u;
                v152[15] = 0u;
                *int32x4_t v297 = 0u;
                v152[13] = 0u;
                unint64_t v299 = (_OWORD *)((char *)v297 + v40);
                v299[2] = 0u;
                v299[3] = 0u;
                *unint64_t v299 = 0u;
                v299[1] = 0u;
                unsigned int v300 = (_OWORD *)((char *)v297 + v91);
                v300[2] = 0u;
                v300[3] = 0u;
                *unsigned int v300 = 0u;
                v300[1] = 0u;
                unsigned int v301 = (_OWORD *)((char *)v297 + v490);
                v301[2] = 0u;
                v301[3] = 0u;
                *unsigned int v301 = 0u;
                v301[1] = 0u;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v96 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v505;
          block[5] = v86;
          char v516 = v54;
          char v517 = v508;
          int v512 = v494;
          unsigned int v513 = v52 - v50;
          block[6] = v87;
          v510 = v88;
          uint64_t v40 = a11;
          uint64_t v511 = a11;
          int v514 = v504;
          unsigned int v515 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v505 + 8) + 7384), block);
            unsigned int v48 = v502;
            uint64_t v23 = v505;
LABEL_47:
            int v47 = v27 & v479;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v97 = v96;
          unsigned int v98 = *v87;
          if (v98 == 255)
          {
            float64x2_t v324 = v86[1];
            float64x2_t v325 = v86[2];
            float64x2_t v326 = v86[3];
            float64x2_t v327 = v86[6];
            float64x2_t v328 = v86[7];
            float64x2_t v329 = v86[8];
            float64x2_t v330 = v86[9];
            float64x2_t v331 = v86[11];
            float64x2_t v332 = v86[4];
            float64x2_t v333 = v86[12];
            float64x2_t v334 = v86[13];
            float64x2_t v335 = v86[14];
            float64x2_t v336 = v86[15];
            float64x2_t v337 = v86[5];
            float64x2_t v338 = v86[10];
            float64x2_t v519 = *v86;
            float64x2_t v520 = v324;
            float64x2_t v521 = v332;
            float64x2_t v522 = v337;
            float64x2_t v535 = v325;
            float64x2_t v536 = v326;
            float64x2_t v537 = v327;
            float64x2_t v538 = v328;
            float64x2_t v551 = v329;
            float64x2_t v552 = v330;
            float64x2_t v553 = v333;
            float64x2_t v554 = v334;
            uint64_t v99 = 256;
            float64x2_t v567 = v338;
            float64x2_t v568 = v331;
            float64x2_t v569 = v335;
            float64x2_t v570 = v336;
          }
          else if (v98 == 7)
          {
            float64x2_t v339 = vld1q_dup_f64(v86->f64);
            float64x2_t v519 = v339;
            float64x2_t v520 = v339;
            float64x2_t v521 = v339;
            float64x2_t v522 = v339;
            float64x2_t v535 = v339;
            float64x2_t v536 = v339;
            float64x2_t v537 = v339;
            float64x2_t v538 = v339;
            float64x2_t v551 = v339;
            float64x2_t v552 = v339;
            float64x2_t v553 = v339;
            float64x2_t v554 = v339;
            float64x2_t v567 = v339;
            float64x2_t v568 = v339;
            uint64_t v99 = 8;
            float64x2_t v569 = v339;
            float64x2_t v570 = v339;
          }
          else if (*v87)
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v519, 256, (uint64_t)v86, v98);
          }
          else
          {
            uint64_t v99 = 0;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v519 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
          }
          uint64_t v340 = (uint64_t)v86 + v99;
          unsigned int v341 = v87[1];
          if (v341 == 255)
          {
            float64x2_t v343 = *(float64x2_t *)(v340 + 16);
            float64x2_t v344 = *(float64x2_t *)(v340 + 32);
            float64x2_t v345 = *(float64x2_t *)(v340 + 48);
            float64x2_t v346 = *(float64x2_t *)(v340 + 96);
            float64x2_t v347 = *(float64x2_t *)(v340 + 112);
            float64x2_t v348 = *(float64x2_t *)(v340 + 128);
            float64x2_t v349 = *(float64x2_t *)(v340 + 144);
            float64x2_t v350 = *(float64x2_t *)(v340 + 176);
            float64x2_t v351 = *(float64x2_t *)(v340 + 64);
            float64x2_t v352 = *(float64x2_t *)(v340 + 192);
            float64x2_t v353 = *(float64x2_t *)(v340 + 208);
            float64x2_t v354 = *(float64x2_t *)(v340 + 224);
            float64x2_t v355 = *(float64x2_t *)(v340 + 240);
            float64x2_t v356 = *(float64x2_t *)(v340 + 80);
            float64x2_t v357 = *(float64x2_t *)(v340 + 160);
            float64x2_t v523 = *(float64x2_t *)v340;
            float64x2_t v524 = v343;
            float64x2_t v525 = v351;
            float64x2_t v526 = v356;
            float64x2_t v539 = v344;
            float64x2_t v540 = v345;
            float64x2_t v541 = v346;
            float64x2_t v542 = v347;
            float64x2_t v555 = v348;
            float64x2_t v556 = v349;
            float64x2_t v557 = v352;
            float64x2_t v558 = v353;
            uint64_t v342 = 256;
            float64x2_t v571 = v357;
            float64x2_t v572 = v350;
            float64x2_t v573 = v354;
            float64x2_t v574 = v355;
          }
          else if (v341 == 7)
          {
            float64x2_t v358 = vld1q_dup_f64((const double *)v340);
            float64x2_t v523 = v358;
            float64x2_t v524 = v358;
            float64x2_t v525 = v358;
            float64x2_t v526 = v358;
            float64x2_t v539 = v358;
            float64x2_t v540 = v358;
            float64x2_t v541 = v358;
            float64x2_t v542 = v358;
            float64x2_t v555 = v358;
            float64x2_t v556 = v358;
            float64x2_t v557 = v358;
            float64x2_t v558 = v358;
            float64x2_t v571 = v358;
            float64x2_t v572 = v358;
            uint64_t v342 = 8;
            float64x2_t v573 = v358;
            float64x2_t v574 = v358;
          }
          else if (v87[1])
          {
            uint64_t v342 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v523, 256, v340, v341);
          }
          else
          {
            uint64_t v342 = 0;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
          }
          uint64_t v359 = v340 + v342;
          unsigned int v360 = v87[2];
          if (v360 == 255)
          {
            float64x2_t v362 = *(float64x2_t *)(v359 + 16);
            float64x2_t v363 = *(float64x2_t *)(v359 + 32);
            float64x2_t v364 = *(float64x2_t *)(v359 + 48);
            float64x2_t v365 = *(float64x2_t *)(v359 + 96);
            float64x2_t v366 = *(float64x2_t *)(v359 + 112);
            float64x2_t v367 = *(float64x2_t *)(v359 + 128);
            float64x2_t v368 = *(float64x2_t *)(v359 + 144);
            float64x2_t v369 = *(float64x2_t *)(v359 + 176);
            float64x2_t v370 = *(float64x2_t *)(v359 + 64);
            float64x2_t v371 = *(float64x2_t *)(v359 + 192);
            float64x2_t v372 = *(float64x2_t *)(v359 + 208);
            float64x2_t v373 = *(float64x2_t *)(v359 + 224);
            float64x2_t v374 = *(float64x2_t *)(v359 + 240);
            float64x2_t v375 = *(float64x2_t *)(v359 + 80);
            float64x2_t v376 = *(float64x2_t *)(v359 + 160);
            float64x2_t v583 = *(float64x2_t *)v359;
            float64x2_t v584 = v362;
            float64x2_t v585 = v370;
            float64x2_t v586 = v375;
            float64x2_t v599 = v363;
            float64x2_t v600 = v364;
            float64x2_t v601 = v365;
            float64x2_t v602 = v366;
            float64x2_t v615 = v367;
            float64x2_t v616 = v368;
            float64x2_t v617 = v371;
            float64x2_t v618 = v372;
            uint64_t v361 = 256;
            float64x2_t v631 = v376;
            float64x2_t v632 = v369;
            float64x2_t v633 = v373;
            float64x2_t v634 = v374;
          }
          else if (v360 == 7)
          {
            float64x2_t v377 = vld1q_dup_f64((const double *)v359);
            float64x2_t v583 = v377;
            float64x2_t v584 = v377;
            float64x2_t v585 = v377;
            float64x2_t v586 = v377;
            float64x2_t v599 = v377;
            float64x2_t v600 = v377;
            float64x2_t v601 = v377;
            float64x2_t v602 = v377;
            float64x2_t v615 = v377;
            float64x2_t v616 = v377;
            float64x2_t v617 = v377;
            float64x2_t v618 = v377;
            float64x2_t v631 = v377;
            float64x2_t v632 = v377;
            float64x2_t v633 = v377;
            uint64_t v361 = 8;
            float64x2_t v634 = v377;
          }
          else if (v87[2])
          {
            uint64_t v361 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v583, 256, v359, v360);
          }
          else
          {
            uint64_t v361 = 0;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v583 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v615 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v618 = 0u;
            float64x2_t v631 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
          }
          uint64_t v378 = v359 + v361;
          unsigned int v379 = v87[3];
          if (v379 == 255)
          {
            float64x2_t v381 = *(float64x2_t *)(v378 + 16);
            float64x2_t v382 = *(float64x2_t *)(v378 + 32);
            float64x2_t v383 = *(float64x2_t *)(v378 + 48);
            float64x2_t v384 = *(float64x2_t *)(v378 + 96);
            float64x2_t v385 = *(float64x2_t *)(v378 + 112);
            float64x2_t v386 = *(float64x2_t *)(v378 + 128);
            float64x2_t v387 = *(float64x2_t *)(v378 + 144);
            float64x2_t v388 = *(float64x2_t *)(v378 + 176);
            float64x2_t v389 = *(float64x2_t *)(v378 + 64);
            float64x2_t v390 = *(float64x2_t *)(v378 + 192);
            float64x2_t v391 = *(float64x2_t *)(v378 + 208);
            float64x2_t v392 = *(float64x2_t *)(v378 + 224);
            float64x2_t v393 = *(float64x2_t *)(v378 + 240);
            float64x2_t v394 = *(float64x2_t *)(v378 + 80);
            float64x2_t v395 = *(float64x2_t *)(v378 + 160);
            float64x2_t v587 = *(float64x2_t *)v378;
            float64x2_t v588 = v381;
            float64x2_t v589 = v389;
            float64x2_t v590 = v394;
            float64x2_t v603 = v382;
            float64x2_t v604 = v383;
            float64x2_t v605 = v384;
            float64x2_t v606 = v385;
            float64x2_t v619 = v386;
            float64x2_t v620 = v387;
            float64x2_t v621 = v390;
            float64x2_t v622 = v391;
            uint64_t v380 = 256;
            float64x2_t v635 = v395;
            float64x2_t v636 = v388;
            float64x2_t v637 = v392;
            float64x2_t v638 = v393;
          }
          else if (v379 == 7)
          {
            float64x2_t v396 = vld1q_dup_f64((const double *)v378);
            float64x2_t v587 = v396;
            float64x2_t v588 = v396;
            float64x2_t v589 = v396;
            float64x2_t v590 = v396;
            float64x2_t v603 = v396;
            float64x2_t v604 = v396;
            float64x2_t v605 = v396;
            float64x2_t v606 = v396;
            float64x2_t v619 = v396;
            float64x2_t v620 = v396;
            float64x2_t v621 = v396;
            float64x2_t v622 = v396;
            float64x2_t v635 = v396;
            float64x2_t v636 = v396;
            float64x2_t v637 = v396;
            uint64_t v380 = 8;
            float64x2_t v638 = v396;
          }
          else if (v87[3])
          {
            uint64_t v380 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v587, 256, v378, v379);
          }
          else
          {
            uint64_t v380 = 0;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v620 = 0u;
            float64x2_t v621 = 0u;
            float64x2_t v622 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v636 = 0u;
            float64x2_t v637 = 0u;
            float64x2_t v638 = 0u;
          }
          uint64_t v397 = v378 + v380;
          unsigned int v398 = v87[4];
          if (v398 == 255)
          {
            float64x2_t v400 = *(float64x2_t *)(v397 + 16);
            float64x2_t v401 = *(float64x2_t *)(v397 + 32);
            float64x2_t v402 = *(float64x2_t *)(v397 + 48);
            float64x2_t v403 = *(float64x2_t *)(v397 + 96);
            float64x2_t v404 = *(float64x2_t *)(v397 + 112);
            float64x2_t v405 = *(float64x2_t *)(v397 + 128);
            float64x2_t v406 = *(float64x2_t *)(v397 + 144);
            float64x2_t v407 = *(float64x2_t *)(v397 + 176);
            float64x2_t v408 = *(float64x2_t *)(v397 + 64);
            float64x2_t v409 = *(float64x2_t *)(v397 + 192);
            float64x2_t v410 = *(float64x2_t *)(v397 + 208);
            float64x2_t v411 = *(float64x2_t *)(v397 + 224);
            float64x2_t v412 = *(float64x2_t *)(v397 + 240);
            float64x2_t v413 = *(float64x2_t *)(v397 + 80);
            float64x2_t v414 = *(float64x2_t *)(v397 + 160);
            float64x2_t v527 = *(float64x2_t *)v397;
            float64x2_t v528 = v400;
            float64x2_t v529 = v408;
            float64x2_t v530 = v413;
            float64x2_t v543 = v401;
            float64x2_t v544 = v402;
            float64x2_t v545 = v403;
            float64x2_t v546 = v404;
            float64x2_t v559 = v405;
            float64x2_t v560 = v406;
            float64x2_t v561 = v409;
            float64x2_t v562 = v410;
            uint64_t v399 = 256;
            float64x2_t v575 = v414;
            float64x2_t v576 = v407;
            float64x2_t v577 = v411;
            float64x2_t v578 = v412;
          }
          else if (v398 == 7)
          {
            float64x2_t v415 = vld1q_dup_f64((const double *)v397);
            float64x2_t v527 = v415;
            float64x2_t v528 = v415;
            float64x2_t v529 = v415;
            float64x2_t v530 = v415;
            float64x2_t v543 = v415;
            float64x2_t v544 = v415;
            float64x2_t v545 = v415;
            float64x2_t v546 = v415;
            float64x2_t v559 = v415;
            float64x2_t v560 = v415;
            float64x2_t v561 = v415;
            float64x2_t v562 = v415;
            float64x2_t v575 = v415;
            float64x2_t v576 = v415;
            uint64_t v399 = 8;
            float64x2_t v577 = v415;
            float64x2_t v578 = v415;
          }
          else if (v87[4])
          {
            uint64_t v399 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v527, 256, v397, v398);
          }
          else
          {
            uint64_t v399 = 0;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
          }
          uint64_t v416 = v397 + v399;
          unsigned int v417 = v87[5];
          if (v417 == 255)
          {
            float64x2_t v419 = *(float64x2_t *)(v416 + 16);
            float64x2_t v420 = *(float64x2_t *)(v416 + 32);
            float64x2_t v421 = *(float64x2_t *)(v416 + 48);
            float64x2_t v422 = *(float64x2_t *)(v416 + 96);
            float64x2_t v423 = *(float64x2_t *)(v416 + 112);
            float64x2_t v424 = *(float64x2_t *)(v416 + 128);
            float64x2_t v425 = *(float64x2_t *)(v416 + 144);
            float64x2_t v426 = *(float64x2_t *)(v416 + 176);
            float64x2_t v427 = *(float64x2_t *)(v416 + 64);
            float64x2_t v428 = *(float64x2_t *)(v416 + 192);
            float64x2_t v429 = *(float64x2_t *)(v416 + 208);
            float64x2_t v430 = *(float64x2_t *)(v416 + 224);
            float64x2_t v431 = *(float64x2_t *)(v416 + 240);
            float64x2_t v432 = *(float64x2_t *)(v416 + 80);
            float64x2_t v433 = *(float64x2_t *)(v416 + 160);
            float64x2_t v531 = *(float64x2_t *)v416;
            float64x2_t v532 = v419;
            float64x2_t v533 = v427;
            float64x2_t v534 = v432;
            float64x2_t v547 = v420;
            float64x2_t v548 = v421;
            float64x2_t v549 = v422;
            float64x2_t v550 = v423;
            float64x2_t v563 = v424;
            float64x2_t v564 = v425;
            float64x2_t v565 = v428;
            float64x2_t v566 = v429;
            uint64_t v418 = 256;
            float64x2_t v579 = v433;
            float64x2_t v580 = v426;
            float64x2_t v581 = v430;
            float64x2_t v582 = v431;
          }
          else if (v417 == 7)
          {
            float64x2_t v434 = vld1q_dup_f64((const double *)v416);
            float64x2_t v531 = v434;
            float64x2_t v532 = v434;
            float64x2_t v533 = v434;
            float64x2_t v534 = v434;
            float64x2_t v547 = v434;
            float64x2_t v548 = v434;
            float64x2_t v549 = v434;
            float64x2_t v550 = v434;
            float64x2_t v563 = v434;
            float64x2_t v564 = v434;
            float64x2_t v565 = v434;
            float64x2_t v566 = v434;
            float64x2_t v579 = v434;
            float64x2_t v580 = v434;
            uint64_t v418 = 8;
            float64x2_t v581 = v434;
            float64x2_t v582 = v434;
          }
          else if (v87[5])
          {
            uint64_t v418 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v531, 256, v416, v417);
          }
          else
          {
            uint64_t v418 = 0;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v579 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
          }
          uint64_t v435 = v416 + v418;
          unsigned int v436 = v87[6];
          if (v436 == 255)
          {
            float64x2_t v438 = *(float64x2_t *)(v435 + 16);
            float64x2_t v439 = *(float64x2_t *)(v435 + 32);
            float64x2_t v440 = *(float64x2_t *)(v435 + 48);
            float64x2_t v441 = *(float64x2_t *)(v435 + 96);
            float64x2_t v442 = *(float64x2_t *)(v435 + 112);
            float64x2_t v443 = *(float64x2_t *)(v435 + 128);
            float64x2_t v444 = *(float64x2_t *)(v435 + 144);
            float64x2_t v445 = *(float64x2_t *)(v435 + 176);
            float64x2_t v446 = *(float64x2_t *)(v435 + 64);
            float64x2_t v447 = *(float64x2_t *)(v435 + 192);
            float64x2_t v448 = *(float64x2_t *)(v435 + 208);
            float64x2_t v449 = *(float64x2_t *)(v435 + 224);
            float64x2_t v450 = *(float64x2_t *)(v435 + 240);
            float64x2_t v451 = *(float64x2_t *)(v435 + 80);
            float64x2_t v452 = *(float64x2_t *)(v435 + 160);
            float64x2_t v591 = *(float64x2_t *)v435;
            float64x2_t v592 = v438;
            float64x2_t v593 = v446;
            float64x2_t v594 = v451;
            float64x2_t v607 = v439;
            float64x2_t v608 = v440;
            float64x2_t v609 = v441;
            float64x2_t v610 = v442;
            float64x2_t v623 = v443;
            float64x2_t v624 = v444;
            float64x2_t v625 = v447;
            float64x2_t v626 = v448;
            uint64_t v437 = 256;
            float64x2_t v639 = v452;
            float64x2_t v640 = v445;
            float64x2_t v641 = v449;
            float64x2_t v642 = v450;
          }
          else if (v436 == 7)
          {
            float64x2_t v453 = vld1q_dup_f64((const double *)v435);
            float64x2_t v591 = v453;
            float64x2_t v592 = v453;
            float64x2_t v593 = v453;
            float64x2_t v594 = v453;
            float64x2_t v607 = v453;
            float64x2_t v608 = v453;
            float64x2_t v609 = v453;
            float64x2_t v610 = v453;
            float64x2_t v623 = v453;
            float64x2_t v624 = v453;
            float64x2_t v625 = v453;
            float64x2_t v626 = v453;
            float64x2_t v639 = v453;
            float64x2_t v640 = v453;
            float64x2_t v641 = v453;
            uint64_t v437 = 8;
            float64x2_t v642 = v453;
          }
          else if (v87[6])
          {
            uint64_t v437 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v591, 256, v435, v436);
          }
          else
          {
            uint64_t v437 = 0;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v623 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v639 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
          }
          uint64_t v454 = v435 + v437;
          unsigned int v455 = v87[7];
          if (v455 == 255)
          {
            float64x2_t v458 = *(float64x2_t *)(v454 + 16);
            float64x2_t v459 = *(float64x2_t *)(v454 + 32);
            float64x2_t v460 = *(float64x2_t *)(v454 + 48);
            float64x2_t v461 = *(float64x2_t *)(v454 + 96);
            float64x2_t v462 = *(float64x2_t *)(v454 + 112);
            float64x2_t v463 = *(float64x2_t *)(v454 + 64);
            float64x2_t v464 = *(float64x2_t *)(v454 + 128);
            float64x2_t v465 = *(float64x2_t *)(v454 + 144);
            float64x2_t v466 = *(float64x2_t *)(v454 + 80);
            float64x2_t v467 = *(float64x2_t *)(v454 + 192);
            float64x2_t v468 = *(float64x2_t *)(v454 + 208);
            float64x2_t v469 = *(float64x2_t *)(v454 + 224);
            float64x2_t v470 = *(float64x2_t *)(v454 + 240);
            float64x2_t v471 = *(float64x2_t *)(v454 + 160);
            float64x2_t v472 = *(float64x2_t *)(v454 + 176);
            float64x2_t v595 = *(float64x2_t *)v454;
            float64x2_t v596 = v458;
            float64x2_t v597 = v463;
            float64x2_t v598 = v466;
            float64x2_t v611 = v459;
            float64x2_t v612 = v460;
            float64x2_t v613 = v461;
            float64x2_t v614 = v462;
            float64x2_t v627 = v464;
            float64x2_t v628 = v465;
            float64x2_t v629 = v467;
            float64x2_t v630 = v468;
            unsigned int v456 = v504;
            unsigned int v457 = v494;
            float64x2_t v643 = v471;
            float64x2_t v644 = v472;
            float64x2_t v645 = v469;
            float64x2_t v646 = v470;
            unsigned int v48 = v502;
            uint64_t v23 = v505;
          }
          else
          {
            unsigned int v48 = v502;
            uint64_t v23 = v505;
            if (v455 == 7)
            {
              float64x2_t v473 = vld1q_dup_f64((const double *)v454);
              float64x2_t v595 = v473;
              float64x2_t v596 = v473;
              float64x2_t v597 = v473;
              float64x2_t v598 = v473;
              float64x2_t v611 = v473;
              float64x2_t v612 = v473;
              float64x2_t v613 = v473;
              float64x2_t v614 = v473;
              float64x2_t v627 = v473;
              float64x2_t v628 = v473;
              float64x2_t v629 = v473;
              float64x2_t v630 = v473;
              float64x2_t v643 = v473;
              float64x2_t v644 = v473;
              float64x2_t v645 = v473;
              unsigned int v456 = v504;
              unsigned int v457 = v494;
              float64x2_t v646 = v473;
            }
            else if (v455)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v595, 256, v454, v455);
              unsigned int v457 = v512;
              unsigned int v97 = v513;
              unsigned int v456 = v514;
            }
            else
            {
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v611 = 0u;
              float64x2_t v612 = 0u;
              float64x2_t v613 = 0u;
              float64x2_t v614 = 0u;
              float64x2_t v627 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v643 = 0u;
              float64x2_t v644 = 0u;
              unsigned int v456 = v504;
              unsigned int v457 = v494;
              float64x2_t v645 = 0u;
              float64x2_t v646 = 0u;
            }
          }
          int v47 = v27 & v479;
          unsigned int v49 = v45 + 1;
          if (v456)
          {
            unint64_t v474 = 0;
            v475 = (_OWORD *)&v519.f64[32 * (unint64_t)v457 + 2 * v97];
            unsigned int v476 = v515;
            do
            {
              if (v476)
              {
                uint64_t v477 = 0;
                v478 = (char *)v510 + v511 * v474;
                do
                {
                  v478[v477] = *((unsigned char *)v475 + v477);
                  ++v477;
                  unsigned int v476 = v515;
                }
                while (16 * (unint64_t)v515 > v477);
                unsigned int v456 = v514;
              }
              ++v474;
              v475 += 16;
            }
            while (v474 < v456);
          }
LABEL_48:
          BOOL v28 = v45 == v496 >> 4;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v484;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v502 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v499 = v20;
  uint64_t v500 = v21;
  uint64_t v483 = v22;
  uint64_t v23 = v12;
  uint64_t v647 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v503 = v14;
  unsigned int v485 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v484 = v485 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v498 = v31;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v32 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v33 = *(unsigned __int8 *)(v23 + 254);
    char v34 = __clz(v25);
    if (1 << v32 >= v17 || v19 >> v33)
    {
      if (!(v17 >> v32) && 1 << v33 < v19)
      {
        if (v17 < 2) {
          unsigned int v37 = 0;
        }
        else {
          unsigned int v37 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v33 += v32 + v37;
        unsigned int v32 = -v37;
      }
    }
    else
    {
      unsigned int v35 = 32 - __clz(~(-1 << -v34));
      unsigned int v36 = v33 + v32;
      if (v19 < 2) {
        unsigned int v35 = 0;
      }
      unsigned int v32 = v36 - v35;
      unsigned int v33 = v35;
    }
    if (v19 < 2)
    {
      if (v33) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v34)) < v33)
    {
LABEL_27:
      BOOL v497 = 0;
LABEL_32:
      unsigned int v495 = v33 - 4;
      unsigned int v489 = v32 - 3;
      int v39 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v482 = (((~v39 + v19) & v39) + ~(-1 << v33)) >> v33;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v38 = 0;
    }
    else {
      unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v497 = v38 >= v32;
    goto LABEL_32;
  }
  BOOL v497 = 0;
  unsigned int v482 = 0;
  unsigned int v489 = 0;
  unsigned int v495 = 0;
LABEL_33:
  if (v27 <= v484)
  {
    unsigned int v496 = v502 + a9 - 1;
    if (v502 >> 4 <= v496 >> 4)
    {
      uint64_t v40 = a11;
      unsigned int v507 = v25 >> 4;
      unsigned int v481 = v26 >> 3;
      int v506 = (v25 & 0xF) + 1;
      int v480 = (v26 & 7) + 1;
      int v479 = ~(-1 << v489);
      uint64_t v493 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v492 = v42.i32[0] | v42.i32[1];
      int8x8_t v488 = v42;
      BOOL v487 = v42.i32[0] != 0;
      BOOL v486 = v42.i32[1] != 0;
      uint64_t v505 = v23;
      uint64_t v490 = 3 * a11;
      uint64_t v491 = 2 * a11;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v503) {
          int v44 = v503;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v485 < v43) {
          unsigned int v43 = v485;
        }
        int v494 = v44 - 8 * v27;
        int v504 = v43 - v44 + 1;
        unsigned int v45 = v502 >> 4;
        int v46 = v480;
        if (v27 != v481) {
          int v46 = 8;
        }
        unsigned int v508 = v46;
        int v47 = v27 & v479;
        uint64_t v501 = v483 + (v44 - v503) * v40;
        unsigned int v48 = v502;
        do
        {
          unsigned int v50 = 16 * v45;
          unsigned int v51 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v48) {
            int v52 = v48;
          }
          else {
            int v52 = 16 * v45;
          }
          if (v496 < v51) {
            unsigned int v51 = v502 + a9 - 1;
          }
          int v53 = v51 - v52 + 1;
          if (v45 == v507) {
            unsigned int v54 = v506;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (8 * v27 >= v503 && v50 >= v48)
          {
            int v56 = v506;
            if (v45 != v507) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v504 != v508;
          }
          if (v497)
          {
            if (v495 | v489)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v489 != 0;
              BOOL v62 = v495 != 0;
              unsigned int v63 = v489;
              unsigned int v64 = v495;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v47 & v60) << v58++;
                }
                else {
                  unsigned int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v45 & ~(-1 << v495) & v60) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(v23 + 320) * ((v45 >> v495) + (v27 >> v489) * v482) + (v59 << 11);
          }
          else
          {
            if (v492)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v487;
              BOOL v69 = v486;
              __int32 v70 = v488.i32[0];
              __int32 v71 = v488.i32[1];
              do
              {
                --v70;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v27) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v45) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v69 = v71 != 0;
                BOOL v68 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 7;
          if (v77 < 0x10)
          {
            unsigned int v78 = 0;
            if (!v75)
            {
LABEL_115:
              unint64_t v80 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 3) - 1)));
            if (!(v78 | v75)) {
              goto LABEL_115;
            }
          }
          int v79 = 0;
          unint64_t v80 = 0;
          BOOL v81 = v75 != 0;
          BOOL v82 = v78 != 0;
          int v83 = 1;
          do
          {
            --v75;
            BOOL v84 = !v81;
            if (v81)
            {
              unint64_t v85 = ((unint64_t)(v83 & v45) << v79) | v80;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v85 = v80;
            }
            if (!v84) {
              ++v79;
            }
            --v78;
            if (v82)
            {
              unint64_t v80 = ((unint64_t)(v83 & v27) << v79) | v85;
            }
            else
            {
              unsigned int v78 = 0;
              unint64_t v80 = v85;
            }
            if (v82) {
              ++v79;
            }
            v83 *= 2;
            --v79;
            BOOL v82 = v78 != 0;
            BOOL v81 = v75 != 0;
          }
          while (v78 | v75);
LABEL_116:
          uint64_t v86 = (float64x2_t *)(v499 + v72);
          if (v498)
          {
            memcpy(__dst, v86, sizeof(__dst));
            uint64_t v86 = (float64x2_t *)__dst;
          }
          int8x8_t v87 = (unsigned __int8 *)(v500 + 8 * v80);
          char v88 = (float64x2_t *)(v501 + 16 * (v52 - v48));
          char v89 = v54 < 0x10 || v55;
          if ((v89 & 1) == 0 && v508 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 255)
            {
              float64x2_t v104 = v86[1];
              float64x2_t v105 = v86[2];
              float64x2_t v106 = v86[3];
              float64x2_t v107 = v86[8];
              float64x2_t v108 = v86[9];
              float64x2_t v109 = v86[6];
              float64x2_t v110 = v86[12];
              float64x2_t v111 = v86[13];
              float64x2_t v112 = v86[15];
              float64x2_t v113 = v86[7];
              float64x2_t v114 = v86[4];
              float64x2_t v115 = v86[5];
              float64x2_t v116 = v86[10];
              float64x2_t v117 = v86[11];
              float64x2_t v118 = v86[14];
              uint64_t v91 = 2 * a11;
              float64x2_t *v88 = *v86;
              v88[1] = v104;
              v88[2] = v114;
              v88[3] = v115;
              uint64_t v119 = (float64x2_t *)((char *)v88 + v491);
              uint64_t v40 = a11;
              int64x2_t v120 = (float64x2_t *)((char *)v88 + a11);
              float64x2_t *v120 = v105;
              v120[1] = v106;
              v120[2] = v109;
              v120[3] = v113;
              *uint64_t v119 = v107;
              v119[1] = v108;
              v119[2] = v110;
              v119[3] = v111;
              int64x2_t v121 = (float64x2_t *)((char *)v88 + v491 + a11);
              uint64_t v92 = 256;
              *int64x2_t v121 = v116;
              v121[1] = v117;
              v121[2] = v118;
              v121[3] = v112;
            }
            else
            {
              uint64_t v40 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 7)
              {
                float64x2_t v100 = vld1q_dup_f64(v86->f64);
                float64x2_t *v88 = v100;
                v88[1] = v100;
                v88[2] = v100;
                v88[3] = v100;
                int64x2_t v101 = (float64x2_t *)((char *)v88 + a11);
                *int64x2_t v101 = v100;
                v101[1] = v100;
                v101[2] = v100;
                v101[3] = v100;
                uint64_t v102 = (float64x2_t *)((char *)v88 + v491);
                float64x2_t *v102 = v100;
                v102[1] = v100;
                v102[2] = v100;
                v102[3] = v100;
                uint64_t v103 = (float64x2_t *)((char *)v88 + v490);
                *uint64_t v103 = v100;
                v103[1] = v100;
                v103[2] = v100;
                v103[3] = v100;
                uint64_t v92 = 8;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88, a11, (uint64_t)v86, v90);
              }
              else
              {
                uint64_t v92 = 0;
                v88[2] = 0u;
                v88[3] = 0u;
                float64x2_t *v88 = 0u;
                v88[1] = 0u;
                int8x8_t v93 = (_OWORD *)((char *)v88->f64 + a11);
                v93[2] = 0u;
                v93[3] = 0u;
                *int8x8_t v93 = 0u;
                v93[1] = 0u;
                unsigned int v94 = (_OWORD *)((char *)v88->f64 + v491);
                v94[2] = 0u;
                v94[3] = 0u;
                *unsigned int v94 = 0u;
                v94[1] = 0u;
                uint64_t v95 = (_OWORD *)((char *)v88->f64 + v490);
                v95[2] = 0u;
                v95[3] = 0u;
                _OWORD *v95 = 0u;
                v95[1] = 0u;
              }
            }
            uint64_t v122 = (uint64_t)v86 + v92;
            f64 = (_OWORD *)v88[4].f64;
            unsigned int v124 = v87[1];
            if (v124 == 255)
            {
              float64x2_t v133 = *(float64x2_t *)(v122 + 16);
              long long v134 = *(_OWORD *)(v122 + 32);
              long long v135 = *(_OWORD *)(v122 + 48);
              long long v136 = *(_OWORD *)(v122 + 128);
              long long v137 = *(_OWORD *)(v122 + 144);
              long long v138 = *(_OWORD *)(v122 + 96);
              long long v139 = *(_OWORD *)(v122 + 192);
              long long v140 = *(_OWORD *)(v122 + 208);
              long long v141 = *(_OWORD *)(v122 + 240);
              long long v142 = *(_OWORD *)(v122 + 112);
              float64x2_t v143 = *(float64x2_t *)(v122 + 64);
              float64x2_t v144 = *(float64x2_t *)(v122 + 80);
              long long v145 = *(_OWORD *)(v122 + 160);
              long long v146 = *(_OWORD *)(v122 + 176);
              long long v147 = *(_OWORD *)(v122 + 224);
              _OWORD *f64 = *(_OWORD *)v122;
              v88[5] = v133;
              v88[6] = v143;
              v88[7] = v144;
              uint64_t v148 = (_OWORD *)((char *)f64 + v91);
              unsigned int v149 = (_OWORD *)((char *)f64 + v40);
              *unsigned int v149 = v134;
              v149[1] = v135;
              v149[2] = v138;
              v149[3] = v142;
              _OWORD *v148 = v136;
              v148[1] = v137;
              v148[2] = v139;
              v148[3] = v140;
              unsigned int v150 = (_OWORD *)((char *)f64 + v91 + v40);
              uint64_t v125 = 256;
              _OWORD *v150 = v145;
              v150[1] = v146;
              v150[2] = v147;
              v150[3] = v141;
            }
            else if (v124 == 7)
            {
              float64x2_t v129 = vld1q_dup_f64((const double *)v122);
              v88[4] = v129;
              v88[5] = v129;
              v88[6] = v129;
              v88[7] = v129;
              unsigned int v130 = (float64x2_t *)((char *)f64 + v40);
              float64x2_t *v130 = v129;
              v130[1] = v129;
              v130[2] = v129;
              v130[3] = v129;
              int64x2_t v131 = (float64x2_t *)((char *)f64 + v91);
              *int64x2_t v131 = v129;
              v131[1] = v129;
              v131[2] = v129;
              v131[3] = v129;
              int64x2_t v132 = (float64x2_t *)((char *)f64 + v490);
              float64x2_t *v132 = v129;
              v132[1] = v129;
              uint64_t v125 = 8;
              v132[2] = v129;
              v132[3] = v129;
            }
            else if (v87[1])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v40, v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              v88[6] = 0u;
              v88[7] = 0u;
              _OWORD *f64 = 0u;
              v88[5] = 0u;
              uint64_t v126 = (_OWORD *)((char *)f64 + v40);
              v126[2] = 0u;
              v126[3] = 0u;
              _OWORD *v126 = 0u;
              v126[1] = 0u;
              unsigned int v127 = (_OWORD *)((char *)f64 + v91);
              v127[2] = 0u;
              v127[3] = 0u;
              _OWORD *v127 = 0u;
              v127[1] = 0u;
              uint64_t v128 = (_OWORD *)((char *)f64 + v490);
              v128[2] = 0u;
              v128[3] = 0u;
              _OWORD *v128 = 0u;
              v128[1] = 0u;
            }
            uint64_t v151 = v122 + v125;
            uint64_t v152 = (float64x2_t *)((char *)v88 + v493);
            unsigned int v153 = v87[2];
            if (v153 == 255)
            {
              float64x2_t v162 = *(float64x2_t *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 128);
              long long v166 = *(_OWORD *)(v151 + 144);
              long long v167 = *(_OWORD *)(v151 + 96);
              long long v168 = *(_OWORD *)(v151 + 192);
              long long v169 = *(_OWORD *)(v151 + 208);
              long long v170 = *(_OWORD *)(v151 + 240);
              long long v171 = *(_OWORD *)(v151 + 112);
              float64x2_t v172 = *(float64x2_t *)(v151 + 64);
              float64x2_t v173 = *(float64x2_t *)(v151 + 80);
              long long v174 = *(_OWORD *)(v151 + 160);
              long long v175 = *(_OWORD *)(v151 + 176);
              long long v176 = *(_OWORD *)(v151 + 224);
              *uint64_t v152 = *(float64x2_t *)v151;
              v152[1] = v162;
              v152[2] = v172;
              v152[3] = v173;
              uint64_t v177 = (_OWORD *)((char *)v152->f64 + v91);
              int64x2_t v178 = (_OWORD *)((char *)v152->f64 + v40);
              _OWORD *v178 = v163;
              v178[1] = v164;
              v178[2] = v167;
              v178[3] = v171;
              *uint64_t v177 = v165;
              v177[1] = v166;
              v177[2] = v168;
              v177[3] = v169;
              int64x2_t v179 = (_OWORD *)((char *)v152->f64 + v91 + v40);
              uint64_t v154 = 256;
              *int64x2_t v179 = v174;
              v179[1] = v175;
              v179[2] = v176;
              v179[3] = v170;
            }
            else if (v153 == 7)
            {
              float64x2_t v158 = vld1q_dup_f64((const double *)v151);
              *uint64_t v152 = v158;
              v152[1] = v158;
              v152[2] = v158;
              v152[3] = v158;
              int64x2_t v159 = (float64x2_t *)((char *)v152 + v40);
              float64x2_t *v159 = v158;
              v159[1] = v158;
              v159[2] = v158;
              v159[3] = v158;
              uint64_t v160 = (float64x2_t *)((char *)v152 + v91);
              *uint64_t v160 = v158;
              v160[1] = v158;
              v160[2] = v158;
              v160[3] = v158;
              unsigned int v161 = (float64x2_t *)((char *)v152 + v490);
              *unsigned int v161 = v158;
              v161[1] = v158;
              v161[2] = v158;
              v161[3] = v158;
              uint64_t v154 = 8;
            }
            else if (v87[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v88 + v493, v40, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              v152[2] = 0u;
              v152[3] = 0u;
              *uint64_t v152 = 0u;
              v152[1] = 0u;
              int64x2_t v155 = (_OWORD *)((char *)v152->f64 + v40);
              v155[2] = 0u;
              v155[3] = 0u;
              _OWORD *v155 = 0u;
              v155[1] = 0u;
              int64x2_t v156 = (_OWORD *)((char *)v152->f64 + v91);
              v156[2] = 0u;
              v156[3] = 0u;
              *int64x2_t v156 = 0u;
              v156[1] = 0u;
              unsigned int v157 = (_OWORD *)((char *)v152->f64 + v490);
              v157[2] = 0u;
              v157[3] = 0u;
              *unsigned int v157 = 0u;
              v157[1] = 0u;
            }
            uint64_t v180 = v151 + v154;
            unsigned int v181 = (_OWORD *)v152[4].f64;
            unsigned int v182 = v87[3];
            if (v182 == 255)
            {
              float64x2_t v191 = *(float64x2_t *)(v180 + 16);
              long long v192 = *(_OWORD *)(v180 + 32);
              long long v193 = *(_OWORD *)(v180 + 48);
              long long v194 = *(_OWORD *)(v180 + 128);
              long long v195 = *(_OWORD *)(v180 + 144);
              long long v196 = *(_OWORD *)(v180 + 96);
              long long v197 = *(_OWORD *)(v180 + 192);
              long long v198 = *(_OWORD *)(v180 + 208);
              long long v199 = *(_OWORD *)(v180 + 240);
              long long v200 = *(_OWORD *)(v180 + 112);
              float64x2_t v201 = *(float64x2_t *)(v180 + 64);
              float64x2_t v202 = *(float64x2_t *)(v180 + 80);
              long long v203 = *(_OWORD *)(v180 + 160);
              long long v204 = *(_OWORD *)(v180 + 176);
              long long v205 = *(_OWORD *)(v180 + 224);
              _OWORD *v181 = *(_OWORD *)v180;
              v152[5] = v191;
              v152[6] = v201;
              v152[7] = v202;
              unsigned int v206 = (_OWORD *)((char *)v181 + v91);
              unsigned int v207 = (_OWORD *)((char *)v181 + v40);
              *unsigned int v207 = v192;
              v207[1] = v193;
              v207[2] = v196;
              v207[3] = v200;
              *unsigned int v206 = v194;
              v206[1] = v195;
              v206[2] = v197;
              v206[3] = v198;
              unsigned int v208 = (_OWORD *)((char *)v181 + v91 + v40);
              uint64_t v183 = 256;
              *unsigned int v208 = v203;
              v208[1] = v204;
              v208[2] = v205;
              v208[3] = v199;
            }
            else if (v182 == 7)
            {
              float64x2_t v187 = vld1q_dup_f64((const double *)v180);
              v152[4] = v187;
              v152[5] = v187;
              v152[6] = v187;
              v152[7] = v187;
              int64x2_t v188 = (float64x2_t *)((char *)v181 + v40);
              *int64x2_t v188 = v187;
              v188[1] = v187;
              v188[2] = v187;
              v188[3] = v187;
              int64x2_t v189 = (float64x2_t *)((char *)v181 + v91);
              *int64x2_t v189 = v187;
              v189[1] = v187;
              v189[2] = v187;
              v189[3] = v187;
              uint64_t v190 = (float64x2_t *)((char *)v181 + v490);
              *uint64_t v190 = v187;
              v190[1] = v187;
              uint64_t v183 = 8;
              v190[2] = v187;
              v190[3] = v187;
            }
            else if (v87[3])
            {
              uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v181, v40, v180, v182);
            }
            else
            {
              uint64_t v183 = 0;
              v152[6] = 0u;
              v152[7] = 0u;
              _OWORD *v181 = 0u;
              v152[5] = 0u;
              int64x2_t v184 = (_OWORD *)((char *)v181 + v40);
              v184[2] = 0u;
              v184[3] = 0u;
              _OWORD *v184 = 0u;
              v184[1] = 0u;
              uint64_t v185 = (_OWORD *)((char *)v181 + v91);
              v185[2] = 0u;
              v185[3] = 0u;
              *uint64_t v185 = 0u;
              v185[1] = 0u;
              unsigned int v186 = (_OWORD *)((char *)v181 + v490);
              v186[2] = 0u;
              v186[3] = 0u;
              *unsigned int v186 = 0u;
              v186[1] = 0u;
            }
            uint64_t v209 = v180 + v183;
            uint64_t v210 = (_OWORD *)v88[8].f64;
            unsigned int v211 = v87[4];
            if (v211 == 255)
            {
              float64x2_t v220 = *(float64x2_t *)(v209 + 16);
              long long v221 = *(_OWORD *)(v209 + 32);
              long long v222 = *(_OWORD *)(v209 + 48);
              long long v223 = *(_OWORD *)(v209 + 128);
              long long v224 = *(_OWORD *)(v209 + 144);
              long long v225 = *(_OWORD *)(v209 + 96);
              long long v226 = *(_OWORD *)(v209 + 192);
              long long v227 = *(_OWORD *)(v209 + 208);
              long long v228 = *(_OWORD *)(v209 + 240);
              long long v229 = *(_OWORD *)(v209 + 112);
              float64x2_t v230 = *(float64x2_t *)(v209 + 64);
              float64x2_t v231 = *(float64x2_t *)(v209 + 80);
              long long v232 = *(_OWORD *)(v209 + 160);
              long long v233 = *(_OWORD *)(v209 + 176);
              long long v234 = *(_OWORD *)(v209 + 224);
              *uint64_t v210 = *(_OWORD *)v209;
              v88[9] = v220;
              v88[10] = v230;
              v88[11] = v231;
              unsigned int v235 = (_OWORD *)((char *)v210 + v91);
              BOOL v236 = (_OWORD *)((char *)v210 + v40);
              *BOOL v236 = v221;
              v236[1] = v222;
              v236[2] = v225;
              v236[3] = v229;
              *unsigned int v235 = v223;
              v235[1] = v224;
              v235[2] = v226;
              v235[3] = v227;
              uint64_t v237 = (_OWORD *)((char *)v210 + v91 + v40);
              uint64_t v212 = 256;
              *uint64_t v237 = v232;
              v237[1] = v233;
              v237[2] = v234;
              v237[3] = v228;
            }
            else if (v211 == 7)
            {
              float64x2_t v216 = vld1q_dup_f64((const double *)v209);
              v88[8] = v216;
              v88[9] = v216;
              v88[10] = v216;
              v88[11] = v216;
              unsigned int v217 = (float64x2_t *)((char *)v210 + v40);
              *unsigned int v217 = v216;
              v217[1] = v216;
              v217[2] = v216;
              v217[3] = v216;
              int v218 = (float64x2_t *)((char *)v210 + v91);
              float64x2_t *v218 = v216;
              v218[1] = v216;
              v218[2] = v216;
              v218[3] = v216;
              unsigned int v219 = (float64x2_t *)((char *)v210 + v490);
              *unsigned int v219 = v216;
              v219[1] = v216;
              uint64_t v212 = 8;
              v219[2] = v216;
              v219[3] = v216;
            }
            else if (v87[4])
            {
              uint64_t v212 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v210, v40, v209, v211);
            }
            else
            {
              uint64_t v212 = 0;
              v88[10] = 0u;
              v88[11] = 0u;
              *uint64_t v210 = 0u;
              v88[9] = 0u;
              BOOL v213 = (_OWORD *)((char *)v210 + v40);
              v213[2] = 0u;
              v213[3] = 0u;
              *BOOL v213 = 0u;
              v213[1] = 0u;
              BOOL v214 = (_OWORD *)((char *)v210 + v91);
              v214[2] = 0u;
              v214[3] = 0u;
              *BOOL v214 = 0u;
              v214[1] = 0u;
              int v215 = (_OWORD *)((char *)v210 + v490);
              v215[2] = 0u;
              v215[3] = 0u;
              *int v215 = 0u;
              v215[1] = 0u;
            }
            uint64_t v238 = v209 + v212;
            unsigned int v239 = (_OWORD *)v88[12].f64;
            unsigned int v240 = v87[5];
            if (v240 == 255)
            {
              float64x2_t v249 = *(float64x2_t *)(v238 + 16);
              long long v250 = *(_OWORD *)(v238 + 32);
              long long v251 = *(_OWORD *)(v238 + 48);
              long long v252 = *(_OWORD *)(v238 + 128);
              long long v253 = *(_OWORD *)(v238 + 144);
              long long v254 = *(_OWORD *)(v238 + 96);
              long long v255 = *(_OWORD *)(v238 + 192);
              long long v256 = *(_OWORD *)(v238 + 208);
              long long v257 = *(_OWORD *)(v238 + 240);
              long long v258 = *(_OWORD *)(v238 + 112);
              float64x2_t v259 = *(float64x2_t *)(v238 + 64);
              float64x2_t v260 = *(float64x2_t *)(v238 + 80);
              long long v261 = *(_OWORD *)(v238 + 160);
              long long v262 = *(_OWORD *)(v238 + 176);
              long long v263 = *(_OWORD *)(v238 + 224);
              _OWORD *v239 = *(_OWORD *)v238;
              v88[13] = v249;
              v88[14] = v259;
              v88[15] = v260;
              int64x2_t v264 = (_OWORD *)((char *)v239 + v91);
              int64x2_t v265 = (_OWORD *)((char *)v239 + v40);
              *int64x2_t v265 = v250;
              v265[1] = v251;
              v265[2] = v254;
              v265[3] = v258;
              *int64x2_t v264 = v252;
              v264[1] = v253;
              v264[2] = v255;
              v264[3] = v256;
              int64x2_t v266 = (_OWORD *)((char *)v239 + v91 + v40);
              uint64_t v241 = 256;
              *int64x2_t v266 = v261;
              v266[1] = v262;
              v266[2] = v263;
              v266[3] = v257;
            }
            else if (v240 == 7)
            {
              float64x2_t v245 = vld1q_dup_f64((const double *)v238);
              v88[12] = v245;
              v88[13] = v245;
              v88[14] = v245;
              v88[15] = v245;
              unsigned int v246 = (float64x2_t *)((char *)v239 + v40);
              *unsigned int v246 = v245;
              v246[1] = v245;
              v246[2] = v245;
              v246[3] = v245;
              uint64_t v247 = (float64x2_t *)((char *)v239 + v91);
              *uint64_t v247 = v245;
              v247[1] = v245;
              v247[2] = v245;
              v247[3] = v245;
              unsigned int v248 = (float64x2_t *)((char *)v239 + v490);
              *unsigned int v248 = v245;
              v248[1] = v245;
              uint64_t v241 = 8;
              v248[2] = v245;
              v248[3] = v245;
            }
            else if (v87[5])
            {
              uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v239, v40, v238, v240);
            }
            else
            {
              uint64_t v241 = 0;
              v88[14] = 0u;
              v88[15] = 0u;
              _OWORD *v239 = 0u;
              v88[13] = 0u;
              int v242 = (_OWORD *)((char *)v239 + v40);
              v242[2] = 0u;
              v242[3] = 0u;
              *int v242 = 0u;
              v242[1] = 0u;
              unsigned int v243 = (_OWORD *)((char *)v239 + v91);
              v243[2] = 0u;
              v243[3] = 0u;
              *unsigned int v243 = 0u;
              v243[1] = 0u;
              unsigned int v244 = (_OWORD *)((char *)v239 + v490);
              v244[2] = 0u;
              v244[3] = 0u;
              *unsigned int v244 = 0u;
              v244[1] = 0u;
            }
            uint64_t v267 = v238 + v241;
            int64x2_t v268 = (_OWORD *)v152[8].f64;
            unsigned int v269 = v87[6];
            if (v269 == 255)
            {
              float64x2_t v278 = *(float64x2_t *)(v267 + 16);
              long long v279 = *(_OWORD *)(v267 + 32);
              long long v280 = *(_OWORD *)(v267 + 48);
              long long v281 = *(_OWORD *)(v267 + 128);
              long long v282 = *(_OWORD *)(v267 + 144);
              long long v283 = *(_OWORD *)(v267 + 96);
              long long v284 = *(_OWORD *)(v267 + 192);
              long long v285 = *(_OWORD *)(v267 + 208);
              long long v286 = *(_OWORD *)(v267 + 240);
              long long v287 = *(_OWORD *)(v267 + 112);
              float64x2_t v288 = *(float64x2_t *)(v267 + 64);
              float64x2_t v289 = *(float64x2_t *)(v267 + 80);
              long long v290 = *(_OWORD *)(v267 + 160);
              long long v291 = *(_OWORD *)(v267 + 176);
              long long v292 = *(_OWORD *)(v267 + 224);
              *int64x2_t v268 = *(_OWORD *)v267;
              v152[9] = v278;
              v152[10] = v288;
              v152[11] = v289;
              int32x4_t v293 = (_OWORD *)((char *)v268 + v91);
              int32x4_t v294 = (_OWORD *)((char *)v268 + v40);
              *int32x4_t v294 = v279;
              v294[1] = v280;
              v294[2] = v283;
              v294[3] = v287;
              *int32x4_t v293 = v281;
              v293[1] = v282;
              v293[2] = v284;
              v293[3] = v285;
              int32x4_t v295 = (_OWORD *)((char *)v268 + v91 + v40);
              uint64_t v270 = 256;
              *int32x4_t v295 = v290;
              v295[1] = v291;
              v295[2] = v292;
              v295[3] = v286;
            }
            else if (v269 == 7)
            {
              float64x2_t v274 = vld1q_dup_f64((const double *)v267);
              v152[8] = v274;
              v152[9] = v274;
              v152[10] = v274;
              v152[11] = v274;
              int64x2_t v275 = (float64x2_t *)((char *)v268 + v40);
              *int64x2_t v275 = v274;
              v275[1] = v274;
              v275[2] = v274;
              v275[3] = v274;
              int64x2_t v276 = (float64x2_t *)((char *)v268 + v91);
              *int64x2_t v276 = v274;
              v276[1] = v274;
              v276[2] = v274;
              v276[3] = v274;
              int64x2_t v277 = (float64x2_t *)((char *)v268 + v490);
              *int64x2_t v277 = v274;
              v277[1] = v274;
              uint64_t v270 = 8;
              v277[2] = v274;
              v277[3] = v274;
            }
            else if (v87[6])
            {
              uint64_t v270 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v268, v40, v238 + v241, v269);
            }
            else
            {
              uint64_t v270 = 0;
              v152[10] = 0u;
              v152[11] = 0u;
              *int64x2_t v268 = 0u;
              v152[9] = 0u;
              int64x2_t v271 = (_OWORD *)((char *)v268 + v40);
              v271[2] = 0u;
              v271[3] = 0u;
              *int64x2_t v271 = 0u;
              v271[1] = 0u;
              int64x2_t v272 = (_OWORD *)((char *)v268 + v91);
              v272[2] = 0u;
              v272[3] = 0u;
              *int64x2_t v272 = 0u;
              v272[1] = 0u;
              int64x2_t v273 = (_OWORD *)((char *)v268 + v490);
              v273[2] = 0u;
              v273[3] = 0u;
              *int64x2_t v273 = 0u;
              v273[1] = 0u;
            }
            uint64_t v296 = v267 + v270;
            int32x4_t v297 = (_OWORD *)v152[12].f64;
            unsigned int v298 = v87[7];
            if (v298 == 255)
            {
              float64x2_t v306 = *(float64x2_t *)(v296 + 16);
              long long v307 = *(_OWORD *)(v296 + 32);
              long long v308 = *(_OWORD *)(v296 + 48);
              long long v309 = *(_OWORD *)(v296 + 96);
              long long v310 = *(_OWORD *)(v296 + 112);
              float64x2_t v311 = *(float64x2_t *)(v296 + 64);
              float64x2_t v312 = *(float64x2_t *)(v296 + 80);
              long long v313 = *(_OWORD *)(v296 + 128);
              long long v314 = *(_OWORD *)(v296 + 144);
              long long v315 = *(_OWORD *)(v296 + 192);
              long long v316 = *(_OWORD *)(v296 + 208);
              long long v317 = *(_OWORD *)(v296 + 224);
              long long v318 = *(_OWORD *)(v296 + 240);
              long long v319 = *(_OWORD *)(v296 + 160);
              long long v320 = *(_OWORD *)(v296 + 176);
              *int32x4_t v297 = *(_OWORD *)v296;
              v152[13] = v306;
              v152[14] = v311;
              v152[15] = v312;
              unsigned int v321 = (_OWORD *)((char *)v297 + v91);
              int v322 = (_OWORD *)((char *)v297 + v40);
              *int v322 = v307;
              v322[1] = v308;
              v322[2] = v309;
              v322[3] = v310;
              *unsigned int v321 = v313;
              v321[1] = v314;
              v321[2] = v315;
              v321[3] = v316;
              unsigned int v323 = (_OWORD *)((char *)v297 + v91 + v40);
              *unsigned int v323 = v319;
              v323[1] = v320;
              v323[2] = v317;
              v323[3] = v318;
              unsigned int v48 = v502;
              uint64_t v23 = v505;
            }
            else
            {
              unsigned int v48 = v502;
              uint64_t v23 = v505;
              if (v298 == 7)
              {
                float64x2_t v302 = vld1q_dup_f64((const double *)v296);
                v152[12] = v302;
                v152[13] = v302;
                v152[14] = v302;
                v152[15] = v302;
                uint64_t v303 = (float64x2_t *)((char *)v297 + v40);
                *uint64_t v303 = v302;
                v303[1] = v302;
                v303[2] = v302;
                v303[3] = v302;
                unsigned int v304 = (float64x2_t *)((char *)v297 + v91);
                *unsigned int v304 = v302;
                v304[1] = v302;
                v304[2] = v302;
                v304[3] = v302;
                uint64_t v305 = (float64x2_t *)((char *)v297 + v490);
                *uint64_t v305 = v302;
                v305[1] = v302;
                v305[2] = v302;
                v305[3] = v302;
              }
              else if (v298)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v297, v40, v296, v298);
              }
              else
              {
                v152[14] = 0u;
                v152[15] = 0u;
                *int32x4_t v297 = 0u;
                v152[13] = 0u;
                unint64_t v299 = (_OWORD *)((char *)v297 + v40);
                v299[2] = 0u;
                v299[3] = 0u;
                *unint64_t v299 = 0u;
                v299[1] = 0u;
                unsigned int v300 = (_OWORD *)((char *)v297 + v91);
                v300[2] = 0u;
                v300[3] = 0u;
                *unsigned int v300 = 0u;
                v300[1] = 0u;
                unsigned int v301 = (_OWORD *)((char *)v297 + v490);
                v301[2] = 0u;
                v301[3] = 0u;
                *unsigned int v301 = 0u;
                v301[1] = 0u;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v96 = v52 - v50;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v505;
          block[5] = v86;
          char v516 = v54;
          char v517 = v508;
          int v512 = v494;
          unsigned int v513 = v52 - v50;
          block[6] = v87;
          v510 = v88;
          uint64_t v40 = a11;
          uint64_t v511 = a11;
          int v514 = v504;
          unsigned int v515 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v505 + 8) + 7384), block);
            unsigned int v48 = v502;
            uint64_t v23 = v505;
LABEL_47:
            int v47 = v27 & v479;
            unsigned int v49 = v45 + 1;
            goto LABEL_48;
          }
          unsigned int v97 = v96;
          unsigned int v98 = *v87;
          if (v98 == 255)
          {
            float64x2_t v324 = v86[1];
            float64x2_t v325 = v86[2];
            float64x2_t v326 = v86[3];
            float64x2_t v327 = v86[6];
            float64x2_t v328 = v86[7];
            float64x2_t v329 = v86[8];
            float64x2_t v330 = v86[9];
            float64x2_t v331 = v86[11];
            float64x2_t v332 = v86[4];
            float64x2_t v333 = v86[12];
            float64x2_t v334 = v86[13];
            float64x2_t v335 = v86[14];
            float64x2_t v336 = v86[15];
            float64x2_t v337 = v86[5];
            float64x2_t v338 = v86[10];
            float64x2_t v519 = *v86;
            float64x2_t v520 = v324;
            float64x2_t v521 = v332;
            float64x2_t v522 = v337;
            float64x2_t v535 = v325;
            float64x2_t v536 = v326;
            float64x2_t v537 = v327;
            float64x2_t v538 = v328;
            float64x2_t v551 = v329;
            float64x2_t v552 = v330;
            float64x2_t v553 = v333;
            float64x2_t v554 = v334;
            uint64_t v99 = 256;
            float64x2_t v567 = v338;
            float64x2_t v568 = v331;
            float64x2_t v569 = v335;
            float64x2_t v570 = v336;
          }
          else if (v98 == 7)
          {
            float64x2_t v339 = vld1q_dup_f64(v86->f64);
            float64x2_t v519 = v339;
            float64x2_t v520 = v339;
            float64x2_t v521 = v339;
            float64x2_t v522 = v339;
            float64x2_t v535 = v339;
            float64x2_t v536 = v339;
            float64x2_t v537 = v339;
            float64x2_t v538 = v339;
            float64x2_t v551 = v339;
            float64x2_t v552 = v339;
            float64x2_t v553 = v339;
            float64x2_t v554 = v339;
            float64x2_t v567 = v339;
            float64x2_t v568 = v339;
            uint64_t v99 = 8;
            float64x2_t v569 = v339;
            float64x2_t v570 = v339;
          }
          else if (*v87)
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v519, 256, (uint64_t)v86, v98);
          }
          else
          {
            uint64_t v99 = 0;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v519 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
          }
          uint64_t v340 = (uint64_t)v86 + v99;
          unsigned int v341 = v87[1];
          if (v341 == 255)
          {
            float64x2_t v343 = *(float64x2_t *)(v340 + 16);
            float64x2_t v344 = *(float64x2_t *)(v340 + 32);
            float64x2_t v345 = *(float64x2_t *)(v340 + 48);
            float64x2_t v346 = *(float64x2_t *)(v340 + 96);
            float64x2_t v347 = *(float64x2_t *)(v340 + 112);
            float64x2_t v348 = *(float64x2_t *)(v340 + 128);
            float64x2_t v349 = *(float64x2_t *)(v340 + 144);
            float64x2_t v350 = *(float64x2_t *)(v340 + 176);
            float64x2_t v351 = *(float64x2_t *)(v340 + 64);
            float64x2_t v352 = *(float64x2_t *)(v340 + 192);
            float64x2_t v353 = *(float64x2_t *)(v340 + 208);
            float64x2_t v354 = *(float64x2_t *)(v340 + 224);
            float64x2_t v355 = *(float64x2_t *)(v340 + 240);
            float64x2_t v356 = *(float64x2_t *)(v340 + 80);
            float64x2_t v357 = *(float64x2_t *)(v340 + 160);
            float64x2_t v523 = *(float64x2_t *)v340;
            float64x2_t v524 = v343;
            float64x2_t v525 = v351;
            float64x2_t v526 = v356;
            float64x2_t v539 = v344;
            float64x2_t v540 = v345;
            float64x2_t v541 = v346;
            float64x2_t v542 = v347;
            float64x2_t v555 = v348;
            float64x2_t v556 = v349;
            float64x2_t v557 = v352;
            float64x2_t v558 = v353;
            uint64_t v342 = 256;
            float64x2_t v571 = v357;
            float64x2_t v572 = v350;
            float64x2_t v573 = v354;
            float64x2_t v574 = v355;
          }
          else if (v341 == 7)
          {
            float64x2_t v358 = vld1q_dup_f64((const double *)v340);
            float64x2_t v523 = v358;
            float64x2_t v524 = v358;
            float64x2_t v525 = v358;
            float64x2_t v526 = v358;
            float64x2_t v539 = v358;
            float64x2_t v540 = v358;
            float64x2_t v541 = v358;
            float64x2_t v542 = v358;
            float64x2_t v555 = v358;
            float64x2_t v556 = v358;
            float64x2_t v557 = v358;
            float64x2_t v558 = v358;
            float64x2_t v571 = v358;
            float64x2_t v572 = v358;
            uint64_t v342 = 8;
            float64x2_t v573 = v358;
            float64x2_t v574 = v358;
          }
          else if (v87[1])
          {
            uint64_t v342 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v523, 256, v340, v341);
          }
          else
          {
            uint64_t v342 = 0;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
          }
          uint64_t v359 = v340 + v342;
          unsigned int v360 = v87[2];
          if (v360 == 255)
          {
            float64x2_t v362 = *(float64x2_t *)(v359 + 16);
            float64x2_t v363 = *(float64x2_t *)(v359 + 32);
            float64x2_t v364 = *(float64x2_t *)(v359 + 48);
            float64x2_t v365 = *(float64x2_t *)(v359 + 96);
            float64x2_t v366 = *(float64x2_t *)(v359 + 112);
            float64x2_t v367 = *(float64x2_t *)(v359 + 128);
            float64x2_t v368 = *(float64x2_t *)(v359 + 144);
            float64x2_t v369 = *(float64x2_t *)(v359 + 176);
            float64x2_t v370 = *(float64x2_t *)(v359 + 64);
            float64x2_t v371 = *(float64x2_t *)(v359 + 192);
            float64x2_t v372 = *(float64x2_t *)(v359 + 208);
            float64x2_t v373 = *(float64x2_t *)(v359 + 224);
            float64x2_t v374 = *(float64x2_t *)(v359 + 240);
            float64x2_t v375 = *(float64x2_t *)(v359 + 80);
            float64x2_t v376 = *(float64x2_t *)(v359 + 160);
            float64x2_t v583 = *(float64x2_t *)v359;
            float64x2_t v584 = v362;
            float64x2_t v585 = v370;
            float64x2_t v586 = v375;
            float64x2_t v599 = v363;
            float64x2_t v600 = v364;
            float64x2_t v601 = v365;
            float64x2_t v602 = v366;
            float64x2_t v615 = v367;
            float64x2_t v616 = v368;
            float64x2_t v617 = v371;
            float64x2_t v618 = v372;
            uint64_t v361 = 256;
            float64x2_t v631 = v376;
            float64x2_t v632 = v369;
            float64x2_t v633 = v373;
            float64x2_t v634 = v374;
          }
          else if (v360 == 7)
          {
            float64x2_t v377 = vld1q_dup_f64((const double *)v359);
            float64x2_t v583 = v377;
            float64x2_t v584 = v377;
            float64x2_t v585 = v377;
            float64x2_t v586 = v377;
            float64x2_t v599 = v377;
            float64x2_t v600 = v377;
            float64x2_t v601 = v377;
            float64x2_t v602 = v377;
            float64x2_t v615 = v377;
            float64x2_t v616 = v377;
            float64x2_t v617 = v377;
            float64x2_t v618 = v377;
            float64x2_t v631 = v377;
            float64x2_t v632 = v377;
            float64x2_t v633 = v377;
            uint64_t v361 = 8;
            float64x2_t v634 = v377;
          }
          else if (v87[2])
          {
            uint64_t v361 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v583, 256, v359, v360);
          }
          else
          {
            uint64_t v361 = 0;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v583 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v615 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v618 = 0u;
            float64x2_t v631 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
          }
          uint64_t v378 = v359 + v361;
          unsigned int v379 = v87[3];
          if (v379 == 255)
          {
            float64x2_t v381 = *(float64x2_t *)(v378 + 16);
            float64x2_t v382 = *(float64x2_t *)(v378 + 32);
            float64x2_t v383 = *(float64x2_t *)(v378 + 48);
            float64x2_t v384 = *(float64x2_t *)(v378 + 96);
            float64x2_t v385 = *(float64x2_t *)(v378 + 112);
            float64x2_t v386 = *(float64x2_t *)(v378 + 128);
            float64x2_t v387 = *(float64x2_t *)(v378 + 144);
            float64x2_t v388 = *(float64x2_t *)(v378 + 176);
            float64x2_t v389 = *(float64x2_t *)(v378 + 64);
            float64x2_t v390 = *(float64x2_t *)(v378 + 192);
            float64x2_t v391 = *(float64x2_t *)(v378 + 208);
            float64x2_t v392 = *(float64x2_t *)(v378 + 224);
            float64x2_t v393 = *(float64x2_t *)(v378 + 240);
            float64x2_t v394 = *(float64x2_t *)(v378 + 80);
            float64x2_t v395 = *(float64x2_t *)(v378 + 160);
            float64x2_t v587 = *(float64x2_t *)v378;
            float64x2_t v588 = v381;
            float64x2_t v589 = v389;
            float64x2_t v590 = v394;
            float64x2_t v603 = v382;
            float64x2_t v604 = v383;
            float64x2_t v605 = v384;
            float64x2_t v606 = v385;
            float64x2_t v619 = v386;
            float64x2_t v620 = v387;
            float64x2_t v621 = v390;
            float64x2_t v622 = v391;
            uint64_t v380 = 256;
            float64x2_t v635 = v395;
            float64x2_t v636 = v388;
            float64x2_t v637 = v392;
            float64x2_t v638 = v393;
          }
          else if (v379 == 7)
          {
            float64x2_t v396 = vld1q_dup_f64((const double *)v378);
            float64x2_t v587 = v396;
            float64x2_t v588 = v396;
            float64x2_t v589 = v396;
            float64x2_t v590 = v396;
            float64x2_t v603 = v396;
            float64x2_t v604 = v396;
            float64x2_t v605 = v396;
            float64x2_t v606 = v396;
            float64x2_t v619 = v396;
            float64x2_t v620 = v396;
            float64x2_t v621 = v396;
            float64x2_t v622 = v396;
            float64x2_t v635 = v396;
            float64x2_t v636 = v396;
            float64x2_t v637 = v396;
            uint64_t v380 = 8;
            float64x2_t v638 = v396;
          }
          else if (v87[3])
          {
            uint64_t v380 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v587, 256, v378, v379);
          }
          else
          {
            uint64_t v380 = 0;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v620 = 0u;
            float64x2_t v621 = 0u;
            float64x2_t v622 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v636 = 0u;
            float64x2_t v637 = 0u;
            float64x2_t v638 = 0u;
          }
          uint64_t v397 = v378 + v380;
          unsigned int v398 = v87[4];
          if (v398 == 255)
          {
            float64x2_t v400 = *(float64x2_t *)(v397 + 16);
            float64x2_t v401 = *(float64x2_t *)(v397 + 32);
            float64x2_t v402 = *(float64x2_t *)(v397 + 48);
            float64x2_t v403 = *(float64x2_t *)(v397 + 96);
            float64x2_t v404 = *(float64x2_t *)(v397 + 112);
            float64x2_t v405 = *(float64x2_t *)(v397 + 128);
            float64x2_t v406 = *(float64x2_t *)(v397 + 144);
            float64x2_t v407 = *(float64x2_t *)(v397 + 176);
            float64x2_t v408 = *(float64x2_t *)(v397 + 64);
            float64x2_t v409 = *(float64x2_t *)(v397 + 192);
            float64x2_t v410 = *(float64x2_t *)(v397 + 208);
            float64x2_t v411 = *(float64x2_t *)(v397 + 224);
            float64x2_t v412 = *(float64x2_t *)(v397 + 240);
            float64x2_t v413 = *(float64x2_t *)(v397 + 80);
            float64x2_t v414 = *(float64x2_t *)(v397 + 160);
            float64x2_t v527 = *(float64x2_t *)v397;
            float64x2_t v528 = v400;
            float64x2_t v529 = v408;
            float64x2_t v530 = v413;
            float64x2_t v543 = v401;
            float64x2_t v544 = v402;
            float64x2_t v545 = v403;
            float64x2_t v546 = v404;
            float64x2_t v559 = v405;
            float64x2_t v560 = v406;
            float64x2_t v561 = v409;
            float64x2_t v562 = v410;
            uint64_t v399 = 256;
            float64x2_t v575 = v414;
            float64x2_t v576 = v407;
            float64x2_t v577 = v411;
            float64x2_t v578 = v412;
          }
          else if (v398 == 7)
          {
            float64x2_t v415 = vld1q_dup_f64((const double *)v397);
            float64x2_t v527 = v415;
            float64x2_t v528 = v415;
            float64x2_t v529 = v415;
            float64x2_t v530 = v415;
            float64x2_t v543 = v415;
            float64x2_t v544 = v415;
            float64x2_t v545 = v415;
            float64x2_t v546 = v415;
            float64x2_t v559 = v415;
            float64x2_t v560 = v415;
            float64x2_t v561 = v415;
            float64x2_t v562 = v415;
            float64x2_t v575 = v415;
            float64x2_t v576 = v415;
            uint64_t v399 = 8;
            float64x2_t v577 = v415;
            float64x2_t v578 = v415;
          }
          else if (v87[4])
          {
            uint64_t v399 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v527, 256, v397, v398);
          }
          else
          {
            uint64_t v399 = 0;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
          }
          uint64_t v416 = v397 + v399;
          unsigned int v417 = v87[5];
          if (v417 == 255)
          {
            float64x2_t v419 = *(float64x2_t *)(v416 + 16);
            float64x2_t v420 = *(float64x2_t *)(v416 + 32);
            float64x2_t v421 = *(float64x2_t *)(v416 + 48);
            float64x2_t v422 = *(float64x2_t *)(v416 + 96);
            float64x2_t v423 = *(float64x2_t *)(v416 + 112);
            float64x2_t v424 = *(float64x2_t *)(v416 + 128);
            float64x2_t v425 = *(float64x2_t *)(v416 + 144);
            float64x2_t v426 = *(float64x2_t *)(v416 + 176);
            float64x2_t v427 = *(float64x2_t *)(v416 + 64);
            float64x2_t v428 = *(float64x2_t *)(v416 + 192);
            float64x2_t v429 = *(float64x2_t *)(v416 + 208);
            float64x2_t v430 = *(float64x2_t *)(v416 + 224);
            float64x2_t v431 = *(float64x2_t *)(v416 + 240);
            float64x2_t v432 = *(float64x2_t *)(v416 + 80);
            float64x2_t v433 = *(float64x2_t *)(v416 + 160);
            float64x2_t v531 = *(float64x2_t *)v416;
            float64x2_t v532 = v419;
            float64x2_t v533 = v427;
            float64x2_t v534 = v432;
            float64x2_t v547 = v420;
            float64x2_t v548 = v421;
            float64x2_t v549 = v422;
            float64x2_t v550 = v423;
            float64x2_t v563 = v424;
            float64x2_t v564 = v425;
            float64x2_t v565 = v428;
            float64x2_t v566 = v429;
            uint64_t v418 = 256;
            float64x2_t v579 = v433;
            float64x2_t v580 = v426;
            float64x2_t v581 = v430;
            float64x2_t v582 = v431;
          }
          else if (v417 == 7)
          {
            float64x2_t v434 = vld1q_dup_f64((const double *)v416);
            float64x2_t v531 = v434;
            float64x2_t v532 = v434;
            float64x2_t v533 = v434;
            float64x2_t v534 = v434;
            float64x2_t v547 = v434;
            float64x2_t v548 = v434;
            float64x2_t v549 = v434;
            float64x2_t v550 = v434;
            float64x2_t v563 = v434;
            float64x2_t v564 = v434;
            float64x2_t v565 = v434;
            float64x2_t v566 = v434;
            float64x2_t v579 = v434;
            float64x2_t v580 = v434;
            uint64_t v418 = 8;
            float64x2_t v581 = v434;
            float64x2_t v582 = v434;
          }
          else if (v87[5])
          {
            uint64_t v418 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v531, 256, v416, v417);
          }
          else
          {
            uint64_t v418 = 0;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v579 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
          }
          uint64_t v435 = v416 + v418;
          unsigned int v436 = v87[6];
          if (v436 == 255)
          {
            float64x2_t v438 = *(float64x2_t *)(v435 + 16);
            float64x2_t v439 = *(float64x2_t *)(v435 + 32);
            float64x2_t v440 = *(float64x2_t *)(v435 + 48);
            float64x2_t v441 = *(float64x2_t *)(v435 + 96);
            float64x2_t v442 = *(float64x2_t *)(v435 + 112);
            float64x2_t v443 = *(float64x2_t *)(v435 + 128);
            float64x2_t v444 = *(float64x2_t *)(v435 + 144);
            float64x2_t v445 = *(float64x2_t *)(v435 + 176);
            float64x2_t v446 = *(float64x2_t *)(v435 + 64);
            float64x2_t v447 = *(float64x2_t *)(v435 + 192);
            float64x2_t v448 = *(float64x2_t *)(v435 + 208);
            float64x2_t v449 = *(float64x2_t *)(v435 + 224);
            float64x2_t v450 = *(float64x2_t *)(v435 + 240);
            float64x2_t v451 = *(float64x2_t *)(v435 + 80);
            float64x2_t v452 = *(float64x2_t *)(v435 + 160);
            float64x2_t v591 = *(float64x2_t *)v435;
            float64x2_t v592 = v438;
            float64x2_t v593 = v446;
            float64x2_t v594 = v451;
            float64x2_t v607 = v439;
            float64x2_t v608 = v440;
            float64x2_t v609 = v441;
            float64x2_t v610 = v442;
            float64x2_t v623 = v443;
            float64x2_t v624 = v444;
            float64x2_t v625 = v447;
            float64x2_t v626 = v448;
            uint64_t v437 = 256;
            float64x2_t v639 = v452;
            float64x2_t v640 = v445;
            float64x2_t v641 = v449;
            float64x2_t v642 = v450;
          }
          else if (v436 == 7)
          {
            float64x2_t v453 = vld1q_dup_f64((const double *)v435);
            float64x2_t v591 = v453;
            float64x2_t v592 = v453;
            float64x2_t v593 = v453;
            float64x2_t v594 = v453;
            float64x2_t v607 = v453;
            float64x2_t v608 = v453;
            float64x2_t v609 = v453;
            float64x2_t v610 = v453;
            float64x2_t v623 = v453;
            float64x2_t v624 = v453;
            float64x2_t v625 = v453;
            float64x2_t v626 = v453;
            float64x2_t v639 = v453;
            float64x2_t v640 = v453;
            float64x2_t v641 = v453;
            uint64_t v437 = 8;
            float64x2_t v642 = v453;
          }
          else if (v87[6])
          {
            uint64_t v437 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v591, 256, v435, v436);
          }
          else
          {
            uint64_t v437 = 0;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v623 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v639 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
          }
          uint64_t v454 = v435 + v437;
          unsigned int v455 = v87[7];
          if (v455 == 255)
          {
            float64x2_t v458 = *(float64x2_t *)(v454 + 16);
            float64x2_t v459 = *(float64x2_t *)(v454 + 32);
            float64x2_t v460 = *(float64x2_t *)(v454 + 48);
            float64x2_t v461 = *(float64x2_t *)(v454 + 96);
            float64x2_t v462 = *(float64x2_t *)(v454 + 112);
            float64x2_t v463 = *(float64x2_t *)(v454 + 64);
            float64x2_t v464 = *(float64x2_t *)(v454 + 128);
            float64x2_t v465 = *(float64x2_t *)(v454 + 144);
            float64x2_t v466 = *(float64x2_t *)(v454 + 80);
            float64x2_t v467 = *(float64x2_t *)(v454 + 192);
            float64x2_t v468 = *(float64x2_t *)(v454 + 208);
            float64x2_t v469 = *(float64x2_t *)(v454 + 224);
            float64x2_t v470 = *(float64x2_t *)(v454 + 240);
            float64x2_t v471 = *(float64x2_t *)(v454 + 160);
            float64x2_t v472 = *(float64x2_t *)(v454 + 176);
            float64x2_t v595 = *(float64x2_t *)v454;
            float64x2_t v596 = v458;
            float64x2_t v597 = v463;
            float64x2_t v598 = v466;
            float64x2_t v611 = v459;
            float64x2_t v612 = v460;
            float64x2_t v613 = v461;
            float64x2_t v614 = v462;
            float64x2_t v627 = v464;
            float64x2_t v628 = v465;
            float64x2_t v629 = v467;
            float64x2_t v630 = v468;
            unsigned int v456 = v504;
            unsigned int v457 = v494;
            float64x2_t v643 = v471;
            float64x2_t v644 = v472;
            float64x2_t v645 = v469;
            float64x2_t v646 = v470;
            unsigned int v48 = v502;
            uint64_t v23 = v505;
          }
          else
          {
            unsigned int v48 = v502;
            uint64_t v23 = v505;
            if (v455 == 7)
            {
              float64x2_t v473 = vld1q_dup_f64((const double *)v454);
              float64x2_t v595 = v473;
              float64x2_t v596 = v473;
              float64x2_t v597 = v473;
              float64x2_t v598 = v473;
              float64x2_t v611 = v473;
              float64x2_t v612 = v473;
              float64x2_t v613 = v473;
              float64x2_t v614 = v473;
              float64x2_t v627 = v473;
              float64x2_t v628 = v473;
              float64x2_t v629 = v473;
              float64x2_t v630 = v473;
              float64x2_t v643 = v473;
              float64x2_t v644 = v473;
              float64x2_t v645 = v473;
              unsigned int v456 = v504;
              unsigned int v457 = v494;
              float64x2_t v646 = v473;
            }
            else if (v455)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v595, 256, v454, v455);
              unsigned int v457 = v512;
              unsigned int v97 = v513;
              unsigned int v456 = v514;
            }
            else
            {
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v611 = 0u;
              float64x2_t v612 = 0u;
              float64x2_t v613 = 0u;
              float64x2_t v614 = 0u;
              float64x2_t v627 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v643 = 0u;
              float64x2_t v644 = 0u;
              unsigned int v456 = v504;
              unsigned int v457 = v494;
              float64x2_t v645 = 0u;
              float64x2_t v646 = 0u;
            }
          }
          int v47 = v27 & v479;
          unsigned int v49 = v45 + 1;
          if (v456)
          {
            unint64_t v474 = 0;
            v475 = (_OWORD *)&v519.f64[32 * (unint64_t)v457 + 2 * v97];
            unsigned int v476 = v515;
            do
            {
              if (v476)
              {
                uint64_t v477 = 0;
                v478 = (char *)v510 + v511 * v474;
                do
                {
                  v478[v477] = *((unsigned char *)v475 + v477);
                  ++v477;
                  unsigned int v476 = v515;
                }
                while (16 * (unint64_t)v515 > v477);
                unsigned int v456 = v514;
              }
              ++v474;
              v475 += 16;
            }
            while (v474 < v456);
          }
LABEL_48:
          BOOL v28 = v45 == v496 >> 4;
          unsigned int v45 = v49;
        }
        while (!v28);
        BOOL v28 = v27++ == v484;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v499 = v21;
  uint64_t v500 = v22;
  uint64_t v485 = v23;
  uint64_t v24 = v12;
  uint64_t v647 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v503 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v484 = v14 + a10 - 1;
  unsigned int v486 = v484 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v498 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v486)
  {
    unsigned int v496 = v16 + a9 - 1;
    unsigned int v483 = v16 >> 4;
    if (v16 >> 4 <= v496 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v480 = v20 - 1;
      unsigned int v507 = (v20 - 1) >> 4;
      int v506 = ((v20 - 1) & 0xF) + 1;
      int v481 = ((v18 - 1) & 7) + 1;
      unsigned int v482 = (v18 - 1) >> 3;
      uint64_t v489 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v494 = v35.i32[0] | v35.i32[1];
      int8x8_t v492 = v35;
      BOOL v491 = v35.i32[0] != 0;
      BOOL v490 = v35.i32[1] != 0;
      unint64_t v479 = 8 * v27 * (unint64_t)v26;
      unsigned int v495 = v16;
      uint64_t v505 = v24;
      uint64_t v487 = 3 * a11;
      uint64_t v488 = 2 * a11;
      do
      {
        unsigned int v36 = (8 * v25) | 7;
        if (8 * v25 <= v503) {
          int v37 = v503;
        }
        else {
          int v37 = 8 * v25;
        }
        unsigned int v38 = v483;
        if (v484 < v36) {
          unsigned int v36 = v484;
        }
        unsigned int v502 = 8 * v25;
        int v493 = v37 - 8 * v25;
        int v504 = v36 - v37 + 1;
        int v39 = v481;
        if (v25 != v482) {
          int v39 = 8;
        }
        unsigned int v508 = v39;
        uint64_t v501 = v485 + (v37 - v503) * v33;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v496 < v42) {
            unsigned int v42 = v496;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v507) {
            unsigned int v45 = v506;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v502 >= v503 && v41 >= v16)
          {
            int v47 = v506;
            if (v38 != v507) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v504 != v508;
          }
          if (isLevelTiled)
          {
            unsigned int v463 = 0;
            uint64_t v464 = v479 >> (*(unsigned char *)(v24 + 57) != 0);
            char v465 = 1;
            if (v464 > 127)
            {
              if (v464 > 511)
              {
                if (v464 == 512)
                {
                  char v466 = 0;
                  unsigned int v463 = 16;
                  unsigned int v467 = 16;
                }
                else
                {
                  char v466 = 1;
                  unsigned int v467 = 0;
                  if (v464 == 1024)
                  {
                    unsigned int v467 = 8;
                    unsigned int v463 = 16;
                  }
                }
              }
              else if (v464 == 128)
              {
                char v465 = 0;
                char v466 = 0;
                unsigned int v463 = 32;
                unsigned int v467 = 32;
              }
              else
              {
                char v466 = 1;
                unsigned int v467 = 0;
                if (v464 == 256)
                {
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 16;
                  unsigned int v463 = 32;
                }
              }
            }
            else
            {
              char v466 = 1;
              unsigned int v467 = 0;
              switch(v464)
              {
                case 4:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 128;
                  unsigned int v463 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 128;
                  unsigned int v467 = 128;
                  break;
                case 16:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 64;
                  unsigned int v463 = 128;
                  break;
                case 32:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 64;
                  unsigned int v467 = 64;
                  break;
                default:
                  if (v464 == 64)
                  {
                    char v465 = 0;
                    char v466 = 0;
                    unsigned int v467 = 32;
                    unsigned int v463 = 64;
                  }
                  break;
              }
            }
            unsigned int v468 = (v463 >> 4) - 1;
            if (v465) {
              unsigned int v469 = 0;
            }
            else {
              unsigned int v469 = 32 - __clz(~(-1 << -(char)__clz(v468)));
            }
            unsigned int v470 = (v467 >> 3) - 1;
            if (v466)
            {
              unsigned int v471 = 0;
              if (v469) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v471 = 32 - __clz(~(-1 << -(char)__clz(v470)));
              if (v471 | v469)
              {
LABEL_233:
                int v472 = 0;
                uint64_t v473 = 0;
                int v474 = v38 & v468;
                int v475 = v25 & v470;
                BOOL v476 = v471 != 0;
                BOOL v477 = v469 != 0;
                int v478 = 1;
                do
                {
                  --v471;
                  if (v476) {
                    v473 |= (unint64_t)(v478 & v475) << v472++;
                  }
                  else {
                    unsigned int v471 = 0;
                  }
                  --v469;
                  if (v477) {
                    v473 |= (unint64_t)(v478 & v474) << v472++;
                  }
                  else {
                    unsigned int v469 = 0;
                  }
                  v478 *= 2;
                  --v472;
                  BOOL v477 = v469 != 0;
                  BOOL v476 = v471 != 0;
                }
                while (v469 | v471);
                goto LABEL_245;
              }
            }
            uint64_t v473 = 0;
LABEL_245:
            unint64_t v56 = ((unint64_t)(v41 / v463 + v502 / v467 * ((v463 + v480) / v463)) << 14) + (v473 << 11);
            goto LABEL_60;
          }
          if (v494)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v491;
            BOOL v53 = v490;
            __int32 v54 = v492.i32[0];
            __int32 v55 = v492.i32[1];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v499 + v56);
          if (v498)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v500 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v501 + 16 * (v43 - v16));
          char v73 = v45 < 0x10 || v46;
          if ((v73 & 1) == 0 && v508 > 7)
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v88 = v70[1];
              float64x2_t v89 = v70[2];
              float64x2_t v90 = v70[3];
              float64x2_t v91 = v70[8];
              float64x2_t v92 = v70[9];
              float64x2_t v93 = v70[6];
              float64x2_t v94 = v70[12];
              float64x2_t v95 = v70[13];
              float64x2_t v96 = v70[15];
              float64x2_t v97 = v70[7];
              float64x2_t v98 = v70[4];
              float64x2_t v99 = v70[5];
              float64x2_t v100 = v70[10];
              float64x2_t v101 = v70[11];
              float64x2_t v102 = v70[14];
              uint64_t v75 = 2 * a11;
              *uint64_t v72 = *v70;
              v72[1] = v88;
              v72[2] = v98;
              v72[3] = v99;
              uint64_t v103 = (float64x2_t *)((char *)v72 + v488);
              uint64_t v33 = a11;
              float64x2_t v104 = (float64x2_t *)((char *)v72 + a11);
              *float64x2_t v104 = v89;
              v104[1] = v90;
              v104[2] = v93;
              v104[3] = v97;
              *uint64_t v103 = v91;
              v103[1] = v92;
              v103[2] = v94;
              v103[3] = v95;
              float64x2_t v105 = (float64x2_t *)((char *)v72 + v488 + a11);
              uint64_t v77 = 256;
              float64x2_t *v105 = v100;
              v105[1] = v101;
              v105[2] = v102;
              v105[3] = v96;
              uint64_t v76 = 3 * a11;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v76 = 3 * a11;
              uint64_t v75 = 2 * a11;
              if (v74 == 7)
              {
                float64x2_t v84 = vld1q_dup_f64(v70->f64);
                *uint64_t v72 = v84;
                v72[1] = v84;
                v72[2] = v84;
                v72[3] = v84;
                unint64_t v85 = (float64x2_t *)((char *)v72 + a11);
                float64x2_t *v85 = v84;
                v85[1] = v84;
                v85[2] = v84;
                v85[3] = v84;
                uint64_t v86 = (float64x2_t *)((char *)v72 + v488);
                float64x2_t *v86 = v84;
                v86[1] = v84;
                v86[2] = v84;
                v86[3] = v84;
                int8x8_t v87 = (float64x2_t *)((char *)v72 + v487);
                float64x2_t *v87 = v84;
                v87[1] = v84;
                v87[2] = v84;
                v87[3] = v84;
                uint64_t v77 = 8;
              }
              else if (*v71)
              {
                uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v77 = 0;
                v72[2] = 0u;
                v72[3] = 0u;
                *uint64_t v72 = 0u;
                v72[1] = 0u;
                unsigned int v78 = (_OWORD *)((char *)v72->f64 + a11);
                v78[2] = 0u;
                v78[3] = 0u;
                _OWORD *v78 = 0u;
                v78[1] = 0u;
                int v79 = (_OWORD *)((char *)v72->f64 + v488);
                v79[2] = 0u;
                v79[3] = 0u;
                *int v79 = 0u;
                v79[1] = 0u;
                unint64_t v80 = (_OWORD *)((char *)v72->f64 + v487);
                v80[2] = 0u;
                v80[3] = 0u;
                _OWORD *v80 = 0u;
                v80[1] = 0u;
              }
            }
            uint64_t v106 = (uint64_t)v70 + v77;
            f64 = (_OWORD *)v72[4].f64;
            unsigned int v108 = v71[1];
            if (v108 == 255)
            {
              float64x2_t v117 = *(float64x2_t *)(v106 + 16);
              long long v118 = *(_OWORD *)(v106 + 32);
              long long v119 = *(_OWORD *)(v106 + 48);
              long long v120 = *(_OWORD *)(v106 + 128);
              long long v121 = *(_OWORD *)(v106 + 144);
              long long v122 = *(_OWORD *)(v106 + 96);
              long long v123 = *(_OWORD *)(v106 + 192);
              long long v124 = *(_OWORD *)(v106 + 208);
              long long v125 = *(_OWORD *)(v106 + 240);
              long long v126 = *(_OWORD *)(v106 + 112);
              float64x2_t v127 = *(float64x2_t *)(v106 + 64);
              float64x2_t v128 = *(float64x2_t *)(v106 + 80);
              long long v129 = *(_OWORD *)(v106 + 160);
              long long v130 = *(_OWORD *)(v106 + 176);
              long long v131 = *(_OWORD *)(v106 + 224);
              _OWORD *f64 = *(_OWORD *)v106;
              v72[5] = v117;
              v72[6] = v127;
              v72[7] = v128;
              int64x2_t v132 = (_OWORD *)((char *)f64 + v75);
              float64x2_t v133 = (_OWORD *)((char *)f64 + v33);
              *float64x2_t v133 = v118;
              v133[1] = v119;
              v133[2] = v122;
              v133[3] = v126;
              _OWORD *v132 = v120;
              v132[1] = v121;
              v132[2] = v123;
              v132[3] = v124;
              long long v134 = (_OWORD *)((char *)f64 + v75 + v33);
              uint64_t v109 = 256;
              *long long v134 = v129;
              v134[1] = v130;
              v134[2] = v131;
              v134[3] = v125;
            }
            else if (v108 == 7)
            {
              float64x2_t v113 = vld1q_dup_f64((const double *)v106);
              v72[4] = v113;
              v72[5] = v113;
              v72[6] = v113;
              v72[7] = v113;
              float64x2_t v114 = (float64x2_t *)((char *)f64 + v33);
              *float64x2_t v114 = v113;
              v114[1] = v113;
              v114[2] = v113;
              v114[3] = v113;
              float64x2_t v115 = (float64x2_t *)((char *)f64 + v75);
              float64x2_t *v115 = v113;
              v115[1] = v113;
              v115[2] = v113;
              v115[3] = v113;
              float64x2_t v116 = (float64x2_t *)((char *)f64 + v76);
              float64x2_t *v116 = v113;
              v116[1] = v113;
              uint64_t v109 = 8;
              v116[2] = v113;
              v116[3] = v113;
            }
            else if (v71[1])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v33, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v72[6] = 0u;
              v72[7] = 0u;
              _OWORD *f64 = 0u;
              v72[5] = 0u;
              float64x2_t v110 = (_OWORD *)((char *)f64 + v33);
              v110[2] = 0u;
              v110[3] = 0u;
              _OWORD *v110 = 0u;
              v110[1] = 0u;
              float64x2_t v111 = (_OWORD *)((char *)f64 + v75);
              v111[2] = 0u;
              v111[3] = 0u;
              *float64x2_t v111 = 0u;
              v111[1] = 0u;
              float64x2_t v112 = (_OWORD *)((char *)f64 + v76);
              v112[2] = 0u;
              v112[3] = 0u;
              _OWORD *v112 = 0u;
              v112[1] = 0u;
            }
            uint64_t v135 = v106 + v109;
            long long v136 = (float64x2_t *)((char *)v72 + v489);
            unsigned int v137 = v71[2];
            if (v137 == 255)
            {
              float64x2_t v146 = *(float64x2_t *)(v135 + 16);
              long long v147 = *(_OWORD *)(v135 + 32);
              long long v148 = *(_OWORD *)(v135 + 48);
              long long v149 = *(_OWORD *)(v135 + 128);
              long long v150 = *(_OWORD *)(v135 + 144);
              long long v151 = *(_OWORD *)(v135 + 96);
              long long v152 = *(_OWORD *)(v135 + 192);
              long long v153 = *(_OWORD *)(v135 + 208);
              long long v154 = *(_OWORD *)(v135 + 240);
              long long v155 = *(_OWORD *)(v135 + 112);
              float64x2_t v156 = *(float64x2_t *)(v135 + 64);
              float64x2_t v157 = *(float64x2_t *)(v135 + 80);
              long long v158 = *(_OWORD *)(v135 + 160);
              long long v159 = *(_OWORD *)(v135 + 176);
              long long v160 = *(_OWORD *)(v135 + 224);
              float64x2_t *v136 = *(float64x2_t *)v135;
              v136[1] = v146;
              v136[2] = v156;
              v136[3] = v157;
              unsigned int v161 = (_OWORD *)((char *)v136->f64 + v75);
              float64x2_t v162 = (_OWORD *)((char *)v136->f64 + v33);
              *float64x2_t v162 = v147;
              v162[1] = v148;
              v162[2] = v151;
              v162[3] = v155;
              *unsigned int v161 = v149;
              v161[1] = v150;
              v161[2] = v152;
              v161[3] = v153;
              long long v163 = (_OWORD *)((char *)v136->f64 + v75 + v33);
              uint64_t v138 = 256;
              _OWORD *v163 = v158;
              v163[1] = v159;
              v163[2] = v160;
              v163[3] = v154;
            }
            else if (v137 == 7)
            {
              float64x2_t v142 = vld1q_dup_f64((const double *)v135);
              float64x2_t *v136 = v142;
              v136[1] = v142;
              v136[2] = v142;
              v136[3] = v142;
              float64x2_t v143 = (float64x2_t *)((char *)v136 + v33);
              *float64x2_t v143 = v142;
              v143[1] = v142;
              v143[2] = v142;
              v143[3] = v142;
              float64x2_t v144 = (float64x2_t *)((char *)v136 + v75);
              *float64x2_t v144 = v142;
              v144[1] = v142;
              v144[2] = v142;
              v144[3] = v142;
              long long v145 = (float64x2_t *)((char *)v136 + v76);
              float64x2_t *v145 = v142;
              v145[1] = v142;
              v145[2] = v142;
              v145[3] = v142;
              uint64_t v138 = 8;
            }
            else if (v71[2])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v489, v33, v135, v137);
            }
            else
            {
              uint64_t v138 = 0;
              v136[2] = 0u;
              v136[3] = 0u;
              float64x2_t *v136 = 0u;
              v136[1] = 0u;
              long long v139 = (_OWORD *)((char *)v136->f64 + v33);
              v139[2] = 0u;
              v139[3] = 0u;
              *long long v139 = 0u;
              v139[1] = 0u;
              long long v140 = (_OWORD *)((char *)v136->f64 + v75);
              v140[2] = 0u;
              v140[3] = 0u;
              _OWORD *v140 = 0u;
              v140[1] = 0u;
              long long v141 = (_OWORD *)((char *)v136->f64 + v76);
              v141[2] = 0u;
              v141[3] = 0u;
              *long long v141 = 0u;
              v141[1] = 0u;
            }
            uint64_t v164 = v135 + v138;
            long long v165 = (_OWORD *)v136[4].f64;
            unsigned int v166 = v71[3];
            if (v166 == 255)
            {
              float64x2_t v175 = *(float64x2_t *)(v164 + 16);
              long long v176 = *(_OWORD *)(v164 + 32);
              long long v177 = *(_OWORD *)(v164 + 48);
              long long v178 = *(_OWORD *)(v164 + 128);
              long long v179 = *(_OWORD *)(v164 + 144);
              long long v180 = *(_OWORD *)(v164 + 96);
              long long v181 = *(_OWORD *)(v164 + 192);
              long long v182 = *(_OWORD *)(v164 + 208);
              long long v183 = *(_OWORD *)(v164 + 240);
              long long v184 = *(_OWORD *)(v164 + 112);
              float64x2_t v185 = *(float64x2_t *)(v164 + 64);
              float64x2_t v186 = *(float64x2_t *)(v164 + 80);
              long long v187 = *(_OWORD *)(v164 + 160);
              long long v188 = *(_OWORD *)(v164 + 176);
              long long v189 = *(_OWORD *)(v164 + 224);
              *long long v165 = *(_OWORD *)v164;
              v136[5] = v175;
              v136[6] = v185;
              v136[7] = v186;
              uint64_t v190 = (_OWORD *)((char *)v165 + v75);
              float64x2_t v191 = (_OWORD *)((char *)v165 + v33);
              *float64x2_t v191 = v176;
              v191[1] = v177;
              v191[2] = v180;
              v191[3] = v184;
              *uint64_t v190 = v178;
              v190[1] = v179;
              v190[2] = v181;
              v190[3] = v182;
              long long v192 = (_OWORD *)((char *)v165 + v75 + v33);
              uint64_t v167 = 256;
              *long long v192 = v187;
              v192[1] = v188;
              v192[2] = v189;
              v192[3] = v183;
            }
            else if (v166 == 7)
            {
              float64x2_t v171 = vld1q_dup_f64((const double *)v164);
              v136[4] = v171;
              v136[5] = v171;
              v136[6] = v171;
              v136[7] = v171;
              float64x2_t v172 = (float64x2_t *)((char *)v165 + v33);
              *float64x2_t v172 = v171;
              v172[1] = v171;
              v172[2] = v171;
              v172[3] = v171;
              float64x2_t v173 = (float64x2_t *)((char *)v165 + v75);
              *float64x2_t v173 = v171;
              v173[1] = v171;
              v173[2] = v171;
              v173[3] = v171;
              long long v174 = (float64x2_t *)((char *)v165 + v76);
              *long long v174 = v171;
              v174[1] = v171;
              uint64_t v167 = 8;
              v174[2] = v171;
              v174[3] = v171;
            }
            else if (v71[3])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v165, v33, v164, v166);
            }
            else
            {
              uint64_t v167 = 0;
              v136[6] = 0u;
              v136[7] = 0u;
              *long long v165 = 0u;
              v136[5] = 0u;
              long long v168 = (_OWORD *)((char *)v165 + v33);
              v168[2] = 0u;
              v168[3] = 0u;
              *long long v168 = 0u;
              v168[1] = 0u;
              long long v169 = (_OWORD *)((char *)v165 + v75);
              v169[2] = 0u;
              v169[3] = 0u;
              *long long v169 = 0u;
              v169[1] = 0u;
              long long v170 = (_OWORD *)((char *)v165 + v76);
              v170[2] = 0u;
              v170[3] = 0u;
              *long long v170 = 0u;
              v170[1] = 0u;
            }
            uint64_t v193 = v164 + v167;
            long long v194 = (_OWORD *)v72[8].f64;
            unsigned int v195 = v71[4];
            if (v195 == 255)
            {
              float64x2_t v204 = *(float64x2_t *)(v193 + 16);
              long long v205 = *(_OWORD *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 128);
              long long v208 = *(_OWORD *)(v193 + 144);
              long long v209 = *(_OWORD *)(v193 + 96);
              long long v210 = *(_OWORD *)(v193 + 192);
              long long v211 = *(_OWORD *)(v193 + 208);
              long long v212 = *(_OWORD *)(v193 + 240);
              long long v213 = *(_OWORD *)(v193 + 112);
              float64x2_t v214 = *(float64x2_t *)(v193 + 64);
              float64x2_t v215 = *(float64x2_t *)(v193 + 80);
              long long v216 = *(_OWORD *)(v193 + 160);
              long long v217 = *(_OWORD *)(v193 + 176);
              long long v218 = *(_OWORD *)(v193 + 224);
              *long long v194 = *(_OWORD *)v193;
              v72[9] = v204;
              v72[10] = v214;
              v72[11] = v215;
              unsigned int v219 = (_OWORD *)((char *)v194 + v75);
              float64x2_t v220 = (_OWORD *)((char *)v194 + v33);
              _OWORD *v220 = v205;
              v220[1] = v206;
              v220[2] = v209;
              v220[3] = v213;
              *unsigned int v219 = v207;
              v219[1] = v208;
              v219[2] = v210;
              v219[3] = v211;
              long long v221 = (_OWORD *)((char *)v194 + v75 + v33);
              uint64_t v196 = 256;
              _OWORD *v221 = v216;
              v221[1] = v217;
              v221[2] = v218;
              v221[3] = v212;
            }
            else if (v195 == 7)
            {
              float64x2_t v200 = vld1q_dup_f64((const double *)v193);
              v72[8] = v200;
              v72[9] = v200;
              v72[10] = v200;
              v72[11] = v200;
              float64x2_t v201 = (float64x2_t *)((char *)v194 + v33);
              *float64x2_t v201 = v200;
              v201[1] = v200;
              v201[2] = v200;
              v201[3] = v200;
              float64x2_t v202 = (float64x2_t *)((char *)v194 + v75);
              *float64x2_t v202 = v200;
              v202[1] = v200;
              v202[2] = v200;
              v202[3] = v200;
              long long v203 = (float64x2_t *)((char *)v194 + v76);
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 8;
              v203[2] = v200;
              v203[3] = v200;
            }
            else if (v71[4])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v194, v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v72[10] = 0u;
              v72[11] = 0u;
              *long long v194 = 0u;
              v72[9] = 0u;
              long long v197 = (_OWORD *)((char *)v194 + v33);
              v197[2] = 0u;
              v197[3] = 0u;
              *long long v197 = 0u;
              v197[1] = 0u;
              long long v198 = (_OWORD *)((char *)v194 + v75);
              v198[2] = 0u;
              v198[3] = 0u;
              *long long v198 = 0u;
              v198[1] = 0u;
              long long v199 = (_OWORD *)((char *)v194 + v76);
              v199[2] = 0u;
              v199[3] = 0u;
              *long long v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v222 = v193 + v196;
            long long v223 = (_OWORD *)v72[12].f64;
            unsigned int v224 = v71[5];
            if (v224 == 255)
            {
              float64x2_t v233 = *(float64x2_t *)(v222 + 16);
              long long v234 = *(_OWORD *)(v222 + 32);
              long long v235 = *(_OWORD *)(v222 + 48);
              long long v236 = *(_OWORD *)(v222 + 128);
              long long v237 = *(_OWORD *)(v222 + 144);
              long long v238 = *(_OWORD *)(v222 + 96);
              long long v239 = *(_OWORD *)(v222 + 192);
              long long v240 = *(_OWORD *)(v222 + 208);
              long long v241 = *(_OWORD *)(v222 + 240);
              long long v242 = *(_OWORD *)(v222 + 112);
              float64x2_t v243 = *(float64x2_t *)(v222 + 64);
              float64x2_t v244 = *(float64x2_t *)(v222 + 80);
              long long v245 = *(_OWORD *)(v222 + 160);
              long long v246 = *(_OWORD *)(v222 + 176);
              long long v247 = *(_OWORD *)(v222 + 224);
              *long long v223 = *(_OWORD *)v222;
              v72[13] = v233;
              v72[14] = v243;
              v72[15] = v244;
              unsigned int v248 = (_OWORD *)((char *)v223 + v75);
              float64x2_t v249 = (_OWORD *)((char *)v223 + v33);
              *float64x2_t v249 = v234;
              v249[1] = v235;
              v249[2] = v238;
              v249[3] = v242;
              *unsigned int v248 = v236;
              v248[1] = v237;
              v248[2] = v239;
              v248[3] = v240;
              long long v250 = (_OWORD *)((char *)v223 + v75 + v33);
              uint64_t v225 = 256;
              *long long v250 = v245;
              v250[1] = v246;
              v250[2] = v247;
              v250[3] = v241;
            }
            else if (v224 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v222);
              v72[12] = v229;
              v72[13] = v229;
              v72[14] = v229;
              v72[15] = v229;
              float64x2_t v230 = (float64x2_t *)((char *)v223 + v33);
              float64x2_t *v230 = v229;
              v230[1] = v229;
              v230[2] = v229;
              v230[3] = v229;
              float64x2_t v231 = (float64x2_t *)((char *)v223 + v75);
              float64x2_t *v231 = v229;
              v231[1] = v229;
              v231[2] = v229;
              v231[3] = v229;
              long long v232 = (float64x2_t *)((char *)v223 + v76);
              *long long v232 = v229;
              v232[1] = v229;
              uint64_t v225 = 8;
              v232[2] = v229;
              v232[3] = v229;
            }
            else if (v71[5])
            {
              uint64_t v225 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v223, v33, v222, v224);
            }
            else
            {
              uint64_t v225 = 0;
              v72[14] = 0u;
              v72[15] = 0u;
              *long long v223 = 0u;
              v72[13] = 0u;
              long long v226 = (_OWORD *)((char *)v223 + v33);
              v226[2] = 0u;
              v226[3] = 0u;
              *long long v226 = 0u;
              v226[1] = 0u;
              long long v227 = (_OWORD *)((char *)v223 + v75);
              v227[2] = 0u;
              v227[3] = 0u;
              *long long v227 = 0u;
              v227[1] = 0u;
              long long v228 = (_OWORD *)((char *)v223 + v76);
              v228[2] = 0u;
              v228[3] = 0u;
              *long long v228 = 0u;
              v228[1] = 0u;
            }
            unsigned int v16 = v495;
            uint64_t v251 = v222 + v225;
            long long v252 = (_OWORD *)v136[8].f64;
            unsigned int v253 = v71[6];
            if (v253 == 255)
            {
              float64x2_t v262 = *(float64x2_t *)(v251 + 16);
              long long v263 = *(_OWORD *)(v251 + 32);
              long long v264 = *(_OWORD *)(v251 + 48);
              long long v265 = *(_OWORD *)(v251 + 128);
              long long v266 = *(_OWORD *)(v251 + 144);
              long long v267 = *(_OWORD *)(v251 + 96);
              long long v268 = *(_OWORD *)(v251 + 192);
              long long v269 = *(_OWORD *)(v251 + 208);
              long long v270 = *(_OWORD *)(v251 + 240);
              long long v271 = *(_OWORD *)(v251 + 112);
              float64x2_t v272 = *(float64x2_t *)(v251 + 64);
              float64x2_t v273 = *(float64x2_t *)(v251 + 80);
              long long v274 = *(_OWORD *)(v251 + 160);
              long long v275 = *(_OWORD *)(v251 + 176);
              long long v276 = *(_OWORD *)(v251 + 224);
              *long long v252 = *(_OWORD *)v251;
              v136[9] = v262;
              v136[10] = v272;
              v136[11] = v273;
              int64x2_t v277 = (_OWORD *)((char *)v252 + v75);
              float64x2_t v278 = (_OWORD *)((char *)v252 + v33);
              *float64x2_t v278 = v263;
              v278[1] = v264;
              v278[2] = v267;
              v278[3] = v271;
              *int64x2_t v277 = v265;
              v277[1] = v266;
              v277[2] = v268;
              v277[3] = v269;
              long long v279 = (_OWORD *)((char *)v252 + v75 + v33);
              uint64_t v254 = 256;
              *long long v279 = v274;
              v279[1] = v275;
              v279[2] = v276;
              v279[3] = v270;
            }
            else if (v253 == 7)
            {
              float64x2_t v258 = vld1q_dup_f64((const double *)v251);
              v136[8] = v258;
              v136[9] = v258;
              v136[10] = v258;
              v136[11] = v258;
              float64x2_t v259 = (float64x2_t *)((char *)v252 + v33);
              *float64x2_t v259 = v258;
              v259[1] = v258;
              v259[2] = v258;
              v259[3] = v258;
              float64x2_t v260 = (float64x2_t *)((char *)v252 + v75);
              *float64x2_t v260 = v258;
              v260[1] = v258;
              v260[2] = v258;
              v260[3] = v258;
              long long v261 = (float64x2_t *)((char *)v252 + v76);
              *long long v261 = v258;
              v261[1] = v258;
              uint64_t v254 = 8;
              v261[2] = v258;
              v261[3] = v258;
            }
            else if (v71[6])
            {
              uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v252, v33, v251, v253);
            }
            else
            {
              uint64_t v254 = 0;
              v136[10] = 0u;
              v136[11] = 0u;
              *long long v252 = 0u;
              v136[9] = 0u;
              long long v255 = (_OWORD *)((char *)v252 + v33);
              v255[2] = 0u;
              v255[3] = 0u;
              *long long v255 = 0u;
              v255[1] = 0u;
              long long v256 = (_OWORD *)((char *)v252 + v75);
              v256[2] = 0u;
              v256[3] = 0u;
              *long long v256 = 0u;
              v256[1] = 0u;
              long long v257 = (_OWORD *)((char *)v252 + v76);
              v257[2] = 0u;
              v257[3] = 0u;
              *long long v257 = 0u;
              v257[1] = 0u;
            }
            uint64_t v280 = v251 + v254;
            long long v281 = (_OWORD *)v136[12].f64;
            unsigned int v282 = v71[7];
            if (v282 == 255)
            {
              float64x2_t v290 = *(float64x2_t *)(v280 + 16);
              long long v291 = *(_OWORD *)(v280 + 32);
              long long v292 = *(_OWORD *)(v280 + 48);
              long long v293 = *(_OWORD *)(v280 + 96);
              long long v294 = *(_OWORD *)(v280 + 112);
              float64x2_t v295 = *(float64x2_t *)(v280 + 64);
              float64x2_t v296 = *(float64x2_t *)(v280 + 80);
              long long v297 = *(_OWORD *)(v280 + 128);
              long long v298 = *(_OWORD *)(v280 + 144);
              long long v299 = *(_OWORD *)(v280 + 192);
              long long v300 = *(_OWORD *)(v280 + 208);
              long long v301 = *(_OWORD *)(v280 + 224);
              long long v302 = *(_OWORD *)(v280 + 240);
              long long v303 = *(_OWORD *)(v280 + 160);
              long long v304 = *(_OWORD *)(v280 + 176);
              *long long v281 = *(_OWORD *)v280;
              v136[13] = v290;
              v136[14] = v295;
              v136[15] = v296;
              uint64_t v305 = (_OWORD *)((char *)v281 + v75);
              float64x2_t v306 = (_OWORD *)((char *)v281 + v33);
              *float64x2_t v306 = v291;
              v306[1] = v292;
              v306[2] = v293;
              v306[3] = v294;
              *uint64_t v305 = v297;
              v305[1] = v298;
              v305[2] = v299;
              v305[3] = v300;
              long long v307 = (_OWORD *)((char *)v281 + v75 + v33);
              *long long v307 = v303;
              v307[1] = v304;
              v307[2] = v301;
              v307[3] = v302;
              uint64_t v24 = v505;
            }
            else
            {
              uint64_t v24 = v505;
              if (v282 == 7)
              {
                float64x2_t v286 = vld1q_dup_f64((const double *)v280);
                v136[12] = v286;
                v136[13] = v286;
                v136[14] = v286;
                v136[15] = v286;
                long long v287 = (float64x2_t *)((char *)v281 + v33);
                *long long v287 = v286;
                v287[1] = v286;
                v287[2] = v286;
                v287[3] = v286;
                float64x2_t v288 = (float64x2_t *)((char *)v281 + v75);
                *float64x2_t v288 = v286;
                v288[1] = v286;
                v288[2] = v286;
                v288[3] = v286;
                float64x2_t v289 = (float64x2_t *)((char *)v281 + v76);
                *float64x2_t v289 = v286;
                v289[1] = v286;
                v289[2] = v286;
                v289[3] = v286;
              }
              else if (v282)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v281, v33, v280, v282);
              }
              else
              {
                v136[14] = 0u;
                v136[15] = 0u;
                *long long v281 = 0u;
                v136[13] = 0u;
                long long v283 = (_OWORD *)((char *)v281 + v33);
                v283[2] = 0u;
                v283[3] = 0u;
                *long long v283 = 0u;
                v283[1] = 0u;
                long long v284 = (_OWORD *)((char *)v281 + v75);
                v284[2] = 0u;
                v284[3] = 0u;
                *long long v284 = 0u;
                v284[1] = 0u;
                long long v285 = (_OWORD *)((char *)v281 + v76);
                v285[2] = 0u;
                v285[3] = 0u;
                *long long v285 = 0u;
                v285[1] = 0u;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v81 = v43 - v41;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v505;
          block[5] = v70;
          char v516 = v45;
          char v517 = v508;
          int v512 = v493;
          unsigned int v513 = v81;
          block[6] = v71;
          v510 = v72;
          uint64_t v33 = a11;
          uint64_t v511 = a11;
          int v514 = v504;
          unsigned int v515 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v505 + 8) + 7384), block);
            unsigned int v16 = v495;
            uint64_t v24 = v505;
LABEL_27:
            unsigned int v40 = v38 + 1;
            goto LABEL_28;
          }
          unsigned int v82 = *v71;
          unsigned int v16 = v495;
          if (v82 == 255)
          {
            float64x2_t v308 = v70[1];
            float64x2_t v309 = v70[2];
            float64x2_t v310 = v70[3];
            float64x2_t v311 = v70[6];
            float64x2_t v312 = v70[7];
            float64x2_t v313 = v70[8];
            float64x2_t v314 = v70[9];
            float64x2_t v315 = v70[11];
            float64x2_t v316 = v70[4];
            float64x2_t v317 = v70[12];
            float64x2_t v318 = v70[13];
            float64x2_t v319 = v70[14];
            float64x2_t v320 = v70[15];
            float64x2_t v321 = v70[5];
            float64x2_t v322 = v70[10];
            float64x2_t v519 = *v70;
            float64x2_t v520 = v308;
            float64x2_t v521 = v316;
            float64x2_t v522 = v321;
            float64x2_t v535 = v309;
            float64x2_t v536 = v310;
            float64x2_t v537 = v311;
            float64x2_t v538 = v312;
            float64x2_t v551 = v313;
            float64x2_t v552 = v314;
            float64x2_t v553 = v317;
            float64x2_t v554 = v318;
            uint64_t v83 = 256;
            float64x2_t v567 = v322;
            float64x2_t v568 = v315;
            float64x2_t v569 = v319;
            float64x2_t v570 = v320;
          }
          else if (v82 == 7)
          {
            float64x2_t v323 = vld1q_dup_f64(v70->f64);
            float64x2_t v519 = v323;
            float64x2_t v520 = v323;
            float64x2_t v521 = v323;
            float64x2_t v522 = v323;
            float64x2_t v535 = v323;
            float64x2_t v536 = v323;
            float64x2_t v537 = v323;
            float64x2_t v538 = v323;
            float64x2_t v551 = v323;
            float64x2_t v552 = v323;
            float64x2_t v553 = v323;
            float64x2_t v554 = v323;
            float64x2_t v567 = v323;
            float64x2_t v568 = v323;
            uint64_t v83 = 8;
            float64x2_t v569 = v323;
            float64x2_t v570 = v323;
          }
          else if (*v71)
          {
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v519, 256, (uint64_t)v70, v82);
          }
          else
          {
            uint64_t v83 = 0;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v519 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
          }
          uint64_t v324 = (uint64_t)v70 + v83;
          unsigned int v325 = v71[1];
          if (v325 == 255)
          {
            float64x2_t v327 = *(float64x2_t *)(v324 + 16);
            float64x2_t v328 = *(float64x2_t *)(v324 + 32);
            float64x2_t v329 = *(float64x2_t *)(v324 + 48);
            float64x2_t v330 = *(float64x2_t *)(v324 + 96);
            float64x2_t v331 = *(float64x2_t *)(v324 + 112);
            float64x2_t v332 = *(float64x2_t *)(v324 + 128);
            float64x2_t v333 = *(float64x2_t *)(v324 + 144);
            float64x2_t v334 = *(float64x2_t *)(v324 + 176);
            float64x2_t v335 = *(float64x2_t *)(v324 + 64);
            float64x2_t v336 = *(float64x2_t *)(v324 + 192);
            float64x2_t v337 = *(float64x2_t *)(v324 + 208);
            float64x2_t v338 = *(float64x2_t *)(v324 + 224);
            float64x2_t v339 = *(float64x2_t *)(v324 + 240);
            float64x2_t v340 = *(float64x2_t *)(v324 + 80);
            float64x2_t v341 = *(float64x2_t *)(v324 + 160);
            float64x2_t v523 = *(float64x2_t *)v324;
            float64x2_t v524 = v327;
            float64x2_t v525 = v335;
            float64x2_t v526 = v340;
            float64x2_t v539 = v328;
            float64x2_t v540 = v329;
            float64x2_t v541 = v330;
            float64x2_t v542 = v331;
            float64x2_t v555 = v332;
            float64x2_t v556 = v333;
            float64x2_t v557 = v336;
            float64x2_t v558 = v337;
            uint64_t v326 = 256;
            float64x2_t v571 = v341;
            float64x2_t v572 = v334;
            float64x2_t v573 = v338;
            float64x2_t v574 = v339;
          }
          else if (v325 == 7)
          {
            float64x2_t v342 = vld1q_dup_f64((const double *)v324);
            float64x2_t v523 = v342;
            float64x2_t v524 = v342;
            float64x2_t v525 = v342;
            float64x2_t v526 = v342;
            float64x2_t v539 = v342;
            float64x2_t v540 = v342;
            float64x2_t v541 = v342;
            float64x2_t v542 = v342;
            float64x2_t v555 = v342;
            float64x2_t v556 = v342;
            float64x2_t v557 = v342;
            float64x2_t v558 = v342;
            float64x2_t v571 = v342;
            float64x2_t v572 = v342;
            uint64_t v326 = 8;
            float64x2_t v573 = v342;
            float64x2_t v574 = v342;
          }
          else if (v71[1])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v523, 256, v324, v325);
          }
          else
          {
            uint64_t v326 = 0;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
          }
          uint64_t v343 = v324 + v326;
          unsigned int v344 = v71[2];
          if (v344 == 255)
          {
            float64x2_t v346 = *(float64x2_t *)(v343 + 16);
            float64x2_t v347 = *(float64x2_t *)(v343 + 32);
            float64x2_t v348 = *(float64x2_t *)(v343 + 48);
            float64x2_t v349 = *(float64x2_t *)(v343 + 96);
            float64x2_t v350 = *(float64x2_t *)(v343 + 112);
            float64x2_t v351 = *(float64x2_t *)(v343 + 128);
            float64x2_t v352 = *(float64x2_t *)(v343 + 144);
            float64x2_t v353 = *(float64x2_t *)(v343 + 176);
            float64x2_t v354 = *(float64x2_t *)(v343 + 64);
            float64x2_t v355 = *(float64x2_t *)(v343 + 192);
            float64x2_t v356 = *(float64x2_t *)(v343 + 208);
            float64x2_t v357 = *(float64x2_t *)(v343 + 224);
            float64x2_t v358 = *(float64x2_t *)(v343 + 240);
            float64x2_t v359 = *(float64x2_t *)(v343 + 80);
            float64x2_t v360 = *(float64x2_t *)(v343 + 160);
            float64x2_t v583 = *(float64x2_t *)v343;
            float64x2_t v584 = v346;
            float64x2_t v585 = v354;
            float64x2_t v586 = v359;
            float64x2_t v599 = v347;
            float64x2_t v600 = v348;
            float64x2_t v601 = v349;
            float64x2_t v602 = v350;
            float64x2_t v615 = v351;
            float64x2_t v616 = v352;
            float64x2_t v617 = v355;
            float64x2_t v618 = v356;
            uint64_t v345 = 256;
            float64x2_t v631 = v360;
            float64x2_t v632 = v353;
            float64x2_t v633 = v357;
            float64x2_t v634 = v358;
          }
          else if (v344 == 7)
          {
            float64x2_t v361 = vld1q_dup_f64((const double *)v343);
            float64x2_t v583 = v361;
            float64x2_t v584 = v361;
            float64x2_t v585 = v361;
            float64x2_t v586 = v361;
            float64x2_t v599 = v361;
            float64x2_t v600 = v361;
            float64x2_t v601 = v361;
            float64x2_t v602 = v361;
            float64x2_t v615 = v361;
            float64x2_t v616 = v361;
            float64x2_t v617 = v361;
            float64x2_t v618 = v361;
            float64x2_t v631 = v361;
            float64x2_t v632 = v361;
            float64x2_t v633 = v361;
            uint64_t v345 = 8;
            float64x2_t v634 = v361;
          }
          else if (v71[2])
          {
            uint64_t v345 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v583, 256, v343, v344);
          }
          else
          {
            uint64_t v345 = 0;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v583 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v615 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v618 = 0u;
            float64x2_t v631 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
          }
          uint64_t v362 = v343 + v345;
          unsigned int v363 = v71[3];
          if (v363 == 255)
          {
            float64x2_t v365 = *(float64x2_t *)(v362 + 16);
            float64x2_t v366 = *(float64x2_t *)(v362 + 32);
            float64x2_t v367 = *(float64x2_t *)(v362 + 48);
            float64x2_t v368 = *(float64x2_t *)(v362 + 96);
            float64x2_t v369 = *(float64x2_t *)(v362 + 112);
            float64x2_t v370 = *(float64x2_t *)(v362 + 128);
            float64x2_t v371 = *(float64x2_t *)(v362 + 144);
            float64x2_t v372 = *(float64x2_t *)(v362 + 176);
            float64x2_t v373 = *(float64x2_t *)(v362 + 64);
            float64x2_t v374 = *(float64x2_t *)(v362 + 192);
            float64x2_t v375 = *(float64x2_t *)(v362 + 208);
            float64x2_t v376 = *(float64x2_t *)(v362 + 224);
            float64x2_t v377 = *(float64x2_t *)(v362 + 240);
            float64x2_t v378 = *(float64x2_t *)(v362 + 80);
            float64x2_t v379 = *(float64x2_t *)(v362 + 160);
            float64x2_t v587 = *(float64x2_t *)v362;
            float64x2_t v588 = v365;
            float64x2_t v589 = v373;
            float64x2_t v590 = v378;
            float64x2_t v603 = v366;
            float64x2_t v604 = v367;
            float64x2_t v605 = v368;
            float64x2_t v606 = v369;
            float64x2_t v619 = v370;
            float64x2_t v620 = v371;
            float64x2_t v621 = v374;
            float64x2_t v622 = v375;
            uint64_t v364 = 256;
            float64x2_t v635 = v379;
            float64x2_t v636 = v372;
            float64x2_t v637 = v376;
            float64x2_t v638 = v377;
          }
          else if (v363 == 7)
          {
            float64x2_t v380 = vld1q_dup_f64((const double *)v362);
            float64x2_t v587 = v380;
            float64x2_t v588 = v380;
            float64x2_t v589 = v380;
            float64x2_t v590 = v380;
            float64x2_t v603 = v380;
            float64x2_t v604 = v380;
            float64x2_t v605 = v380;
            float64x2_t v606 = v380;
            float64x2_t v619 = v380;
            float64x2_t v620 = v380;
            float64x2_t v621 = v380;
            float64x2_t v622 = v380;
            float64x2_t v635 = v380;
            float64x2_t v636 = v380;
            float64x2_t v637 = v380;
            uint64_t v364 = 8;
            float64x2_t v638 = v380;
          }
          else if (v71[3])
          {
            uint64_t v364 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v587, 256, v362, v363);
          }
          else
          {
            uint64_t v364 = 0;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v620 = 0u;
            float64x2_t v621 = 0u;
            float64x2_t v622 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v636 = 0u;
            float64x2_t v637 = 0u;
            float64x2_t v638 = 0u;
          }
          uint64_t v381 = v362 + v364;
          unsigned int v382 = v71[4];
          if (v382 == 255)
          {
            float64x2_t v384 = *(float64x2_t *)(v381 + 16);
            float64x2_t v385 = *(float64x2_t *)(v381 + 32);
            float64x2_t v386 = *(float64x2_t *)(v381 + 48);
            float64x2_t v387 = *(float64x2_t *)(v381 + 96);
            float64x2_t v388 = *(float64x2_t *)(v381 + 112);
            float64x2_t v389 = *(float64x2_t *)(v381 + 128);
            float64x2_t v390 = *(float64x2_t *)(v381 + 144);
            float64x2_t v391 = *(float64x2_t *)(v381 + 176);
            float64x2_t v392 = *(float64x2_t *)(v381 + 64);
            float64x2_t v393 = *(float64x2_t *)(v381 + 192);
            float64x2_t v394 = *(float64x2_t *)(v381 + 208);
            float64x2_t v395 = *(float64x2_t *)(v381 + 224);
            float64x2_t v396 = *(float64x2_t *)(v381 + 240);
            float64x2_t v397 = *(float64x2_t *)(v381 + 80);
            float64x2_t v398 = *(float64x2_t *)(v381 + 160);
            float64x2_t v527 = *(float64x2_t *)v381;
            float64x2_t v528 = v384;
            float64x2_t v529 = v392;
            float64x2_t v530 = v397;
            float64x2_t v543 = v385;
            float64x2_t v544 = v386;
            float64x2_t v545 = v387;
            float64x2_t v546 = v388;
            float64x2_t v559 = v389;
            float64x2_t v560 = v390;
            float64x2_t v561 = v393;
            float64x2_t v562 = v394;
            uint64_t v383 = 256;
            float64x2_t v575 = v398;
            float64x2_t v576 = v391;
            float64x2_t v577 = v395;
            float64x2_t v578 = v396;
          }
          else if (v382 == 7)
          {
            float64x2_t v399 = vld1q_dup_f64((const double *)v381);
            float64x2_t v527 = v399;
            float64x2_t v528 = v399;
            float64x2_t v529 = v399;
            float64x2_t v530 = v399;
            float64x2_t v543 = v399;
            float64x2_t v544 = v399;
            float64x2_t v545 = v399;
            float64x2_t v546 = v399;
            float64x2_t v559 = v399;
            float64x2_t v560 = v399;
            float64x2_t v561 = v399;
            float64x2_t v562 = v399;
            float64x2_t v575 = v399;
            float64x2_t v576 = v399;
            uint64_t v383 = 8;
            float64x2_t v577 = v399;
            float64x2_t v578 = v399;
          }
          else if (v71[4])
          {
            uint64_t v383 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v527, 256, v381, v382);
          }
          else
          {
            uint64_t v383 = 0;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
          }
          uint64_t v400 = v381 + v383;
          unsigned int v401 = v71[5];
          if (v401 == 255)
          {
            float64x2_t v403 = *(float64x2_t *)(v400 + 16);
            float64x2_t v404 = *(float64x2_t *)(v400 + 32);
            float64x2_t v405 = *(float64x2_t *)(v400 + 48);
            float64x2_t v406 = *(float64x2_t *)(v400 + 96);
            float64x2_t v407 = *(float64x2_t *)(v400 + 112);
            float64x2_t v408 = *(float64x2_t *)(v400 + 128);
            float64x2_t v409 = *(float64x2_t *)(v400 + 144);
            float64x2_t v410 = *(float64x2_t *)(v400 + 176);
            float64x2_t v411 = *(float64x2_t *)(v400 + 64);
            float64x2_t v412 = *(float64x2_t *)(v400 + 192);
            float64x2_t v413 = *(float64x2_t *)(v400 + 208);
            float64x2_t v414 = *(float64x2_t *)(v400 + 224);
            float64x2_t v415 = *(float64x2_t *)(v400 + 240);
            float64x2_t v416 = *(float64x2_t *)(v400 + 80);
            float64x2_t v417 = *(float64x2_t *)(v400 + 160);
            float64x2_t v531 = *(float64x2_t *)v400;
            float64x2_t v532 = v403;
            float64x2_t v533 = v411;
            float64x2_t v534 = v416;
            float64x2_t v547 = v404;
            float64x2_t v548 = v405;
            float64x2_t v549 = v406;
            float64x2_t v550 = v407;
            float64x2_t v563 = v408;
            float64x2_t v564 = v409;
            float64x2_t v565 = v412;
            float64x2_t v566 = v413;
            uint64_t v402 = 256;
            float64x2_t v579 = v417;
            float64x2_t v580 = v410;
            float64x2_t v581 = v414;
            float64x2_t v582 = v415;
          }
          else if (v401 == 7)
          {
            float64x2_t v418 = vld1q_dup_f64((const double *)v400);
            float64x2_t v531 = v418;
            float64x2_t v532 = v418;
            float64x2_t v533 = v418;
            float64x2_t v534 = v418;
            float64x2_t v547 = v418;
            float64x2_t v548 = v418;
            float64x2_t v549 = v418;
            float64x2_t v550 = v418;
            float64x2_t v563 = v418;
            float64x2_t v564 = v418;
            float64x2_t v565 = v418;
            float64x2_t v566 = v418;
            float64x2_t v579 = v418;
            float64x2_t v580 = v418;
            uint64_t v402 = 8;
            float64x2_t v581 = v418;
            float64x2_t v582 = v418;
          }
          else if (v71[5])
          {
            uint64_t v402 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v531, 256, v400, v401);
          }
          else
          {
            uint64_t v402 = 0;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v579 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
          }
          uint64_t v419 = v400 + v402;
          unsigned int v420 = v71[6];
          if (v420 == 255)
          {
            float64x2_t v422 = *(float64x2_t *)(v419 + 16);
            float64x2_t v423 = *(float64x2_t *)(v419 + 32);
            float64x2_t v424 = *(float64x2_t *)(v419 + 48);
            float64x2_t v425 = *(float64x2_t *)(v419 + 96);
            float64x2_t v426 = *(float64x2_t *)(v419 + 112);
            float64x2_t v427 = *(float64x2_t *)(v419 + 128);
            float64x2_t v428 = *(float64x2_t *)(v419 + 144);
            float64x2_t v429 = *(float64x2_t *)(v419 + 176);
            float64x2_t v430 = *(float64x2_t *)(v419 + 64);
            float64x2_t v431 = *(float64x2_t *)(v419 + 192);
            float64x2_t v432 = *(float64x2_t *)(v419 + 208);
            float64x2_t v433 = *(float64x2_t *)(v419 + 224);
            float64x2_t v434 = *(float64x2_t *)(v419 + 240);
            float64x2_t v435 = *(float64x2_t *)(v419 + 80);
            float64x2_t v436 = *(float64x2_t *)(v419 + 160);
            float64x2_t v591 = *(float64x2_t *)v419;
            float64x2_t v592 = v422;
            float64x2_t v593 = v430;
            float64x2_t v594 = v435;
            float64x2_t v607 = v423;
            float64x2_t v608 = v424;
            float64x2_t v609 = v425;
            float64x2_t v610 = v426;
            float64x2_t v623 = v427;
            float64x2_t v624 = v428;
            float64x2_t v625 = v431;
            float64x2_t v626 = v432;
            uint64_t v421 = 256;
            float64x2_t v639 = v436;
            float64x2_t v640 = v429;
            float64x2_t v641 = v433;
            float64x2_t v642 = v434;
          }
          else if (v420 == 7)
          {
            float64x2_t v437 = vld1q_dup_f64((const double *)v419);
            float64x2_t v591 = v437;
            float64x2_t v592 = v437;
            float64x2_t v593 = v437;
            float64x2_t v594 = v437;
            float64x2_t v607 = v437;
            float64x2_t v608 = v437;
            float64x2_t v609 = v437;
            float64x2_t v610 = v437;
            float64x2_t v623 = v437;
            float64x2_t v624 = v437;
            float64x2_t v625 = v437;
            float64x2_t v626 = v437;
            float64x2_t v639 = v437;
            float64x2_t v640 = v437;
            float64x2_t v641 = v437;
            uint64_t v421 = 8;
            float64x2_t v642 = v437;
          }
          else if (v71[6])
          {
            uint64_t v421 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v591, 256, v419, v420);
          }
          else
          {
            uint64_t v421 = 0;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v623 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v639 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
          }
          uint64_t v438 = v419 + v421;
          unsigned int v439 = v71[7];
          if (v439 == 255)
          {
            float64x2_t v442 = *(float64x2_t *)(v438 + 16);
            float64x2_t v443 = *(float64x2_t *)(v438 + 32);
            float64x2_t v444 = *(float64x2_t *)(v438 + 48);
            float64x2_t v445 = *(float64x2_t *)(v438 + 96);
            float64x2_t v446 = *(float64x2_t *)(v438 + 112);
            float64x2_t v447 = *(float64x2_t *)(v438 + 64);
            float64x2_t v448 = *(float64x2_t *)(v438 + 128);
            float64x2_t v449 = *(float64x2_t *)(v438 + 144);
            float64x2_t v450 = *(float64x2_t *)(v438 + 80);
            float64x2_t v451 = *(float64x2_t *)(v438 + 192);
            float64x2_t v452 = *(float64x2_t *)(v438 + 208);
            float64x2_t v453 = *(float64x2_t *)(v438 + 224);
            float64x2_t v454 = *(float64x2_t *)(v438 + 240);
            float64x2_t v455 = *(float64x2_t *)(v438 + 160);
            float64x2_t v456 = *(float64x2_t *)(v438 + 176);
            float64x2_t v595 = *(float64x2_t *)v438;
            float64x2_t v596 = v442;
            float64x2_t v597 = v447;
            float64x2_t v598 = v450;
            float64x2_t v611 = v443;
            float64x2_t v612 = v444;
            float64x2_t v613 = v445;
            float64x2_t v614 = v446;
            float64x2_t v627 = v448;
            float64x2_t v628 = v449;
            float64x2_t v629 = v451;
            float64x2_t v630 = v452;
            unsigned int v440 = v504;
            unsigned int v441 = v493;
            float64x2_t v643 = v455;
            float64x2_t v644 = v456;
            float64x2_t v645 = v453;
            float64x2_t v646 = v454;
            uint64_t v24 = v505;
            unsigned int v40 = v38 + 1;
          }
          else
          {
            uint64_t v24 = v505;
            unsigned int v40 = v38 + 1;
            if (v439 == 7)
            {
              float64x2_t v457 = vld1q_dup_f64((const double *)v438);
              float64x2_t v595 = v457;
              float64x2_t v596 = v457;
              float64x2_t v597 = v457;
              float64x2_t v598 = v457;
              float64x2_t v611 = v457;
              float64x2_t v612 = v457;
              float64x2_t v613 = v457;
              float64x2_t v614 = v457;
              float64x2_t v627 = v457;
              float64x2_t v628 = v457;
              float64x2_t v629 = v457;
              float64x2_t v630 = v457;
              float64x2_t v643 = v457;
              float64x2_t v644 = v457;
              float64x2_t v645 = v457;
              unsigned int v440 = v504;
              unsigned int v441 = v493;
              float64x2_t v646 = v457;
            }
            else if (v439)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v595, 256, v438, v439);
              unsigned int v441 = v512;
              unsigned int v81 = v513;
              unsigned int v440 = v514;
            }
            else
            {
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v611 = 0u;
              float64x2_t v612 = 0u;
              float64x2_t v613 = 0u;
              float64x2_t v614 = 0u;
              float64x2_t v627 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v643 = 0u;
              float64x2_t v644 = 0u;
              unsigned int v440 = v504;
              unsigned int v441 = v493;
              float64x2_t v645 = 0u;
              float64x2_t v646 = 0u;
            }
          }
          if (v440)
          {
            unint64_t v458 = 0;
            float64x2_t v459 = (_OWORD *)&v519.f64[32 * (unint64_t)v441 + 2 * v81];
            unsigned int v460 = v515;
            do
            {
              if (v460)
              {
                uint64_t v461 = 0;
                float64x2_t v462 = (char *)v510 + v511 * v458;
                do
                {
                  v462[v461] = *((unsigned char *)v459 + v461);
                  ++v461;
                  unsigned int v460 = v515;
                }
                while (16 * (unint64_t)v515 > v461);
                unsigned int v440 = v514;
              }
              ++v458;
              v459 += 16;
            }
            while (v458 < v440);
          }
LABEL_28:
          BOOL v29 = v38 == v496 >> 4;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v486;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v499 = v21;
  uint64_t v500 = v22;
  uint64_t v485 = v23;
  uint64_t v24 = v12;
  uint64_t v647 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v503 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v484 = v14 + a10 - 1;
  unsigned int v486 = v484 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v498 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v486)
  {
    unsigned int v496 = v16 + a9 - 1;
    unsigned int v483 = v16 >> 4;
    if (v16 >> 4 <= v496 >> 4)
    {
      uint64_t v33 = a11;
      unsigned int v480 = v20 - 1;
      unsigned int v507 = (v20 - 1) >> 4;
      int v506 = ((v20 - 1) & 0xF) + 1;
      int v481 = ((v18 - 1) & 7) + 1;
      unsigned int v482 = (v18 - 1) >> 3;
      uint64_t v489 = 4 * a11;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v34, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v34));
      __int32 v494 = v35.i32[0] | v35.i32[1];
      int8x8_t v492 = v35;
      BOOL v491 = v35.i32[0] != 0;
      BOOL v490 = v35.i32[1] != 0;
      unint64_t v479 = 8 * v27 * (unint64_t)v26;
      unsigned int v495 = v16;
      uint64_t v505 = v24;
      uint64_t v487 = 3 * a11;
      uint64_t v488 = 2 * a11;
      do
      {
        unsigned int v36 = (8 * v25) | 7;
        if (8 * v25 <= v503) {
          int v37 = v503;
        }
        else {
          int v37 = 8 * v25;
        }
        unsigned int v38 = v483;
        if (v484 < v36) {
          unsigned int v36 = v484;
        }
        unsigned int v502 = 8 * v25;
        int v493 = v37 - 8 * v25;
        int v504 = v36 - v37 + 1;
        int v39 = v481;
        if (v25 != v482) {
          int v39 = 8;
        }
        unsigned int v508 = v39;
        uint64_t v501 = v485 + (v37 - v503) * v33;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v496 < v42) {
            unsigned int v42 = v496;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v507) {
            unsigned int v45 = v506;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v502 >= v503 && v41 >= v16)
          {
            int v47 = v506;
            if (v38 != v507) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v504 != v508;
          }
          if (isLevelTiled)
          {
            unsigned int v463 = 0;
            uint64_t v464 = v479 >> (*(unsigned char *)(v24 + 57) != 0);
            char v465 = 1;
            if (v464 > 127)
            {
              if (v464 > 511)
              {
                if (v464 == 512)
                {
                  char v466 = 0;
                  unsigned int v463 = 16;
                  unsigned int v467 = 16;
                }
                else
                {
                  char v466 = 1;
                  unsigned int v467 = 0;
                  if (v464 == 1024)
                  {
                    unsigned int v467 = 8;
                    unsigned int v463 = 16;
                  }
                }
              }
              else if (v464 == 128)
              {
                char v465 = 0;
                char v466 = 0;
                unsigned int v463 = 32;
                unsigned int v467 = 32;
              }
              else
              {
                char v466 = 1;
                unsigned int v467 = 0;
                if (v464 == 256)
                {
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 16;
                  unsigned int v463 = 32;
                }
              }
            }
            else
            {
              char v466 = 1;
              unsigned int v467 = 0;
              switch(v464)
              {
                case 4:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 128;
                  unsigned int v463 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 128;
                  unsigned int v467 = 128;
                  break;
                case 16:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v467 = 64;
                  unsigned int v463 = 128;
                  break;
                case 32:
                  char v465 = 0;
                  char v466 = 0;
                  unsigned int v463 = 64;
                  unsigned int v467 = 64;
                  break;
                default:
                  if (v464 == 64)
                  {
                    char v465 = 0;
                    char v466 = 0;
                    unsigned int v467 = 32;
                    unsigned int v463 = 64;
                  }
                  break;
              }
            }
            unsigned int v468 = (v463 >> 4) - 1;
            if (v465) {
              unsigned int v469 = 0;
            }
            else {
              unsigned int v469 = 32 - __clz(~(-1 << -(char)__clz(v468)));
            }
            unsigned int v470 = (v467 >> 3) - 1;
            if (v466)
            {
              unsigned int v471 = 0;
              if (v469) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v471 = 32 - __clz(~(-1 << -(char)__clz(v470)));
              if (v471 | v469)
              {
LABEL_233:
                int v472 = 0;
                uint64_t v473 = 0;
                int v474 = v38 & v468;
                int v475 = v25 & v470;
                BOOL v476 = v471 != 0;
                BOOL v477 = v469 != 0;
                int v478 = 1;
                do
                {
                  --v471;
                  if (v476) {
                    v473 |= (unint64_t)(v478 & v475) << v472++;
                  }
                  else {
                    unsigned int v471 = 0;
                  }
                  --v469;
                  if (v477) {
                    v473 |= (unint64_t)(v478 & v474) << v472++;
                  }
                  else {
                    unsigned int v469 = 0;
                  }
                  v478 *= 2;
                  --v472;
                  BOOL v477 = v469 != 0;
                  BOOL v476 = v471 != 0;
                }
                while (v469 | v471);
                goto LABEL_245;
              }
            }
            uint64_t v473 = 0;
LABEL_245:
            unint64_t v56 = ((unint64_t)(v41 / v463 + v502 / v467 * ((v463 + v480) / v463)) << 14) + (v473 << 11);
            goto LABEL_60;
          }
          if (v494)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v491;
            BOOL v53 = v490;
            __int32 v54 = v492.i32[0];
            __int32 v55 = v492.i32[1];
            do
            {
              --v54;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v53) {
                v50 |= (unint64_t)(v51 & v38) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v53 = v55 != 0;
              BOOL v52 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
          }
          if (v62 | v59)
          {
            int v63 = 0;
            unint64_t v64 = 0;
            BOOL v65 = v59 != 0;
            BOOL v66 = v62 != 0;
            int v67 = 1;
            do
            {
              --v59;
              BOOL v68 = !v65;
              if (v65)
              {
                unint64_t v69 = ((unint64_t)(v67 & v38) << v63) | v64;
              }
              else
              {
                unsigned int v59 = 0;
                unint64_t v69 = v64;
              }
              if (!v68) {
                ++v63;
              }
              --v62;
              if (v66)
              {
                unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
              }
              else
              {
                unsigned int v62 = 0;
                unint64_t v64 = v69;
              }
              if (v66) {
                ++v63;
              }
              v67 *= 2;
              --v63;
              BOOL v66 = v62 != 0;
              BOOL v65 = v59 != 0;
            }
            while (v62 | v59);
          }
          else
          {
            unint64_t v64 = 0;
          }
          __int32 v70 = (float64x2_t *)(v499 + v56);
          if (v498)
          {
            memcpy(__dst, v70, sizeof(__dst));
            __int32 v70 = (float64x2_t *)__dst;
          }
          __int32 v71 = (unsigned __int8 *)(v500 + 8 * v64);
          uint64_t v72 = (float64x2_t *)(v501 + 16 * (v43 - v16));
          char v73 = v45 < 0x10 || v46;
          if ((v73 & 1) == 0 && v508 > 7)
          {
            unsigned int v74 = *v71;
            if (v74 == 255)
            {
              float64x2_t v88 = v70[1];
              float64x2_t v89 = v70[2];
              float64x2_t v90 = v70[3];
              float64x2_t v91 = v70[8];
              float64x2_t v92 = v70[9];
              float64x2_t v93 = v70[6];
              float64x2_t v94 = v70[12];
              float64x2_t v95 = v70[13];
              float64x2_t v96 = v70[15];
              float64x2_t v97 = v70[7];
              float64x2_t v98 = v70[4];
              float64x2_t v99 = v70[5];
              float64x2_t v100 = v70[10];
              float64x2_t v101 = v70[11];
              float64x2_t v102 = v70[14];
              uint64_t v75 = 2 * a11;
              *uint64_t v72 = *v70;
              v72[1] = v88;
              v72[2] = v98;
              v72[3] = v99;
              uint64_t v103 = (float64x2_t *)((char *)v72 + v488);
              uint64_t v33 = a11;
              float64x2_t v104 = (float64x2_t *)((char *)v72 + a11);
              *float64x2_t v104 = v89;
              v104[1] = v90;
              v104[2] = v93;
              v104[3] = v97;
              *uint64_t v103 = v91;
              v103[1] = v92;
              v103[2] = v94;
              v103[3] = v95;
              float64x2_t v105 = (float64x2_t *)((char *)v72 + v488 + a11);
              uint64_t v77 = 256;
              float64x2_t *v105 = v100;
              v105[1] = v101;
              v105[2] = v102;
              v105[3] = v96;
              uint64_t v76 = 3 * a11;
            }
            else
            {
              uint64_t v33 = a11;
              uint64_t v76 = 3 * a11;
              uint64_t v75 = 2 * a11;
              if (v74 == 7)
              {
                float64x2_t v84 = vld1q_dup_f64(v70->f64);
                *uint64_t v72 = v84;
                v72[1] = v84;
                v72[2] = v84;
                v72[3] = v84;
                unint64_t v85 = (float64x2_t *)((char *)v72 + a11);
                float64x2_t *v85 = v84;
                v85[1] = v84;
                v85[2] = v84;
                v85[3] = v84;
                uint64_t v86 = (float64x2_t *)((char *)v72 + v488);
                float64x2_t *v86 = v84;
                v86[1] = v84;
                v86[2] = v84;
                v86[3] = v84;
                int8x8_t v87 = (float64x2_t *)((char *)v72 + v487);
                float64x2_t *v87 = v84;
                v87[1] = v84;
                v87[2] = v84;
                v87[3] = v84;
                uint64_t v77 = 8;
              }
              else if (*v71)
              {
                uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72, a11, (uint64_t)v70, v74);
              }
              else
              {
                uint64_t v77 = 0;
                v72[2] = 0u;
                v72[3] = 0u;
                *uint64_t v72 = 0u;
                v72[1] = 0u;
                unsigned int v78 = (_OWORD *)((char *)v72->f64 + a11);
                v78[2] = 0u;
                v78[3] = 0u;
                _OWORD *v78 = 0u;
                v78[1] = 0u;
                int v79 = (_OWORD *)((char *)v72->f64 + v488);
                v79[2] = 0u;
                v79[3] = 0u;
                *int v79 = 0u;
                v79[1] = 0u;
                unint64_t v80 = (_OWORD *)((char *)v72->f64 + v487);
                v80[2] = 0u;
                v80[3] = 0u;
                _OWORD *v80 = 0u;
                v80[1] = 0u;
              }
            }
            uint64_t v106 = (uint64_t)v70 + v77;
            f64 = (_OWORD *)v72[4].f64;
            unsigned int v108 = v71[1];
            if (v108 == 255)
            {
              float64x2_t v117 = *(float64x2_t *)(v106 + 16);
              long long v118 = *(_OWORD *)(v106 + 32);
              long long v119 = *(_OWORD *)(v106 + 48);
              long long v120 = *(_OWORD *)(v106 + 128);
              long long v121 = *(_OWORD *)(v106 + 144);
              long long v122 = *(_OWORD *)(v106 + 96);
              long long v123 = *(_OWORD *)(v106 + 192);
              long long v124 = *(_OWORD *)(v106 + 208);
              long long v125 = *(_OWORD *)(v106 + 240);
              long long v126 = *(_OWORD *)(v106 + 112);
              float64x2_t v127 = *(float64x2_t *)(v106 + 64);
              float64x2_t v128 = *(float64x2_t *)(v106 + 80);
              long long v129 = *(_OWORD *)(v106 + 160);
              long long v130 = *(_OWORD *)(v106 + 176);
              long long v131 = *(_OWORD *)(v106 + 224);
              _OWORD *f64 = *(_OWORD *)v106;
              v72[5] = v117;
              v72[6] = v127;
              v72[7] = v128;
              int64x2_t v132 = (_OWORD *)((char *)f64 + v75);
              float64x2_t v133 = (_OWORD *)((char *)f64 + v33);
              *float64x2_t v133 = v118;
              v133[1] = v119;
              v133[2] = v122;
              v133[3] = v126;
              _OWORD *v132 = v120;
              v132[1] = v121;
              v132[2] = v123;
              v132[3] = v124;
              long long v134 = (_OWORD *)((char *)f64 + v75 + v33);
              uint64_t v109 = 256;
              *long long v134 = v129;
              v134[1] = v130;
              v134[2] = v131;
              v134[3] = v125;
            }
            else if (v108 == 7)
            {
              float64x2_t v113 = vld1q_dup_f64((const double *)v106);
              v72[4] = v113;
              v72[5] = v113;
              v72[6] = v113;
              v72[7] = v113;
              float64x2_t v114 = (float64x2_t *)((char *)f64 + v33);
              *float64x2_t v114 = v113;
              v114[1] = v113;
              v114[2] = v113;
              v114[3] = v113;
              float64x2_t v115 = (float64x2_t *)((char *)f64 + v75);
              float64x2_t *v115 = v113;
              v115[1] = v113;
              v115[2] = v113;
              v115[3] = v113;
              float64x2_t v116 = (float64x2_t *)((char *)f64 + v76);
              float64x2_t *v116 = v113;
              v116[1] = v113;
              uint64_t v109 = 8;
              v116[2] = v113;
              v116[3] = v113;
            }
            else if (v71[1])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)f64, v33, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v72[6] = 0u;
              v72[7] = 0u;
              _OWORD *f64 = 0u;
              v72[5] = 0u;
              float64x2_t v110 = (_OWORD *)((char *)f64 + v33);
              v110[2] = 0u;
              v110[3] = 0u;
              _OWORD *v110 = 0u;
              v110[1] = 0u;
              float64x2_t v111 = (_OWORD *)((char *)f64 + v75);
              v111[2] = 0u;
              v111[3] = 0u;
              *float64x2_t v111 = 0u;
              v111[1] = 0u;
              float64x2_t v112 = (_OWORD *)((char *)f64 + v76);
              v112[2] = 0u;
              v112[3] = 0u;
              _OWORD *v112 = 0u;
              v112[1] = 0u;
            }
            uint64_t v135 = v106 + v109;
            long long v136 = (float64x2_t *)((char *)v72 + v489);
            unsigned int v137 = v71[2];
            if (v137 == 255)
            {
              float64x2_t v146 = *(float64x2_t *)(v135 + 16);
              long long v147 = *(_OWORD *)(v135 + 32);
              long long v148 = *(_OWORD *)(v135 + 48);
              long long v149 = *(_OWORD *)(v135 + 128);
              long long v150 = *(_OWORD *)(v135 + 144);
              long long v151 = *(_OWORD *)(v135 + 96);
              long long v152 = *(_OWORD *)(v135 + 192);
              long long v153 = *(_OWORD *)(v135 + 208);
              long long v154 = *(_OWORD *)(v135 + 240);
              long long v155 = *(_OWORD *)(v135 + 112);
              float64x2_t v156 = *(float64x2_t *)(v135 + 64);
              float64x2_t v157 = *(float64x2_t *)(v135 + 80);
              long long v158 = *(_OWORD *)(v135 + 160);
              long long v159 = *(_OWORD *)(v135 + 176);
              long long v160 = *(_OWORD *)(v135 + 224);
              float64x2_t *v136 = *(float64x2_t *)v135;
              v136[1] = v146;
              v136[2] = v156;
              v136[3] = v157;
              unsigned int v161 = (_OWORD *)((char *)v136->f64 + v75);
              float64x2_t v162 = (_OWORD *)((char *)v136->f64 + v33);
              *float64x2_t v162 = v147;
              v162[1] = v148;
              v162[2] = v151;
              v162[3] = v155;
              *unsigned int v161 = v149;
              v161[1] = v150;
              v161[2] = v152;
              v161[3] = v153;
              long long v163 = (_OWORD *)((char *)v136->f64 + v75 + v33);
              uint64_t v138 = 256;
              _OWORD *v163 = v158;
              v163[1] = v159;
              v163[2] = v160;
              v163[3] = v154;
            }
            else if (v137 == 7)
            {
              float64x2_t v142 = vld1q_dup_f64((const double *)v135);
              float64x2_t *v136 = v142;
              v136[1] = v142;
              v136[2] = v142;
              v136[3] = v142;
              float64x2_t v143 = (float64x2_t *)((char *)v136 + v33);
              *float64x2_t v143 = v142;
              v143[1] = v142;
              v143[2] = v142;
              v143[3] = v142;
              float64x2_t v144 = (float64x2_t *)((char *)v136 + v75);
              *float64x2_t v144 = v142;
              v144[1] = v142;
              v144[2] = v142;
              v144[3] = v142;
              long long v145 = (float64x2_t *)((char *)v136 + v76);
              float64x2_t *v145 = v142;
              v145[1] = v142;
              v145[2] = v142;
              v145[3] = v142;
              uint64_t v138 = 8;
            }
            else if (v71[2])
            {
              uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v72 + v489, v33, v135, v137);
            }
            else
            {
              uint64_t v138 = 0;
              v136[2] = 0u;
              v136[3] = 0u;
              float64x2_t *v136 = 0u;
              v136[1] = 0u;
              long long v139 = (_OWORD *)((char *)v136->f64 + v33);
              v139[2] = 0u;
              v139[3] = 0u;
              *long long v139 = 0u;
              v139[1] = 0u;
              long long v140 = (_OWORD *)((char *)v136->f64 + v75);
              v140[2] = 0u;
              v140[3] = 0u;
              _OWORD *v140 = 0u;
              v140[1] = 0u;
              long long v141 = (_OWORD *)((char *)v136->f64 + v76);
              v141[2] = 0u;
              v141[3] = 0u;
              *long long v141 = 0u;
              v141[1] = 0u;
            }
            uint64_t v164 = v135 + v138;
            long long v165 = (_OWORD *)v136[4].f64;
            unsigned int v166 = v71[3];
            if (v166 == 255)
            {
              float64x2_t v175 = *(float64x2_t *)(v164 + 16);
              long long v176 = *(_OWORD *)(v164 + 32);
              long long v177 = *(_OWORD *)(v164 + 48);
              long long v178 = *(_OWORD *)(v164 + 128);
              long long v179 = *(_OWORD *)(v164 + 144);
              long long v180 = *(_OWORD *)(v164 + 96);
              long long v181 = *(_OWORD *)(v164 + 192);
              long long v182 = *(_OWORD *)(v164 + 208);
              long long v183 = *(_OWORD *)(v164 + 240);
              long long v184 = *(_OWORD *)(v164 + 112);
              float64x2_t v185 = *(float64x2_t *)(v164 + 64);
              float64x2_t v186 = *(float64x2_t *)(v164 + 80);
              long long v187 = *(_OWORD *)(v164 + 160);
              long long v188 = *(_OWORD *)(v164 + 176);
              long long v189 = *(_OWORD *)(v164 + 224);
              *long long v165 = *(_OWORD *)v164;
              v136[5] = v175;
              v136[6] = v185;
              v136[7] = v186;
              uint64_t v190 = (_OWORD *)((char *)v165 + v75);
              float64x2_t v191 = (_OWORD *)((char *)v165 + v33);
              *float64x2_t v191 = v176;
              v191[1] = v177;
              v191[2] = v180;
              v191[3] = v184;
              *uint64_t v190 = v178;
              v190[1] = v179;
              v190[2] = v181;
              v190[3] = v182;
              long long v192 = (_OWORD *)((char *)v165 + v75 + v33);
              uint64_t v167 = 256;
              *long long v192 = v187;
              v192[1] = v188;
              v192[2] = v189;
              v192[3] = v183;
            }
            else if (v166 == 7)
            {
              float64x2_t v171 = vld1q_dup_f64((const double *)v164);
              v136[4] = v171;
              v136[5] = v171;
              v136[6] = v171;
              v136[7] = v171;
              float64x2_t v172 = (float64x2_t *)((char *)v165 + v33);
              *float64x2_t v172 = v171;
              v172[1] = v171;
              v172[2] = v171;
              v172[3] = v171;
              float64x2_t v173 = (float64x2_t *)((char *)v165 + v75);
              *float64x2_t v173 = v171;
              v173[1] = v171;
              v173[2] = v171;
              v173[3] = v171;
              long long v174 = (float64x2_t *)((char *)v165 + v76);
              *long long v174 = v171;
              v174[1] = v171;
              uint64_t v167 = 8;
              v174[2] = v171;
              v174[3] = v171;
            }
            else if (v71[3])
            {
              uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v165, v33, v164, v166);
            }
            else
            {
              uint64_t v167 = 0;
              v136[6] = 0u;
              v136[7] = 0u;
              *long long v165 = 0u;
              v136[5] = 0u;
              long long v168 = (_OWORD *)((char *)v165 + v33);
              v168[2] = 0u;
              v168[3] = 0u;
              *long long v168 = 0u;
              v168[1] = 0u;
              long long v169 = (_OWORD *)((char *)v165 + v75);
              v169[2] = 0u;
              v169[3] = 0u;
              *long long v169 = 0u;
              v169[1] = 0u;
              long long v170 = (_OWORD *)((char *)v165 + v76);
              v170[2] = 0u;
              v170[3] = 0u;
              *long long v170 = 0u;
              v170[1] = 0u;
            }
            uint64_t v193 = v164 + v167;
            long long v194 = (_OWORD *)v72[8].f64;
            unsigned int v195 = v71[4];
            if (v195 == 255)
            {
              float64x2_t v204 = *(float64x2_t *)(v193 + 16);
              long long v205 = *(_OWORD *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 128);
              long long v208 = *(_OWORD *)(v193 + 144);
              long long v209 = *(_OWORD *)(v193 + 96);
              long long v210 = *(_OWORD *)(v193 + 192);
              long long v211 = *(_OWORD *)(v193 + 208);
              long long v212 = *(_OWORD *)(v193 + 240);
              long long v213 = *(_OWORD *)(v193 + 112);
              float64x2_t v214 = *(float64x2_t *)(v193 + 64);
              float64x2_t v215 = *(float64x2_t *)(v193 + 80);
              long long v216 = *(_OWORD *)(v193 + 160);
              long long v217 = *(_OWORD *)(v193 + 176);
              long long v218 = *(_OWORD *)(v193 + 224);
              *long long v194 = *(_OWORD *)v193;
              v72[9] = v204;
              v72[10] = v214;
              v72[11] = v215;
              unsigned int v219 = (_OWORD *)((char *)v194 + v75);
              float64x2_t v220 = (_OWORD *)((char *)v194 + v33);
              _OWORD *v220 = v205;
              v220[1] = v206;
              v220[2] = v209;
              v220[3] = v213;
              *unsigned int v219 = v207;
              v219[1] = v208;
              v219[2] = v210;
              v219[3] = v211;
              long long v221 = (_OWORD *)((char *)v194 + v75 + v33);
              uint64_t v196 = 256;
              _OWORD *v221 = v216;
              v221[1] = v217;
              v221[2] = v218;
              v221[3] = v212;
            }
            else if (v195 == 7)
            {
              float64x2_t v200 = vld1q_dup_f64((const double *)v193);
              v72[8] = v200;
              v72[9] = v200;
              v72[10] = v200;
              v72[11] = v200;
              float64x2_t v201 = (float64x2_t *)((char *)v194 + v33);
              *float64x2_t v201 = v200;
              v201[1] = v200;
              v201[2] = v200;
              v201[3] = v200;
              float64x2_t v202 = (float64x2_t *)((char *)v194 + v75);
              *float64x2_t v202 = v200;
              v202[1] = v200;
              v202[2] = v200;
              v202[3] = v200;
              long long v203 = (float64x2_t *)((char *)v194 + v76);
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 8;
              v203[2] = v200;
              v203[3] = v200;
            }
            else if (v71[4])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v194, v33, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              v72[10] = 0u;
              v72[11] = 0u;
              *long long v194 = 0u;
              v72[9] = 0u;
              long long v197 = (_OWORD *)((char *)v194 + v33);
              v197[2] = 0u;
              v197[3] = 0u;
              *long long v197 = 0u;
              v197[1] = 0u;
              long long v198 = (_OWORD *)((char *)v194 + v75);
              v198[2] = 0u;
              v198[3] = 0u;
              *long long v198 = 0u;
              v198[1] = 0u;
              long long v199 = (_OWORD *)((char *)v194 + v76);
              v199[2] = 0u;
              v199[3] = 0u;
              *long long v199 = 0u;
              v199[1] = 0u;
            }
            uint64_t v222 = v193 + v196;
            long long v223 = (_OWORD *)v72[12].f64;
            unsigned int v224 = v71[5];
            if (v224 == 255)
            {
              float64x2_t v233 = *(float64x2_t *)(v222 + 16);
              long long v234 = *(_OWORD *)(v222 + 32);
              long long v235 = *(_OWORD *)(v222 + 48);
              long long v236 = *(_OWORD *)(v222 + 128);
              long long v237 = *(_OWORD *)(v222 + 144);
              long long v238 = *(_OWORD *)(v222 + 96);
              long long v239 = *(_OWORD *)(v222 + 192);
              long long v240 = *(_OWORD *)(v222 + 208);
              long long v241 = *(_OWORD *)(v222 + 240);
              long long v242 = *(_OWORD *)(v222 + 112);
              float64x2_t v243 = *(float64x2_t *)(v222 + 64);
              float64x2_t v244 = *(float64x2_t *)(v222 + 80);
              long long v245 = *(_OWORD *)(v222 + 160);
              long long v246 = *(_OWORD *)(v222 + 176);
              long long v247 = *(_OWORD *)(v222 + 224);
              *long long v223 = *(_OWORD *)v222;
              v72[13] = v233;
              v72[14] = v243;
              v72[15] = v244;
              unsigned int v248 = (_OWORD *)((char *)v223 + v75);
              float64x2_t v249 = (_OWORD *)((char *)v223 + v33);
              *float64x2_t v249 = v234;
              v249[1] = v235;
              v249[2] = v238;
              v249[3] = v242;
              *unsigned int v248 = v236;
              v248[1] = v237;
              v248[2] = v239;
              v248[3] = v240;
              long long v250 = (_OWORD *)((char *)v223 + v75 + v33);
              uint64_t v225 = 256;
              *long long v250 = v245;
              v250[1] = v246;
              v250[2] = v247;
              v250[3] = v241;
            }
            else if (v224 == 7)
            {
              float64x2_t v229 = vld1q_dup_f64((const double *)v222);
              v72[12] = v229;
              v72[13] = v229;
              v72[14] = v229;
              v72[15] = v229;
              float64x2_t v230 = (float64x2_t *)((char *)v223 + v33);
              float64x2_t *v230 = v229;
              v230[1] = v229;
              v230[2] = v229;
              v230[3] = v229;
              float64x2_t v231 = (float64x2_t *)((char *)v223 + v75);
              float64x2_t *v231 = v229;
              v231[1] = v229;
              v231[2] = v229;
              v231[3] = v229;
              long long v232 = (float64x2_t *)((char *)v223 + v76);
              *long long v232 = v229;
              v232[1] = v229;
              uint64_t v225 = 8;
              v232[2] = v229;
              v232[3] = v229;
            }
            else if (v71[5])
            {
              uint64_t v225 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v223, v33, v222, v224);
            }
            else
            {
              uint64_t v225 = 0;
              v72[14] = 0u;
              v72[15] = 0u;
              *long long v223 = 0u;
              v72[13] = 0u;
              long long v226 = (_OWORD *)((char *)v223 + v33);
              v226[2] = 0u;
              v226[3] = 0u;
              *long long v226 = 0u;
              v226[1] = 0u;
              long long v227 = (_OWORD *)((char *)v223 + v75);
              v227[2] = 0u;
              v227[3] = 0u;
              *long long v227 = 0u;
              v227[1] = 0u;
              long long v228 = (_OWORD *)((char *)v223 + v76);
              v228[2] = 0u;
              v228[3] = 0u;
              *long long v228 = 0u;
              v228[1] = 0u;
            }
            unsigned int v16 = v495;
            uint64_t v251 = v222 + v225;
            long long v252 = (_OWORD *)v136[8].f64;
            unsigned int v253 = v71[6];
            if (v253 == 255)
            {
              float64x2_t v262 = *(float64x2_t *)(v251 + 16);
              long long v263 = *(_OWORD *)(v251 + 32);
              long long v264 = *(_OWORD *)(v251 + 48);
              long long v265 = *(_OWORD *)(v251 + 128);
              long long v266 = *(_OWORD *)(v251 + 144);
              long long v267 = *(_OWORD *)(v251 + 96);
              long long v268 = *(_OWORD *)(v251 + 192);
              long long v269 = *(_OWORD *)(v251 + 208);
              long long v270 = *(_OWORD *)(v251 + 240);
              long long v271 = *(_OWORD *)(v251 + 112);
              float64x2_t v272 = *(float64x2_t *)(v251 + 64);
              float64x2_t v273 = *(float64x2_t *)(v251 + 80);
              long long v274 = *(_OWORD *)(v251 + 160);
              long long v275 = *(_OWORD *)(v251 + 176);
              long long v276 = *(_OWORD *)(v251 + 224);
              *long long v252 = *(_OWORD *)v251;
              v136[9] = v262;
              v136[10] = v272;
              v136[11] = v273;
              int64x2_t v277 = (_OWORD *)((char *)v252 + v75);
              float64x2_t v278 = (_OWORD *)((char *)v252 + v33);
              *float64x2_t v278 = v263;
              v278[1] = v264;
              v278[2] = v267;
              v278[3] = v271;
              *int64x2_t v277 = v265;
              v277[1] = v266;
              v277[2] = v268;
              v277[3] = v269;
              long long v279 = (_OWORD *)((char *)v252 + v75 + v33);
              uint64_t v254 = 256;
              *long long v279 = v274;
              v279[1] = v275;
              v279[2] = v276;
              v279[3] = v270;
            }
            else if (v253 == 7)
            {
              float64x2_t v258 = vld1q_dup_f64((const double *)v251);
              v136[8] = v258;
              v136[9] = v258;
              v136[10] = v258;
              v136[11] = v258;
              float64x2_t v259 = (float64x2_t *)((char *)v252 + v33);
              *float64x2_t v259 = v258;
              v259[1] = v258;
              v259[2] = v258;
              v259[3] = v258;
              float64x2_t v260 = (float64x2_t *)((char *)v252 + v75);
              *float64x2_t v260 = v258;
              v260[1] = v258;
              v260[2] = v258;
              v260[3] = v258;
              long long v261 = (float64x2_t *)((char *)v252 + v76);
              *long long v261 = v258;
              v261[1] = v258;
              uint64_t v254 = 8;
              v261[2] = v258;
              v261[3] = v258;
            }
            else if (v71[6])
            {
              uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v252, v33, v251, v253);
            }
            else
            {
              uint64_t v254 = 0;
              v136[10] = 0u;
              v136[11] = 0u;
              *long long v252 = 0u;
              v136[9] = 0u;
              long long v255 = (_OWORD *)((char *)v252 + v33);
              v255[2] = 0u;
              v255[3] = 0u;
              *long long v255 = 0u;
              v255[1] = 0u;
              long long v256 = (_OWORD *)((char *)v252 + v75);
              v256[2] = 0u;
              v256[3] = 0u;
              *long long v256 = 0u;
              v256[1] = 0u;
              long long v257 = (_OWORD *)((char *)v252 + v76);
              v257[2] = 0u;
              v257[3] = 0u;
              *long long v257 = 0u;
              v257[1] = 0u;
            }
            uint64_t v280 = v251 + v254;
            long long v281 = (_OWORD *)v136[12].f64;
            unsigned int v282 = v71[7];
            if (v282 == 255)
            {
              float64x2_t v290 = *(float64x2_t *)(v280 + 16);
              long long v291 = *(_OWORD *)(v280 + 32);
              long long v292 = *(_OWORD *)(v280 + 48);
              long long v293 = *(_OWORD *)(v280 + 96);
              long long v294 = *(_OWORD *)(v280 + 112);
              float64x2_t v295 = *(float64x2_t *)(v280 + 64);
              float64x2_t v296 = *(float64x2_t *)(v280 + 80);
              long long v297 = *(_OWORD *)(v280 + 128);
              long long v298 = *(_OWORD *)(v280 + 144);
              long long v299 = *(_OWORD *)(v280 + 192);
              long long v300 = *(_OWORD *)(v280 + 208);
              long long v301 = *(_OWORD *)(v280 + 224);
              long long v302 = *(_OWORD *)(v280 + 240);
              long long v303 = *(_OWORD *)(v280 + 160);
              long long v304 = *(_OWORD *)(v280 + 176);
              *long long v281 = *(_OWORD *)v280;
              v136[13] = v290;
              v136[14] = v295;
              v136[15] = v296;
              uint64_t v305 = (_OWORD *)((char *)v281 + v75);
              float64x2_t v306 = (_OWORD *)((char *)v281 + v33);
              *float64x2_t v306 = v291;
              v306[1] = v292;
              v306[2] = v293;
              v306[3] = v294;
              *uint64_t v305 = v297;
              v305[1] = v298;
              v305[2] = v299;
              v305[3] = v300;
              long long v307 = (_OWORD *)((char *)v281 + v75 + v33);
              *long long v307 = v303;
              v307[1] = v304;
              v307[2] = v301;
              v307[3] = v302;
              uint64_t v24 = v505;
            }
            else
            {
              uint64_t v24 = v505;
              if (v282 == 7)
              {
                float64x2_t v286 = vld1q_dup_f64((const double *)v280);
                v136[12] = v286;
                v136[13] = v286;
                v136[14] = v286;
                v136[15] = v286;
                long long v287 = (float64x2_t *)((char *)v281 + v33);
                *long long v287 = v286;
                v287[1] = v286;
                v287[2] = v286;
                v287[3] = v286;
                float64x2_t v288 = (float64x2_t *)((char *)v281 + v75);
                *float64x2_t v288 = v286;
                v288[1] = v286;
                v288[2] = v286;
                v288[3] = v286;
                float64x2_t v289 = (float64x2_t *)((char *)v281 + v76);
                *float64x2_t v289 = v286;
                v289[1] = v286;
                v289[2] = v286;
                v289[3] = v286;
              }
              else if (v282)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)v281, v33, v280, v282);
              }
              else
              {
                v136[14] = 0u;
                v136[15] = 0u;
                *long long v281 = 0u;
                v136[13] = 0u;
                long long v283 = (_OWORD *)((char *)v281 + v33);
                v283[2] = 0u;
                v283[3] = 0u;
                *long long v283 = 0u;
                v283[1] = 0u;
                long long v284 = (_OWORD *)((char *)v281 + v75);
                v284[2] = 0u;
                v284[3] = 0u;
                *long long v284 = 0u;
                v284[1] = 0u;
                long long v285 = (_OWORD *)((char *)v281 + v76);
                v285[2] = 0u;
                v285[3] = 0u;
                *long long v285 = 0u;
                v285[1] = 0u;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v81 = v43 - v41;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v505;
          block[5] = v70;
          char v516 = v45;
          char v517 = v508;
          int v512 = v493;
          unsigned int v513 = v81;
          block[6] = v71;
          v510 = v72;
          uint64_t v33 = a11;
          uint64_t v511 = a11;
          int v514 = v504;
          unsigned int v515 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v505 + 8) + 7384), block);
            unsigned int v16 = v495;
            uint64_t v24 = v505;
LABEL_27:
            unsigned int v40 = v38 + 1;
            goto LABEL_28;
          }
          unsigned int v82 = *v71;
          unsigned int v16 = v495;
          if (v82 == 255)
          {
            float64x2_t v308 = v70[1];
            float64x2_t v309 = v70[2];
            float64x2_t v310 = v70[3];
            float64x2_t v311 = v70[6];
            float64x2_t v312 = v70[7];
            float64x2_t v313 = v70[8];
            float64x2_t v314 = v70[9];
            float64x2_t v315 = v70[11];
            float64x2_t v316 = v70[4];
            float64x2_t v317 = v70[12];
            float64x2_t v318 = v70[13];
            float64x2_t v319 = v70[14];
            float64x2_t v320 = v70[15];
            float64x2_t v321 = v70[5];
            float64x2_t v322 = v70[10];
            float64x2_t v519 = *v70;
            float64x2_t v520 = v308;
            float64x2_t v521 = v316;
            float64x2_t v522 = v321;
            float64x2_t v535 = v309;
            float64x2_t v536 = v310;
            float64x2_t v537 = v311;
            float64x2_t v538 = v312;
            float64x2_t v551 = v313;
            float64x2_t v552 = v314;
            float64x2_t v553 = v317;
            float64x2_t v554 = v318;
            uint64_t v83 = 256;
            float64x2_t v567 = v322;
            float64x2_t v568 = v315;
            float64x2_t v569 = v319;
            float64x2_t v570 = v320;
          }
          else if (v82 == 7)
          {
            float64x2_t v323 = vld1q_dup_f64(v70->f64);
            float64x2_t v519 = v323;
            float64x2_t v520 = v323;
            float64x2_t v521 = v323;
            float64x2_t v522 = v323;
            float64x2_t v535 = v323;
            float64x2_t v536 = v323;
            float64x2_t v537 = v323;
            float64x2_t v538 = v323;
            float64x2_t v551 = v323;
            float64x2_t v552 = v323;
            float64x2_t v553 = v323;
            float64x2_t v554 = v323;
            float64x2_t v567 = v323;
            float64x2_t v568 = v323;
            uint64_t v83 = 8;
            float64x2_t v569 = v323;
            float64x2_t v570 = v323;
          }
          else if (*v71)
          {
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v519, 256, (uint64_t)v70, v82);
          }
          else
          {
            uint64_t v83 = 0;
            float64x2_t v522 = 0u;
            float64x2_t v521 = 0u;
            float64x2_t v520 = 0u;
            float64x2_t v519 = 0u;
            float64x2_t v535 = 0u;
            float64x2_t v536 = 0u;
            float64x2_t v537 = 0u;
            float64x2_t v538 = 0u;
            float64x2_t v551 = 0u;
            float64x2_t v552 = 0u;
            float64x2_t v553 = 0u;
            float64x2_t v554 = 0u;
            float64x2_t v567 = 0u;
            float64x2_t v568 = 0u;
            float64x2_t v569 = 0u;
            float64x2_t v570 = 0u;
          }
          uint64_t v324 = (uint64_t)v70 + v83;
          unsigned int v325 = v71[1];
          if (v325 == 255)
          {
            float64x2_t v327 = *(float64x2_t *)(v324 + 16);
            float64x2_t v328 = *(float64x2_t *)(v324 + 32);
            float64x2_t v329 = *(float64x2_t *)(v324 + 48);
            float64x2_t v330 = *(float64x2_t *)(v324 + 96);
            float64x2_t v331 = *(float64x2_t *)(v324 + 112);
            float64x2_t v332 = *(float64x2_t *)(v324 + 128);
            float64x2_t v333 = *(float64x2_t *)(v324 + 144);
            float64x2_t v334 = *(float64x2_t *)(v324 + 176);
            float64x2_t v335 = *(float64x2_t *)(v324 + 64);
            float64x2_t v336 = *(float64x2_t *)(v324 + 192);
            float64x2_t v337 = *(float64x2_t *)(v324 + 208);
            float64x2_t v338 = *(float64x2_t *)(v324 + 224);
            float64x2_t v339 = *(float64x2_t *)(v324 + 240);
            float64x2_t v340 = *(float64x2_t *)(v324 + 80);
            float64x2_t v341 = *(float64x2_t *)(v324 + 160);
            float64x2_t v523 = *(float64x2_t *)v324;
            float64x2_t v524 = v327;
            float64x2_t v525 = v335;
            float64x2_t v526 = v340;
            float64x2_t v539 = v328;
            float64x2_t v540 = v329;
            float64x2_t v541 = v330;
            float64x2_t v542 = v331;
            float64x2_t v555 = v332;
            float64x2_t v556 = v333;
            float64x2_t v557 = v336;
            float64x2_t v558 = v337;
            uint64_t v326 = 256;
            float64x2_t v571 = v341;
            float64x2_t v572 = v334;
            float64x2_t v573 = v338;
            float64x2_t v574 = v339;
          }
          else if (v325 == 7)
          {
            float64x2_t v342 = vld1q_dup_f64((const double *)v324);
            float64x2_t v523 = v342;
            float64x2_t v524 = v342;
            float64x2_t v525 = v342;
            float64x2_t v526 = v342;
            float64x2_t v539 = v342;
            float64x2_t v540 = v342;
            float64x2_t v541 = v342;
            float64x2_t v542 = v342;
            float64x2_t v555 = v342;
            float64x2_t v556 = v342;
            float64x2_t v557 = v342;
            float64x2_t v558 = v342;
            float64x2_t v571 = v342;
            float64x2_t v572 = v342;
            uint64_t v326 = 8;
            float64x2_t v573 = v342;
            float64x2_t v574 = v342;
          }
          else if (v71[1])
          {
            uint64_t v326 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v523, 256, v324, v325);
          }
          else
          {
            uint64_t v326 = 0;
            float64x2_t v525 = 0u;
            float64x2_t v526 = 0u;
            float64x2_t v523 = 0u;
            float64x2_t v524 = 0u;
            float64x2_t v539 = 0u;
            float64x2_t v540 = 0u;
            float64x2_t v541 = 0u;
            float64x2_t v542 = 0u;
            float64x2_t v555 = 0u;
            float64x2_t v556 = 0u;
            float64x2_t v557 = 0u;
            float64x2_t v558 = 0u;
            float64x2_t v571 = 0u;
            float64x2_t v572 = 0u;
            float64x2_t v573 = 0u;
            float64x2_t v574 = 0u;
          }
          uint64_t v343 = v324 + v326;
          unsigned int v344 = v71[2];
          if (v344 == 255)
          {
            float64x2_t v346 = *(float64x2_t *)(v343 + 16);
            float64x2_t v347 = *(float64x2_t *)(v343 + 32);
            float64x2_t v348 = *(float64x2_t *)(v343 + 48);
            float64x2_t v349 = *(float64x2_t *)(v343 + 96);
            float64x2_t v350 = *(float64x2_t *)(v343 + 112);
            float64x2_t v351 = *(float64x2_t *)(v343 + 128);
            float64x2_t v352 = *(float64x2_t *)(v343 + 144);
            float64x2_t v353 = *(float64x2_t *)(v343 + 176);
            float64x2_t v354 = *(float64x2_t *)(v343 + 64);
            float64x2_t v355 = *(float64x2_t *)(v343 + 192);
            float64x2_t v356 = *(float64x2_t *)(v343 + 208);
            float64x2_t v357 = *(float64x2_t *)(v343 + 224);
            float64x2_t v358 = *(float64x2_t *)(v343 + 240);
            float64x2_t v359 = *(float64x2_t *)(v343 + 80);
            float64x2_t v360 = *(float64x2_t *)(v343 + 160);
            float64x2_t v583 = *(float64x2_t *)v343;
            float64x2_t v584 = v346;
            float64x2_t v585 = v354;
            float64x2_t v586 = v359;
            float64x2_t v599 = v347;
            float64x2_t v600 = v348;
            float64x2_t v601 = v349;
            float64x2_t v602 = v350;
            float64x2_t v615 = v351;
            float64x2_t v616 = v352;
            float64x2_t v617 = v355;
            float64x2_t v618 = v356;
            uint64_t v345 = 256;
            float64x2_t v631 = v360;
            float64x2_t v632 = v353;
            float64x2_t v633 = v357;
            float64x2_t v634 = v358;
          }
          else if (v344 == 7)
          {
            float64x2_t v361 = vld1q_dup_f64((const double *)v343);
            float64x2_t v583 = v361;
            float64x2_t v584 = v361;
            float64x2_t v585 = v361;
            float64x2_t v586 = v361;
            float64x2_t v599 = v361;
            float64x2_t v600 = v361;
            float64x2_t v601 = v361;
            float64x2_t v602 = v361;
            float64x2_t v615 = v361;
            float64x2_t v616 = v361;
            float64x2_t v617 = v361;
            float64x2_t v618 = v361;
            float64x2_t v631 = v361;
            float64x2_t v632 = v361;
            float64x2_t v633 = v361;
            uint64_t v345 = 8;
            float64x2_t v634 = v361;
          }
          else if (v71[2])
          {
            uint64_t v345 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v583, 256, v343, v344);
          }
          else
          {
            uint64_t v345 = 0;
            float64x2_t v585 = 0u;
            float64x2_t v586 = 0u;
            float64x2_t v583 = 0u;
            float64x2_t v584 = 0u;
            float64x2_t v599 = 0u;
            float64x2_t v600 = 0u;
            float64x2_t v601 = 0u;
            float64x2_t v602 = 0u;
            float64x2_t v615 = 0u;
            float64x2_t v616 = 0u;
            float64x2_t v617 = 0u;
            float64x2_t v618 = 0u;
            float64x2_t v631 = 0u;
            float64x2_t v632 = 0u;
            float64x2_t v633 = 0u;
            float64x2_t v634 = 0u;
          }
          uint64_t v362 = v343 + v345;
          unsigned int v363 = v71[3];
          if (v363 == 255)
          {
            float64x2_t v365 = *(float64x2_t *)(v362 + 16);
            float64x2_t v366 = *(float64x2_t *)(v362 + 32);
            float64x2_t v367 = *(float64x2_t *)(v362 + 48);
            float64x2_t v368 = *(float64x2_t *)(v362 + 96);
            float64x2_t v369 = *(float64x2_t *)(v362 + 112);
            float64x2_t v370 = *(float64x2_t *)(v362 + 128);
            float64x2_t v371 = *(float64x2_t *)(v362 + 144);
            float64x2_t v372 = *(float64x2_t *)(v362 + 176);
            float64x2_t v373 = *(float64x2_t *)(v362 + 64);
            float64x2_t v374 = *(float64x2_t *)(v362 + 192);
            float64x2_t v375 = *(float64x2_t *)(v362 + 208);
            float64x2_t v376 = *(float64x2_t *)(v362 + 224);
            float64x2_t v377 = *(float64x2_t *)(v362 + 240);
            float64x2_t v378 = *(float64x2_t *)(v362 + 80);
            float64x2_t v379 = *(float64x2_t *)(v362 + 160);
            float64x2_t v587 = *(float64x2_t *)v362;
            float64x2_t v588 = v365;
            float64x2_t v589 = v373;
            float64x2_t v590 = v378;
            float64x2_t v603 = v366;
            float64x2_t v604 = v367;
            float64x2_t v605 = v368;
            float64x2_t v606 = v369;
            float64x2_t v619 = v370;
            float64x2_t v620 = v371;
            float64x2_t v621 = v374;
            float64x2_t v622 = v375;
            uint64_t v364 = 256;
            float64x2_t v635 = v379;
            float64x2_t v636 = v372;
            float64x2_t v637 = v376;
            float64x2_t v638 = v377;
          }
          else if (v363 == 7)
          {
            float64x2_t v380 = vld1q_dup_f64((const double *)v362);
            float64x2_t v587 = v380;
            float64x2_t v588 = v380;
            float64x2_t v589 = v380;
            float64x2_t v590 = v380;
            float64x2_t v603 = v380;
            float64x2_t v604 = v380;
            float64x2_t v605 = v380;
            float64x2_t v606 = v380;
            float64x2_t v619 = v380;
            float64x2_t v620 = v380;
            float64x2_t v621 = v380;
            float64x2_t v622 = v380;
            float64x2_t v635 = v380;
            float64x2_t v636 = v380;
            float64x2_t v637 = v380;
            uint64_t v364 = 8;
            float64x2_t v638 = v380;
          }
          else if (v71[3])
          {
            uint64_t v364 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v587, 256, v362, v363);
          }
          else
          {
            uint64_t v364 = 0;
            float64x2_t v589 = 0u;
            float64x2_t v590 = 0u;
            float64x2_t v587 = 0u;
            float64x2_t v588 = 0u;
            float64x2_t v603 = 0u;
            float64x2_t v604 = 0u;
            float64x2_t v605 = 0u;
            float64x2_t v606 = 0u;
            float64x2_t v619 = 0u;
            float64x2_t v620 = 0u;
            float64x2_t v621 = 0u;
            float64x2_t v622 = 0u;
            float64x2_t v635 = 0u;
            float64x2_t v636 = 0u;
            float64x2_t v637 = 0u;
            float64x2_t v638 = 0u;
          }
          uint64_t v381 = v362 + v364;
          unsigned int v382 = v71[4];
          if (v382 == 255)
          {
            float64x2_t v384 = *(float64x2_t *)(v381 + 16);
            float64x2_t v385 = *(float64x2_t *)(v381 + 32);
            float64x2_t v386 = *(float64x2_t *)(v381 + 48);
            float64x2_t v387 = *(float64x2_t *)(v381 + 96);
            float64x2_t v388 = *(float64x2_t *)(v381 + 112);
            float64x2_t v389 = *(float64x2_t *)(v381 + 128);
            float64x2_t v390 = *(float64x2_t *)(v381 + 144);
            float64x2_t v391 = *(float64x2_t *)(v381 + 176);
            float64x2_t v392 = *(float64x2_t *)(v381 + 64);
            float64x2_t v393 = *(float64x2_t *)(v381 + 192);
            float64x2_t v394 = *(float64x2_t *)(v381 + 208);
            float64x2_t v395 = *(float64x2_t *)(v381 + 224);
            float64x2_t v396 = *(float64x2_t *)(v381 + 240);
            float64x2_t v397 = *(float64x2_t *)(v381 + 80);
            float64x2_t v398 = *(float64x2_t *)(v381 + 160);
            float64x2_t v527 = *(float64x2_t *)v381;
            float64x2_t v528 = v384;
            float64x2_t v529 = v392;
            float64x2_t v530 = v397;
            float64x2_t v543 = v385;
            float64x2_t v544 = v386;
            float64x2_t v545 = v387;
            float64x2_t v546 = v388;
            float64x2_t v559 = v389;
            float64x2_t v560 = v390;
            float64x2_t v561 = v393;
            float64x2_t v562 = v394;
            uint64_t v383 = 256;
            float64x2_t v575 = v398;
            float64x2_t v576 = v391;
            float64x2_t v577 = v395;
            float64x2_t v578 = v396;
          }
          else if (v382 == 7)
          {
            float64x2_t v399 = vld1q_dup_f64((const double *)v381);
            float64x2_t v527 = v399;
            float64x2_t v528 = v399;
            float64x2_t v529 = v399;
            float64x2_t v530 = v399;
            float64x2_t v543 = v399;
            float64x2_t v544 = v399;
            float64x2_t v545 = v399;
            float64x2_t v546 = v399;
            float64x2_t v559 = v399;
            float64x2_t v560 = v399;
            float64x2_t v561 = v399;
            float64x2_t v562 = v399;
            float64x2_t v575 = v399;
            float64x2_t v576 = v399;
            uint64_t v383 = 8;
            float64x2_t v577 = v399;
            float64x2_t v578 = v399;
          }
          else if (v71[4])
          {
            uint64_t v383 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v527, 256, v381, v382);
          }
          else
          {
            uint64_t v383 = 0;
            float64x2_t v529 = 0u;
            float64x2_t v530 = 0u;
            float64x2_t v527 = 0u;
            float64x2_t v528 = 0u;
            float64x2_t v543 = 0u;
            float64x2_t v544 = 0u;
            float64x2_t v545 = 0u;
            float64x2_t v546 = 0u;
            float64x2_t v559 = 0u;
            float64x2_t v560 = 0u;
            float64x2_t v561 = 0u;
            float64x2_t v562 = 0u;
            float64x2_t v575 = 0u;
            float64x2_t v576 = 0u;
            float64x2_t v577 = 0u;
            float64x2_t v578 = 0u;
          }
          uint64_t v400 = v381 + v383;
          unsigned int v401 = v71[5];
          if (v401 == 255)
          {
            float64x2_t v403 = *(float64x2_t *)(v400 + 16);
            float64x2_t v404 = *(float64x2_t *)(v400 + 32);
            float64x2_t v405 = *(float64x2_t *)(v400 + 48);
            float64x2_t v406 = *(float64x2_t *)(v400 + 96);
            float64x2_t v407 = *(float64x2_t *)(v400 + 112);
            float64x2_t v408 = *(float64x2_t *)(v400 + 128);
            float64x2_t v409 = *(float64x2_t *)(v400 + 144);
            float64x2_t v410 = *(float64x2_t *)(v400 + 176);
            float64x2_t v411 = *(float64x2_t *)(v400 + 64);
            float64x2_t v412 = *(float64x2_t *)(v400 + 192);
            float64x2_t v413 = *(float64x2_t *)(v400 + 208);
            float64x2_t v414 = *(float64x2_t *)(v400 + 224);
            float64x2_t v415 = *(float64x2_t *)(v400 + 240);
            float64x2_t v416 = *(float64x2_t *)(v400 + 80);
            float64x2_t v417 = *(float64x2_t *)(v400 + 160);
            float64x2_t v531 = *(float64x2_t *)v400;
            float64x2_t v532 = v403;
            float64x2_t v533 = v411;
            float64x2_t v534 = v416;
            float64x2_t v547 = v404;
            float64x2_t v548 = v405;
            float64x2_t v549 = v406;
            float64x2_t v550 = v407;
            float64x2_t v563 = v408;
            float64x2_t v564 = v409;
            float64x2_t v565 = v412;
            float64x2_t v566 = v413;
            uint64_t v402 = 256;
            float64x2_t v579 = v417;
            float64x2_t v580 = v410;
            float64x2_t v581 = v414;
            float64x2_t v582 = v415;
          }
          else if (v401 == 7)
          {
            float64x2_t v418 = vld1q_dup_f64((const double *)v400);
            float64x2_t v531 = v418;
            float64x2_t v532 = v418;
            float64x2_t v533 = v418;
            float64x2_t v534 = v418;
            float64x2_t v547 = v418;
            float64x2_t v548 = v418;
            float64x2_t v549 = v418;
            float64x2_t v550 = v418;
            float64x2_t v563 = v418;
            float64x2_t v564 = v418;
            float64x2_t v565 = v418;
            float64x2_t v566 = v418;
            float64x2_t v579 = v418;
            float64x2_t v580 = v418;
            uint64_t v402 = 8;
            float64x2_t v581 = v418;
            float64x2_t v582 = v418;
          }
          else if (v71[5])
          {
            uint64_t v402 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v531, 256, v400, v401);
          }
          else
          {
            uint64_t v402 = 0;
            float64x2_t v533 = 0u;
            float64x2_t v534 = 0u;
            float64x2_t v531 = 0u;
            float64x2_t v532 = 0u;
            float64x2_t v547 = 0u;
            float64x2_t v548 = 0u;
            float64x2_t v549 = 0u;
            float64x2_t v550 = 0u;
            float64x2_t v563 = 0u;
            float64x2_t v564 = 0u;
            float64x2_t v565 = 0u;
            float64x2_t v566 = 0u;
            float64x2_t v579 = 0u;
            float64x2_t v580 = 0u;
            float64x2_t v581 = 0u;
            float64x2_t v582 = 0u;
          }
          uint64_t v419 = v400 + v402;
          unsigned int v420 = v71[6];
          if (v420 == 255)
          {
            float64x2_t v422 = *(float64x2_t *)(v419 + 16);
            float64x2_t v423 = *(float64x2_t *)(v419 + 32);
            float64x2_t v424 = *(float64x2_t *)(v419 + 48);
            float64x2_t v425 = *(float64x2_t *)(v419 + 96);
            float64x2_t v426 = *(float64x2_t *)(v419 + 112);
            float64x2_t v427 = *(float64x2_t *)(v419 + 128);
            float64x2_t v428 = *(float64x2_t *)(v419 + 144);
            float64x2_t v429 = *(float64x2_t *)(v419 + 176);
            float64x2_t v430 = *(float64x2_t *)(v419 + 64);
            float64x2_t v431 = *(float64x2_t *)(v419 + 192);
            float64x2_t v432 = *(float64x2_t *)(v419 + 208);
            float64x2_t v433 = *(float64x2_t *)(v419 + 224);
            float64x2_t v434 = *(float64x2_t *)(v419 + 240);
            float64x2_t v435 = *(float64x2_t *)(v419 + 80);
            float64x2_t v436 = *(float64x2_t *)(v419 + 160);
            float64x2_t v591 = *(float64x2_t *)v419;
            float64x2_t v592 = v422;
            float64x2_t v593 = v430;
            float64x2_t v594 = v435;
            float64x2_t v607 = v423;
            float64x2_t v608 = v424;
            float64x2_t v609 = v425;
            float64x2_t v610 = v426;
            float64x2_t v623 = v427;
            float64x2_t v624 = v428;
            float64x2_t v625 = v431;
            float64x2_t v626 = v432;
            uint64_t v421 = 256;
            float64x2_t v639 = v436;
            float64x2_t v640 = v429;
            float64x2_t v641 = v433;
            float64x2_t v642 = v434;
          }
          else if (v420 == 7)
          {
            float64x2_t v437 = vld1q_dup_f64((const double *)v419);
            float64x2_t v591 = v437;
            float64x2_t v592 = v437;
            float64x2_t v593 = v437;
            float64x2_t v594 = v437;
            float64x2_t v607 = v437;
            float64x2_t v608 = v437;
            float64x2_t v609 = v437;
            float64x2_t v610 = v437;
            float64x2_t v623 = v437;
            float64x2_t v624 = v437;
            float64x2_t v625 = v437;
            float64x2_t v626 = v437;
            float64x2_t v639 = v437;
            float64x2_t v640 = v437;
            float64x2_t v641 = v437;
            uint64_t v421 = 8;
            float64x2_t v642 = v437;
          }
          else if (v71[6])
          {
            uint64_t v421 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v591, 256, v419, v420);
          }
          else
          {
            uint64_t v421 = 0;
            float64x2_t v593 = 0u;
            float64x2_t v594 = 0u;
            float64x2_t v591 = 0u;
            float64x2_t v592 = 0u;
            float64x2_t v607 = 0u;
            float64x2_t v608 = 0u;
            float64x2_t v609 = 0u;
            float64x2_t v610 = 0u;
            float64x2_t v623 = 0u;
            float64x2_t v624 = 0u;
            float64x2_t v625 = 0u;
            float64x2_t v626 = 0u;
            float64x2_t v639 = 0u;
            float64x2_t v640 = 0u;
            float64x2_t v641 = 0u;
            float64x2_t v642 = 0u;
          }
          uint64_t v438 = v419 + v421;
          unsigned int v439 = v71[7];
          if (v439 == 255)
          {
            float64x2_t v442 = *(float64x2_t *)(v438 + 16);
            float64x2_t v443 = *(float64x2_t *)(v438 + 32);
            float64x2_t v444 = *(float64x2_t *)(v438 + 48);
            float64x2_t v445 = *(float64x2_t *)(v438 + 96);
            float64x2_t v446 = *(float64x2_t *)(v438 + 112);
            float64x2_t v447 = *(float64x2_t *)(v438 + 64);
            float64x2_t v448 = *(float64x2_t *)(v438 + 128);
            float64x2_t v449 = *(float64x2_t *)(v438 + 144);
            float64x2_t v450 = *(float64x2_t *)(v438 + 80);
            float64x2_t v451 = *(float64x2_t *)(v438 + 192);
            float64x2_t v452 = *(float64x2_t *)(v438 + 208);
            float64x2_t v453 = *(float64x2_t *)(v438 + 224);
            float64x2_t v454 = *(float64x2_t *)(v438 + 240);
            float64x2_t v455 = *(float64x2_t *)(v438 + 160);
            float64x2_t v456 = *(float64x2_t *)(v438 + 176);
            float64x2_t v595 = *(float64x2_t *)v438;
            float64x2_t v596 = v442;
            float64x2_t v597 = v447;
            float64x2_t v598 = v450;
            float64x2_t v611 = v443;
            float64x2_t v612 = v444;
            float64x2_t v613 = v445;
            float64x2_t v614 = v446;
            float64x2_t v627 = v448;
            float64x2_t v628 = v449;
            float64x2_t v629 = v451;
            float64x2_t v630 = v452;
            unsigned int v440 = v504;
            unsigned int v441 = v493;
            float64x2_t v643 = v455;
            float64x2_t v644 = v456;
            float64x2_t v645 = v453;
            float64x2_t v646 = v454;
            uint64_t v24 = v505;
            unsigned int v40 = v38 + 1;
          }
          else
          {
            uint64_t v24 = v505;
            unsigned int v40 = v38 + 1;
            if (v439 == 7)
            {
              float64x2_t v457 = vld1q_dup_f64((const double *)v438);
              float64x2_t v595 = v457;
              float64x2_t v596 = v457;
              float64x2_t v597 = v457;
              float64x2_t v598 = v457;
              float64x2_t v611 = v457;
              float64x2_t v612 = v457;
              float64x2_t v613 = v457;
              float64x2_t v614 = v457;
              float64x2_t v627 = v457;
              float64x2_t v628 = v457;
              float64x2_t v629 = v457;
              float64x2_t v630 = v457;
              float64x2_t v643 = v457;
              float64x2_t v644 = v457;
              float64x2_t v645 = v457;
              unsigned int v440 = v504;
              unsigned int v441 = v493;
              float64x2_t v646 = v457;
            }
            else if (v439)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((uint64_t)&v595, 256, v438, v439);
              unsigned int v441 = v512;
              unsigned int v81 = v513;
              unsigned int v440 = v514;
            }
            else
            {
              float64x2_t v597 = 0u;
              float64x2_t v598 = 0u;
              float64x2_t v595 = 0u;
              float64x2_t v596 = 0u;
              float64x2_t v611 = 0u;
              float64x2_t v612 = 0u;
              float64x2_t v613 = 0u;
              float64x2_t v614 = 0u;
              float64x2_t v627 = 0u;
              float64x2_t v628 = 0u;
              float64x2_t v629 = 0u;
              float64x2_t v630 = 0u;
              float64x2_t v643 = 0u;
              float64x2_t v644 = 0u;
              unsigned int v440 = v504;
              unsigned int v441 = v493;
              float64x2_t v645 = 0u;
              float64x2_t v646 = 0u;
            }
          }
          if (v440)
          {
            unint64_t v458 = 0;
            float64x2_t v459 = (_OWORD *)&v519.f64[32 * (unint64_t)v441 + 2 * v81];
            unsigned int v460 = v515;
            do
            {
              if (v460)
              {
                uint64_t v461 = 0;
                float64x2_t v462 = (char *)v510 + v511 * v458;
                do
                {
                  v462[v461] = *((unsigned char *)v459 + v461);
                  ++v461;
                  unsigned int v460 = v515;
                }
                while (16 * (unint64_t)v515 > v461);
                unsigned int v440 = v514;
              }
              ++v458;
              v459 += 16;
            }
            while (v458 < v440);
          }
LABEL_28:
          BOOL v29 = v38 == v496 >> 4;
          unsigned int v38 = v40;
        }
        while (!v29);
        BOOL v29 = v25++ == v486;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v134 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v127 = v20;
  uint64_t v128 = v21;
  uint64_t v112 = v22;
  uint64_t v23 = v12;
  uint64_t v154 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v131 = v14;
  unsigned int v114 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v113 = v114 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  unsigned int v32 = v134;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v125 = 0;
LABEL_32:
      unsigned int v122 = v34 - 4;
      unsigned int v118 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v111 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v125 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v125 = 0;
  unsigned int v111 = 0;
  unsigned int v118 = 0;
  unsigned int v122 = 0;
LABEL_33:
  if (v27 <= v113)
  {
    unsigned int v124 = v134 + a9 - 1;
    if (v134 >> 4 <= v124 >> 4)
    {
      unsigned int v133 = v25 >> 4;
      unsigned int v110 = v26 >> 3;
      int v132 = (v25 & 0xF) + 1;
      int v109 = (v26 & 7) + 1;
      uint64_t v120 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v119 = v42.i32[0] | v42.i32[1];
      int8x8_t v117 = v42;
      BOOL v115 = v42.i32[1] != 0;
      BOOL v116 = v42.i32[0] != 0;
      uint64_t v123 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v131) {
          int v44 = v131;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v114 < v43) {
          unsigned int v43 = v114;
        }
        int v121 = v44 - 8 * v27;
        int v130 = v43 - v44 + 1;
        unsigned int v45 = v134 >> 4;
        int v46 = v109;
        if (v27 != v110) {
          int v46 = 8;
        }
        unsigned int v135 = v46;
        uint64_t v129 = v112 + (v44 - v131) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v124 < v48) {
            unsigned int v48 = v134 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v133) {
            unsigned int v51 = v132;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v131 && v47 >= v32)
          {
            int v53 = v132;
            if (v45 != v133) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v130 != v135;
          }
          if (v125)
          {
            if (v122 | v118)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v122 != 0;
              int v58 = 1;
              BOOL v60 = v118 != 0;
              unsigned int v59 = v118;
              unsigned int v61 = v122;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v118) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v122) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v122) + (v27 >> v118) * v111) + (v56 << 11);
          }
          else
          {
            if (v119)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v115;
              BOOL v66 = v116;
              __int32 v67 = v117.i32[0];
              __int32 v68 = v117.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v127 + v69);
          if (v126)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v134;
            uint64_t v83 = __dst;
          }
          unint64_t v85 = (unsigned __int8 *)(v128 + 8 * v77);
          uint64_t v86 = (_OWORD *)(v129 + 16 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v135 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v123;
            block[5] = v83;
            char v143 = v51;
            char v144 = v135;
            unsigned int v139 = v121;
            unsigned int v140 = v49 - v47;
            block[6] = v85;
            uint64_t v137 = v129 + 16 * (v49 - v32);
            uint64_t v138 = a11;
            unsigned int v141 = v130;
            unsigned int v142 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v123 + 8) + 7384), block);
              unsigned int v32 = v134;
              uint64_t v23 = v123;
            }
            else
            {
              uint64_t v96 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 256, (uint64_t)v83, *v85)];
              uint64_t v97 = v96
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 256, v96, v85[1]);
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v97, v85[2]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v98, v85[3]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, v99, v85[4]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v100, v85[5]);
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v101, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v101 + v102, v85[7]);
              unint64_t v103 = v141;
              uint64_t v23 = v123;
              if (v141)
              {
                unint64_t v104 = 0;
                float64x2_t v105 = &v146[16 * (unint64_t)v139 + v140];
                unsigned int v106 = v142;
                do
                {
                  if (v106)
                  {
                    uint64_t v107 = 0;
                    uint64_t v108 = v137 + v138 * v104;
                    do
                    {
                      *(unsigned char *)(v108 + v107) = *((unsigned char *)v105 + v107);
                      ++v107;
                      unsigned int v106 = v142;
                    }
                    while (16 * (unint64_t)v142 > v107);
                    unint64_t v103 = v141;
                  }
                  ++v104;
                  v105 += 16;
                }
                while (v104 < v103);
              }
              unsigned int v32 = v134;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v88, v85[1]);
            float64x2_t v90 = (char *)v86 + v120;
            uint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v120), a11, v89, v85[2]);
            uint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v120 + 64), a11, v91, v85[3]);
            uint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v92, v85[4]);
            uint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 12, a11, v93, v85[5]);
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v90 + 8, a11, v94, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v90 + 12, a11, v94 + v95, v85[7]);
            unsigned int v32 = v134;
            uint64_t v23 = v123;
          }
          BOOL v28 = v45++ == v124 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v113;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v134 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v127 = v20;
  uint64_t v128 = v21;
  uint64_t v112 = v22;
  uint64_t v23 = v12;
  uint64_t v154 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v131 = v14;
  unsigned int v114 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v113 = v114 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  unsigned int v32 = v134;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v125 = 0;
LABEL_32:
      unsigned int v122 = v34 - 4;
      unsigned int v118 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v111 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v125 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v125 = 0;
  unsigned int v111 = 0;
  unsigned int v118 = 0;
  unsigned int v122 = 0;
LABEL_33:
  if (v27 <= v113)
  {
    unsigned int v124 = v134 + a9 - 1;
    if (v134 >> 4 <= v124 >> 4)
    {
      unsigned int v133 = v25 >> 4;
      unsigned int v110 = v26 >> 3;
      int v132 = (v25 & 0xF) + 1;
      int v109 = (v26 & 7) + 1;
      uint64_t v120 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v119 = v42.i32[0] | v42.i32[1];
      int8x8_t v117 = v42;
      BOOL v115 = v42.i32[1] != 0;
      BOOL v116 = v42.i32[0] != 0;
      uint64_t v123 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v131) {
          int v44 = v131;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v114 < v43) {
          unsigned int v43 = v114;
        }
        int v121 = v44 - 8 * v27;
        int v130 = v43 - v44 + 1;
        unsigned int v45 = v134 >> 4;
        int v46 = v109;
        if (v27 != v110) {
          int v46 = 8;
        }
        unsigned int v135 = v46;
        uint64_t v129 = v112 + (v44 - v131) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v124 < v48) {
            unsigned int v48 = v134 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v133) {
            unsigned int v51 = v132;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v131 && v47 >= v32)
          {
            int v53 = v132;
            if (v45 != v133) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v130 != v135;
          }
          if (v125)
          {
            if (v122 | v118)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v122 != 0;
              int v58 = 1;
              BOOL v60 = v118 != 0;
              unsigned int v59 = v118;
              unsigned int v61 = v122;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v118) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v122) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v122) + (v27 >> v118) * v111) + (v56 << 11);
          }
          else
          {
            if (v119)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v115;
              BOOL v66 = v116;
              __int32 v67 = v117.i32[0];
              __int32 v68 = v117.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 11;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          uint64_t v83 = (unsigned char *)(v127 + v69);
          if (v126)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v134;
            uint64_t v83 = __dst;
          }
          unint64_t v85 = (unsigned __int8 *)(v128 + 8 * v77);
          uint64_t v86 = (_OWORD *)(v129 + 16 * (v49 - v32));
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v135 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v123;
            block[5] = v83;
            char v143 = v51;
            char v144 = v135;
            unsigned int v139 = v121;
            unsigned int v140 = v49 - v47;
            block[6] = v85;
            uint64_t v137 = v129 + 16 * (v49 - v32);
            uint64_t v138 = a11;
            unsigned int v141 = v130;
            unsigned int v142 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v123 + 8) + 7384), block);
              unsigned int v32 = v134;
              uint64_t v23 = v123;
            }
            else
            {
              uint64_t v96 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v146, 256, (uint64_t)v83, *v85)];
              uint64_t v97 = v96
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 256, v96, v85[1]);
              uint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v97, v85[2]);
              uint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v98, v85[3]);
              uint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, v99, v85[4]);
              uint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v100, v85[5]);
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v101, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v101 + v102, v85[7]);
              unint64_t v103 = v141;
              uint64_t v23 = v123;
              if (v141)
              {
                unint64_t v104 = 0;
                float64x2_t v105 = &v146[16 * (unint64_t)v139 + v140];
                unsigned int v106 = v142;
                do
                {
                  if (v106)
                  {
                    uint64_t v107 = 0;
                    uint64_t v108 = v137 + v138 * v104;
                    do
                    {
                      *(unsigned char *)(v108 + v107) = *((unsigned char *)v105 + v107);
                      ++v107;
                      unsigned int v106 = v142;
                    }
                    while (16 * (unint64_t)v142 > v107);
                    unint64_t v103 = v141;
                  }
                  ++v104;
                  v105 += 16;
                }
                while (v104 < v103);
              }
              unsigned int v32 = v134;
            }
          }
          else
          {
            uint64_t v88 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (uint64_t)v83, *v85)];
            uint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 4, a11, v88, v85[1]);
            float64x2_t v90 = (char *)v86 + v120;
            uint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v120), a11, v89, v85[2]);
            uint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v86 + v120 + 64), a11, v91, v85[3]);
            uint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 8, a11, v92, v85[4]);
            uint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 12, a11, v93, v85[5]);
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v90 + 8, a11, v94, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)v90 + 12, a11, v94 + v95, v85[7]);
            unsigned int v32 = v134;
            uint64_t v23 = v123;
          }
          BOOL v28 = v45++ == v124 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v113;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v128 = v21;
  uint64_t v129 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  uint64_t v155 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v127 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v125 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v125 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 3;
      int v134 = ((v20 - 1) & 0xF) + 1;
      unsigned int v135 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 7) + 1;
      uint64_t v119 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v124 = v34.i32[0] | v34.i32[1];
      int8x8_t v123 = v34;
      BOOL v121 = v34.i32[1] != 0;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v133) {
          int v36 = v133;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v120 = v36 - 8 * v25;
        int v131 = v35 - v36 + 1;
        unsigned int v132 = 8 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 8;
        }
        unsigned int v136 = v38;
        uint64_t v130 = v117 + (v36 - v133) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v125 < v40) {
            unsigned int v40 = v125;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v135) {
            unsigned int v43 = v134;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v132 >= v133 && v39 >= v16)
          {
            int v45 = v134;
            if (v37 != v135) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v131 != v136;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v100 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v101 = 0;
            }
            else {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
            }
            unsigned int v102 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v103 = 0;
              if (v101) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if (v103 | v101)
              {
LABEL_121:
                int v104 = 0;
                uint64_t v105 = 0;
                int v106 = v37 & v100;
                int v107 = v25 & v102;
                BOOL v108 = v103 != 0;
                BOOL v109 = v101 != 0;
                int v110 = 1;
                do
                {
                  --v103;
                  if (v108) {
                    v105 |= (unint64_t)(v110 & v107) << v104++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v101;
                  if (v109) {
                    v105 |= (unint64_t)(v110 & v106) << v104++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v110 *= 2;
                  --v104;
                  BOOL v109 = v101 != 0;
                  BOOL v108 = v103 != 0;
                }
                while (v101 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v105 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v132 / v72 * ((v68 + v112) / v68)) << 14) + (v105 << 11);
            goto LABEL_60;
          }
          if (v124)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v121;
            BOOL v51 = v122;
            __int32 v52 = v123.i32[0];
            __int32 v53 = v123.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v128 + v54);
          if (v127)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v128 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v129 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (_OWORD *)(v130 + 16 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v136 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119), a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 64), a11, v82, v76[3]);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v83, v76[4]);
            uint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 12, a11, v84, v76[5]);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 128), a11, v85, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 192), a11, v85 + v86, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v144 = v43;
          char v145 = v136;
          unsigned int v140 = v120;
          unsigned int v141 = v41 - v39;
          block[6] = v76;
          uint64_t v138 = v78;
          uint64_t v139 = a11;
          unsigned int v142 = v131;
          unsigned int v143 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v87 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 256, (uint64_t)v73, *v76)];
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, v87, v76[1]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v88, v76[2]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v89, v76[3]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v90, v76[4]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v91, v76[5]);
          uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v92, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v92 + v93, v76[7]);
          unint64_t v94 = v142;
          uint64_t v16 = v77;
          if (v142)
          {
            unint64_t v95 = 0;
            uint64_t v96 = &v147[16 * (unint64_t)v140 + v141];
            unsigned int v97 = v143;
            do
            {
              if (v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = (char *)v138 + v139 * v95;
                do
                {
                  v99[v98] = *((unsigned char *)v96 + v98);
                  ++v98;
                  unsigned int v97 = v143;
                }
                while (16 * (unint64_t)v143 > v98);
                unint64_t v94 = v142;
              }
              ++v95;
              v96 += 16;
            }
            while (v95 < v94);
          }
LABEL_28:
          BOOL v29 = v37++ == v125 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v128 = v21;
  uint64_t v129 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  uint64_t v155 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v127 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v125 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v125 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 3;
      int v134 = ((v20 - 1) & 0xF) + 1;
      unsigned int v135 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 7) + 1;
      uint64_t v119 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v124 = v34.i32[0] | v34.i32[1];
      int8x8_t v123 = v34;
      BOOL v121 = v34.i32[1] != 0;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v133) {
          int v36 = v133;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v120 = v36 - 8 * v25;
        int v131 = v35 - v36 + 1;
        unsigned int v132 = 8 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 8;
        }
        unsigned int v136 = v38;
        uint64_t v130 = v117 + (v36 - v133) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v125 < v40) {
            unsigned int v40 = v125;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v135) {
            unsigned int v43 = v134;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v132 >= v133 && v39 >= v16)
          {
            int v45 = v134;
            if (v37 != v135) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v131 != v136;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v100 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v101 = 0;
            }
            else {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
            }
            unsigned int v102 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v103 = 0;
              if (v101) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if (v103 | v101)
              {
LABEL_121:
                int v104 = 0;
                uint64_t v105 = 0;
                int v106 = v37 & v100;
                int v107 = v25 & v102;
                BOOL v108 = v103 != 0;
                BOOL v109 = v101 != 0;
                int v110 = 1;
                do
                {
                  --v103;
                  if (v108) {
                    v105 |= (unint64_t)(v110 & v107) << v104++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v101;
                  if (v109) {
                    v105 |= (unint64_t)(v110 & v106) << v104++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v110 *= 2;
                  --v104;
                  BOOL v109 = v101 != 0;
                  BOOL v108 = v103 != 0;
                }
                while (v101 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v105 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v132 / v72 * ((v68 + v112) / v68)) << 14) + (v105 << 11);
            goto LABEL_60;
          }
          if (v124)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v121;
            BOOL v51 = v122;
            __int32 v52 = v123.i32[0];
            __int32 v53 = v123.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 11;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v128 + v54);
          if (v127)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v128 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v129 + 8 * v62);
          uint64_t v77 = v16;
          BOOL v78 = (_OWORD *)(v130 + 16 * (v41 - v16));
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v136 > 7)
          {
            uint64_t v80 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v73, *v76)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 4, a11, v80, v76[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119), a11, v81, v76[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 64), a11, v82, v76[3]);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 8, a11, v83, v76[4]);
            uint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 12, a11, v84, v76[5]);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 128), a11, v85, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v78 + v119 + 192), a11, v85 + v86, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v144 = v43;
          char v145 = v136;
          unsigned int v140 = v120;
          unsigned int v141 = v41 - v39;
          block[6] = v76;
          uint64_t v138 = v78;
          uint64_t v139 = a11;
          unsigned int v142 = v131;
          unsigned int v143 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          uint64_t v87 = (uint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v147, 256, (uint64_t)v73, *v76)];
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v148, 256, v87, v76[1]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v151, 256, v88, v76[2]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v152, 256, v89, v76[3]);
          uint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v149, 256, v90, v76[4]);
          uint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v150, 256, v91, v76[5]);
          uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v153, 256, v92, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v154, 256, v92 + v93, v76[7]);
          unint64_t v94 = v142;
          uint64_t v16 = v77;
          if (v142)
          {
            unint64_t v95 = 0;
            uint64_t v96 = &v147[16 * (unint64_t)v140 + v141];
            unsigned int v97 = v143;
            do
            {
              if (v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = (char *)v138 + v139 * v95;
                do
                {
                  v99[v98] = *((unsigned char *)v96 + v98);
                  ++v98;
                  unsigned int v97 = v143;
                }
                while (16 * (unint64_t)v143 > v98);
                unint64_t v94 = v142;
              }
              ++v95;
              v96 += 16;
            }
            while (v95 < v94);
          }
LABEL_28:
          BOOL v29 = v37++ == v125 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                uint64_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                uint64_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *uint64_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              BOOL v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              int v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              unsigned int v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              char v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              unsigned int v141 = (uint64_t *)((char *)v137->i64 + v88);
              *unsigned int v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              float64x2_t v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              long long v153 = (uint64_t *)((char *)v149->i64 + v88);
              *long long v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            unsigned int v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              long long v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *unsigned int v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              float64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *unsigned int v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              uint64_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *uint64_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              unsigned int v166 = (uint64_t *)((char *)v161->i64 + v251);
              *unsigned int v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            float64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *float64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              long long v182 = (float64x2_t *)&v173->i8[v88];
              *long long v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *float64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                float64x2_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                long long v176 = (uint64_t *)((char *)v173->i64 + v88);
                *long long v176 = 0;
                v176[1] = 0;
                long long v177 = (uint64_t *)((char *)v173->i64 + v251);
                *long long v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          long long v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            long long v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            float64x2_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            long long v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            long long v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            long long v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            long long v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            long long v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            long long v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                long long v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                uint64_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                uint64_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *uint64_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              BOOL v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              int v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              unsigned int v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              char v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              unsigned int v141 = (uint64_t *)((char *)v137->i64 + v88);
              *unsigned int v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              float64x2_t v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              long long v153 = (uint64_t *)((char *)v149->i64 + v88);
              *long long v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            unsigned int v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              long long v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *unsigned int v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              float64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *unsigned int v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              uint64_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *uint64_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              unsigned int v166 = (uint64_t *)((char *)v161->i64 + v251);
              *unsigned int v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            float64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *float64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              long long v182 = (float64x2_t *)&v173->i8[v88];
              *long long v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *float64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                float64x2_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                long long v176 = (uint64_t *)((char *)v173->i64 + v88);
                *long long v176 = 0;
                v176[1] = 0;
                long long v177 = (uint64_t *)((char *)v173->i64 + v251);
                *long long v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          long long v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            long long v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            float64x2_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            long long v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            long long v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            long long v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            long long v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            long long v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            long long v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                long long v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v312 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v265 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v246 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v265 >> 3;
  unsigned int v245 = v246 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v259 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v258 = 0;
LABEL_32:
      unsigned int v256 = v27 - 4;
      unsigned int v250 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v243 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v258 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v258 = 0;
  unsigned int v243 = 0;
  unsigned int v250 = 0;
  unsigned int v256 = 0;
LABEL_33:
  if (v21 <= v245)
  {
    unsigned int v257 = a7 + a9 - 1;
    if (a7 >> 4 <= v257 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v268 = v19 >> 4;
      unsigned int v242 = v20 >> 3;
      int v267 = (v19 & 0xF) + 1;
      int v241 = (v20 & 7) + 1;
      uint64_t v254 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v253 = v36.i32[0] | v36.i32[1];
      int8x8_t v249 = v36;
      BOOL v248 = v36.i32[0] != 0;
      BOOL v247 = v36.i32[1] != 0;
      uint64_t v266 = a1;
      uint64_t v251 = 3 * a11;
      uint64_t v252 = 2 * a11;
      do
      {
        unsigned int v37 = (8 * v21) | 7;
        if (8 * v21 <= v265) {
          int v38 = v265;
        }
        else {
          int v38 = 8 * v21;
        }
        if (v246 < v37) {
          unsigned int v37 = v246;
        }
        int v255 = v38 - 8 * v21;
        int v263 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        int v40 = v241;
        if (v21 != v242) {
          int v40 = 8;
        }
        unsigned int v269 = v40;
        uint64_t v41 = v21 & ~(-1 << v250);
        uint64_t v262 = a2 + (v38 - v265) * v34;
        unsigned int v42 = a7;
        do
        {
          unsigned int v44 = 16 * v39;
          unsigned int v45 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v42) {
            int v46 = v42;
          }
          else {
            int v46 = 16 * v39;
          }
          if (v257 < v45) {
            unsigned int v45 = a7 + a9 - 1;
          }
          int v47 = v45 - v46 + 1;
          if (v39 == v268) {
            unsigned int v48 = v267;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (8 * v21 >= v265 && v44 >= v42)
          {
            int v50 = v267;
            if (v39 != v268) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v263 != v269;
          }
          if (v258)
          {
            if (v256 | v250)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v250 != 0;
              BOOL v56 = v256 != 0;
              unsigned int v57 = v250;
              unsigned int v58 = v256;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v39 & ~(-1 << v256) & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(v17 + 320) * ((v39 >> v256) + (v21 >> v250) * v243) + (v53 << 9);
          }
          else
          {
            if (v253)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v248;
              BOOL v63 = v247;
              __int32 v64 = v249.i32[0];
              __int32 v65 = v249.i32[1];
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v21) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v39) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 7;
          if (v71 < 0x10)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_115:
              unint64_t v74 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 3) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_115;
            }
          }
          int v73 = 0;
          unint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            BOOL v78 = !v75;
            if (v75)
            {
              unint64_t v79 = ((unint64_t)(v77 & v39) << v73) | v74;
            }
            else
            {
              unsigned int v69 = 0;
              unint64_t v79 = v74;
            }
            if (!v78) {
              ++v73;
            }
            --v72;
            if (v76)
            {
              unint64_t v74 = ((unint64_t)(v77 & v21) << v73) | v79;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v74 = v79;
            }
            if (v76) {
              ++v73;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_116:
          uint64_t v80 = (unsigned char *)(a3 + v66);
          if (v259)
          {
            uint64_t v81 = v41;
            int v82 = v47;
            BOOL v83 = v49;
            memcpy(__dst, (const void *)(a3 + v66), sizeof(__dst));
            BOOL v49 = v83;
            int v47 = v82;
            uint64_t v41 = v81;
            uint64_t v80 = __dst;
          }
          uint64_t v84 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v85 = (int64x2_t *)(v262 + 4 * (v46 - v42));
          char v86 = v48 < 0x10 || v49;
          if ((v86 & 1) == 0 && v269 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 63)
            {
              uint64_t v96 = (const double *)(v80 + 32);
              float64x2x2_t v313 = vld2q_f64(v96);
              int64x2_t v97 = *(int64x2_t *)v80;
              int64x2_t v98 = *((int64x2_t *)v80 + 1);
              int64x2_t *v85 = vzip1q_s64(*(int64x2_t *)v80, v98);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v85 + a11) = vzip2q_s64(v97, v98);
              uint64_t v88 = 2 * a11;
              uint64_t v99 = (float64x2_t *)&v85->i8[v252];
              *uint64_t v99 = v313.val[0];
              *(float64x2_t *)((char *)v99 + a11) = v313.val[1];
              uint64_t v89 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v88 = 2 * a11;
              if (v87 == 1)
              {
                int16x8_t v95 = vld1q_dup_s16((const __int16 *)v80);
                int64x2_t *v85 = (int64x2_t)v95;
                *(int16x8_t *)((char *)v85 + a11) = v95;
                *(int16x8_t *)((char *)v85 + 2 * a11) = v95;
                *(int16x8_t *)((char *)v85 + 3 * a11) = v95;
                uint64_t v89 = 2;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v80, v87);
              }
              else
              {
                uint64_t v89 = 0;
                v85->i64[0] = 0;
                v85->i64[1] = 0;
                int64x2_t v90 = (uint64_t *)((char *)v85->i64 + a11);
                void *v90 = 0;
                v90[1] = 0;
                int64x2_t v91 = (uint64_t *)((char *)v85->i64 + v252);
                *int64x2_t v91 = 0;
                v91[1] = 0;
                uint64_t v92 = (uint64_t *)((char *)v85->i64 + v251);
                void *v92 = 0;
                v92[1] = 0;
              }
            }
            uint64_t v100 = (uint64_t)&v80[v89];
            unsigned int v101 = v85 + 1;
            unsigned int v102 = v84[1];
            if (v102 == 63)
            {
              uint64_t v108 = (const double *)(v100 + 32);
              float64x2x2_t v314 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v100;
              int64x2_t v110 = *(int64x2_t *)(v100 + 16);
              *unsigned int v101 = vzip1q_s64(*(int64x2_t *)v100, v110);
              *(int64x2_t *)((char *)v101 + v34) = vzip2q_s64(v109, v110);
              unint64_t v111 = (float64x2_t *)&v101->i8[v88];
              *unint64_t v111 = v314.val[0];
              *(float64x2_t *)((char *)v111 + v34) = v314.val[1];
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v107 = vld1q_dup_s16((const __int16 *)v100);
              *unsigned int v101 = (int64x2_t)v107;
              *(int16x8_t *)((char *)v101 + v34) = v107;
              *(int16x8_t *)((char *)v101 + v88) = v107;
              *(int16x8_t *)((char *)v101 + 3 * a11) = v107;
              uint64_t v103 = 2;
            }
            else if (v84[1])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v101, v34, v100, v102);
            }
            else
            {
              uint64_t v103 = 0;
              v101->i64[0] = 0;
              v85[1].i64[1] = 0;
              int v104 = (uint64_t *)((char *)v101->i64 + v34);
              *int v104 = 0;
              v104[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v101->i64 + v88);
              void *v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v101->i64 + v251);
              void *v106 = 0;
              v106[1] = 0;
            }
            uint64_t v112 = v100 + v103;
            int v113 = (int64x2_t *)((char *)v85 + v254);
            unsigned int v114 = v84[2];
            if (v114 == 63)
            {
              uint64_t v120 = (const double *)(v112 + 32);
              float64x2x2_t v315 = vld2q_f64(v120);
              int64x2_t v121 = *(int64x2_t *)v112;
              int64x2_t v122 = *(int64x2_t *)(v112 + 16);
              *int v113 = vzip1q_s64(*(int64x2_t *)v112, v122);
              *(int64x2_t *)((char *)v113 + v34) = vzip2q_s64(v121, v122);
              int8x8_t v123 = (float64x2_t *)&v113->i8[v88];
              *int8x8_t v123 = v315.val[0];
              *(float64x2_t *)((char *)v123 + v34) = v315.val[1];
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v119 = vld1q_dup_s16((const __int16 *)v112);
              *int v113 = (int64x2_t)v119;
              *(int16x8_t *)((char *)v113 + v34) = v119;
              *(int16x8_t *)((char *)v113 + v88) = v119;
              *(int16x8_t *)((char *)v113 + 3 * a11) = v119;
              uint64_t v115 = 2;
            }
            else if (v84[2])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v85 + v254), v34, v112, v114);
            }
            else
            {
              uint64_t v115 = 0;
              v113->i64[0] = 0;
              v113->i64[1] = 0;
              unsigned int v116 = (uint64_t *)((char *)v113->i64 + v34);
              void *v116 = 0;
              v116[1] = 0;
              uint64_t v117 = (uint64_t *)((char *)v113->i64 + v88);
              void *v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v113->i64 + v251);
              void *v118 = 0;
              v118[1] = 0;
            }
            uint64_t v124 = v112 + v115;
            unsigned int v125 = v113 + 1;
            unsigned int v126 = v84[3];
            if (v126 == 63)
            {
              uint64_t v132 = (const double *)(v124 + 32);
              float64x2x2_t v316 = vld2q_f64(v132);
              int64x2_t v133 = *(int64x2_t *)v124;
              int64x2_t v134 = *(int64x2_t *)(v124 + 16);
              int64x2_t *v125 = vzip1q_s64(*(int64x2_t *)v124, v134);
              *(int64x2_t *)((char *)v125 + v34) = vzip2q_s64(v133, v134);
              unsigned int v135 = (float64x2_t *)&v125->i8[v88];
              float64x2_t *v135 = v316.val[0];
              *(float64x2_t *)((char *)v135 + v34) = v316.val[1];
              uint64_t v127 = 64;
            }
            else if (v126 == 1)
            {
              int16x8_t v131 = vld1q_dup_s16((const __int16 *)v124);
              int64x2_t *v125 = (int64x2_t)v131;
              *(int16x8_t *)((char *)v125 + v34) = v131;
              *(int16x8_t *)((char *)v125 + v88) = v131;
              *(int16x8_t *)((char *)v125 + 3 * a11) = v131;
              uint64_t v127 = 2;
            }
            else if (v84[3])
            {
              uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v125, v34, v124, v126);
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v113[1].i64[1] = 0;
              uint64_t v128 = (uint64_t *)((char *)v125->i64 + v34);
              void *v128 = 0;
              v128[1] = 0;
              uint64_t v129 = (uint64_t *)((char *)v125->i64 + v88);
              *uint64_t v129 = 0;
              v129[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v125->i64 + v251);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v124 + v127;
            uint64_t v137 = v85 + 2;
            unsigned int v138 = v84[4];
            if (v138 == 63)
            {
              uint64_t v144 = (const double *)(v136 + 32);
              float64x2x2_t v317 = vld2q_f64(v144);
              int64x2_t v145 = *(int64x2_t *)v136;
              int64x2_t v146 = *(int64x2_t *)(v136 + 16);
              int64x2_t *v137 = vzip1q_s64(*(int64x2_t *)v136, v146);
              *(int64x2_t *)((char *)v137 + v34) = vzip2q_s64(v145, v146);
              long long v147 = (float64x2_t *)&v137->i8[v88];
              float64x2_t *v147 = v317.val[0];
              *(float64x2_t *)((char *)v147 + v34) = v317.val[1];
              uint64_t v139 = 64;
            }
            else if (v138 == 1)
            {
              int16x8_t v143 = vld1q_dup_s16((const __int16 *)v136);
              int64x2_t *v137 = (int64x2_t)v143;
              *(int16x8_t *)((char *)v137 + v34) = v143;
              *(int16x8_t *)((char *)v137 + v88) = v143;
              *(int16x8_t *)((char *)v137 + 3 * a11) = v143;
              uint64_t v139 = 2;
            }
            else if (v84[4])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, v34, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v85[2].i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + v34);
              void *v140 = 0;
              v140[1] = 0;
              uint64_t v141 = (uint64_t *)((char *)v137->i64 + v88);
              *uint64_t v141 = 0;
              v141[1] = 0;
              unsigned int v142 = (uint64_t *)((char *)v137->i64 + v251);
              void *v142 = 0;
              v142[1] = 0;
            }
            uint64_t v148 = v136 + v139;
            long long v149 = v85 + 3;
            unsigned int v150 = v84[5];
            if (v150 == 63)
            {
              unsigned int v156 = (const double *)(v148 + 32);
              float64x2x2_t v318 = vld2q_f64(v156);
              int64x2_t v157 = *(int64x2_t *)v148;
              int64x2_t v158 = *(int64x2_t *)(v148 + 16);
              *long long v149 = vzip1q_s64(*(int64x2_t *)v148, v158);
              *(int64x2_t *)((char *)v149 + v34) = vzip2q_s64(v157, v158);
              long long v159 = (float64x2_t *)&v149->i8[v88];
              float64x2_t *v159 = v318.val[0];
              *(float64x2_t *)((char *)v159 + v34) = v318.val[1];
              uint64_t v151 = 64;
            }
            else if (v150 == 1)
            {
              int16x8_t v155 = vld1q_dup_s16((const __int16 *)v148);
              *long long v149 = (int64x2_t)v155;
              *(int16x8_t *)((char *)v149 + v34) = v155;
              *(int16x8_t *)((char *)v149 + v88) = v155;
              *(int16x8_t *)((char *)v149 + 3 * a11) = v155;
              uint64_t v151 = 2;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v149, v34, v148, v150);
            }
            else
            {
              uint64_t v151 = 0;
              v149->i64[0] = 0;
              v85[3].i64[1] = 0;
              long long v152 = (uint64_t *)((char *)v149->i64 + v34);
              *long long v152 = 0;
              v152[1] = 0;
              uint64_t v153 = (uint64_t *)((char *)v149->i64 + v88);
              *uint64_t v153 = 0;
              v153[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v149->i64 + v251);
              *uint64_t v154 = 0;
              v154[1] = 0;
            }
            uint64_t v160 = v148 + v151;
            int64x2_t v161 = v113 + 2;
            unsigned int v162 = v84[6];
            if (v162 == 63)
            {
              uint64_t v168 = (const double *)(v160 + 32);
              float64x2x2_t v319 = vld2q_f64(v168);
              int64x2_t v169 = *(int64x2_t *)v160;
              int64x2_t v170 = *(int64x2_t *)(v160 + 16);
              *int64x2_t v161 = vzip1q_s64(*(int64x2_t *)v160, v170);
              *(int64x2_t *)((char *)v161 + v34) = vzip2q_s64(v169, v170);
              int64x2_t v171 = (float64x2_t *)&v161->i8[v88];
              float64x2_t *v171 = v319.val[0];
              *(float64x2_t *)((char *)v171 + v34) = v319.val[1];
              uint64_t v163 = 64;
            }
            else if (v162 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v160);
              *int64x2_t v161 = (int64x2_t)v167;
              *(int16x8_t *)((char *)v161 + v34) = v167;
              *(int16x8_t *)((char *)v161 + v88) = v167;
              *(int16x8_t *)((char *)v161 + 3 * a11) = v167;
              uint64_t v163 = 2;
            }
            else if (v84[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v34, v148 + v151, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v161->i64[0] = 0;
              v113[2].i64[1] = 0;
              int64x2_t v164 = (uint64_t *)((char *)v161->i64 + v34);
              *int64x2_t v164 = 0;
              v164[1] = 0;
              long long v165 = (uint64_t *)((char *)v161->i64 + v88);
              *long long v165 = 0;
              v165[1] = 0;
              int64x2_t v166 = (uint64_t *)((char *)v161->i64 + v251);
              *int64x2_t v166 = 0;
              v166[1] = 0;
            }
            uint64_t v172 = v160 + v163;
            int64x2_t v173 = v113 + 3;
            unsigned int v174 = v84[7];
            if (v174 == 63)
            {
              long long v179 = (const double *)(v172 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = *(int64x2_t *)v172;
              int64x2_t v181 = *(int64x2_t *)(v172 + 16);
              *int64x2_t v173 = vzip1q_s64(*(int64x2_t *)v172, v181);
              *(int64x2_t *)((char *)v173 + v34) = vzip2q_s64(v180, v181);
              uint64_t v182 = (float64x2_t *)&v173->i8[v88];
              *uint64_t v182 = v320.val[0];
              *(float64x2_t *)((char *)v182 + v34) = v320.val[1];
              unsigned int v42 = a7;
              uint64_t v17 = v266;
            }
            else
            {
              unsigned int v42 = a7;
              uint64_t v17 = v266;
              if (v174 == 1)
              {
                int16x8_t v178 = vld1q_dup_s16((const __int16 *)v172);
                *int64x2_t v173 = (int64x2_t)v178;
                *(int16x8_t *)((char *)v173 + v34) = v178;
                *(int16x8_t *)((char *)v173 + v88) = v178;
                *(int16x8_t *)((char *)v173 + 3 * a11) = v178;
              }
              else if (v174)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v34, v172, v174);
              }
              else
              {
                v173->i64[0] = 0;
                v113[3].i64[1] = 0;
                uint64_t v175 = (uint64_t *)((char *)v173->i64 + v34);
                void *v175 = 0;
                v175[1] = 0;
                unsigned int v176 = (uint64_t *)((char *)v173->i64 + v88);
                *unsigned int v176 = 0;
                v176[1] = 0;
                uint64_t v177 = (uint64_t *)((char *)v173->i64 + v251);
                *uint64_t v177 = 0;
                v177[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v266;
          block[5] = v80;
          char v277 = v48;
          char v278 = v269;
          unsigned int v273 = v255;
          unsigned int v274 = v46 - v44;
          block[6] = v84;
          unsigned int v271 = v85;
          uint64_t v34 = a11;
          uint64_t v272 = a11;
          unsigned int v275 = v263;
          unsigned int v276 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v266 + 8) + 7384), block);
            unsigned int v42 = a7;
            uint64_t v17 = v266;
LABEL_47:
            unsigned int v43 = v39 + 1;
            goto LABEL_48;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int64x2_t v183 = *((int64x2_t *)v80 + 1);
            uint64_t v184 = (const double *)(v80 + 32);
            float64x2x2_t v321 = vld2q_f64(v184);
            int64x2_t v185 = vzip2q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v80, v183);
            int64x2_t v284 = v185;
            float64x2_t v288 = v321.val[0];
            float64x2_t v292 = v321.val[1];
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v186 = vld1q_dup_s16((const __int16 *)v80);
            int64x2_t v280 = (int64x2_t)v186;
            int64x2_t v284 = (int64x2_t)v186;
            float64x2_t v288 = (float64x2_t)v186;
            float64x2_t v292 = (float64x2_t)v186;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, (uint64_t)v80, v93);
          }
          else
          {
            uint64_t v94 = 0;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            float64x2_t v288 = 0uLL;
            float64x2_t v292 = 0uLL;
          }
          uint64_t v187 = (uint64_t)&v80[v94];
          unsigned int v188 = v84[1];
          if (v188 == 63)
          {
            int64x2_t v190 = *(int64x2_t *)(v187 + 16);
            uint64_t v191 = (const double *)(v187 + 32);
            float64x2x2_t v322 = vld2q_f64(v191);
            int64x2_t v192 = vzip2q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v281 = vzip1q_s64(*(int64x2_t *)v187, v190);
            int64x2_t v285 = v192;
            float64x2_t v289 = v322.val[0];
            float64x2_t v293 = v322.val[1];
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int16x8_t v193 = vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v281 = (int64x2_t)v193;
            int64x2_t v285 = (int64x2_t)v193;
            float64x2_t v289 = (float64x2_t)v193;
            float64x2_t v293 = (float64x2_t)v193;
            uint64_t v189 = 2;
          }
          else if (v84[1])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 64, v187, v188);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            float64x2_t v289 = 0uLL;
            float64x2_t v293 = 0uLL;
          }
          uint64_t v194 = v187 + v189;
          unsigned int v195 = v84[2];
          if (v195 == 63)
          {
            int64x2_t v197 = *(int64x2_t *)(v194 + 16);
            uint64_t v198 = (const double *)(v194 + 32);
            float64x2x2_t v323 = vld2q_f64(v198);
            int64x2_t v199 = vzip2q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v194, v197);
            int64x2_t v300 = v199;
            float64x2_t v304 = v323.val[0];
            float64x2_t v308 = v323.val[1];
            uint64_t v196 = 64;
          }
          else if (v195 == 1)
          {
            int16x8_t v200 = vld1q_dup_s16((const __int16 *)v194);
            int64x2_t v296 = (int64x2_t)v200;
            int64x2_t v300 = (int64x2_t)v200;
            float64x2_t v304 = (float64x2_t)v200;
            float64x2_t v308 = (float64x2_t)v200;
            uint64_t v196 = 2;
          }
          else if (v84[2])
          {
            uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v194, v195);
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v296 = 0uLL;
            int64x2_t v300 = 0uLL;
            float64x2_t v304 = 0uLL;
            float64x2_t v308 = 0uLL;
          }
          uint64_t v201 = v194 + v196;
          unsigned int v202 = v84[3];
          if (v202 == 63)
          {
            int64x2_t v204 = *(int64x2_t *)(v201 + 16);
            uint64_t v205 = (const double *)(v201 + 32);
            float64x2x2_t v324 = vld2q_f64(v205);
            int64x2_t v206 = vzip2q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v297 = vzip1q_s64(*(int64x2_t *)v201, v204);
            int64x2_t v301 = v206;
            float64x2_t v305 = v324.val[0];
            float64x2_t v309 = v324.val[1];
            uint64_t v203 = 64;
          }
          else if (v202 == 1)
          {
            int16x8_t v207 = vld1q_dup_s16((const __int16 *)v201);
            int64x2_t v297 = (int64x2_t)v207;
            int64x2_t v301 = (int64x2_t)v207;
            float64x2_t v305 = (float64x2_t)v207;
            float64x2_t v309 = (float64x2_t)v207;
            uint64_t v203 = 2;
          }
          else if (v84[3])
          {
            uint64_t v203 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v297, 64, v201, v202);
          }
          else
          {
            uint64_t v203 = 0;
            int64x2_t v297 = 0uLL;
            int64x2_t v301 = 0uLL;
            float64x2_t v305 = 0uLL;
            float64x2_t v309 = 0uLL;
          }
          uint64_t v208 = v201 + v203;
          unsigned int v209 = v84[4];
          if (v209 == 63)
          {
            int64x2_t v211 = *(int64x2_t *)(v208 + 16);
            int64x2_t v212 = (const double *)(v208 + 32);
            float64x2x2_t v325 = vld2q_f64(v212);
            int64x2_t v213 = vzip2q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v282 = vzip1q_s64(*(int64x2_t *)v208, v211);
            int64x2_t v286 = v213;
            float64x2_t v290 = v325.val[0];
            float64x2_t v294 = v325.val[1];
            uint64_t v210 = 64;
          }
          else if (v209 == 1)
          {
            int16x8_t v214 = vld1q_dup_s16((const __int16 *)v208);
            int64x2_t v282 = (int64x2_t)v214;
            int64x2_t v286 = (int64x2_t)v214;
            float64x2_t v290 = (float64x2_t)v214;
            float64x2_t v294 = (float64x2_t)v214;
            uint64_t v210 = 2;
          }
          else if (v84[4])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 64, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            int64x2_t v282 = 0uLL;
            int64x2_t v286 = 0uLL;
            float64x2_t v290 = 0uLL;
            float64x2_t v294 = 0uLL;
          }
          uint64_t v215 = v208 + v210;
          unsigned int v216 = v84[5];
          if (v216 == 63)
          {
            int64x2_t v218 = *(int64x2_t *)(v215 + 16);
            unsigned int v219 = (const double *)(v215 + 32);
            float64x2x2_t v326 = vld2q_f64(v219);
            int64x2_t v220 = vzip2q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v283 = vzip1q_s64(*(int64x2_t *)v215, v218);
            int64x2_t v287 = v220;
            float64x2_t v291 = v326.val[0];
            float64x2_t v295 = v326.val[1];
            uint64_t v217 = 64;
          }
          else if (v216 == 1)
          {
            int16x8_t v221 = vld1q_dup_s16((const __int16 *)v215);
            int64x2_t v283 = (int64x2_t)v221;
            int64x2_t v287 = (int64x2_t)v221;
            float64x2_t v291 = (float64x2_t)v221;
            float64x2_t v295 = (float64x2_t)v221;
            uint64_t v217 = 2;
          }
          else if (v84[5])
          {
            uint64_t v217 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 64, v215, v216);
          }
          else
          {
            uint64_t v217 = 0;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
            float64x2_t v291 = 0uLL;
            float64x2_t v295 = 0uLL;
          }
          uint64_t v222 = v215 + v217;
          unsigned int v223 = v84[6];
          if (v223 == 63)
          {
            int64x2_t v225 = *(int64x2_t *)(v222 + 16);
            unsigned int v226 = (const double *)(v222 + 32);
            float64x2x2_t v327 = vld2q_f64(v226);
            int64x2_t v227 = vzip2q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v298 = vzip1q_s64(*(int64x2_t *)v222, v225);
            int64x2_t v302 = v227;
            float64x2_t v306 = v327.val[0];
            float64x2_t v310 = v327.val[1];
            uint64_t v224 = 64;
          }
          else if (v223 == 1)
          {
            int16x8_t v228 = vld1q_dup_s16((const __int16 *)v222);
            int64x2_t v298 = (int64x2_t)v228;
            int64x2_t v302 = (int64x2_t)v228;
            float64x2_t v306 = (float64x2_t)v228;
            float64x2_t v310 = (float64x2_t)v228;
            uint64_t v224 = 2;
          }
          else if (v84[6])
          {
            uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v298, 64, v222, v223);
          }
          else
          {
            uint64_t v224 = 0;
            int64x2_t v298 = 0uLL;
            int64x2_t v302 = 0uLL;
            float64x2_t v306 = 0uLL;
            float64x2_t v310 = 0uLL;
          }
          uint64_t v229 = v222 + v224;
          unsigned int v230 = v84[7];
          if (v230 == 63)
          {
            int64x2_t v231 = *(int64x2_t *)(v229 + 16);
            uint64_t v232 = (const double *)(v229 + 32);
            float64x2x2_t v328 = vld2q_f64(v232);
            int64x2_t v233 = vzip2q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v299 = vzip1q_s64(*(int64x2_t *)v229, v231);
            int64x2_t v303 = v233;
            float64x2_t v307 = v328.val[0];
            float64x2_t v311 = v328.val[1];
            unsigned int v42 = a7;
            uint64_t v17 = v266;
          }
          else
          {
            unsigned int v42 = a7;
            uint64_t v17 = v266;
            if (v230 == 1)
            {
              int16x8_t v234 = vld1q_dup_s16((const __int16 *)v229);
              int64x2_t v299 = (int64x2_t)v234;
              int64x2_t v303 = (int64x2_t)v234;
              float64x2_t v307 = (float64x2_t)v234;
              float64x2_t v311 = (float64x2_t)v234;
            }
            else if (v230)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v299, 64, v229, v230);
            }
            else
            {
              int64x2_t v299 = 0uLL;
              int64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
              float64x2_t v311 = 0uLL;
            }
          }
          unint64_t v235 = v275;
          unsigned int v43 = v39 + 1;
          if (v275)
          {
            unint64_t v236 = 0;
            int v237 = &v280.i8[64 * (unint64_t)v273 + 4 * v274];
            unsigned int v238 = v276;
            do
            {
              if (v238)
              {
                uint64_t v239 = 0;
                int v240 = &v271->i8[v272 * v236];
                do
                {
                  v240[v239] = v237[v239];
                  ++v239;
                  unsigned int v238 = v276;
                }
                while (4 * (unint64_t)v276 > v239);
                unint64_t v235 = v275;
              }
              ++v236;
              v237 += 64;
            }
            while (v236 < v235);
          }
LABEL_48:
          BOOL v22 = v39 == v257 >> 4;
          unsigned int v39 = v43;
        }
        while (!v22);
        BOOL v22 = v21++ == v245;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v309 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v262 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v243 = a8 + a10 - 1;
  unsigned int v245 = v243 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v256 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v245)
  {
    unsigned int v254 = a7 + a9 - 1;
    unsigned int v242 = a7 >> 4;
    if (a7 >> 4 <= v254 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v239 = a5 - 1;
      unsigned int v265 = (a5 - 1) >> 4;
      int v264 = ((a5 - 1) & 0xF) + 1;
      int v240 = ((a6 - 1) & 7) + 1;
      unsigned int v241 = (a6 - 1) >> 3;
      uint64_t v248 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v253 = v27.i32[0] | v27.i32[1];
      int8x8_t v252 = v27;
      BOOL v251 = v27.i32[0] != 0;
      BOOL v250 = v27.i32[1] != 0;
      unint64_t v238 = 8 * v19 * (unint64_t)v18;
      uint64_t v263 = v16;
      uint64_t v246 = 3 * a11;
      uint64_t v247 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v262) {
          int v29 = v262;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v242;
        if (v243 < v28) {
          unsigned int v28 = v243;
        }
        unsigned int v261 = 8 * v17;
        int v249 = v29 - 8 * v17;
        int v260 = v28 - v29 + 1;
        int v31 = v240;
        if (v17 != v241) {
          int v31 = 8;
        }
        unsigned int v266 = v31;
        uint64_t v259 = a2 + (v29 - v262) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v254 < v34) {
            unsigned int v34 = v254;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v265) {
            unsigned int v37 = v264;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v261 >= v262 && v33 >= a7)
          {
            int v39 = v264;
            if (v30 != v265) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v260 != v266;
          }
          if (isLevelTiled)
          {
            unsigned int v222 = 0;
            uint64_t v223 = v238 >> (*(unsigned char *)(v16 + 57) != 0);
            char v224 = 1;
            if (v223 > 127)
            {
              if (v223 > 511)
              {
                if (v223 == 512)
                {
                  char v225 = 0;
                  unsigned int v222 = 16;
                  unsigned int v226 = 16;
                }
                else
                {
                  char v225 = 1;
                  unsigned int v226 = 0;
                  if (v223 == 1024)
                  {
                    unsigned int v226 = 8;
                    unsigned int v222 = 16;
                  }
                }
              }
              else if (v223 == 128)
              {
                char v224 = 0;
                char v225 = 0;
                unsigned int v222 = 32;
                unsigned int v226 = 32;
              }
              else
              {
                char v225 = 1;
                unsigned int v226 = 0;
                if (v223 == 256)
                {
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 16;
                  unsigned int v222 = 32;
                }
              }
            }
            else
            {
              char v225 = 1;
              unsigned int v226 = 0;
              switch(v223)
              {
                case 4:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 128;
                  unsigned int v222 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 128;
                  unsigned int v226 = 128;
                  break;
                case 16:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v226 = 64;
                  unsigned int v222 = 128;
                  break;
                case 32:
                  char v224 = 0;
                  char v225 = 0;
                  unsigned int v222 = 64;
                  unsigned int v226 = 64;
                  break;
                default:
                  if (v223 == 64)
                  {
                    char v224 = 0;
                    char v225 = 0;
                    unsigned int v226 = 32;
                    unsigned int v222 = 64;
                  }
                  break;
              }
            }
            unsigned int v227 = (v222 >> 4) - 1;
            if (v224) {
              unsigned int v228 = 0;
            }
            else {
              unsigned int v228 = 32 - __clz(~(-1 << -(char)__clz(v227)));
            }
            unsigned int v229 = (v226 >> 3) - 1;
            if (v225)
            {
              unsigned int v230 = 0;
              if (v228) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v230 = 32 - __clz(~(-1 << -(char)__clz(v229)));
              if (v230 | v228)
              {
LABEL_233:
                int v231 = 0;
                uint64_t v232 = 0;
                int v233 = v30 & v227;
                int v234 = v17 & v229;
                BOOL v235 = v230 != 0;
                BOOL v236 = v228 != 0;
                int v237 = 1;
                do
                {
                  --v230;
                  if (v235) {
                    v232 |= (unint64_t)(v237 & v234) << v231++;
                  }
                  else {
                    unsigned int v230 = 0;
                  }
                  --v228;
                  if (v236) {
                    v232 |= (unint64_t)(v237 & v233) << v231++;
                  }
                  else {
                    unsigned int v228 = 0;
                  }
                  v237 *= 2;
                  --v231;
                  BOOL v236 = v228 != 0;
                  BOOL v235 = v230 != 0;
                }
                while (v228 | v230);
                goto LABEL_245;
              }
            }
            uint64_t v232 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v222 + v261 / v226 * ((v222 + v239) / v222)) << 14) + (v232 << 9);
            goto LABEL_59;
          }
          if (v253)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v251;
            BOOL v45 = v250;
            __int32 v46 = v252.i32[0];
            __int32 v47 = v252.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          BOOL v62 = (unsigned char *)(a3 + v48);
          if (v256)
          {
            int v63 = v36;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            int v36 = v63;
            BOOL v62 = __dst;
          }
          __int32 v64 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v65 = a7;
          uint64_t v66 = (int64x2_t *)(v259 + 4 * (v35 - a7));
          char v67 = v37 < 0x10 || v38;
          if ((v67 & 1) != 0 || v266 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v263;
            block[5] = v62;
            char v274 = v37;
            char v275 = v266;
            unsigned int v270 = v249;
            unsigned int v271 = v35 - v33;
            block[6] = v64;
            unsigned int v268 = v66;
            uint64_t v25 = a11;
            uint64_t v269 = a11;
            unsigned int v272 = v260;
            unsigned int v273 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v263 + 8) + 7384), block);
              a7 = v65;
              uint64_t v16 = v263;
LABEL_149:
              unsigned int v156 = v30 + 1;
              goto LABEL_27;
            }
            unsigned int v74 = *v64;
            a7 = v65;
            if (v74 == 63)
            {
              int64x2_t v164 = *((int64x2_t *)v62 + 1);
              long long v165 = (const double *)(v62 + 32);
              float64x2x2_t v318 = vld2q_f64(v165);
              int64x2_t v166 = vzip2q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v62, v164);
              int64x2_t v281 = v166;
              float64x2_t v285 = v318.val[0];
              float64x2_t v289 = v318.val[1];
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v167 = vld1q_dup_s16((const __int16 *)v62);
              int64x2_t v277 = (int64x2_t)v167;
              int64x2_t v281 = (int64x2_t)v167;
              float64x2_t v285 = (float64x2_t)v167;
              float64x2_t v289 = (float64x2_t)v167;
              uint64_t v75 = 2;
            }
            else if (*v64)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, (uint64_t)v62, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int64x2_t v277 = 0uLL;
              int64x2_t v281 = 0uLL;
              float64x2_t v285 = 0uLL;
              float64x2_t v289 = 0uLL;
            }
            uint64_t v168 = (uint64_t)&v62[v75];
            unsigned int v169 = v64[1];
            if (v169 == 63)
            {
              int64x2_t v171 = *(int64x2_t *)(v168 + 16);
              uint64_t v172 = (const double *)(v168 + 32);
              float64x2x2_t v319 = vld2q_f64(v172);
              int64x2_t v173 = vzip2q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v168, v171);
              int64x2_t v282 = v173;
              float64x2_t v286 = v319.val[0];
              float64x2_t v290 = v319.val[1];
              uint64_t v170 = 64;
            }
            else if (v169 == 1)
            {
              int16x8_t v174 = vld1q_dup_s16((const __int16 *)v168);
              int64x2_t v278 = (int64x2_t)v174;
              int64x2_t v282 = (int64x2_t)v174;
              float64x2_t v286 = (float64x2_t)v174;
              float64x2_t v290 = (float64x2_t)v174;
              uint64_t v170 = 2;
            }
            else if (v64[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v278, 64, v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int64x2_t v278 = 0uLL;
              int64x2_t v282 = 0uLL;
              float64x2_t v286 = 0uLL;
              float64x2_t v290 = 0uLL;
            }
            uint64_t v175 = v168 + v170;
            unsigned int v176 = v64[2];
            if (v176 == 63)
            {
              int64x2_t v178 = *(int64x2_t *)(v175 + 16);
              long long v179 = (const double *)(v175 + 32);
              float64x2x2_t v320 = vld2q_f64(v179);
              int64x2_t v180 = vzip2q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v175, v178);
              int64x2_t v297 = v180;
              float64x2_t v301 = v320.val[0];
              float64x2_t v305 = v320.val[1];
              uint64_t v177 = 64;
            }
            else if (v176 == 1)
            {
              int16x8_t v181 = vld1q_dup_s16((const __int16 *)v175);
              int64x2_t v293 = (int64x2_t)v181;
              int64x2_t v297 = (int64x2_t)v181;
              float64x2_t v301 = (float64x2_t)v181;
              float64x2_t v305 = (float64x2_t)v181;
              uint64_t v177 = 2;
            }
            else if (v64[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int64x2_t v293 = 0uLL;
              int64x2_t v297 = 0uLL;
              float64x2_t v301 = 0uLL;
              float64x2_t v305 = 0uLL;
            }
            uint64_t v182 = v175 + v177;
            unsigned int v183 = v64[3];
            if (v183 == 63)
            {
              int64x2_t v185 = *(int64x2_t *)(v182 + 16);
              int16x8_t v186 = (const double *)(v182 + 32);
              float64x2x2_t v321 = vld2q_f64(v186);
              int64x2_t v187 = vzip2q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v294 = vzip1q_s64(*(int64x2_t *)v182, v185);
              int64x2_t v298 = v187;
              float64x2_t v302 = v321.val[0];
              float64x2_t v306 = v321.val[1];
              uint64_t v184 = 64;
            }
            else if (v183 == 1)
            {
              int16x8_t v188 = vld1q_dup_s16((const __int16 *)v182);
              int64x2_t v294 = (int64x2_t)v188;
              int64x2_t v298 = (int64x2_t)v188;
              float64x2_t v302 = (float64x2_t)v188;
              float64x2_t v306 = (float64x2_t)v188;
              uint64_t v184 = 2;
            }
            else if (v64[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v294, 64, v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int64x2_t v294 = 0uLL;
              int64x2_t v298 = 0uLL;
              float64x2_t v302 = 0uLL;
              float64x2_t v306 = 0uLL;
            }
            uint64_t v189 = v182 + v184;
            unsigned int v190 = v64[4];
            if (v190 == 63)
            {
              int64x2_t v192 = *(int64x2_t *)(v189 + 16);
              int16x8_t v193 = (const double *)(v189 + 32);
              float64x2x2_t v322 = vld2q_f64(v193);
              int64x2_t v194 = vzip2q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v279 = vzip1q_s64(*(int64x2_t *)v189, v192);
              int64x2_t v283 = v194;
              float64x2_t v287 = v322.val[0];
              float64x2_t v291 = v322.val[1];
              uint64_t v191 = 64;
            }
            else if (v190 == 1)
            {
              int16x8_t v195 = vld1q_dup_s16((const __int16 *)v189);
              int64x2_t v279 = (int64x2_t)v195;
              int64x2_t v283 = (int64x2_t)v195;
              float64x2_t v287 = (float64x2_t)v195;
              float64x2_t v291 = (float64x2_t)v195;
              uint64_t v191 = 2;
            }
            else if (v64[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v279, 64, v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int64x2_t v279 = 0uLL;
              int64x2_t v283 = 0uLL;
              float64x2_t v287 = 0uLL;
              float64x2_t v291 = 0uLL;
            }
            uint64_t v196 = v189 + v191;
            unsigned int v197 = v64[5];
            if (v197 == 63)
            {
              int64x2_t v199 = *(int64x2_t *)(v196 + 16);
              int16x8_t v200 = (const double *)(v196 + 32);
              float64x2x2_t v323 = vld2q_f64(v200);
              int64x2_t v201 = vzip2q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v280 = vzip1q_s64(*(int64x2_t *)v196, v199);
              int64x2_t v284 = v201;
              float64x2_t v288 = v323.val[0];
              float64x2_t v292 = v323.val[1];
              uint64_t v198 = 64;
            }
            else if (v197 == 1)
            {
              int16x8_t v202 = vld1q_dup_s16((const __int16 *)v196);
              int64x2_t v280 = (int64x2_t)v202;
              int64x2_t v284 = (int64x2_t)v202;
              float64x2_t v288 = (float64x2_t)v202;
              float64x2_t v292 = (float64x2_t)v202;
              uint64_t v198 = 2;
            }
            else if (v64[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v280, 64, v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int64x2_t v280 = 0uLL;
              int64x2_t v284 = 0uLL;
              float64x2_t v288 = 0uLL;
              float64x2_t v292 = 0uLL;
            }
            uint64_t v203 = v196 + v198;
            unsigned int v204 = v64[6];
            if (v204 == 63)
            {
              int64x2_t v206 = *(int64x2_t *)(v203 + 16);
              int16x8_t v207 = (const double *)(v203 + 32);
              float64x2x2_t v324 = vld2q_f64(v207);
              int64x2_t v208 = vzip2q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v295 = vzip1q_s64(*(int64x2_t *)v203, v206);
              int64x2_t v299 = v208;
              float64x2_t v303 = v324.val[0];
              float64x2_t v307 = v324.val[1];
              uint64_t v205 = 64;
            }
            else if (v204 == 1)
            {
              int16x8_t v209 = vld1q_dup_s16((const __int16 *)v203);
              int64x2_t v295 = (int64x2_t)v209;
              int64x2_t v299 = (int64x2_t)v209;
              float64x2_t v303 = (float64x2_t)v209;
              float64x2_t v307 = (float64x2_t)v209;
              uint64_t v205 = 2;
            }
            else if (v64[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v295, 64, v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int64x2_t v295 = 0uLL;
              int64x2_t v299 = 0uLL;
              float64x2_t v303 = 0uLL;
              float64x2_t v307 = 0uLL;
            }
            uint64_t v210 = v203 + v205;
            unsigned int v211 = v64[7];
            if (v211 == 63)
            {
              int64x2_t v212 = *(int64x2_t *)(v210 + 16);
              int64x2_t v213 = (const double *)(v210 + 32);
              float64x2x2_t v325 = vld2q_f64(v213);
              int64x2_t v214 = vzip2q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v296 = vzip1q_s64(*(int64x2_t *)v210, v212);
              int64x2_t v300 = v214;
              float64x2_t v304 = v325.val[0];
              float64x2_t v308 = v325.val[1];
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
            }
            else
            {
              uint64_t v16 = v263;
              unsigned int v156 = v30 + 1;
              if (v211 == 1)
              {
                int16x8_t v215 = vld1q_dup_s16((const __int16 *)v210);
                int64x2_t v296 = (int64x2_t)v215;
                int64x2_t v300 = (int64x2_t)v215;
                float64x2_t v304 = (float64x2_t)v215;
                float64x2_t v308 = (float64x2_t)v215;
              }
              else if (v64[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v296, 64, v210, v211);
              }
              else
              {
                int64x2_t v296 = 0uLL;
                int64x2_t v300 = 0uLL;
                float64x2_t v304 = 0uLL;
                float64x2_t v308 = 0uLL;
              }
            }
            unint64_t v216 = v272;
            if (v272)
            {
              unint64_t v217 = 0;
              int64x2_t v218 = &v277.i8[64 * (unint64_t)v270 + 4 * v271];
              unsigned int v219 = v273;
              do
              {
                if (v219)
                {
                  uint64_t v220 = 0;
                  int16x8_t v221 = &v268->i8[v269 * v217];
                  do
                  {
                    v221[v220] = v218[v220];
                    ++v220;
                    unsigned int v219 = v273;
                  }
                  while (4 * (unint64_t)v273 > v220);
                  unint64_t v216 = v272;
                }
                ++v217;
                v218 += 64;
              }
              while (v217 < v216);
            }
          }
          else
          {
            unsigned int v68 = *v64;
            if (v68 == 63)
            {
              int v77 = (const double *)(v62 + 32);
              float64x2x2_t v310 = vld2q_f64(v77);
              int64x2_t v78 = *(int64x2_t *)v62;
              int64x2_t v79 = *((int64x2_t *)v62 + 1);
              int64x2_t *v66 = vzip1q_s64(*(int64x2_t *)v62, v79);
              uint64_t v25 = a11;
              *(int64x2_t *)((char *)v66 + a11) = vzip2q_s64(v78, v79);
              uint64_t v69 = 2 * a11;
              uint64_t v80 = (float64x2_t *)&v66->i8[v247];
              float64x2_t *v80 = v310.val[0];
              *(float64x2_t *)((char *)v80 + a11) = v310.val[1];
              uint64_t v70 = 64;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v69 = 2 * a11;
              if (v68 == 1)
              {
                int16x8_t v76 = vld1q_dup_s16((const __int16 *)v62);
                int64x2_t *v66 = (int64x2_t)v76;
                *(int16x8_t *)((char *)v66 + a11) = v76;
                *(int16x8_t *)((char *)v66 + 2 * a11) = v76;
                *(int16x8_t *)((char *)v66 + 3 * a11) = v76;
                uint64_t v70 = 2;
              }
              else if (*v64)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v66, a11, (uint64_t)v62, v68);
              }
              else
              {
                uint64_t v70 = 0;
                v66->i64[0] = 0;
                v66->i64[1] = 0;
                unsigned int v71 = (uint64_t *)((char *)v66->i64 + a11);
                *unsigned int v71 = 0;
                v71[1] = 0;
                unsigned int v72 = (uint64_t *)((char *)v66->i64 + v247);
                *unsigned int v72 = 0;
                v72[1] = 0;
                int v73 = (uint64_t *)((char *)v66->i64 + v246);
                void *v73 = 0;
                v73[1] = 0;
              }
            }
            uint64_t v81 = (uint64_t)&v62[v70];
            int v82 = v66 + 1;
            unsigned int v83 = v64[1];
            if (v83 == 63)
            {
              uint64_t v89 = (const double *)(v81 + 32);
              float64x2x2_t v311 = vld2q_f64(v89);
              int64x2_t v90 = *(int64x2_t *)v81;
              int64x2_t v91 = *(int64x2_t *)(v81 + 16);
              int64x2_t *v82 = vzip1q_s64(*(int64x2_t *)v81, v91);
              *(int64x2_t *)((char *)v82 + v25) = vzip2q_s64(v90, v91);
              uint64_t v92 = (float64x2_t *)&v82->i8[v69];
              float64x2_t *v92 = v311.val[0];
              *(float64x2_t *)((char *)v92 + v25) = v311.val[1];
              uint64_t v84 = 64;
            }
            else if (v83 == 1)
            {
              int16x8_t v88 = vld1q_dup_s16((const __int16 *)v81);
              int64x2_t *v82 = (int64x2_t)v88;
              *(int16x8_t *)((char *)v82 + v25) = v88;
              *(int16x8_t *)((char *)v82 + v69) = v88;
              *(int16x8_t *)((char *)v82 + 3 * a11) = v88;
              uint64_t v84 = 2;
            }
            else if (v64[1])
            {
              uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, v25, v81, v83);
            }
            else
            {
              uint64_t v84 = 0;
              v82->i64[0] = 0;
              v66[1].i64[1] = 0;
              uint64_t v85 = (uint64_t *)((char *)v82->i64 + v25);
              void *v85 = 0;
              v85[1] = 0;
              char v86 = (uint64_t *)((char *)v82->i64 + v69);
              void *v86 = 0;
              v86[1] = 0;
              unsigned int v87 = (uint64_t *)((char *)v82->i64 + v246);
              void *v87 = 0;
              v87[1] = 0;
            }
            uint64_t v93 = v81 + v84;
            uint64_t v94 = (int64x2_t *)((char *)v66 + v248);
            unsigned int v95 = v64[2];
            if (v95 == 63)
            {
              unsigned int v101 = (const double *)(v93 + 32);
              float64x2x2_t v312 = vld2q_f64(v101);
              int64x2_t v102 = *(int64x2_t *)v93;
              int64x2_t v103 = *(int64x2_t *)(v93 + 16);
              *uint64_t v94 = vzip1q_s64(*(int64x2_t *)v93, v103);
              *(int64x2_t *)((char *)v94 + v25) = vzip2q_s64(v102, v103);
              int v104 = (float64x2_t *)&v94->i8[v69];
              *int v104 = v312.val[0];
              *(float64x2_t *)((char *)v104 + v25) = v312.val[1];
              uint64_t v96 = 64;
            }
            else if (v95 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v93);
              *uint64_t v94 = (int64x2_t)v100;
              *(int16x8_t *)((char *)v94 + v25) = v100;
              *(int16x8_t *)((char *)v94 + v69) = v100;
              *(int16x8_t *)((char *)v94 + 3 * a11) = v100;
              uint64_t v96 = 2;
            }
            else if (v64[2])
            {
              uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v66 + v248), v25, v93, v95);
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              int64x2_t v97 = (uint64_t *)((char *)v94->i64 + v25);
              void *v97 = 0;
              v97[1] = 0;
              int64x2_t v98 = (uint64_t *)((char *)v94->i64 + v69);
              void *v98 = 0;
              v98[1] = 0;
              uint64_t v99 = (uint64_t *)((char *)v94->i64 + v246);
              *uint64_t v99 = 0;
              v99[1] = 0;
            }
            uint64_t v105 = v93 + v96;
            int v106 = v94 + 1;
            unsigned int v107 = v64[3];
            if (v107 == 63)
            {
              int v113 = (const double *)(v105 + 32);
              float64x2x2_t v313 = vld2q_f64(v113);
              int64x2_t v114 = *(int64x2_t *)v105;
              int64x2_t v115 = *(int64x2_t *)(v105 + 16);
              int64x2_t *v106 = vzip1q_s64(*(int64x2_t *)v105, v115);
              *(int64x2_t *)((char *)v106 + v25) = vzip2q_s64(v114, v115);
              unsigned int v116 = (float64x2_t *)&v106->i8[v69];
              float64x2_t *v116 = v313.val[0];
              *(float64x2_t *)((char *)v116 + v25) = v313.val[1];
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v112 = vld1q_dup_s16((const __int16 *)v105);
              int64x2_t *v106 = (int64x2_t)v112;
              *(int16x8_t *)((char *)v106 + v25) = v112;
              *(int16x8_t *)((char *)v106 + v69) = v112;
              *(int16x8_t *)((char *)v106 + 3 * a11) = v112;
              uint64_t v108 = 2;
            }
            else if (v64[3])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v106, v25, v105, v107);
            }
            else
            {
              uint64_t v108 = 0;
              v106->i64[0] = 0;
              v94[1].i64[1] = 0;
              int64x2_t v109 = (uint64_t *)((char *)v106->i64 + v25);
              *int64x2_t v109 = 0;
              v109[1] = 0;
              int64x2_t v110 = (uint64_t *)((char *)v106->i64 + v69);
              void *v110 = 0;
              v110[1] = 0;
              unint64_t v111 = (uint64_t *)((char *)v106->i64 + v246);
              *unint64_t v111 = 0;
              v111[1] = 0;
            }
            uint64_t v117 = v105 + v108;
            unsigned int v118 = v66 + 2;
            unsigned int v119 = v64[4];
            if (v119 == 63)
            {
              unsigned int v125 = (const double *)(v117 + 32);
              float64x2x2_t v314 = vld2q_f64(v125);
              int64x2_t v126 = *(int64x2_t *)v117;
              int64x2_t v127 = *(int64x2_t *)(v117 + 16);
              int64x2_t *v118 = vzip1q_s64(*(int64x2_t *)v117, v127);
              *(int64x2_t *)((char *)v118 + v25) = vzip2q_s64(v126, v127);
              uint64_t v128 = (float64x2_t *)&v118->i8[v69];
              float64x2_t *v128 = v314.val[0];
              *(float64x2_t *)((char *)v128 + v25) = v314.val[1];
              uint64_t v120 = 64;
            }
            else if (v119 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v117);
              int64x2_t *v118 = (int64x2_t)v124;
              *(int16x8_t *)((char *)v118 + v25) = v124;
              *(int16x8_t *)((char *)v118 + v69) = v124;
              *(int16x8_t *)((char *)v118 + 3 * a11) = v124;
              uint64_t v120 = 2;
            }
            else if (v64[4])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v25, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              v118->i64[0] = 0;
              v66[2].i64[1] = 0;
              int64x2_t v121 = (uint64_t *)((char *)v118->i64 + v25);
              *int64x2_t v121 = 0;
              v121[1] = 0;
              int64x2_t v122 = (uint64_t *)((char *)v118->i64 + v69);
              void *v122 = 0;
              v122[1] = 0;
              int8x8_t v123 = (uint64_t *)((char *)v118->i64 + v246);
              *int8x8_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v117 + v120;
            uint64_t v130 = v66 + 3;
            unsigned int v131 = v64[5];
            if (v131 == 63)
            {
              uint64_t v137 = (const double *)(v129 + 32);
              float64x2x2_t v315 = vld2q_f64(v137);
              int64x2_t v138 = *(int64x2_t *)v129;
              int64x2_t v139 = *(int64x2_t *)(v129 + 16);
              int64x2_t *v130 = vzip1q_s64(*(int64x2_t *)v129, v139);
              *(int64x2_t *)((char *)v130 + v25) = vzip2q_s64(v138, v139);
              unsigned int v140 = (float64x2_t *)&v130->i8[v69];
              float64x2_t *v140 = v315.val[0];
              *(float64x2_t *)((char *)v140 + v25) = v315.val[1];
              uint64_t v132 = 64;
              a7 = v65;
            }
            else
            {
              a7 = v65;
              if (v131 == 1)
              {
                int16x8_t v136 = vld1q_dup_s16((const __int16 *)v129);
                int64x2_t *v130 = (int64x2_t)v136;
                *(int16x8_t *)((char *)v130 + v25) = v136;
                *(int16x8_t *)((char *)v130 + v69) = v136;
                *(int16x8_t *)((char *)v130 + 3 * a11) = v136;
                uint64_t v132 = 2;
              }
              else if (v64[5])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, v25, v129, v131);
              }
              else
              {
                uint64_t v132 = 0;
                v130->i64[0] = 0;
                v130->i64[1] = 0;
                int64x2_t v133 = (uint64_t *)((char *)v130->i64 + v25);
                *int64x2_t v133 = 0;
                v133[1] = 0;
                int64x2_t v134 = (uint64_t *)((char *)v130->i64 + v69);
                *int64x2_t v134 = 0;
                v134[1] = 0;
                unsigned int v135 = (uint64_t *)((char *)v130->i64 + v246);
                void *v135 = 0;
                v135[1] = 0;
              }
            }
            uint64_t v141 = v129 + v132;
            unsigned int v142 = v94 + 2;
            unsigned int v143 = v64[6];
            if (v143 == 63)
            {
              long long v149 = (const double *)(v141 + 32);
              float64x2x2_t v316 = vld2q_f64(v149);
              int64x2_t v150 = *(int64x2_t *)v141;
              int64x2_t v151 = *(int64x2_t *)(v141 + 16);
              int64x2_t *v142 = vzip1q_s64(*(int64x2_t *)v141, v151);
              *(int64x2_t *)((char *)v142 + v25) = vzip2q_s64(v150, v151);
              long long v152 = (float64x2_t *)&v142->i8[v69];
              *long long v152 = v316.val[0];
              *(float64x2_t *)((char *)v152 + v25) = v316.val[1];
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int16x8_t v148 = vld1q_dup_s16((const __int16 *)v141);
              int64x2_t *v142 = (int64x2_t)v148;
              *(int16x8_t *)((char *)v142 + v25) = v148;
              *(int16x8_t *)((char *)v142 + v69) = v148;
              *(int16x8_t *)((char *)v142 + 3 * a11) = v148;
              uint64_t v144 = 2;
            }
            else if (v64[6])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v25, v141, v143);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v94[2].i64[1] = 0;
              int64x2_t v145 = (uint64_t *)((char *)v142->i64 + v25);
              void *v145 = 0;
              v145[1] = 0;
              int64x2_t v146 = (uint64_t *)((char *)v142->i64 + v69);
              void *v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v246);
              void *v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v141 + v144;
            uint64_t v154 = v94 + 3;
            unsigned int v155 = v64[7];
            if (v155 == 63)
            {
              uint64_t v160 = (const double *)(v153 + 32);
              float64x2x2_t v317 = vld2q_f64(v160);
              int64x2_t v161 = *(int64x2_t *)v153;
              int64x2_t v162 = *(int64x2_t *)(v153 + 16);
              *uint64_t v154 = vzip1q_s64(*(int64x2_t *)v153, v162);
              *(int64x2_t *)((char *)v154 + v25) = vzip2q_s64(v161, v162);
              uint64_t v163 = (float64x2_t *)&v154->i8[v69];
              float64x2_t *v163 = v317.val[0];
              *(float64x2_t *)((char *)v163 + v25) = v317.val[1];
              uint64_t v16 = v263;
              goto LABEL_149;
            }
            uint64_t v16 = v263;
            unsigned int v156 = v30 + 1;
            if (v155 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v153);
              *uint64_t v154 = (int64x2_t)v32;
              *(int16x8_t *)((char *)v154 + v25) = v32;
              *(int16x8_t *)((char *)v154 + v69) = v32;
              *(int16x8_t *)((char *)v154 + 3 * a11) = v32;
            }
            else if (v64[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v154, v25, v153, v155);
            }
            else
            {
              v154->i64[0] = 0;
              v154->i64[1] = 0;
              int64x2_t v157 = (uint64_t *)((char *)v154->i64 + v25);
              *int64x2_t v157 = 0;
              v157[1] = 0;
              int64x2_t v158 = (uint64_t *)((char *)v154->i64 + v69);
              *int64x2_t v158 = 0;
              v158[1] = 0;
              long long v159 = (uint64_t *)((char *)v154->i64 + v246);
              void *v159 = 0;
              v159[1] = 0;
            }
          }
LABEL_27:
          BOOL v21 = v30 == v254 >> 4;
          unsigned int v30 = v156;
        }
        while (!v21);
        BOOL v21 = v17++ == v245;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          int64x2_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            int64x2_t v78 = __dst;
          }
          int v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              int v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              uint64_t v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *int v104 = v103;
              v104[1] = v101;
              int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                unsigned int v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                uint64_t v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                int16x8_t v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                uint64_t v89 = (_OWORD *)(v83 + v351);
                *uint64_t v89 = 0u;
                v89[1] = 0u;
                int64x2_t v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            uint64_t v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int8x16_t *v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              unsigned int v125 = &v108->i8[v86];
              int64x2_t v126 = &v108->i8[v32];
              *(_OWORD *)int64x2_t v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)unsigned int v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int64x2_t v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int64x2_t v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int64x2_t v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              unsigned int v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              uint64_t v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int8x16_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unint64_t v111 = &v108->i8[v32];
              *(_OWORD *)unint64_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              int16x8_t v112 = &v108->i8[v86];
              *(_OWORD *)int16x8_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int v113 = &v108->i8[v350];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            uint64_t v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *uint64_t v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              int64x2_t v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)int64x2_t v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              int16x8_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)int16x8_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *uint64_t v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int16x8_t v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              uint64_t v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              int64x2_t v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *uint64_t v129 = 0u;
              v129[1] = 0u;
              uint64_t v132 = &v129->i8[v32];
              *(_OWORD *)uint64_t v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              int64x2_t v133 = &v129->i8[v86];
              *(_OWORD *)int64x2_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int64x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int64x2_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int8x16_t *v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              int16x8_t v167 = &v150->i8[v86];
              uint64_t v168 = &v150->i8[v32];
              *(_OWORD *)uint64_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)int16x8_t v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int64x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int64x2_t v157 = v156;
              v157[1] = v156;
              int64x2_t v158 = (float32x4_t *)&v150->i8[v86];
              *int64x2_t v158 = v156;
              v158[1] = v156;
              long long v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int8x16_t *v150 = 0u;
              v129[3] = 0u;
              uint64_t v153 = &v150->i8[v32];
              *(_OWORD *)uint64_t v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              unsigned int v155 = &v150->i8[v350];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int64x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int8x16_t *v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              int16x8_t v188 = &v171->i8[v86];
              uint64_t v189 = &v171->i8[v32];
              *(_OWORD *)uint64_t v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)int16x8_t v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int64x2_t v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              long long v179 = (float32x4_t *)&v171->i8[v86];
              *long long v179 = v177;
              v179[1] = v177;
              int64x2_t v180 = (float32x4_t *)&v171->i8[v350];
              *int64x2_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int8x16_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              int16x8_t v174 = &v171->i8[v32];
              *(_OWORD *)int16x8_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int64x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int64x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              int16x8_t v209 = &v192->i8[v86];
              uint64_t v210 = &v192->i8[v32];
              *(_OWORD *)uint64_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)int16x8_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int64x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int64x2_t v199 = v198;
              v199[1] = v198;
              int16x8_t v200 = (float32x4_t *)&v192->i8[v86];
              *int16x8_t v200 = v198;
              v200[1] = v198;
              int64x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int64x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int64x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int16x8_t v195 = &v192->i8[v32];
              *(_OWORD *)int16x8_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int64x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int64x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              unsigned int v230 = &v213->i8[v86];
              int v231 = &v213->i8[v32];
              *(_OWORD *)int v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)unsigned int v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)uint64_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              int16x8_t v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              unsigned int v222 = (float32x4_t *)&v213->i8[v350];
              *unsigned int v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int64x2_t v213 = 0u;
              v129[5] = 0u;
              unint64_t v216 = &v213->i8[v32];
              *(_OWORD *)unint64_t v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unint64_t v217 = &v213->i8[v86];
              *(_OWORD *)unint64_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              int64x2_t v218 = &v213->i8[v350];
              *(_OWORD *)int64x2_t v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *int v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              uint64_t v247 = &v234->i8[v86];
              uint64_t v248 = &v234->i8[v32];
              *(_OWORD *)uint64_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)uint64_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                int v237 = (float32x4_t *)&v234->i8[v32];
                *int v237 = v236;
                v237[1] = v236;
                unint64_t v238 = (float32x4_t *)&v234->i8[v86];
                *unint64_t v238 = v236;
                v238[1] = v236;
                unsigned int v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            float64x2_t v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          int64x2_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            int64x2_t v78 = __dst;
          }
          int v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              int v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              uint64_t v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *int v104 = v103;
              v104[1] = v101;
              int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                unsigned int v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                uint64_t v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                int16x8_t v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                uint64_t v89 = (_OWORD *)(v83 + v351);
                *uint64_t v89 = 0u;
                v89[1] = 0u;
                int64x2_t v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            uint64_t v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int8x16_t *v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              unsigned int v125 = &v108->i8[v86];
              int64x2_t v126 = &v108->i8[v32];
              *(_OWORD *)int64x2_t v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)unsigned int v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int64x2_t v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int64x2_t v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int64x2_t v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              unsigned int v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              uint64_t v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int8x16_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unint64_t v111 = &v108->i8[v32];
              *(_OWORD *)unint64_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              int16x8_t v112 = &v108->i8[v86];
              *(_OWORD *)int16x8_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int v113 = &v108->i8[v350];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            uint64_t v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *uint64_t v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              int64x2_t v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)int64x2_t v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              int16x8_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)int16x8_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *uint64_t v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int16x8_t v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              uint64_t v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              int64x2_t v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *uint64_t v129 = 0u;
              v129[1] = 0u;
              uint64_t v132 = &v129->i8[v32];
              *(_OWORD *)uint64_t v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              int64x2_t v133 = &v129->i8[v86];
              *(_OWORD *)int64x2_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int64x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int64x2_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int8x16_t *v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              int16x8_t v167 = &v150->i8[v86];
              uint64_t v168 = &v150->i8[v32];
              *(_OWORD *)uint64_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)int16x8_t v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int64x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int64x2_t v157 = v156;
              v157[1] = v156;
              int64x2_t v158 = (float32x4_t *)&v150->i8[v86];
              *int64x2_t v158 = v156;
              v158[1] = v156;
              long long v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int8x16_t *v150 = 0u;
              v129[3] = 0u;
              uint64_t v153 = &v150->i8[v32];
              *(_OWORD *)uint64_t v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              unsigned int v155 = &v150->i8[v350];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int64x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int8x16_t *v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              int16x8_t v188 = &v171->i8[v86];
              uint64_t v189 = &v171->i8[v32];
              *(_OWORD *)uint64_t v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)int16x8_t v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int64x2_t v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              long long v179 = (float32x4_t *)&v171->i8[v86];
              *long long v179 = v177;
              v179[1] = v177;
              int64x2_t v180 = (float32x4_t *)&v171->i8[v350];
              *int64x2_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int8x16_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              int16x8_t v174 = &v171->i8[v32];
              *(_OWORD *)int16x8_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int64x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int64x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              int16x8_t v209 = &v192->i8[v86];
              uint64_t v210 = &v192->i8[v32];
              *(_OWORD *)uint64_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)int16x8_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int64x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int64x2_t v199 = v198;
              v199[1] = v198;
              int16x8_t v200 = (float32x4_t *)&v192->i8[v86];
              *int16x8_t v200 = v198;
              v200[1] = v198;
              int64x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int64x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int64x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int16x8_t v195 = &v192->i8[v32];
              *(_OWORD *)int16x8_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int64x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int64x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              unsigned int v230 = &v213->i8[v86];
              int v231 = &v213->i8[v32];
              *(_OWORD *)int v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)unsigned int v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)uint64_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              int16x8_t v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              unsigned int v222 = (float32x4_t *)&v213->i8[v350];
              *unsigned int v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int64x2_t v213 = 0u;
              v129[5] = 0u;
              unint64_t v216 = &v213->i8[v32];
              *(_OWORD *)unint64_t v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unint64_t v217 = &v213->i8[v86];
              *(_OWORD *)unint64_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              int64x2_t v218 = &v213->i8[v350];
              *(_OWORD *)int64x2_t v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *int v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              uint64_t v247 = &v234->i8[v86];
              uint64_t v248 = &v234->i8[v32];
              *(_OWORD *)uint64_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)uint64_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                int v237 = (float32x4_t *)&v234->i8[v32];
                *int v237 = v236;
                v237[1] = v236;
                unint64_t v238 = (float32x4_t *)&v234->i8[v86];
                *unint64_t v238 = v236;
                v238[1] = v236;
                unsigned int v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            float64x2_t v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            uint64_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *uint64_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v89->i8[v67 + v25];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              uint64_t v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *uint64_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int8x16_t *v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int64x2_t v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int64x2_t v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              uint64_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)uint64_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int8x16_t *v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              uint64_t v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int8x16_t *v110 = 0u;
              v110[1] = 0u;
              int v113 = &v110->i8[v25];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int64x2_t v115 = &v110->i8[v345];
              *(_OWORD *)int64x2_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              int16x8_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)int16x8_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int64x2_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int64x2_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int64x2_t v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int64x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int16x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int16x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int64x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int64x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              long long v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              unsigned int v155 = &v152->i8[v25];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int64x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int64x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int64x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int64x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int64x2_t v180 = (float32x4_t *)&v173->i8[v25];
              *int64x2_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int64x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int64x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int64x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int64x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int64x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int64x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int64x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int64x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              unsigned int v230 = &v215->i8[v67 + v25];
              *(_OWORD *)unsigned int v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                int64x2_t v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            uint64_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *uint64_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v89->i8[v67 + v25];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              uint64_t v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *uint64_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int8x16_t *v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int64x2_t v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int64x2_t v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              uint64_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)uint64_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int8x16_t *v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              uint64_t v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int8x16_t *v110 = 0u;
              v110[1] = 0u;
              int v113 = &v110->i8[v25];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int64x2_t v115 = &v110->i8[v345];
              *(_OWORD *)int64x2_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              int16x8_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)int16x8_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int64x2_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int64x2_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int64x2_t v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int64x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int16x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int16x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int64x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int64x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              long long v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              unsigned int v155 = &v152->i8[v25];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int64x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int64x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int64x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int64x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int64x2_t v180 = (float32x4_t *)&v173->i8[v25];
              *int64x2_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int64x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int64x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int64x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int64x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int64x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int64x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int64x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int64x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              unsigned int v230 = &v215->i8[v67 + v25];
              *(_OWORD *)unsigned int v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                int64x2_t v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          float32x4_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            float32x4_t v78 = __dst;
          }
          float32x4_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              long long v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              long long v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *long long v104 = v103;
              v104[1] = v101;
              int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                float32x4_t v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                uint64_t v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                uint64_t v89 = (_OWORD *)(v83 + v351);
                *uint64_t v89 = 0u;
                v89[1] = 0u;
                unsigned int v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            uint64_t v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int8x16_t *v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              long long v125 = &v108->i8[v86];
              long long v126 = &v108->i8[v32];
              *(_OWORD *)long long v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int64x2_t v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int64x2_t v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int64x2_t v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              float32x4_t v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              uint64_t v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int8x16_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unsigned int v111 = &v108->i8[v32];
              *(_OWORD *)unsigned int v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              uint64_t v112 = &v108->i8[v86];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int v113 = &v108->i8[v350];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            uint64_t v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *uint64_t v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              long long v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              int16x8_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)int16x8_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *uint64_t v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int16x8_t v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              float32x4_t v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              int64x2_t v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *uint64_t v129 = 0u;
              v129[1] = 0u;
              unsigned int v132 = &v129->i8[v32];
              *(_OWORD *)unsigned int v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              uint64_t v133 = &v129->i8[v86];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int64x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int64x2_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int8x16_t *v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              long long v167 = &v150->i8[v86];
              long long v168 = &v150->i8[v32];
              *(_OWORD *)long long v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)long long v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int64x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int64x2_t v157 = v156;
              v157[1] = v156;
              float32x4_t v158 = (float32x4_t *)&v150->i8[v86];
              *float32x4_t v158 = v156;
              v158[1] = v156;
              long long v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int8x16_t *v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              unsigned int v155 = &v150->i8[v350];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int64x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int8x16_t *v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              long long v188 = &v171->i8[v86];
              long long v189 = &v171->i8[v32];
              *(_OWORD *)long long v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)long long v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int64x2_t v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              float32x4_t v179 = (float32x4_t *)&v171->i8[v86];
              *float32x4_t v179 = v177;
              v179[1] = v177;
              int64x2_t v180 = (float32x4_t *)&v171->i8[v350];
              *int64x2_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int8x16_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v174 = &v171->i8[v32];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int64x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int64x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              long long v209 = &v192->i8[v86];
              long long v210 = &v192->i8[v32];
              *(_OWORD *)long long v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)long long v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int64x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int64x2_t v199 = v198;
              v199[1] = v198;
              float32x4_t v200 = (float32x4_t *)&v192->i8[v86];
              *float32x4_t v200 = v198;
              v200[1] = v198;
              int64x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int64x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int64x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              unsigned int v195 = &v192->i8[v32];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int64x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int64x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              unsigned int v230 = &v213->i8[v86];
              float32x4_t v231 = &v213->i8[v32];
              *(_OWORD *)float32x4_t v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)unsigned int v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              float32x4_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)float32x4_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              long long v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              int8x16_t v222 = (float32x4_t *)&v213->i8[v350];
              *int8x16_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int64x2_t v213 = 0u;
              v129[5] = 0u;
              unsigned int v216 = &v213->i8[v32];
              *(_OWORD *)unsigned int v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              float32x4_t v217 = &v213->i8[v86];
              *(_OWORD *)float32x4_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              int64x2_t v218 = &v213->i8[v350];
              *(_OWORD *)int64x2_t v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            float32x4_t v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *float32x4_t v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              float32x4_t v247 = &v234->i8[v86];
              float32x4_t v248 = &v234->i8[v32];
              *(_OWORD *)float32x4_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)float32x4_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              float32x4_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)float32x4_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                float32x4_t v237 = (float32x4_t *)&v234->i8[v32];
                *float32x4_t v237 = v236;
                v237[1] = v236;
                float32x4_t v238 = (float32x4_t *)&v234->i8[v86];
                *float32x4_t v238 = v236;
                v238[1] = v236;
                uint64_t v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *float32x4_t v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            int v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          float32x4_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            float32x4_t v78 = __dst;
          }
          float32x4_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              long long v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              long long v105 = (_OWORD *)(v83 + a11);
              _OWORD *v105 = v97;
              v105[1] = v99;
              *long long v104 = v103;
              v104[1] = v101;
              int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                uint64_t v94 = (float32x4_t *)(v83 + a11);
                *uint64_t v94 = v93;
                v94[1] = v93;
                float32x4_t v95 = (float32x4_t *)(v83 + v351);
                float32x4_t *v95 = v93;
                v95[1] = v93;
                uint64_t v96 = (float32x4_t *)(v83 + v350);
                float32x4_t *v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                _OWORD *v88 = 0u;
                v88[1] = 0u;
                uint64_t v89 = (_OWORD *)(v83 + v351);
                *uint64_t v89 = 0u;
                v89[1] = 0u;
                unsigned int v90 = (_OWORD *)(v83 + v350);
                _OWORD *v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            uint64_t v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              int8x16_t *v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              long long v125 = &v108->i8[v86];
              long long v126 = &v108->i8[v32];
              *(_OWORD *)long long v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int64x2_t v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int64x2_t v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int64x2_t v115 = (float32x4_t *)&v108->i8[v32];
              float32x4_t *v115 = v114;
              v115[1] = v114;
              float32x4_t v116 = (float32x4_t *)&v108->i8[v86];
              float32x4_t *v116 = v114;
              v116[1] = v114;
              uint64_t v117 = (float32x4_t *)&v108->i8[v350];
              float32x4_t *v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              int8x16_t *v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unsigned int v111 = &v108->i8[v32];
              *(_OWORD *)unsigned int v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              uint64_t v112 = &v108->i8[v86];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int v113 = &v108->i8[v350];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            uint64_t v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *uint64_t v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              long long v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              int16x8_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)int16x8_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *uint64_t v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int16x8_t v136 = (float32x4_t *)&v129->i8[v32];
              float32x4_t *v136 = v135;
              v136[1] = v135;
              float32x4_t v137 = (float32x4_t *)&v129->i8[v86];
              float32x4_t *v137 = v135;
              v137[1] = v135;
              int64x2_t v138 = (float32x4_t *)&v129->i8[v350];
              float32x4_t *v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *uint64_t v129 = 0u;
              v129[1] = 0u;
              unsigned int v132 = &v129->i8[v32];
              *(_OWORD *)unsigned int v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              uint64_t v133 = &v129->i8[v86];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int64x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int64x2_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              int8x16_t *v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              long long v167 = &v150->i8[v86];
              long long v168 = &v150->i8[v32];
              *(_OWORD *)long long v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)long long v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int64x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int64x2_t v157 = v156;
              v157[1] = v156;
              float32x4_t v158 = (float32x4_t *)&v150->i8[v86];
              *float32x4_t v158 = v156;
              v158[1] = v156;
              long long v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              int8x16_t *v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              unsigned int v155 = &v150->i8[v350];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int64x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              int8x16_t *v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              long long v188 = &v171->i8[v86];
              long long v189 = &v171->i8[v32];
              *(_OWORD *)long long v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)long long v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int64x2_t v178 = (float32x4_t *)&v171->i8[v32];
              float32x4_t *v178 = v177;
              v178[1] = v177;
              float32x4_t v179 = (float32x4_t *)&v171->i8[v86];
              *float32x4_t v179 = v177;
              v179[1] = v177;
              int64x2_t v180 = (float32x4_t *)&v171->i8[v350];
              *int64x2_t v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              int8x16_t *v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v174 = &v171->i8[v32];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int64x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int64x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              long long v209 = &v192->i8[v86];
              long long v210 = &v192->i8[v32];
              *(_OWORD *)long long v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)long long v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int64x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int64x2_t v199 = v198;
              v199[1] = v198;
              float32x4_t v200 = (float32x4_t *)&v192->i8[v86];
              *float32x4_t v200 = v198;
              v200[1] = v198;
              int64x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int64x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int64x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              unsigned int v195 = &v192->i8[v32];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int64x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int64x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              unsigned int v230 = &v213->i8[v86];
              float32x4_t v231 = &v213->i8[v32];
              *(_OWORD *)float32x4_t v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)unsigned int v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              float32x4_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)float32x4_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              float32x4_t *v220 = v219;
              v220[1] = v219;
              long long v221 = (float32x4_t *)&v213->i8[v86];
              float32x4_t *v221 = v219;
              v221[1] = v219;
              int8x16_t v222 = (float32x4_t *)&v213->i8[v350];
              *int8x16_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int64x2_t v213 = 0u;
              v129[5] = 0u;
              unsigned int v216 = &v213->i8[v32];
              *(_OWORD *)unsigned int v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              float32x4_t v217 = &v213->i8[v86];
              *(_OWORD *)float32x4_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              int64x2_t v218 = &v213->i8[v350];
              *(_OWORD *)int64x2_t v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            float32x4_t v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *float32x4_t v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              float32x4_t v247 = &v234->i8[v86];
              float32x4_t v248 = &v234->i8[v32];
              *(_OWORD *)float32x4_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)float32x4_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              float32x4_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)float32x4_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                float32x4_t v237 = (float32x4_t *)&v234->i8[v32];
                *float32x4_t v237 = v236;
                v237[1] = v236;
                float32x4_t v238 = (float32x4_t *)&v234->i8[v86];
                *float32x4_t v238 = v236;
                v238[1] = v236;
                uint64_t v239 = (float32x4_t *)&v234->i8[v350];
                float32x4_t *v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *float32x4_t v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            int v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            uint64_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *uint64_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v89->i8[v67 + v25];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              uint64_t v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *uint64_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int8x16_t *v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int64x2_t v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int64x2_t v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              uint64_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)uint64_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int8x16_t *v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              uint64_t v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int8x16_t *v110 = 0u;
              v110[1] = 0u;
              int v113 = &v110->i8[v25];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int64x2_t v115 = &v110->i8[v345];
              *(_OWORD *)int64x2_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              int16x8_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)int16x8_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int64x2_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int64x2_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int64x2_t v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int64x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int16x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int16x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int64x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int64x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              long long v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              unsigned int v155 = &v152->i8[v25];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int64x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int64x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int64x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int64x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int64x2_t v180 = (float32x4_t *)&v173->i8[v25];
              *int64x2_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int64x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int64x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int64x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int64x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int64x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int64x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int64x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int64x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              unsigned int v230 = &v215->i8[v67 + v25];
              *(_OWORD *)unsigned int v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                int64x2_t v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              float32x4_t *v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              float32x4_t *v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                float32x4_t *v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            uint64_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *uint64_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              uint64_t v108 = &v89->i8[v67 + v25];
              *(_OWORD *)uint64_t v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              uint64_t v96 = (float32x4_t *)&v89->i8[v25];
              float32x4_t *v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              float32x4_t *v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              float32x4_t *v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *uint64_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              uint64_t v94 = &v89->i8[v345];
              *(_OWORD *)uint64_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              int8x16_t *v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int64x2_t v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int64x2_t v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              uint64_t v129 = &v110->i8[v67 + v25];
              *(_OWORD *)uint64_t v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              int8x16_t *v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              uint64_t v117 = (float32x4_t *)&v110->i8[v25];
              float32x4_t *v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              float32x4_t *v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              int8x16_t *v110 = 0u;
              v110[1] = 0u;
              int v113 = &v110->i8[v25];
              *(_OWORD *)int v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int64x2_t v115 = &v110->i8[v345];
              *(_OWORD *)int64x2_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              int16x8_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)int16x8_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int64x2_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int64x2_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int64x2_t v138 = (float32x4_t *)&v131->i8[v25];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              float32x4_t *v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int64x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int64x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int16x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int16x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int64x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int64x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              long long v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              unsigned int v155 = &v152->i8[v25];
              *(_OWORD *)unsigned int v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int64x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int64x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              *uint64_t v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int64x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int64x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int64x2_t v180 = (float32x4_t *)&v173->i8[v25];
              *int64x2_t v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              float32x4_t *v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              *uint64_t v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int64x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int64x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int64x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int64x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int64x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int64x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int64x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int64x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              unsigned int v230 = &v215->i8[v67 + v25];
              *(_OWORD *)unsigned int v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                int64x2_t v218 = (float32x4_t *)&v215->i8[v25];
                float32x4_t *v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                float32x4_t *v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v134 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v127 = v20;
  uint64_t v128 = v21;
  uint64_t v112 = v22;
  uint64_t v23 = v12;
  v153[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v131 = v14;
  unsigned int v114 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v113 = v114 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  unsigned int v32 = v134;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v125 = 0;
LABEL_32:
      unsigned int v122 = v34 - 4;
      unsigned int v118 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v111 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v125 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v125 = 0;
  unsigned int v111 = 0;
  unsigned int v118 = 0;
  unsigned int v122 = 0;
LABEL_33:
  if (v27 <= v113)
  {
    unsigned int v124 = v134 + a9 - 1;
    if (v134 >> 4 <= v124 >> 4)
    {
      unsigned int v133 = v25 >> 4;
      unsigned int v110 = v26 >> 3;
      int v132 = (v25 & 0xF) + 1;
      int v109 = (v26 & 7) + 1;
      uint64_t v120 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v119 = v42.i32[0] | v42.i32[1];
      int8x8_t v117 = v42;
      BOOL v115 = v42.i32[1] != 0;
      BOOL v116 = v42.i32[0] != 0;
      uint64_t v123 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v131) {
          int v44 = v131;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v114 < v43) {
          unsigned int v43 = v114;
        }
        int v121 = v44 - 8 * v27;
        int v130 = v43 - v44 + 1;
        unsigned int v45 = v134 >> 4;
        int v46 = v109;
        if (v27 != v110) {
          int v46 = 8;
        }
        unsigned int v135 = v46;
        uint64_t v129 = v112 + (v44 - v131) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v124 < v48) {
            unsigned int v48 = v134 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v133) {
            unsigned int v51 = v132;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v131 && v47 >= v32)
          {
            int v53 = v132;
            if (v45 != v133) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v130 != v135;
          }
          if (v125)
          {
            if (v122 | v118)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v122 != 0;
              int v58 = 1;
              BOOL v60 = v118 != 0;
              unsigned int v59 = v118;
              unsigned int v61 = v122;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v118) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v122) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v122) + (v27 >> v118) * v111) + (v56 << 12);
          }
          else
          {
            if (v119)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v115;
              BOOL v66 = v116;
              __int32 v67 = v117.i32[0];
              __int32 v68 = v117.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 12;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          float32x4_t v83 = (unsigned char *)(v127 + v69);
          if (v126)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v134;
            float32x4_t v83 = __dst;
          }
          unsigned int v85 = (unsigned __int8 *)(v128 + 8 * v77);
          uint64_t v86 = v129 + 32 * (v49 - v32);
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v135 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v123;
            block[5] = v83;
            char v143 = v51;
            char v144 = v135;
            unsigned int v139 = v121;
            unsigned int v140 = v49 - v47;
            block[6] = v85;
            uint64_t v137 = v129 + 32 * (v49 - v32);
            uint64_t v138 = a11;
            unsigned int v141 = v130;
            unsigned int v142 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v123 + 8) + 7384), block);
              unsigned int v32 = v134;
              uint64_t v23 = v123;
            }
            else
            {
              unint64_t v96 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v146, 512, (unint64_t)v83, *v85)];
              unint64_t v97 = v96
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 512, v96, v85[1]);
              unint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v97, v85[2]);
              unint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v98, v85[3]);
              unint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 512, v99, v85[4]);
              unint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v100, v85[5]);
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v101, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v153, 512, v101 + v102, v85[7]);
              unint64_t v103 = v141;
              uint64_t v23 = v123;
              if (v141)
              {
                unint64_t v104 = 0;
                long long v105 = &v146[512 * (unint64_t)v139 + 32 * v140];
                unsigned int v106 = v142;
                do
                {
                  if (v106)
                  {
                    uint64_t v107 = 0;
                    uint64_t v108 = v137 + v138 * v104;
                    do
                    {
                      *(unsigned char *)(v108 + v107) = v105[v107];
                      ++v107;
                      unsigned int v106 = v142;
                    }
                    while (32 * (unint64_t)v142 > v107);
                    unint64_t v103 = v141;
                  }
                  ++v104;
                  v105 += 512;
                }
                while (v104 < v103);
              }
              unsigned int v32 = v134;
            }
          }
          else
          {
            unint64_t v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v88, v85[1]);
            uint64_t v90 = v86 + v120;
            unint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v120, a11, v89, v85[2]);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v120 + 128, a11, v91, v85[3]);
            unint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v92, v85[4]);
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 384, a11, v93, v85[5]);
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 256, a11, v94, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 384, a11, v94 + v95, v85[7]);
            unsigned int v32 = v134;
            uint64_t v23 = v123;
          }
          BOOL v28 = v45++ == v124 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v113;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v134 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v127 = v20;
  uint64_t v128 = v21;
  uint64_t v112 = v22;
  uint64_t v23 = v12;
  v153[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v131 = v14;
  unsigned int v114 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 3;
  unsigned int v113 = v114 >> 3;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v126 = v31;
  unsigned int v32 = v134;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v125 = 0;
LABEL_32:
      unsigned int v122 = v34 - 4;
      unsigned int v118 = v33 - 3;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v111 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v125 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v125 = 0;
  unsigned int v111 = 0;
  unsigned int v118 = 0;
  unsigned int v122 = 0;
LABEL_33:
  if (v27 <= v113)
  {
    unsigned int v124 = v134 + a9 - 1;
    if (v134 >> 4 <= v124 >> 4)
    {
      unsigned int v133 = v25 >> 4;
      unsigned int v110 = v26 >> 3;
      int v132 = (v25 & 0xF) + 1;
      int v109 = (v26 & 7) + 1;
      uint64_t v120 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v41, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v41));
      __int32 v119 = v42.i32[0] | v42.i32[1];
      int8x8_t v117 = v42;
      BOOL v115 = v42.i32[1] != 0;
      BOOL v116 = v42.i32[0] != 0;
      uint64_t v123 = v23;
      do
      {
        unsigned int v43 = (8 * v27) | 7;
        if (8 * v27 <= v131) {
          int v44 = v131;
        }
        else {
          int v44 = 8 * v27;
        }
        if (v114 < v43) {
          unsigned int v43 = v114;
        }
        int v121 = v44 - 8 * v27;
        int v130 = v43 - v44 + 1;
        unsigned int v45 = v134 >> 4;
        int v46 = v109;
        if (v27 != v110) {
          int v46 = 8;
        }
        unsigned int v135 = v46;
        uint64_t v129 = v112 + (v44 - v131) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v124 < v48) {
            unsigned int v48 = v134 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v133) {
            unsigned int v51 = v132;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v27 >= v131 && v47 >= v32)
          {
            int v53 = v132;
            if (v45 != v133) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v130 != v135;
          }
          if (v125)
          {
            if (v122 | v118)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v122 != 0;
              int v58 = 1;
              BOOL v60 = v118 != 0;
              unsigned int v59 = v118;
              unsigned int v61 = v122;
              do
              {
                --v59;
                if (v60) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v118) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                --v61;
                if (v57) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v122) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v61 != 0;
                BOOL v60 = v59 != 0;
              }
              while (v61 | v59);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v122) + (v27 >> v118) * v111) + (v56 << 12);
          }
          else
          {
            if (v119)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v115;
              BOOL v66 = v116;
              __int32 v67 = v117.i32[0];
              __int32 v68 = v117.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 12;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          float32x4_t v83 = (unsigned char *)(v127 + v69);
          if (v126)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v134;
            float32x4_t v83 = __dst;
          }
          unsigned int v85 = (unsigned __int8 *)(v128 + 8 * v77);
          uint64_t v86 = v129 + 32 * (v49 - v32);
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v135 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v123;
            block[5] = v83;
            char v143 = v51;
            char v144 = v135;
            unsigned int v139 = v121;
            unsigned int v140 = v49 - v47;
            block[6] = v85;
            uint64_t v137 = v129 + 32 * (v49 - v32);
            uint64_t v138 = a11;
            unsigned int v141 = v130;
            unsigned int v142 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v123 + 8) + 7384), block);
              unsigned int v32 = v134;
              uint64_t v23 = v123;
            }
            else
            {
              unint64_t v96 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v146, 512, (unint64_t)v83, *v85)];
              unint64_t v97 = v96
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 512, v96, v85[1]);
              unint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v97, v85[2]);
              unint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v98, v85[3]);
              unint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 512, v99, v85[4]);
              unint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v100, v85[5]);
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v101, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v153, 512, v101 + v102, v85[7]);
              unint64_t v103 = v141;
              uint64_t v23 = v123;
              if (v141)
              {
                unint64_t v104 = 0;
                long long v105 = &v146[512 * (unint64_t)v139 + 32 * v140];
                unsigned int v106 = v142;
                do
                {
                  if (v106)
                  {
                    uint64_t v107 = 0;
                    uint64_t v108 = v137 + v138 * v104;
                    do
                    {
                      *(unsigned char *)(v108 + v107) = v105[v107];
                      ++v107;
                      unsigned int v106 = v142;
                    }
                    while (32 * (unint64_t)v142 > v107);
                    unint64_t v103 = v141;
                  }
                  ++v104;
                  v105 += 512;
                }
                while (v104 < v103);
              }
              unsigned int v32 = v134;
            }
          }
          else
          {
            unint64_t v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v88, v85[1]);
            uint64_t v90 = v86 + v120;
            unint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v120, a11, v89, v85[2]);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v120 + 128, a11, v91, v85[3]);
            unint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 256, a11, v92, v85[4]);
            unint64_t v94 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 384, a11, v93, v85[5]);
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 256, a11, v94, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v90 + 384, a11, v94 + v95, v85[7]);
            unsigned int v32 = v134;
            uint64_t v23 = v123;
          }
          BOOL v28 = v45++ == v124 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v113;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v128 = v21;
  uint64_t v129 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  v154[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v127 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v125 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v125 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 3;
      int v134 = ((v20 - 1) & 0xF) + 1;
      unsigned int v135 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 7) + 1;
      uint64_t v119 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v124 = v34.i32[0] | v34.i32[1];
      int8x8_t v123 = v34;
      BOOL v121 = v34.i32[1] != 0;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v133) {
          int v36 = v133;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v120 = v36 - 8 * v25;
        int v131 = v35 - v36 + 1;
        unsigned int v132 = 8 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 8;
        }
        unsigned int v136 = v38;
        uint64_t v130 = v117 + (v36 - v133) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v125 < v40) {
            unsigned int v40 = v125;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v135) {
            unsigned int v43 = v134;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v132 >= v133 && v39 >= v16)
          {
            int v45 = v134;
            if (v37 != v135) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v131 != v136;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v100 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v101 = 0;
            }
            else {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
            }
            unsigned int v102 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v103 = 0;
              if (v101) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if (v103 | v101)
              {
LABEL_121:
                int v104 = 0;
                uint64_t v105 = 0;
                int v106 = v37 & v100;
                int v107 = v25 & v102;
                BOOL v108 = v103 != 0;
                BOOL v109 = v101 != 0;
                int v110 = 1;
                do
                {
                  --v103;
                  if (v108) {
                    v105 |= (unint64_t)(v110 & v107) << v104++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v101;
                  if (v109) {
                    v105 |= (unint64_t)(v110 & v106) << v104++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v110 *= 2;
                  --v104;
                  BOOL v109 = v101 != 0;
                  BOOL v108 = v103 != 0;
                }
                while (v101 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v105 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v132 / v72 * ((v68 + v112) / v68)) << 14) + (v105 << 12);
            goto LABEL_60;
          }
          if (v124)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v121;
            BOOL v51 = v122;
            __int32 v52 = v123.i32[0];
            __int32 v53 = v123.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v128 + v54);
          if (v127)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v128 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v129 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v130 + 32 * (v41 - v16);
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v136 > 7)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 128, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 128, a11, v82, v76[3]);
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 256, a11, v83, v76[4]);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 384, a11, v84, v76[5]);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 256, a11, v85, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 384, a11, v85 + v86, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v144 = v43;
          char v145 = v136;
          unsigned int v140 = v120;
          unsigned int v141 = v41 - v39;
          block[6] = v76;
          uint64_t v138 = v78;
          uint64_t v139 = a11;
          unsigned int v142 = v131;
          unsigned int v143 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v87 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 512, (unint64_t)v73, *v76)];
          unint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 512, v87, v76[1]);
          unint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v88, v76[2]);
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v89, v76[3]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v90, v76[4]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v91, v76[5]);
          uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v92, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v154, 512, v92 + v93, v76[7]);
          unint64_t v94 = v142;
          uint64_t v16 = v77;
          if (v142)
          {
            unint64_t v95 = 0;
            unint64_t v96 = &v147[512 * (unint64_t)v140 + 32 * v141];
            unsigned int v97 = v143;
            do
            {
              if (v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v138 + v139 * v95;
                do
                {
                  *(unsigned char *)(v99 + v98) = v96[v98];
                  ++v98;
                  unsigned int v97 = v143;
                }
                while (32 * (unint64_t)v143 > v98);
                unint64_t v94 = v142;
              }
              ++v95;
              v96 += 512;
            }
            while (v95 < v94);
          }
LABEL_28:
          BOOL v29 = v37++ == v125 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v128 = v21;
  uint64_t v129 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  v154[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v127 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v125 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v125 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 3;
      int v134 = ((v20 - 1) & 0xF) + 1;
      unsigned int v135 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 7) + 1;
      uint64_t v119 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v124 = v34.i32[0] | v34.i32[1];
      int8x8_t v123 = v34;
      BOOL v121 = v34.i32[1] != 0;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (8 * v25) | 7;
        if (8 * v25 <= v133) {
          int v36 = v133;
        }
        else {
          int v36 = 8 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v120 = v36 - 8 * v25;
        int v131 = v35 - v36 + 1;
        unsigned int v132 = 8 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 8;
        }
        unsigned int v136 = v38;
        uint64_t v130 = v117 + (v36 - v133) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v125 < v40) {
            unsigned int v40 = v125;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v135) {
            unsigned int v43 = v134;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v132 >= v133 && v39 >= v16)
          {
            int v45 = v134;
            if (v37 != v135) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v131 != v136;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v100 = (v68 >> 4) - 1;
            if (v70) {
              unsigned int v101 = 0;
            }
            else {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
            }
            unsigned int v102 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v103 = 0;
              if (v101) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if (v103 | v101)
              {
LABEL_121:
                int v104 = 0;
                uint64_t v105 = 0;
                int v106 = v37 & v100;
                int v107 = v25 & v102;
                BOOL v108 = v103 != 0;
                BOOL v109 = v101 != 0;
                int v110 = 1;
                do
                {
                  --v103;
                  if (v108) {
                    v105 |= (unint64_t)(v110 & v107) << v104++;
                  }
                  else {
                    unsigned int v103 = 0;
                  }
                  --v101;
                  if (v109) {
                    v105 |= (unint64_t)(v110 & v106) << v104++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v110 *= 2;
                  --v104;
                  BOOL v109 = v101 != 0;
                  BOOL v108 = v103 != 0;
                }
                while (v101 | v103);
                goto LABEL_133;
              }
            }
            uint64_t v105 = 0;
LABEL_133:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v132 / v72 * ((v68 + v112) / v68)) << 14) + (v105 << 12);
            goto LABEL_60;
          }
          if (v124)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v121;
            BOOL v51 = v122;
            __int32 v52 = v123.i32[0];
            __int32 v53 = v123.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v128 + v54);
          if (v127)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v128 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v129 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v130 + 32 * (v41 - v16);
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v136 > 7)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 128, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 128, a11, v82, v76[3]);
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 256, a11, v83, v76[4]);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 384, a11, v84, v76[5]);
            uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 256, a11, v85, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119 + 384, a11, v85 + v86, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v144 = v43;
          char v145 = v136;
          unsigned int v140 = v120;
          unsigned int v141 = v41 - v39;
          block[6] = v76;
          uint64_t v138 = v78;
          uint64_t v139 = a11;
          unsigned int v142 = v131;
          unsigned int v143 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v87 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 512, (unint64_t)v73, *v76)];
          unint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 512, v87, v76[1]);
          unint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 512, v88, v76[2]);
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 512, v89, v76[3]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 512, v90, v76[4]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 512, v91, v76[5]);
          uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 512, v92, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v154, 512, v92 + v93, v76[7]);
          unint64_t v94 = v142;
          uint64_t v16 = v77;
          if (v142)
          {
            unint64_t v95 = 0;
            unint64_t v96 = &v147[512 * (unint64_t)v140 + 32 * v141];
            unsigned int v97 = v143;
            do
            {
              if (v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v138 + v139 * v95;
                do
                {
                  *(unsigned char *)(v99 + v98) = v96[v98];
                  ++v98;
                  unsigned int v97 = v143;
                }
                while (32 * (unint64_t)v143 > v98);
                unint64_t v94 = v142;
              }
              ++v95;
              v96 += 512;
            }
            while (v95 < v94);
          }
LABEL_28:
          BOOL v29 = v37++ == v125 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v276 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v227 = v228 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v241 = v23;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v25 = *(unsigned __int8 *)(a1 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v240 = 0;
LABEL_32:
      unsigned int v238 = v25 - 3;
      unsigned int v232 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v225 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v240 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v240 = 0;
  unsigned int v225 = 0;
  unsigned int v232 = 0;
  unsigned int v238 = 0;
LABEL_33:
  if (v19 <= v227)
  {
    unsigned int v239 = a7 + a9 - 1;
    if (a7 >> 3 <= v239 >> 3)
    {
      unsigned int v248 = v17 >> 3;
      unsigned int v224 = v18 >> 3;
      int v247 = (v17 & 7) + 1;
      int v223 = (v18 & 7) + 1;
      uint64_t v234 = a11;
      uint64_t v235 = 2 * a11;
      uint32x2_t v32 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v33 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v32, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v32));
      __int32 v233 = v33.i32[0] | v33.i32[1];
      int8x8_t v231 = v33;
      BOOL v229 = v33.i32[0] != 0;
      BOOL v230 = v33.i32[1] != 0;
      unsigned int v236 = a8;
      do
      {
        unsigned int v34 = (8 * v19) | 7;
        if (8 * v19 <= a8) {
          int v35 = a8;
        }
        else {
          int v35 = 8 * v19;
        }
        if (v228 < v34) {
          unsigned int v34 = v228;
        }
        int v237 = v35 - 8 * v19;
        int v245 = v34 - v35 + 1;
        unsigned int v36 = a7 >> 3;
        int v37 = v223;
        if (v19 != v224) {
          int v37 = 8;
        }
        unsigned int v249 = v37;
        uint64_t v244 = a2 + (v35 - a8) * a11;
        unsigned int v38 = a7;
        do
        {
          unsigned int v39 = 8 * v36;
          unsigned int v40 = 8 * (v36 + 1) - 1;
          if (8 * v36 <= v38) {
            int v41 = v38;
          }
          else {
            int v41 = 8 * v36;
          }
          if (v239 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v36 == v248) {
            unsigned int v43 = v247;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= a8 && v39 >= v38)
          {
            int v45 = v247;
            if (v36 != v248) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v245 != v249;
          }
          if (v240)
          {
            if (v238 | v232)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v232 != 0;
              int v50 = 1;
              BOOL v52 = v238 != 0;
              unsigned int v51 = v232;
              unsigned int v53 = v238;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v36 & ~(-1 << v238) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v232) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(a1 + 320) * ((v36 >> v238) + (v19 >> v232) * v225) + (v48 << 8);
          }
          else
          {
            if (v233)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v229;
              BOOL v58 = v230;
              __int32 v60 = v231.i32[0];
              __int32 v59 = v231.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v36) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 8;
          }
          unsigned int v62 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_111:
              uint64_t v69 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_111;
            }
          }
          int v68 = 0;
          uint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            if (v70) {
              v69 |= (unint64_t)(v72 & v36) << v68++;
            }
            else {
              unsigned int v64 = 0;
            }
            --v67;
            if (v71) {
              v69 |= (unint64_t)(v72 & v19) << v68++;
            }
            else {
              unsigned int v67 = 0;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_112:
          unsigned int v73 = (const char *)(a3 + v61);
          if (v241)
          {
            long long v74 = *((_OWORD *)v73 + 13);
            v259[12] = *((_OWORD *)v73 + 12);
            v259[13] = v74;
            long long v75 = *((_OWORD *)v73 + 15);
            v259[14] = *((_OWORD *)v73 + 14);
            v259[15] = v75;
            long long v76 = *((_OWORD *)v73 + 9);
            v259[8] = *((_OWORD *)v73 + 8);
            v259[9] = v76;
            long long v77 = *((_OWORD *)v73 + 11);
            v259[10] = *((_OWORD *)v73 + 10);
            v259[11] = v77;
            long long v78 = *((_OWORD *)v73 + 5);
            v259[4] = *((_OWORD *)v73 + 4);
            v259[5] = v78;
            long long v79 = *((_OWORD *)v73 + 7);
            v259[6] = *((_OWORD *)v73 + 6);
            v259[7] = v79;
            long long v80 = *((_OWORD *)v73 + 1);
            v259[0] = *(_OWORD *)v73;
            v259[1] = v80;
            long long v81 = *((_OWORD *)v73 + 2);
            long long v82 = *((_OWORD *)v73 + 3);
            unsigned int v73 = (const char *)v259;
            v259[2] = v81;
            v259[3] = v82;
          }
          unint64_t v83 = (unsigned __int8 *)(a4 + 8 * v69);
          unint64_t v84 = (int8x16_t *)(v244 + 4 * (v41 - v38));
          char v85 = v43 < 8 || v44;
          if ((v85 & 1) == 0 && v249 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 96)
            {
              int8x16_t v95 = vld1q_dup_s8(v73);
              *unint64_t v84 = v95;
              *(int8x16_t *)((char *)v84 + a11) = v95;
              uint64_t v87 = 1;
            }
            else if (v86 == 31)
            {
              uint64_t v91 = *((void *)v73 + 1);
              uint64_t v92 = *((void *)v73 + 2);
              uint64_t v93 = *((void *)v73 + 3);
              v84->i64[0] = *(void *)v73;
              v84->i64[1] = v92;
              unint64_t v94 = (uint64_t *)((char *)v84->i64 + a11);
              *unint64_t v94 = v91;
              v94[1] = v93;
              uint64_t v87 = 32;
            }
            else if (*v83)
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v84, a11, (uint64_t)v73, v86);
            }
            else
            {
              uint64_t v87 = 0;
              v84->i64[0] = 0;
              v84->i64[1] = 0;
              unint64_t v88 = (uint64_t *)((char *)v84->i64 + a11);
              void *v88 = 0;
              v88[1] = 0;
            }
            uint64_t v96 = (uint64_t)&v73[v87];
            unsigned int v97 = (int8x16_t *)((char *)v84 + v235);
            unsigned int v98 = v83[1];
            if (v98 == 96)
            {
              int8x16_t v105 = vld1q_dup_s8((const char *)v96);
              int8x16_t *v97 = v105;
              *(int8x16_t *)((char *)v97 + a11) = v105;
              uint64_t v99 = 1;
            }
            else if (v98 == 31)
            {
              uint64_t v101 = *(void *)(v96 + 8);
              uint64_t v102 = *(void *)(v96 + 16);
              uint64_t v103 = *(void *)(v96 + 24);
              v97->i64[0] = *(void *)v96;
              v97->i64[1] = v102;
              int v104 = (uint64_t *)((char *)v97->i64 + a11);
              *int v104 = v101;
              v104[1] = v103;
              uint64_t v99 = 32;
            }
            else if (v83[1])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((__int32 *)((char *)v84->i32 + v235), a11, v96, v98);
            }
            else
            {
              uint64_t v99 = 0;
              v97->i64[0] = 0;
              v97->i64[1] = 0;
              unsigned int v100 = (uint64_t *)((char *)v97->i64 + a11);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v106 = v96 + v99;
            int v107 = v84 + 1;
            unsigned int v108 = v83[2];
            if (v108 == 96)
            {
              int8x16_t v115 = vld1q_dup_s8((const char *)v106);
              int8x16_t *v107 = v115;
              *(int8x16_t *)((char *)v107 + a11) = v115;
              uint64_t v109 = 1;
            }
            else if (v108 == 31)
            {
              uint64_t v111 = *(void *)(v106 + 8);
              uint64_t v112 = *(void *)(v106 + 16);
              uint64_t v113 = *(void *)(v106 + 24);
              v84[1].i64[0] = *(void *)v106;
              v84[1].i64[1] = v112;
              unsigned int v114 = (uint64_t *)((char *)v107->i64 + a11);
              *unsigned int v114 = v111;
              v114[1] = v113;
              uint64_t v109 = 32;
            }
            else if (v83[2])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v107, a11, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v107->i64[0] = 0;
              v84[1].i64[1] = 0;
              int v110 = (uint64_t *)((char *)v107->i64 + a11);
              void *v110 = 0;
              v110[1] = 0;
            }
            uint64_t v116 = v106 + v109;
            uint64_t v117 = v97 + 1;
            unsigned int v118 = v83[3];
            if (v118 == 96)
            {
              int8x16_t v125 = vld1q_dup_s8((const char *)v116);
              int8x16_t *v117 = v125;
              *(int8x16_t *)((char *)v117 + a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              uint64_t v121 = *(void *)(v116 + 8);
              uint64_t v122 = *(void *)(v116 + 16);
              uint64_t v123 = *(void *)(v116 + 24);
              v97[1].i64[0] = *(void *)v116;
              v97[1].i64[1] = v122;
              __int32 v124 = (uint64_t *)((char *)v117->i64 + a11);
              *__int32 v124 = v121;
              v124[1] = v123;
              uint64_t v119 = 32;
            }
            else if (v83[3])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, v116, v118);
            }
            else
            {
              uint64_t v119 = 0;
              v117->i64[0] = 0;
              v97[1].i64[1] = 0;
              int v120 = (uint64_t *)((char *)v117->i64 + a11);
              void *v120 = 0;
              v120[1] = 0;
            }
            uint64_t v126 = v116 + v119;
            int v127 = (int8x16_t *)((char *)v84 + v234 * 4);
            unsigned int v128 = v83[4];
            if (v128 == 96)
            {
              int8x16_t v135 = vld1q_dup_s8((const char *)v126);
              int8x16_t *v127 = v135;
              *(int8x16_t *)((char *)v127 + a11) = v135;
              uint64_t v129 = 1;
            }
            else if (v128 == 31)
            {
              uint64_t v131 = *(void *)(v126 + 8);
              uint64_t v132 = *(void *)(v126 + 16);
              uint64_t v133 = *(void *)(v126 + 24);
              v127->i64[0] = *(void *)v126;
              v127->i64[1] = v132;
              int v134 = (uint64_t *)((char *)v127->i64 + a11);
              *int v134 = v131;
              v134[1] = v133;
              uint64_t v129 = 32;
            }
            else if (v83[4])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v84->i32[v234], a11, v126, v128);
            }
            else
            {
              uint64_t v129 = 0;
              v127->i64[0] = 0;
              v127->i64[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v127->i64 + a11);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v126 + v129;
            uint64_t v137 = (int8x16_t *)((char *)v84 + 6 * a11);
            unsigned int v138 = v83[5];
            if (v138 == 96)
            {
              int8x16_t v145 = vld1q_dup_s8((const char *)v136);
              int8x16_t *v137 = v145;
              *(int8x16_t *)((char *)v137 + a11) = v145;
              uint64_t v139 = 1;
            }
            else if (v138 == 31)
            {
              uint64_t v141 = *(void *)(v136 + 8);
              uint64_t v142 = *(void *)(v136 + 16);
              uint64_t v143 = *(void *)(v136 + 24);
              v137->i64[0] = *(void *)v136;
              v137->i64[1] = v142;
              char v144 = (uint64_t *)((char *)v137->i64 + a11);
              *char v144 = v141;
              v144[1] = v143;
              uint64_t v139 = 32;
            }
            else if (v83[5])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, a11, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v137->i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + a11);
              void *v140 = 0;
              v140[1] = 0;
            }
            uint64_t v146 = v136 + v139;
            uint64_t v147 = v127 + 1;
            unsigned int v148 = v83[6];
            if (v148 == 96)
            {
              int8x16_t v155 = vld1q_dup_s8((const char *)v146);
              int8x16_t *v147 = v155;
              *(int8x16_t *)((char *)v147 + a11) = v155;
              uint64_t v149 = 1;
            }
            else if (v148 == 31)
            {
              uint64_t v151 = *(void *)(v146 + 8);
              uint64_t v152 = *(void *)(v146 + 16);
              uint64_t v153 = *(void *)(v146 + 24);
              v127[1].i64[0] = *(void *)v146;
              v127[1].i64[1] = v152;
              uint64_t v154 = (uint64_t *)((char *)v147->i64 + a11);
              *uint64_t v154 = v151;
              v154[1] = v153;
              uint64_t v149 = 32;
            }
            else if (v83[6])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, a11, v146, v148);
            }
            else
            {
              uint64_t v149 = 0;
              v147->i64[0] = 0;
              v127[1].i64[1] = 0;
              uint64_t v150 = (uint64_t *)((char *)v147->i64 + a11);
              void *v150 = 0;
              v150[1] = 0;
            }
            uint64_t v156 = v146 + v149;
            int64x2_t v157 = v137 + 1;
            unsigned int v158 = v83[7];
            if (v158 == 96)
            {
              int8x16_t v164 = vld1q_dup_s8((const char *)v156);
              *int64x2_t v157 = v164;
              *(int8x16_t *)((char *)v157 + a11) = v164;
              a8 = v236;
            }
            else
            {
              a8 = v236;
              if (v158 == 31)
              {
                uint64_t v160 = *(void *)(v156 + 8);
                uint64_t v161 = *(void *)(v156 + 16);
                uint64_t v162 = *(void *)(v156 + 24);
                v137[1].i64[0] = *(void *)v156;
                v137[1].i64[1] = v161;
                long long v163 = (uint64_t *)((char *)v157->i64 + a11);
                void *v163 = v160;
                v163[1] = v162;
              }
              else if (v83[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, a11, v156, v158);
              }
              else
              {
                v157->i64[0] = 0;
                v137[1].i64[1] = 0;
                long long v159 = (uint64_t *)((char *)v157->i64 + a11);
                void *v159 = 0;
                v159[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v73;
          char v257 = v43;
          char v258 = v249;
          int v253 = v237;
          unsigned int v254 = v41 - v39;
          block[6] = a4 + 8 * v69;
          unsigned int v251 = v84;
          uint64_t v252 = a11;
          unsigned int v255 = v245;
          unsigned int v256 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v38 = a7;
            goto LABEL_48;
          }
          unsigned int v89 = *v83;
          if (v89 == 96)
          {
            int8x16_t v165 = vld1q_dup_s8(v73);
            int8x16_t v260 = v165;
            int8x16_t v262 = v165;
            uint64_t v90 = 1;
          }
          else if (v89 == 31)
          {
            uint64_t v166 = *((void *)v73 + 1);
            uint64_t v167 = *((void *)v73 + 2);
            uint64_t v168 = *((void *)v73 + 3);
            v260.i64[0] = *(void *)v73;
            v260.i64[1] = v167;
            v262.i64[0] = v166;
            v262.i64[1] = v168;
            uint64_t v90 = 32;
          }
          else if (*v83)
          {
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, (uint64_t)v73, v89);
          }
          else
          {
            uint64_t v90 = 0;
            int8x16_t v260 = 0uLL;
            int8x16_t v262 = 0uLL;
          }
          uint64_t v169 = (uint64_t)&v73[v90];
          unsigned int v170 = v83[1];
          if (v170 == 96)
          {
            int8x16_t v172 = vld1q_dup_s8((const char *)v169);
            int8x16_t v264 = v172;
            int8x16_t v266 = v172;
            uint64_t v171 = 1;
          }
          else if (v170 == 31)
          {
            uint64_t v173 = *(void *)(v169 + 8);
            uint64_t v174 = *(void *)(v169 + 16);
            uint64_t v175 = *(void *)(v169 + 24);
            v264.i64[0] = *(void *)v169;
            v264.i64[1] = v174;
            v266.i64[0] = v173;
            v266.i64[1] = v175;
            uint64_t v171 = 32;
          }
          else if (v83[1])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 32, v169, v170);
          }
          else
          {
            uint64_t v171 = 0;
            int8x16_t v264 = 0uLL;
            int8x16_t v266 = 0uLL;
          }
          uint64_t v176 = v169 + v171;
          unsigned int v177 = v83[2];
          if (v177 == 96)
          {
            int8x16_t v179 = vld1q_dup_s8((const char *)v176);
            int8x16_t v261 = v179;
            int8x16_t v263 = v179;
            uint64_t v178 = 1;
          }
          else if (v177 == 31)
          {
            uint64_t v180 = *(void *)(v176 + 8);
            uint64_t v181 = *(void *)(v176 + 16);
            uint64_t v182 = *(void *)(v176 + 24);
            v261.i64[0] = *(void *)v176;
            v261.i64[1] = v181;
            v263.i64[0] = v180;
            v263.i64[1] = v182;
            uint64_t v178 = 32;
          }
          else if (v83[2])
          {
            uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v176, v177);
          }
          else
          {
            uint64_t v178 = 0;
            int8x16_t v261 = 0uLL;
            int8x16_t v263 = 0uLL;
          }
          uint64_t v183 = v176 + v178;
          unsigned int v184 = v83[3];
          if (v184 == 96)
          {
            int8x16_t v186 = vld1q_dup_s8((const char *)v183);
            int8x16_t v265 = v186;
            int8x16_t v267 = v186;
            uint64_t v185 = 1;
          }
          else if (v184 == 31)
          {
            uint64_t v187 = *(void *)(v183 + 8);
            uint64_t v188 = *(void *)(v183 + 16);
            uint64_t v189 = *(void *)(v183 + 24);
            v265.i64[0] = *(void *)v183;
            v265.i64[1] = v188;
            v267.i64[0] = v187;
            v267.i64[1] = v189;
            uint64_t v185 = 32;
          }
          else if (v83[3])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v183, v184);
          }
          else
          {
            uint64_t v185 = 0;
            int8x16_t v265 = 0uLL;
            int8x16_t v267 = 0uLL;
          }
          uint64_t v190 = v183 + v185;
          unsigned int v191 = v83[4];
          if (v191 == 96)
          {
            int8x16_t v193 = vld1q_dup_s8((const char *)v190);
            int8x16_t v268 = v193;
            int8x16_t v270 = v193;
            uint64_t v192 = 1;
          }
          else if (v191 == 31)
          {
            uint64_t v194 = *(void *)(v190 + 8);
            uint64_t v195 = *(void *)(v190 + 16);
            uint64_t v196 = *(void *)(v190 + 24);
            v268.i64[0] = *(void *)v190;
            v268.i64[1] = v195;
            v270.i64[0] = v194;
            v270.i64[1] = v196;
            uint64_t v192 = 32;
          }
          else if (v83[4])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v190, v191);
          }
          else
          {
            uint64_t v192 = 0;
            int8x16_t v268 = 0uLL;
            int8x16_t v270 = 0uLL;
          }
          uint64_t v197 = v190 + v192;
          unsigned int v198 = v83[5];
          if (v198 == 96)
          {
            int8x16_t v200 = vld1q_dup_s8((const char *)v197);
            int8x16_t v272 = v200;
            int8x16_t v274 = v200;
            uint64_t v199 = 1;
          }
          else if (v198 == 31)
          {
            uint64_t v201 = *(void *)(v197 + 8);
            uint64_t v202 = *(void *)(v197 + 16);
            uint64_t v203 = *(void *)(v197 + 24);
            v272.i64[0] = *(void *)v197;
            v272.i64[1] = v202;
            v274.i64[0] = v201;
            v274.i64[1] = v203;
            uint64_t v199 = 32;
          }
          else if (v83[5])
          {
            uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, v197, v198);
          }
          else
          {
            uint64_t v199 = 0;
            int8x16_t v272 = 0uLL;
            int8x16_t v274 = 0uLL;
          }
          uint64_t v204 = v197 + v199;
          unsigned int v205 = v83[6];
          if (v205 == 96)
          {
            int8x16_t v207 = vld1q_dup_s8((const char *)v204);
            int8x16_t v269 = v207;
            int8x16_t v271 = v207;
            uint64_t v206 = 1;
          }
          else if (v205 == 31)
          {
            uint64_t v208 = *(void *)(v204 + 8);
            uint64_t v209 = *(void *)(v204 + 16);
            uint64_t v210 = *(void *)(v204 + 24);
            v269.i64[0] = *(void *)v204;
            v269.i64[1] = v209;
            v271.i64[0] = v208;
            v271.i64[1] = v210;
            uint64_t v206 = 32;
          }
          else if (v83[6])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int8x16_t v269 = 0uLL;
            int8x16_t v271 = 0uLL;
          }
          uint64_t v211 = v204 + v206;
          unsigned int v212 = v83[7];
          if (v212 == 96)
          {
            int8x16_t v214 = vld1q_dup_s8((const char *)v211);
            int8x16_t v273 = v214;
            int8x16_t v275 = v214;
            unsigned int v38 = a7;
            unint64_t v213 = v255;
            if (!v255) {
              goto LABEL_48;
            }
          }
          else
          {
            unsigned int v38 = a7;
            if (v212 == 31)
            {
              uint64_t v215 = *(void *)(v211 + 8);
              uint64_t v216 = *(void *)(v211 + 16);
              uint64_t v217 = *(void *)(v211 + 24);
              v273.i64[0] = *(void *)v211;
              v273.i64[1] = v216;
              v275.i64[0] = v215;
              v275.i64[1] = v217;
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
            else if (v83[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v211, v212);
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
            else
            {
              int8x16_t v273 = 0uLL;
              int8x16_t v275 = 0uLL;
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
          }
          unint64_t v218 = 0;
          float32x4_t v219 = &v260.i8[32 * v253 + 4 * v254];
          unsigned int v220 = v256;
          do
          {
            if (v220)
            {
              uint64_t v221 = 0;
              uint64_t v222 = (uint64_t)v251->i64 + v252 * v218;
              do
              {
                *(unsigned char *)(v222 + v221) = v219[v221];
                ++v221;
                unsigned int v220 = v256;
              }
              while (4 * (unint64_t)v256 > v221);
              unint64_t v213 = v255;
            }
            ++v218;
            v219 += 32;
          }
          while (v218 < v213);
LABEL_48:
          BOOL v20 = v36++ == v239 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v227;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v276 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v227 = v228 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v241 = v23;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v25 = *(unsigned __int8 *)(a1 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v240 = 0;
LABEL_32:
      unsigned int v238 = v25 - 3;
      unsigned int v232 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v225 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v240 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v240 = 0;
  unsigned int v225 = 0;
  unsigned int v232 = 0;
  unsigned int v238 = 0;
LABEL_33:
  if (v19 <= v227)
  {
    unsigned int v239 = a7 + a9 - 1;
    if (a7 >> 3 <= v239 >> 3)
    {
      unsigned int v248 = v17 >> 3;
      unsigned int v224 = v18 >> 3;
      int v247 = (v17 & 7) + 1;
      int v223 = (v18 & 7) + 1;
      uint64_t v234 = a11;
      uint64_t v235 = 2 * a11;
      uint32x2_t v32 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v33 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v32, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v32));
      __int32 v233 = v33.i32[0] | v33.i32[1];
      int8x8_t v231 = v33;
      BOOL v229 = v33.i32[0] != 0;
      BOOL v230 = v33.i32[1] != 0;
      unsigned int v236 = a8;
      do
      {
        unsigned int v34 = (8 * v19) | 7;
        if (8 * v19 <= a8) {
          int v35 = a8;
        }
        else {
          int v35 = 8 * v19;
        }
        if (v228 < v34) {
          unsigned int v34 = v228;
        }
        int v237 = v35 - 8 * v19;
        int v245 = v34 - v35 + 1;
        unsigned int v36 = a7 >> 3;
        int v37 = v223;
        if (v19 != v224) {
          int v37 = 8;
        }
        unsigned int v249 = v37;
        uint64_t v244 = a2 + (v35 - a8) * a11;
        unsigned int v38 = a7;
        do
        {
          unsigned int v39 = 8 * v36;
          unsigned int v40 = 8 * (v36 + 1) - 1;
          if (8 * v36 <= v38) {
            int v41 = v38;
          }
          else {
            int v41 = 8 * v36;
          }
          if (v239 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v36 == v248) {
            unsigned int v43 = v247;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= a8 && v39 >= v38)
          {
            int v45 = v247;
            if (v36 != v248) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v245 != v249;
          }
          if (v240)
          {
            if (v238 | v232)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v232 != 0;
              int v50 = 1;
              BOOL v52 = v238 != 0;
              unsigned int v51 = v232;
              unsigned int v53 = v238;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v36 & ~(-1 << v238) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v232) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(a1 + 320) * ((v36 >> v238) + (v19 >> v232) * v225) + (v48 << 8);
          }
          else
          {
            if (v233)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v229;
              BOOL v58 = v230;
              __int32 v60 = v231.i32[0];
              __int32 v59 = v231.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v36) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 8;
          }
          unsigned int v62 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_111:
              uint64_t v69 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_111;
            }
          }
          int v68 = 0;
          uint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            if (v70) {
              v69 |= (unint64_t)(v72 & v36) << v68++;
            }
            else {
              unsigned int v64 = 0;
            }
            --v67;
            if (v71) {
              v69 |= (unint64_t)(v72 & v19) << v68++;
            }
            else {
              unsigned int v67 = 0;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_112:
          unsigned int v73 = (const char *)(a3 + v61);
          if (v241)
          {
            long long v74 = *((_OWORD *)v73 + 13);
            v259[12] = *((_OWORD *)v73 + 12);
            v259[13] = v74;
            long long v75 = *((_OWORD *)v73 + 15);
            v259[14] = *((_OWORD *)v73 + 14);
            v259[15] = v75;
            long long v76 = *((_OWORD *)v73 + 9);
            v259[8] = *((_OWORD *)v73 + 8);
            v259[9] = v76;
            long long v77 = *((_OWORD *)v73 + 11);
            v259[10] = *((_OWORD *)v73 + 10);
            v259[11] = v77;
            long long v78 = *((_OWORD *)v73 + 5);
            v259[4] = *((_OWORD *)v73 + 4);
            v259[5] = v78;
            long long v79 = *((_OWORD *)v73 + 7);
            v259[6] = *((_OWORD *)v73 + 6);
            v259[7] = v79;
            long long v80 = *((_OWORD *)v73 + 1);
            v259[0] = *(_OWORD *)v73;
            v259[1] = v80;
            long long v81 = *((_OWORD *)v73 + 2);
            long long v82 = *((_OWORD *)v73 + 3);
            unsigned int v73 = (const char *)v259;
            v259[2] = v81;
            v259[3] = v82;
          }
          unint64_t v83 = (unsigned __int8 *)(a4 + 8 * v69);
          unint64_t v84 = (int8x16_t *)(v244 + 4 * (v41 - v38));
          char v85 = v43 < 8 || v44;
          if ((v85 & 1) == 0 && v249 > 7)
          {
            unsigned int v86 = *v83;
            if (v86 == 96)
            {
              int8x16_t v95 = vld1q_dup_s8(v73);
              *unint64_t v84 = v95;
              *(int8x16_t *)((char *)v84 + a11) = v95;
              uint64_t v87 = 1;
            }
            else if (v86 == 31)
            {
              uint64_t v91 = *((void *)v73 + 1);
              uint64_t v92 = *((void *)v73 + 2);
              uint64_t v93 = *((void *)v73 + 3);
              v84->i64[0] = *(void *)v73;
              v84->i64[1] = v92;
              unint64_t v94 = (uint64_t *)((char *)v84->i64 + a11);
              *unint64_t v94 = v91;
              v94[1] = v93;
              uint64_t v87 = 32;
            }
            else if (*v83)
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v84, a11, (uint64_t)v73, v86);
            }
            else
            {
              uint64_t v87 = 0;
              v84->i64[0] = 0;
              v84->i64[1] = 0;
              unint64_t v88 = (uint64_t *)((char *)v84->i64 + a11);
              void *v88 = 0;
              v88[1] = 0;
            }
            uint64_t v96 = (uint64_t)&v73[v87];
            unsigned int v97 = (int8x16_t *)((char *)v84 + v235);
            unsigned int v98 = v83[1];
            if (v98 == 96)
            {
              int8x16_t v105 = vld1q_dup_s8((const char *)v96);
              int8x16_t *v97 = v105;
              *(int8x16_t *)((char *)v97 + a11) = v105;
              uint64_t v99 = 1;
            }
            else if (v98 == 31)
            {
              uint64_t v101 = *(void *)(v96 + 8);
              uint64_t v102 = *(void *)(v96 + 16);
              uint64_t v103 = *(void *)(v96 + 24);
              v97->i64[0] = *(void *)v96;
              v97->i64[1] = v102;
              int v104 = (uint64_t *)((char *)v97->i64 + a11);
              *int v104 = v101;
              v104[1] = v103;
              uint64_t v99 = 32;
            }
            else if (v83[1])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((__int32 *)((char *)v84->i32 + v235), a11, v96, v98);
            }
            else
            {
              uint64_t v99 = 0;
              v97->i64[0] = 0;
              v97->i64[1] = 0;
              unsigned int v100 = (uint64_t *)((char *)v97->i64 + a11);
              void *v100 = 0;
              v100[1] = 0;
            }
            uint64_t v106 = v96 + v99;
            int v107 = v84 + 1;
            unsigned int v108 = v83[2];
            if (v108 == 96)
            {
              int8x16_t v115 = vld1q_dup_s8((const char *)v106);
              int8x16_t *v107 = v115;
              *(int8x16_t *)((char *)v107 + a11) = v115;
              uint64_t v109 = 1;
            }
            else if (v108 == 31)
            {
              uint64_t v111 = *(void *)(v106 + 8);
              uint64_t v112 = *(void *)(v106 + 16);
              uint64_t v113 = *(void *)(v106 + 24);
              v84[1].i64[0] = *(void *)v106;
              v84[1].i64[1] = v112;
              unsigned int v114 = (uint64_t *)((char *)v107->i64 + a11);
              *unsigned int v114 = v111;
              v114[1] = v113;
              uint64_t v109 = 32;
            }
            else if (v83[2])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v107, a11, v106, v108);
            }
            else
            {
              uint64_t v109 = 0;
              v107->i64[0] = 0;
              v84[1].i64[1] = 0;
              int v110 = (uint64_t *)((char *)v107->i64 + a11);
              void *v110 = 0;
              v110[1] = 0;
            }
            uint64_t v116 = v106 + v109;
            uint64_t v117 = v97 + 1;
            unsigned int v118 = v83[3];
            if (v118 == 96)
            {
              int8x16_t v125 = vld1q_dup_s8((const char *)v116);
              int8x16_t *v117 = v125;
              *(int8x16_t *)((char *)v117 + a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              uint64_t v121 = *(void *)(v116 + 8);
              uint64_t v122 = *(void *)(v116 + 16);
              uint64_t v123 = *(void *)(v116 + 24);
              v97[1].i64[0] = *(void *)v116;
              v97[1].i64[1] = v122;
              __int32 v124 = (uint64_t *)((char *)v117->i64 + a11);
              *__int32 v124 = v121;
              v124[1] = v123;
              uint64_t v119 = 32;
            }
            else if (v83[3])
            {
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, v116, v118);
            }
            else
            {
              uint64_t v119 = 0;
              v117->i64[0] = 0;
              v97[1].i64[1] = 0;
              int v120 = (uint64_t *)((char *)v117->i64 + a11);
              void *v120 = 0;
              v120[1] = 0;
            }
            uint64_t v126 = v116 + v119;
            int v127 = (int8x16_t *)((char *)v84 + v234 * 4);
            unsigned int v128 = v83[4];
            if (v128 == 96)
            {
              int8x16_t v135 = vld1q_dup_s8((const char *)v126);
              int8x16_t *v127 = v135;
              *(int8x16_t *)((char *)v127 + a11) = v135;
              uint64_t v129 = 1;
            }
            else if (v128 == 31)
            {
              uint64_t v131 = *(void *)(v126 + 8);
              uint64_t v132 = *(void *)(v126 + 16);
              uint64_t v133 = *(void *)(v126 + 24);
              v127->i64[0] = *(void *)v126;
              v127->i64[1] = v132;
              int v134 = (uint64_t *)((char *)v127->i64 + a11);
              *int v134 = v131;
              v134[1] = v133;
              uint64_t v129 = 32;
            }
            else if (v83[4])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v84->i32[v234], a11, v126, v128);
            }
            else
            {
              uint64_t v129 = 0;
              v127->i64[0] = 0;
              v127->i64[1] = 0;
              uint64_t v130 = (uint64_t *)((char *)v127->i64 + a11);
              void *v130 = 0;
              v130[1] = 0;
            }
            uint64_t v136 = v126 + v129;
            uint64_t v137 = (int8x16_t *)((char *)v84 + 6 * a11);
            unsigned int v138 = v83[5];
            if (v138 == 96)
            {
              int8x16_t v145 = vld1q_dup_s8((const char *)v136);
              int8x16_t *v137 = v145;
              *(int8x16_t *)((char *)v137 + a11) = v145;
              uint64_t v139 = 1;
            }
            else if (v138 == 31)
            {
              uint64_t v141 = *(void *)(v136 + 8);
              uint64_t v142 = *(void *)(v136 + 16);
              uint64_t v143 = *(void *)(v136 + 24);
              v137->i64[0] = *(void *)v136;
              v137->i64[1] = v142;
              char v144 = (uint64_t *)((char *)v137->i64 + a11);
              *char v144 = v141;
              v144[1] = v143;
              uint64_t v139 = 32;
            }
            else if (v83[5])
            {
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v137, a11, v136, v138);
            }
            else
            {
              uint64_t v139 = 0;
              v137->i64[0] = 0;
              v137->i64[1] = 0;
              unsigned int v140 = (uint64_t *)((char *)v137->i64 + a11);
              void *v140 = 0;
              v140[1] = 0;
            }
            uint64_t v146 = v136 + v139;
            uint64_t v147 = v127 + 1;
            unsigned int v148 = v83[6];
            if (v148 == 96)
            {
              int8x16_t v155 = vld1q_dup_s8((const char *)v146);
              int8x16_t *v147 = v155;
              *(int8x16_t *)((char *)v147 + a11) = v155;
              uint64_t v149 = 1;
            }
            else if (v148 == 31)
            {
              uint64_t v151 = *(void *)(v146 + 8);
              uint64_t v152 = *(void *)(v146 + 16);
              uint64_t v153 = *(void *)(v146 + 24);
              v127[1].i64[0] = *(void *)v146;
              v127[1].i64[1] = v152;
              uint64_t v154 = (uint64_t *)((char *)v147->i64 + a11);
              *uint64_t v154 = v151;
              v154[1] = v153;
              uint64_t v149 = 32;
            }
            else if (v83[6])
            {
              uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v147, a11, v146, v148);
            }
            else
            {
              uint64_t v149 = 0;
              v147->i64[0] = 0;
              v127[1].i64[1] = 0;
              uint64_t v150 = (uint64_t *)((char *)v147->i64 + a11);
              void *v150 = 0;
              v150[1] = 0;
            }
            uint64_t v156 = v146 + v149;
            int64x2_t v157 = v137 + 1;
            unsigned int v158 = v83[7];
            if (v158 == 96)
            {
              int8x16_t v164 = vld1q_dup_s8((const char *)v156);
              *int64x2_t v157 = v164;
              *(int8x16_t *)((char *)v157 + a11) = v164;
              a8 = v236;
            }
            else
            {
              a8 = v236;
              if (v158 == 31)
              {
                uint64_t v160 = *(void *)(v156 + 8);
                uint64_t v161 = *(void *)(v156 + 16);
                uint64_t v162 = *(void *)(v156 + 24);
                v137[1].i64[0] = *(void *)v156;
                v137[1].i64[1] = v161;
                long long v163 = (uint64_t *)((char *)v157->i64 + a11);
                void *v163 = v160;
                v163[1] = v162;
              }
              else if (v83[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v157, a11, v156, v158);
              }
              else
              {
                v157->i64[0] = 0;
                v137[1].i64[1] = 0;
                long long v159 = (uint64_t *)((char *)v157->i64 + a11);
                void *v159 = 0;
                v159[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v73;
          char v257 = v43;
          char v258 = v249;
          int v253 = v237;
          unsigned int v254 = v41 - v39;
          block[6] = a4 + 8 * v69;
          unsigned int v251 = v84;
          uint64_t v252 = a11;
          unsigned int v255 = v245;
          unsigned int v256 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v38 = a7;
            goto LABEL_48;
          }
          unsigned int v89 = *v83;
          if (v89 == 96)
          {
            int8x16_t v165 = vld1q_dup_s8(v73);
            int8x16_t v260 = v165;
            int8x16_t v262 = v165;
            uint64_t v90 = 1;
          }
          else if (v89 == 31)
          {
            uint64_t v166 = *((void *)v73 + 1);
            uint64_t v167 = *((void *)v73 + 2);
            uint64_t v168 = *((void *)v73 + 3);
            v260.i64[0] = *(void *)v73;
            v260.i64[1] = v167;
            v262.i64[0] = v166;
            v262.i64[1] = v168;
            uint64_t v90 = 32;
          }
          else if (*v83)
          {
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 32, (uint64_t)v73, v89);
          }
          else
          {
            uint64_t v90 = 0;
            int8x16_t v260 = 0uLL;
            int8x16_t v262 = 0uLL;
          }
          uint64_t v169 = (uint64_t)&v73[v90];
          unsigned int v170 = v83[1];
          if (v170 == 96)
          {
            int8x16_t v172 = vld1q_dup_s8((const char *)v169);
            int8x16_t v264 = v172;
            int8x16_t v266 = v172;
            uint64_t v171 = 1;
          }
          else if (v170 == 31)
          {
            uint64_t v173 = *(void *)(v169 + 8);
            uint64_t v174 = *(void *)(v169 + 16);
            uint64_t v175 = *(void *)(v169 + 24);
            v264.i64[0] = *(void *)v169;
            v264.i64[1] = v174;
            v266.i64[0] = v173;
            v266.i64[1] = v175;
            uint64_t v171 = 32;
          }
          else if (v83[1])
          {
            uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 32, v169, v170);
          }
          else
          {
            uint64_t v171 = 0;
            int8x16_t v264 = 0uLL;
            int8x16_t v266 = 0uLL;
          }
          uint64_t v176 = v169 + v171;
          unsigned int v177 = v83[2];
          if (v177 == 96)
          {
            int8x16_t v179 = vld1q_dup_s8((const char *)v176);
            int8x16_t v261 = v179;
            int8x16_t v263 = v179;
            uint64_t v178 = 1;
          }
          else if (v177 == 31)
          {
            uint64_t v180 = *(void *)(v176 + 8);
            uint64_t v181 = *(void *)(v176 + 16);
            uint64_t v182 = *(void *)(v176 + 24);
            v261.i64[0] = *(void *)v176;
            v261.i64[1] = v181;
            v263.i64[0] = v180;
            v263.i64[1] = v182;
            uint64_t v178 = 32;
          }
          else if (v83[2])
          {
            uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 32, v176, v177);
          }
          else
          {
            uint64_t v178 = 0;
            int8x16_t v261 = 0uLL;
            int8x16_t v263 = 0uLL;
          }
          uint64_t v183 = v176 + v178;
          unsigned int v184 = v83[3];
          if (v184 == 96)
          {
            int8x16_t v186 = vld1q_dup_s8((const char *)v183);
            int8x16_t v265 = v186;
            int8x16_t v267 = v186;
            uint64_t v185 = 1;
          }
          else if (v184 == 31)
          {
            uint64_t v187 = *(void *)(v183 + 8);
            uint64_t v188 = *(void *)(v183 + 16);
            uint64_t v189 = *(void *)(v183 + 24);
            v265.i64[0] = *(void *)v183;
            v265.i64[1] = v188;
            v267.i64[0] = v187;
            v267.i64[1] = v189;
            uint64_t v185 = 32;
          }
          else if (v83[3])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v183, v184);
          }
          else
          {
            uint64_t v185 = 0;
            int8x16_t v265 = 0uLL;
            int8x16_t v267 = 0uLL;
          }
          uint64_t v190 = v183 + v185;
          unsigned int v191 = v83[4];
          if (v191 == 96)
          {
            int8x16_t v193 = vld1q_dup_s8((const char *)v190);
            int8x16_t v268 = v193;
            int8x16_t v270 = v193;
            uint64_t v192 = 1;
          }
          else if (v191 == 31)
          {
            uint64_t v194 = *(void *)(v190 + 8);
            uint64_t v195 = *(void *)(v190 + 16);
            uint64_t v196 = *(void *)(v190 + 24);
            v268.i64[0] = *(void *)v190;
            v268.i64[1] = v195;
            v270.i64[0] = v194;
            v270.i64[1] = v196;
            uint64_t v192 = 32;
          }
          else if (v83[4])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v190, v191);
          }
          else
          {
            uint64_t v192 = 0;
            int8x16_t v268 = 0uLL;
            int8x16_t v270 = 0uLL;
          }
          uint64_t v197 = v190 + v192;
          unsigned int v198 = v83[5];
          if (v198 == 96)
          {
            int8x16_t v200 = vld1q_dup_s8((const char *)v197);
            int8x16_t v272 = v200;
            int8x16_t v274 = v200;
            uint64_t v199 = 1;
          }
          else if (v198 == 31)
          {
            uint64_t v201 = *(void *)(v197 + 8);
            uint64_t v202 = *(void *)(v197 + 16);
            uint64_t v203 = *(void *)(v197 + 24);
            v272.i64[0] = *(void *)v197;
            v272.i64[1] = v202;
            v274.i64[0] = v201;
            v274.i64[1] = v203;
            uint64_t v199 = 32;
          }
          else if (v83[5])
          {
            uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, v197, v198);
          }
          else
          {
            uint64_t v199 = 0;
            int8x16_t v272 = 0uLL;
            int8x16_t v274 = 0uLL;
          }
          uint64_t v204 = v197 + v199;
          unsigned int v205 = v83[6];
          if (v205 == 96)
          {
            int8x16_t v207 = vld1q_dup_s8((const char *)v204);
            int8x16_t v269 = v207;
            int8x16_t v271 = v207;
            uint64_t v206 = 1;
          }
          else if (v205 == 31)
          {
            uint64_t v208 = *(void *)(v204 + 8);
            uint64_t v209 = *(void *)(v204 + 16);
            uint64_t v210 = *(void *)(v204 + 24);
            v269.i64[0] = *(void *)v204;
            v269.i64[1] = v209;
            v271.i64[0] = v208;
            v271.i64[1] = v210;
            uint64_t v206 = 32;
          }
          else if (v83[6])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int8x16_t v269 = 0uLL;
            int8x16_t v271 = 0uLL;
          }
          uint64_t v211 = v204 + v206;
          unsigned int v212 = v83[7];
          if (v212 == 96)
          {
            int8x16_t v214 = vld1q_dup_s8((const char *)v211);
            int8x16_t v273 = v214;
            int8x16_t v275 = v214;
            unsigned int v38 = a7;
            unint64_t v213 = v255;
            if (!v255) {
              goto LABEL_48;
            }
          }
          else
          {
            unsigned int v38 = a7;
            if (v212 == 31)
            {
              uint64_t v215 = *(void *)(v211 + 8);
              uint64_t v216 = *(void *)(v211 + 16);
              uint64_t v217 = *(void *)(v211 + 24);
              v273.i64[0] = *(void *)v211;
              v273.i64[1] = v216;
              v275.i64[0] = v215;
              v275.i64[1] = v217;
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
            else if (v83[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v211, v212);
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
            else
            {
              int8x16_t v273 = 0uLL;
              int8x16_t v275 = 0uLL;
              unint64_t v213 = v255;
              if (!v255) {
                goto LABEL_48;
              }
            }
          }
          unint64_t v218 = 0;
          float32x4_t v219 = &v260.i8[32 * v253 + 4 * v254];
          unsigned int v220 = v256;
          do
          {
            if (v220)
            {
              uint64_t v221 = 0;
              uint64_t v222 = (uint64_t)v251->i64 + v252 * v218;
              do
              {
                *(unsigned char *)(v222 + v221) = v219[v221];
                ++v221;
                unsigned int v220 = v256;
              }
              while (4 * (unint64_t)v256 > v221);
              unint64_t v213 = v255;
            }
            ++v218;
            v219 += 32;
          }
          while (v218 < v213);
LABEL_48:
          BOOL v20 = v36++ == v239 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v227;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v250 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v231 = v17;
  unsigned int v233 = v17 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v244 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v233)
  {
    unsigned int v242 = a7 + a9 - 1;
    if (a7 >> 3 <= v242 >> 3)
    {
      unsigned int v228 = a5 - 1;
      unsigned int v230 = (a6 - 1) >> 3;
      int v251 = ((a5 - 1) & 7) + 1;
      int v229 = ((a6 - 1) & 7) + 1;
      uint64_t v234 = a11;
      uint64_t v235 = 2 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 3;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v241 = v29.i32[0] | v29.i32[1];
      BOOL v239 = v29.i32[1] != 0;
      int8x8_t v240 = v29;
      BOOL v238 = v29.i32[0] != 0;
      unint64_t v227 = 8 * v20 * (unint64_t)v19;
      unsigned int v236 = v27;
      do
      {
        unsigned int v30 = (8 * v18) | 7;
        if (8 * v18 <= v250) {
          int v31 = v250;
        }
        else {
          int v31 = 8 * v18;
        }
        unsigned int v32 = a7 >> 3;
        if (v231 < v30) {
          unsigned int v30 = v231;
        }
        unsigned int v249 = 8 * v18;
        int v237 = v31 - 8 * v18;
        int v248 = v30 - v31 + 1;
        int v33 = v229;
        if (v18 != v230) {
          int v33 = 8;
        }
        unsigned int v252 = v33;
        uint64_t v247 = a2 + (v31 - v250) * a11;
        do
        {
          unsigned int v34 = 8 * v32;
          unsigned int v35 = 8 * (v32 + 1) - 1;
          if (8 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 8 * v32;
          }
          if (v242 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v27) {
            unsigned int v38 = v251;
          }
          else {
            unsigned int v38 = 8;
          }
          BOOL v39 = 1;
          if (v249 >= v250 && v34 >= a7)
          {
            int v40 = v251;
            if (v32 != v27) {
              int v40 = 8;
            }
            BOOL v39 = v37 != v40 || v248 != v252;
          }
          if (isLevelTiled)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v227 >> (*(unsigned char *)(a1 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    char v63 = 0;
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v216 = (v61 >> 3) - 1;
            if (v63) {
              unsigned int v217 = 0;
            }
            else {
              unsigned int v217 = 32 - __clz(~(-1 << -(char)__clz(v216)));
            }
            unsigned int v218 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v219 = 0;
              if (v217) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v219 = 32 - __clz(~(-1 << -(char)__clz(v218)));
              if (v219 | v217)
              {
LABEL_229:
                int v220 = 0;
                uint64_t v221 = 0;
                int v222 = v32 & v216;
                int v223 = v18 & v218;
                BOOL v224 = v217 != 0;
                BOOL v225 = v219 != 0;
                int v226 = 1;
                do
                {
                  --v217;
                  if (v224) {
                    v221 |= (unint64_t)(v226 & v222) << v220++;
                  }
                  else {
                    unsigned int v217 = 0;
                  }
                  --v219;
                  if (v225) {
                    v221 |= (unint64_t)(v226 & v223) << v220++;
                  }
                  else {
                    unsigned int v219 = 0;
                  }
                  v226 *= 2;
                  --v220;
                  BOOL v225 = v219 != 0;
                  BOOL v224 = v217 != 0;
                }
                while (v219 | v217);
                goto LABEL_241;
              }
            }
            uint64_t v221 = 0;
LABEL_241:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v249 / v65 * ((v61 + v228) / v61)) << 14) + (v221 << 8);
            goto LABEL_59;
          }
          if (v241)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v238;
            BOOL v46 = v239;
            __int32 v48 = v240.i32[0];
            __int32 v47 = v240.i32[1];
            do
            {
              --v47;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v45) {
                v43 |= (unint64_t)(v44 & v18) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v45 = v48 != 0;
              BOOL v46 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 8;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v18) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          unsigned int v66 = (const char *)(a3 + v49);
          if (v244)
          {
            long long v67 = *((_OWORD *)v66 + 13);
            v262[12] = *((_OWORD *)v66 + 12);
            v262[13] = v67;
            long long v68 = *((_OWORD *)v66 + 15);
            v262[14] = *((_OWORD *)v66 + 14);
            v262[15] = v68;
            long long v69 = *((_OWORD *)v66 + 9);
            v262[8] = *((_OWORD *)v66 + 8);
            v262[9] = v69;
            long long v70 = *((_OWORD *)v66 + 11);
            v262[10] = *((_OWORD *)v66 + 10);
            v262[11] = v70;
            long long v71 = *((_OWORD *)v66 + 5);
            v262[4] = *((_OWORD *)v66 + 4);
            v262[5] = v71;
            long long v72 = *((_OWORD *)v66 + 7);
            v262[6] = *((_OWORD *)v66 + 6);
            v262[7] = v72;
            long long v73 = *((_OWORD *)v66 + 1);
            v262[0] = *(_OWORD *)v66;
            v262[1] = v73;
            long long v74 = *((_OWORD *)v66 + 2);
            long long v75 = *((_OWORD *)v66 + 3);
            unsigned int v66 = (const char *)v262;
            v262[2] = v74;
            v262[3] = v75;
          }
          long long v76 = (unsigned __int8 *)(a4 + 8 * v57);
          long long v77 = (int8x16_t *)(v247 + 4 * (v36 - a7));
          char v78 = v38 < 8 || v39;
          if ((v78 & 1) != 0 || v252 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v66;
            char v260 = v38;
            char v261 = v252;
            int v256 = v237;
            unsigned int v257 = v36 - v34;
            block[6] = a4 + 8 * v57;
            uint64_t v254 = v247 + 4 * (v36 - a7);
            uint64_t v255 = a11;
            unsigned int v258 = v248;
            unsigned int v259 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v82 = *v76;
            if (v82 == 96)
            {
              int8x16_t v158 = vld1q_dup_s8(v66);
              int8x16_t v263 = v158;
              int8x16_t v265 = v158;
              uint64_t v83 = 1;
            }
            else if (v82 == 31)
            {
              uint64_t v159 = *((void *)v66 + 1);
              uint64_t v160 = *((void *)v66 + 2);
              uint64_t v161 = *((void *)v66 + 3);
              v263.i64[0] = *(void *)v66;
              v263.i64[1] = v160;
              v265.i64[0] = v159;
              v265.i64[1] = v161;
              uint64_t v83 = 32;
            }
            else if (*v76)
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, (uint64_t)v66, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int8x16_t v263 = 0uLL;
              int8x16_t v265 = 0uLL;
            }
            uint64_t v162 = (uint64_t)&v66[v83];
            unsigned int v163 = v76[1];
            if (v163 == 96)
            {
              int8x16_t v165 = vld1q_dup_s8((const char *)v162);
              int8x16_t v267 = v165;
              int8x16_t v269 = v165;
              uint64_t v164 = 1;
            }
            else if (v163 == 31)
            {
              uint64_t v166 = *(void *)(v162 + 8);
              uint64_t v167 = *(void *)(v162 + 16);
              uint64_t v168 = *(void *)(v162 + 24);
              v267.i64[0] = *(void *)v162;
              v267.i64[1] = v167;
              v269.i64[0] = v166;
              v269.i64[1] = v168;
              uint64_t v164 = 32;
            }
            else if (v76[1])
            {
              uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v162, v163);
            }
            else
            {
              uint64_t v164 = 0;
              int8x16_t v267 = 0uLL;
              int8x16_t v269 = 0uLL;
            }
            uint64_t v169 = v162 + v164;
            unsigned int v170 = v76[2];
            if (v170 == 96)
            {
              int8x16_t v172 = vld1q_dup_s8((const char *)v169);
              int8x16_t v264 = v172;
              int8x16_t v266 = v172;
              uint64_t v171 = 1;
            }
            else if (v170 == 31)
            {
              uint64_t v173 = *(void *)(v169 + 8);
              uint64_t v174 = *(void *)(v169 + 16);
              uint64_t v175 = *(void *)(v169 + 24);
              v264.i64[0] = *(void *)v169;
              v264.i64[1] = v174;
              v266.i64[0] = v173;
              v266.i64[1] = v175;
              uint64_t v171 = 32;
            }
            else if (v76[2])
            {
              uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 32, v169, v170);
            }
            else
            {
              uint64_t v171 = 0;
              int8x16_t v264 = 0uLL;
              int8x16_t v266 = 0uLL;
            }
            uint64_t v176 = v169 + v171;
            unsigned int v177 = v76[3];
            if (v177 == 96)
            {
              int8x16_t v179 = vld1q_dup_s8((const char *)v176);
              int8x16_t v268 = v179;
              int8x16_t v270 = v179;
              uint64_t v178 = 1;
            }
            else if (v177 == 31)
            {
              uint64_t v180 = *(void *)(v176 + 8);
              uint64_t v181 = *(void *)(v176 + 16);
              uint64_t v182 = *(void *)(v176 + 24);
              v268.i64[0] = *(void *)v176;
              v268.i64[1] = v181;
              v270.i64[0] = v180;
              v270.i64[1] = v182;
              uint64_t v178 = 32;
            }
            else if (v76[3])
            {
              uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v176, v177);
            }
            else
            {
              uint64_t v178 = 0;
              int8x16_t v268 = 0uLL;
              int8x16_t v270 = 0uLL;
            }
            uint64_t v183 = v176 + v178;
            unsigned int v184 = v76[4];
            if (v184 == 96)
            {
              int8x16_t v186 = vld1q_dup_s8((const char *)v183);
              int8x16_t v271 = v186;
              int8x16_t v273 = v186;
              uint64_t v185 = 1;
            }
            else if (v184 == 31)
            {
              uint64_t v187 = *(void *)(v183 + 8);
              uint64_t v188 = *(void *)(v183 + 16);
              uint64_t v189 = *(void *)(v183 + 24);
              v271.i64[0] = *(void *)v183;
              v271.i64[1] = v188;
              v273.i64[0] = v187;
              v273.i64[1] = v189;
              uint64_t v185 = 32;
            }
            else if (v76[4])
            {
              uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, v183, v184);
            }
            else
            {
              uint64_t v185 = 0;
              int8x16_t v271 = 0uLL;
              int8x16_t v273 = 0uLL;
            }
            uint64_t v190 = v183 + v185;
            unsigned int v191 = v76[5];
            if (v191 == 96)
            {
              int8x16_t v193 = vld1q_dup_s8((const char *)v190);
              int8x16_t v275 = v193;
              int8x16_t v277 = v193;
              uint64_t v192 = 1;
            }
            else if (v191 == 31)
            {
              uint64_t v194 = *(void *)(v190 + 8);
              uint64_t v195 = *(void *)(v190 + 16);
              uint64_t v196 = *(void *)(v190 + 24);
              v275.i64[0] = *(void *)v190;
              v275.i64[1] = v195;
              v277.i64[0] = v194;
              v277.i64[1] = v196;
              uint64_t v192 = 32;
            }
            else if (v76[5])
            {
              uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v190, v191);
            }
            else
            {
              uint64_t v192 = 0;
              int8x16_t v275 = 0uLL;
              int8x16_t v277 = 0uLL;
            }
            uint64_t v197 = v190 + v192;
            unsigned int v198 = v76[6];
            if (v198 == 96)
            {
              int8x16_t v200 = vld1q_dup_s8((const char *)v197);
              int8x16_t v272 = v200;
              int8x16_t v274 = v200;
              uint64_t v199 = 1;
            }
            else if (v198 == 31)
            {
              uint64_t v201 = *(void *)(v197 + 8);
              uint64_t v202 = *(void *)(v197 + 16);
              uint64_t v203 = *(void *)(v197 + 24);
              v272.i64[0] = *(void *)v197;
              v272.i64[1] = v202;
              v274.i64[0] = v201;
              v274.i64[1] = v203;
              uint64_t v199 = 32;
            }
            else if (v76[6])
            {
              uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, v197, v198);
            }
            else
            {
              uint64_t v199 = 0;
              int8x16_t v272 = 0uLL;
              int8x16_t v274 = 0uLL;
            }
            uint64_t v204 = v197 + v199;
            unsigned int v205 = v76[7];
            if (v205 == 96)
            {
              int8x16_t v207 = vld1q_dup_s8((const char *)v204);
              int8x16_t v276 = v207;
              int8x16_t v278 = v207;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else if (v205 == 31)
            {
              uint64_t v208 = *(void *)(v204 + 8);
              uint64_t v209 = *(void *)(v204 + 16);
              uint64_t v210 = *(void *)(v204 + 24);
              v276.i64[0] = *(void *)v204;
              v276.i64[1] = v209;
              v278.i64[0] = v208;
              v278.i64[1] = v210;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else if (v76[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v204, v205);
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else
            {
              int8x16_t v276 = 0uLL;
              int8x16_t v278 = 0uLL;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            unint64_t v211 = 0;
            unsigned int v212 = &v263.i8[32 * v256 + 4 * v257];
            unsigned int v213 = v259;
            do
            {
              if (v213)
              {
                uint64_t v214 = 0;
                uint64_t v215 = v254 + v255 * v211;
                do
                {
                  *(unsigned char *)(v215 + v214) = v212[v214];
                  ++v214;
                  unsigned int v213 = v259;
                }
                while (4 * (unint64_t)v259 > v214);
                unint64_t v206 = v258;
              }
              ++v211;
              v212 += 32;
            }
            while (v211 < v206);
          }
          else
          {
            unsigned int v79 = *v76;
            if (v79 == 96)
            {
              int8x16_t v88 = vld1q_dup_s8(v66);
              *long long v77 = v88;
              *(int8x16_t *)((char *)v77 + a11) = v88;
              uint64_t v80 = 1;
            }
            else if (v79 == 31)
            {
              uint64_t v84 = *((void *)v66 + 1);
              uint64_t v85 = *((void *)v66 + 2);
              uint64_t v86 = *((void *)v66 + 3);
              v77->i64[0] = *(void *)v66;
              v77->i64[1] = v85;
              uint64_t v87 = (uint64_t *)((char *)v77->i64 + a11);
              void *v87 = v84;
              v87[1] = v86;
              uint64_t v80 = 32;
            }
            else if (*v76)
            {
              uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v77, a11, (uint64_t)v66, v79);
            }
            else
            {
              uint64_t v80 = 0;
              v77->i64[0] = 0;
              v77->i64[1] = 0;
              long long v81 = (uint64_t *)((char *)v77->i64 + a11);
              *long long v81 = 0;
              v81[1] = 0;
            }
            uint64_t v89 = (uint64_t)&v66[v80];
            uint64_t v90 = (int8x16_t *)((char *)v77 + v235);
            unsigned int v91 = v76[1];
            if (v91 == 96)
            {
              int8x16_t v98 = vld1q_dup_s8((const char *)v89);
              int8x16_t *v90 = v98;
              *(int8x16_t *)((char *)v90 + a11) = v98;
              uint64_t v92 = 1;
            }
            else if (v91 == 31)
            {
              uint64_t v94 = *(void *)(v89 + 8);
              uint64_t v95 = *(void *)(v89 + 16);
              uint64_t v96 = *(void *)(v89 + 24);
              v90->i64[0] = *(void *)v89;
              v90->i64[1] = v95;
              unsigned int v97 = (uint64_t *)((char *)v90->i64 + a11);
              void *v97 = v94;
              v97[1] = v96;
              uint64_t v92 = 32;
            }
            else if (v76[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((__int32 *)((char *)v77->i32 + v235), a11, v89, v91);
            }
            else
            {
              uint64_t v92 = 0;
              v90->i64[0] = 0;
              v90->i64[1] = 0;
              uint64_t v93 = (uint64_t *)((char *)v90->i64 + a11);
              *uint64_t v93 = 0;
              v93[1] = 0;
            }
            uint64_t v99 = v89 + v92;
            unsigned int v100 = v77 + 1;
            unsigned int v101 = v76[2];
            if (v101 == 96)
            {
              int8x16_t v108 = vld1q_dup_s8((const char *)v99);
              int8x16_t *v100 = v108;
              *(int8x16_t *)((char *)v100 + a11) = v108;
              uint64_t v102 = 1;
            }
            else if (v101 == 31)
            {
              uint64_t v104 = *(void *)(v99 + 8);
              uint64_t v105 = *(void *)(v99 + 16);
              uint64_t v106 = *(void *)(v99 + 24);
              v77[1].i64[0] = *(void *)v99;
              v77[1].i64[1] = v105;
              int v107 = (uint64_t *)((char *)v100->i64 + a11);
              void *v107 = v104;
              v107[1] = v106;
              uint64_t v102 = 32;
            }
            else if (v76[2])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v100, a11, v99, v101);
            }
            else
            {
              uint64_t v102 = 0;
              v100->i64[0] = 0;
              v77[1].i64[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v100->i64 + a11);
              *uint64_t v103 = 0;
              v103[1] = 0;
            }
            uint64_t v109 = v99 + v102;
            int v110 = v90 + 1;
            unsigned int v111 = v76[3];
            if (v111 == 96)
            {
              int8x16_t v118 = vld1q_dup_s8((const char *)v109);
              int8x16_t *v110 = v118;
              *(int8x16_t *)((char *)v110 + a11) = v118;
              uint64_t v112 = 1;
            }
            else if (v111 == 31)
            {
              uint64_t v114 = *(void *)(v109 + 8);
              uint64_t v115 = *(void *)(v109 + 16);
              uint64_t v116 = *(void *)(v109 + 24);
              v90[1].i64[0] = *(void *)v109;
              v90[1].i64[1] = v115;
              uint64_t v117 = (uint64_t *)((char *)v110->i64 + a11);
              void *v117 = v114;
              v117[1] = v116;
              uint64_t v112 = 32;
            }
            else if (v76[3])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v110, a11, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v90[1].i64[1] = 0;
              uint64_t v113 = (uint64_t *)((char *)v110->i64 + a11);
              *uint64_t v113 = 0;
              v113[1] = 0;
            }
            uint64_t v119 = v109 + v112;
            int v120 = (int8x16_t *)((char *)v77 + v234 * 4);
            unsigned int v121 = v76[4];
            if (v121 == 96)
            {
              int8x16_t v128 = vld1q_dup_s8((const char *)v119);
              int8x16_t *v120 = v128;
              *(int8x16_t *)((char *)v120 + a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              uint64_t v124 = *(void *)(v119 + 8);
              uint64_t v125 = *(void *)(v119 + 16);
              uint64_t v126 = *(void *)(v119 + 24);
              v120->i64[0] = *(void *)v119;
              v120->i64[1] = v125;
              int v127 = (uint64_t *)((char *)v120->i64 + a11);
              void *v127 = v124;
              v127[1] = v126;
              uint64_t v122 = 32;
            }
            else if (v76[4])
            {
              uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v77->i32[v234], a11, v119, v121);
            }
            else
            {
              uint64_t v122 = 0;
              v120->i64[0] = 0;
              v120->i64[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v120->i64 + a11);
              *uint64_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v119 + v122;
            uint64_t v130 = (int8x16_t *)((char *)v77 + 6 * a11);
            unsigned int v131 = v76[5];
            if (v131 == 96)
            {
              int8x16_t v138 = vld1q_dup_s8((const char *)v129);
              int8x16_t *v130 = v138;
              *(int8x16_t *)((char *)v130 + a11) = v138;
              uint64_t v132 = 1;
            }
            else if (v131 == 31)
            {
              uint64_t v134 = *(void *)(v129 + 8);
              uint64_t v135 = *(void *)(v129 + 16);
              uint64_t v136 = *(void *)(v129 + 24);
              v130->i64[0] = *(void *)v129;
              v130->i64[1] = v135;
              uint64_t v137 = (uint64_t *)((char *)v130->i64 + a11);
              void *v137 = v134;
              v137[1] = v136;
              uint64_t v132 = 32;
            }
            else if (v76[5])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, a11, v129, v131);
            }
            else
            {
              uint64_t v132 = 0;
              v130->i64[0] = 0;
              v130->i64[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v130->i64 + a11);
              *uint64_t v133 = 0;
              v133[1] = 0;
            }
            uint64_t v139 = v129 + v132;
            unsigned int v140 = v120 + 1;
            unsigned int v141 = v76[6];
            if (v141 == 96)
            {
              int8x16_t v148 = vld1q_dup_s8((const char *)v139);
              int8x16_t *v140 = v148;
              *(int8x16_t *)((char *)v140 + a11) = v148;
              uint64_t v142 = 1;
            }
            else if (v141 == 31)
            {
              uint64_t v144 = *(void *)(v139 + 8);
              uint64_t v145 = *(void *)(v139 + 16);
              uint64_t v146 = *(void *)(v139 + 24);
              v120[1].i64[0] = *(void *)v139;
              v120[1].i64[1] = v145;
              uint64_t v147 = (uint64_t *)((char *)v140->i64 + a11);
              void *v147 = v144;
              v147[1] = v146;
              uint64_t v142 = 32;
            }
            else if (v76[6])
            {
              uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v140, a11, v139, v141);
            }
            else
            {
              uint64_t v142 = 0;
              v140->i64[0] = 0;
              v120[1].i64[1] = 0;
              uint64_t v143 = (uint64_t *)((char *)v140->i64 + a11);
              *uint64_t v143 = 0;
              v143[1] = 0;
            }
            uint64_t v149 = v139 + v142;
            uint64_t v150 = v130 + 1;
            unsigned int v151 = v76[7];
            if (v151 == 96)
            {
              int8x16_t v157 = vld1q_dup_s8((const char *)v149);
              int8x16_t *v150 = v157;
              *(int8x16_t *)((char *)v150 + a11) = v157;
              unsigned int v27 = v236;
            }
            else
            {
              unsigned int v27 = v236;
              if (v151 == 31)
              {
                uint64_t v153 = *(void *)(v149 + 8);
                uint64_t v154 = *(void *)(v149 + 16);
                uint64_t v155 = *(void *)(v149 + 24);
                v130[1].i64[0] = *(void *)v149;
                v130[1].i64[1] = v154;
                uint64_t v156 = (uint64_t *)((char *)v150->i64 + a11);
                *uint64_t v156 = v153;
                v156[1] = v155;
              }
              else if (v76[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, a11, v149, v151);
              }
              else
              {
                v150->i64[0] = 0;
                v130[1].i64[1] = 0;
                uint64_t v152 = (uint64_t *)((char *)v150->i64 + a11);
                *uint64_t v152 = 0;
                v152[1] = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v242 >> 3;
        }
        while (!v22);
        BOOL v22 = v18++ == v233;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v279 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v250 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v231 = v17;
  unsigned int v233 = v17 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v244 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v233)
  {
    unsigned int v242 = a7 + a9 - 1;
    if (a7 >> 3 <= v242 >> 3)
    {
      unsigned int v228 = a5 - 1;
      unsigned int v230 = (a6 - 1) >> 3;
      int v251 = ((a5 - 1) & 7) + 1;
      int v229 = ((a6 - 1) & 7) + 1;
      uint64_t v234 = a11;
      uint64_t v235 = 2 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 3;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0x700000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v241 = v29.i32[0] | v29.i32[1];
      BOOL v239 = v29.i32[1] != 0;
      int8x8_t v240 = v29;
      BOOL v238 = v29.i32[0] != 0;
      unint64_t v227 = 8 * v20 * (unint64_t)v19;
      unsigned int v236 = v27;
      do
      {
        unsigned int v30 = (8 * v18) | 7;
        if (8 * v18 <= v250) {
          int v31 = v250;
        }
        else {
          int v31 = 8 * v18;
        }
        unsigned int v32 = a7 >> 3;
        if (v231 < v30) {
          unsigned int v30 = v231;
        }
        unsigned int v249 = 8 * v18;
        int v237 = v31 - 8 * v18;
        int v248 = v30 - v31 + 1;
        int v33 = v229;
        if (v18 != v230) {
          int v33 = 8;
        }
        unsigned int v252 = v33;
        uint64_t v247 = a2 + (v31 - v250) * a11;
        do
        {
          unsigned int v34 = 8 * v32;
          unsigned int v35 = 8 * (v32 + 1) - 1;
          if (8 * v32 <= a7) {
            int v36 = a7;
          }
          else {
            int v36 = 8 * v32;
          }
          if (v242 < v35) {
            unsigned int v35 = a7 + a9 - 1;
          }
          int v37 = v35 - v36 + 1;
          if (v32 == v27) {
            unsigned int v38 = v251;
          }
          else {
            unsigned int v38 = 8;
          }
          BOOL v39 = 1;
          if (v249 >= v250 && v34 >= a7)
          {
            int v40 = v251;
            if (v32 != v27) {
              int v40 = 8;
            }
            BOOL v39 = v37 != v40 || v248 != v252;
          }
          if (isLevelTiled)
          {
            unsigned int v61 = 0;
            uint64_t v62 = v227 >> (*(unsigned char *)(a1 + 57) != 0);
            char v63 = 1;
            if (v62 > 127)
            {
              if (v62 > 511)
              {
                if (v62 == 512)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 16;
                  unsigned int v65 = 16;
                }
                else
                {
                  char v64 = 1;
                  unsigned int v65 = 0;
                  if (v62 == 1024)
                  {
                    char v63 = 0;
                    unsigned int v65 = 8;
                    unsigned int v61 = 16;
                  }
                }
              }
              else if (v62 == 128)
              {
                char v63 = 0;
                char v64 = 0;
                unsigned int v61 = 32;
                unsigned int v65 = 32;
              }
              else
              {
                char v64 = 1;
                unsigned int v65 = 0;
                if (v62 == 256)
                {
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 16;
                  unsigned int v61 = 32;
                }
              }
            }
            else
            {
              char v64 = 1;
              unsigned int v65 = 0;
              switch(v62)
              {
                case 4:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 128;
                  unsigned int v61 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 128;
                  unsigned int v65 = 128;
                  break;
                case 16:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v65 = 64;
                  unsigned int v61 = 128;
                  break;
                case 32:
                  char v63 = 0;
                  char v64 = 0;
                  unsigned int v61 = 64;
                  unsigned int v65 = 64;
                  break;
                default:
                  if (v62 == 64)
                  {
                    char v63 = 0;
                    char v64 = 0;
                    unsigned int v65 = 32;
                    unsigned int v61 = 64;
                  }
                  break;
              }
            }
            unsigned int v216 = (v61 >> 3) - 1;
            if (v63) {
              unsigned int v217 = 0;
            }
            else {
              unsigned int v217 = 32 - __clz(~(-1 << -(char)__clz(v216)));
            }
            unsigned int v218 = (v65 >> 3) - 1;
            if (v64)
            {
              unsigned int v219 = 0;
              if (v217) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v219 = 32 - __clz(~(-1 << -(char)__clz(v218)));
              if (v219 | v217)
              {
LABEL_229:
                int v220 = 0;
                uint64_t v221 = 0;
                int v222 = v32 & v216;
                int v223 = v18 & v218;
                BOOL v224 = v217 != 0;
                BOOL v225 = v219 != 0;
                int v226 = 1;
                do
                {
                  --v217;
                  if (v224) {
                    v221 |= (unint64_t)(v226 & v222) << v220++;
                  }
                  else {
                    unsigned int v217 = 0;
                  }
                  --v219;
                  if (v225) {
                    v221 |= (unint64_t)(v226 & v223) << v220++;
                  }
                  else {
                    unsigned int v219 = 0;
                  }
                  v226 *= 2;
                  --v220;
                  BOOL v225 = v219 != 0;
                  BOOL v224 = v217 != 0;
                }
                while (v219 | v217);
                goto LABEL_241;
              }
            }
            uint64_t v221 = 0;
LABEL_241:
            unint64_t v49 = ((unint64_t)(v34 / v61 + v249 / v65 * ((v61 + v228) / v61)) << 14) + (v221 << 8);
            goto LABEL_59;
          }
          if (v241)
          {
            int v42 = 0;
            uint64_t v43 = 0;
            int v44 = 1;
            BOOL v45 = v238;
            BOOL v46 = v239;
            __int32 v48 = v240.i32[0];
            __int32 v47 = v240.i32[1];
            do
            {
              --v47;
              if (v46) {
                v43 |= (unint64_t)(v44 & v32) << v42++;
              }
              else {
                __int32 v47 = 0;
              }
              --v48;
              if (v45) {
                v43 |= (unint64_t)(v44 & v18) << v42++;
              }
              else {
                __int32 v48 = 0;
              }
              v44 *= 2;
              --v42;
              BOOL v45 = v48 != 0;
              BOOL v46 = v47 != 0;
            }
            while (v48 | v47);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v49 = v43 << 8;
LABEL_59:
          unsigned int v50 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10) {
            unsigned int v52 = 0;
          }
          else {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
          }
          unsigned int v53 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10)
          {
            unsigned int v55 = 0;
            if (!v52)
            {
LABEL_81:
              uint64_t v57 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
            if (!(v55 | v52)) {
              goto LABEL_81;
            }
          }
          int v56 = 0;
          uint64_t v57 = 0;
          BOOL v58 = v52 != 0;
          BOOL v59 = v55 != 0;
          int v60 = 1;
          do
          {
            --v52;
            if (v58) {
              v57 |= (unint64_t)(v60 & v32) << v56++;
            }
            else {
              unsigned int v52 = 0;
            }
            --v55;
            if (v59) {
              v57 |= (unint64_t)(v60 & v18) << v56++;
            }
            else {
              unsigned int v55 = 0;
            }
            v60 *= 2;
            --v56;
            BOOL v59 = v55 != 0;
            BOOL v58 = v52 != 0;
          }
          while (v55 | v52);
LABEL_82:
          unsigned int v66 = (const char *)(a3 + v49);
          if (v244)
          {
            long long v67 = *((_OWORD *)v66 + 13);
            v262[12] = *((_OWORD *)v66 + 12);
            v262[13] = v67;
            long long v68 = *((_OWORD *)v66 + 15);
            v262[14] = *((_OWORD *)v66 + 14);
            v262[15] = v68;
            long long v69 = *((_OWORD *)v66 + 9);
            v262[8] = *((_OWORD *)v66 + 8);
            v262[9] = v69;
            long long v70 = *((_OWORD *)v66 + 11);
            v262[10] = *((_OWORD *)v66 + 10);
            v262[11] = v70;
            long long v71 = *((_OWORD *)v66 + 5);
            v262[4] = *((_OWORD *)v66 + 4);
            v262[5] = v71;
            long long v72 = *((_OWORD *)v66 + 7);
            v262[6] = *((_OWORD *)v66 + 6);
            v262[7] = v72;
            long long v73 = *((_OWORD *)v66 + 1);
            v262[0] = *(_OWORD *)v66;
            v262[1] = v73;
            long long v74 = *((_OWORD *)v66 + 2);
            long long v75 = *((_OWORD *)v66 + 3);
            unsigned int v66 = (const char *)v262;
            v262[2] = v74;
            v262[3] = v75;
          }
          long long v76 = (unsigned __int8 *)(a4 + 8 * v57);
          long long v77 = (int8x16_t *)(v247 + 4 * (v36 - a7));
          char v78 = v38 < 8 || v39;
          if ((v78 & 1) != 0 || v252 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v66;
            char v260 = v38;
            char v261 = v252;
            int v256 = v237;
            unsigned int v257 = v36 - v34;
            block[6] = a4 + 8 * v57;
            uint64_t v254 = v247 + 4 * (v36 - a7);
            uint64_t v255 = a11;
            unsigned int v258 = v248;
            unsigned int v259 = v37;
            if (v39)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v82 = *v76;
            if (v82 == 96)
            {
              int8x16_t v158 = vld1q_dup_s8(v66);
              int8x16_t v263 = v158;
              int8x16_t v265 = v158;
              uint64_t v83 = 1;
            }
            else if (v82 == 31)
            {
              uint64_t v159 = *((void *)v66 + 1);
              uint64_t v160 = *((void *)v66 + 2);
              uint64_t v161 = *((void *)v66 + 3);
              v263.i64[0] = *(void *)v66;
              v263.i64[1] = v160;
              v265.i64[0] = v159;
              v265.i64[1] = v161;
              uint64_t v83 = 32;
            }
            else if (*v76)
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v263, 32, (uint64_t)v66, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int8x16_t v263 = 0uLL;
              int8x16_t v265 = 0uLL;
            }
            uint64_t v162 = (uint64_t)&v66[v83];
            unsigned int v163 = v76[1];
            if (v163 == 96)
            {
              int8x16_t v165 = vld1q_dup_s8((const char *)v162);
              int8x16_t v267 = v165;
              int8x16_t v269 = v165;
              uint64_t v164 = 1;
            }
            else if (v163 == 31)
            {
              uint64_t v166 = *(void *)(v162 + 8);
              uint64_t v167 = *(void *)(v162 + 16);
              uint64_t v168 = *(void *)(v162 + 24);
              v267.i64[0] = *(void *)v162;
              v267.i64[1] = v167;
              v269.i64[0] = v166;
              v269.i64[1] = v168;
              uint64_t v164 = 32;
            }
            else if (v76[1])
            {
              uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, v162, v163);
            }
            else
            {
              uint64_t v164 = 0;
              int8x16_t v267 = 0uLL;
              int8x16_t v269 = 0uLL;
            }
            uint64_t v169 = v162 + v164;
            unsigned int v170 = v76[2];
            if (v170 == 96)
            {
              int8x16_t v172 = vld1q_dup_s8((const char *)v169);
              int8x16_t v264 = v172;
              int8x16_t v266 = v172;
              uint64_t v171 = 1;
            }
            else if (v170 == 31)
            {
              uint64_t v173 = *(void *)(v169 + 8);
              uint64_t v174 = *(void *)(v169 + 16);
              uint64_t v175 = *(void *)(v169 + 24);
              v264.i64[0] = *(void *)v169;
              v264.i64[1] = v174;
              v266.i64[0] = v173;
              v266.i64[1] = v175;
              uint64_t v171 = 32;
            }
            else if (v76[2])
            {
              uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v264, 32, v169, v170);
            }
            else
            {
              uint64_t v171 = 0;
              int8x16_t v264 = 0uLL;
              int8x16_t v266 = 0uLL;
            }
            uint64_t v176 = v169 + v171;
            unsigned int v177 = v76[3];
            if (v177 == 96)
            {
              int8x16_t v179 = vld1q_dup_s8((const char *)v176);
              int8x16_t v268 = v179;
              int8x16_t v270 = v179;
              uint64_t v178 = 1;
            }
            else if (v177 == 31)
            {
              uint64_t v180 = *(void *)(v176 + 8);
              uint64_t v181 = *(void *)(v176 + 16);
              uint64_t v182 = *(void *)(v176 + 24);
              v268.i64[0] = *(void *)v176;
              v268.i64[1] = v181;
              v270.i64[0] = v180;
              v270.i64[1] = v182;
              uint64_t v178 = 32;
            }
            else if (v76[3])
            {
              uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, v176, v177);
            }
            else
            {
              uint64_t v178 = 0;
              int8x16_t v268 = 0uLL;
              int8x16_t v270 = 0uLL;
            }
            uint64_t v183 = v176 + v178;
            unsigned int v184 = v76[4];
            if (v184 == 96)
            {
              int8x16_t v186 = vld1q_dup_s8((const char *)v183);
              int8x16_t v271 = v186;
              int8x16_t v273 = v186;
              uint64_t v185 = 1;
            }
            else if (v184 == 31)
            {
              uint64_t v187 = *(void *)(v183 + 8);
              uint64_t v188 = *(void *)(v183 + 16);
              uint64_t v189 = *(void *)(v183 + 24);
              v271.i64[0] = *(void *)v183;
              v271.i64[1] = v188;
              v273.i64[0] = v187;
              v273.i64[1] = v189;
              uint64_t v185 = 32;
            }
            else if (v76[4])
            {
              uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, v183, v184);
            }
            else
            {
              uint64_t v185 = 0;
              int8x16_t v271 = 0uLL;
              int8x16_t v273 = 0uLL;
            }
            uint64_t v190 = v183 + v185;
            unsigned int v191 = v76[5];
            if (v191 == 96)
            {
              int8x16_t v193 = vld1q_dup_s8((const char *)v190);
              int8x16_t v275 = v193;
              int8x16_t v277 = v193;
              uint64_t v192 = 1;
            }
            else if (v191 == 31)
            {
              uint64_t v194 = *(void *)(v190 + 8);
              uint64_t v195 = *(void *)(v190 + 16);
              uint64_t v196 = *(void *)(v190 + 24);
              v275.i64[0] = *(void *)v190;
              v275.i64[1] = v195;
              v277.i64[0] = v194;
              v277.i64[1] = v196;
              uint64_t v192 = 32;
            }
            else if (v76[5])
            {
              uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 32, v190, v191);
            }
            else
            {
              uint64_t v192 = 0;
              int8x16_t v275 = 0uLL;
              int8x16_t v277 = 0uLL;
            }
            uint64_t v197 = v190 + v192;
            unsigned int v198 = v76[6];
            if (v198 == 96)
            {
              int8x16_t v200 = vld1q_dup_s8((const char *)v197);
              int8x16_t v272 = v200;
              int8x16_t v274 = v200;
              uint64_t v199 = 1;
            }
            else if (v198 == 31)
            {
              uint64_t v201 = *(void *)(v197 + 8);
              uint64_t v202 = *(void *)(v197 + 16);
              uint64_t v203 = *(void *)(v197 + 24);
              v272.i64[0] = *(void *)v197;
              v272.i64[1] = v202;
              v274.i64[0] = v201;
              v274.i64[1] = v203;
              uint64_t v199 = 32;
            }
            else if (v76[6])
            {
              uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 32, v197, v198);
            }
            else
            {
              uint64_t v199 = 0;
              int8x16_t v272 = 0uLL;
              int8x16_t v274 = 0uLL;
            }
            uint64_t v204 = v197 + v199;
            unsigned int v205 = v76[7];
            if (v205 == 96)
            {
              int8x16_t v207 = vld1q_dup_s8((const char *)v204);
              int8x16_t v276 = v207;
              int8x16_t v278 = v207;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else if (v205 == 31)
            {
              uint64_t v208 = *(void *)(v204 + 8);
              uint64_t v209 = *(void *)(v204 + 16);
              uint64_t v210 = *(void *)(v204 + 24);
              v276.i64[0] = *(void *)v204;
              v276.i64[1] = v209;
              v278.i64[0] = v208;
              v278.i64[1] = v210;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else if (v76[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 32, v204, v205);
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            else
            {
              int8x16_t v276 = 0uLL;
              int8x16_t v278 = 0uLL;
              unint64_t v206 = v258;
              if (!v258) {
                goto LABEL_27;
              }
            }
            unint64_t v211 = 0;
            unsigned int v212 = &v263.i8[32 * v256 + 4 * v257];
            unsigned int v213 = v259;
            do
            {
              if (v213)
              {
                uint64_t v214 = 0;
                uint64_t v215 = v254 + v255 * v211;
                do
                {
                  *(unsigned char *)(v215 + v214) = v212[v214];
                  ++v214;
                  unsigned int v213 = v259;
                }
                while (4 * (unint64_t)v259 > v214);
                unint64_t v206 = v258;
              }
              ++v211;
              v212 += 32;
            }
            while (v211 < v206);
          }
          else
          {
            unsigned int v79 = *v76;
            if (v79 == 96)
            {
              int8x16_t v88 = vld1q_dup_s8(v66);
              *long long v77 = v88;
              *(int8x16_t *)((char *)v77 + a11) = v88;
              uint64_t v80 = 1;
            }
            else if (v79 == 31)
            {
              uint64_t v84 = *((void *)v66 + 1);
              uint64_t v85 = *((void *)v66 + 2);
              uint64_t v86 = *((void *)v66 + 3);
              v77->i64[0] = *(void *)v66;
              v77->i64[1] = v85;
              uint64_t v87 = (uint64_t *)((char *)v77->i64 + a11);
              void *v87 = v84;
              v87[1] = v86;
              uint64_t v80 = 32;
            }
            else if (*v76)
            {
              uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v77, a11, (uint64_t)v66, v79);
            }
            else
            {
              uint64_t v80 = 0;
              v77->i64[0] = 0;
              v77->i64[1] = 0;
              long long v81 = (uint64_t *)((char *)v77->i64 + a11);
              *long long v81 = 0;
              v81[1] = 0;
            }
            uint64_t v89 = (uint64_t)&v66[v80];
            uint64_t v90 = (int8x16_t *)((char *)v77 + v235);
            unsigned int v91 = v76[1];
            if (v91 == 96)
            {
              int8x16_t v98 = vld1q_dup_s8((const char *)v89);
              int8x16_t *v90 = v98;
              *(int8x16_t *)((char *)v90 + a11) = v98;
              uint64_t v92 = 1;
            }
            else if (v91 == 31)
            {
              uint64_t v94 = *(void *)(v89 + 8);
              uint64_t v95 = *(void *)(v89 + 16);
              uint64_t v96 = *(void *)(v89 + 24);
              v90->i64[0] = *(void *)v89;
              v90->i64[1] = v95;
              unsigned int v97 = (uint64_t *)((char *)v90->i64 + a11);
              void *v97 = v94;
              v97[1] = v96;
              uint64_t v92 = 32;
            }
            else if (v76[1])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((__int32 *)((char *)v77->i32 + v235), a11, v89, v91);
            }
            else
            {
              uint64_t v92 = 0;
              v90->i64[0] = 0;
              v90->i64[1] = 0;
              uint64_t v93 = (uint64_t *)((char *)v90->i64 + a11);
              *uint64_t v93 = 0;
              v93[1] = 0;
            }
            uint64_t v99 = v89 + v92;
            unsigned int v100 = v77 + 1;
            unsigned int v101 = v76[2];
            if (v101 == 96)
            {
              int8x16_t v108 = vld1q_dup_s8((const char *)v99);
              int8x16_t *v100 = v108;
              *(int8x16_t *)((char *)v100 + a11) = v108;
              uint64_t v102 = 1;
            }
            else if (v101 == 31)
            {
              uint64_t v104 = *(void *)(v99 + 8);
              uint64_t v105 = *(void *)(v99 + 16);
              uint64_t v106 = *(void *)(v99 + 24);
              v77[1].i64[0] = *(void *)v99;
              v77[1].i64[1] = v105;
              int v107 = (uint64_t *)((char *)v100->i64 + a11);
              void *v107 = v104;
              v107[1] = v106;
              uint64_t v102 = 32;
            }
            else if (v76[2])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v100, a11, v99, v101);
            }
            else
            {
              uint64_t v102 = 0;
              v100->i64[0] = 0;
              v77[1].i64[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v100->i64 + a11);
              *uint64_t v103 = 0;
              v103[1] = 0;
            }
            uint64_t v109 = v99 + v102;
            int v110 = v90 + 1;
            unsigned int v111 = v76[3];
            if (v111 == 96)
            {
              int8x16_t v118 = vld1q_dup_s8((const char *)v109);
              int8x16_t *v110 = v118;
              *(int8x16_t *)((char *)v110 + a11) = v118;
              uint64_t v112 = 1;
            }
            else if (v111 == 31)
            {
              uint64_t v114 = *(void *)(v109 + 8);
              uint64_t v115 = *(void *)(v109 + 16);
              uint64_t v116 = *(void *)(v109 + 24);
              v90[1].i64[0] = *(void *)v109;
              v90[1].i64[1] = v115;
              uint64_t v117 = (uint64_t *)((char *)v110->i64 + a11);
              void *v117 = v114;
              v117[1] = v116;
              uint64_t v112 = 32;
            }
            else if (v76[3])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v110, a11, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              v110->i64[0] = 0;
              v90[1].i64[1] = 0;
              uint64_t v113 = (uint64_t *)((char *)v110->i64 + a11);
              *uint64_t v113 = 0;
              v113[1] = 0;
            }
            uint64_t v119 = v109 + v112;
            int v120 = (int8x16_t *)((char *)v77 + v234 * 4);
            unsigned int v121 = v76[4];
            if (v121 == 96)
            {
              int8x16_t v128 = vld1q_dup_s8((const char *)v119);
              int8x16_t *v120 = v128;
              *(int8x16_t *)((char *)v120 + a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              uint64_t v124 = *(void *)(v119 + 8);
              uint64_t v125 = *(void *)(v119 + 16);
              uint64_t v126 = *(void *)(v119 + 24);
              v120->i64[0] = *(void *)v119;
              v120->i64[1] = v125;
              int v127 = (uint64_t *)((char *)v120->i64 + a11);
              void *v127 = v124;
              v127[1] = v126;
              uint64_t v122 = 32;
            }
            else if (v76[4])
            {
              uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v77->i32[v234], a11, v119, v121);
            }
            else
            {
              uint64_t v122 = 0;
              v120->i64[0] = 0;
              v120->i64[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v120->i64 + a11);
              *uint64_t v123 = 0;
              v123[1] = 0;
            }
            uint64_t v129 = v119 + v122;
            uint64_t v130 = (int8x16_t *)((char *)v77 + 6 * a11);
            unsigned int v131 = v76[5];
            if (v131 == 96)
            {
              int8x16_t v138 = vld1q_dup_s8((const char *)v129);
              int8x16_t *v130 = v138;
              *(int8x16_t *)((char *)v130 + a11) = v138;
              uint64_t v132 = 1;
            }
            else if (v131 == 31)
            {
              uint64_t v134 = *(void *)(v129 + 8);
              uint64_t v135 = *(void *)(v129 + 16);
              uint64_t v136 = *(void *)(v129 + 24);
              v130->i64[0] = *(void *)v129;
              v130->i64[1] = v135;
              uint64_t v137 = (uint64_t *)((char *)v130->i64 + a11);
              void *v137 = v134;
              v137[1] = v136;
              uint64_t v132 = 32;
            }
            else if (v76[5])
            {
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v130, a11, v129, v131);
            }
            else
            {
              uint64_t v132 = 0;
              v130->i64[0] = 0;
              v130->i64[1] = 0;
              uint64_t v133 = (uint64_t *)((char *)v130->i64 + a11);
              *uint64_t v133 = 0;
              v133[1] = 0;
            }
            uint64_t v139 = v129 + v132;
            unsigned int v140 = v120 + 1;
            unsigned int v141 = v76[6];
            if (v141 == 96)
            {
              int8x16_t v148 = vld1q_dup_s8((const char *)v139);
              int8x16_t *v140 = v148;
              *(int8x16_t *)((char *)v140 + a11) = v148;
              uint64_t v142 = 1;
            }
            else if (v141 == 31)
            {
              uint64_t v144 = *(void *)(v139 + 8);
              uint64_t v145 = *(void *)(v139 + 16);
              uint64_t v146 = *(void *)(v139 + 24);
              v120[1].i64[0] = *(void *)v139;
              v120[1].i64[1] = v145;
              uint64_t v147 = (uint64_t *)((char *)v140->i64 + a11);
              void *v147 = v144;
              v147[1] = v146;
              uint64_t v142 = 32;
            }
            else if (v76[6])
            {
              uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v140, a11, v139, v141);
            }
            else
            {
              uint64_t v142 = 0;
              v140->i64[0] = 0;
              v120[1].i64[1] = 0;
              uint64_t v143 = (uint64_t *)((char *)v140->i64 + a11);
              *uint64_t v143 = 0;
              v143[1] = 0;
            }
            uint64_t v149 = v139 + v142;
            uint64_t v150 = v130 + 1;
            unsigned int v151 = v76[7];
            if (v151 == 96)
            {
              int8x16_t v157 = vld1q_dup_s8((const char *)v149);
              int8x16_t *v150 = v157;
              *(int8x16_t *)((char *)v150 + a11) = v157;
              unsigned int v27 = v236;
            }
            else
            {
              unsigned int v27 = v236;
              if (v151 == 31)
              {
                uint64_t v153 = *(void *)(v149 + 8);
                uint64_t v154 = *(void *)(v149 + 16);
                uint64_t v155 = *(void *)(v149 + 24);
                v130[1].i64[0] = *(void *)v149;
                v130[1].i64[1] = v154;
                uint64_t v156 = (uint64_t *)((char *)v150->i64 + a11);
                *uint64_t v156 = v153;
                v156[1] = v155;
              }
              else if (v76[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, a11, v149, v151);
              }
              else
              {
                v150->i64[0] = 0;
                v130[1].i64[1] = 0;
                uint64_t v152 = (uint64_t *)((char *)v150->i64 + a11);
                *uint64_t v152 = 0;
                v152[1] = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v242 >> 3;
        }
        while (!v22);
        BOOL v22 = v18++ == v233;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          long long v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            long long v75 = __dst;
          }
          long long v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int8x16_t v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  v147[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v125 = a8;
  unsigned int v107 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v106 = v107 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v120 = v23;
  unsigned int v24 = a7;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v26 = *(unsigned __int8 *)(v15 + 254);
    char v27 = __clz(v17);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v119 = 0;
LABEL_32:
      unsigned int v116 = v26 - 3;
      unsigned int v111 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v104 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v119 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v119 = 0;
  unsigned int v104 = 0;
  unsigned int v111 = 0;
  unsigned int v116 = 0;
LABEL_33:
  if (v19 <= v106)
  {
    unsigned int v118 = a7 + a9 - 1;
    if (a7 >> 3 <= v118 >> 3)
    {
      unsigned int v127 = v17 >> 3;
      unsigned int v103 = v18 >> 3;
      int v126 = (v17 & 7) + 1;
      int v102 = (v18 & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v112 = v34.i32[0] | v34.i32[1];
      int8x8_t v110 = v34;
      BOOL v108 = v34.i32[0] != 0;
      BOOL v109 = v34.i32[1] != 0;
      uint64_t v117 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v125) {
          int v36 = v125;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v107 < v35) {
          unsigned int v35 = v107;
        }
        int v115 = v36 - 8 * v19;
        int v124 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v102;
        if (v19 != v103) {
          int v38 = 8;
        }
        unsigned int v129 = v38;
        uint64_t v123 = a2 + (v36 - v125) * a11;
        do
        {
          unsigned int v39 = 8 * v37;
          unsigned int v40 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v24) {
            int v41 = v24;
          }
          else {
            int v41 = 8 * v37;
          }
          if (v118 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v127) {
            unsigned int v43 = v126;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (8 * v19 >= v125 && v39 >= v24)
          {
            int v45 = v126;
            if (v37 != v127) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v124 != v129;
          }
          if (v119)
          {
            if (v116 | v111)
            {
              int v47 = 0;
              uint64_t v48 = 0;
              BOOL v49 = v111 != 0;
              int v50 = 1;
              BOOL v52 = v116 != 0;
              unsigned int v51 = v111;
              unsigned int v53 = v116;
              do
              {
                --v53;
                if (v52) {
                  v48 |= (unint64_t)(v37 & ~(-1 << v116) & v50) << v47++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v51;
                if (v49) {
                  v48 |= (unint64_t)(v19 & ~(-1 << v111) & v50) << v47++;
                }
                else {
                  unsigned int v51 = 0;
                }
                v50 *= 2;
                --v47;
                BOOL v49 = v51 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v51 | v53);
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v61 = *(void *)(v15 + 320) * ((v37 >> v116) + (v19 >> v111) * v104) + (v48 << 10);
          }
          else
          {
            if (v112)
            {
              int v54 = 0;
              uint64_t v55 = 0;
              int v56 = 1;
              BOOL v57 = v108;
              BOOL v58 = v109;
              __int32 v60 = v110.i32[0];
              __int32 v59 = v110.i32[1];
              do
              {
                --v59;
                if (v58) {
                  v55 |= (unint64_t)(v56 & v37) << v54++;
                }
                else {
                  __int32 v59 = 0;
                }
                --v60;
                if (v57) {
                  v55 |= (unint64_t)(v56 & v19) << v54++;
                }
                else {
                  __int32 v60 = 0;
                }
                v56 *= 2;
                --v54;
                BOOL v57 = v60 != 0;
                BOOL v58 = v59 != 0;
              }
              while (v60 | v59);
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v61 = v55 << 10;
          }
          unsigned int v62 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_114:
              unint64_t v69 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_114;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v37) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v19) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_115:
          long long v75 = (unsigned char *)(a3 + v61);
          if (v120)
          {
            int v76 = v42;
            memcpy(__dst, v75, sizeof(__dst));
            int v42 = v76;
            unsigned int v24 = a7;
            long long v75 = __dst;
          }
          long long v77 = (unsigned __int8 *)(a4 + 8 * v69);
          uint64_t v78 = v123 + 16 * (v41 - v24);
          char v79 = v43 < 8 || v44;
          if ((v79 & 1) != 0 || v129 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v117;
            block[5] = v75;
            char v137 = v43;
            char v138 = v129;
            unsigned int v133 = v115;
            unsigned int v134 = v41 - v39;
            block[6] = v77;
            uint64_t v131 = v123 + 16 * (v41 - v24);
            uint64_t v132 = a11;
            unsigned int v135 = v124;
            unsigned int v136 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v117 + 8) + 7384), block);
              unsigned int v24 = a7;
              uint64_t v15 = v117;
            }
            else
            {
              uint64_t v89 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v140, 128, (uint64_t)v75, *v77)];
              uint64_t v90 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v142, 128, v89, v77[1]);
              uint64_t v91 = v90
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v141, 128, v90, v77[2]);
              uint64_t v92 = v91
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v91, v77[3]);
              uint64_t v93 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v92, v77[4]);
              uint64_t v94 = v93
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v93, v77[5]);
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v94, v77[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v147, 128, v94 + v95, v77[7]);
              unint64_t v96 = v135;
              uint64_t v15 = v117;
              if (v135)
              {
                unint64_t v97 = 0;
                int8x16_t v98 = &v140[128 * (unint64_t)v133 + 16 * v134];
                unsigned int v99 = v136;
                do
                {
                  if (v99)
                  {
                    uint64_t v100 = 0;
                    uint64_t v101 = v131 + v132 * v97;
                    do
                    {
                      *(unsigned char *)(v101 + v100) = v98[v100];
                      ++v100;
                      unsigned int v99 = v136;
                    }
                    while (16 * (unint64_t)v136 > v100);
                    unint64_t v96 = v135;
                  }
                  ++v97;
                  v98 += 128;
                }
                while (v97 < v96);
              }
              unsigned int v24 = a7;
            }
          }
          else
          {
            uint64_t v80 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (uint64_t)v75, *v77)];
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114, a11, v80, v77[1]);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v81, v77[2]);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v114 + 64, a11, v82, v77[3]);
            uint64_t v84 = v78 + v113;
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v113, a11, v83, v77[4]);
            uint64_t v86 = v78 + 6 * a11;
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v77[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 64, a11, v87, v77[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 64, a11, v87 + v88, v77[7]);
            unsigned int v24 = a7;
            uint64_t v15 = v117;
          }
          BOOL v20 = v37++ == v118 >> 3;
        }
        while (!v20);
        BOOL v20 = v19++ == v106;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v149[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v128 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v112 = v110 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v122 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v112)
  {
    unsigned int v120 = a7 + a9 - 1;
    unsigned int v109 = a7 >> 3;
    if (a7 >> 3 <= v120 >> 3)
    {
      unsigned int v106 = a5 - 1;
      unsigned int v108 = (a6 - 1) >> 3;
      int v129 = ((a5 - 1) & 7) + 1;
      unsigned int v130 = (a5 - 1) >> 3;
      int v107 = ((a6 - 1) & 7) + 1;
      uint64_t v113 = 4 * a11;
      uint64_t v114 = 2 * a11;
      uint32x2_t v25 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v26 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v25, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v25));
      __int32 v119 = v26.i32[0] | v26.i32[1];
      BOOL v117 = v26.i32[1] != 0;
      int8x8_t v118 = v26;
      BOOL v116 = v26.i32[0] != 0;
      unint64_t v105 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v27 = (8 * v17) | 7;
        if (8 * v17 <= v128) {
          int v28 = v128;
        }
        else {
          int v28 = 8 * v17;
        }
        unsigned int v29 = v109;
        if (v110 < v27) {
          unsigned int v27 = v110;
        }
        int v115 = v28 - 8 * v17;
        int v126 = v27 - v28 + 1;
        unsigned int v127 = 8 * v17;
        int v30 = v107;
        if (v17 != v108) {
          int v30 = 8;
        }
        unsigned int v131 = v30;
        uint64_t v125 = a2 + (v28 - v128) * a11;
        do
        {
          unsigned int v31 = 8 * v29;
          unsigned int v32 = 8 * (v29 + 1) - 1;
          if (8 * v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 8 * v29;
          }
          if (v120 < v32) {
            unsigned int v32 = v120;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v130) {
            unsigned int v35 = v129;
          }
          else {
            unsigned int v35 = 8;
          }
          BOOL v36 = 1;
          if (v127 >= v128 && v31 >= a7)
          {
            int v37 = v129;
            if (v29 != v130) {
              int v37 = 8;
            }
            BOOL v36 = v34 != v37 || v126 != v131;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v105 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v94 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v95 = 0;
            }
            else {
              unsigned int v95 = 32 - __clz(~(-1 << -(char)__clz(v94)));
            }
            unsigned int v96 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v97 = 0;
              if (v95) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
              if (v97 | v95)
              {
LABEL_121:
                int v98 = 0;
                uint64_t v99 = 0;
                int v100 = v29 & v94;
                int v101 = v17 & v96;
                BOOL v102 = v95 != 0;
                BOOL v103 = v97 != 0;
                int v104 = 1;
                do
                {
                  --v95;
                  if (v102) {
                    v99 |= (unint64_t)(v104 & v100) << v98++;
                  }
                  else {
                    unsigned int v95 = 0;
                  }
                  --v97;
                  if (v103) {
                    v99 |= (unint64_t)(v104 & v101) << v98++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v104 *= 2;
                  --v98;
                  BOOL v103 = v97 != 0;
                  BOOL v102 = v95 != 0;
                }
                while (v97 | v95);
                goto LABEL_133;
              }
            }
            uint64_t v99 = 0;
LABEL_133:
            unint64_t v46 = ((unint64_t)(v31 / v60 + v127 / v64 * ((v60 + v106) / v60)) << 14) + (v99 << 10);
            goto LABEL_60;
          }
          if (v119)
          {
            int v39 = 0;
            uint64_t v40 = 0;
            int v41 = 1;
            BOOL v42 = v116;
            BOOL v43 = v117;
            __int32 v45 = v118.i32[0];
            __int32 v44 = v118.i32[1];
            do
            {
              --v44;
              if (v43) {
                v40 |= (unint64_t)(v41 & v29) << v39++;
              }
              else {
                __int32 v44 = 0;
              }
              --v45;
              if (v42) {
                v40 |= (unint64_t)(v41 & v17) << v39++;
              }
              else {
                __int32 v45 = 0;
              }
              v41 *= 2;
              --v39;
              BOOL v42 = v45 != 0;
              BOOL v43 = v44 != 0;
            }
            while (v45 | v44);
          }
          else
          {
            uint64_t v40 = 0;
          }
          unint64_t v46 = v40 << 10;
LABEL_60:
          unsigned int v47 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 7;
          if (v48 < 0x10) {
            unsigned int v49 = 0;
          }
          else {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 3) - 1)));
          }
          unsigned int v50 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v50 <= 1) {
            unsigned int v50 = 1;
          }
          unsigned int v51 = v50 + 7;
          if (v51 < 0x10)
          {
            unsigned int v52 = 0;
            if (!v49)
            {
LABEL_86:
              unint64_t v54 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v52 = 32 - __clz(~(-1 << -(char)__clz((v51 >> 3) - 1)));
            if (!(v52 | v49)) {
              goto LABEL_86;
            }
          }
          int v53 = 0;
          unint64_t v54 = 0;
          BOOL v55 = v49 != 0;
          BOOL v56 = v52 != 0;
          int v57 = 1;
          do
          {
            --v49;
            BOOL v58 = !v55;
            if (v55)
            {
              unint64_t v59 = ((unint64_t)(v57 & v29) << v53) | v54;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v59 = v54;
            }
            if (!v58) {
              ++v53;
            }
            --v52;
            if (v56)
            {
              unint64_t v54 = ((unint64_t)(v57 & v17) << v53) | v59;
            }
            else
            {
              unsigned int v52 = 0;
              unint64_t v54 = v59;
            }
            if (v56) {
              ++v53;
            }
            v57 *= 2;
            --v53;
            BOOL v56 = v52 != 0;
            BOOL v55 = v49 != 0;
          }
          while (v52 | v49);
LABEL_87:
          unsigned int v65 = (unsigned char *)(a3 + v46);
          if (v122)
          {
            int v66 = v34;
            unsigned int v67 = v35;
            memcpy(__dst, (const void *)(a3 + v46), sizeof(__dst));
            unsigned int v35 = v67;
            int v34 = v66;
            unsigned int v65 = __dst;
          }
          int v68 = (unsigned __int8 *)(a4 + 8 * v54);
          uint64_t v69 = a7;
          uint64_t v70 = v125 + 16 * (v33 - a7);
          char v71 = v35 < 8 || v36;
          if ((v71 & 1) == 0 && v131 > 7)
          {
            uint64_t v72 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70, a11, (uint64_t)v65, *v68)];
            uint64_t v73 = v72
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114, a11, v72, v68[1]);
            uint64_t v74 = v73
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + 64, a11, v73, v68[2]);
            uint64_t v75 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v114 + 64, a11, v74, v68[3]);
            uint64_t v76 = v70 + v113;
            uint64_t v77 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v70 + v113, a11, v75, v68[4]);
            uint64_t v78 = v70 + 6 * a11;
            uint64_t v79 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, v77, v68[5]);
            uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v76 + 64, a11, v79, v68[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 64, a11, v79 + v80, v68[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v139 = v35;
          char v140 = v131;
          unsigned int v135 = v115;
          unsigned int v136 = v33 - v31;
          block[6] = v68;
          uint64_t v133 = v70;
          uint64_t v134 = a11;
          unsigned int v137 = v126;
          unsigned int v138 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_27:
            a7 = v69;
            goto LABEL_28;
          }
          uint64_t v81 = (uint64_t)&v65[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v142, 128, (uint64_t)v65, *v68)];
          uint64_t v82 = v81
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v144, 128, v81, v68[1]);
          uint64_t v83 = v82
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v143, 128, v82, v68[2]);
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v145, 128, v83, v68[3]);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v146, 128, v84, v68[4]);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v148, 128, v85, v68[5]);
          uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v147, 128, v86, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v149, 128, v86 + v87, v68[7]);
          unint64_t v88 = v137;
          a7 = v69;
          if (v137)
          {
            unint64_t v89 = 0;
            uint64_t v90 = &v142[128 * (unint64_t)v135 + 16 * v136];
            unsigned int v91 = v138;
            do
            {
              if (v91)
              {
                uint64_t v92 = 0;
                uint64_t v93 = v133 + v134 * v89;
                do
                {
                  *(unsigned char *)(v93 + v92) = v90[v92];
                  ++v92;
                  unsigned int v91 = v138;
                }
                while (16 * (unint64_t)v138 > v92);
                unint64_t v88 = v137;
              }
              ++v89;
              v90 += 128;
            }
            while (v89 < v88);
          }
LABEL_28:
          BOOL v21 = v29++ == v120 >> 3;
        }
        while (!v21);
        BOOL v21 = v17++ == v112;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v400 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v321 = a8;
  unsigned int v303 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v302 = v303 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v315 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v314 = 0;
LABEL_32:
      unsigned int v312 = v25 - 3;
      unsigned int v307 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v300 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v314 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v314 = 0;
  unsigned int v300 = 0;
  unsigned int v307 = 0;
  unsigned int v312 = 0;
LABEL_33:
  if (v19 <= v302)
  {
    unsigned int v313 = a7 + a9 - 1;
    if (a7 >> 3 <= v313 >> 3)
    {
      uint64_t v32 = a11;
      unsigned int v324 = v17 >> 3;
      unsigned int v299 = v18 >> 3;
      int v323 = (v17 & 7) + 1;
      int v298 = (v18 & 7) + 1;
      uint64_t v309 = 4 * a11;
      uint64_t v310 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v308 = v34.i32[0] | v34.i32[1];
      BOOL v305 = v34.i32[1] != 0;
      int8x8_t v306 = v34;
      BOOL v304 = v34.i32[0] != 0;
      uint64_t v322 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v321) {
          int v36 = v321;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v303 < v35) {
          unsigned int v35 = v303;
        }
        int v311 = v36 - 8 * v19;
        int v319 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v298;
        if (v19 != v299) {
          int v38 = 8;
        }
        unsigned int v325 = v38;
        uint64_t v39 = v19 & ~(-1 << v307);
        uint64_t v318 = a2 + (v36 - v321) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 8 * v37;
          unsigned int v43 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 8 * v37;
          }
          if (v313 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v324) {
            unsigned int v46 = v323;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v321 && v42 >= v40)
          {
            int v48 = v323;
            if (v37 != v324) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v319 != v325;
          }
          if (v314)
          {
            if (v312 | v307)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v312 != 0;
              BOOL v54 = v307 != 0;
              unsigned int v55 = v312;
              unsigned int v56 = v307;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v312) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v312) + (v19 >> v307) * v300) + (v51 << 10);
          }
          else
          {
            if (v308)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v305;
              BOOL v61 = v304;
              __int32 v62 = v306.i32[1];
              __int32 v63 = v306.i32[0];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          uint64_t v78 = (unsigned char *)(a3 + v64);
          if (v315)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            uint64_t v78 = __dst;
          }
          uint64_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v318 + 16 * (v44 - v40);
          char v84 = v46 < 8 || v47;
          if ((v84 & 1) == 0 && v325 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v92 = *((_OWORD *)v78 + 1);
              long long v93 = *((_OWORD *)v78 + 2);
              long long v94 = *((_OWORD *)v78 + 3);
              long long v95 = *((_OWORD *)v78 + 4);
              long long v96 = *((_OWORD *)v78 + 5);
              long long v97 = *((_OWORD *)v78 + 6);
              long long v98 = *((_OWORD *)v78 + 7);
              uint64_t v32 = a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v92;
              uint64_t v99 = (_OWORD *)(v83 + a11);
              *(_OWORD *)(v83 + 32) = v95;
              *(_OWORD *)(v83 + 48) = v96;
              *uint64_t v99 = v93;
              v99[1] = v94;
              int v100 = (_OWORD *)(v83 + a11 + 32);
              _OWORD *v100 = v97;
              v100[1] = v98;
              uint64_t v86 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              if (v85 == 3)
              {
                float32x4_t v90 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v90;
                *(float32x4_t *)(v83 + 16) = v90;
                *(float32x4_t *)(v83 + 32) = v90;
                *(float32x4_t *)(v83 + 48) = v90;
                unsigned int v91 = (float32x4_t *)(v83 + a11);
                *unsigned int v91 = v90;
                v91[1] = v90;
                v91[2] = v90;
                v91[3] = v90;
                uint64_t v86 = 4;
              }
              else if (*v82)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v86 = 0;
                *(_OWORD *)(v83 + 32) = 0u;
                *(_OWORD *)(v83 + 48) = 0u;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v87 = (_OWORD *)(v83 + a11);
                v87[2] = 0u;
                v87[3] = 0u;
                _OWORD *v87 = 0u;
                v87[1] = 0u;
              }
            }
            uint64_t v101 = (uint64_t)&v78[v86];
            BOOL v102 = (float32x4_t *)(v83 + v310);
            unsigned int v103 = v82[1];
            if (v103 == 127)
            {
              float32x4_t v108 = *(float32x4_t *)(v101 + 16);
              long long v109 = *(_OWORD *)(v101 + 32);
              long long v110 = *(_OWORD *)(v101 + 48);
              float32x4_t v111 = *(float32x4_t *)(v101 + 64);
              float32x4_t v112 = *(float32x4_t *)(v101 + 80);
              long long v113 = *(_OWORD *)(v101 + 96);
              long long v114 = *(_OWORD *)(v101 + 112);
              float32x4_t *v102 = *(float32x4_t *)v101;
              v102[1] = v108;
              int v115 = (_OWORD *)((char *)v102->f32 + v32);
              v102[2] = v111;
              v102[3] = v112;
              _OWORD *v115 = v109;
              v115[1] = v110;
              BOOL v116 = (_OWORD *)((char *)v102[2].f32 + v32);
              _OWORD *v116 = v113;
              v116[1] = v114;
              uint64_t v104 = 128;
            }
            else if (v103 == 3)
            {
              float32x4_t v106 = vld1q_dup_f32((const float *)v101);
              float32x4_t *v102 = v106;
              v102[1] = v106;
              v102[2] = v106;
              v102[3] = v106;
              int v107 = (float32x4_t *)((char *)v102 + v32);
              float32x4_t *v107 = v106;
              v107[1] = v106;
              v107[2] = v106;
              v107[3] = v106;
              uint64_t v104 = 4;
            }
            else if (v82[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v310), v32, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102[2] = 0u;
              v102[3] = 0u;
              float32x4_t *v102 = 0u;
              v102[1] = 0u;
              unint64_t v105 = (_OWORD *)((char *)v102->f32 + v32);
              v105[2] = 0u;
              v105[3] = 0u;
              _OWORD *v105 = 0u;
              v105[1] = 0u;
            }
            uint64_t v117 = v101 + v104;
            int8x8_t v118 = (int8x16_t *)(v83 + 64);
            unsigned int v119 = v82[2];
            if (v119 == 127)
            {
              long long v124 = *(_OWORD *)(v117 + 16);
              long long v125 = *(_OWORD *)(v117 + 32);
              long long v126 = *(_OWORD *)(v117 + 48);
              long long v127 = *(_OWORD *)(v117 + 64);
              long long v128 = *(_OWORD *)(v117 + 80);
              long long v129 = *(_OWORD *)(v117 + 96);
              long long v130 = *(_OWORD *)(v117 + 112);
              int8x16_t *v118 = *(int8x16_t *)v117;
              *(_OWORD *)(v83 + 80) = v124;
              unsigned int v131 = &v118->i8[v32];
              *(_OWORD *)(v83 + 96) = v127;
              *(_OWORD *)(v83 + 112) = v128;
              *(_OWORD *)unsigned int v131 = v125;
              *((_OWORD *)v131 + 1) = v126;
              v131 += 32;
              *(_OWORD *)unsigned int v131 = v129;
              *((_OWORD *)v131 + 1) = v130;
              uint64_t v120 = 128;
            }
            else if (v119 == 3)
            {
              float32x4_t v122 = vld1q_dup_f32((const float *)v117);
              *(float32x4_t *)(v83 + 64) = v122;
              *(float32x4_t *)(v83 + 80) = v122;
              *(float32x4_t *)(v83 + 96) = v122;
              *(float32x4_t *)(v83 + 112) = v122;
              uint64_t v123 = (float32x4_t *)&v118->i8[v32];
              *uint64_t v123 = v122;
              v123[1] = v122;
              v123[2] = v122;
              v123[3] = v122;
              uint64_t v120 = 4;
            }
            else if (v82[2])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v32, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              *(_OWORD *)(v83 + 96) = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int8x16_t *v118 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v121 = &v118->i8[v32];
              *((_OWORD *)v121 + 2) = 0u;
              *((_OWORD *)v121 + 3) = 0u;
              *(_OWORD *)unsigned int v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
            }
            uint64_t v132 = v117 + v120;
            uint64_t v133 = (int8x16_t *)&v102[4];
            unsigned int v134 = v82[3];
            if (v134 == 127)
            {
              float32x4_t v139 = *(float32x4_t *)(v132 + 16);
              long long v140 = *(_OWORD *)(v132 + 32);
              long long v141 = *(_OWORD *)(v132 + 48);
              float32x4_t v142 = *(float32x4_t *)(v132 + 64);
              float32x4_t v143 = *(float32x4_t *)(v132 + 80);
              long long v144 = *(_OWORD *)(v132 + 96);
              long long v145 = *(_OWORD *)(v132 + 112);
              *uint64_t v133 = *(int8x16_t *)v132;
              v102[5] = v139;
              uint64_t v146 = &v133->i8[v32];
              v102[6] = v142;
              v102[7] = v143;
              *(_OWORD *)uint64_t v146 = v140;
              *((_OWORD *)v146 + 1) = v141;
              v146 += 32;
              *(_OWORD *)uint64_t v146 = v144;
              *((_OWORD *)v146 + 1) = v145;
              uint64_t v135 = 128;
            }
            else if (v134 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v132);
              v102[4] = v137;
              v102[5] = v137;
              v102[6] = v137;
              v102[7] = v137;
              unsigned int v138 = (float32x4_t *)&v133->i8[v32];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              v138[2] = v137;
              v138[3] = v137;
              uint64_t v135 = 4;
            }
            else if (v82[3])
            {
              uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, v32, v132, v134);
            }
            else
            {
              uint64_t v135 = 0;
              v102[6] = 0u;
              v102[7] = 0u;
              *uint64_t v133 = 0u;
              v102[5] = 0u;
              unsigned int v136 = &v133->i8[v32];
              *((_OWORD *)v136 + 2) = 0u;
              *((_OWORD *)v136 + 3) = 0u;
              *(_OWORD *)unsigned int v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v147 = v132 + v135;
            uint64_t v148 = (float32x4_t *)(v83 + v309);
            unsigned int v149 = v82[4];
            if (v149 == 127)
            {
              float32x4_t v154 = *(float32x4_t *)(v147 + 16);
              long long v155 = *(_OWORD *)(v147 + 32);
              long long v156 = *(_OWORD *)(v147 + 48);
              float32x4_t v157 = *(float32x4_t *)(v147 + 64);
              float32x4_t v158 = *(float32x4_t *)(v147 + 80);
              long long v159 = *(_OWORD *)(v147 + 96);
              long long v160 = *(_OWORD *)(v147 + 112);
              float32x4_t *v148 = *(float32x4_t *)v147;
              v148[1] = v154;
              uint64_t v161 = (_OWORD *)((char *)v148->f32 + v32);
              v148[2] = v157;
              v148[3] = v158;
              *uint64_t v161 = v155;
              v161[1] = v156;
              uint64_t v162 = (_OWORD *)((char *)v148[2].f32 + v32);
              *uint64_t v162 = v159;
              v162[1] = v160;
              uint64_t v150 = 128;
            }
            else if (v149 == 3)
            {
              float32x4_t v152 = vld1q_dup_f32((const float *)v147);
              float32x4_t *v148 = v152;
              v148[1] = v152;
              v148[2] = v152;
              v148[3] = v152;
              uint64_t v153 = (float32x4_t *)((char *)v148 + v32);
              *uint64_t v153 = v152;
              v153[1] = v152;
              v153[2] = v152;
              v153[3] = v152;
              uint64_t v150 = 4;
            }
            else if (v82[4])
            {
              uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v309), v32, v147, v149);
            }
            else
            {
              uint64_t v150 = 0;
              v148[2] = 0u;
              v148[3] = 0u;
              float32x4_t *v148 = 0u;
              v148[1] = 0u;
              unsigned int v151 = (_OWORD *)((char *)v148->f32 + v32);
              v151[2] = 0u;
              v151[3] = 0u;
              _OWORD *v151 = 0u;
              v151[1] = 0u;
            }
            uint64_t v163 = v147 + v150;
            uint64_t v164 = v83 + 6 * a11;
            unsigned int v165 = v82[5];
            if (v165 == 127)
            {
              long long v170 = *(_OWORD *)(v163 + 16);
              long long v171 = *(_OWORD *)(v163 + 32);
              long long v172 = *(_OWORD *)(v163 + 48);
              long long v173 = *(_OWORD *)(v163 + 64);
              long long v174 = *(_OWORD *)(v163 + 80);
              long long v175 = *(_OWORD *)(v163 + 96);
              long long v176 = *(_OWORD *)(v163 + 112);
              *(_OWORD *)uint64_t v164 = *(_OWORD *)v163;
              *(_OWORD *)(v164 + 16) = v170;
              unsigned int v177 = (_OWORD *)(v164 + v32);
              *(_OWORD *)(v164 + 32) = v173;
              *(_OWORD *)(v164 + 48) = v174;
              *unsigned int v177 = v171;
              v177[1] = v172;
              uint64_t v178 = (_OWORD *)(v164 + v32 + 32);
              _OWORD *v178 = v175;
              v178[1] = v176;
              uint64_t v166 = 128;
            }
            else if (v165 == 3)
            {
              float32x4_t v168 = vld1q_dup_f32((const float *)v163);
              *(float32x4_t *)uint64_t v164 = v168;
              *(float32x4_t *)(v164 + 16) = v168;
              *(float32x4_t *)(v164 + 32) = v168;
              *(float32x4_t *)(v164 + 48) = v168;
              uint64_t v169 = (float32x4_t *)(v164 + v32);
              *uint64_t v169 = v168;
              v169[1] = v168;
              v169[2] = v168;
              v169[3] = v168;
              uint64_t v166 = 4;
            }
            else if (v82[5])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v164, v32, v163, v165);
            }
            else
            {
              uint64_t v166 = 0;
              *(_OWORD *)(v164 + 32) = 0u;
              *(_OWORD *)(v164 + 48) = 0u;
              *(_OWORD *)uint64_t v164 = 0u;
              *(_OWORD *)(v164 + 16) = 0u;
              uint64_t v167 = (_OWORD *)(v164 + v32);
              v167[2] = 0u;
              v167[3] = 0u;
              _OWORD *v167 = 0u;
              v167[1] = 0u;
            }
            uint64_t v179 = v163 + v166;
            uint64_t v180 = (int8x16_t *)&v148[4];
            unsigned int v181 = v82[6];
            if (v181 == 127)
            {
              float32x4_t v186 = *(float32x4_t *)(v179 + 16);
              long long v187 = *(_OWORD *)(v179 + 32);
              long long v188 = *(_OWORD *)(v179 + 48);
              float32x4_t v189 = *(float32x4_t *)(v179 + 64);
              float32x4_t v190 = *(float32x4_t *)(v179 + 80);
              long long v191 = *(_OWORD *)(v179 + 96);
              long long v192 = *(_OWORD *)(v179 + 112);
              *uint64_t v180 = *(int8x16_t *)v179;
              v148[5] = v186;
              int8x16_t v193 = &v180->i8[v32];
              v148[6] = v189;
              v148[7] = v190;
              *(_OWORD *)int8x16_t v193 = v187;
              *((_OWORD *)v193 + 1) = v188;
              v193 += 32;
              *(_OWORD *)int8x16_t v193 = v191;
              *((_OWORD *)v193 + 1) = v192;
              uint64_t v182 = 128;
            }
            else if (v181 == 3)
            {
              float32x4_t v184 = vld1q_dup_f32((const float *)v179);
              long long v148[4] = v184;
              v148[5] = v184;
              v148[6] = v184;
              v148[7] = v184;
              uint64_t v185 = (float32x4_t *)&v180->i8[v32];
              *uint64_t v185 = v184;
              v185[1] = v184;
              v185[2] = v184;
              v185[3] = v184;
              uint64_t v182 = 4;
            }
            else if (v82[6])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v32, v179, v181);
            }
            else
            {
              uint64_t v182 = 0;
              v148[6] = 0u;
              v148[7] = 0u;
              *uint64_t v180 = 0u;
              v148[5] = 0u;
              uint64_t v183 = &v180->i8[v32];
              *((_OWORD *)v183 + 2) = 0u;
              *((_OWORD *)v183 + 3) = 0u;
              *(_OWORD *)uint64_t v183 = 0u;
              *((_OWORD *)v183 + 1) = 0u;
            }
            uint64_t v194 = v179 + v182;
            uint64_t v195 = (int8x16_t *)(v164 + 64);
            unsigned int v196 = v82[7];
            if (v196 == 127)
            {
              long long v200 = *(_OWORD *)(v194 + 16);
              long long v201 = *(_OWORD *)(v194 + 32);
              long long v202 = *(_OWORD *)(v194 + 48);
              long long v203 = *(_OWORD *)(v194 + 64);
              long long v204 = *(_OWORD *)(v194 + 80);
              long long v205 = *(_OWORD *)(v194 + 96);
              long long v206 = *(_OWORD *)(v194 + 112);
              *uint64_t v195 = *(int8x16_t *)v194;
              *(_OWORD *)(v164 + 80) = v200;
              int8x16_t v207 = &v195->i8[v32];
              *(_OWORD *)(v164 + 96) = v203;
              *(_OWORD *)(v164 + 112) = v204;
              *(_OWORD *)int8x16_t v207 = v201;
              *((_OWORD *)v207 + 1) = v202;
              v207 += 32;
              *(_OWORD *)int8x16_t v207 = v205;
              *((_OWORD *)v207 + 1) = v206;
              unsigned int v40 = a7;
              uint64_t v15 = v322;
            }
            else
            {
              uint64_t v15 = v322;
              if (v196 == 3)
              {
                float32x4_t v198 = vld1q_dup_f32((const float *)v194);
                *(float32x4_t *)(v164 + 64) = v198;
                *(float32x4_t *)(v164 + 80) = v198;
                *(float32x4_t *)(v164 + 96) = v198;
                *(float32x4_t *)(v164 + 112) = v198;
                uint64_t v199 = (float32x4_t *)&v195->i8[v32];
                *uint64_t v199 = v198;
                v199[1] = v198;
                v199[2] = v198;
                v199[3] = v198;
              }
              else if (v196)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v195, v32, v194, v196);
              }
              else
              {
                *(_OWORD *)(v164 + 96) = 0u;
                *(_OWORD *)(v164 + 112) = 0u;
                *uint64_t v195 = 0u;
                *(_OWORD *)(v164 + 80) = 0u;
                uint64_t v197 = &v195->i8[v32];
                *((_OWORD *)v197 + 2) = 0u;
                *((_OWORD *)v197 + 3) = 0u;
                *(_OWORD *)uint64_t v197 = 0u;
                *((_OWORD *)v197 + 1) = 0u;
              }
              unsigned int v40 = a7;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v322;
          block[5] = v78;
          char v333 = v46;
          char v334 = v325;
          unsigned int v329 = v311;
          unsigned int v330 = v44 - v42;
          block[6] = v82;
          uint64_t v327 = v83;
          uint64_t v32 = a11;
          uint64_t v328 = a11;
          unsigned int v331 = v319;
          unsigned int v332 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v322 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v322;
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v88 = *v82;
          if (v88 == 127)
          {
            float32x4_t v208 = *((float32x4_t *)v78 + 1);
            float32x4_t v209 = *((float32x4_t *)v78 + 2);
            float32x4_t v210 = *((float32x4_t *)v78 + 3);
            float32x4_t v211 = *((float32x4_t *)v78 + 4);
            float32x4_t v212 = *((float32x4_t *)v78 + 5);
            float32x4_t v213 = *((float32x4_t *)v78 + 6);
            float32x4_t v214 = *((float32x4_t *)v78 + 7);
            int8x16_t v336 = *(int8x16_t *)v78;
            float32x4_t v337 = v208;
            float32x4_t v338 = v211;
            float32x4_t v339 = v212;
            float32x4_t v344 = v209;
            float32x4_t v345 = v210;
            float32x4_t v346 = v213;
            float32x4_t v347 = v214;
            uint64_t v89 = 128;
          }
          else if (v88 == 3)
          {
            float32x4_t v215 = vld1q_dup_f32((const float *)v78);
            int8x16_t v336 = (int8x16_t)v215;
            float32x4_t v337 = v215;
            float32x4_t v338 = v215;
            float32x4_t v339 = v215;
            float32x4_t v344 = v215;
            float32x4_t v345 = v215;
            float32x4_t v346 = v215;
            float32x4_t v347 = v215;
            uint64_t v89 = 4;
          }
          else if (*v82)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v336, 128, (uint64_t)v78, v88);
          }
          else
          {
            uint64_t v89 = 0;
            float32x4_t v339 = 0u;
            float32x4_t v338 = 0u;
            float32x4_t v337 = 0u;
            int8x16_t v336 = 0u;
            float32x4_t v344 = 0u;
            float32x4_t v345 = 0u;
            float32x4_t v346 = 0u;
            float32x4_t v347 = 0u;
          }
          uint64_t v216 = (uint64_t)&v78[v89];
          unsigned int v217 = v82[1];
          if (v217 == 127)
          {
            float32x4_t v219 = *(float32x4_t *)(v216 + 16);
            float32x4_t v220 = *(float32x4_t *)(v216 + 32);
            float32x4_t v221 = *(float32x4_t *)(v216 + 48);
            float32x4_t v222 = *(float32x4_t *)(v216 + 64);
            float32x4_t v223 = *(float32x4_t *)(v216 + 80);
            float32x4_t v224 = *(float32x4_t *)(v216 + 96);
            float32x4_t v225 = *(float32x4_t *)(v216 + 112);
            int8x16_t v352 = *(int8x16_t *)v216;
            float32x4_t v353 = v219;
            float32x4_t v354 = v222;
            float32x4_t v355 = v223;
            float32x4_t v360 = v220;
            float32x4_t v361 = v221;
            float32x4_t v362 = v224;
            float32x4_t v363 = v225;
            uint64_t v218 = 128;
          }
          else if (v217 == 3)
          {
            float32x4_t v226 = vld1q_dup_f32((const float *)v216);
            int8x16_t v352 = (int8x16_t)v226;
            float32x4_t v353 = v226;
            float32x4_t v354 = v226;
            float32x4_t v355 = v226;
            float32x4_t v360 = v226;
            float32x4_t v361 = v226;
            float32x4_t v362 = v226;
            float32x4_t v363 = v226;
            uint64_t v218 = 4;
          }
          else if (v82[1])
          {
            uint64_t v218 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v352, 128, v216, v217);
          }
          else
          {
            uint64_t v218 = 0;
            float32x4_t v354 = 0u;
            float32x4_t v355 = 0u;
            int8x16_t v352 = 0u;
            float32x4_t v353 = 0u;
            float32x4_t v360 = 0u;
            float32x4_t v361 = 0u;
            float32x4_t v362 = 0u;
            float32x4_t v363 = 0u;
          }
          uint64_t v227 = v216 + v218;
          unsigned int v228 = v82[2];
          if (v228 == 127)
          {
            float32x4_t v230 = *(float32x4_t *)(v227 + 16);
            float32x4_t v231 = *(float32x4_t *)(v227 + 32);
            float32x4_t v232 = *(float32x4_t *)(v227 + 48);
            float32x4_t v233 = *(float32x4_t *)(v227 + 64);
            float32x4_t v234 = *(float32x4_t *)(v227 + 80);
            float32x4_t v235 = *(float32x4_t *)(v227 + 96);
            float32x4_t v236 = *(float32x4_t *)(v227 + 112);
            int8x16_t v340 = *(int8x16_t *)v227;
            float32x4_t v341 = v230;
            float32x4_t v342 = v233;
            float32x4_t v343 = v234;
            float32x4_t v348 = v231;
            float32x4_t v349 = v232;
            float32x4_t v350 = v235;
            float32x4_t v351 = v236;
            uint64_t v229 = 128;
          }
          else if (v228 == 3)
          {
            float32x4_t v237 = vld1q_dup_f32((const float *)v227);
            int8x16_t v340 = (int8x16_t)v237;
            float32x4_t v341 = v237;
            float32x4_t v342 = v237;
            float32x4_t v343 = v237;
            float32x4_t v348 = v237;
            float32x4_t v349 = v237;
            float32x4_t v350 = v237;
            float32x4_t v351 = v237;
            uint64_t v229 = 4;
          }
          else if (v82[2])
          {
            uint64_t v229 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v340, 128, v227, v228);
          }
          else
          {
            uint64_t v229 = 0;
            float32x4_t v342 = 0u;
            float32x4_t v343 = 0u;
            int8x16_t v340 = 0u;
            float32x4_t v341 = 0u;
            float32x4_t v348 = 0u;
            float32x4_t v349 = 0u;
            float32x4_t v350 = 0u;
            float32x4_t v351 = 0u;
          }
          uint64_t v238 = v227 + v229;
          unsigned int v239 = v82[3];
          if (v239 == 127)
          {
            float32x4_t v241 = *(float32x4_t *)(v238 + 16);
            float32x4_t v242 = *(float32x4_t *)(v238 + 32);
            float32x4_t v243 = *(float32x4_t *)(v238 + 48);
            float32x4_t v244 = *(float32x4_t *)(v238 + 64);
            float32x4_t v245 = *(float32x4_t *)(v238 + 80);
            float32x4_t v246 = *(float32x4_t *)(v238 + 96);
            float32x4_t v247 = *(float32x4_t *)(v238 + 112);
            int8x16_t v356 = *(int8x16_t *)v238;
            float32x4_t v357 = v241;
            float32x4_t v358 = v244;
            float32x4_t v359 = v245;
            float32x4_t v364 = v242;
            float32x4_t v365 = v243;
            float32x4_t v366 = v246;
            float32x4_t v367 = v247;
            uint64_t v240 = 128;
          }
          else if (v239 == 3)
          {
            float32x4_t v248 = vld1q_dup_f32((const float *)v238);
            int8x16_t v356 = (int8x16_t)v248;
            float32x4_t v357 = v248;
            float32x4_t v358 = v248;
            float32x4_t v359 = v248;
            float32x4_t v364 = v248;
            float32x4_t v365 = v248;
            float32x4_t v366 = v248;
            float32x4_t v367 = v248;
            uint64_t v240 = 4;
          }
          else if (v82[3])
          {
            uint64_t v240 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v356, 128, v238, v239);
          }
          else
          {
            uint64_t v240 = 0;
            float32x4_t v358 = 0u;
            float32x4_t v359 = 0u;
            int8x16_t v356 = 0u;
            float32x4_t v357 = 0u;
            float32x4_t v364 = 0u;
            float32x4_t v365 = 0u;
            float32x4_t v366 = 0u;
            float32x4_t v367 = 0u;
          }
          uint64_t v249 = v238 + v240;
          unsigned int v250 = v82[4];
          if (v250 == 127)
          {
            float32x4_t v252 = *(float32x4_t *)(v249 + 16);
            float32x4_t v253 = *(float32x4_t *)(v249 + 32);
            float32x4_t v254 = *(float32x4_t *)(v249 + 48);
            float32x4_t v255 = *(float32x4_t *)(v249 + 64);
            float32x4_t v256 = *(float32x4_t *)(v249 + 80);
            float32x4_t v257 = *(float32x4_t *)(v249 + 96);
            float32x4_t v258 = *(float32x4_t *)(v249 + 112);
            int8x16_t v368 = *(int8x16_t *)v249;
            float32x4_t v369 = v252;
            float32x4_t v370 = v255;
            float32x4_t v371 = v256;
            float32x4_t v376 = v253;
            float32x4_t v377 = v254;
            float32x4_t v378 = v257;
            float32x4_t v379 = v258;
            uint64_t v251 = 128;
          }
          else if (v250 == 3)
          {
            float32x4_t v259 = vld1q_dup_f32((const float *)v249);
            int8x16_t v368 = (int8x16_t)v259;
            float32x4_t v369 = v259;
            float32x4_t v370 = v259;
            float32x4_t v371 = v259;
            float32x4_t v376 = v259;
            float32x4_t v377 = v259;
            float32x4_t v378 = v259;
            float32x4_t v379 = v259;
            uint64_t v251 = 4;
          }
          else if (v82[4])
          {
            uint64_t v251 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v368, 128, v249, v250);
          }
          else
          {
            uint64_t v251 = 0;
            float32x4_t v370 = 0u;
            float32x4_t v371 = 0u;
            int8x16_t v368 = 0u;
            float32x4_t v369 = 0u;
            float32x4_t v376 = 0u;
            float32x4_t v377 = 0u;
            float32x4_t v378 = 0u;
            float32x4_t v379 = 0u;
          }
          uint64_t v260 = v249 + v251;
          unsigned int v261 = v82[5];
          if (v261 == 127)
          {
            float32x4_t v263 = *(float32x4_t *)(v260 + 16);
            float32x4_t v264 = *(float32x4_t *)(v260 + 32);
            float32x4_t v265 = *(float32x4_t *)(v260 + 48);
            float32x4_t v266 = *(float32x4_t *)(v260 + 64);
            float32x4_t v267 = *(float32x4_t *)(v260 + 80);
            float32x4_t v268 = *(float32x4_t *)(v260 + 96);
            float32x4_t v269 = *(float32x4_t *)(v260 + 112);
            int8x16_t v384 = *(int8x16_t *)v260;
            float32x4_t v385 = v263;
            float32x4_t v386 = v266;
            float32x4_t v387 = v267;
            float32x4_t v392 = v264;
            float32x4_t v393 = v265;
            float32x4_t v394 = v268;
            float32x4_t v395 = v269;
            uint64_t v262 = 128;
          }
          else if (v261 == 3)
          {
            float32x4_t v270 = vld1q_dup_f32((const float *)v260);
            int8x16_t v384 = (int8x16_t)v270;
            float32x4_t v385 = v270;
            float32x4_t v386 = v270;
            float32x4_t v387 = v270;
            float32x4_t v392 = v270;
            float32x4_t v393 = v270;
            float32x4_t v394 = v270;
            float32x4_t v395 = v270;
            uint64_t v262 = 4;
          }
          else if (v82[5])
          {
            uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v384, 128, v260, v261);
          }
          else
          {
            uint64_t v262 = 0;
            float32x4_t v386 = 0u;
            float32x4_t v387 = 0u;
            int8x16_t v384 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v395 = 0u;
          }
          uint64_t v271 = v260 + v262;
          unsigned int v272 = v82[6];
          if (v272 == 127)
          {
            float32x4_t v274 = *(float32x4_t *)(v271 + 16);
            float32x4_t v275 = *(float32x4_t *)(v271 + 32);
            float32x4_t v276 = *(float32x4_t *)(v271 + 48);
            float32x4_t v277 = *(float32x4_t *)(v271 + 64);
            float32x4_t v278 = *(float32x4_t *)(v271 + 80);
            float32x4_t v279 = *(float32x4_t *)(v271 + 96);
            float32x4_t v280 = *(float32x4_t *)(v271 + 112);
            int8x16_t v372 = *(int8x16_t *)v271;
            float32x4_t v373 = v274;
            float32x4_t v374 = v277;
            float32x4_t v375 = v278;
            float32x4_t v380 = v275;
            float32x4_t v381 = v276;
            float32x4_t v382 = v279;
            float32x4_t v383 = v280;
            uint64_t v273 = 128;
          }
          else if (v272 == 3)
          {
            float32x4_t v281 = vld1q_dup_f32((const float *)v271);
            int8x16_t v372 = (int8x16_t)v281;
            float32x4_t v373 = v281;
            float32x4_t v374 = v281;
            float32x4_t v375 = v281;
            float32x4_t v380 = v281;
            float32x4_t v381 = v281;
            float32x4_t v382 = v281;
            float32x4_t v383 = v281;
            uint64_t v273 = 4;
          }
          else if (v82[6])
          {
            uint64_t v273 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v372, 128, v271, v272);
          }
          else
          {
            uint64_t v273 = 0;
            float32x4_t v374 = 0u;
            float32x4_t v375 = 0u;
            int8x16_t v372 = 0u;
            float32x4_t v373 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v383 = 0u;
          }
          uint64_t v282 = v271 + v273;
          unsigned int v283 = v82[7];
          if (v283 == 127)
          {
            float32x4_t v284 = *(float32x4_t *)(v282 + 16);
            float32x4_t v285 = *(float32x4_t *)(v282 + 32);
            float32x4_t v286 = *(float32x4_t *)(v282 + 48);
            float32x4_t v287 = *(float32x4_t *)(v282 + 64);
            float32x4_t v288 = *(float32x4_t *)(v282 + 80);
            float32x4_t v289 = *(float32x4_t *)(v282 + 96);
            float32x4_t v290 = *(float32x4_t *)(v282 + 112);
            int8x16_t v388 = *(int8x16_t *)v282;
            float32x4_t v389 = v284;
            float32x4_t v390 = v287;
            float32x4_t v391 = v288;
            float32x4_t v396 = v285;
            float32x4_t v397 = v286;
            float32x4_t v398 = v289;
            float32x4_t v399 = v290;
            unsigned int v40 = a7;
            uint64_t v15 = v322;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v322;
            if (v283 == 3)
            {
              float32x4_t v291 = vld1q_dup_f32((const float *)v282);
              int8x16_t v388 = (int8x16_t)v291;
              float32x4_t v389 = v291;
              float32x4_t v390 = v291;
              float32x4_t v391 = v291;
              float32x4_t v396 = v291;
              float32x4_t v397 = v291;
              float32x4_t v398 = v291;
              float32x4_t v399 = v291;
            }
            else if (v283)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v388, 128, v282, v283);
            }
            else
            {
              float32x4_t v390 = 0u;
              float32x4_t v391 = 0u;
              int8x16_t v388 = 0u;
              float32x4_t v389 = 0u;
              float32x4_t v396 = 0u;
              float32x4_t v397 = 0u;
              float32x4_t v398 = 0u;
              float32x4_t v399 = 0u;
            }
          }
          unint64_t v292 = v331;
          unsigned int v41 = v37 + 1;
          if (v331)
          {
            unint64_t v293 = 0;
            uint64_t v294 = &v336 + 8 * (unint64_t)v329 + v330;
            unsigned int v295 = v332;
            do
            {
              if (v295)
              {
                uint64_t v296 = 0;
                uint64_t v297 = v327 + v328 * v293;
                do
                {
                  *(unsigned char *)(v297 + v296) = v294->i8[v296];
                  ++v296;
                  unsigned int v295 = v332;
                }
                while (16 * (unint64_t)v332 > v296);
                unint64_t v292 = v331;
              }
              ++v293;
              v294 += 8;
            }
            while (v293 < v292);
          }
LABEL_48:
          BOOL v20 = v37 == v313 >> 3;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v302;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v400 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v321 = a8;
  unsigned int v303 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v302 = v303 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v315 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v314 = 0;
LABEL_32:
      unsigned int v312 = v25 - 3;
      unsigned int v307 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v300 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v314 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v314 = 0;
  unsigned int v300 = 0;
  unsigned int v307 = 0;
  unsigned int v312 = 0;
LABEL_33:
  if (v19 <= v302)
  {
    unsigned int v313 = a7 + a9 - 1;
    if (a7 >> 3 <= v313 >> 3)
    {
      uint64_t v32 = a11;
      unsigned int v324 = v17 >> 3;
      unsigned int v299 = v18 >> 3;
      int v323 = (v17 & 7) + 1;
      int v298 = (v18 & 7) + 1;
      uint64_t v309 = 4 * a11;
      uint64_t v310 = 2 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v33));
      __int32 v308 = v34.i32[0] | v34.i32[1];
      BOOL v305 = v34.i32[1] != 0;
      int8x8_t v306 = v34;
      BOOL v304 = v34.i32[0] != 0;
      uint64_t v322 = v15;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v321) {
          int v36 = v321;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v303 < v35) {
          unsigned int v35 = v303;
        }
        int v311 = v36 - 8 * v19;
        int v319 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 3;
        int v38 = v298;
        if (v19 != v299) {
          int v38 = 8;
        }
        unsigned int v325 = v38;
        uint64_t v39 = v19 & ~(-1 << v307);
        uint64_t v318 = a2 + (v36 - v321) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 8 * v37;
          unsigned int v43 = 8 * (v37 + 1) - 1;
          if (8 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 8 * v37;
          }
          if (v313 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v324) {
            unsigned int v46 = v323;
          }
          else {
            unsigned int v46 = 8;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v321 && v42 >= v40)
          {
            int v48 = v323;
            if (v37 != v324) {
              int v48 = 8;
            }
            BOOL v47 = v45 != v48 || v319 != v325;
          }
          if (v314)
          {
            if (v312 | v307)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v312 != 0;
              BOOL v54 = v307 != 0;
              unsigned int v55 = v312;
              unsigned int v56 = v307;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v312) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v312) + (v19 >> v307) * v300) + (v51 << 10);
          }
          else
          {
            if (v308)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v305;
              BOOL v61 = v304;
              __int32 v62 = v306.i32[1];
              __int32 v63 = v306.i32[0];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          uint64_t v78 = (unsigned char *)(a3 + v64);
          if (v315)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            uint64_t v78 = __dst;
          }
          uint64_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v318 + 16 * (v44 - v40);
          char v84 = v46 < 8 || v47;
          if ((v84 & 1) == 0 && v325 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v92 = *((_OWORD *)v78 + 1);
              long long v93 = *((_OWORD *)v78 + 2);
              long long v94 = *((_OWORD *)v78 + 3);
              long long v95 = *((_OWORD *)v78 + 4);
              long long v96 = *((_OWORD *)v78 + 5);
              long long v97 = *((_OWORD *)v78 + 6);
              long long v98 = *((_OWORD *)v78 + 7);
              uint64_t v32 = a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v92;
              uint64_t v99 = (_OWORD *)(v83 + a11);
              *(_OWORD *)(v83 + 32) = v95;
              *(_OWORD *)(v83 + 48) = v96;
              *uint64_t v99 = v93;
              v99[1] = v94;
              int v100 = (_OWORD *)(v83 + a11 + 32);
              _OWORD *v100 = v97;
              v100[1] = v98;
              uint64_t v86 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              if (v85 == 3)
              {
                float32x4_t v90 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v90;
                *(float32x4_t *)(v83 + 16) = v90;
                *(float32x4_t *)(v83 + 32) = v90;
                *(float32x4_t *)(v83 + 48) = v90;
                unsigned int v91 = (float32x4_t *)(v83 + a11);
                *unsigned int v91 = v90;
                v91[1] = v90;
                v91[2] = v90;
                v91[3] = v90;
                uint64_t v86 = 4;
              }
              else if (*v82)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v86 = 0;
                *(_OWORD *)(v83 + 32) = 0u;
                *(_OWORD *)(v83 + 48) = 0u;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v87 = (_OWORD *)(v83 + a11);
                v87[2] = 0u;
                v87[3] = 0u;
                _OWORD *v87 = 0u;
                v87[1] = 0u;
              }
            }
            uint64_t v101 = (uint64_t)&v78[v86];
            BOOL v102 = (float32x4_t *)(v83 + v310);
            unsigned int v103 = v82[1];
            if (v103 == 127)
            {
              float32x4_t v108 = *(float32x4_t *)(v101 + 16);
              long long v109 = *(_OWORD *)(v101 + 32);
              long long v110 = *(_OWORD *)(v101 + 48);
              float32x4_t v111 = *(float32x4_t *)(v101 + 64);
              float32x4_t v112 = *(float32x4_t *)(v101 + 80);
              long long v113 = *(_OWORD *)(v101 + 96);
              long long v114 = *(_OWORD *)(v101 + 112);
              float32x4_t *v102 = *(float32x4_t *)v101;
              v102[1] = v108;
              int v115 = (_OWORD *)((char *)v102->f32 + v32);
              v102[2] = v111;
              v102[3] = v112;
              _OWORD *v115 = v109;
              v115[1] = v110;
              BOOL v116 = (_OWORD *)((char *)v102[2].f32 + v32);
              _OWORD *v116 = v113;
              v116[1] = v114;
              uint64_t v104 = 128;
            }
            else if (v103 == 3)
            {
              float32x4_t v106 = vld1q_dup_f32((const float *)v101);
              float32x4_t *v102 = v106;
              v102[1] = v106;
              v102[2] = v106;
              v102[3] = v106;
              int v107 = (float32x4_t *)((char *)v102 + v32);
              float32x4_t *v107 = v106;
              v107[1] = v106;
              v107[2] = v106;
              v107[3] = v106;
              uint64_t v104 = 4;
            }
            else if (v82[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v310), v32, v101, v103);
            }
            else
            {
              uint64_t v104 = 0;
              v102[2] = 0u;
              v102[3] = 0u;
              float32x4_t *v102 = 0u;
              v102[1] = 0u;
              unint64_t v105 = (_OWORD *)((char *)v102->f32 + v32);
              v105[2] = 0u;
              v105[3] = 0u;
              _OWORD *v105 = 0u;
              v105[1] = 0u;
            }
            uint64_t v117 = v101 + v104;
            int8x8_t v118 = (int8x16_t *)(v83 + 64);
            unsigned int v119 = v82[2];
            if (v119 == 127)
            {
              long long v124 = *(_OWORD *)(v117 + 16);
              long long v125 = *(_OWORD *)(v117 + 32);
              long long v126 = *(_OWORD *)(v117 + 48);
              long long v127 = *(_OWORD *)(v117 + 64);
              long long v128 = *(_OWORD *)(v117 + 80);
              long long v129 = *(_OWORD *)(v117 + 96);
              long long v130 = *(_OWORD *)(v117 + 112);
              int8x16_t *v118 = *(int8x16_t *)v117;
              *(_OWORD *)(v83 + 80) = v124;
              unsigned int v131 = &v118->i8[v32];
              *(_OWORD *)(v83 + 96) = v127;
              *(_OWORD *)(v83 + 112) = v128;
              *(_OWORD *)unsigned int v131 = v125;
              *((_OWORD *)v131 + 1) = v126;
              v131 += 32;
              *(_OWORD *)unsigned int v131 = v129;
              *((_OWORD *)v131 + 1) = v130;
              uint64_t v120 = 128;
            }
            else if (v119 == 3)
            {
              float32x4_t v122 = vld1q_dup_f32((const float *)v117);
              *(float32x4_t *)(v83 + 64) = v122;
              *(float32x4_t *)(v83 + 80) = v122;
              *(float32x4_t *)(v83 + 96) = v122;
              *(float32x4_t *)(v83 + 112) = v122;
              uint64_t v123 = (float32x4_t *)&v118->i8[v32];
              *uint64_t v123 = v122;
              v123[1] = v122;
              v123[2] = v122;
              v123[3] = v122;
              uint64_t v120 = 4;
            }
            else if (v82[2])
            {
              uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v118, v32, v117, v119);
            }
            else
            {
              uint64_t v120 = 0;
              *(_OWORD *)(v83 + 96) = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int8x16_t *v118 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v121 = &v118->i8[v32];
              *((_OWORD *)v121 + 2) = 0u;
              *((_OWORD *)v121 + 3) = 0u;
              *(_OWORD *)unsigned int v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
            }
            uint64_t v132 = v117 + v120;
            uint64_t v133 = (int8x16_t *)&v102[4];
            unsigned int v134 = v82[3];
            if (v134 == 127)
            {
              float32x4_t v139 = *(float32x4_t *)(v132 + 16);
              long long v140 = *(_OWORD *)(v132 + 32);
              long long v141 = *(_OWORD *)(v132 + 48);
              float32x4_t v142 = *(float32x4_t *)(v132 + 64);
              float32x4_t v143 = *(float32x4_t *)(v132 + 80);
              long long v144 = *(_OWORD *)(v132 + 96);
              long long v145 = *(_OWORD *)(v132 + 112);
              *uint64_t v133 = *(int8x16_t *)v132;
              v102[5] = v139;
              uint64_t v146 = &v133->i8[v32];
              v102[6] = v142;
              v102[7] = v143;
              *(_OWORD *)uint64_t v146 = v140;
              *((_OWORD *)v146 + 1) = v141;
              v146 += 32;
              *(_OWORD *)uint64_t v146 = v144;
              *((_OWORD *)v146 + 1) = v145;
              uint64_t v135 = 128;
            }
            else if (v134 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v132);
              v102[4] = v137;
              v102[5] = v137;
              v102[6] = v137;
              v102[7] = v137;
              unsigned int v138 = (float32x4_t *)&v133->i8[v32];
              float32x4_t *v138 = v137;
              v138[1] = v137;
              v138[2] = v137;
              v138[3] = v137;
              uint64_t v135 = 4;
            }
            else if (v82[3])
            {
              uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, v32, v132, v134);
            }
            else
            {
              uint64_t v135 = 0;
              v102[6] = 0u;
              v102[7] = 0u;
              *uint64_t v133 = 0u;
              v102[5] = 0u;
              unsigned int v136 = &v133->i8[v32];
              *((_OWORD *)v136 + 2) = 0u;
              *((_OWORD *)v136 + 3) = 0u;
              *(_OWORD *)unsigned int v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v147 = v132 + v135;
            uint64_t v148 = (float32x4_t *)(v83 + v309);
            unsigned int v149 = v82[4];
            if (v149 == 127)
            {
              float32x4_t v154 = *(float32x4_t *)(v147 + 16);
              long long v155 = *(_OWORD *)(v147 + 32);
              long long v156 = *(_OWORD *)(v147 + 48);
              float32x4_t v157 = *(float32x4_t *)(v147 + 64);
              float32x4_t v158 = *(float32x4_t *)(v147 + 80);
              long long v159 = *(_OWORD *)(v147 + 96);
              long long v160 = *(_OWORD *)(v147 + 112);
              float32x4_t *v148 = *(float32x4_t *)v147;
              v148[1] = v154;
              uint64_t v161 = (_OWORD *)((char *)v148->f32 + v32);
              v148[2] = v157;
              v148[3] = v158;
              *uint64_t v161 = v155;
              v161[1] = v156;
              uint64_t v162 = (_OWORD *)((char *)v148[2].f32 + v32);
              *uint64_t v162 = v159;
              v162[1] = v160;
              uint64_t v150 = 128;
            }
            else if (v149 == 3)
            {
              float32x4_t v152 = vld1q_dup_f32((const float *)v147);
              float32x4_t *v148 = v152;
              v148[1] = v152;
              v148[2] = v152;
              v148[3] = v152;
              uint64_t v153 = (float32x4_t *)((char *)v148 + v32);
              *uint64_t v153 = v152;
              v153[1] = v152;
              v153[2] = v152;
              v153[3] = v152;
              uint64_t v150 = 4;
            }
            else if (v82[4])
            {
              uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v309), v32, v147, v149);
            }
            else
            {
              uint64_t v150 = 0;
              v148[2] = 0u;
              v148[3] = 0u;
              float32x4_t *v148 = 0u;
              v148[1] = 0u;
              unsigned int v151 = (_OWORD *)((char *)v148->f32 + v32);
              v151[2] = 0u;
              v151[3] = 0u;
              _OWORD *v151 = 0u;
              v151[1] = 0u;
            }
            uint64_t v163 = v147 + v150;
            uint64_t v164 = v83 + 6 * a11;
            unsigned int v165 = v82[5];
            if (v165 == 127)
            {
              long long v170 = *(_OWORD *)(v163 + 16);
              long long v171 = *(_OWORD *)(v163 + 32);
              long long v172 = *(_OWORD *)(v163 + 48);
              long long v173 = *(_OWORD *)(v163 + 64);
              long long v174 = *(_OWORD *)(v163 + 80);
              long long v175 = *(_OWORD *)(v163 + 96);
              long long v176 = *(_OWORD *)(v163 + 112);
              *(_OWORD *)uint64_t v164 = *(_OWORD *)v163;
              *(_OWORD *)(v164 + 16) = v170;
              unsigned int v177 = (_OWORD *)(v164 + v32);
              *(_OWORD *)(v164 + 32) = v173;
              *(_OWORD *)(v164 + 48) = v174;
              *unsigned int v177 = v171;
              v177[1] = v172;
              uint64_t v178 = (_OWORD *)(v164 + v32 + 32);
              _OWORD *v178 = v175;
              v178[1] = v176;
              uint64_t v166 = 128;
            }
            else if (v165 == 3)
            {
              float32x4_t v168 = vld1q_dup_f32((const float *)v163);
              *(float32x4_t *)uint64_t v164 = v168;
              *(float32x4_t *)(v164 + 16) = v168;
              *(float32x4_t *)(v164 + 32) = v168;
              *(float32x4_t *)(v164 + 48) = v168;
              uint64_t v169 = (float32x4_t *)(v164 + v32);
              *uint64_t v169 = v168;
              v169[1] = v168;
              v169[2] = v168;
              v169[3] = v168;
              uint64_t v166 = 4;
            }
            else if (v82[5])
            {
              uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v164, v32, v163, v165);
            }
            else
            {
              uint64_t v166 = 0;
              *(_OWORD *)(v164 + 32) = 0u;
              *(_OWORD *)(v164 + 48) = 0u;
              *(_OWORD *)uint64_t v164 = 0u;
              *(_OWORD *)(v164 + 16) = 0u;
              uint64_t v167 = (_OWORD *)(v164 + v32);
              v167[2] = 0u;
              v167[3] = 0u;
              _OWORD *v167 = 0u;
              v167[1] = 0u;
            }
            uint64_t v179 = v163 + v166;
            uint64_t v180 = (int8x16_t *)&v148[4];
            unsigned int v181 = v82[6];
            if (v181 == 127)
            {
              float32x4_t v186 = *(float32x4_t *)(v179 + 16);
              long long v187 = *(_OWORD *)(v179 + 32);
              long long v188 = *(_OWORD *)(v179 + 48);
              float32x4_t v189 = *(float32x4_t *)(v179 + 64);
              float32x4_t v190 = *(float32x4_t *)(v179 + 80);
              long long v191 = *(_OWORD *)(v179 + 96);
              long long v192 = *(_OWORD *)(v179 + 112);
              *uint64_t v180 = *(int8x16_t *)v179;
              v148[5] = v186;
              int8x16_t v193 = &v180->i8[v32];
              v148[6] = v189;
              v148[7] = v190;
              *(_OWORD *)int8x16_t v193 = v187;
              *((_OWORD *)v193 + 1) = v188;
              v193 += 32;
              *(_OWORD *)int8x16_t v193 = v191;
              *((_OWORD *)v193 + 1) = v192;
              uint64_t v182 = 128;
            }
            else if (v181 == 3)
            {
              float32x4_t v184 = vld1q_dup_f32((const float *)v179);
              long long v148[4] = v184;
              v148[5] = v184;
              v148[6] = v184;
              v148[7] = v184;
              uint64_t v185 = (float32x4_t *)&v180->i8[v32];
              *uint64_t v185 = v184;
              v185[1] = v184;
              v185[2] = v184;
              v185[3] = v184;
              uint64_t v182 = 4;
            }
            else if (v82[6])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v180, v32, v179, v181);
            }
            else
            {
              uint64_t v182 = 0;
              v148[6] = 0u;
              v148[7] = 0u;
              *uint64_t v180 = 0u;
              v148[5] = 0u;
              uint64_t v183 = &v180->i8[v32];
              *((_OWORD *)v183 + 2) = 0u;
              *((_OWORD *)v183 + 3) = 0u;
              *(_OWORD *)uint64_t v183 = 0u;
              *((_OWORD *)v183 + 1) = 0u;
            }
            uint64_t v194 = v179 + v182;
            uint64_t v195 = (int8x16_t *)(v164 + 64);
            unsigned int v196 = v82[7];
            if (v196 == 127)
            {
              long long v200 = *(_OWORD *)(v194 + 16);
              long long v201 = *(_OWORD *)(v194 + 32);
              long long v202 = *(_OWORD *)(v194 + 48);
              long long v203 = *(_OWORD *)(v194 + 64);
              long long v204 = *(_OWORD *)(v194 + 80);
              long long v205 = *(_OWORD *)(v194 + 96);
              long long v206 = *(_OWORD *)(v194 + 112);
              *uint64_t v195 = *(int8x16_t *)v194;
              *(_OWORD *)(v164 + 80) = v200;
              int8x16_t v207 = &v195->i8[v32];
              *(_OWORD *)(v164 + 96) = v203;
              *(_OWORD *)(v164 + 112) = v204;
              *(_OWORD *)int8x16_t v207 = v201;
              *((_OWORD *)v207 + 1) = v202;
              v207 += 32;
              *(_OWORD *)int8x16_t v207 = v205;
              *((_OWORD *)v207 + 1) = v206;
              unsigned int v40 = a7;
              uint64_t v15 = v322;
            }
            else
            {
              uint64_t v15 = v322;
              if (v196 == 3)
              {
                float32x4_t v198 = vld1q_dup_f32((const float *)v194);
                *(float32x4_t *)(v164 + 64) = v198;
                *(float32x4_t *)(v164 + 80) = v198;
                *(float32x4_t *)(v164 + 96) = v198;
                *(float32x4_t *)(v164 + 112) = v198;
                uint64_t v199 = (float32x4_t *)&v195->i8[v32];
                *uint64_t v199 = v198;
                v199[1] = v198;
                v199[2] = v198;
                v199[3] = v198;
              }
              else if (v196)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v195, v32, v194, v196);
              }
              else
              {
                *(_OWORD *)(v164 + 96) = 0u;
                *(_OWORD *)(v164 + 112) = 0u;
                *uint64_t v195 = 0u;
                *(_OWORD *)(v164 + 80) = 0u;
                uint64_t v197 = &v195->i8[v32];
                *((_OWORD *)v197 + 2) = 0u;
                *((_OWORD *)v197 + 3) = 0u;
                *(_OWORD *)uint64_t v197 = 0u;
                *((_OWORD *)v197 + 1) = 0u;
              }
              unsigned int v40 = a7;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v322;
          block[5] = v78;
          char v333 = v46;
          char v334 = v325;
          unsigned int v329 = v311;
          unsigned int v330 = v44 - v42;
          block[6] = v82;
          uint64_t v327 = v83;
          uint64_t v32 = a11;
          uint64_t v328 = a11;
          unsigned int v331 = v319;
          unsigned int v332 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v322 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v322;
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v88 = *v82;
          if (v88 == 127)
          {
            float32x4_t v208 = *((float32x4_t *)v78 + 1);
            float32x4_t v209 = *((float32x4_t *)v78 + 2);
            float32x4_t v210 = *((float32x4_t *)v78 + 3);
            float32x4_t v211 = *((float32x4_t *)v78 + 4);
            float32x4_t v212 = *((float32x4_t *)v78 + 5);
            float32x4_t v213 = *((float32x4_t *)v78 + 6);
            float32x4_t v214 = *((float32x4_t *)v78 + 7);
            int8x16_t v336 = *(int8x16_t *)v78;
            float32x4_t v337 = v208;
            float32x4_t v338 = v211;
            float32x4_t v339 = v212;
            float32x4_t v344 = v209;
            float32x4_t v345 = v210;
            float32x4_t v346 = v213;
            float32x4_t v347 = v214;
            uint64_t v89 = 128;
          }
          else if (v88 == 3)
          {
            float32x4_t v215 = vld1q_dup_f32((const float *)v78);
            int8x16_t v336 = (int8x16_t)v215;
            float32x4_t v337 = v215;
            float32x4_t v338 = v215;
            float32x4_t v339 = v215;
            float32x4_t v344 = v215;
            float32x4_t v345 = v215;
            float32x4_t v346 = v215;
            float32x4_t v347 = v215;
            uint64_t v89 = 4;
          }
          else if (*v82)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v336, 128, (uint64_t)v78, v88);
          }
          else
          {
            uint64_t v89 = 0;
            float32x4_t v339 = 0u;
            float32x4_t v338 = 0u;
            float32x4_t v337 = 0u;
            int8x16_t v336 = 0u;
            float32x4_t v344 = 0u;
            float32x4_t v345 = 0u;
            float32x4_t v346 = 0u;
            float32x4_t v347 = 0u;
          }
          uint64_t v216 = (uint64_t)&v78[v89];
          unsigned int v217 = v82[1];
          if (v217 == 127)
          {
            float32x4_t v219 = *(float32x4_t *)(v216 + 16);
            float32x4_t v220 = *(float32x4_t *)(v216 + 32);
            float32x4_t v221 = *(float32x4_t *)(v216 + 48);
            float32x4_t v222 = *(float32x4_t *)(v216 + 64);
            float32x4_t v223 = *(float32x4_t *)(v216 + 80);
            float32x4_t v224 = *(float32x4_t *)(v216 + 96);
            float32x4_t v225 = *(float32x4_t *)(v216 + 112);
            int8x16_t v352 = *(int8x16_t *)v216;
            float32x4_t v353 = v219;
            float32x4_t v354 = v222;
            float32x4_t v355 = v223;
            float32x4_t v360 = v220;
            float32x4_t v361 = v221;
            float32x4_t v362 = v224;
            float32x4_t v363 = v225;
            uint64_t v218 = 128;
          }
          else if (v217 == 3)
          {
            float32x4_t v226 = vld1q_dup_f32((const float *)v216);
            int8x16_t v352 = (int8x16_t)v226;
            float32x4_t v353 = v226;
            float32x4_t v354 = v226;
            float32x4_t v355 = v226;
            float32x4_t v360 = v226;
            float32x4_t v361 = v226;
            float32x4_t v362 = v226;
            float32x4_t v363 = v226;
            uint64_t v218 = 4;
          }
          else if (v82[1])
          {
            uint64_t v218 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v352, 128, v216, v217);
          }
          else
          {
            uint64_t v218 = 0;
            float32x4_t v354 = 0u;
            float32x4_t v355 = 0u;
            int8x16_t v352 = 0u;
            float32x4_t v353 = 0u;
            float32x4_t v360 = 0u;
            float32x4_t v361 = 0u;
            float32x4_t v362 = 0u;
            float32x4_t v363 = 0u;
          }
          uint64_t v227 = v216 + v218;
          unsigned int v228 = v82[2];
          if (v228 == 127)
          {
            float32x4_t v230 = *(float32x4_t *)(v227 + 16);
            float32x4_t v231 = *(float32x4_t *)(v227 + 32);
            float32x4_t v232 = *(float32x4_t *)(v227 + 48);
            float32x4_t v233 = *(float32x4_t *)(v227 + 64);
            float32x4_t v234 = *(float32x4_t *)(v227 + 80);
            float32x4_t v235 = *(float32x4_t *)(v227 + 96);
            float32x4_t v236 = *(float32x4_t *)(v227 + 112);
            int8x16_t v340 = *(int8x16_t *)v227;
            float32x4_t v341 = v230;
            float32x4_t v342 = v233;
            float32x4_t v343 = v234;
            float32x4_t v348 = v231;
            float32x4_t v349 = v232;
            float32x4_t v350 = v235;
            float32x4_t v351 = v236;
            uint64_t v229 = 128;
          }
          else if (v228 == 3)
          {
            float32x4_t v237 = vld1q_dup_f32((const float *)v227);
            int8x16_t v340 = (int8x16_t)v237;
            float32x4_t v341 = v237;
            float32x4_t v342 = v237;
            float32x4_t v343 = v237;
            float32x4_t v348 = v237;
            float32x4_t v349 = v237;
            float32x4_t v350 = v237;
            float32x4_t v351 = v237;
            uint64_t v229 = 4;
          }
          else if (v82[2])
          {
            uint64_t v229 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v340, 128, v227, v228);
          }
          else
          {
            uint64_t v229 = 0;
            float32x4_t v342 = 0u;
            float32x4_t v343 = 0u;
            int8x16_t v340 = 0u;
            float32x4_t v341 = 0u;
            float32x4_t v348 = 0u;
            float32x4_t v349 = 0u;
            float32x4_t v350 = 0u;
            float32x4_t v351 = 0u;
          }
          uint64_t v238 = v227 + v229;
          unsigned int v239 = v82[3];
          if (v239 == 127)
          {
            float32x4_t v241 = *(float32x4_t *)(v238 + 16);
            float32x4_t v242 = *(float32x4_t *)(v238 + 32);
            float32x4_t v243 = *(float32x4_t *)(v238 + 48);
            float32x4_t v244 = *(float32x4_t *)(v238 + 64);
            float32x4_t v245 = *(float32x4_t *)(v238 + 80);
            float32x4_t v246 = *(float32x4_t *)(v238 + 96);
            float32x4_t v247 = *(float32x4_t *)(v238 + 112);
            int8x16_t v356 = *(int8x16_t *)v238;
            float32x4_t v357 = v241;
            float32x4_t v358 = v244;
            float32x4_t v359 = v245;
            float32x4_t v364 = v242;
            float32x4_t v365 = v243;
            float32x4_t v366 = v246;
            float32x4_t v367 = v247;
            uint64_t v240 = 128;
          }
          else if (v239 == 3)
          {
            float32x4_t v248 = vld1q_dup_f32((const float *)v238);
            int8x16_t v356 = (int8x16_t)v248;
            float32x4_t v357 = v248;
            float32x4_t v358 = v248;
            float32x4_t v359 = v248;
            float32x4_t v364 = v248;
            float32x4_t v365 = v248;
            float32x4_t v366 = v248;
            float32x4_t v367 = v248;
            uint64_t v240 = 4;
          }
          else if (v82[3])
          {
            uint64_t v240 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v356, 128, v238, v239);
          }
          else
          {
            uint64_t v240 = 0;
            float32x4_t v358 = 0u;
            float32x4_t v359 = 0u;
            int8x16_t v356 = 0u;
            float32x4_t v357 = 0u;
            float32x4_t v364 = 0u;
            float32x4_t v365 = 0u;
            float32x4_t v366 = 0u;
            float32x4_t v367 = 0u;
          }
          uint64_t v249 = v238 + v240;
          unsigned int v250 = v82[4];
          if (v250 == 127)
          {
            float32x4_t v252 = *(float32x4_t *)(v249 + 16);
            float32x4_t v253 = *(float32x4_t *)(v249 + 32);
            float32x4_t v254 = *(float32x4_t *)(v249 + 48);
            float32x4_t v255 = *(float32x4_t *)(v249 + 64);
            float32x4_t v256 = *(float32x4_t *)(v249 + 80);
            float32x4_t v257 = *(float32x4_t *)(v249 + 96);
            float32x4_t v258 = *(float32x4_t *)(v249 + 112);
            int8x16_t v368 = *(int8x16_t *)v249;
            float32x4_t v369 = v252;
            float32x4_t v370 = v255;
            float32x4_t v371 = v256;
            float32x4_t v376 = v253;
            float32x4_t v377 = v254;
            float32x4_t v378 = v257;
            float32x4_t v379 = v258;
            uint64_t v251 = 128;
          }
          else if (v250 == 3)
          {
            float32x4_t v259 = vld1q_dup_f32((const float *)v249);
            int8x16_t v368 = (int8x16_t)v259;
            float32x4_t v369 = v259;
            float32x4_t v370 = v259;
            float32x4_t v371 = v259;
            float32x4_t v376 = v259;
            float32x4_t v377 = v259;
            float32x4_t v378 = v259;
            float32x4_t v379 = v259;
            uint64_t v251 = 4;
          }
          else if (v82[4])
          {
            uint64_t v251 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v368, 128, v249, v250);
          }
          else
          {
            uint64_t v251 = 0;
            float32x4_t v370 = 0u;
            float32x4_t v371 = 0u;
            int8x16_t v368 = 0u;
            float32x4_t v369 = 0u;
            float32x4_t v376 = 0u;
            float32x4_t v377 = 0u;
            float32x4_t v378 = 0u;
            float32x4_t v379 = 0u;
          }
          uint64_t v260 = v249 + v251;
          unsigned int v261 = v82[5];
          if (v261 == 127)
          {
            float32x4_t v263 = *(float32x4_t *)(v260 + 16);
            float32x4_t v264 = *(float32x4_t *)(v260 + 32);
            float32x4_t v265 = *(float32x4_t *)(v260 + 48);
            float32x4_t v266 = *(float32x4_t *)(v260 + 64);
            float32x4_t v267 = *(float32x4_t *)(v260 + 80);
            float32x4_t v268 = *(float32x4_t *)(v260 + 96);
            float32x4_t v269 = *(float32x4_t *)(v260 + 112);
            int8x16_t v384 = *(int8x16_t *)v260;
            float32x4_t v385 = v263;
            float32x4_t v386 = v266;
            float32x4_t v387 = v267;
            float32x4_t v392 = v264;
            float32x4_t v393 = v265;
            float32x4_t v394 = v268;
            float32x4_t v395 = v269;
            uint64_t v262 = 128;
          }
          else if (v261 == 3)
          {
            float32x4_t v270 = vld1q_dup_f32((const float *)v260);
            int8x16_t v384 = (int8x16_t)v270;
            float32x4_t v385 = v270;
            float32x4_t v386 = v270;
            float32x4_t v387 = v270;
            float32x4_t v392 = v270;
            float32x4_t v393 = v270;
            float32x4_t v394 = v270;
            float32x4_t v395 = v270;
            uint64_t v262 = 4;
          }
          else if (v82[5])
          {
            uint64_t v262 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v384, 128, v260, v261);
          }
          else
          {
            uint64_t v262 = 0;
            float32x4_t v386 = 0u;
            float32x4_t v387 = 0u;
            int8x16_t v384 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v395 = 0u;
          }
          uint64_t v271 = v260 + v262;
          unsigned int v272 = v82[6];
          if (v272 == 127)
          {
            float32x4_t v274 = *(float32x4_t *)(v271 + 16);
            float32x4_t v275 = *(float32x4_t *)(v271 + 32);
            float32x4_t v276 = *(float32x4_t *)(v271 + 48);
            float32x4_t v277 = *(float32x4_t *)(v271 + 64);
            float32x4_t v278 = *(float32x4_t *)(v271 + 80);
            float32x4_t v279 = *(float32x4_t *)(v271 + 96);
            float32x4_t v280 = *(float32x4_t *)(v271 + 112);
            int8x16_t v372 = *(int8x16_t *)v271;
            float32x4_t v373 = v274;
            float32x4_t v374 = v277;
            float32x4_t v375 = v278;
            float32x4_t v380 = v275;
            float32x4_t v381 = v276;
            float32x4_t v382 = v279;
            float32x4_t v383 = v280;
            uint64_t v273 = 128;
          }
          else if (v272 == 3)
          {
            float32x4_t v281 = vld1q_dup_f32((const float *)v271);
            int8x16_t v372 = (int8x16_t)v281;
            float32x4_t v373 = v281;
            float32x4_t v374 = v281;
            float32x4_t v375 = v281;
            float32x4_t v380 = v281;
            float32x4_t v381 = v281;
            float32x4_t v382 = v281;
            float32x4_t v383 = v281;
            uint64_t v273 = 4;
          }
          else if (v82[6])
          {
            uint64_t v273 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v372, 128, v271, v272);
          }
          else
          {
            uint64_t v273 = 0;
            float32x4_t v374 = 0u;
            float32x4_t v375 = 0u;
            int8x16_t v372 = 0u;
            float32x4_t v373 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v383 = 0u;
          }
          uint64_t v282 = v271 + v273;
          unsigned int v283 = v82[7];
          if (v283 == 127)
          {
            float32x4_t v284 = *(float32x4_t *)(v282 + 16);
            float32x4_t v285 = *(float32x4_t *)(v282 + 32);
            float32x4_t v286 = *(float32x4_t *)(v282 + 48);
            float32x4_t v287 = *(float32x4_t *)(v282 + 64);
            float32x4_t v288 = *(float32x4_t *)(v282 + 80);
            float32x4_t v289 = *(float32x4_t *)(v282 + 96);
            float32x4_t v290 = *(float32x4_t *)(v282 + 112);
            int8x16_t v388 = *(int8x16_t *)v282;
            float32x4_t v389 = v284;
            float32x4_t v390 = v287;
            float32x4_t v391 = v288;
            float32x4_t v396 = v285;
            float32x4_t v397 = v286;
            float32x4_t v398 = v289;
            float32x4_t v399 = v290;
            unsigned int v40 = a7;
            uint64_t v15 = v322;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v322;
            if (v283 == 3)
            {
              float32x4_t v291 = vld1q_dup_f32((const float *)v282);
              int8x16_t v388 = (int8x16_t)v291;
              float32x4_t v389 = v291;
              float32x4_t v390 = v291;
              float32x4_t v391 = v291;
              float32x4_t v396 = v291;
              float32x4_t v397 = v291;
              float32x4_t v398 = v291;
              float32x4_t v399 = v291;
            }
            else if (v283)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v388, 128, v282, v283);
            }
            else
            {
              float32x4_t v390 = 0u;
              float32x4_t v391 = 0u;
              int8x16_t v388 = 0u;
              float32x4_t v389 = 0u;
              float32x4_t v396 = 0u;
              float32x4_t v397 = 0u;
              float32x4_t v398 = 0u;
              float32x4_t v399 = 0u;
            }
          }
          unint64_t v292 = v331;
          unsigned int v41 = v37 + 1;
          if (v331)
          {
            unint64_t v293 = 0;
            uint64_t v294 = &v336 + 8 * (unint64_t)v329 + v330;
            unsigned int v295 = v332;
            do
            {
              if (v295)
              {
                uint64_t v296 = 0;
                uint64_t v297 = v327 + v328 * v293;
                do
                {
                  *(unsigned char *)(v297 + v296) = v294->i8[v296];
                  ++v296;
                  unsigned int v295 = v332;
                }
                while (16 * (unint64_t)v332 > v296);
                unint64_t v292 = v331;
              }
              ++v293;
              v294 += 8;
            }
            while (v293 < v292);
          }
LABEL_48:
          BOOL v20 = v37 == v313 >> 3;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v302;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v398 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v319 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v300 = a8 + a10 - 1;
  unsigned int v302 = v300 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v313 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v302)
  {
    unsigned int v311 = a7 + a9 - 1;
    unsigned int v299 = a7 >> 3;
    if (a7 >> 3 <= v311 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v296 = a5 - 1;
      unsigned int v322 = (a5 - 1) >> 3;
      int v321 = ((a5 - 1) & 7) + 1;
      int v297 = ((a6 - 1) & 7) + 1;
      unsigned int v298 = (a6 - 1) >> 3;
      uint64_t v303 = 4 * a11;
      uint64_t v304 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v309 = v27.i32[0] | v27.i32[1];
      BOOL v307 = v27.i32[1] != 0;
      int8x8_t v308 = v27;
      BOOL v306 = v27.i32[0] != 0;
      unint64_t v295 = 8 * v19 * (unint64_t)v18;
      unsigned int v310 = a7;
      uint64_t v320 = v16;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v319) {
          int v29 = v319;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v299;
        if (v300 < v28) {
          unsigned int v28 = v300;
        }
        unsigned int v318 = 8 * v17;
        int v305 = v29 - 8 * v17;
        int v317 = v28 - v29 + 1;
        int v31 = v297;
        if (v17 != v298) {
          int v31 = 8;
        }
        unsigned int v323 = v31;
        uint64_t v316 = a2 + (v29 - v319) * v25;
        do
        {
          unsigned int v33 = 8 * v30;
          unsigned int v34 = 8 * (v30 + 1) - 1;
          if (8 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v30;
          }
          if (v311 < v34) {
            unsigned int v34 = v311;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v322) {
            unsigned int v37 = v321;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v318 >= v319 && v33 >= a7)
          {
            int v39 = v321;
            if (v30 != v322) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v317 != v323;
          }
          if (isLevelTiled)
          {
            unsigned int v279 = 0;
            uint64_t v280 = v295 >> (*(unsigned char *)(v16 + 57) != 0);
            char v281 = 1;
            if (v280 > 127)
            {
              if (v280 > 511)
              {
                if (v280 == 512)
                {
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 16;
                  unsigned int v283 = 16;
                }
                else
                {
                  char v282 = 1;
                  unsigned int v283 = 0;
                  if (v280 == 1024)
                  {
                    char v281 = 0;
                    unsigned int v283 = 8;
                    unsigned int v279 = 16;
                  }
                }
              }
              else if (v280 == 128)
              {
                char v281 = 0;
                char v282 = 0;
                unsigned int v279 = 32;
                unsigned int v283 = 32;
              }
              else
              {
                char v282 = 1;
                unsigned int v283 = 0;
                if (v280 == 256)
                {
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 16;
                  unsigned int v279 = 32;
                }
              }
            }
            else
            {
              char v282 = 1;
              unsigned int v283 = 0;
              switch(v280)
              {
                case 4:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 128;
                  unsigned int v279 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 128;
                  unsigned int v283 = 128;
                  break;
                case 16:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 64;
                  unsigned int v279 = 128;
                  break;
                case 32:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 64;
                  unsigned int v283 = 64;
                  break;
                default:
                  if (v280 == 64)
                  {
                    char v281 = 0;
                    char v282 = 0;
                    unsigned int v283 = 32;
                    unsigned int v279 = 64;
                  }
                  break;
              }
            }
            unsigned int v284 = (v279 >> 3) - 1;
            if (v281) {
              unsigned int v285 = 0;
            }
            else {
              unsigned int v285 = 32 - __clz(~(-1 << -(char)__clz(v284)));
            }
            unsigned int v286 = (v283 >> 3) - 1;
            if (v282)
            {
              unsigned int v287 = 0;
              if (v285) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v287 = 32 - __clz(~(-1 << -(char)__clz(v286)));
              if (v287 | v285)
              {
LABEL_233:
                int v288 = 0;
                uint64_t v289 = 0;
                int v290 = v30 & v284;
                int v291 = v17 & v286;
                BOOL v292 = v285 != 0;
                BOOL v293 = v287 != 0;
                int v294 = 1;
                do
                {
                  --v285;
                  if (v292) {
                    v289 |= (unint64_t)(v294 & v290) << v288++;
                  }
                  else {
                    unsigned int v285 = 0;
                  }
                  --v287;
                  if (v293) {
                    v289 |= (unint64_t)(v294 & v291) << v288++;
                  }
                  else {
                    unsigned int v287 = 0;
                  }
                  v294 *= 2;
                  --v288;
                  BOOL v293 = v287 != 0;
                  BOOL v292 = v285 != 0;
                }
                while (v287 | v285);
                goto LABEL_245;
              }
            }
            uint64_t v289 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v279 + v318 / v283 * ((v279 + v296) / v279)) << 14) + (v289 << 10);
            goto LABEL_59;
          }
          if (v309)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v307;
            BOOL v45 = v306;
            __int32 v46 = v308.i32[1];
            __int32 v47 = v308.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (int8x16_t *)(a3 + v48);
          if (v313)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (int8x16_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v316 + 16 * (v35 - a7);
          char v65 = v37 < 8 || v38;
          if ((v65 & 1) != 0 || v323 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v320;
            block[5] = v62;
            char v331 = v37;
            char v332 = v323;
            unsigned int v327 = v305;
            unsigned int v328 = v35 - v33;
            block[6] = v63;
            uint64_t v325 = v64;
            uint64_t v25 = a11;
            uint64_t v326 = a11;
            unsigned int v329 = v317;
            unsigned int v330 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v320 + 8) + 7384), block);
              a7 = v310;
              uint64_t v16 = v320;
              unsigned int v32 = v30 + 1;
            }
            else
            {
              unsigned int v69 = *v63;
              a7 = v310;
              if (v69 == 127)
              {
                int8x16_t v189 = v62[1];
                int8x16_t v190 = v62[2];
                int8x16_t v191 = v62[3];
                int8x16_t v192 = v62[4];
                int8x16_t v193 = v62[5];
                int8x16_t v194 = v62[6];
                int8x16_t v195 = v62[7];
                int8x16_t v334 = *v62;
                float32x4_t v335 = (float32x4_t)v189;
                float32x4_t v336 = (float32x4_t)v192;
                float32x4_t v337 = (float32x4_t)v193;
                float32x4_t v342 = (float32x4_t)v190;
                float32x4_t v343 = (float32x4_t)v191;
                float32x4_t v344 = (float32x4_t)v194;
                float32x4_t v345 = (float32x4_t)v195;
                uint64_t v70 = 128;
              }
              else if (v69 == 3)
              {
                float32x4_t v196 = vld1q_dup_f32((const float *)v62->i32);
                int8x16_t v334 = (int8x16_t)v196;
                float32x4_t v335 = v196;
                float32x4_t v336 = v196;
                float32x4_t v337 = v196;
                float32x4_t v342 = v196;
                float32x4_t v343 = v196;
                float32x4_t v344 = v196;
                float32x4_t v345 = v196;
                uint64_t v70 = 4;
              }
              else if (*v63)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, (uint64_t)v62, v69);
              }
              else
              {
                uint64_t v70 = 0;
                float32x4_t v337 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v335 = 0u;
                int8x16_t v334 = 0u;
                float32x4_t v342 = 0u;
                float32x4_t v343 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v197 = (uint64_t)v62->i64 + v70;
              unsigned int v198 = v63[1];
              if (v198 == 127)
              {
                float32x4_t v200 = *(float32x4_t *)(v197 + 16);
                float32x4_t v201 = *(float32x4_t *)(v197 + 32);
                float32x4_t v202 = *(float32x4_t *)(v197 + 48);
                float32x4_t v203 = *(float32x4_t *)(v197 + 64);
                float32x4_t v204 = *(float32x4_t *)(v197 + 80);
                float32x4_t v205 = *(float32x4_t *)(v197 + 96);
                float32x4_t v206 = *(float32x4_t *)(v197 + 112);
                int8x16_t v350 = *(int8x16_t *)v197;
                float32x4_t v351 = v200;
                float32x4_t v352 = v203;
                float32x4_t v353 = v204;
                float32x4_t v358 = v201;
                float32x4_t v359 = v202;
                float32x4_t v360 = v205;
                float32x4_t v361 = v206;
                uint64_t v199 = 128;
              }
              else if (v198 == 3)
              {
                float32x4_t v207 = vld1q_dup_f32((const float *)v197);
                int8x16_t v350 = (int8x16_t)v207;
                float32x4_t v351 = v207;
                float32x4_t v352 = v207;
                float32x4_t v353 = v207;
                float32x4_t v358 = v207;
                float32x4_t v359 = v207;
                float32x4_t v360 = v207;
                float32x4_t v361 = v207;
                uint64_t v199 = 4;
              }
              else if (v63[1])
              {
                uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v350, 128, v197, v198);
              }
              else
              {
                uint64_t v199 = 0;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
                int8x16_t v350 = 0u;
                float32x4_t v351 = 0u;
                float32x4_t v358 = 0u;
                float32x4_t v359 = 0u;
                float32x4_t v360 = 0u;
                float32x4_t v361 = 0u;
              }
              uint64_t v208 = v197 + v199;
              unsigned int v209 = v63[2];
              if (v209 == 127)
              {
                float32x4_t v211 = *(float32x4_t *)(v208 + 16);
                float32x4_t v212 = *(float32x4_t *)(v208 + 32);
                float32x4_t v213 = *(float32x4_t *)(v208 + 48);
                float32x4_t v214 = *(float32x4_t *)(v208 + 64);
                float32x4_t v215 = *(float32x4_t *)(v208 + 80);
                float32x4_t v216 = *(float32x4_t *)(v208 + 96);
                float32x4_t v217 = *(float32x4_t *)(v208 + 112);
                int8x16_t v338 = *(int8x16_t *)v208;
                float32x4_t v339 = v211;
                float32x4_t v340 = v214;
                float32x4_t v341 = v215;
                float32x4_t v346 = v212;
                float32x4_t v347 = v213;
                float32x4_t v348 = v216;
                float32x4_t v349 = v217;
                uint64_t v210 = 128;
              }
              else if (v209 == 3)
              {
                float32x4_t v218 = vld1q_dup_f32((const float *)v208);
                int8x16_t v338 = (int8x16_t)v218;
                float32x4_t v339 = v218;
                float32x4_t v340 = v218;
                float32x4_t v341 = v218;
                float32x4_t v346 = v218;
                float32x4_t v347 = v218;
                float32x4_t v348 = v218;
                float32x4_t v349 = v218;
                uint64_t v210 = 4;
              }
              else if (v63[2])
              {
                uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v338, 128, v208, v209);
              }
              else
              {
                uint64_t v210 = 0;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                int8x16_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v219 = v208 + v210;
              unsigned int v220 = v63[3];
              if (v220 == 127)
              {
                float32x4_t v222 = *(float32x4_t *)(v219 + 16);
                float32x4_t v223 = *(float32x4_t *)(v219 + 32);
                float32x4_t v224 = *(float32x4_t *)(v219 + 48);
                float32x4_t v225 = *(float32x4_t *)(v219 + 64);
                float32x4_t v226 = *(float32x4_t *)(v219 + 80);
                float32x4_t v227 = *(float32x4_t *)(v219 + 96);
                float32x4_t v228 = *(float32x4_t *)(v219 + 112);
                int8x16_t v354 = *(int8x16_t *)v219;
                float32x4_t v355 = v222;
                float32x4_t v356 = v225;
                float32x4_t v357 = v226;
                float32x4_t v362 = v223;
                float32x4_t v363 = v224;
                float32x4_t v364 = v227;
                float32x4_t v365 = v228;
                uint64_t v221 = 128;
              }
              else if (v220 == 3)
              {
                float32x4_t v229 = vld1q_dup_f32((const float *)v219);
                int8x16_t v354 = (int8x16_t)v229;
                float32x4_t v355 = v229;
                float32x4_t v356 = v229;
                float32x4_t v357 = v229;
                float32x4_t v362 = v229;
                float32x4_t v363 = v229;
                float32x4_t v364 = v229;
                float32x4_t v365 = v229;
                uint64_t v221 = 4;
              }
              else if (v63[3])
              {
                uint64_t v221 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v354, 128, v219, v220);
              }
              else
              {
                uint64_t v221 = 0;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
                int8x16_t v354 = 0u;
                float32x4_t v355 = 0u;
                float32x4_t v362 = 0u;
                float32x4_t v363 = 0u;
                float32x4_t v364 = 0u;
                float32x4_t v365 = 0u;
              }
              uint64_t v230 = v219 + v221;
              unsigned int v231 = v63[4];
              if (v231 == 127)
              {
                float32x4_t v233 = *(float32x4_t *)(v230 + 16);
                float32x4_t v234 = *(float32x4_t *)(v230 + 32);
                float32x4_t v235 = *(float32x4_t *)(v230 + 48);
                float32x4_t v236 = *(float32x4_t *)(v230 + 64);
                float32x4_t v237 = *(float32x4_t *)(v230 + 80);
                float32x4_t v238 = *(float32x4_t *)(v230 + 96);
                float32x4_t v239 = *(float32x4_t *)(v230 + 112);
                int8x16_t v366 = *(int8x16_t *)v230;
                float32x4_t v367 = v233;
                float32x4_t v368 = v236;
                float32x4_t v369 = v237;
                float32x4_t v374 = v234;
                float32x4_t v375 = v235;
                float32x4_t v376 = v238;
                float32x4_t v377 = v239;
                uint64_t v232 = 128;
              }
              else if (v231 == 3)
              {
                float32x4_t v240 = vld1q_dup_f32((const float *)v230);
                int8x16_t v366 = (int8x16_t)v240;
                float32x4_t v367 = v240;
                float32x4_t v368 = v240;
                float32x4_t v369 = v240;
                float32x4_t v374 = v240;
                float32x4_t v375 = v240;
                float32x4_t v376 = v240;
                float32x4_t v377 = v240;
                uint64_t v232 = 4;
              }
              else if (v63[4])
              {
                uint64_t v232 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v230, v231);
              }
              else
              {
                uint64_t v232 = 0;
                float32x4_t v368 = 0u;
                float32x4_t v369 = 0u;
                int8x16_t v366 = 0u;
                float32x4_t v367 = 0u;
                float32x4_t v374 = 0u;
                float32x4_t v375 = 0u;
                float32x4_t v376 = 0u;
                float32x4_t v377 = 0u;
              }
              uint64_t v241 = v230 + v232;
              unsigned int v242 = v63[5];
              if (v242 == 127)
              {
                float32x4_t v244 = *(float32x4_t *)(v241 + 16);
                float32x4_t v245 = *(float32x4_t *)(v241 + 32);
                float32x4_t v246 = *(float32x4_t *)(v241 + 48);
                float32x4_t v247 = *(float32x4_t *)(v241 + 64);
                float32x4_t v248 = *(float32x4_t *)(v241 + 80);
                float32x4_t v249 = *(float32x4_t *)(v241 + 96);
                float32x4_t v250 = *(float32x4_t *)(v241 + 112);
                int8x16_t v382 = *(int8x16_t *)v241;
                float32x4_t v383 = v244;
                float32x4_t v384 = v247;
                float32x4_t v385 = v248;
                float32x4_t v390 = v245;
                float32x4_t v391 = v246;
                float32x4_t v392 = v249;
                float32x4_t v393 = v250;
                uint64_t v243 = 128;
              }
              else if (v242 == 3)
              {
                float32x4_t v251 = vld1q_dup_f32((const float *)v241);
                int8x16_t v382 = (int8x16_t)v251;
                float32x4_t v383 = v251;
                float32x4_t v384 = v251;
                float32x4_t v385 = v251;
                float32x4_t v390 = v251;
                float32x4_t v391 = v251;
                float32x4_t v392 = v251;
                float32x4_t v393 = v251;
                uint64_t v243 = 4;
              }
              else if (v63[5])
              {
                uint64_t v243 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v382, 128, v241, v242);
              }
              else
              {
                uint64_t v243 = 0;
                float32x4_t v384 = 0u;
                float32x4_t v385 = 0u;
                int8x16_t v382 = 0u;
                float32x4_t v383 = 0u;
                float32x4_t v390 = 0u;
                float32x4_t v391 = 0u;
                float32x4_t v392 = 0u;
                float32x4_t v393 = 0u;
              }
              uint64_t v252 = v241 + v243;
              unsigned int v253 = v63[6];
              if (v253 == 127)
              {
                float32x4_t v255 = *(float32x4_t *)(v252 + 16);
                float32x4_t v256 = *(float32x4_t *)(v252 + 32);
                float32x4_t v257 = *(float32x4_t *)(v252 + 48);
                float32x4_t v258 = *(float32x4_t *)(v252 + 64);
                float32x4_t v259 = *(float32x4_t *)(v252 + 80);
                float32x4_t v260 = *(float32x4_t *)(v252 + 96);
                float32x4_t v261 = *(float32x4_t *)(v252 + 112);
                int8x16_t v370 = *(int8x16_t *)v252;
                float32x4_t v371 = v255;
                float32x4_t v372 = v258;
                float32x4_t v373 = v259;
                float32x4_t v378 = v256;
                float32x4_t v379 = v257;
                float32x4_t v380 = v260;
                float32x4_t v381 = v261;
                uint64_t v254 = 128;
              }
              else if (v253 == 3)
              {
                float32x4_t v262 = vld1q_dup_f32((const float *)v252);
                int8x16_t v370 = (int8x16_t)v262;
                float32x4_t v371 = v262;
                float32x4_t v372 = v262;
                float32x4_t v373 = v262;
                float32x4_t v378 = v262;
                float32x4_t v379 = v262;
                float32x4_t v380 = v262;
                float32x4_t v381 = v262;
                uint64_t v254 = 4;
              }
              else if (v63[6])
              {
                uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v370, 128, v252, v253);
              }
              else
              {
                uint64_t v254 = 0;
                float32x4_t v372 = 0u;
                float32x4_t v373 = 0u;
                int8x16_t v370 = 0u;
                float32x4_t v371 = 0u;
                float32x4_t v378 = 0u;
                float32x4_t v379 = 0u;
                float32x4_t v380 = 0u;
                float32x4_t v381 = 0u;
              }
              uint64_t v263 = v252 + v254;
              unsigned int v264 = v63[7];
              if (v264 == 127)
              {
                float32x4_t v265 = *(float32x4_t *)(v263 + 16);
                float32x4_t v266 = *(float32x4_t *)(v263 + 32);
                float32x4_t v267 = *(float32x4_t *)(v263 + 48);
                float32x4_t v268 = *(float32x4_t *)(v263 + 64);
                float32x4_t v269 = *(float32x4_t *)(v263 + 80);
                float32x4_t v270 = *(float32x4_t *)(v263 + 96);
                float32x4_t v271 = *(float32x4_t *)(v263 + 112);
                int8x16_t v386 = *(int8x16_t *)v263;
                float32x4_t v387 = v265;
                float32x4_t v388 = v268;
                float32x4_t v389 = v269;
                float32x4_t v394 = v266;
                float32x4_t v395 = v267;
                float32x4_t v396 = v270;
                float32x4_t v397 = v271;
                uint64_t v16 = v320;
                unsigned int v32 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v320;
                unsigned int v32 = v30 + 1;
                if (v264 == 3)
                {
                  float32x4_t v272 = vld1q_dup_f32((const float *)v263);
                  int8x16_t v386 = (int8x16_t)v272;
                  float32x4_t v387 = v272;
                  float32x4_t v388 = v272;
                  float32x4_t v389 = v272;
                  float32x4_t v394 = v272;
                  float32x4_t v395 = v272;
                  float32x4_t v396 = v272;
                  float32x4_t v397 = v272;
                }
                else if (v264)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v386, 128, v263, v264);
                }
                else
                {
                  float32x4_t v388 = 0u;
                  float32x4_t v389 = 0u;
                  int8x16_t v386 = 0u;
                  float32x4_t v387 = 0u;
                  float32x4_t v394 = 0u;
                  float32x4_t v395 = 0u;
                  float32x4_t v396 = 0u;
                  float32x4_t v397 = 0u;
                }
              }
              unint64_t v273 = v329;
              if (v329)
              {
                unint64_t v274 = 0;
                float32x4_t v275 = &v334 + 8 * (unint64_t)v327 + v328;
                unsigned int v276 = v330;
                do
                {
                  if (v276)
                  {
                    uint64_t v277 = 0;
                    uint64_t v278 = v325 + v326 * v274;
                    do
                    {
                      *(unsigned char *)(v278 + v277) = v275->i8[v277];
                      ++v277;
                      unsigned int v276 = v330;
                    }
                    while (16 * (unint64_t)v330 > v277);
                    unint64_t v273 = v329;
                  }
                  ++v274;
                  v275 += 8;
                }
                while (v274 < v273);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              int8x16_t v73 = v62[1];
              int8x16_t v74 = v62[2];
              int8x16_t v75 = v62[3];
              int8x16_t v76 = v62[4];
              int8x16_t v77 = v62[5];
              int8x16_t v78 = v62[6];
              int8x16_t v79 = v62[7];
              uint64_t v25 = a11;
              *(int8x16_t *)uint64_t v64 = *v62;
              *(int8x16_t *)(v64 + 16) = v73;
              int v80 = (int8x16_t *)(v64 + a11);
              *(int8x16_t *)(v64 + 32) = v76;
              *(int8x16_t *)(v64 + 48) = v77;
              int8x16_t *v80 = v74;
              v80[1] = v75;
              BOOL v81 = (int8x16_t *)(v64 + a11 + 32);
              *BOOL v81 = v78;
              v81[1] = v79;
              uint64_t v67 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              if (v66 == 3)
              {
                float32x4_t v71 = vld1q_dup_f32((const float *)v62->i32);
                *(float32x4_t *)uint64_t v64 = v71;
                *(float32x4_t *)(v64 + 16) = v71;
                *(float32x4_t *)(v64 + 32) = v71;
                *(float32x4_t *)(v64 + 48) = v71;
                unint64_t v72 = (float32x4_t *)(v64 + a11);
                *unint64_t v72 = v71;
                v72[1] = v71;
                v72[2] = v71;
                v72[3] = v71;
                uint64_t v67 = 4;
              }
              else if (*v63)
              {
                uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v67 = 0;
                *(_OWORD *)(v64 + 32) = 0u;
                *(_OWORD *)(v64 + 48) = 0u;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v68 = (_OWORD *)(v64 + a11);
                v68[2] = 0u;
                v68[3] = 0u;
                _OWORD *v68 = 0u;
                v68[1] = 0u;
              }
            }
            uint64_t v82 = (uint64_t)v62->i64 + v67;
            uint64_t v83 = (float32x4_t *)(v64 + v304);
            unsigned int v84 = v63[1];
            if (v84 == 127)
            {
              float32x4_t v89 = *(float32x4_t *)(v82 + 16);
              long long v90 = *(_OWORD *)(v82 + 32);
              long long v91 = *(_OWORD *)(v82 + 48);
              float32x4_t v92 = *(float32x4_t *)(v82 + 64);
              float32x4_t v93 = *(float32x4_t *)(v82 + 80);
              long long v94 = *(_OWORD *)(v82 + 96);
              long long v95 = *(_OWORD *)(v82 + 112);
              *uint64_t v83 = *(float32x4_t *)v82;
              v83[1] = v89;
              long long v96 = (_OWORD *)((char *)v83->f32 + v25);
              v83[2] = v92;
              v83[3] = v93;
              _OWORD *v96 = v90;
              v96[1] = v91;
              long long v97 = (_OWORD *)((char *)v83[2].f32 + v25);
              _OWORD *v97 = v94;
              v97[1] = v95;
              uint64_t v85 = 128;
            }
            else if (v84 == 3)
            {
              float32x4_t v87 = vld1q_dup_f32((const float *)v82);
              *uint64_t v83 = v87;
              v83[1] = v87;
              v83[2] = v87;
              v83[3] = v87;
              unsigned int v88 = (float32x4_t *)((char *)v83 + v25);
              float32x4_t *v88 = v87;
              v88[1] = v87;
              v88[2] = v87;
              v88[3] = v87;
              uint64_t v85 = 4;
            }
            else if (v63[1])
            {
              uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v304), v25, v82, v84);
            }
            else
            {
              uint64_t v85 = 0;
              v83[2] = 0u;
              v83[3] = 0u;
              *uint64_t v83 = 0u;
              v83[1] = 0u;
              uint64_t v86 = (_OWORD *)((char *)v83->f32 + v25);
              v86[2] = 0u;
              v86[3] = 0u;
              _OWORD *v86 = 0u;
              v86[1] = 0u;
            }
            uint64_t v98 = v82 + v85;
            uint64_t v99 = (int8x16_t *)(v64 + 64);
            unsigned int v100 = v63[2];
            if (v100 == 127)
            {
              long long v105 = *(_OWORD *)(v98 + 16);
              long long v106 = *(_OWORD *)(v98 + 32);
              long long v107 = *(_OWORD *)(v98 + 48);
              long long v108 = *(_OWORD *)(v98 + 64);
              long long v109 = *(_OWORD *)(v98 + 80);
              long long v110 = *(_OWORD *)(v98 + 96);
              long long v111 = *(_OWORD *)(v98 + 112);
              *uint64_t v99 = *(int8x16_t *)v98;
              *(_OWORD *)(v64 + 80) = v105;
              float32x4_t v112 = &v99->i8[v25];
              *(_OWORD *)(v64 + 96) = v108;
              *(_OWORD *)(v64 + 112) = v109;
              *(_OWORD *)float32x4_t v112 = v106;
              *((_OWORD *)v112 + 1) = v107;
              v112 += 32;
              *(_OWORD *)float32x4_t v112 = v110;
              *((_OWORD *)v112 + 1) = v111;
              uint64_t v101 = 128;
            }
            else if (v100 == 3)
            {
              float32x4_t v103 = vld1q_dup_f32((const float *)v98);
              *(float32x4_t *)(v64 + 64) = v103;
              *(float32x4_t *)(v64 + 80) = v103;
              *(float32x4_t *)(v64 + 96) = v103;
              *(float32x4_t *)(v64 + 112) = v103;
              uint64_t v104 = (float32x4_t *)&v99->i8[v25];
              *uint64_t v104 = v103;
              v104[1] = v103;
              v104[2] = v103;
              v104[3] = v103;
              uint64_t v101 = 4;
            }
            else if (v63[2])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, v25, v98, v100);
            }
            else
            {
              uint64_t v101 = 0;
              *(_OWORD *)(v64 + 96) = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              *uint64_t v99 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              BOOL v102 = &v99->i8[v25];
              *((_OWORD *)v102 + 2) = 0u;
              *((_OWORD *)v102 + 3) = 0u;
              *(_OWORD *)BOOL v102 = 0u;
              *((_OWORD *)v102 + 1) = 0u;
            }
            uint64_t v113 = v98 + v101;
            long long v114 = (int8x16_t *)&v83[4];
            unsigned int v115 = v63[3];
            if (v115 == 127)
            {
              float32x4_t v120 = *(float32x4_t *)(v113 + 16);
              long long v121 = *(_OWORD *)(v113 + 32);
              long long v122 = *(_OWORD *)(v113 + 48);
              float32x4_t v123 = *(float32x4_t *)(v113 + 64);
              float32x4_t v124 = *(float32x4_t *)(v113 + 80);
              long long v125 = *(_OWORD *)(v113 + 96);
              long long v126 = *(_OWORD *)(v113 + 112);
              *long long v114 = *(int8x16_t *)v113;
              v83[5] = v120;
              long long v127 = &v114->i8[v25];
              v83[6] = v123;
              v83[7] = v124;
              *(_OWORD *)long long v127 = v121;
              *((_OWORD *)v127 + 1) = v122;
              v127 += 32;
              *(_OWORD *)long long v127 = v125;
              *((_OWORD *)v127 + 1) = v126;
              uint64_t v116 = 128;
            }
            else if (v115 == 3)
            {
              float32x4_t v118 = vld1q_dup_f32((const float *)v113);
              v83[4] = v118;
              v83[5] = v118;
              v83[6] = v118;
              v83[7] = v118;
              unsigned int v119 = (float32x4_t *)&v114->i8[v25];
              *unsigned int v119 = v118;
              v119[1] = v118;
              v119[2] = v118;
              v119[3] = v118;
              uint64_t v116 = 4;
            }
            else if (v63[3])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, v25, v113, v115);
            }
            else
            {
              uint64_t v116 = 0;
              v83[6] = 0u;
              v83[7] = 0u;
              *long long v114 = 0u;
              v83[5] = 0u;
              uint64_t v117 = &v114->i8[v25];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            uint64_t v128 = v113 + v116;
            long long v129 = (float32x4_t *)(v64 + v303);
            unsigned int v130 = v63[4];
            if (v130 == 127)
            {
              float32x4_t v135 = *(float32x4_t *)(v128 + 16);
              long long v136 = *(_OWORD *)(v128 + 32);
              long long v137 = *(_OWORD *)(v128 + 48);
              float32x4_t v138 = *(float32x4_t *)(v128 + 64);
              float32x4_t v139 = *(float32x4_t *)(v128 + 80);
              long long v140 = *(_OWORD *)(v128 + 96);
              long long v141 = *(_OWORD *)(v128 + 112);
              *long long v129 = *(float32x4_t *)v128;
              v129[1] = v135;
              float32x4_t v142 = (_OWORD *)((char *)v129->f32 + v25);
              v129[2] = v138;
              v129[3] = v139;
              _OWORD *v142 = v136;
              v142[1] = v137;
              float32x4_t v143 = (_OWORD *)((char *)v129[2].f32 + v25);
              *float32x4_t v143 = v140;
              v143[1] = v141;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v133 = vld1q_dup_f32((const float *)v128);
              *long long v129 = v133;
              v129[1] = v133;
              v129[2] = v133;
              v129[3] = v133;
              unsigned int v134 = (float32x4_t *)((char *)v129 + v25);
              *unsigned int v134 = v133;
              v134[1] = v133;
              v134[2] = v133;
              v134[3] = v133;
              uint64_t v131 = 4;
            }
            else if (v63[4])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v303), v25, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              v129[2] = 0u;
              v129[3] = 0u;
              *long long v129 = 0u;
              v129[1] = 0u;
              uint64_t v132 = (_OWORD *)((char *)v129->f32 + v25);
              v132[2] = 0u;
              v132[3] = 0u;
              _OWORD *v132 = 0u;
              v132[1] = 0u;
            }
            uint64_t v144 = v128 + v131;
            uint64_t v145 = v64 + 6 * a11;
            unsigned int v146 = v63[5];
            if (v146 == 127)
            {
              long long v151 = *(_OWORD *)(v144 + 16);
              long long v152 = *(_OWORD *)(v144 + 32);
              long long v153 = *(_OWORD *)(v144 + 48);
              long long v154 = *(_OWORD *)(v144 + 64);
              long long v155 = *(_OWORD *)(v144 + 80);
              long long v156 = *(_OWORD *)(v144 + 96);
              long long v157 = *(_OWORD *)(v144 + 112);
              *(_OWORD *)uint64_t v145 = *(_OWORD *)v144;
              *(_OWORD *)(v145 + 16) = v151;
              float32x4_t v158 = (_OWORD *)(v145 + v25);
              *(_OWORD *)(v145 + 32) = v154;
              *(_OWORD *)(v145 + 48) = v155;
              *float32x4_t v158 = v152;
              v158[1] = v153;
              long long v159 = (_OWORD *)(v145 + v25 + 32);
              _OWORD *v159 = v156;
              v159[1] = v157;
              uint64_t v147 = 128;
            }
            else if (v146 == 3)
            {
              float32x4_t v149 = vld1q_dup_f32((const float *)v144);
              *(float32x4_t *)uint64_t v145 = v149;
              *(float32x4_t *)(v145 + 16) = v149;
              *(float32x4_t *)(v145 + 32) = v149;
              *(float32x4_t *)(v145 + 48) = v149;
              uint64_t v150 = (float32x4_t *)(v145 + v25);
              float32x4_t *v150 = v149;
              v150[1] = v149;
              v150[2] = v149;
              v150[3] = v149;
              uint64_t v147 = 4;
            }
            else if (v63[5])
            {
              uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v145, v25, v144, v146);
            }
            else
            {
              uint64_t v147 = 0;
              *(_OWORD *)(v145 + 32) = 0u;
              *(_OWORD *)(v145 + 48) = 0u;
              *(_OWORD *)uint64_t v145 = 0u;
              *(_OWORD *)(v145 + 16) = 0u;
              uint64_t v148 = (_OWORD *)(v145 + v25);
              v148[2] = 0u;
              v148[3] = 0u;
              _OWORD *v148 = 0u;
              v148[1] = 0u;
            }
            uint64_t v160 = v144 + v147;
            uint64_t v161 = (int8x16_t *)&v129[4];
            unsigned int v162 = v63[6];
            if (v162 == 127)
            {
              float32x4_t v167 = *(float32x4_t *)(v160 + 16);
              long long v168 = *(_OWORD *)(v160 + 32);
              long long v169 = *(_OWORD *)(v160 + 48);
              float32x4_t v170 = *(float32x4_t *)(v160 + 64);
              float32x4_t v171 = *(float32x4_t *)(v160 + 80);
              long long v172 = *(_OWORD *)(v160 + 96);
              long long v173 = *(_OWORD *)(v160 + 112);
              *uint64_t v161 = *(int8x16_t *)v160;
              v129[5] = v167;
              long long v174 = &v161->i8[v25];
              v129[6] = v170;
              v129[7] = v171;
              *(_OWORD *)long long v174 = v168;
              *((_OWORD *)v174 + 1) = v169;
              v174 += 32;
              *(_OWORD *)long long v174 = v172;
              *((_OWORD *)v174 + 1) = v173;
              uint64_t v163 = 128;
            }
            else if (v162 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v160);
              v129[4] = v165;
              v129[5] = v165;
              v129[6] = v165;
              v129[7] = v165;
              uint64_t v166 = (float32x4_t *)&v161->i8[v25];
              *uint64_t v166 = v165;
              v166[1] = v165;
              v166[2] = v165;
              v166[3] = v165;
              uint64_t v163 = 4;
            }
            else if (v63[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v25, v160, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v129[6] = 0u;
              v129[7] = 0u;
              *uint64_t v161 = 0u;
              v129[5] = 0u;
              uint64_t v164 = &v161->i8[v25];
              *((_OWORD *)v164 + 2) = 0u;
              *((_OWORD *)v164 + 3) = 0u;
              *(_OWORD *)uint64_t v164 = 0u;
              *((_OWORD *)v164 + 1) = 0u;
            }
            unsigned int v32 = v30 + 1;
            uint64_t v175 = v160 + v163;
            long long v176 = (int8x16_t *)(v145 + 64);
            unsigned int v177 = v63[7];
            if (v177 == 127)
            {
              long long v181 = *(_OWORD *)(v175 + 16);
              long long v182 = *(_OWORD *)(v175 + 32);
              long long v183 = *(_OWORD *)(v175 + 48);
              long long v184 = *(_OWORD *)(v175 + 64);
              long long v185 = *(_OWORD *)(v175 + 80);
              long long v186 = *(_OWORD *)(v175 + 96);
              long long v187 = *(_OWORD *)(v175 + 112);
              *long long v176 = *(int8x16_t *)v175;
              *(_OWORD *)(v145 + 80) = v181;
              long long v188 = &v176->i8[v25];
              *(_OWORD *)(v145 + 96) = v184;
              *(_OWORD *)(v145 + 112) = v185;
              *(_OWORD *)long long v188 = v182;
              *((_OWORD *)v188 + 1) = v183;
              v188 += 32;
              *(_OWORD *)long long v188 = v186;
              *((_OWORD *)v188 + 1) = v187;
              a7 = v310;
              uint64_t v16 = v320;
            }
            else
            {
              uint64_t v16 = v320;
              if (v177 == 3)
              {
                float32x4_t v179 = vld1q_dup_f32((const float *)v175);
                *(float32x4_t *)(v145 + 64) = v179;
                *(float32x4_t *)(v145 + 80) = v179;
                *(float32x4_t *)(v145 + 96) = v179;
                *(float32x4_t *)(v145 + 112) = v179;
                uint64_t v180 = (float32x4_t *)&v176->i8[v25];
                *uint64_t v180 = v179;
                v180[1] = v179;
                v180[2] = v179;
                v180[3] = v179;
              }
              else if (v177)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v176, v25, v175, v177);
              }
              else
              {
                *(_OWORD *)(v145 + 96) = 0u;
                *(_OWORD *)(v145 + 112) = 0u;
                *long long v176 = 0u;
                *(_OWORD *)(v145 + 80) = 0u;
                uint64_t v178 = &v176->i8[v25];
                *((_OWORD *)v178 + 2) = 0u;
                *((_OWORD *)v178 + 3) = 0u;
                *(_OWORD *)uint64_t v178 = 0u;
                *((_OWORD *)v178 + 1) = 0u;
              }
              a7 = v310;
            }
          }
          BOOL v21 = v30 == v311 >> 3;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v302;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v398 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v319 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v300 = a8 + a10 - 1;
  unsigned int v302 = v300 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v313 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v302)
  {
    unsigned int v311 = a7 + a9 - 1;
    unsigned int v299 = a7 >> 3;
    if (a7 >> 3 <= v311 >> 3)
    {
      uint64_t v25 = a11;
      unsigned int v296 = a5 - 1;
      unsigned int v322 = (a5 - 1) >> 3;
      int v321 = ((a5 - 1) & 7) + 1;
      int v297 = ((a6 - 1) & 7) + 1;
      unsigned int v298 = (a6 - 1) >> 3;
      uint64_t v303 = 4 * a11;
      uint64_t v304 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v309 = v27.i32[0] | v27.i32[1];
      BOOL v307 = v27.i32[1] != 0;
      int8x8_t v308 = v27;
      BOOL v306 = v27.i32[0] != 0;
      unint64_t v295 = 8 * v19 * (unint64_t)v18;
      unsigned int v310 = a7;
      uint64_t v320 = v16;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v319) {
          int v29 = v319;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v299;
        if (v300 < v28) {
          unsigned int v28 = v300;
        }
        unsigned int v318 = 8 * v17;
        int v305 = v29 - 8 * v17;
        int v317 = v28 - v29 + 1;
        int v31 = v297;
        if (v17 != v298) {
          int v31 = 8;
        }
        unsigned int v323 = v31;
        uint64_t v316 = a2 + (v29 - v319) * v25;
        do
        {
          unsigned int v33 = 8 * v30;
          unsigned int v34 = 8 * (v30 + 1) - 1;
          if (8 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v30;
          }
          if (v311 < v34) {
            unsigned int v34 = v311;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v322) {
            unsigned int v37 = v321;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v318 >= v319 && v33 >= a7)
          {
            int v39 = v321;
            if (v30 != v322) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v317 != v323;
          }
          if (isLevelTiled)
          {
            unsigned int v279 = 0;
            uint64_t v280 = v295 >> (*(unsigned char *)(v16 + 57) != 0);
            char v281 = 1;
            if (v280 > 127)
            {
              if (v280 > 511)
              {
                if (v280 == 512)
                {
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 16;
                  unsigned int v283 = 16;
                }
                else
                {
                  char v282 = 1;
                  unsigned int v283 = 0;
                  if (v280 == 1024)
                  {
                    char v281 = 0;
                    unsigned int v283 = 8;
                    unsigned int v279 = 16;
                  }
                }
              }
              else if (v280 == 128)
              {
                char v281 = 0;
                char v282 = 0;
                unsigned int v279 = 32;
                unsigned int v283 = 32;
              }
              else
              {
                char v282 = 1;
                unsigned int v283 = 0;
                if (v280 == 256)
                {
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 16;
                  unsigned int v279 = 32;
                }
              }
            }
            else
            {
              char v282 = 1;
              unsigned int v283 = 0;
              switch(v280)
              {
                case 4:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 128;
                  unsigned int v279 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 128;
                  unsigned int v283 = 128;
                  break;
                case 16:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v283 = 64;
                  unsigned int v279 = 128;
                  break;
                case 32:
                  char v281 = 0;
                  char v282 = 0;
                  unsigned int v279 = 64;
                  unsigned int v283 = 64;
                  break;
                default:
                  if (v280 == 64)
                  {
                    char v281 = 0;
                    char v282 = 0;
                    unsigned int v283 = 32;
                    unsigned int v279 = 64;
                  }
                  break;
              }
            }
            unsigned int v284 = (v279 >> 3) - 1;
            if (v281) {
              unsigned int v285 = 0;
            }
            else {
              unsigned int v285 = 32 - __clz(~(-1 << -(char)__clz(v284)));
            }
            unsigned int v286 = (v283 >> 3) - 1;
            if (v282)
            {
              unsigned int v287 = 0;
              if (v285) {
                goto LABEL_233;
              }
            }
            else
            {
              unsigned int v287 = 32 - __clz(~(-1 << -(char)__clz(v286)));
              if (v287 | v285)
              {
LABEL_233:
                int v288 = 0;
                uint64_t v289 = 0;
                int v290 = v30 & v284;
                int v291 = v17 & v286;
                BOOL v292 = v285 != 0;
                BOOL v293 = v287 != 0;
                int v294 = 1;
                do
                {
                  --v285;
                  if (v292) {
                    v289 |= (unint64_t)(v294 & v290) << v288++;
                  }
                  else {
                    unsigned int v285 = 0;
                  }
                  --v287;
                  if (v293) {
                    v289 |= (unint64_t)(v294 & v291) << v288++;
                  }
                  else {
                    unsigned int v287 = 0;
                  }
                  v294 *= 2;
                  --v288;
                  BOOL v293 = v287 != 0;
                  BOOL v292 = v285 != 0;
                }
                while (v287 | v285);
                goto LABEL_245;
              }
            }
            uint64_t v289 = 0;
LABEL_245:
            unint64_t v48 = ((unint64_t)(v33 / v279 + v318 / v283 * ((v279 + v296) / v279)) << 14) + (v289 << 10);
            goto LABEL_59;
          }
          if (v309)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v307;
            BOOL v45 = v306;
            __int32 v46 = v308.i32[1];
            __int32 v47 = v308.i32[0];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_59:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (int8x16_t *)(a3 + v48);
          if (v313)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (int8x16_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v316 + 16 * (v35 - a7);
          char v65 = v37 < 8 || v38;
          if ((v65 & 1) != 0 || v323 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v320;
            block[5] = v62;
            char v331 = v37;
            char v332 = v323;
            unsigned int v327 = v305;
            unsigned int v328 = v35 - v33;
            block[6] = v63;
            uint64_t v325 = v64;
            uint64_t v25 = a11;
            uint64_t v326 = a11;
            unsigned int v329 = v317;
            unsigned int v330 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v320 + 8) + 7384), block);
              a7 = v310;
              uint64_t v16 = v320;
              unsigned int v32 = v30 + 1;
            }
            else
            {
              unsigned int v69 = *v63;
              a7 = v310;
              if (v69 == 127)
              {
                int8x16_t v189 = v62[1];
                int8x16_t v190 = v62[2];
                int8x16_t v191 = v62[3];
                int8x16_t v192 = v62[4];
                int8x16_t v193 = v62[5];
                int8x16_t v194 = v62[6];
                int8x16_t v195 = v62[7];
                int8x16_t v334 = *v62;
                float32x4_t v335 = (float32x4_t)v189;
                float32x4_t v336 = (float32x4_t)v192;
                float32x4_t v337 = (float32x4_t)v193;
                float32x4_t v342 = (float32x4_t)v190;
                float32x4_t v343 = (float32x4_t)v191;
                float32x4_t v344 = (float32x4_t)v194;
                float32x4_t v345 = (float32x4_t)v195;
                uint64_t v70 = 128;
              }
              else if (v69 == 3)
              {
                float32x4_t v196 = vld1q_dup_f32((const float *)v62->i32);
                int8x16_t v334 = (int8x16_t)v196;
                float32x4_t v335 = v196;
                float32x4_t v336 = v196;
                float32x4_t v337 = v196;
                float32x4_t v342 = v196;
                float32x4_t v343 = v196;
                float32x4_t v344 = v196;
                float32x4_t v345 = v196;
                uint64_t v70 = 4;
              }
              else if (*v63)
              {
                uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 128, (uint64_t)v62, v69);
              }
              else
              {
                uint64_t v70 = 0;
                float32x4_t v337 = 0u;
                float32x4_t v336 = 0u;
                float32x4_t v335 = 0u;
                int8x16_t v334 = 0u;
                float32x4_t v342 = 0u;
                float32x4_t v343 = 0u;
                float32x4_t v344 = 0u;
                float32x4_t v345 = 0u;
              }
              uint64_t v197 = (uint64_t)v62->i64 + v70;
              unsigned int v198 = v63[1];
              if (v198 == 127)
              {
                float32x4_t v200 = *(float32x4_t *)(v197 + 16);
                float32x4_t v201 = *(float32x4_t *)(v197 + 32);
                float32x4_t v202 = *(float32x4_t *)(v197 + 48);
                float32x4_t v203 = *(float32x4_t *)(v197 + 64);
                float32x4_t v204 = *(float32x4_t *)(v197 + 80);
                float32x4_t v205 = *(float32x4_t *)(v197 + 96);
                float32x4_t v206 = *(float32x4_t *)(v197 + 112);
                int8x16_t v350 = *(int8x16_t *)v197;
                float32x4_t v351 = v200;
                float32x4_t v352 = v203;
                float32x4_t v353 = v204;
                float32x4_t v358 = v201;
                float32x4_t v359 = v202;
                float32x4_t v360 = v205;
                float32x4_t v361 = v206;
                uint64_t v199 = 128;
              }
              else if (v198 == 3)
              {
                float32x4_t v207 = vld1q_dup_f32((const float *)v197);
                int8x16_t v350 = (int8x16_t)v207;
                float32x4_t v351 = v207;
                float32x4_t v352 = v207;
                float32x4_t v353 = v207;
                float32x4_t v358 = v207;
                float32x4_t v359 = v207;
                float32x4_t v360 = v207;
                float32x4_t v361 = v207;
                uint64_t v199 = 4;
              }
              else if (v63[1])
              {
                uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v350, 128, v197, v198);
              }
              else
              {
                uint64_t v199 = 0;
                float32x4_t v352 = 0u;
                float32x4_t v353 = 0u;
                int8x16_t v350 = 0u;
                float32x4_t v351 = 0u;
                float32x4_t v358 = 0u;
                float32x4_t v359 = 0u;
                float32x4_t v360 = 0u;
                float32x4_t v361 = 0u;
              }
              uint64_t v208 = v197 + v199;
              unsigned int v209 = v63[2];
              if (v209 == 127)
              {
                float32x4_t v211 = *(float32x4_t *)(v208 + 16);
                float32x4_t v212 = *(float32x4_t *)(v208 + 32);
                float32x4_t v213 = *(float32x4_t *)(v208 + 48);
                float32x4_t v214 = *(float32x4_t *)(v208 + 64);
                float32x4_t v215 = *(float32x4_t *)(v208 + 80);
                float32x4_t v216 = *(float32x4_t *)(v208 + 96);
                float32x4_t v217 = *(float32x4_t *)(v208 + 112);
                int8x16_t v338 = *(int8x16_t *)v208;
                float32x4_t v339 = v211;
                float32x4_t v340 = v214;
                float32x4_t v341 = v215;
                float32x4_t v346 = v212;
                float32x4_t v347 = v213;
                float32x4_t v348 = v216;
                float32x4_t v349 = v217;
                uint64_t v210 = 128;
              }
              else if (v209 == 3)
              {
                float32x4_t v218 = vld1q_dup_f32((const float *)v208);
                int8x16_t v338 = (int8x16_t)v218;
                float32x4_t v339 = v218;
                float32x4_t v340 = v218;
                float32x4_t v341 = v218;
                float32x4_t v346 = v218;
                float32x4_t v347 = v218;
                float32x4_t v348 = v218;
                float32x4_t v349 = v218;
                uint64_t v210 = 4;
              }
              else if (v63[2])
              {
                uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v338, 128, v208, v209);
              }
              else
              {
                uint64_t v210 = 0;
                float32x4_t v340 = 0u;
                float32x4_t v341 = 0u;
                int8x16_t v338 = 0u;
                float32x4_t v339 = 0u;
                float32x4_t v346 = 0u;
                float32x4_t v347 = 0u;
                float32x4_t v348 = 0u;
                float32x4_t v349 = 0u;
              }
              uint64_t v219 = v208 + v210;
              unsigned int v220 = v63[3];
              if (v220 == 127)
              {
                float32x4_t v222 = *(float32x4_t *)(v219 + 16);
                float32x4_t v223 = *(float32x4_t *)(v219 + 32);
                float32x4_t v224 = *(float32x4_t *)(v219 + 48);
                float32x4_t v225 = *(float32x4_t *)(v219 + 64);
                float32x4_t v226 = *(float32x4_t *)(v219 + 80);
                float32x4_t v227 = *(float32x4_t *)(v219 + 96);
                float32x4_t v228 = *(float32x4_t *)(v219 + 112);
                int8x16_t v354 = *(int8x16_t *)v219;
                float32x4_t v355 = v222;
                float32x4_t v356 = v225;
                float32x4_t v357 = v226;
                float32x4_t v362 = v223;
                float32x4_t v363 = v224;
                float32x4_t v364 = v227;
                float32x4_t v365 = v228;
                uint64_t v221 = 128;
              }
              else if (v220 == 3)
              {
                float32x4_t v229 = vld1q_dup_f32((const float *)v219);
                int8x16_t v354 = (int8x16_t)v229;
                float32x4_t v355 = v229;
                float32x4_t v356 = v229;
                float32x4_t v357 = v229;
                float32x4_t v362 = v229;
                float32x4_t v363 = v229;
                float32x4_t v364 = v229;
                float32x4_t v365 = v229;
                uint64_t v221 = 4;
              }
              else if (v63[3])
              {
                uint64_t v221 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v354, 128, v219, v220);
              }
              else
              {
                uint64_t v221 = 0;
                float32x4_t v356 = 0u;
                float32x4_t v357 = 0u;
                int8x16_t v354 = 0u;
                float32x4_t v355 = 0u;
                float32x4_t v362 = 0u;
                float32x4_t v363 = 0u;
                float32x4_t v364 = 0u;
                float32x4_t v365 = 0u;
              }
              uint64_t v230 = v219 + v221;
              unsigned int v231 = v63[4];
              if (v231 == 127)
              {
                float32x4_t v233 = *(float32x4_t *)(v230 + 16);
                float32x4_t v234 = *(float32x4_t *)(v230 + 32);
                float32x4_t v235 = *(float32x4_t *)(v230 + 48);
                float32x4_t v236 = *(float32x4_t *)(v230 + 64);
                float32x4_t v237 = *(float32x4_t *)(v230 + 80);
                float32x4_t v238 = *(float32x4_t *)(v230 + 96);
                float32x4_t v239 = *(float32x4_t *)(v230 + 112);
                int8x16_t v366 = *(int8x16_t *)v230;
                float32x4_t v367 = v233;
                float32x4_t v368 = v236;
                float32x4_t v369 = v237;
                float32x4_t v374 = v234;
                float32x4_t v375 = v235;
                float32x4_t v376 = v238;
                float32x4_t v377 = v239;
                uint64_t v232 = 128;
              }
              else if (v231 == 3)
              {
                float32x4_t v240 = vld1q_dup_f32((const float *)v230);
                int8x16_t v366 = (int8x16_t)v240;
                float32x4_t v367 = v240;
                float32x4_t v368 = v240;
                float32x4_t v369 = v240;
                float32x4_t v374 = v240;
                float32x4_t v375 = v240;
                float32x4_t v376 = v240;
                float32x4_t v377 = v240;
                uint64_t v232 = 4;
              }
              else if (v63[4])
              {
                uint64_t v232 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v366, 128, v230, v231);
              }
              else
              {
                uint64_t v232 = 0;
                float32x4_t v368 = 0u;
                float32x4_t v369 = 0u;
                int8x16_t v366 = 0u;
                float32x4_t v367 = 0u;
                float32x4_t v374 = 0u;
                float32x4_t v375 = 0u;
                float32x4_t v376 = 0u;
                float32x4_t v377 = 0u;
              }
              uint64_t v241 = v230 + v232;
              unsigned int v242 = v63[5];
              if (v242 == 127)
              {
                float32x4_t v244 = *(float32x4_t *)(v241 + 16);
                float32x4_t v245 = *(float32x4_t *)(v241 + 32);
                float32x4_t v246 = *(float32x4_t *)(v241 + 48);
                float32x4_t v247 = *(float32x4_t *)(v241 + 64);
                float32x4_t v248 = *(float32x4_t *)(v241 + 80);
                float32x4_t v249 = *(float32x4_t *)(v241 + 96);
                float32x4_t v250 = *(float32x4_t *)(v241 + 112);
                int8x16_t v382 = *(int8x16_t *)v241;
                float32x4_t v383 = v244;
                float32x4_t v384 = v247;
                float32x4_t v385 = v248;
                float32x4_t v390 = v245;
                float32x4_t v391 = v246;
                float32x4_t v392 = v249;
                float32x4_t v393 = v250;
                uint64_t v243 = 128;
              }
              else if (v242 == 3)
              {
                float32x4_t v251 = vld1q_dup_f32((const float *)v241);
                int8x16_t v382 = (int8x16_t)v251;
                float32x4_t v383 = v251;
                float32x4_t v384 = v251;
                float32x4_t v385 = v251;
                float32x4_t v390 = v251;
                float32x4_t v391 = v251;
                float32x4_t v392 = v251;
                float32x4_t v393 = v251;
                uint64_t v243 = 4;
              }
              else if (v63[5])
              {
                uint64_t v243 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v382, 128, v241, v242);
              }
              else
              {
                uint64_t v243 = 0;
                float32x4_t v384 = 0u;
                float32x4_t v385 = 0u;
                int8x16_t v382 = 0u;
                float32x4_t v383 = 0u;
                float32x4_t v390 = 0u;
                float32x4_t v391 = 0u;
                float32x4_t v392 = 0u;
                float32x4_t v393 = 0u;
              }
              uint64_t v252 = v241 + v243;
              unsigned int v253 = v63[6];
              if (v253 == 127)
              {
                float32x4_t v255 = *(float32x4_t *)(v252 + 16);
                float32x4_t v256 = *(float32x4_t *)(v252 + 32);
                float32x4_t v257 = *(float32x4_t *)(v252 + 48);
                float32x4_t v258 = *(float32x4_t *)(v252 + 64);
                float32x4_t v259 = *(float32x4_t *)(v252 + 80);
                float32x4_t v260 = *(float32x4_t *)(v252 + 96);
                float32x4_t v261 = *(float32x4_t *)(v252 + 112);
                int8x16_t v370 = *(int8x16_t *)v252;
                float32x4_t v371 = v255;
                float32x4_t v372 = v258;
                float32x4_t v373 = v259;
                float32x4_t v378 = v256;
                float32x4_t v379 = v257;
                float32x4_t v380 = v260;
                float32x4_t v381 = v261;
                uint64_t v254 = 128;
              }
              else if (v253 == 3)
              {
                float32x4_t v262 = vld1q_dup_f32((const float *)v252);
                int8x16_t v370 = (int8x16_t)v262;
                float32x4_t v371 = v262;
                float32x4_t v372 = v262;
                float32x4_t v373 = v262;
                float32x4_t v378 = v262;
                float32x4_t v379 = v262;
                float32x4_t v380 = v262;
                float32x4_t v381 = v262;
                uint64_t v254 = 4;
              }
              else if (v63[6])
              {
                uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v370, 128, v252, v253);
              }
              else
              {
                uint64_t v254 = 0;
                float32x4_t v372 = 0u;
                float32x4_t v373 = 0u;
                int8x16_t v370 = 0u;
                float32x4_t v371 = 0u;
                float32x4_t v378 = 0u;
                float32x4_t v379 = 0u;
                float32x4_t v380 = 0u;
                float32x4_t v381 = 0u;
              }
              uint64_t v263 = v252 + v254;
              unsigned int v264 = v63[7];
              if (v264 == 127)
              {
                float32x4_t v265 = *(float32x4_t *)(v263 + 16);
                float32x4_t v266 = *(float32x4_t *)(v263 + 32);
                float32x4_t v267 = *(float32x4_t *)(v263 + 48);
                float32x4_t v268 = *(float32x4_t *)(v263 + 64);
                float32x4_t v269 = *(float32x4_t *)(v263 + 80);
                float32x4_t v270 = *(float32x4_t *)(v263 + 96);
                float32x4_t v271 = *(float32x4_t *)(v263 + 112);
                int8x16_t v386 = *(int8x16_t *)v263;
                float32x4_t v387 = v265;
                float32x4_t v388 = v268;
                float32x4_t v389 = v269;
                float32x4_t v394 = v266;
                float32x4_t v395 = v267;
                float32x4_t v396 = v270;
                float32x4_t v397 = v271;
                uint64_t v16 = v320;
                unsigned int v32 = v30 + 1;
              }
              else
              {
                uint64_t v16 = v320;
                unsigned int v32 = v30 + 1;
                if (v264 == 3)
                {
                  float32x4_t v272 = vld1q_dup_f32((const float *)v263);
                  int8x16_t v386 = (int8x16_t)v272;
                  float32x4_t v387 = v272;
                  float32x4_t v388 = v272;
                  float32x4_t v389 = v272;
                  float32x4_t v394 = v272;
                  float32x4_t v395 = v272;
                  float32x4_t v396 = v272;
                  float32x4_t v397 = v272;
                }
                else if (v264)
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v386, 128, v263, v264);
                }
                else
                {
                  float32x4_t v388 = 0u;
                  float32x4_t v389 = 0u;
                  int8x16_t v386 = 0u;
                  float32x4_t v387 = 0u;
                  float32x4_t v394 = 0u;
                  float32x4_t v395 = 0u;
                  float32x4_t v396 = 0u;
                  float32x4_t v397 = 0u;
                }
              }
              unint64_t v273 = v329;
              if (v329)
              {
                unint64_t v274 = 0;
                float32x4_t v275 = &v334 + 8 * (unint64_t)v327 + v328;
                unsigned int v276 = v330;
                do
                {
                  if (v276)
                  {
                    uint64_t v277 = 0;
                    uint64_t v278 = v325 + v326 * v274;
                    do
                    {
                      *(unsigned char *)(v278 + v277) = v275->i8[v277];
                      ++v277;
                      unsigned int v276 = v330;
                    }
                    while (16 * (unint64_t)v330 > v277);
                    unint64_t v273 = v329;
                  }
                  ++v274;
                  v275 += 8;
                }
                while (v274 < v273);
              }
            }
          }
          else
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              int8x16_t v73 = v62[1];
              int8x16_t v74 = v62[2];
              int8x16_t v75 = v62[3];
              int8x16_t v76 = v62[4];
              int8x16_t v77 = v62[5];
              int8x16_t v78 = v62[6];
              int8x16_t v79 = v62[7];
              uint64_t v25 = a11;
              *(int8x16_t *)uint64_t v64 = *v62;
              *(int8x16_t *)(v64 + 16) = v73;
              int v80 = (int8x16_t *)(v64 + a11);
              *(int8x16_t *)(v64 + 32) = v76;
              *(int8x16_t *)(v64 + 48) = v77;
              int8x16_t *v80 = v74;
              v80[1] = v75;
              BOOL v81 = (int8x16_t *)(v64 + a11 + 32);
              *BOOL v81 = v78;
              v81[1] = v79;
              uint64_t v67 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              if (v66 == 3)
              {
                float32x4_t v71 = vld1q_dup_f32((const float *)v62->i32);
                *(float32x4_t *)uint64_t v64 = v71;
                *(float32x4_t *)(v64 + 16) = v71;
                *(float32x4_t *)(v64 + 32) = v71;
                *(float32x4_t *)(v64 + 48) = v71;
                unint64_t v72 = (float32x4_t *)(v64 + a11);
                *unint64_t v72 = v71;
                v72[1] = v71;
                v72[2] = v71;
                v72[3] = v71;
                uint64_t v67 = 4;
              }
              else if (*v63)
              {
                uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v67 = 0;
                *(_OWORD *)(v64 + 32) = 0u;
                *(_OWORD *)(v64 + 48) = 0u;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v68 = (_OWORD *)(v64 + a11);
                v68[2] = 0u;
                v68[3] = 0u;
                _OWORD *v68 = 0u;
                v68[1] = 0u;
              }
            }
            uint64_t v82 = (uint64_t)v62->i64 + v67;
            uint64_t v83 = (float32x4_t *)(v64 + v304);
            unsigned int v84 = v63[1];
            if (v84 == 127)
            {
              float32x4_t v89 = *(float32x4_t *)(v82 + 16);
              long long v90 = *(_OWORD *)(v82 + 32);
              long long v91 = *(_OWORD *)(v82 + 48);
              float32x4_t v92 = *(float32x4_t *)(v82 + 64);
              float32x4_t v93 = *(float32x4_t *)(v82 + 80);
              long long v94 = *(_OWORD *)(v82 + 96);
              long long v95 = *(_OWORD *)(v82 + 112);
              *uint64_t v83 = *(float32x4_t *)v82;
              v83[1] = v89;
              long long v96 = (_OWORD *)((char *)v83->f32 + v25);
              v83[2] = v92;
              v83[3] = v93;
              _OWORD *v96 = v90;
              v96[1] = v91;
              long long v97 = (_OWORD *)((char *)v83[2].f32 + v25);
              _OWORD *v97 = v94;
              v97[1] = v95;
              uint64_t v85 = 128;
            }
            else if (v84 == 3)
            {
              float32x4_t v87 = vld1q_dup_f32((const float *)v82);
              *uint64_t v83 = v87;
              v83[1] = v87;
              v83[2] = v87;
              v83[3] = v87;
              unsigned int v88 = (float32x4_t *)((char *)v83 + v25);
              float32x4_t *v88 = v87;
              v88[1] = v87;
              v88[2] = v87;
              v88[3] = v87;
              uint64_t v85 = 4;
            }
            else if (v63[1])
            {
              uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v304), v25, v82, v84);
            }
            else
            {
              uint64_t v85 = 0;
              v83[2] = 0u;
              v83[3] = 0u;
              *uint64_t v83 = 0u;
              v83[1] = 0u;
              uint64_t v86 = (_OWORD *)((char *)v83->f32 + v25);
              v86[2] = 0u;
              v86[3] = 0u;
              _OWORD *v86 = 0u;
              v86[1] = 0u;
            }
            uint64_t v98 = v82 + v85;
            uint64_t v99 = (int8x16_t *)(v64 + 64);
            unsigned int v100 = v63[2];
            if (v100 == 127)
            {
              long long v105 = *(_OWORD *)(v98 + 16);
              long long v106 = *(_OWORD *)(v98 + 32);
              long long v107 = *(_OWORD *)(v98 + 48);
              long long v108 = *(_OWORD *)(v98 + 64);
              long long v109 = *(_OWORD *)(v98 + 80);
              long long v110 = *(_OWORD *)(v98 + 96);
              long long v111 = *(_OWORD *)(v98 + 112);
              *uint64_t v99 = *(int8x16_t *)v98;
              *(_OWORD *)(v64 + 80) = v105;
              float32x4_t v112 = &v99->i8[v25];
              *(_OWORD *)(v64 + 96) = v108;
              *(_OWORD *)(v64 + 112) = v109;
              *(_OWORD *)float32x4_t v112 = v106;
              *((_OWORD *)v112 + 1) = v107;
              v112 += 32;
              *(_OWORD *)float32x4_t v112 = v110;
              *((_OWORD *)v112 + 1) = v111;
              uint64_t v101 = 128;
            }
            else if (v100 == 3)
            {
              float32x4_t v103 = vld1q_dup_f32((const float *)v98);
              *(float32x4_t *)(v64 + 64) = v103;
              *(float32x4_t *)(v64 + 80) = v103;
              *(float32x4_t *)(v64 + 96) = v103;
              *(float32x4_t *)(v64 + 112) = v103;
              uint64_t v104 = (float32x4_t *)&v99->i8[v25];
              *uint64_t v104 = v103;
              v104[1] = v103;
              v104[2] = v103;
              v104[3] = v103;
              uint64_t v101 = 4;
            }
            else if (v63[2])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, v25, v98, v100);
            }
            else
            {
              uint64_t v101 = 0;
              *(_OWORD *)(v64 + 96) = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              *uint64_t v99 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              BOOL v102 = &v99->i8[v25];
              *((_OWORD *)v102 + 2) = 0u;
              *((_OWORD *)v102 + 3) = 0u;
              *(_OWORD *)BOOL v102 = 0u;
              *((_OWORD *)v102 + 1) = 0u;
            }
            uint64_t v113 = v98 + v101;
            long long v114 = (int8x16_t *)&v83[4];
            unsigned int v115 = v63[3];
            if (v115 == 127)
            {
              float32x4_t v120 = *(float32x4_t *)(v113 + 16);
              long long v121 = *(_OWORD *)(v113 + 32);
              long long v122 = *(_OWORD *)(v113 + 48);
              float32x4_t v123 = *(float32x4_t *)(v113 + 64);
              float32x4_t v124 = *(float32x4_t *)(v113 + 80);
              long long v125 = *(_OWORD *)(v113 + 96);
              long long v126 = *(_OWORD *)(v113 + 112);
              *long long v114 = *(int8x16_t *)v113;
              v83[5] = v120;
              long long v127 = &v114->i8[v25];
              v83[6] = v123;
              v83[7] = v124;
              *(_OWORD *)long long v127 = v121;
              *((_OWORD *)v127 + 1) = v122;
              v127 += 32;
              *(_OWORD *)long long v127 = v125;
              *((_OWORD *)v127 + 1) = v126;
              uint64_t v116 = 128;
            }
            else if (v115 == 3)
            {
              float32x4_t v118 = vld1q_dup_f32((const float *)v113);
              v83[4] = v118;
              v83[5] = v118;
              v83[6] = v118;
              v83[7] = v118;
              unsigned int v119 = (float32x4_t *)&v114->i8[v25];
              *unsigned int v119 = v118;
              v119[1] = v118;
              v119[2] = v118;
              v119[3] = v118;
              uint64_t v116 = 4;
            }
            else if (v63[3])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, v25, v113, v115);
            }
            else
            {
              uint64_t v116 = 0;
              v83[6] = 0u;
              v83[7] = 0u;
              *long long v114 = 0u;
              v83[5] = 0u;
              uint64_t v117 = &v114->i8[v25];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            uint64_t v128 = v113 + v116;
            long long v129 = (float32x4_t *)(v64 + v303);
            unsigned int v130 = v63[4];
            if (v130 == 127)
            {
              float32x4_t v135 = *(float32x4_t *)(v128 + 16);
              long long v136 = *(_OWORD *)(v128 + 32);
              long long v137 = *(_OWORD *)(v128 + 48);
              float32x4_t v138 = *(float32x4_t *)(v128 + 64);
              float32x4_t v139 = *(float32x4_t *)(v128 + 80);
              long long v140 = *(_OWORD *)(v128 + 96);
              long long v141 = *(_OWORD *)(v128 + 112);
              *long long v129 = *(float32x4_t *)v128;
              v129[1] = v135;
              float32x4_t v142 = (_OWORD *)((char *)v129->f32 + v25);
              v129[2] = v138;
              v129[3] = v139;
              _OWORD *v142 = v136;
              v142[1] = v137;
              float32x4_t v143 = (_OWORD *)((char *)v129[2].f32 + v25);
              *float32x4_t v143 = v140;
              v143[1] = v141;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v133 = vld1q_dup_f32((const float *)v128);
              *long long v129 = v133;
              v129[1] = v133;
              v129[2] = v133;
              v129[3] = v133;
              unsigned int v134 = (float32x4_t *)((char *)v129 + v25);
              *unsigned int v134 = v133;
              v134[1] = v133;
              v134[2] = v133;
              v134[3] = v133;
              uint64_t v131 = 4;
            }
            else if (v63[4])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v303), v25, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              v129[2] = 0u;
              v129[3] = 0u;
              *long long v129 = 0u;
              v129[1] = 0u;
              uint64_t v132 = (_OWORD *)((char *)v129->f32 + v25);
              v132[2] = 0u;
              v132[3] = 0u;
              _OWORD *v132 = 0u;
              v132[1] = 0u;
            }
            uint64_t v144 = v128 + v131;
            uint64_t v145 = v64 + 6 * a11;
            unsigned int v146 = v63[5];
            if (v146 == 127)
            {
              long long v151 = *(_OWORD *)(v144 + 16);
              long long v152 = *(_OWORD *)(v144 + 32);
              long long v153 = *(_OWORD *)(v144 + 48);
              long long v154 = *(_OWORD *)(v144 + 64);
              long long v155 = *(_OWORD *)(v144 + 80);
              long long v156 = *(_OWORD *)(v144 + 96);
              long long v157 = *(_OWORD *)(v144 + 112);
              *(_OWORD *)uint64_t v145 = *(_OWORD *)v144;
              *(_OWORD *)(v145 + 16) = v151;
              float32x4_t v158 = (_OWORD *)(v145 + v25);
              *(_OWORD *)(v145 + 32) = v154;
              *(_OWORD *)(v145 + 48) = v155;
              *float32x4_t v158 = v152;
              v158[1] = v153;
              long long v159 = (_OWORD *)(v145 + v25 + 32);
              _OWORD *v159 = v156;
              v159[1] = v157;
              uint64_t v147 = 128;
            }
            else if (v146 == 3)
            {
              float32x4_t v149 = vld1q_dup_f32((const float *)v144);
              *(float32x4_t *)uint64_t v145 = v149;
              *(float32x4_t *)(v145 + 16) = v149;
              *(float32x4_t *)(v145 + 32) = v149;
              *(float32x4_t *)(v145 + 48) = v149;
              uint64_t v150 = (float32x4_t *)(v145 + v25);
              float32x4_t *v150 = v149;
              v150[1] = v149;
              v150[2] = v149;
              v150[3] = v149;
              uint64_t v147 = 4;
            }
            else if (v63[5])
            {
              uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v145, v25, v144, v146);
            }
            else
            {
              uint64_t v147 = 0;
              *(_OWORD *)(v145 + 32) = 0u;
              *(_OWORD *)(v145 + 48) = 0u;
              *(_OWORD *)uint64_t v145 = 0u;
              *(_OWORD *)(v145 + 16) = 0u;
              uint64_t v148 = (_OWORD *)(v145 + v25);
              v148[2] = 0u;
              v148[3] = 0u;
              _OWORD *v148 = 0u;
              v148[1] = 0u;
            }
            uint64_t v160 = v144 + v147;
            uint64_t v161 = (int8x16_t *)&v129[4];
            unsigned int v162 = v63[6];
            if (v162 == 127)
            {
              float32x4_t v167 = *(float32x4_t *)(v160 + 16);
              long long v168 = *(_OWORD *)(v160 + 32);
              long long v169 = *(_OWORD *)(v160 + 48);
              float32x4_t v170 = *(float32x4_t *)(v160 + 64);
              float32x4_t v171 = *(float32x4_t *)(v160 + 80);
              long long v172 = *(_OWORD *)(v160 + 96);
              long long v173 = *(_OWORD *)(v160 + 112);
              *uint64_t v161 = *(int8x16_t *)v160;
              v129[5] = v167;
              long long v174 = &v161->i8[v25];
              v129[6] = v170;
              v129[7] = v171;
              *(_OWORD *)long long v174 = v168;
              *((_OWORD *)v174 + 1) = v169;
              v174 += 32;
              *(_OWORD *)long long v174 = v172;
              *((_OWORD *)v174 + 1) = v173;
              uint64_t v163 = 128;
            }
            else if (v162 == 3)
            {
              float32x4_t v165 = vld1q_dup_f32((const float *)v160);
              v129[4] = v165;
              v129[5] = v165;
              v129[6] = v165;
              v129[7] = v165;
              uint64_t v166 = (float32x4_t *)&v161->i8[v25];
              *uint64_t v166 = v165;
              v166[1] = v165;
              v166[2] = v165;
              v166[3] = v165;
              uint64_t v163 = 4;
            }
            else if (v63[6])
            {
              uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, v25, v160, v162);
            }
            else
            {
              uint64_t v163 = 0;
              v129[6] = 0u;
              v129[7] = 0u;
              *uint64_t v161 = 0u;
              v129[5] = 0u;
              uint64_t v164 = &v161->i8[v25];
              *((_OWORD *)v164 + 2) = 0u;
              *((_OWORD *)v164 + 3) = 0u;
              *(_OWORD *)uint64_t v164 = 0u;
              *((_OWORD *)v164 + 1) = 0u;
            }
            unsigned int v32 = v30 + 1;
            uint64_t v175 = v160 + v163;
            long long v176 = (int8x16_t *)(v145 + 64);
            unsigned int v177 = v63[7];
            if (v177 == 127)
            {
              long long v181 = *(_OWORD *)(v175 + 16);
              long long v182 = *(_OWORD *)(v175 + 32);
              long long v183 = *(_OWORD *)(v175 + 48);
              long long v184 = *(_OWORD *)(v175 + 64);
              long long v185 = *(_OWORD *)(v175 + 80);
              long long v186 = *(_OWORD *)(v175 + 96);
              long long v187 = *(_OWORD *)(v175 + 112);
              *long long v176 = *(int8x16_t *)v175;
              *(_OWORD *)(v145 + 80) = v181;
              long long v188 = &v176->i8[v25];
              *(_OWORD *)(v145 + 96) = v184;
              *(_OWORD *)(v145 + 112) = v185;
              *(_OWORD *)long long v188 = v182;
              *((_OWORD *)v188 + 1) = v183;
              v188 += 32;
              *(_OWORD *)long long v188 = v186;
              *((_OWORD *)v188 + 1) = v187;
              a7 = v310;
              uint64_t v16 = v320;
            }
            else
            {
              uint64_t v16 = v320;
              if (v177 == 3)
              {
                float32x4_t v179 = vld1q_dup_f32((const float *)v175);
                *(float32x4_t *)(v145 + 64) = v179;
                *(float32x4_t *)(v145 + 80) = v179;
                *(float32x4_t *)(v145 + 96) = v179;
                *(float32x4_t *)(v145 + 112) = v179;
                uint64_t v180 = (float32x4_t *)&v176->i8[v25];
                *uint64_t v180 = v179;
                v180[1] = v179;
                v180[2] = v179;
                v180[3] = v179;
              }
              else if (v177)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v176, v25, v175, v177);
              }
              else
              {
                *(_OWORD *)(v145 + 96) = 0u;
                *(_OWORD *)(v145 + 112) = 0u;
                *long long v176 = 0u;
                *(_OWORD *)(v145 + 80) = 0u;
                uint64_t v178 = &v176->i8[v25];
                *((_OWORD *)v178 + 2) = 0u;
                *((_OWORD *)v178 + 3) = 0u;
                *(_OWORD *)uint64_t v178 = 0u;
                *((_OWORD *)v178 + 1) = 0u;
              }
              a7 = v310;
            }
          }
          BOOL v21 = v30 == v311 >> 3;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v302;
      }
      while (!v21);
    }
  }
}