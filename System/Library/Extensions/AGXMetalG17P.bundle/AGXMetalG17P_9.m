uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTiled(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;

  if (!a5) {
    return 0;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(void *)(a1 + 208);
  v10 = *(void *)(a1 + 488);
  v11 = 8 * *(unsigned int *)(a1 + 112) * (unint64_t)*(unsigned __int8 *)(v9 + a4 + 88);
  v12 = *(_DWORD *)(v9 + 56);
  while (1)
  {
    v26 = v10 && *(_DWORD *)(v10 + 1080) > v7 ? *(unsigned __int8 *)(a1 + 57) : 0;
    v27 = 0;
    v28 = v11 >> (v26 != 0);
    if (v28 > 127)
    {
      if (v28 > 511)
      {
        if (v28 == 512)
        {
          v27 = 16;
          v29 = 16;
        }
        else
        {
          v29 = 0;
          if (v28 == 1024)
          {
            v29 = 8;
            v27 = 16;
          }
        }
      }
      else if (v28 == 128)
      {
        v27 = 32;
        v29 = 32;
      }
      else
      {
        v29 = 0;
        if (v28 == 256)
        {
          v29 = 16;
          v27 = 32;
        }
      }
    }
    else
    {
      v29 = 0;
      switch(v28)
      {
        case 4:
          v29 = 128;
          v27 = 256;
          break;
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
          break;
        case 8:
          v27 = 128;
          v29 = 128;
          break;
        case 16:
          v29 = 64;
          v27 = 128;
          break;
        case 32:
          v27 = 64;
          v29 = 64;
          break;
        default:
          if (v28 == 64)
          {
            v29 = 32;
            v27 = 64;
          }
          break;
      }
    }
    v30 = -1 << v7;
    if (v12) {
      v31 = ~v30;
    }
    else {
      v31 = 0;
    }
    v32 = (v31 + a3) >> v7;
    if (v32 <= 1) {
      v32 = 1;
    }
    v33 = (v31 + a2) >> v7;
    if (v33 <= 1) {
      v33 = 1;
    }
    if (v33 < v27 || v32 < v29) {
      break;
    }
    if (v28 > 127)
    {
      if (v28 == 1024) {
        v13 = 16;
      }
      else {
        v13 = 0;
      }
      if (v28 == 1024) {
        v14 = 8;
      }
      else {
        v14 = 0;
      }
      if (v28 == 512)
      {
        v13 = 16;
        v14 = 16;
      }
      if (v28 == 256) {
        v15 = 32;
      }
      else {
        v15 = 0;
      }
      if (v28 == 256) {
        v16 = 16;
      }
      else {
        v16 = 0;
      }
      if (v28 == 128)
      {
        v15 = 32;
        v16 = 32;
      }
      if (v28 <= 511)
      {
        v13 = v15;
        v14 = v16;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      switch(v28)
      {
        case 4:
          v14 = 128;
          v13 = 256;
          break;
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
          break;
        case 8:
          v13 = 128;
          v14 = 128;
          break;
        case 16:
          v14 = 64;
          v13 = 128;
          break;
        case 32:
          v13 = 64;
          v14 = 64;
          break;
        default:
          if (v28 == 64) {
            v13 = 64;
          }
          else {
            v13 = 0;
          }
          if (v28 == 64) {
            v14 = 32;
          }
          else {
            v14 = 0;
          }
          break;
      }
    }
    v17 = ~v30;
    v18 = (a2 - 1 + v13) / v13;
    v19 = (a3 - 1 + v14) / v14;
    LODWORD(v20) = v19 >> v7;
    if ((v18 & ~v30) != 0) {
      v20 = v20;
    }
    else {
      v20 = 0;
    }
    v21 = ((v19 * v18) >> v6) + v20;
    v22 = (v19 & v17) == 0;
    if ((v19 & v17) != 0) {
      v23 = v18 >> v7;
    }
    else {
      v23 = 0;
    }
    v24 = v21 + v23;
    if (!v22) {
      v21 = v24 + 1;
    }
    if ((v18 & v17) != 0) {
      v25 = v21;
    }
    else {
      v25 = v24;
    }
    v8 += v25 << 14;
    ++v7;
    v6 += 2;
    if (a5 == v7) {
      return v8;
    }
  }
  v8 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTwiddled(a1, v33, v32, a4, v7, a5);
  return v8;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTwiddled(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6 = a6 - a5;
  if (a6 <= a5) {
    return 0;
  }
  unsigned int v8 = 1 << -(char)__clz(a2 - 1);
  unsigned int v9 = 1 << -(char)__clz(a3 - 1);
  unint64_t v10 = *(unsigned int *)(a1 + 112) * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 208) + a4 + 88);
  unint64_t v11 = *(unsigned int *)(a1 + 236);
  uint64_t v12 = *(void *)(a1 + 488);
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 380) & 0xFF00;
    if (v12)
    {
      unsigned int v14 = *(_DWORD *)(v12 + 1080);
      if (v13 == 768)
      {
        uint64_t result = 0;
        uint64_t v16 = v11;
        do
        {
          unint64_t v17 = v10 * v8 * v9;
          if (v14 > a5) {
            v17 >>= *(unsigned char *)(a1 + 57) != 0;
          }
          ++a5;
          if (v17 < v11) {
            uint64_t v16 = 128;
          }
          result += (v17 + v16 - 1) & -v16;
          v9 >>= v9 > 1;
          v8 >>= v8 > 1;
        }
        while (a6 != a5);
      }
      else
      {
        uint64_t result = 0;
        uint64_t v21 = v11;
        do
        {
          unint64_t v22 = v10 * v8 * v9;
          if (v14 > a5) {
            v22 >>= *(unsigned char *)(a1 + 57) != 0;
          }
          ++a5;
          if (v22 < v11) {
            uint64_t v21 = 128;
          }
          result += (v22 + v21 - 1) & -v21;
          v9 >>= v9 > 1;
          v8 >>= v8 > 1;
        }
        while (a6 != a5);
      }
    }
    else if (v13 == 768)
    {
      uint64_t result = 0;
      uint64_t v19 = v11;
      do
      {
        unint64_t v20 = v10 * v8 * v9;
        if (v20 < v11) {
          uint64_t v19 = 128;
        }
        result += (v20 + v19 - 1) & -v19;
        v9 >>= v9 > 1;
        v8 >>= v8 > 1;
        --v6;
      }
      while (v6);
    }
    else
    {
      uint64_t result = 0;
      uint64_t v23 = v11;
      do
      {
        unint64_t v24 = v10 * v8 * v9;
        if (v24 < v11) {
          uint64_t v23 = 128;
        }
        result += (v24 + v23 - 1) & -v23;
        v9 >>= v9 > 1;
        v8 >>= v8 > 1;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    uint64_t result = 0;
    if (v12)
    {
      do
      {
        unint64_t v18 = v10 * v8 * v9;
        if (*(_DWORD *)(v12 + 1080) > a5) {
          v18 >>= *(unsigned char *)(a1 + 57) != 0;
        }
        ++a5;
        result += (v18 + 127) & 0xFFFFFFFFFFFFFF80;
        v9 >>= v9 > 1;
        v8 >>= v8 > 1;
      }
      while (a6 != a5);
    }
    else
    {
      do
      {
        result += (v10 * v8 * v9 + 127) & 0xFFFFFFFFFFFFFF80;
        v9 >>= v9 > 1;
        v8 >>= v8 > 1;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  unsigned int v6 = (*(_DWORD *)(a1 + 216) + v5 - 1) / *(_DWORD *)(a1 + 216);
  if (*(_DWORD *)(a1 + 132) <= 1u) {
    int v7 = 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 132);
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 220) + v7 - 1) / *(_DWORD *)(a1 + 220);
  if (*(unsigned char *)(a1 + 380) == 2) {
    return AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTiled(a1, v6, v8, a3, a2);
  }
  else {
    return AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTwiddled(a1, v6, v8, a3, 0, a2);
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unint64_t v10 = *(__IOSurface **)(a1 + 168);
  if (!v10 || ((int v11 = *(unsigned __int8 *)(a1 + 380), v11 != 3) ? (v12 = v11 == 0) : (v12 = 1), !v12))
  {
    unsigned int v16 = *(_DWORD *)(a1 + 368);
    uint64_t v17 = a2 / v16;
    if (a5) {
      int64_t v18 = *(void *)(a1 + 8 * (a5 - 1) + 336);
    }
    else {
      int64_t v18 = 0;
    }
    int v19 = v17 * v16;
    uint64_t v20 = *(void *)(a1 + 380);
    if (v16 <= a2 && (v20 & 0x10000) != 0)
    {
      uint64_t v21 = *(unsigned int *)(a1 + 236);
      if (v21)
      {
        if ((*(void *)(a1 + 380) & 0xFF00) == 0x400)
        {
          unint64_t v22 = (8
                             * (6 * v17)
                             * (((v21 << 8)
                               + ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5)+ v21- 1) & -v21)- 1) & -(uint64_t)(v21 << 8))/ v21);
        }
        else
        {
          if (*(void *)(a1 + 380))
          {
            unint64_t v28 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5)+ v21- 1) & -v21;
          }
          else
          {
            unint64_t v28 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a5)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
            LODWORD(v21) = *(_DWORD *)(a1 + 236);
          }
          unint64_t v22 = (8
                             * v17
                             * ((v28 + (v21 << 8) - 1) & -(uint64_t)(v21 << 8))
                             / v21);
        }
      }
      else
      {
        if ((*(void *)(a1 + 380) & 0xFF00) == 0x400)
        {
          unint64_t v27 = 6
              * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5);
        }
        else if (*(void *)(a1 + 380))
        {
          unint64_t v27 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5);
        }
        else
        {
          unint64_t v27 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a5)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
        }
        unint64_t v22 = v27 * v17;
      }
      v18 += v22;
      uint64_t v20 = *(void *)(a1 + 380);
    }
    uint64_t v29 = (unsigned __int16)v20 & 0xFF00;
    if (a2 == v19 || v29 != 1024)
    {
      if (!a4 || v29 != 768)
      {
LABEL_46:
        if (a3) {
          v18 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a3, a5);
        }
        return *(void *)(a1 + 72) + v18;
      }
      unint64_t v36 = *(unsigned int *)(a1 + 236);
      if (v36) {
        unint64_t v35 = (8
      }
                           * a4
                           * ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a5)+ (v36 << 8)- 1) & -(uint64_t)(v36 << 8))/ v36);
      else {
        unint64_t v35 = (*(void *)(a1 + 328)
      }
             + AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5))* a4;
    }
    else
    {
      uint64_t v30 = a2 - v19;
      uint64_t v31 = *(unsigned int *)(a1 + 236);
      unint64_t v32 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a5);
      uint64_t v33 = (v32 + v31 - 1) & -v31;
      if (!v31) {
        uint64_t v33 = v32;
      }
      unint64_t v34 = v33 * v30;
      unint64_t v35 = (8
                         * v30
                         * (((v31 << 8) + v33 - 1) & (unint64_t)-(uint64_t)(v31 << 8))
                         / v31);
      if (!v31) {
        unint64_t v35 = v34;
      }
    }
    v18 += v35;
    goto LABEL_46;
  }
  size_t v13 = *(_DWORD *)(a1 + 176) + a5;
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v10, 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0) {
    uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  }
  else {
    uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v13);
  }
  uint64_t v23 = BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
  size_t v24 = *(unsigned int *)(a1 + 176);
  v25 = IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), 0);
  if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0) {
    uint64_t v26 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
  }
  else {
    uint64_t v26 = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v24);
  }
  int64_t v18 = &v25[v23] - &BaseAddressOfPlane[v26];
  return *(void *)(a1 + 72) + v18;
}

size_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      return IOSurfaceGetWidthInCompressedTilesOfPlane();
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a1 + 128);
      MTLPixelFormat v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 208);
      uint64_t v9 = *(unsigned __int8 *)(a1 + a2 + 57);
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      uint64_t v10 = *(unsigned __int8 *)(v8 + 49);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v18, a2, v7, v10);
      if (a2 == 1 && (*(_DWORD *)(v8 + 72) & 0xFFFFFFFE) == 2) {
        unsigned int v6 = (v6 + 1) >> 1;
      }
      unsigned int v11 = LOBYTE(v18[0]);
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v20, a2, v7, v10);
      if ((v9 - 1) > 2) {
        unint64_t v12 = (BYTE1(v20) * v20 * (unint64_t)BYTE2(v20)) >> 3;
      }
      else {
        unint64_t v12 = *((void *)&v22 + v9 + 1);
      }
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      unint64_t v13 = v12 * ((v6 + v11 - 1) / v11);
      long long v20 = 0u;
      long long v21 = 0u;
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v20, a2, v7, v10);
      if ((v9 - 1) > 2) {
        unint64_t v14 = (BYTE1(v20) * v20 * (unint64_t)BYTE2(v20)) >> 3;
      }
      else {
        unint64_t v14 = *((void *)&v22 + v9 + 1);
      }
      return v13 / v14;
    }
  }
  else if (*(unsigned char *)(a1 + 380))
  {
    return 0;
  }
  else if (*(void *)(a1 + 168))
  {
    return IOSurfaceGetBytesPerRowOfPlane(*(IOSurfaceRef *)(a1 + 168), *(_DWORD *)(a1 + 176) + a2) >> 4;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 208);
    uint64_t v5 = *(void *)(a1 + 32);
    if ((unint64_t)(v5 - 624) >= 4 && (unint64_t)(v5 - 550) > 1)
    {
      uint64_t v15 = *(void *)(a1 + 24);
      unint64_t v16 = *(void *)(a1 + 152);
      if (v15 == 9)
      {
        unint64_t v17 = (unint64_t)*(unsigned __int8 *)(v4 + 49) << 14;
        if (v17 < v16) {
          unint64_t v16 = v17;
        }
      }
      return v16 >> 4;
    }
    else
    {
      return ((*(unsigned int *)(a1 + 128) * (unint64_t)*(unsigned __int8 *)(v4 + a2 + 88) + 15) & 0x1FFFFFFFFF0) >> 4;
    }
  }
}

size_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      return IOSurfaceGetBytesPerTileDataOfPlane() * WidthInCompressedTilesOfPlane;
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(a1 + 128);
      MTLPixelFormat v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 208);
      uint64_t v13 = *(unsigned __int8 *)(a1 + a2 + 57);
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      uint64_t v14 = *(unsigned __int8 *)(v12 + 49);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v18, a2, v11, v14);
      if (a2 == 1 && (*(_DWORD *)(v12 + 72) & 0xFFFFFFFE) == 2) {
        unsigned int v10 = (v10 + 1) >> 1;
      }
      unsigned int v15 = LOBYTE(v18[0]);
      uint64_t v21 = 0;
      memset(v20, 0, sizeof(v20));
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v20, a2, v11, v14);
      if ((v13 - 1) > 2) {
        unint64_t v16 = (BYTE1(v20[0]) * LOBYTE(v20[0]) * (unint64_t)BYTE2(v20[0])) >> 3;
      }
      else {
        unint64_t v16 = *((void *)&v20[2] + v13 + 1);
      }
      return v16 * ((v10 + v15 - 1) / v15);
    }
  }
  else if (*(unsigned char *)(a1 + 380))
  {
    return 0;
  }
  else
  {
    uint64_t v4 = *(__IOSurface **)(a1 + 168);
    if (v4)
    {
      size_t v5 = *(_DWORD *)(a1 + 176) + a2;
      return IOSurfaceGetBytesPerRowOfPlane(v4, v5);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 208);
      uint64_t v9 = *(void *)(a1 + 32);
      if ((unint64_t)(v9 - 624) >= 4 && (unint64_t)(v9 - 550) > 1)
      {
        size_t result = *(void *)(a1 + 152);
        if (*(void *)(a1 + 24) == 9)
        {
          unint64_t v17 = (unint64_t)*(unsigned __int8 *)(v8 + 49) << 14;
          if (v17 < result) {
            return v17;
          }
        }
      }
      else
      {
        return (*(unsigned int *)(a1 + 128) * (unint64_t)*(unsigned __int8 *)(v8 + a2 + 88) + 15) & 0x1FFFFFFFFF0;
      }
    }
  }
  return result;
}

unint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 380);
  if ((_BYTE)v2) {
    BOOL v3 = *(void *)(a1 + 380) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  unint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, *(_DWORD *)(a1 + 64), a2);
  if (*(unsigned char *)(a1 + 232))
  {
    uint64_t v6 = *(void *)(a1 + 320);
    return (result + v6 - 1) & -v6;
  }
  if ((_BYTE)v2)
  {
    if ((v2 & 0xFFFF00) == 0x300
      || ((v7 = v2 & 0x1FF00, (v2 & 0xFFFF00) != 0x400) ? (BOOL v8 = v7 == 65792) : (BOOL v8 = 1),
          !v8 ? (BOOL v9 = v7 == 66560) : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v7 == 66048) : (BOOL v10 = 1),
          v10))
    {
      if (*(unsigned char *)(a1 + 16)) {
        return (result + 127) & 0xFFFFFFFFFFFFFF80;
      }
      uint64_t v11 = (v2 >> 16) & 1;
      if (BYTE1(v2) == 1) {
        char v12 = BYTE2(v2) & 1;
      }
      else {
        char v12 = 0;
      }
      if (BYTE1(v2) != 2) {
        LOBYTE(v11) = 0;
      }
      if (v12) {
        LOBYTE(v11) = 1;
      }
      if (BYTE1(v2) - 3 >= 2) {
        char v13 = v11;
      }
      else {
        char v13 = 1;
      }
      if (result >= 0x4000 && (v2 - 1) <= 1u && (v13 & 1) != 0)
      {
        uint64_t v6 = 0x4000;
      }
      else
      {
        BOOL v15 = (v2 & 0x10000) != 0 && BYTE1(v2) == 2 && v2 == 0;
        uint64_t v6 = 128;
        if (!v15) {
          uint64_t v6 = 16;
        }
        if ((v2 - 1) < 3u) {
          uint64_t v6 = 128;
        }
      }
      return (result + v6 - 1) & -v6;
    }
  }
  return result;
}

uint64_t AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 64);
  unsigned int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(a1, a2);
  unsigned int v5 = (*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 216) - 1) / *(_DWORD *)(a1 + 216);
  unsigned int v6 = (*(_DWORD *)(a1 + 132) + *(_DWORD *)(a1 + 220) - 1) / *(_DWORD *)(a1 + 220);
  if (v5 < 2) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = 32 - __clz(~(-1 << -(char)__clz(v5 - 1)));
  }
  if (v6 < 2) {
    unsigned int v8 = 0;
  }
  else {
    unsigned int v8 = 32 - __clz(~(-1 << -(char)__clz(v6 - 1)));
  }
  unint64_t v9 = *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unint64_t v10 = *(unsigned int *)(a1 + 236);
  if (v3 < 2)
  {
LABEL_13:
    unsigned int v11 = 1;
  }
  else
  {
    unsigned int v11 = 0;
    while (1)
    {
      char v12 = v7 - v11;
      if (v7 < v11) {
        char v12 = 0;
      }
      char v13 = v8 - v11;
      if (v8 < v11) {
        char v13 = 0;
      }
      if (v9 << (v12 + v13) < v10) {
        break;
      }
      if (v3 == ++v11) {
        goto LABEL_13;
      }
    }
  }
  int v14 = 0;
  unsigned int v15 = *(_DWORD *)(a1 + 136);
  BOOL v16 = v5 >= 2;
  int v17 = -1 << -(char)__clz(v6 - 1);
  unsigned int v18 = 32 - __clz(~(-1 << -(char)__clz(v5 - 1)));
  if (!v16) {
    unsigned int v18 = 0;
  }
  unsigned int v19 = 32 - __clz(~v17);
  if (v6 >= 2) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = 0;
  }
  if (v15 >> v11 <= 1) {
    int v21 = 1;
  }
  else {
    int v21 = v15 >> v11;
  }
  if (v3 >= 2)
  {
    unsigned int v22 = v3 - v11;
    if (v3 > v11)
    {
      if (v22 >= 8)
      {
        unsigned int v24 = v22 & 0xFFFFFFF8;
        int32x4_t v25 = vaddq_s32(vdupq_n_s32(v11), (int32x4_t)xmmword_242EA7E20);
        uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(v18);
        uint32x4_t v27 = (uint32x4_t)vdupq_n_s32(v20);
        uint64x2_t v28 = (uint64x2_t)vdupq_n_s64(v9);
        int32x4_t v29 = 0uLL;
        v30.i64[0] = 0x400000004;
        v30.i64[1] = 0x400000004;
        v31.i64[0] = 0x7F0000007FLL;
        v31.i64[1] = 0x7F0000007FLL;
        v32.i64[0] = 0x800000008;
        v32.i64[1] = 0x800000008;
        unsigned int v33 = v22 & 0xFFFFFFF8;
        int32x4_t v34 = 0uLL;
        do
        {
          uint32x4_t v35 = (uint32x4_t)vaddq_s32(v25, v30);
          int32x4_t v36 = vaddq_s32((int32x4_t)vqsubq_u32(v26, (uint32x4_t)v25), (int32x4_t)vqsubq_u32(v27, (uint32x4_t)v25));
          int32x4_t v37 = vaddq_s32((int32x4_t)vqsubq_u32(v26, v35), (int32x4_t)vqsubq_u32(v27, v35));
          v38.i64[0] = v36.u32[0];
          v38.i64[1] = v36.u32[1];
          uint64x2_t v39 = v38;
          v38.i64[0] = v36.u32[2];
          v38.i64[1] = v36.u32[3];
          uint64x2_t v40 = v38;
          v38.i64[0] = v37.u32[0];
          v38.i64[1] = v37.u32[1];
          uint64x2_t v41 = v38;
          v38.i64[0] = v37.u32[2];
          v38.i64[1] = v37.u32[3];
          int32x4_t v29 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v28, v39), (int32x4_t)vshlq_u64(v28, v40)), v31) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v29);
          int32x4_t v34 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v28, v41), (int32x4_t)vshlq_u64(v28, v38)), v31) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v34);
          int32x4_t v25 = vaddq_s32(v25, v32);
          v33 -= 8;
        }
        while (v33);
        int v14 = vaddvq_s32(vaddq_s32(v34, v29));
        if (v22 == v24) {
          goto LABEL_35;
        }
        unsigned int v23 = v11 + v24;
      }
      else
      {
        int v14 = 0;
        unsigned int v23 = v11;
      }
      do
      {
        char v42 = v18 - v23;
        if (v18 < v23) {
          char v42 = 0;
        }
        char v43 = v20 - v23;
        if (v20 < v23) {
          char v43 = 0;
        }
        v14 += ((v9 << (v42 + v43)) + 127) & 0xFFFFFF80;
        ++v23;
      }
      while (v3 != v23);
    }
  }
LABEL_35:
  int v44 = v10 - 1;
  int v45 = v14 + v10 - 1;
  int v46 = -(int)v10;
  unsigned int v47 = (v45 & -(int)v10) * v21;
  unsigned int v48 = v11 - MipInTail;
  if (v11 <= MipInTail) {
    return (v47 + v44) & v46;
  }
  unint64_t v49 = v10 - 1;
  unint64_t v50 = -(uint64_t)v10;
  if (v48 > 7)
  {
    unsigned int v51 = v48 & 0xFFFFFFF8;
    int32x4_t v52 = vaddq_s32(vdupq_n_s32(MipInTail), (int32x4_t)xmmword_242EA7E20);
    int32x4_t v53 = (int32x4_t)v47;
    uint32x4_t v54 = (uint32x4_t)vdupq_n_s32(v18);
    uint32x4_t v55 = (uint32x4_t)vdupq_n_s32(v20);
    uint32x4_t v56 = (uint32x4_t)vdupq_n_s32(v15);
    uint64x2_t v57 = (uint64x2_t)vdupq_n_s64(v9);
    int64x2_t v58 = vdupq_n_s64(v49);
    int8x16_t v59 = (int8x16_t)vdupq_n_s64(v50);
    int32x4_t v60 = 0uLL;
    v61.i64[0] = 0x400000004;
    v61.i64[1] = 0x400000004;
    v62.i64[0] = 0x300000003;
    v62.i64[1] = 0x300000003;
    v63.i64[0] = 0x100000001;
    v63.i64[1] = 0x100000001;
    v64.i64[0] = 0x800000008;
    v64.i64[1] = 0x800000008;
    unsigned int v65 = v48 & 0xFFFFFFF8;
    do
    {
      uint32x4_t v66 = (uint32x4_t)vaddq_s32(v52, v61);
      int32x4_t v67 = (int32x4_t)vqsubq_u32(v54, v66);
      int32x4_t v68 = (int32x4_t)vqsubq_u32(v55, v66);
      uint32x4_t v69 = vshlq_u32(v56, (uint32x4_t)vnegq_s32(v52));
      int32x4_t v70 = vaddq_s32((int32x4_t)vqsubq_u32(v54, (uint32x4_t)v52), (int32x4_t)vqsubq_u32(v55, (uint32x4_t)v52));
      int32x4_t v71 = vaddq_s32(v67, v68);
      v72.i64[0] = v70.u32[0];
      v72.i64[1] = v70.u32[1];
      uint64x2_t v73 = (uint64x2_t)v72;
      v72.i64[0] = v70.u32[2];
      v72.i64[1] = v70.u32[3];
      uint64x2_t v74 = (uint64x2_t)v72;
      v72.i64[0] = v71.u32[0];
      v72.i64[1] = v71.u32[1];
      uint64x2_t v75 = (uint64x2_t)v72;
      v72.i64[0] = v71.u32[2];
      v72.i64[1] = v71.u32[3];
      int8x16_t v76 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v57, v74), v58), v59);
      int8x16_t v77 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v57, v73), v58), v59);
      int8x16_t v78 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v57, (uint64x2_t)v72), v58), v59);
      int8x16_t v79 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v57, v75), v58), v59);
      uint32x4_t v80 = vshlq_u32(v56, (uint32x4_t)vsubq_s32(v62, v52));
      int8x16_t v81 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v76, v58), v59);
      int8x16_t v82 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v77, v58), v59);
      int8x16_t v83 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v78, v58), v59);
      __int32 v84 = v69.i32[3];
      int8x16_t v85 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v79, v58), v59);
      v82.i64[0] = (v82.i32[0] * v69.i32[0]);
      v81.i64[0] = (v81.i32[0] * v69.i32[2]);
      uint64_t v86 = (v85.i32[2] * v80.i32[1]);
      v85.i64[0] = (v85.i32[0] * v80.i32[0]);
      uint64_t v87 = (v83.i32[2] * v80.i32[3]);
      v82.i64[1] = (v82.i32[2] * v69.i32[1]);
      uint64_t v88 = (v83.i32[0] * v80.i32[2]);
      uint32x4_t v89 = vcgtq_u32(v69, v63);
      v72.i64[0] = v89.i32[0];
      v72.i64[1] = v89.i32[1];
      int8x16_t v90 = v72;
      v72.i64[0] = v89.i32[2];
      v72.i64[1] = v89.i32[3];
      int8x16_t v91 = v72;
      v81.i64[1] = (v81.i32[2] * v84);
      uint32x4_t v92 = vcgtq_u32(v80, v63);
      v72.i64[0] = v92.i32[0];
      v72.i64[1] = v92.i32[1];
      int8x16_t v93 = v72;
      v72.i64[0] = v92.i32[2];
      v72.i64[1] = v92.i32[3];
      v94.i64[0] = v88;
      v85.i64[1] = v86;
      v94.i64[1] = v87;
      int32x4_t v53 = vaddq_s32(v53, vuzp1q_s32((int32x4_t)vbslq_s8(v90, v82, v77), (int32x4_t)vbslq_s8(v91, v81, v76)));
      int32x4_t v60 = vaddq_s32(v60, vuzp1q_s32((int32x4_t)vbslq_s8(v93, v85, v79), (int32x4_t)vbslq_s8(v72, v94, v78)));
      int32x4_t v52 = vaddq_s32(v52, v64);
      v65 -= 8;
    }
    while (v65);
    unsigned int v47 = vaddvq_s32(vaddq_s32(v60, v53));
    if (v48 == v51) {
      return (v47 + v44) & v46;
    }
    MipInTail += v51;
  }
  do
  {
    char v95 = v18 - MipInTail;
    if (v18 < MipInTail) {
      char v95 = 0;
    }
    char v96 = v20 - MipInTail;
    if (v20 < MipInTail) {
      char v96 = 0;
    }
    int v97 = ((v9 << (v95 + v96)) + v49) & v50;
    if (v15 >> MipInTail > 1) {
      int v97 = ((v97 + v49) & v50) * (v15 >> MipInTail);
    }
    v47 += v97;
    ++MipInTail;
  }
  while (v11 != MipInTail);
  return (v47 + v44) & v46;
}

uint64_t AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  unsigned int v3 = (*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 216) - 1) / *(_DWORD *)(a1 + 216);
  unsigned int v4 = (*(_DWORD *)(a1 + 132) + *(_DWORD *)(a1 + 220) - 1) / *(_DWORD *)(a1 + 220);
  unsigned int v5 = 32 - __clz(~(-1 << -__clz(v3 - 1)));
  if (v3 >= 2) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v4 < 2) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = 32 - __clz(~(-1 << -(char)__clz(v4 - 1)));
  }
  unint64_t v8 = *(unsigned int *)(a1 + 236);
  if (v2 == 1 && !a2) {
    return 1;
  }
  uint64_t v9 = *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v10 = 32 - __clz(v8 / v9 - 1);
  unsigned int v11 = v8 / v9 >= 2 ? v10 : 0;
  if (!v2) {
    return 1;
  }
  uint64_t result = 0;
  if (a2)
  {
    unsigned int v13 = (v11 + 1) >> 1;
    unsigned int v14 = v11 - v13;
    while (1)
    {
      unsigned int v15 = v6 - result;
      if (v6 < result) {
        unsigned int v15 = 0;
      }
      unsigned int v16 = v7 - result;
      if (v7 < result) {
        unsigned int v16 = 0;
      }
      if (v16 < v14 || v15 < v13) {
        break;
      }
      uint64_t result = (result + 1);
      if (v2 == result) {
        return 1;
      }
    }
  }
  else
  {
    while (1)
    {
      char v18 = v6 - result;
      if (v6 < result) {
        char v18 = 0;
      }
      char v19 = v7 - result;
      if (v7 < result) {
        char v19 = 0;
      }
      if (v9 << (v18 + v19) < v8) {
        break;
      }
      uint64_t result = (result + 1);
      if (v2 == result) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8 = *(__IOSurface **)(a1 + 168);
  if (v8 && ((int v9 = *(unsigned __int8 *)(a1 + 380), v9 != 3) ? (v10 = v9 == 0) : (v10 = 1), v10))
  {
    size_t v11 = *(_DWORD *)(a1 + 176) + a4;
    BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(v8, 0);
    if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0) {
      uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
    }
    else {
      uint64_t BaseAddressOfCompressedTileDataRegionOfSliceAndPlane = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v11);
    }
    uint64_t v21 = BaseAddressOfCompressedTileDataRegionOfSliceAndPlane;
    size_t v22 = *(unsigned int *)(a1 + 176);
    unsigned int v23 = IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), 0);
    if ((IOSurfaceGetSliceCount() & 0xFFFFFFFELL) != 0) {
      uint64_t v24 = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
    }
    else {
      uint64_t v24 = (uint64_t)IOSurfaceGetBaseAddressOfPlane(*(IOSurfaceRef *)(a1 + 168), v22);
    }
    int64_t v16 = &v23[v21] - &BaseAddressOfPlane[v24];
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(a1 + 368);
    uint64_t v15 = a2 / v14;
    if (a4) {
      int64_t v16 = *(void *)(a1 + 8 * (a4 - 1) + 344);
    }
    else {
      int64_t v16 = 0;
    }
    int v17 = v15 * v14;
    uint64_t v18 = *(void *)(a1 + 380);
    if (v14 <= a2 && (v18 & 0x10000) != 0)
    {
      uint64_t v19 = *(unsigned int *)(a1 + 236);
      if (v19)
      {
        if ((*(void *)(a1 + 380) & 0xFF00) == 0x400)
        {
          unint64_t v20 = (8
                             * (6 * v15)
                             * (((v19 << 8)
                               + ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a4)+ v19- 1) & -v19)- 1) & -(uint64_t)(v19 << 8))/ v19);
        }
        else
        {
          if (*(void *)(a1 + 380))
          {
            unint64_t v26 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a4)+ v19- 1) & -v19;
          }
          else
          {
            unint64_t v26 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a4)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
            LODWORD(v19) = *(_DWORD *)(a1 + 236);
          }
          unint64_t v20 = (8
                             * v15
                             * ((v26 + (v19 << 8) - 1) & -(uint64_t)(v19 << 8))
                             / v19);
        }
      }
      else
      {
        if ((*(void *)(a1 + 380) & 0xFF00) == 0x400)
        {
          unint64_t v25 = 6
              * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a4);
        }
        else if (*(void *)(a1 + 380))
        {
          unint64_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a4);
        }
        else
        {
          unint64_t v25 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a4)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
        }
        unint64_t v20 = v25 * v15;
      }
      v16 += v20;
      uint64_t v18 = *(void *)(a1 + 380);
    }
    if (a2 != v17 && (v18 & 0xFF00) == 0x400)
    {
      uint64_t v27 = a2 - v17;
      uint64_t v28 = *(unsigned int *)(a1 + 236);
      unint64_t v29 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a4);
      uint64_t v30 = (v29 + v28 - 1) & -v28;
      if (!v28) {
        uint64_t v30 = v29;
      }
      uint64_t v31 = v30 * v27;
      uint64_t v32 = (8
                         * v27
                         * (((v28 << 8) + v30 - 1) & (unint64_t)-(uint64_t)(v28 << 8))
                         / v28);
      if (!v28) {
        uint64_t v32 = v31;
      }
      v16 += v32;
    }
    if (a3) {
      v16 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a3, a4);
    }
  }
  return *(void *)(a1 + 296) + v16;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 128) <= 1u) {
    int v2 = 1;
  }
  else {
    int v2 = *(_DWORD *)(a1 + 128);
  }
  if (*(_DWORD *)(a1 + 132) <= 1u) {
    int v3 = 1;
  }
  else {
    int v3 = *(_DWORD *)(a1 + 132);
  }
  uint64_t v4 = *(void *)(a1 + 488);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 1080) <= a2) {
      LODWORD(v4) = 0;
    }
    else {
      LODWORD(v4) = *(unsigned __int8 *)(a1 + 57);
    }
  }
  if (*(unsigned char *)(a1 + 380) != 2) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 220);
  uint64_t v6 = *(void *)(a1 + 208);
  unsigned int v7 = v5 + v3 - 1;
  unsigned int v8 = (*(_DWORD *)(a1 + 216) + v2 - 1) / *(_DWORD *)(a1 + 216);
  int v9 = *(_DWORD *)(v6 + 56);
  int64_t v10 = (8 * *(unsigned int *)(a1 + 112) * (unint64_t)*(unsigned __int8 *)(v6 + 88)) >> (v4 != 0);
  int v11 = v7 / v5;
  if (v10 > 127)
  {
    if (v10 == 1024) {
      int v16 = 16;
    }
    else {
      int v16 = 0;
    }
    if (v10 == 1024) {
      int v17 = 8;
    }
    else {
      int v17 = 0;
    }
    if (v10 == 512)
    {
      int v16 = 16;
      unsigned int v14 = 16;
    }
    else
    {
      unsigned int v14 = v17;
    }
    if (v10 == 256) {
      int v18 = 32;
    }
    else {
      int v18 = 0;
    }
    if (v10 == 256) {
      int v19 = 16;
    }
    else {
      int v19 = 0;
    }
    if (v10 == 128)
    {
      int v18 = 32;
      int v20 = 32;
    }
    else
    {
      int v20 = v19;
    }
    BOOL v21 = v10 <= 511;
    if (v10 <= 511) {
      unsigned int v13 = v18;
    }
    else {
      unsigned int v13 = v16;
    }
    if (v21) {
      unsigned int v14 = v20;
    }
  }
  else
  {
    int64_t v12 = v10 - 4;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    switch(v12)
    {
      case 0:
        unsigned int v14 = 128;
        unsigned int v13 = 256;
        break;
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        break;
      case 4:
        unsigned int v13 = 128;
        unsigned int v14 = 128;
        break;
      case 12:
        unsigned int v14 = 64;
        unsigned int v13 = 128;
        break;
      case 28:
        unsigned int v13 = 64;
        unsigned int v14 = 64;
        break;
      default:
        unsigned int v13 = 0;
        unsigned int v14 = 0;
        break;
    }
  }
  if (v9) {
    int v22 = ~(-1 << a2);
  }
  else {
    int v22 = 0;
  }
  unsigned int v23 = (v22 + v11) >> a2;
  if (v23 <= 1) {
    unsigned int v23 = 1;
  }
  unsigned int v24 = (v22 + v8) >> a2;
  if (v24 <= 1) {
    unsigned int v24 = 1;
  }
  return v24 >= v13 && v23 >= v14;
}

size_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      uint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      return IOSurfaceGetBytesPerTileDataOfPlane() * WidthInCompressedTilesOfPlane;
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a1 + 128);
      MTLPixelFormat v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 208);
      uint64_t v12 = *(unsigned __int8 *)(a1 + a2 + 57);
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      uint64_t v13 = *(unsigned __int8 *)(v11 + 49);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v16, a2, v10, v13);
      if (a2 == 1 && (*(_DWORD *)(v11 + 72) & 0xFFFFFFFE) == 2) {
        unsigned int v9 = (v9 + 1) >> 1;
      }
      unsigned int v14 = LOBYTE(v16[0]);
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v18, a2, v10, v13);
      if ((v12 - 1) > 2) {
        unint64_t v15 = (BYTE1(v18[0]) * LOBYTE(v18[0]) * (unint64_t)BYTE2(v18[0])) >> 3;
      }
      else {
        unint64_t v15 = *((void *)&v18[2] + v12 + 1);
      }
      return v15 * ((v9 + v14 - 1) / v14);
    }
  }
  else if (*(unsigned char *)(a1 + 380))
  {
    return 0;
  }
  else
  {
    uint64_t v4 = *(__IOSurface **)(a1 + 168);
    if (v4)
    {
      size_t v5 = *(_DWORD *)(a1 + 176) + a2;
      return IOSurfaceGetBytesPerRowOfPlane(v4, v5);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)(v8 - 624) >= 4 && (unint64_t)(v8 - 550) > 1) {
        return *(void *)(a1 + 152);
      }
      else {
        return (*(unsigned int *)(a1 + 128) * (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 208) + a2 + 88)
      }
              + 15) & 0x1FFFFFFFFF0;
    }
  }
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,4u>>(uint8x16_t *result, const float *a2, int a3, int a4, int a5)
{
  if (result && a2)
  {
    size_t v5 = (uint8x16_t *)((char *)result + 4 * (a4 * a3));
    if (a5)
    {
      for (; result < v5; a2 += 2)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6) + *((unsigned __int8 *)a2 + 2)) >> 1;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7) + *((unsigned __int8 *)a2 + 3)) >> 1;
        uint64_t result = (uint8x16_t *)((char *)result + 4);
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5) + *((unsigned __int8 *)a2 + 1)) >> 1;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6) + *((unsigned __int8 *)a2 + 2)) >> 1;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7) + *((unsigned __int8 *)a2 + 3)) >> 1;
        uint64_t result = (uint8x16_t *)((char *)result + 4);
        a2 += 2;
      }
    }
    else
    {
      for (unint64_t i = (unint64_t)v5 - 4 * (((_BYTE)a4 * (_BYTE)a3) & 0xFu); (unint64_t)result < i; result += 4)
      {
        float32x4x4_t v8 = vld4q_f32(a2);
        unsigned int v7 = a2 + 16;
        float32x4x4_t v9 = vld4q_f32(v7);
        v7 += 16;
        float32x4x4_t v10 = vld4q_f32(v7);
        v7 += 16;
        float32x4x4_t v11 = vld4q_f32(v7);
        a2 = v7 + 16;
        *uint64_t result = vhaddq_u8(vhaddq_u8((uint8x16_t)v8.val[0], (uint8x16_t)v8.val[1]), vhaddq_u8((uint8x16_t)v8.val[2], (uint8x16_t)v8.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v9.val[0], (uint8x16_t)v9.val[1]), vhaddq_u8((uint8x16_t)v9.val[2], (uint8x16_t)v9.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v10.val[0], (uint8x16_t)v10.val[1]), vhaddq_u8((uint8x16_t)v10.val[2], (uint8x16_t)v10.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 4)
                       + *(unsigned __int8 *)a2
                       + *((unsigned __int8 *)a2 + 8)
                       + *((unsigned __int8 *)a2 + 12)) >> 2;
        result->i8[1] = (*((unsigned __int8 *)a2 + 5)
                       + *((unsigned __int8 *)a2 + 1)
                       + *((unsigned __int8 *)a2 + 9)
                       + *((unsigned __int8 *)a2 + 13)) >> 2;
        result->i8[2] = (*((unsigned __int8 *)a2 + 6)
                       + *((unsigned __int8 *)a2 + 2)
                       + *((unsigned __int8 *)a2 + 10)
                       + *((unsigned __int8 *)a2 + 14)) >> 2;
        result->i8[3] = (*((unsigned __int8 *)a2 + 7)
                       + *((unsigned __int8 *)a2 + 3)
                       + *((unsigned __int8 *)a2 + 11)
                       + *((unsigned __int8 *)a2 + 15)) >> 2;
        uint64_t result = (uint8x16_t *)((char *)result + 4);
        a2 += 4;
      }
    }
  }
  return result;
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,2u>>(uint8x16_t *result, const __int16 *a2, int a3, int a4, int a5)
{
  if (result && a2)
  {
    size_t v5 = (uint8x16_t *)((char *)result + 2 * (a4 * a3));
    if (a5)
    {
      for (; result < v5; a2 += 2)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3) + *((unsigned __int8 *)a2 + 1)) >> 1;
        uint64_t result = (uint8x16_t *)((char *)result + 2);
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2) + *(unsigned __int8 *)a2) >> 1;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3) + *((unsigned __int8 *)a2 + 1)) >> 1;
        uint64_t result = (uint8x16_t *)((char *)result + 2);
        a2 += 2;
      }
    }
    else
    {
      for (unint64_t i = (unint64_t)v5 - 2 * (((_BYTE)a4 * (_BYTE)a3) & 0x1Fu); (unint64_t)result < i; result += 4)
      {
        int16x8x4_t v8 = vld4q_s16(a2);
        unsigned int v7 = a2 + 32;
        int16x8x4_t v9 = vld4q_s16(v7);
        v7 += 32;
        int16x8x4_t v10 = vld4q_s16(v7);
        v7 += 32;
        int16x8x4_t v11 = vld4q_s16(v7);
        a2 = v7 + 32;
        *uint64_t result = vhaddq_u8(vhaddq_u8((uint8x16_t)v8.val[0], (uint8x16_t)v8.val[1]), vhaddq_u8((uint8x16_t)v8.val[2], (uint8x16_t)v8.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v9.val[0], (uint8x16_t)v9.val[1]), vhaddq_u8((uint8x16_t)v9.val[2], (uint8x16_t)v9.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v10.val[0], (uint8x16_t)v10.val[1]), vhaddq_u8((uint8x16_t)v10.val[2], (uint8x16_t)v10.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
      }
      while (result < v5)
      {
        result->i8[0] = (*((unsigned __int8 *)a2 + 2)
                       + *(unsigned __int8 *)a2
                       + *((unsigned __int8 *)a2 + 4)
                       + *((unsigned __int8 *)a2 + 6)) >> 2;
        result->i8[1] = (*((unsigned __int8 *)a2 + 3)
                       + *((unsigned __int8 *)a2 + 1)
                       + *((unsigned __int8 *)a2 + 5)
                       + *((unsigned __int8 *)a2 + 7)) >> 2;
        uint64_t result = (uint8x16_t *)((char *)result + 2);
        a2 += 4;
      }
    }
  }
  return result;
}

uint8x16_t *agxsDownsample<AGXSDownsamplerGeneric<unsigned char,1u>>(uint8x16_t *result, const char *a2, int a3, int a4, int a5, uint8x8_t a6)
{
  if (result && a2)
  {
    uint64_t v6 = (a4 * a3);
    unsigned int v7 = (uint8x16_t *)((char *)result + v6);
    if (a5)
    {
      if (v7 > result)
      {
        do
        {
          result->i8[0] = (*((unsigned __int8 *)a2 + 1) + *(unsigned __int8 *)a2) >> 1;
          uint64_t result = (uint8x16_t *)((char *)result + 1);
          a2 += 2;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      for (unint64_t i = (unint64_t)v7 - (((_BYTE)a4 * (_BYTE)a3) & 0x3F); (unint64_t)result < i; result += 4)
      {
        int8x16x4_t v11 = vld4q_s8(a2);
        int16x8x4_t v9 = a2 + 64;
        int8x16x4_t v12 = vld4q_s8(v9);
        v9 += 64;
        int8x16x4_t v13 = vld4q_s8(v9);
        v9 += 64;
        int8x16x4_t v14 = vld4q_s8(v9);
        a2 = v9 + 64;
        *uint64_t result = vhaddq_u8(vhaddq_u8((uint8x16_t)v11.val[0], (uint8x16_t)v11.val[1]), vhaddq_u8((uint8x16_t)v11.val[2], (uint8x16_t)v11.val[3]));
        result[1] = vhaddq_u8(vhaddq_u8((uint8x16_t)v12.val[0], (uint8x16_t)v12.val[1]), vhaddq_u8((uint8x16_t)v12.val[2], (uint8x16_t)v12.val[3]));
        result[2] = vhaddq_u8(vhaddq_u8((uint8x16_t)v13.val[0], (uint8x16_t)v13.val[1]), vhaddq_u8((uint8x16_t)v13.val[2], (uint8x16_t)v13.val[3]));
        result[3] = vhaddq_u8(vhaddq_u8((uint8x16_t)v14.val[0], (uint8x16_t)v14.val[1]), vhaddq_u8((uint8x16_t)v14.val[2], (uint8x16_t)v14.val[3]));
      }
      if (result < v7)
      {
        do
        {
          __int32 v10 = *(_DWORD *)a2;
          a2 += 4;
          a6.i32[0] = v10;
          a6 = (uint8x8_t)vmovl_u8(a6).u64[0];
          a6.i16[0] = vaddv_s16((int16x4_t)a6);
          result->i8[0] = (unsigned __int32)a6.i32[0] >> 2;
          uint64_t result = (uint8x16_t *)((char *)result + 1);
        }
        while (v7 != result);
      }
    }
  }
  return result;
}

unint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 236);
  if (v6)
  {
    unint64_t v7 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, 0);
    uint64_t v8 = *(void *)(a1 + 380);
    uint64_t v9 = (unsigned __int16)v8 & 0xFF00;
    if (v9 == 768)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 136);
    }
    else if ((v8 & 0x10000) != 0 || v9 == 1024)
    {
      if (v9 == 1024) {
        unsigned int v10 = 6 * *(_DWORD *)(a1 + 376);
      }
      else {
        unsigned int v10 = *(_DWORD *)(a1 + 376);
      }
    }
    else
    {
      unsigned int v10 = 1;
    }
    uint64_t v14 = v6 - 1;
    unint64_t v12 = ((8
          * ((v6 - 1 + ((v7 + (v6 << 8) - 1) & -(uint64_t)(v6 << 8)))
           / v6)
          + 2047) & 0xFFFFFFFFFFFFF800)
        * v10;
    if (*(unsigned char *)(a1 + 240))
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::calcSparseParams(a1, (uint64_t)&v49, &v51, &v50);
      unint64_t v15 = ((unint64_t)(-(int)v6 & (v14 + v51)) + v14) / v6;
      unint64_t v12 = ((v12 + v15 + v50 + v14 + ((4 << -(char)__clz(v15)) + 12)) & -(uint64_t)v6) + v51;
    }
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(a1 + 380) & 0xFF00;
  if ((*(void *)(a1 + 380) & 0x10000) != 0)
  {
    if (v11 == 1024)
    {
      unint64_t v13 = 6
          * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a2);
    }
    else if (*(void *)(a1 + 380))
    {
      unint64_t v13 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a2);
    }
    else
    {
      unint64_t v13 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 376);
    goto LABEL_25;
  }
  if (v11 == 1024)
  {
    unint64_t v12 = 6
        * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a2);
    goto LABEL_26;
  }
  if (*(void *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      uint64_t v31 = IOSurfaceGetWidthInCompressedTilesOfPlane() * HeightInCompressedTilesOfPlane;
      unint64_t v12 = v31 * IOSurfaceGetBytesPerTileDataOfPlane();
      goto LABEL_26;
    }
    size_t v43 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2);
    unint64_t PlaneSize = InterchangeTiledMemory::getPlaneSize(v43, *(_DWORD *)(a1 + 132), a2, *(MTLPixelFormat *)(a1 + 32), *(void *)(a1 + 208));
    goto LABEL_83;
  }
  if (*(void *)(a1 + 380))
  {
    if (v11 != 256 && v11 != 512)
    {
      if (v11 != 768)
      {
        unint64_t v12 = 0;
        goto LABEL_26;
      }
      unint64_t v13 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a2);
      uint64_t v18 = *(unsigned int *)(a1 + 136);
LABEL_25:
      unint64_t v12 = v13 * v18;
      goto LABEL_26;
    }
    unint64_t PlaneSize = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, a2);
LABEL_83:
    unint64_t v12 = PlaneSize;
    goto LABEL_26;
  }
  int v16 = *(__IOSurface **)(a1 + 168);
  if (v16)
  {
    size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v16, a2);
  }
  else if (a2 == 1 && *(_DWORD *)(*(void *)(a1 + 208) + 72) == 3)
  {
    size_t HeightOfPlane = (unint64_t)*(unsigned int *)(a1 + 132) >> 1;
  }
  else
  {
    size_t HeightOfPlane = *(unsigned int *)(a1 + 132);
  }
  size_t v44 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2);
  unint64_t v12 = v44 * HeightOfPlane;
  uint64_t v45 = *(void *)(a1 + 208);
  if (*(_DWORD *)(v45 + 24) - 1 == a2) {
    unint64_t v12 = v12 - v44 + *(unsigned __int8 *)(v45 + a2 + 88) * (unint64_t)*(unsigned int *)(a1 + 128);
  }
LABEL_26:
  uint64_t v19 = *(void *)(a1 + 488);
  if (!v19) {
    goto LABEL_97;
  }
  if (*(unsigned char *)(v19 + 16))
  {
    uint64_t v20 = 128;
    uint64_t v21 = 127;
  }
  else if (*(unsigned char *)(v19 + 232))
  {
    uint64_t v20 = *(void *)(v19 + 320);
    uint64_t v21 = v20 - 1;
  }
  else
  {
    uint64_t v22 = *(unsigned int *)(v19 + 236);
    if (!v22)
    {
      int v23 = *(unsigned __int8 *)(v19 + 380);
      int v24 = *(unsigned __int8 *)(v19 + 381);
      unint64_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(a1 + 488), 0);
      unint64_t v26 = *(void *)(v19 + 380);
      uint64_t v27 = (v26 >> 16) & 1;
      if (v24 == 1) {
        char v28 = BYTE2(v26) & 1;
      }
      else {
        char v28 = 0;
      }
      if (v24 != 2) {
        LOBYTE(v27) = 0;
      }
      if (v28) {
        LOBYTE(v27) = 1;
      }
      if ((v24 - 3) < 2) {
        LOBYTE(v27) = 1;
      }
      unsigned int v29 = (v23 - 1);
      if (v29 <= 1 && v25 >= 0x4000 && (v27 & 1) != 0)
      {
        uint64_t v22 = 0x4000;
      }
      else
      {
        BOOL v33 = (v26 & 0x10000) != 0 && v24 == 2 && v23 == 0;
        uint64_t v22 = 128;
        if (!v33) {
          uint64_t v22 = 16;
        }
        if (v29 < 3) {
          uint64_t v22 = 128;
        }
      }
    }
    uint64_t v21 = v22 - 1;
    uint64_t v20 = *(unsigned int *)(v19 + 236);
    if (!v20)
    {
      int v34 = *(unsigned __int8 *)(v19 + 380);
      int v35 = *(unsigned __int8 *)(v19 + 381);
      unint64_t v36 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v19, 0);
      unint64_t v37 = *(void *)(v19 + 380);
      uint64_t v38 = (v37 >> 16) & 1;
      if (v35 == 1) {
        char v39 = BYTE2(v37) & 1;
      }
      else {
        char v39 = 0;
      }
      if (v35 != 2) {
        LOBYTE(v38) = 0;
      }
      if (v39) {
        LOBYTE(v38) = 1;
      }
      if ((v35 - 3) >= 2) {
        char v40 = v38;
      }
      else {
        char v40 = 1;
      }
      unsigned int v41 = (v34 - 1);
      if (v41 <= 1 && v36 >= 0x4000 && (v40 & 1) != 0)
      {
        uint64_t v20 = 0x4000;
      }
      else if (v41 >= 3)
      {
        BOOL v47 = (v37 & 0x10000) != 0 && v35 == 2 && v34 == 0;
        uint64_t v20 = 128;
        if (!v47) {
          uint64_t v20 = 16;
        }
      }
      else
      {
        uint64_t v20 = 128;
      }
    }
  }
  unint64_t v12 = (v21 + v12) & -v20;
  if (a3)
  {
    v12 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v19 + 536 * a2, 0, 1);
LABEL_97:
    if (*(_DWORD *)(*(void *)(a1 + 208) + 24) - 1 != a2) {
      return (v12 + *(void *)(a1 + 320) - 1) & -*(void *)(a1 + 320);
    }
  }
  return v12;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 236);
  if (v6)
  {
    unint64_t v7 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, 0);
    uint64_t v8 = *(void *)(a1 + 380);
    uint64_t v9 = (unsigned __int16)v8 & 0xFF00;
    if (v9 == 768)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 136);
    }
    else if ((v8 & 0x10000) != 0 || v9 == 1024)
    {
      if (v9 == 1024) {
        unsigned int v10 = 6 * *(_DWORD *)(a1 + 376);
      }
      else {
        unsigned int v10 = *(_DWORD *)(a1 + 376);
      }
    }
    else
    {
      unsigned int v10 = 1;
    }
    uint64_t v14 = v6 - 1;
    unint64_t v12 = ((8
          * ((v6 - 1 + ((v7 + (v6 << 8) - 1) & -(uint64_t)(v6 << 8)))
           / v6)
          + 2047) & 0xFFFFFFFFFFFFF800)
        * v10;
    if (*(unsigned char *)(a1 + 240))
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::calcSparseParams(a1, (uint64_t)&v49, &v51, &v50);
      unint64_t v15 = ((unint64_t)(-(int)v6 & (v14 + v51)) + v14) / v6;
      unint64_t v12 = ((v12 + v15 + v50 + v14 + ((4 << -(char)__clz(v15)) + 12)) & -(uint64_t)v6) + v51;
    }
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(a1 + 380) & 0xFF00;
  if ((*(void *)(a1 + 380) & 0x10000) != 0)
  {
    if (v11 == 1024)
    {
      unint64_t v13 = 6
          * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a2);
    }
    else if (*(void *)(a1 + 380))
    {
      unint64_t v13 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a2);
    }
    else
    {
      unint64_t v13 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2)* *(unsigned int *)(a1 + 132)+ 127) & 0xFFFFFFFFFFFFFF80;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 376);
    goto LABEL_25;
  }
  if (v11 == 1024)
  {
    unint64_t v12 = 6
        * AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a2);
    goto LABEL_26;
  }
  if (*(void *)(a1 + 380) == 3)
  {
    if (*(void *)(a1 + 168))
    {
      uint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
      uint64_t v31 = IOSurfaceGetWidthInCompressedTilesOfPlane() * HeightInCompressedTilesOfPlane;
      unint64_t v12 = v31 * IOSurfaceGetBytesPerTileDataOfPlane();
      goto LABEL_26;
    }
    size_t v43 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2);
    unint64_t PlaneSize = InterchangeTiledMemory::getPlaneSize(v43, *(_DWORD *)(a1 + 132), a2, *(MTLPixelFormat *)(a1 + 32), *(void *)(a1 + 208));
    goto LABEL_83;
  }
  if (*(void *)(a1 + 380))
  {
    if (v11 != 256 && v11 != 512)
    {
      if (v11 != 768)
      {
        unint64_t v12 = 0;
        goto LABEL_26;
      }
      unint64_t v13 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a2);
      uint64_t v18 = *(unsigned int *)(a1 + 136);
LABEL_25:
      unint64_t v12 = v13 * v18;
      goto LABEL_26;
    }
    unint64_t PlaneSize = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, a2);
LABEL_83:
    unint64_t v12 = PlaneSize;
    goto LABEL_26;
  }
  int v16 = *(__IOSurface **)(a1 + 168);
  if (v16)
  {
    size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v16, a2);
  }
  else if (a2 == 1 && *(_DWORD *)(*(void *)(a1 + 208) + 72) == 3)
  {
    size_t HeightOfPlane = (unint64_t)*(unsigned int *)(a1 + 132) >> 1;
  }
  else
  {
    size_t HeightOfPlane = *(unsigned int *)(a1 + 132);
  }
  size_t v44 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, a2);
  unint64_t v12 = v44 * HeightOfPlane;
  uint64_t v45 = *(void *)(a1 + 208);
  if (*(_DWORD *)(v45 + 24) - 1 == a2) {
    unint64_t v12 = v12 - v44 + *(unsigned __int8 *)(v45 + a2 + 88) * (unint64_t)*(unsigned int *)(a1 + 128);
  }
LABEL_26:
  uint64_t v19 = *(void *)(a1 + 488);
  if (!v19) {
    goto LABEL_97;
  }
  if (*(unsigned char *)(v19 + 16))
  {
    uint64_t v20 = 128;
    uint64_t v21 = 127;
  }
  else if (*(unsigned char *)(v19 + 232))
  {
    uint64_t v20 = *(void *)(v19 + 320);
    uint64_t v21 = v20 - 1;
  }
  else
  {
    uint64_t v22 = *(unsigned int *)(v19 + 236);
    if (!v22)
    {
      int v23 = *(unsigned __int8 *)(v19 + 380);
      int v24 = *(unsigned __int8 *)(v19 + 381);
      unint64_t v25 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(a1 + 488), 0);
      unint64_t v26 = *(void *)(v19 + 380);
      uint64_t v27 = (v26 >> 16) & 1;
      if (v24 == 1) {
        char v28 = BYTE2(v26) & 1;
      }
      else {
        char v28 = 0;
      }
      if (v24 != 2) {
        LOBYTE(v27) = 0;
      }
      if (v28) {
        LOBYTE(v27) = 1;
      }
      if ((v24 - 3) < 2) {
        LOBYTE(v27) = 1;
      }
      unsigned int v29 = (v23 - 1);
      if (v29 <= 1 && v25 >= 0x4000 && (v27 & 1) != 0)
      {
        uint64_t v22 = 0x4000;
      }
      else
      {
        BOOL v33 = (v26 & 0x10000) != 0 && v24 == 2 && v23 == 0;
        uint64_t v22 = 128;
        if (!v33) {
          uint64_t v22 = 16;
        }
        if (v29 < 3) {
          uint64_t v22 = 128;
        }
      }
    }
    uint64_t v21 = v22 - 1;
    uint64_t v20 = *(unsigned int *)(v19 + 236);
    if (!v20)
    {
      int v34 = *(unsigned __int8 *)(v19 + 380);
      int v35 = *(unsigned __int8 *)(v19 + 381);
      unint64_t v36 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v19, 0);
      unint64_t v37 = *(void *)(v19 + 380);
      uint64_t v38 = (v37 >> 16) & 1;
      if (v35 == 1) {
        char v39 = BYTE2(v37) & 1;
      }
      else {
        char v39 = 0;
      }
      if (v35 != 2) {
        LOBYTE(v38) = 0;
      }
      if (v39) {
        LOBYTE(v38) = 1;
      }
      if ((v35 - 3) >= 2) {
        char v40 = v38;
      }
      else {
        char v40 = 1;
      }
      unsigned int v41 = (v34 - 1);
      if (v41 <= 1 && v36 >= 0x4000 && (v40 & 1) != 0)
      {
        uint64_t v20 = 0x4000;
      }
      else if (v41 >= 3)
      {
        BOOL v47 = (v37 & 0x10000) != 0 && v35 == 2 && v34 == 0;
        uint64_t v20 = 128;
        if (!v47) {
          uint64_t v20 = 16;
        }
      }
      else
      {
        uint64_t v20 = 128;
      }
    }
  }
  unint64_t v12 = (v21 + v12) & -v20;
  if (a3)
  {
    v12 += AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v19 + 536 * a2, 0, 1);
LABEL_97:
    if (*(_DWORD *)(*(void *)(a1 + 208) + 24) - 1 != a2) {
      return (v12 + *(void *)(a1 + 320) - 1) & -*(void *)(a1 + 320);
    }
  }
  return v12;
}

uint64_t AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMetadataUncompressedValue(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) >= 2u && *(_DWORD *)(a1 + 80))
  {
LABEL_3:
    int v2 = (unsigned __int8 *)&_ZZNK3AGX23CompressionMetadataGen2IL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE28getMetadataUncompressedValueEjE6values__15_;
LABEL_12:
    int v3 = v2[a2];
    return v3 | (v3 << 8);
  }
  else
  {
    int v3 = 0;
    switch(*(void *)a1)
    {
      case 0:
      case 1:
        uint64_t result = 7967;
        break;
      case 8:
      case 9:
      case 0xALL:
      case 0xBLL:
      case 0xCLL:
      case 0xDLL:
      case 0xELL:
      case 0x11:
        uint64_t result = 16191;
        break;
      case 0x10:
        uint64_t result = 12079;
        break;
      case 0x20:
        uint64_t result = 10023;
        break;
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x40:
      case 0x41:
      case 0x45:
      case 0x4DLL:
        uint64_t result = 32639;
        break;
      case 0x2ALL:
        uint64_t result = 24415;
        break;
      case 0x30:
        uint64_t result = 20303;
        break;
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x38:
        uint64_t result = 0xFFFFLL;
        break;
      case 0x3ALL:
      case 0x3BLL:
      case 0x3CLL:
        int v2 = (unsigned __int8 *)&AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMetadataUncompressedValueconst::values;
        goto LABEL_12;
      case 0x3DLL:
      case 0x3ELL:
      case 0x3FLL:
      case 0x46:
      case 0x47:
      case 0x48:
        int v2 = (unsigned __int8 *)&_ZZNK3AGX23CompressionMetadataGen2IL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE28getMetadataUncompressedValueEjE6values__14_;
        goto LABEL_12;
      case 0x42:
      case 0x43:
      case 0x44:
        int v2 = (unsigned __int8 *)&AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMetadataUncompressedValueconst::values;
        goto LABEL_12;
      case 0x49:
      case 0x4ALL:
      case 0x4BLL:
        int v2 = (unsigned __int8 *)&AGX::CompressionMetadataGen2<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMetadataUncompressedValueconst::values;
        goto LABEL_12;
      case 0x4CLL:
        goto LABEL_3;
      default:
        return v3 | (v3 << 8);
    }
  }
  return result;
}

__IOSurface *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::writeRegion(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12 = a8;
  LODWORD(v13) = a7;
  uint64_t v15 = a1;
  uint64_t result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::validateRegion(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (!result) {
    return result;
  }
  int v17 = *(_DWORD *)(v15 + 144);
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v15 + 208) + 88);
  unsigned int v202 = *(_DWORD *)(v15 + 112);
  uint64_t v191 = v15;
  unsigned int v205 = a4;
  if (*(unsigned char *)(v15 + 240))
  {
    int v193 = *(_DWORD *)(v15 + 144);
    unsigned int v195 = v12;
    unsigned int v200 = *(unsigned __int8 *)(*(void *)(v15 + 208) + 88);
    unint64_t v19 = (unint64_t)*(unsigned __int8 *)(v15 + 381) << 8;
    BOOL v20 = v19 == 768;
    if (v19 == 768) {
      int v21 = v13;
    }
    else {
      int v21 = 1;
    }
    if (v20) {
      unsigned int v22 = a4;
    }
    else {
      unsigned int v22 = v12;
    }
    unsigned int v211 = v22;
    int v213 = v21;
    if (v21)
    {
      int v23 = 0;
      uint64_t v24 = *(void *)(v15 + 296);
      unsigned int v209 = v202 * v18;
      v223 = (int *)(v24 + *(void *)(v191 + 520) - *(void *)(v191 + 72));
      unint64_t v25 = v223 + 3;
      int v208 = *(unsigned __int8 *)(v191 + 316);
      while (1)
      {
        agxCalcSparseInputs(*(_DWORD *)(v191 + 236), *(_DWORD *)(v191 + 128), *(_DWORD *)(v191 + 132), *(_DWORD *)(v191 + 216), *(_DWORD *)(v191 + 220), v209, *(_DWORD *)(v191 + 64), 1u, 1u, v23 + v211, a9, v208 != 0, a2, a3, a5, a6, (uint64_t)&v226);
        int v26 = *v223;
        unsigned int v28 = v223[1];
        unsigned int v27 = v223[2];
        int v29 = v28 >= *v223 ? 0 : v223[2];
        unsigned __int32 v30 = v29 - v26 + v28;
        if (v30)
        {
          v231[0] = 0;
          unsigned int v31 = HIDWORD(v228);
          int v32 = v229 * HIDWORD(v228);
          if (v229 * HIDWORD(v228))
          {
            unsigned int v33 = BYTE9(v229);
            int v34 = v227;
            int v35 = DWORD1(v227);
            int v36 = DWORD2(v227);
            int v37 = HIDWORD(v227);
            int v38 = v228;
            int v39 = v228 | HIDWORD(v227);
            if (BYTE9(v229))
            {
              unsigned int v40 = 0;
              do
              {
                if (v39)
                {
                  int v41 = 0;
                  int v42 = 0;
                  int v43 = 1;
                  BOOL v44 = v37 != 0;
                  BOOL v45 = v38 != 0;
                  int v46 = v37;
                  int v47 = v38;
                  do
                  {
                    --v46;
                    if (v44) {
                      v42 |= (v43 & (v34 + (unsigned __int16)(v40 % v31))) << v41;
                    }
                    else {
                      int v46 = 0;
                    }
                    if (v44) {
                      ++v41;
                    }
                    --v47;
                    if (v45) {
                      v42 |= (v43 & (v35 + (unsigned __int16)(v40 / v31))) << v41;
                    }
                    else {
                      int v47 = 0;
                    }
                    if (v45) {
                      ++v41;
                    }
                    v43 *= 2;
                    --v41;
                    BOOL v45 = v47 != 0;
                    BOOL v44 = v46 != 0;
                  }
                  while (v47 | v46);
                }
                else
                {
                  int v42 = 0;
                }
                if ((*(_DWORD *)(v24 + 4 * ((v42 + v36) | ((v42 + v36) >> 8 << 9))) & 0x80000000) == 0) {
                  atomic_fetch_add_explicit(v231, 1u, memory_order_relaxed);
                }
                ++v40;
              }
              while (v40 != v32);
            }
            else
            {
              do
              {
                if (v39)
                {
                  int v48 = 0;
                  int v49 = 0;
                  int v50 = 1;
                  BOOL v51 = v38 != 0;
                  BOOL v52 = v37 != 0;
                  int v53 = v38;
                  int v54 = v37;
                  do
                  {
                    --v53;
                    if (v51) {
                      v49 |= (v50 & (v35 + (unsigned __int16)(v33 / v31))) << v48;
                    }
                    else {
                      int v53 = 0;
                    }
                    if (v51) {
                      ++v48;
                    }
                    --v54;
                    if (v52) {
                      v49 |= (v50 & (v34 + (unsigned __int16)(v33 % v31))) << v48;
                    }
                    else {
                      int v54 = 0;
                    }
                    if (v52) {
                      ++v48;
                    }
                    v50 *= 2;
                    --v48;
                    BOOL v52 = v54 != 0;
                    BOOL v51 = v53 != 0;
                  }
                  while (v54 | v53);
                }
                else
                {
                  int v49 = 0;
                }
                if ((*(_DWORD *)(v24 + 4 * ((v49 + v36) | ((v49 + v36) >> 8 << 9))) & 0x80000000) == 0) {
                  atomic_fetch_add_explicit(v231, 1u, memory_order_relaxed);
                }
                ++v33;
              }
              while (v33 != v32);
            }
          }
          if (v30 >= v231[0]) {
            unsigned __int32 v30 = v231[0];
          }
          unsigned int v55 = v30 + v26 >= v27 ? v27 : 0;
          int *v223 = v30 + v26 - v55;
          if (v32) {
            break;
          }
        }
LABEL_11:
        if (++v23 == v213) {
          goto LABEL_101;
        }
      }
      unsigned __int32 v56 = 0;
      int v57 = BYTE9(v229);
      int v58 = v227;
      int v59 = DWORD1(v227);
      int v61 = DWORD2(v227);
      int v60 = HIDWORD(v227);
      int v62 = v228;
      int v63 = v228 | HIDWORD(v227);
      while (1)
      {
        int v64 = v58 + (unsigned __int16)(v56 % v31);
        int v65 = v59 + (unsigned __int16)(v56 / v31);
        if (v57)
        {
          if (v63)
          {
            int v66 = 0;
            int v67 = 0;
            int v68 = 1;
            BOOL v69 = v60 != 0;
            BOOL v70 = v62 != 0;
            int v71 = v60;
            int v72 = v62;
            do
            {
              --v71;
              BOOL v73 = !v69;
              if (v69)
              {
                int v74 = ((v68 & v64) << v66) | v67;
              }
              else
              {
                int v71 = 0;
                int v74 = v67;
              }
              if (!v73) {
                ++v66;
              }
              int v67 = ((v68 & v65) << v66) | v74;
              if (v70) {
                --v72;
              }
              else {
                int v72 = 0;
              }
              if (v70)
              {
                int v75 = v66 + 1;
              }
              else
              {
                int v67 = v74;
                int v75 = v66;
              }
              v68 *= 2;
              int v66 = v75 - 1;
              BOOL v70 = v72 != 0;
              BOOL v69 = v71 != 0;
            }
            while (v72 | v71);
            goto LABEL_95;
          }
        }
        else if (v63)
        {
          int v76 = 0;
          int v67 = 0;
          int v77 = 1;
          BOOL v78 = v62 != 0;
          BOOL v79 = v60 != 0;
          int v80 = v62;
          int v81 = v60;
          do
          {
            --v80;
            BOOL v82 = !v78;
            if (v78)
            {
              int v83 = ((v77 & v65) << v76) | v67;
            }
            else
            {
              int v80 = 0;
              int v83 = v67;
            }
            if (!v82) {
              ++v76;
            }
            int v67 = ((v77 & v64) << v76) | v83;
            if (v79) {
              --v81;
            }
            else {
              int v81 = 0;
            }
            if (v79)
            {
              int v84 = v76 + 1;
            }
            else
            {
              int v67 = v83;
              int v84 = v76;
            }
            v77 *= 2;
            int v76 = v84 - 1;
            BOOL v79 = v81 != 0;
            BOOL v78 = v80 != 0;
          }
          while (v81 | v80);
          goto LABEL_95;
        }
        int v67 = 0;
LABEL_95:
        uint64_t v85 = (v67 + v61) | ((v67 + v61) >> 8 << 9);
        if ((*(_DWORD *)(v24 + 4 * v85) & 0x80000000) == 0 && v56 < v30)
        {
          if (v56 + v26 >= v27) {
            unsigned int v86 = v27;
          }
          else {
            unsigned int v86 = 0;
          }
          uint64_t v87 = v56 + v26 - v86;
          *(_DWORD *)(v24 + 4 * v85) = v25[v87] & 0x1FFFFFFF | 0xC0000000;
          v25[v87] = 66809520;
        }
        if (++v56 == v32) {
          goto LABEL_11;
        }
      }
    }
LABEL_101:
    uint64_t v15 = v191;
    int v17 = v193;
    unsigned int v12 = v195;
    unsigned int v18 = v200;
  }
  if (*(void *)(v15 + 168)) {
    IOSurfaceLockPlane();
  }
  unsigned int v88 = v17 + a9;
  uint32x4_t v89 = *(__IOSurface **)(v15 + 184);
  if (v89) {
    IOSurfaceLock(v89, 0, 0);
  }
  uint64_t v90 = *(void *)(v15 + 380);
  uint64_t v91 = v90;
  if (!(_BYTE)v90)
  {
    size_t v104 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v15, 0);
    uint64_t CPUPtr = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, v12, v88, 0);
    v106 = a10;
    if (a6)
    {
      uint64_t v107 = a6;
      v108 = (char *)(CPUPtr + v104 * a3 + v18 * (unint64_t)a2);
      do
      {
        memcpy(v108, v106, v18 * (unint64_t)a5);
        v106 += a11;
        v108 += v104;
        --v107;
      }
      while (v107);
    }
    goto LABEL_207;
  }
  unsigned int v224 = v88;
  uint64_t v92 = v202 * (unint64_t)v18;
  unint64_t v93 = ((unint64_t)((unsigned __int16)v90 & 0xFF00) - 256) >> 8;
  if (v93 < 2) {
    goto LABEL_110;
  }
  if (v93 == 2)
  {
    unint64_t v214 = v202 * (unint64_t)v18;
    int v114 = *(_DWORD *)(v15 + 144) + a9;
    unsigned int v115 = *(_DWORD *)(v15 + 132);
    if (*(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a9) <= 1u) {
      unsigned int v116 = 1;
    }
    else {
      unsigned int v116 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a9);
    }
    if (v115 >> v114 <= 1) {
      uint64_t v117 = 1;
    }
    else {
      uint64_t v117 = v115 >> v114;
    }
    unsigned int v118 = *(_DWORD *)(v15 + 136) >> v114;
    if (v118 <= 1) {
      int v119 = 1;
    }
    else {
      int v119 = v118;
    }
    unsigned int v120 = v224;
    int AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(v15, v224);
    int AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(v15, v224);
    uint64_t v123 = *(void *)(v15 + 488);
    if (v123 && *(_DWORD *)(v123 + 1080) > v224)
    {
      uint64_t v124 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, 0, v224, 0);
      uint64_t v125 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(*(void *)(v15 + 488), v12, v224, 0);
      unint64_t v126 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v15, 0);
      unint64_t v127 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(*(void *)(v15 + 488), 0);
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::writeCompressedRegion3D(v15, v124, (uint64_t)a10, v125, v116, v117, a2, a3, v205, a5, a6, v13, a11, a12, v126, v127, a9);
    }
    else if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v15, v224))
    {
      uint64_t v218 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, 0, v224, 0);
      unint64_t v212 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v15, 0);
      TwiddleFunc = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTwiddleFunc(v15);
      v129 = a10;
      uint64_t v130 = v214;
      if (v13)
      {
        v131 = TwiddleFunc;
        int v132 = *(_DWORD *)(v15 + 128);
        unsigned int v133 = *(_DWORD *)(v15 + 216);
        unsigned int v134 = *(_DWORD *)(v15 + 220);
        uint64_t v13 = v13;
        int v135 = *(unsigned __int8 *)(v15 + 317);
        do
        {
          TiledMemory<(TwiddleOrder)1>::convertTiles2D<false>(v218 + v212 * v205, (uint64_t)v129, v132, v224, a2, a3, a5, a6, a11, v133, v134, v130, v131, v135 != 0);
          uint64_t v130 = v214;
          ++v205;
          v129 += a12;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      unsigned int v215 = v119;
      unsigned int v220 = v116;
      unsigned int v198 = v13;
      if (*(unsigned char *)(v15 + 240))
      {
        uint64_t v146 = v15 + 242;
        uint64_t v147 = v117;
        uint64_t v148 = *(void *)(v15 + 72);
        int v149 = AddressingBaseLevelHeightInBlocks;
        unsigned int MipInTail = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v15, 0);
        unsigned int v151 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v15, 1);
        int v152 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(v15, 0);
        *(void *)&long long v226 = __PAIR64__(v12, v224);
        *((void *)&v226 + 1) = __PAIR64__(v151, MipInTail);
        int AddressingBaseLevelHeightInBlocks = v149;
        LODWORD(v227) = v152;
        *((void *)&v227 + 1) = v148;
        uint64_t v117 = v147;
        unsigned int v120 = 0;
        DWORD1(v227) = 8
                     * ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v15, 0)+ (*(_DWORD *)(v15 + 236) << 8)- 1) & -(uint64_t)(*(_DWORD *)(v15 + 236) << 8))/ *(unsigned int *)(v15 + 236);
        v153 = &v226;
      }
      else
      {
        v153 = 0;
        if (*(unsigned char *)(v15 + 232)) {
          uint64_t v146 = v15 + 242;
        }
        else {
          uint64_t v146 = 0;
        }
      }
      uint64_t v160 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, 0, v120, 0);
      v161 = agxsTwiddle3DAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)1>;
      switch(*(void *)(v15 + 32))
      {
        case 0x82:
        case 0x83:
        case 0x8CLL:
        case 0x8DLL:
          v162 = agxsTwiddle3DAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x8ELL:
        case 0x8FLL:
        case 0x96:
        case 0x97:
        case 0x98:
        case 0x99:
        case 0xBALL:
        case 0xCCLL:
        case 0xDELL:
          v162 = agxsTwiddle3DAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xB9:
        case 0xCBLL:
        case 0xDDLL:
          goto LABEL_206;
        case 0xBBLL:
        case 0xCDLL:
        case 0xDFLL:
          v162 = agxsTwiddle3DAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xBCLL:
        case 0xCELL:
        case 0xE0:
          v162 = agxsTwiddle3DAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xBDLL:
        case 0xCFLL:
        case 0xE1:
          v162 = agxsTwiddle3DAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xBELL:
        case 0xD0:
        case 0xE2:
          v162 = agxsTwiddle3DAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xBFLL:
        case 0xD1:
        case 0xE3:
          v162 = agxsTwiddle3DAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC0:
        case 0xD2:
        case 0xE4:
          v162 = agxsTwiddle3DAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC1:
        case 0xD3:
        case 0xE5:
          v162 = agxsTwiddle3DAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC2:
        case 0xD4:
        case 0xE6:
          v162 = agxsTwiddle3DAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC3:
        case 0xD5:
        case 0xE7:
          v162 = agxsTwiddle3DAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC4:
        case 0xD6:
        case 0xE8:
          v162 = agxsTwiddle3DAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC5:
        case 0xD7:
        case 0xE9:
          v162 = agxsTwiddle3DAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC6:
        case 0xD8:
        case 0xEALL:
          v162 = agxsTwiddle3DAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC7:
        case 0xD9:
        case 0xEBLL:
          v162 = agxsTwiddle3DAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)1>;
          goto LABEL_205;
        case 0xC8:
        case 0xDALL:
        case 0xECLL:
          v162 = agxsTwiddle3DAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)1>;
LABEL_205:
          v161 = v162;
LABEL_206:
          unsigned int v179 = -__clz(AddressingBaseLevelHeightInBlocks - 1);
          uint64_t v180 = (1 << -__clz(AddressingBaseLevelWidthInBlocks - 1));
          uint64_t v181 = (1 << v179);
          unint64_t v182 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(v15, 0);
          ((void (*)(uint64_t, unsigned __int8 *, void, uint64_t, void, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, long long *))v161)(v160, a10, v220, v117, v215, v180, v181, v182, __PAIR64__(a3, a2), __PAIR64__(a5, v205), __PAIR64__(v198, a6), a11, a12, v146, v153);
          break;
        default:
          v161 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
          switch(*(unsigned char *)(*(void *)(v15 + 208) + 49))
          {
            case 2:
              v162 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
              goto LABEL_205;
            case 3:
            case 5:
            case 6:
            case 7:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0xE:
            case 0xF:
              __break(1u);
              JUMPOUT(0x242B9A230);
            case 4:
              v162 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
              goto LABEL_205;
            case 8:
              v162 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
              goto LABEL_205;
            case 0x10:
              v162 = agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>;
              goto LABEL_205;
            default:
              goto LABEL_206;
          }
      }
    }
    goto LABEL_207;
  }
  if (v93 == 3)
  {
LABEL_110:
    unsigned int v94 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a9);
    if (v94 <= 1) {
      uint64_t v95 = 1;
    }
    else {
      uint64_t v95 = v94;
    }
    unsigned int v96 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a9);
    if (v96 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v96;
    }
    int v98 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(v15, v88);
    int v99 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(v15, v88);
    v100 = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTwiddleFunc(v15);
    uint64_t v101 = *(void *)(v15 + 488);
    if (v101 && *(_DWORD *)(v101 + 1080) > v88)
    {
      uint64_t v102 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, v12, v88, 0);
      uint64_t v103 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(*(void *)(v15 + 488), v12, v88, 0);
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::writeCompressedRegion2D<true>(v15, v102, (uint64_t)a10, v103, v95, v97, a2, a3, a5, a6, a11, a9);
    }
    else if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v15, v88))
    {
      uint64_t v109 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, v12, v88, 0);
      TiledMemory<(TwiddleOrder)1>::convertTiles2D<false>(v109, (uint64_t)a10, *(_DWORD *)(v15 + 128), v88, a2, a3, a5, a6, a11, *(_DWORD *)(v15 + 216), *(_DWORD *)(v15 + 220), v92, v100, *(unsigned char *)(v15 + 317));
    }
    else if (v91 == 3)
    {
      uint64_t v186 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, 0, 0, 0);
      uint64_t v230 = 0;
      long long v228 = 0u;
      long long v229 = 0u;
      long long v226 = 0u;
      long long v227 = 0u;
      uint64_t v110 = *(void *)(v15 + 208);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v226, 0, *(MTLPixelFormat *)(v15 + 32), *(unsigned __int8 *)(v110 + 49));
      int v111 = BYTE2(v226);
      if (*(void *)(v15 + 168))
      {
        unsigned __int8 CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        CompressedTilesize_t HeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
        uint64_t v110 = *(void *)(v15 + 208);
      }
      else
      {
        unsigned __int8 CompressedTileWidthOfPlane = v226;
        CompressedTilesize_t HeightOfPlane = BYTE1(v226);
      }
      v154 = a10;
      uint64_t v155 = a11;
      HIDWORD(v157) = v111;
      LODWORD(v157) = v111 - 8;
      unsigned int v156 = v157 >> 3;
      if (v156 > 7) {
        v158 = 0;
      }
      else {
        v158 = off_26F853F70[v156];
      }
      unsigned int v159 = a3 / CompressedTileHeightOfPlane;
      unsigned int v185 = a6 + a3;
      int v201 = CompressedTileHeightOfPlane;
      unsigned int v184 = (a6 + a3 - 1) / CompressedTileHeightOfPlane;
      if (v159 <= v184)
      {
        unsigned int v194 = a5 + a2;
        unsigned int v196 = CompressedTileWidthOfPlane;
        unsigned int v183 = a2 / CompressedTileWidthOfPlane;
        unsigned int v192 = (a5 + a2 - 1) / CompressedTileWidthOfPlane;
        if (v183 <= v192)
        {
          int v163 = 4 * v111;
          int v207 = (CompressedTileWidthOfPlane >> 3) * 4 * v111;
          unsigned int v188 = (CompressedTileWidthOfPlane * v111 * CompressedTileHeightOfPlane) >> 3;
          do
          {
            uint64_t v190 = v186 + (v95 + v196 - 1) / v196 * v188 * v159;
            unsigned int v187 = v159;
            uint64_t v164 = v159 * v201;
            if (a3 >= v164) {
              unsigned int v165 = a3 - v164;
            }
            else {
              unsigned int v165 = 0;
            }
            unsigned int v199 = v185 - v164;
            unint64_t v203 = v165 >> 2;
            v189 = &v154[v164 * v155];
            unsigned int v166 = v183;
            do
            {
              unsigned int v206 = v166;
              unsigned int v167 = v166 * v196;
              unsigned int v168 = a2 - v166 * v196;
              if (a2 >= v167) {
                unsigned int v169 = v168;
              }
              else {
                unsigned int v169 = 0;
              }
              unsigned int v170 = v194 - v167;
              if (v196 - v169 < v194 - v167) {
                unsigned int v170 = v196 - v169;
              }
              unsigned int v171 = v170 - 1;
              unsigned int v172 = v201 - v169;
              if (v201 - v169 >= v199) {
                unsigned int v172 = v199;
              }
              unint64_t v173 = v171 >> 3;
              unint64_t v217 = (v172 - 1) >> 2;
              if (v203 <= v217 && v169 >> 3 <= v173)
              {
                v210 = &v189[*(unsigned __int8 *)(v110 + 49) * (unint64_t)v167];
                unint64_t v175 = v203;
                do
                {
                  unint64_t v222 = v175;
                  uint64_t v225 = v190 + v206 * v188 + (v207 * v175);
                  v176 = &v210[(4 * v175) * v155];
                  unint64_t v177 = v169 >> 3;
                  do
                  {
                    ((void (*)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))v158)(v225 + (v163 * v177), &v176[8 * v177 * *(unsigned __int8 *)(v110 + 49)], 8, 4, 8, 4);
                    uint64_t v155 = a11;
                  }
                  while (v177++ < v173);
                  unint64_t v175 = v222 + 1;
                }
                while (v222 < v217);
              }
              unsigned int v166 = v206 + 1;
            }
            while (v206 + 1 <= v192);
            unsigned int v159 = v187 + 1;
            v154 = a10;
          }
          while (v187 + 1 <= v184);
        }
      }
      uint64_t v15 = v191;
    }
    else
    {
      uint64_t v136 = (1 << -(char)__clz(v98 - 1));
      uint64_t v137 = (1 << -(char)__clz(v99 - 1));
      if (*(unsigned char *)(v15 + 240))
      {
        unsigned int v219 = v137;
        uint64_t v138 = v136;
        uint64_t v139 = *(void *)(v15 + 72);
        unsigned int v140 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v15, 0);
        unsigned int v141 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::firstMipInTail(v15, 1);
        int v142 = AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::tailSize(v15, 0);
        *(void *)&long long v226 = __PAIR64__(v12, v88);
        *((void *)&v226 + 1) = __PAIR64__(v141, v140);
        uint64_t v143 = v15 + 242;
        LODWORD(v227) = v142;
        *((void *)&v227 + 1) = v139;
        uint64_t v136 = v138;
        uint64_t v137 = v219;
        uint64_t v144 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, 0, 0, 0);
        v145 = &v226;
      }
      else
      {
        if (*(unsigned char *)(v15 + 232)) {
          uint64_t v143 = v15 + 242;
        }
        else {
          uint64_t v143 = 0;
        }
        uint64_t v144 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getCPUPtr(v15, v12, v88, 0);
        v145 = 0;
      }
      ((void (*)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, unint64_t, uint64_t, uint64_t, long long *))v100)(v144, a10, v95, v97, v136, v137, a2, a3, __PAIR64__(a6, a5), a11, v143, v145);
    }
  }
LABEL_207:
  if (*(void *)(v15 + 168)) {
    IOSurfaceUnlockPlane();
  }
  uint64_t result = *(__IOSurface **)(v15 + 184);
  if (result) {
    return (__IOSurface *)IOSurfaceUnlock(result, 0, 0);
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::validateRegion(uint64_t a1, int a2, int a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a5)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "width > 0");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "width > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "width > 0";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "width > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "width > 0";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  if (!a6)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "height > 0");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "height > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "height > 0";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "height > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "height > 0";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  if (!a7)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "depth > 0");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "depth > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "depth > 0";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "depth > 0";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "depth > 0";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 144) + a9;
  unsigned int v14 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a9);
  if (v14 <= 1) {
    unsigned int v14 = 1;
  }
  unint64_t v15 = *(unsigned int *)(a1 + 216);
  if (v14 + v15 + ~(((unint64_t)(v14 + v15) - 1) % v15) < (a5 + a2))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
    int v16 = &_os_log_internal;
LABEL_98:
    _os_log_impl(&dword_2427AD000, v16, OS_LOG_TYPE_INFO, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    return 0;
  }
  if (*(_DWORD *)(a1 + 132) >> v13 <= 1u) {
    int v17 = 1;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 132) >> v13;
  }
  unint64_t v18 = *(unsigned int *)(a1 + 220);
  if ((v17 + v18) + ~(((unint64_t)(v17 + v18) - 1) % v18) < (a6 + a3))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  unsigned int v19 = *(_DWORD *)(a1 + 136) >> v13;
  if (v19 <= 1) {
    unsigned int v19 = 1;
  }
  if (a7 + a4 > v19)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  uint64_t v20 = *(void *)(a1 + 380) & 0xFF00;
  if ((*(void *)(a1 + 380) & 0x10000) != 0 || v20 == 1024)
  {
    if (v20 == 1024) {
      unsigned int v21 = 6 * *(_DWORD *)(a1 + 376);
    }
    else {
      unsigned int v21 = *(_DWORD *)(a1 + 376);
    }
  }
  else
  {
    unsigned int v21 = 1;
  }
  if (v21 <= a8)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "slice < getNumSlices() && \"Specified slice OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "slice < getNumSlices() && \"Specified slice OOB\"";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  if (*(_DWORD *)(a1 + 140) <= a9)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  uint64_t v22 = *(void *)(a1 + 208);
  if (!*(_DWORD *)(v22 + 24))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "AGX: Texture read/write assertion failed: %s\n", "plane < getNumPlanes() && \"Specified plane OOB\"");
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "plane < getNumPlanes() && \"Specified plane OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "plane < getNumPlanes() && \"Specified plane OOB\"";
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v26 = "plane < getNumPlanes() && \"Specified plane OOB\"";
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)buf = 136315138;
    int v26 = "plane < getNumPlanes() && \"Specified plane OOB\"";
    int v16 = &_os_log_internal;
    goto LABEL_98;
  }
  int v23 = *(unsigned __int8 *)(v22 + 88);

  return agxaAssertBufferIsValid(a10, a11, a12, v23, a5, a6, v18, v15, a7);
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelWidthInBlocks(uint64_t a1, char a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 380);
  if (v4 == 2)
  {
    BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, a2);
    if (*(_DWORD *)(*(void *)(a1 + 208) + 56) && !isLevelTiled) {
      goto LABEL_4;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 316)) {
      BOOL v9 = v4 == 1;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
LABEL_4:
      unsigned int v6 = *(_DWORD *)(a1 + 128);
      if (v6 <= 1) {
        unsigned int v6 = 1;
      }
      unsigned int v7 = (1 << -(char)__clz((*(_DWORD *)(a1 + 216) + v6 - 1) / *(_DWORD *)(a1 + 216) - 1)) >> a2;
      if (v7 <= 1) {
        return 1;
      }
      else {
        return v7;
      }
    }
  }
  unsigned int v10 = *(_DWORD *)(a1 + 128) >> a2;
  if (v10 <= 1) {
    unsigned int v10 = 1;
  }
  return (*(_DWORD *)(a1 + 216) + v10 - 1) / *(_DWORD *)(a1 + 216);
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getAddressingBaseLevelHeightInBlocks(uint64_t a1, char a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 380);
  if (v4 == 2)
  {
    BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, a2);
    if (*(_DWORD *)(*(void *)(a1 + 208) + 56) && !isLevelTiled) {
      goto LABEL_4;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 316)) {
      BOOL v9 = v4 == 1;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
LABEL_4:
      unsigned int v6 = *(_DWORD *)(a1 + 132);
      if (v6 <= 1) {
        unsigned int v6 = 1;
      }
      unsigned int v7 = (1 << -(char)__clz((*(_DWORD *)(a1 + 220) + v6 - 1) / *(_DWORD *)(a1 + 220) - 1)) >> a2;
      if (v7 <= 1) {
        return 1;
      }
      else {
        return v7;
      }
    }
  }
  unsigned int v10 = *(_DWORD *)(a1 + 132) >> a2;
  if (v10 <= 1) {
    unsigned int v10 = 1;
  }
  return (*(_DWORD *)(a1 + 220) + v10 - 1) / *(_DWORD *)(a1 + 220);
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getTwiddleFunc(uint64_t a1)
{
  v1 = agxsTwiddleAddressPVRTC2<true,(TwiddleOrder)1>;
  switch(*(void *)(a1 + 32))
  {
    case 0x82:
    case 0x83:
    case 0x8CLL:
    case 0x8DLL:
    case 0xAALL:
    case 0xACLL:
    case 0xB4:
    case 0xB5:
    case 0xB6:
    case 0xB7:
      uint64_t result = agxsTwiddleAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)1>;
      break;
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x8ELL:
    case 0x8FLL:
    case 0x96:
    case 0x97:
    case 0x98:
    case 0x99:
    case 0xAELL:
    case 0xB0:
    case 0xB2:
    case 0xB3:
    case 0xBALL:
    case 0xCCLL:
    case 0xDELL:
      uint64_t result = agxsTwiddleAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xA0:
    case 0xA1:
    case 0xA4:
    case 0xA5:
      goto LABEL_34;
    case 0xA2:
    case 0xA3:
    case 0xA6:
    case 0xA7:
      uint64_t result = agxsTwiddleAddressPVRTC4<true,(TwiddleOrder)1>;
      break;
    case 0xB9:
    case 0xCBLL:
    case 0xDDLL:
      uint64_t result = agxsTwiddleAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBBLL:
    case 0xCDLL:
    case 0xDFLL:
      uint64_t result = agxsTwiddleAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBCLL:
    case 0xCELL:
    case 0xE0:
      uint64_t result = agxsTwiddleAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBDLL:
    case 0xCFLL:
    case 0xE1:
      uint64_t result = agxsTwiddleAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBELL:
    case 0xD0:
    case 0xE2:
      uint64_t result = agxsTwiddleAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xBFLL:
    case 0xD1:
    case 0xE3:
      uint64_t result = agxsTwiddleAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC0:
    case 0xD2:
    case 0xE4:
      uint64_t result = agxsTwiddleAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC1:
    case 0xD3:
    case 0xE5:
      uint64_t result = agxsTwiddleAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC2:
    case 0xD4:
    case 0xE6:
      uint64_t result = agxsTwiddleAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC3:
    case 0xD5:
    case 0xE7:
      uint64_t result = agxsTwiddleAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC4:
    case 0xD6:
    case 0xE8:
      uint64_t result = agxsTwiddleAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC5:
    case 0xD7:
    case 0xE9:
      uint64_t result = agxsTwiddleAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC6:
    case 0xD8:
    case 0xEALL:
      uint64_t result = agxsTwiddleAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC7:
    case 0xD9:
    case 0xEBLL:
      uint64_t result = agxsTwiddleAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)1>;
      break;
    case 0xC8:
    case 0xDALL:
    case 0xECLL:
      uint64_t result = agxsTwiddleAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)1>;
      break;
    default:
      v1 = 0;
      switch(*(unsigned char *)(*(void *)(a1 + 208) + 88))
      {
        case 1:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853DF0;
          goto LABEL_33;
        case 2:
          v1 = 0;
          switch(*(_DWORD *)(a1 + 112))
          {
            case 1:
              if (*(unsigned char *)(a1 + 16)) {
                uint64_t result = agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>;
              }
              else {
                uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>;
              }
              break;
            case 2:
              if (*(unsigned char *)(a1 + 16)) {
                uint64_t result = agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>;
              }
              else {
                uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>;
              }
              break;
            case 4:
              if (*(unsigned char *)(a1 + 16)) {
                uint64_t result = agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>;
              }
              else {
                uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>;
              }
              break;
            case 8:
              if (*(unsigned char *)(a1 + 16)) {
                uint64_t result = agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>;
              }
              else {
                uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>;
              }
              break;
            default:
              goto LABEL_34;
          }
          return result;
        case 4:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853E30;
          goto LABEL_33;
        case 8:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853E70;
          goto LABEL_33;
        case 0x10:
          unsigned int v3 = *(_DWORD *)(a1 + 112) - 1;
          if (v3 >= 8) {
            return 0;
          }
          uint64_t v4 = off_26F853EB0;
LABEL_33:
          v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, int))v4[v3];
          break;
        default:
          break;
      }
LABEL_34:
      uint64_t result = v1;
      break;
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::writeCompressedRegion2D<true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v13 = a2;
  MTLPixelFormat v15 = *(void *)(a1 + 32);
  if (v15 == MTLPixelFormatDepth32Float_Stencil8) {
    uint64_t v16 = 252;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 380);
  if (v17 == 3)
  {
    if (*(void *)(a1 + 488))
    {
      if (*(void *)(a1 + 168))
      {
        char CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        uint64_t v13 = a2;
        IOSurfaceGetCompressedTileHeightOfPlane();
        if (CompressedTileWidthOfPlane == 32) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 208);
        uint64_t v374 = 0;
        memset(v373, 0, sizeof(v373));
        InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v373, 0, v15, *(unsigned __int8 *)(v33 + 49));
        if (LOBYTE(v373[0]) == 32)
        {
LABEL_8:
          switch(v16)
          {
            case 1:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_90;
                case 1u:
                  goto LABEL_210;
                case 2u:
                  goto LABEL_211;
                case 3u:
                  goto LABEL_212;
                case 4u:
                  goto LABEL_213;
                default:
                  return;
              }
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 21:
              return;
            case 10:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_90;
                case 1u:
                  goto LABEL_210;
                case 2u:
                  goto LABEL_211;
                case 3u:
                  goto LABEL_212;
                case 4u:
                  goto LABEL_213;
                default:
                  return;
              }
            case 11:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
LABEL_90:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 1u:
LABEL_210:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 2u:
LABEL_211:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 3u:
LABEL_212:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 4u:
LABEL_213:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                default:
                  return;
              }
              break;
            case 20:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 22:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 23:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 24:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
                  goto LABEL_96;
                case 1u:
                  goto LABEL_105;
                case 2u:
                  goto LABEL_106;
                case 3u:
                  goto LABEL_107;
                case 4u:
                  goto LABEL_108;
                default:
                  return;
              }
            case 25:
              switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
              {
                case 0u:
LABEL_96:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 1u:
LABEL_105:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 2u:
LABEL_106:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 3u:
LABEL_107:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                case 4u:
LABEL_108:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  break;
                default:
                  return;
              }
              break;
            default:
              switch(v16)
              {
                case 576:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 577:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 603:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_100;
                    case 1u:
                      goto LABEL_296;
                    case 2u:
                      goto LABEL_297;
                    case 3u:
                      goto LABEL_298;
                    case 4u:
                      goto LABEL_299;
                    default:
                      return;
                  }
                case 604:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
LABEL_100:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 1u:
LABEL_296:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 2u:
LABEL_297:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 3u:
LABEL_298:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 4u:
LABEL_299:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    default:
                      return;
                  }
                  break;
                case 606:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 642:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
                      goto LABEL_104;
                    case 1u:
                      goto LABEL_109;
                    case 2u:
                      goto LABEL_110;
                    case 3u:
                      goto LABEL_111;
                    case 4u:
                      goto LABEL_112;
                    default:
                      return;
                  }
                case 643:
                  switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
                  {
                    case 0u:
LABEL_104:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 1u:
LABEL_109:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 2u:
LABEL_110:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 3u:
LABEL_111:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    case 4u:
LABEL_112:
                      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                      break;
                    default:
                      return;
                  }
                  break;
                default:
                  return;
              }
              break;
          }
          return;
        }
      }
    }
    switch(v16)
    {
      case 1:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 26:
      case 27:
      case 28:
      case 29:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 61:
      case 66:
      case 67:
      case 68:
      case 69:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 92:
      case 93:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 111:
        return;
      case 10:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 11:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_214;
          case 2u:
            goto LABEL_215;
          case 3u:
            goto LABEL_216;
          case 4u:
            goto LABEL_217;
          default:
            return;
        }
      case 13:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_116:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_214:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_215:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_216:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_217:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 20:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 22:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 23:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 24:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_122;
          case 1u:
            goto LABEL_184;
          case 2u:
            goto LABEL_185;
          case 3u:
            goto LABEL_186;
          case 4u:
            goto LABEL_187;
          default:
            return;
        }
      case 25:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_122:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_184:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_185:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_186:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_187:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 30:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 31:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 32:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 33:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_128;
          case 1u:
            goto LABEL_188;
          case 2u:
            goto LABEL_189;
          case 3u:
            goto LABEL_190;
          case 4u:
            goto LABEL_195;
          default:
            return;
        }
      case 34:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_128:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_188:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_189:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_190:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_195:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 60:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 62:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 63:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 64:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_134;
          case 1u:
            goto LABEL_191;
          case 2u:
            goto LABEL_192;
          case 3u:
            goto LABEL_193;
          case 4u:
            goto LABEL_194;
          default:
            return;
        }
      case 65:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_134:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_191:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_192:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_193:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_194:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 70:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 71:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 72:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 73:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 74:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 80:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_142;
          case 1u:
            goto LABEL_143;
          case 2u:
            goto LABEL_144;
          case 3u:
            goto LABEL_145;
          case 4u:
            goto LABEL_146;
          default:
            return;
        }
      case 81:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_142:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_143:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_144:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_145:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_146:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      case 90:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 91:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 94:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_167;
          case 1u:
            goto LABEL_168;
          case 2u:
            goto LABEL_169;
          case 3u:
            goto LABEL_170;
          case 4u:
            goto LABEL_171;
          default:
            return;
        }
      case 110:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 112:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 113:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 114:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
            goto LABEL_155;
          case 1u:
            goto LABEL_196;
          case 2u:
            goto LABEL_197;
          case 3u:
            goto LABEL_198;
          case 4u:
            goto LABEL_199;
          default:
            return;
        }
      case 115:
        switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
        {
          case 0u:
LABEL_155:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 1u:
LABEL_196:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 2u:
LABEL_197:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 3u:
LABEL_198:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          case 4u:
LABEL_199:
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
            break;
          default:
            return;
        }
        break;
      default:
        switch(v16)
        {
          case 552:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 553:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 554:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 555:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 578:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_183;
              case 1u:
                goto LABEL_292;
              case 2u:
                goto LABEL_293;
              case 3u:
                goto LABEL_294;
              case 4u:
                goto LABEL_295;
              default:
                return;
            }
          case 579:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_183;
              case 1u:
                goto LABEL_292;
              case 2u:
                goto LABEL_293;
              case 3u:
                goto LABEL_294;
              case 4u:
                goto LABEL_295;
              default:
                return;
            }
          case 586:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 587:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 605:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 628:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_167;
              case 1u:
                goto LABEL_168;
              case 2u:
                goto LABEL_169;
              case 3u:
                goto LABEL_170;
              case 4u:
                goto LABEL_171;
              default:
                return;
            }
          case 629:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_167:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_168:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_169:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_170:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_171:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 637:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 638:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 639:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 640:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
                goto LABEL_177;
              case 1u:
                goto LABEL_178;
              case 2u:
                goto LABEL_179;
              case 3u:
                goto LABEL_180;
              case 4u:
                goto LABEL_181;
              default:
                return;
            }
          case 641:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_177:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_178:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_179:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_180:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_181:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          case 644:
            switch(getCompressionCodecConfig(*(void *)(a1 + 56)))
            {
              case 0u:
LABEL_183:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 1u:
LABEL_292:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 2u:
LABEL_293:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 3u:
LABEL_294:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              case 4u:
LABEL_295:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)3>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                break;
              default:
                return;
            }
            break;
          default:
            return;
        }
        break;
    }
  }
  else
  {
    unsigned int v19 = (void *)(a1 + 56);
    int v20 = *(unsigned __int8 *)(a1 + 57);
    if (v20 == 3)
    {
      int v22 = *(_DWORD *)(a1 + 112);
      switch(v22)
      {
        case 4:
          switch(v16)
          {
            case 1:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3) {
                goto LABEL_735;
              }
              break;
            case 10:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 11:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 12:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 13:
              if (v17 != 1) {
                goto LABEL_734;
              }
              break;
            case 14:
              if (v17 != 1)
              {
LABEL_734:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_735:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 20:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3) {
                goto LABEL_749;
              }
              break;
            case 22:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 23:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 24:
              if (v17 != 1) {
                goto LABEL_748;
              }
              break;
            case 25:
              if (v17 != 1)
              {
LABEL_748:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_749:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 30:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 31:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 32:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 33:
              if (v17 != 1) {
                goto LABEL_761;
              }
              break;
            case 34:
              if (v17 != 1)
              {
LABEL_761:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 53:
              if (v17 != 1) {
                goto LABEL_770;
              }
              break;
            case 54:
              if (v17 != 1) {
                goto LABEL_770;
              }
              break;
            case 55:
              if (v17 != 1)
              {
LABEL_770:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 60:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 62:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 63:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 64:
              if (v17 != 1) {
                goto LABEL_783;
              }
              break;
            case 65:
              if (v17 != 1)
              {
LABEL_783:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 70:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 71:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 72:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 73:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 74:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 80:
              if (v17 != 1) {
                goto LABEL_800;
              }
              break;
            case 81:
              if (v17 != 1)
              {
LABEL_800:
                if (getCompressionCodecConfig(*v19) == 3) {
                  goto LABEL_848;
                }
              }
              break;
            case 84:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 85:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 90:
              if (v17 != 1) {
                goto LABEL_811;
              }
              break;
            case 91:
              if (v17 != 1) {
                goto LABEL_811;
              }
              break;
            case 94:
              if (v17 != 1)
              {
LABEL_811:
                if (getCompressionCodecConfig(*v19) == 3) {
                  goto LABEL_873;
                }
              }
              break;
            case 103:
              if (v17 != 1) {
                goto LABEL_818;
              }
              break;
            case 104:
              if (v17 != 1) {
                goto LABEL_818;
              }
              break;
            case 105:
              if (v17 != 1)
              {
LABEL_818:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 110:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 112:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 113:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 114:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 115:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 123:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 124:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 125:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 300:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 301:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 302:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 303:
              if (v17 != 1) {
                goto LABEL_847;
              }
              break;
            case 304:
              if (v17 != 1)
              {
LABEL_847:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_848:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 313:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 314:
              if (v17 != 1) {
                goto LABEL_856;
              }
              break;
            case 315:
              if (v17 != 1)
              {
LABEL_856:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 323:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 324:
              if (v17 != 1) {
                goto LABEL_865;
              }
              break;
            case 325:
              if (v17 != 1)
              {
LABEL_865:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 554:
              if (v17 != 1) {
                goto LABEL_872;
              }
              break;
            case 555:
              if (v17 != 1)
              {
LABEL_872:
                if (getCompressionCodecConfig(*v19) == 3)
                {
LABEL_873:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            default:
              return;
          }
          break;
        case 2:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 53:
            case 54:
            case 55:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 80:
            case 81:
            case 304:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 84:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 85:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 90:
            case 91:
            case 554:
            case 555:
              if (v17 != 1) {
                goto LABEL_881;
              }
              break;
            case 94:
              if (v17 != 1)
              {
LABEL_881:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 103:
            case 104:
            case 105:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 124:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 125:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 300:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 301:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 302:
              if (v17 != 1) {
                goto LABEL_64;
              }
              break;
            case 303:
              if (v17 != 1)
              {
LABEL_64:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            case 323:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 324:
              if (v17 != 1) {
                goto LABEL_904;
              }
              break;
            case 325:
              if (v17 != 1)
              {
LABEL_904:
                if (getCompressionCodecConfig(*v19) == 3)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
            default:
              return;
          }
          break;
        case 1:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 53:
            case 54:
            case 55:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 80:
            case 81:
            case 84:
            case 85:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 90:
            case 91:
            case 94:
            case 554:
            case 555:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 103:
            case 104:
            case 105:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              if (v17 != 1 && getCompressionCodecConfig(*v19) == 3)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            default:
              return;
          }
          break;
      }
    }
    else if (v20 == 1)
    {
      int v21 = *(_DWORD *)(a1 + 112);
      switch(v21)
      {
        case 4:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_47;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_47:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
        case 2:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_53;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_53:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
        case 1:
          switch(v16)
          {
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              goto LABEL_16;
            default:
              if (v16 == 553 || v16 == 552)
              {
LABEL_16:
                if (v17 != 1 && getCompressionCodecConfig(*v19) == 1)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              break;
          }
          break;
      }
    }
    else
    {
      int v23 = *(_DWORD *)(a1 + 112);
      switch(v23)
      {
        case 4:
          switch(v16)
          {
            case 1:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig != 4) {
                  goto LABEL_990;
                }
                uint64_t v82 = a1;
                uint64_t v83 = v13;
                uint64_t v84 = a3;
                uint64_t v85 = a4;
                unsigned int v86 = a5;
                unsigned int v87 = a6;
                unsigned int v88 = a7;
                unsigned int v89 = a8;
                goto LABEL_357;
              }
              if (CompressionCodecConfig == 4) {
                goto LABEL_1450;
              }
              if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = v13;
                uint64_t v187 = a3;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
                goto LABEL_539;
              }
              return;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig != 4) {
                  goto LABEL_990;
                }
                uint64_t v82 = a1;
                uint64_t v83 = v13;
                uint64_t v84 = a3;
                uint64_t v85 = a4;
                unsigned int v86 = a5;
                unsigned int v87 = a6;
                unsigned int v88 = a7;
                unsigned int v89 = a8;
                goto LABEL_357;
              }
              if (CompressionCodecConfig == 4)
              {
                uint64_t v311 = a1;
                uint64_t v312 = v13;
                uint64_t v313 = a3;
                uint64_t v314 = a4;
                unsigned int v315 = a5;
                unsigned int v316 = a6;
                unsigned int v317 = a7;
                unsigned int v318 = a8;
                goto LABEL_1273;
              }
              if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = v13;
                uint64_t v187 = a3;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
                goto LABEL_539;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v90 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v90 != 4) {
                  goto LABEL_609;
                }
                uint64_t v91 = a1;
                uint64_t v92 = v13;
                uint64_t v93 = a3;
                uint64_t v94 = a4;
                unsigned int v95 = a5;
                unsigned int v96 = a6;
                unsigned int v97 = a7;
                unsigned int v98 = a8;
                goto LABEL_362;
              }
              if (v90 == 4) {
                goto LABEL_1158;
              }
              if (!v90) {
                goto LABEL_1155;
              }
              return;
            case 26:
            case 250:
              int v90 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v90 == 4)
                {
                  uint64_t v91 = a1;
                  uint64_t v92 = v13;
                  uint64_t v93 = a3;
                  uint64_t v94 = a4;
                  unsigned int v95 = a5;
                  unsigned int v96 = a6;
                  unsigned int v97 = a7;
                  unsigned int v98 = a8;
LABEL_362:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v91, v92, v93, v94, v95, v96, v97, v98, a9, a10, a11, a12);
                }
                else
                {
LABEL_609:
                  if (!v90)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v90 == 4)
              {
LABEL_1158:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v90)
              {
LABEL_1155:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v99 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v99 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v99)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v99 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v99)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v250 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v250 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v250)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v250 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v250)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v251 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v251 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v251)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v251 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v251)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v252 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1199;
              }
              if (v252 != 4) {
                goto LABEL_1019;
              }
              goto LABEL_1008;
            case 43:
              int v253 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v253 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v253)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v253 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v253)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v252 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v252 == 4)
                {
LABEL_1008:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_1019:
                  if (!v252)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1199:
                if (v252 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v252)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 53:
            case 54:
            case 55:
              int v156 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v156 != 4) {
                  goto LABEL_1041;
                }
                uint64_t v157 = a1;
                uint64_t v158 = v13;
                uint64_t v159 = a3;
                uint64_t v160 = a4;
                unsigned int v161 = a5;
                unsigned int v162 = a6;
                unsigned int v163 = a7;
                unsigned int v164 = a8;
                goto LABEL_477;
              }
              if (v156 == 4)
              {
                uint64_t v343 = a1;
                uint64_t v344 = v13;
                uint64_t v345 = a3;
                uint64_t v346 = a4;
                unsigned int v347 = a5;
                unsigned int v348 = a6;
                unsigned int v349 = a7;
                unsigned int v350 = a8;
                goto LABEL_1315;
              }
              if (!v156) {
                goto LABEL_1408;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v100 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v100 == 4)
                {
                  uint64_t v287 = a1;
                  uint64_t v288 = v13;
                  uint64_t v289 = a3;
                  uint64_t v290 = a4;
                  unsigned int v291 = a5;
                  unsigned int v292 = a6;
                  unsigned int v293 = a7;
                  unsigned int v294 = a8;
                  goto LABEL_1255;
                }
                if (v100) {
                  return;
                }
                goto LABEL_372;
              }
              if (v100 == 4)
              {
                uint64_t v319 = a1;
                uint64_t v320 = v13;
                uint64_t v321 = a3;
                uint64_t v322 = a4;
                unsigned int v323 = a5;
                unsigned int v324 = a6;
                unsigned int v325 = a7;
                unsigned int v326 = a8;
                goto LABEL_1279;
              }
              if (v100) {
                return;
              }
              goto LABEL_550;
            case 66:
              int v254 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v254 == 4)
                {
                  uint64_t v287 = a1;
                  uint64_t v288 = v13;
                  uint64_t v289 = a3;
                  uint64_t v290 = a4;
                  unsigned int v291 = a5;
                  unsigned int v292 = a6;
                  unsigned int v293 = a7;
                  unsigned int v294 = a8;
LABEL_1255:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v287, v288, v289, v290, v291, v292, v293, v294, a9, a10, a11, a12);
                }
                else if (!v254)
                {
LABEL_372:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v254 == 4)
              {
                uint64_t v319 = a1;
                uint64_t v320 = v13;
                uint64_t v321 = a3;
                uint64_t v322 = a4;
                unsigned int v323 = a5;
                unsigned int v324 = a6;
                unsigned int v325 = a7;
                unsigned int v326 = a8;
LABEL_1279:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v319, v320, v321, v322, v323, v324, v325, v326, a9, a10, a11, a12);
              }
              else if (!v254)
              {
LABEL_550:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 73:
            case 84:
            case 85:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v34 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_443;
              }
              if (v34 == 4) {
                goto LABEL_677;
              }
              if (v34) {
                return;
              }
              goto LABEL_674;
            case 72:
            case 74:
            case 80:
            case 81:
              int v34 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_443:
                if (v34 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v34)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v34 == 4)
              {
LABEL_677:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v34)
              {
LABEL_674:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v193 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_618;
              }
              if (v193 == 4) {
                goto LABEL_1169;
              }
              if (v193) {
                return;
              }
              goto LABEL_1166;
            case 92:
              int v255 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v255 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v255)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v255 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v255)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v256 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v256 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v256)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v256 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v256)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
              int v165 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v165 == 4) {
                  goto LABEL_717;
                }
                if (!v165) {
                  goto LABEL_624;
                }
              }
              else
              {
                if (v165 == 4) {
                  goto LABEL_1169;
                }
                if (!v165) {
                  goto LABEL_1166;
                }
              }
              return;
            case 103:
            case 104:
            case 105:
              int v184 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v184 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v184)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v184 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v184)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
              int v121 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_412;
              }
              if (v121 == 4)
              {
                uint64_t v295 = a1;
                uint64_t v296 = v13;
                uint64_t v297 = a3;
                uint64_t v298 = a4;
                uint64_t v299 = a5;
                uint64_t v300 = a6;
                uint64_t v301 = a7;
                uint64_t v302 = a8;
                goto LABEL_1264;
              }
              if (!v121) {
                goto LABEL_571;
              }
              return;
            case 116:
            case 313:
            case 314:
            case 315:
            case 556:
              int v121 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_412:
                if (v121 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v121)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v121 == 4)
              {
                uint64_t v295 = a1;
                uint64_t v296 = v13;
                uint64_t v297 = a3;
                uint64_t v298 = a4;
                uint64_t v299 = a5;
                uint64_t v300 = a6;
                uint64_t v301 = a7;
                uint64_t v302 = a8;
LABEL_1264:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v295, v296, v297, v298, v299, v300, v301, v302, a9, a10, a11, a12);
              }
              else if (!v121)
              {
LABEL_571:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v59 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v59 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v59)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v59 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v59)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v156 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v156 == 4)
                {
                  uint64_t v157 = a1;
                  uint64_t v158 = v13;
                  uint64_t v159 = a3;
                  uint64_t v160 = a4;
                  unsigned int v161 = a5;
                  unsigned int v162 = a6;
                  unsigned int v163 = a7;
                  unsigned int v164 = a8;
LABEL_477:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v157, v158, v159, v160, v161, v162, v163, v164, a9, a10, a11, a12);
                }
                else
                {
LABEL_1041:
                  if (!v156)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v156 == 4)
              {
                uint64_t v343 = a1;
                uint64_t v344 = v13;
                uint64_t v345 = a3;
                uint64_t v346 = a4;
                unsigned int v347 = a5;
                unsigned int v348 = a6;
                unsigned int v349 = a7;
                unsigned int v350 = a8;
LABEL_1315:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v343, v344, v345, v346, v347, v348, v349, v350, a9, a10, a11, a12);
              }
              else if (!v156)
              {
LABEL_1408:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int CompressionCodecConfig = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (CompressionCodecConfig == 4)
                {
                  uint64_t v82 = a1;
                  uint64_t v83 = v13;
                  uint64_t v84 = a3;
                  uint64_t v85 = a4;
                  unsigned int v86 = a5;
                  unsigned int v87 = a6;
                  unsigned int v88 = a7;
                  unsigned int v89 = a8;
LABEL_357:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v82, v83, v84, v85, v86, v87, v88, v89, a9, a10, a11, a12);
                }
                else
                {
LABEL_990:
                  if (!CompressionCodecConfig)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (CompressionCodecConfig == 4)
              {
LABEL_1450:
                uint64_t v311 = a1;
                uint64_t v312 = v13;
                uint64_t v313 = a3;
                uint64_t v314 = a4;
                unsigned int v315 = a5;
                unsigned int v316 = a6;
                unsigned int v317 = a7;
                unsigned int v318 = a8;
LABEL_1273:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v311, v312, v313, v314, v315, v316, v317, v318, a9, a10, a11, a12);
              }
              else if (!CompressionCodecConfig)
              {
                uint64_t v185 = a1;
                uint64_t v186 = v13;
                uint64_t v187 = a3;
                uint64_t v188 = a4;
                unsigned int v189 = a5;
                unsigned int v190 = a6;
                unsigned int v191 = a7;
                unsigned int v192 = a8;
LABEL_539:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v185, v186, v187, v188, v189, v190, v191, v192, a9, a10, a11, a12);
              }
              return;
            case 552:
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v47 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v47 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v47)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v47 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v47)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 554:
            case 555:
              int v193 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_618:
                if (v193 == 4) {
                  goto LABEL_717;
                }
                if (!v193) {
                  goto LABEL_624;
                }
              }
              else
              {
                if (v193 == 4) {
                  goto LABEL_1169;
                }
                if (!v193) {
                  goto LABEL_1166;
                }
              }
              break;
            case 628:
            case 629:
              int v194 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v194 == 4)
                {
LABEL_717:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v194)
                {
LABEL_624:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v194 == 4)
              {
LABEL_1169:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v194)
              {
LABEL_1166:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            default:
              return;
          }
          break;
        case 2:
          switch(v16)
          {
            case 1:
            case 14:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_692;
              }
              if (v130 == 4) {
                goto LABEL_1196;
              }
              if (!v130) {
                goto LABEL_659;
              }
              return;
            case 10:
            case 11:
            case 12:
            case 13:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v130 != 4) {
                  goto LABEL_693;
                }
                uint64_t v131 = a1;
                uint64_t v132 = v13;
                uint64_t v133 = a3;
                uint64_t v134 = a4;
                unsigned int v135 = a5;
                unsigned int v136 = a6;
                unsigned int v137 = a7;
                unsigned int v138 = a8;
                goto LABEL_441;
              }
              if (v130 == 4)
              {
LABEL_1196:
                uint64_t v279 = a1;
                uint64_t v280 = v13;
                uint64_t v281 = a3;
                uint64_t v282 = a4;
                unsigned int v283 = a5;
                unsigned int v284 = a6;
                unsigned int v285 = a7;
                unsigned int v286 = a8;
                goto LABEL_1198;
              }
              if (!v130)
              {
LABEL_659:
                uint64_t v195 = a1;
                uint64_t v196 = v13;
                uint64_t v197 = a3;
                uint64_t v198 = a4;
                unsigned int v199 = a5;
                unsigned int v200 = a6;
                unsigned int v201 = a7;
                unsigned int v202 = a8;
                goto LABEL_661;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v101 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v101 != 4) {
                  goto LABEL_633;
                }
                uint64_t v102 = a1;
                uint64_t v103 = v13;
                uint64_t v104 = a3;
                uint64_t v105 = a4;
                unsigned int v106 = a5;
                unsigned int v107 = a6;
                unsigned int v108 = a7;
                unsigned int v109 = a8;
                goto LABEL_379;
              }
              if (v101 == 4) {
                goto LABEL_1177;
              }
              if (!v101) {
                goto LABEL_1174;
              }
              return;
            case 26:
            case 250:
              int v101 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v101 == 4)
                {
                  uint64_t v102 = a1;
                  uint64_t v103 = v13;
                  uint64_t v104 = a3;
                  uint64_t v105 = a4;
                  unsigned int v106 = a5;
                  unsigned int v107 = a6;
                  unsigned int v108 = a7;
                  unsigned int v109 = a8;
LABEL_379:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v102, v103, v104, v105, v106, v107, v108, v109, a9, a10, a11, a12);
                }
                else
                {
LABEL_633:
                  if (!v101)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v101 == 4)
              {
LABEL_1177:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v101)
              {
LABEL_1174:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v110 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v110 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v110)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v110 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v110)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v257 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v257 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v257)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v257 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v257)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v258 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v258 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v258)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v258 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v258)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v259 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1204;
              }
              if (v259 != 4) {
                goto LABEL_1070;
              }
              goto LABEL_1059;
            case 43:
              int v260 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v260 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v260)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v260 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v260)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v259 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v259 == 4)
                {
LABEL_1059:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_1070:
                  if (!v259)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1204:
                if (v259 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v259)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 53:
            case 54:
            case 55:
              int v166 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v166 != 4) {
                  goto LABEL_1093;
                }
                uint64_t v167 = a1;
                uint64_t v168 = v13;
                uint64_t v169 = a3;
                uint64_t v170 = a4;
                unsigned int v171 = a5;
                unsigned int v172 = a6;
                unsigned int v173 = a7;
                unsigned int v174 = a8;
                goto LABEL_486;
              }
              if (v166 == 4)
              {
                uint64_t v351 = a1;
                uint64_t v352 = v13;
                uint64_t v353 = a3;
                uint64_t v354 = a4;
                unsigned int v355 = a5;
                unsigned int v356 = a6;
                unsigned int v357 = a7;
                unsigned int v358 = a8;
                goto LABEL_1318;
              }
              if (!v166) {
                goto LABEL_1441;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v111 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v111 != 4) {
                  goto LABEL_388;
                }
                uint64_t v261 = a1;
                uint64_t v262 = v13;
                uint64_t v263 = a3;
                uint64_t v264 = a4;
                unsigned int v265 = a5;
                unsigned int v266 = a6;
                unsigned int v267 = a7;
                unsigned int v268 = a8;
                goto LABEL_1078;
              }
              if (v111 == 4)
              {
                uint64_t v327 = a1;
                uint64_t v328 = v13;
                uint64_t v329 = a3;
                uint64_t v330 = a4;
                unsigned int v331 = a5;
                unsigned int v332 = a6;
                unsigned int v333 = a7;
                unsigned int v334 = a8;
                goto LABEL_1285;
              }
              if (v111) {
                return;
              }
              goto LABEL_563;
            case 66:
              int v111 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v111 == 4)
                {
                  uint64_t v261 = a1;
                  uint64_t v262 = v13;
                  uint64_t v263 = a3;
                  uint64_t v264 = a4;
                  unsigned int v265 = a5;
                  unsigned int v266 = a6;
                  unsigned int v267 = a7;
                  unsigned int v268 = a8;
LABEL_1078:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v261, v262, v263, v264, v265, v266, v267, v268, a9, a10, a11, a12);
                }
                else
                {
LABEL_388:
                  if (!v111)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v111 == 4)
              {
                uint64_t v327 = a1;
                uint64_t v328 = v13;
                uint64_t v329 = a3;
                uint64_t v330 = a4;
                unsigned int v331 = a5;
                unsigned int v332 = a6;
                unsigned int v333 = a7;
                unsigned int v334 = a8;
LABEL_1285:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v327, v328, v329, v330, v331, v332, v333, v334, a9, a10, a11, a12);
              }
              else if (!v111)
              {
LABEL_563:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v35 != 4) {
                  goto LABEL_643;
                }
                uint64_t v36 = a1;
                uint64_t v37 = v13;
                uint64_t v38 = a3;
                uint64_t v39 = a4;
                unsigned int v40 = a5;
                unsigned int v41 = a6;
                unsigned int v42 = a7;
                unsigned int v43 = a8;
                goto LABEL_78;
              }
              if (v35 == 4) {
                goto LABEL_1185;
              }
              if (!v35)
              {
                uint64_t v122 = a1;
                uint64_t v123 = v13;
                uint64_t v124 = a3;
                uint64_t v125 = a4;
                unsigned int v126 = a5;
                unsigned int v127 = a6;
                unsigned int v128 = a7;
                unsigned int v129 = a8;
                goto LABEL_405;
              }
              return;
            case 80:
            case 81:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_642;
              }
              if (v35 == 4) {
                goto LABEL_1185;
              }
              if (v35) {
                return;
              }
              goto LABEL_1182;
            case 84:
            case 85:
              int v35 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_642:
                if (v35 == 4)
                {
                  uint64_t v36 = a1;
                  uint64_t v37 = v13;
                  uint64_t v38 = a3;
                  uint64_t v39 = a4;
                  unsigned int v40 = a5;
                  unsigned int v41 = a6;
                  unsigned int v42 = a7;
                  unsigned int v43 = a8;
LABEL_78:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v36, v37, v38, v39, v40, v41, v42, v43, a9, a10, a11, a12);
                }
                else
                {
LABEL_643:
                  if (!v35)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v35 == 4)
              {
LABEL_1185:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v35)
              {
LABEL_1182:
                uint64_t v122 = a1;
                uint64_t v123 = v13;
                uint64_t v124 = a3;
                uint64_t v125 = a4;
                unsigned int v126 = a5;
                unsigned int v127 = a6;
                unsigned int v128 = a7;
                unsigned int v129 = a8;
LABEL_405:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v122, v123, v124, v125, v126, v127, v128, v129, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_652;
              }
              if (v112 == 4) {
                goto LABEL_1193;
              }
              if (v112) {
                return;
              }
              goto LABEL_1190;
            case 92:
              int v269 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v269 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v269)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v269 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v269)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v270 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v270 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v270)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v270 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v270)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
            case 628:
            case 629:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v112 != 4) {
                  goto LABEL_653;
                }
                uint64_t v113 = a1;
                uint64_t v114 = v13;
                uint64_t v115 = a3;
                uint64_t v116 = a4;
                unsigned int v117 = a5;
                unsigned int v118 = a6;
                unsigned int v119 = a7;
                unsigned int v120 = a8;
                goto LABEL_396;
              }
              if (v112 == 4) {
                goto LABEL_1193;
              }
              if (v112) {
                return;
              }
              goto LABEL_1190;
            case 103:
            case 104:
            case 105:
              int v175 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v175 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v175)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v175 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v175)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              int v45 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v45 != 4) {
                  goto LABEL_241;
                }
                uint64_t v211 = a1;
                uint64_t v212 = v13;
                uint64_t v213 = a3;
                uint64_t v214 = a4;
                uint64_t v215 = a5;
                uint64_t v216 = a6;
                uint64_t v217 = a7;
                uint64_t v218 = a8;
                goto LABEL_671;
              }
              if (v45 == 4) {
                goto LABEL_1226;
              }
              if (!v45) {
                goto LABEL_455;
              }
              return;
            case 116:
            case 556:
              int v45 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v45 == 4)
                {
                  uint64_t v211 = a1;
                  uint64_t v212 = v13;
                  uint64_t v213 = a3;
                  uint64_t v214 = a4;
                  uint64_t v215 = a5;
                  uint64_t v216 = a6;
                  uint64_t v217 = a7;
                  uint64_t v218 = a8;
LABEL_671:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v211, v212, v213, v214, v215, v216, v217, v218, a9, a10, a11, a12);
                }
                else
                {
LABEL_241:
                  if (!v45)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v45 == 4)
              {
LABEL_1226:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v45)
              {
LABEL_455:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v60 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v60 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v60)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v60 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v60)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v166 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v166 == 4)
                {
                  uint64_t v167 = a1;
                  uint64_t v168 = v13;
                  uint64_t v169 = a3;
                  uint64_t v170 = a4;
                  unsigned int v171 = a5;
                  unsigned int v172 = a6;
                  unsigned int v173 = a7;
                  unsigned int v174 = a8;
LABEL_486:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v167, v168, v169, v170, v171, v172, v173, v174, a9, a10, a11, a12);
                }
                else
                {
LABEL_1093:
                  if (!v166)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v166 == 4)
              {
                uint64_t v351 = a1;
                uint64_t v352 = v13;
                uint64_t v353 = a3;
                uint64_t v354 = a4;
                unsigned int v355 = a5;
                unsigned int v356 = a6;
                unsigned int v357 = a7;
                unsigned int v358 = a8;
LABEL_1318:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v351, v352, v353, v354, v355, v356, v357, v358, a9, a10, a11, a12);
              }
              else if (!v166)
              {
LABEL_1441:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int v130 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_692:
                if (v130 == 4)
                {
                  uint64_t v131 = a1;
                  uint64_t v132 = v13;
                  uint64_t v133 = a3;
                  uint64_t v134 = a4;
                  unsigned int v135 = a5;
                  unsigned int v136 = a6;
                  unsigned int v137 = a7;
                  unsigned int v138 = a8;
LABEL_441:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v131, v132, v133, v134, v135, v136, v137, v138, a9, a10, a11, a12);
                }
                else
                {
LABEL_693:
                  if (!v130)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v130 == 4)
              {
                uint64_t v279 = a1;
                uint64_t v280 = v13;
                uint64_t v281 = a3;
                uint64_t v282 = a4;
                unsigned int v283 = a5;
                unsigned int v284 = a6;
                unsigned int v285 = a7;
                unsigned int v286 = a8;
LABEL_1198:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v279, v280, v281, v282, v283, v284, v285, v286, a9, a10, a11, a12);
              }
              else if (!v130)
              {
                uint64_t v195 = a1;
                uint64_t v196 = v13;
                uint64_t v197 = a3;
                uint64_t v198 = a4;
                unsigned int v199 = a5;
                unsigned int v200 = a6;
                unsigned int v201 = a7;
                unsigned int v202 = a8;
LABEL_661:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v195, v196, v197, v198, v199, v200, v201, v202, a9, a10, a11, a12);
              }
              return;
            case 552:
              int v57 = getCompressionCodecConfig(*v19);
              if (v17 != 1) {
                goto LABEL_1102;
              }
              if (v57 == 4) {
                goto LABEL_1099;
              }
              goto LABEL_307;
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v57 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v57 == 4)
                {
LABEL_1099:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else
                {
LABEL_307:
                  if (!v57)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else
              {
LABEL_1102:
                if (v57 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v57)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 554:
            case 555:
              int v112 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_652:
                if (v112 == 4)
                {
                  uint64_t v113 = a1;
                  uint64_t v114 = v13;
                  uint64_t v115 = a3;
                  uint64_t v116 = a4;
                  unsigned int v117 = a5;
                  unsigned int v118 = a6;
                  unsigned int v119 = a7;
                  unsigned int v120 = a8;
LABEL_396:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v113, v114, v115, v116, v117, v118, v119, v120, a9, a10, a11, a12);
                }
                else
                {
LABEL_653:
                  if (!v112)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v112 == 4)
              {
LABEL_1193:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v112)
              {
LABEL_1190:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            default:
              return;
          }
          break;
        case 1:
          switch(v16)
          {
            case 1:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              int v48 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v48 != 4) {
                  goto LABEL_682;
                }
                uint64_t v49 = a1;
                uint64_t v50 = v13;
                uint64_t v51 = a3;
                uint64_t v52 = a4;
                unsigned int v53 = a5;
                unsigned int v54 = a6;
                unsigned int v55 = a7;
                unsigned int v56 = a8;
                goto LABEL_304;
              }
              if (v48 == 4)
              {
                uint64_t v271 = a1;
                uint64_t v272 = v13;
                uint64_t v273 = a3;
                uint64_t v274 = a4;
                unsigned int v275 = a5;
                unsigned int v276 = a6;
                unsigned int v277 = a7;
                unsigned int v278 = a8;
                goto LABEL_1121;
              }
              if (!v48)
              {
                uint64_t v176 = a1;
                uint64_t v177 = v13;
                uint64_t v178 = a3;
                uint64_t v179 = a4;
                unsigned int v180 = a5;
                unsigned int v181 = a6;
                unsigned int v182 = a7;
                unsigned int v183 = a8;
                goto LABEL_497;
              }
              return;
            case 20:
            case 22:
            case 23:
            case 24:
            case 25:
              int v61 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v61 != 4) {
                  goto LABEL_583;
                }
                uint64_t v62 = a1;
                uint64_t v63 = v13;
                uint64_t v64 = a3;
                uint64_t v65 = a4;
                unsigned int v66 = a5;
                unsigned int v67 = a6;
                unsigned int v68 = a7;
                unsigned int v69 = a8;
                goto LABEL_335;
              }
              if (v61 == 4) {
                goto LABEL_1136;
              }
              if (!v61) {
                goto LABEL_1133;
              }
              return;
            case 26:
            case 250:
              int v61 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v61 == 4)
                {
                  uint64_t v62 = a1;
                  uint64_t v63 = v13;
                  uint64_t v64 = a3;
                  uint64_t v65 = a4;
                  unsigned int v66 = a5;
                  unsigned int v67 = a6;
                  unsigned int v68 = a7;
                  unsigned int v69 = a8;
LABEL_335:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v62, v63, v64, v65, v66, v67, v68, v69, a9, a10, a11, a12);
                }
                else
                {
LABEL_583:
                  if (!v61)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v61 == 4)
              {
LABEL_1136:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v61)
              {
LABEL_1133:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
              int v70 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v70 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v70)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v70 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v70)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 40:
              int v219 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v219 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v219)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v219 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v219)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 41:
              int v220 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v220 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v220)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v220 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v220)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 42:
              int v221 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v221 != 4) {
                  goto LABEL_951;
                }
                uint64_t v222 = a1;
                uint64_t v223 = v13;
                uint64_t v224 = a3;
                uint64_t v225 = a4;
                unsigned int v226 = a5;
                unsigned int v227 = a6;
                unsigned int v228 = a7;
                unsigned int v229 = a8;
                goto LABEL_942;
              }
              if (v221 == 4) {
                goto LABEL_1468;
              }
              if (!v221) {
                goto LABEL_1345;
              }
              return;
            case 43:
              int v230 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v230 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v230)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v230 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v230)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 44:
              int v221 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v221 == 4)
                {
                  uint64_t v222 = a1;
                  uint64_t v223 = v13;
                  uint64_t v224 = a3;
                  uint64_t v225 = a4;
                  unsigned int v226 = a5;
                  unsigned int v227 = a6;
                  unsigned int v228 = a7;
                  unsigned int v229 = a8;
LABEL_942:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v222, v223, v224, v225, v226, v227, v228, v229, a9, a10, a11, a12);
                }
                else
                {
LABEL_951:
                  if (!v221)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v221 == 4)
              {
LABEL_1468:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v221)
              {
LABEL_1345:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 53:
            case 54:
            case 55:
              int v147 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v147 != 4) {
                  goto LABEL_984;
                }
                uint64_t v148 = a1;
                uint64_t v149 = v13;
                uint64_t v150 = a3;
                uint64_t v151 = a4;
                unsigned int v152 = a5;
                unsigned int v153 = a6;
                unsigned int v154 = a7;
                unsigned int v155 = a8;
                goto LABEL_472;
              }
              if (v147 == 4)
              {
                uint64_t v335 = a1;
                uint64_t v336 = v13;
                uint64_t v337 = a3;
                uint64_t v338 = a4;
                unsigned int v339 = a5;
                unsigned int v340 = a6;
                unsigned int v341 = a7;
                unsigned int v342 = a8;
                goto LABEL_1312;
              }
              if (!v147) {
                goto LABEL_1370;
              }
              return;
            case 60:
            case 62:
            case 63:
            case 64:
            case 65:
              int v71 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v71 != 4) {
                  goto LABEL_344;
                }
                uint64_t v231 = a1;
                uint64_t v232 = v13;
                uint64_t v233 = a3;
                uint64_t v234 = a4;
                unsigned int v235 = a5;
                unsigned int v236 = a6;
                unsigned int v237 = a7;
                unsigned int v238 = a8;
                goto LABEL_959;
              }
              if (v71 == 4)
              {
                uint64_t v303 = a1;
                uint64_t v304 = v13;
                uint64_t v305 = a3;
                uint64_t v306 = a4;
                unsigned int v307 = a5;
                unsigned int v308 = a6;
                unsigned int v309 = a7;
                unsigned int v310 = a8;
                goto LABEL_1270;
              }
              if (!v71) {
                goto LABEL_529;
              }
              return;
            case 66:
              int v71 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v71 == 4)
                {
                  uint64_t v231 = a1;
                  uint64_t v232 = v13;
                  uint64_t v233 = a3;
                  uint64_t v234 = a4;
                  unsigned int v235 = a5;
                  unsigned int v236 = a6;
                  unsigned int v237 = a7;
                  unsigned int v238 = a8;
LABEL_959:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v231, v232, v233, v234, v235, v236, v237, v238, a9, a10, a11, a12);
                }
                else
                {
LABEL_344:
                  if (!v71)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v71 == 4)
              {
                uint64_t v303 = a1;
                uint64_t v304 = v13;
                uint64_t v305 = a3;
                uint64_t v306 = a4;
                unsigned int v307 = a5;
                unsigned int v308 = a6;
                unsigned int v309 = a7;
                unsigned int v310 = a8;
LABEL_1270:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v303, v304, v305, v306, v307, v308, v309, v310, a9, a10, a11, a12);
              }
              else if (!v71)
              {
LABEL_529:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v24 != 4) {
                  goto LABEL_593;
                }
                uint64_t v25 = a1;
                uint64_t v26 = v13;
                uint64_t v27 = a3;
                uint64_t v28 = a4;
                unsigned int v29 = a5;
                unsigned int v30 = a6;
                unsigned int v31 = a7;
                unsigned int v32 = a8;
                goto LABEL_38;
              }
              if (v24 == 4) {
                goto LABEL_1142;
              }
              if (!v24) {
                goto LABEL_408;
              }
              return;
            case 80:
            case 81:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_592;
              }
              if (v24 == 4) {
                goto LABEL_1142;
              }
              if (!v24) {
                goto LABEL_408;
              }
              return;
            case 84:
            case 85:
              int v24 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_592:
                if (v24 == 4)
                {
                  uint64_t v25 = a1;
                  uint64_t v26 = v13;
                  uint64_t v27 = a3;
                  uint64_t v28 = a4;
                  unsigned int v29 = a5;
                  unsigned int v30 = a6;
                  unsigned int v31 = a7;
                  unsigned int v32 = a8;
LABEL_38:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v25, v26, v27, v28, v29, v30, v31, v32, a9, a10, a11, a12);
                }
                else
                {
LABEL_593:
                  if (!v24)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v24 == 4)
              {
LABEL_1142:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v24)
              {
LABEL_408:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 90:
            case 91:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1) {
                goto LABEL_602;
              }
              if (v72 == 4) {
                goto LABEL_1150;
              }
              if (!v72) {
                goto LABEL_1147;
              }
              return;
            case 92:
              int v239 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v239 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v239)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v239 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v239)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 93:
              int v240 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v240 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v240)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v240 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v240)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 94:
            case 586:
            case 587:
            case 628:
            case 629:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v72 != 4) {
                  goto LABEL_603;
                }
                uint64_t v73 = a1;
                uint64_t v74 = v13;
                uint64_t v75 = a3;
                uint64_t v76 = a4;
                unsigned int v77 = a5;
                unsigned int v78 = a6;
                unsigned int v79 = a7;
                unsigned int v80 = a8;
                goto LABEL_352;
              }
              if (v72 == 4) {
                goto LABEL_1150;
              }
              if (!v72) {
                goto LABEL_1147;
              }
              return;
            case 103:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 != 4) {
                  goto LABEL_1211;
                }
                uint64_t v242 = a1;
                uint64_t v243 = v13;
                uint64_t v244 = a3;
                uint64_t v245 = a4;
                uint64_t v246 = a5;
                uint64_t v247 = a6;
                uint64_t v248 = a7;
                uint64_t v249 = a8;
                goto LABEL_976;
              }
              if (v241 == 4) {
                goto LABEL_1365;
              }
              if (!v241) {
                goto LABEL_1446;
              }
              return;
            case 104:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 != 4) {
                  goto LABEL_1211;
                }
                goto LABEL_979;
              }
              if (v241 != 4) {
                goto LABEL_1445;
              }
LABEL_1365:
              uint64_t v359 = a1;
              uint64_t v360 = v13;
              uint64_t v361 = a3;
              uint64_t v362 = a4;
              uint64_t v363 = a5;
              uint64_t v364 = a6;
              uint64_t v365 = a7;
              uint64_t v366 = a8;
              goto LABEL_1367;
            case 105:
              int v241 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v241 == 4)
                {
LABEL_979:
                  uint64_t v242 = a1;
                  uint64_t v243 = v13;
                  uint64_t v244 = a3;
                  uint64_t v245 = a4;
                  uint64_t v246 = a5;
                  uint64_t v247 = a6;
                  uint64_t v248 = a7;
                  uint64_t v249 = a8;
LABEL_976:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v242, v243, v244, v245, v246, v247, v248, v249, a9, a10, a11, a12);
                }
                else
                {
LABEL_1211:
                  if (!v241)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v241 == 4)
              {
                uint64_t v359 = a1;
                uint64_t v360 = v13;
                uint64_t v361 = a3;
                uint64_t v362 = a4;
                uint64_t v363 = a5;
                uint64_t v364 = a6;
                uint64_t v365 = a7;
                uint64_t v366 = a8;
LABEL_1367:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v359, v360, v361, v362, v363, v364, v365, v366, a9, a10, a11, a12);
              }
              else
              {
LABEL_1445:
                if (!v241)
                {
LABEL_1446:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              return;
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 313:
            case 314:
            case 315:
              int v44 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v44 != 4) {
                  goto LABEL_235;
                }
                uint64_t v203 = a1;
                uint64_t v204 = v13;
                uint64_t v205 = a3;
                uint64_t v206 = a4;
                uint64_t v207 = a5;
                uint64_t v208 = a6;
                uint64_t v209 = a7;
                uint64_t v210 = a8;
                goto LABEL_666;
              }
              if (v44 == 4) {
                goto LABEL_1220;
              }
              if (!v44)
              {
                uint64_t v139 = a1;
                uint64_t v140 = v13;
                uint64_t v141 = a3;
                uint64_t v142 = a4;
                uint64_t v143 = a5;
                uint64_t v144 = a6;
                uint64_t v145 = a7;
                uint64_t v146 = a8;
                goto LABEL_452;
              }
              break;
            case 116:
            case 556:
              int v44 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v44 == 4)
                {
                  uint64_t v203 = a1;
                  uint64_t v204 = v13;
                  uint64_t v205 = a3;
                  uint64_t v206 = a4;
                  uint64_t v207 = a5;
                  uint64_t v208 = a6;
                  uint64_t v209 = a7;
                  uint64_t v210 = a8;
LABEL_666:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v203, v204, v205, v206, v207, v208, v209, v210, a9, a10, a11, a12);
                }
                else
                {
LABEL_235:
                  if (!v44)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v44 == 4)
              {
LABEL_1220:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v44)
              {
                uint64_t v139 = a1;
                uint64_t v140 = v13;
                uint64_t v141 = a3;
                uint64_t v142 = a4;
                uint64_t v143 = a5;
                uint64_t v144 = a6;
                uint64_t v145 = a7;
                uint64_t v146 = a8;
LABEL_452:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v139, v140, v141, v142, v143, v144, v145, v146, a9, a10, a11, a12);
              }
              break;
            case 123:
            case 124:
            case 125:
            case 323:
            case 324:
            case 325:
              int v58 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v58 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v58)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v58 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v58)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 252:
              int v147 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v147 == 4)
                {
                  uint64_t v148 = a1;
                  uint64_t v149 = v13;
                  uint64_t v150 = a3;
                  uint64_t v151 = a4;
                  unsigned int v152 = a5;
                  unsigned int v153 = a6;
                  unsigned int v154 = a7;
                  unsigned int v155 = a8;
LABEL_472:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v148, v149, v150, v151, v152, v153, v154, v155, a9, a10, a11, a12);
                }
                else
                {
LABEL_984:
                  if (!v147)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v147 == 4)
              {
                uint64_t v335 = a1;
                uint64_t v336 = v13;
                uint64_t v337 = a3;
                uint64_t v338 = a4;
                unsigned int v339 = a5;
                unsigned int v340 = a6;
                unsigned int v341 = a7;
                unsigned int v342 = a8;
LABEL_1312:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v335, v336, v337, v338, v339, v340, v341, v342, a9, a10, a11, a12);
              }
              else if (!v147)
              {
LABEL_1370:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 253:
            case 261:
              int v48 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v48 == 4)
                {
                  uint64_t v49 = a1;
                  uint64_t v50 = v13;
                  uint64_t v51 = a3;
                  uint64_t v52 = a4;
                  unsigned int v53 = a5;
                  unsigned int v54 = a6;
                  unsigned int v55 = a7;
                  unsigned int v56 = a8;
LABEL_304:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v49, v50, v51, v52, v53, v54, v55, v56, a9, a10, a11, a12);
                }
                else
                {
LABEL_682:
                  if (!v48)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v48 == 4)
              {
                uint64_t v271 = a1;
                uint64_t v272 = v13;
                uint64_t v273 = a3;
                uint64_t v274 = a4;
                unsigned int v275 = a5;
                unsigned int v276 = a6;
                unsigned int v277 = a7;
                unsigned int v278 = a8;
LABEL_1121:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v271, v272, v273, v274, v275, v276, v277, v278, a9, a10, a11, a12);
              }
              else if (!v48)
              {
                uint64_t v176 = a1;
                uint64_t v177 = v13;
                uint64_t v178 = a3;
                uint64_t v179 = a4;
                unsigned int v180 = a5;
                unsigned int v181 = a6;
                unsigned int v182 = a7;
                unsigned int v183 = a8;
LABEL_497:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(v176, v177, v178, v179, v180, v181, v182, v183, a9, a10, a11, a12);
              }
              return;
            case 552:
            case 553:
            case 637:
            case 638:
            case 639:
            case 640:
            case 641:
              int v46 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
                if (v46 == 4)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
                else if (!v46)
                {
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                }
              }
              else if (v46 == 4)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v46)
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            case 554:
            case 555:
              int v72 = getCompressionCodecConfig(*v19);
              if (v17 == 1)
              {
LABEL_602:
                if (v72 == 4)
                {
                  uint64_t v73 = a1;
                  uint64_t v74 = v13;
                  uint64_t v75 = a3;
                  uint64_t v76 = a4;
                  unsigned int v77 = a5;
                  unsigned int v78 = a6;
                  unsigned int v79 = a7;
                  unsigned int v80 = a8;
LABEL_352:
                  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(v73, v74, v75, v76, v77, v78, v79, v80, a9, a10, a11, a12);
                }
                else
                {
LABEL_603:
                  if (!v72)
                  {
                    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
                  }
                }
              }
              else if (v72 == 4)
              {
LABEL_1150:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              else if (!v72)
              {
LABEL_1147:
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, v13, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
              }
              return;
            default:
              return;
          }
          break;
      }
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::writeCompressedRegion3D(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  int v19 = a17;
  uint64_t v21 = a15;
  uint64_t v20 = a16;
  uint64_t v22 = a13;
  int v23 = a11;
  uint64_t v24 = a12;
  int v25 = a10;
  int v27 = *(unsigned __int8 *)(a1 + 57);
  if (v27 == 3)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int CompressionCodecConfig = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v31 = a17;
          if (a12)
          {
            if (CompressionCodecConfig == 3)
            {
              int v32 = a10;
              int v33 = a11;
              uint64_t v34 = a13;
              uint64_t v35 = a15;
              uint64_t v36 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v35, a3, a4 + a9 * v36, a5, a6, a7, a8, v32, v33, v34, v31);
                int v32 = a10;
                int v33 = a11;
                uint64_t v34 = a13;
                uint64_t v35 = a15;
                uint64_t v36 = a16;
                int v31 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xA:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v44 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v45 = a17;
          if (a12)
          {
            if (v44 == 3)
            {
              int v46 = a10;
              int v47 = a11;
              uint64_t v48 = a13;
              uint64_t v49 = a15;
              uint64_t v50 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v49, a3, a4 + a9 * v50, a5, a6, a7, a8, v46, v47, v48, v45);
                int v46 = a10;
                int v47 = a11;
                uint64_t v48 = a13;
                uint64_t v49 = a15;
                uint64_t v50 = a16;
                int v45 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xB:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v51 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v52 = a17;
          if (a12)
          {
            if (v51 == 3)
            {
              int v53 = a10;
              int v54 = a11;
              uint64_t v55 = a13;
              uint64_t v56 = a15;
              uint64_t v57 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v56, a3, a4 + a9 * v57, a5, a6, a7, a8, v53, v54, v55, v52);
                int v53 = a10;
                int v54 = a11;
                uint64_t v55 = a13;
                uint64_t v56 = a15;
                uint64_t v57 = a16;
                int v52 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xC:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v58 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v59 = a17;
          if (a12)
          {
            if (v58 == 3)
            {
              int v60 = a10;
              int v61 = a11;
              uint64_t v62 = a13;
              uint64_t v63 = a15;
              uint64_t v64 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v63, a3, a4 + a9 * v64, a5, a6, a7, a8, v60, v61, v62, v59);
                int v60 = a10;
                int v61 = a11;
                uint64_t v62 = a13;
                uint64_t v63 = a15;
                uint64_t v64 = a16;
                int v59 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xD:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v65 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v66 = a17;
          if (a12)
          {
            if (v65 == 3)
            {
              int v67 = a10;
              int v68 = a11;
              uint64_t v69 = a13;
              uint64_t v70 = a15;
              uint64_t v71 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v70, a3, a4 + a9 * v71, a5, a6, a7, a8, v67, v68, v69, v66);
                int v67 = a10;
                int v68 = a11;
                uint64_t v69 = a13;
                uint64_t v70 = a15;
                uint64_t v71 = a16;
                int v66 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0xE:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v72 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v73 = a17;
          if (a12)
          {
            if (v72 == 3)
            {
              int v74 = a10;
              int v75 = a11;
              uint64_t v76 = a13;
              uint64_t v77 = a15;
              uint64_t v78 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v77, a3, a4 + a9 * v78, a5, a6, a7, a8, v74, v75, v76, v73);
                int v74 = a10;
                int v75 = a11;
                uint64_t v76 = a13;
                uint64_t v77 = a15;
                uint64_t v78 = a16;
                int v73 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x14:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v79 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v80 = a17;
          if (a12)
          {
            if (v79 == 3)
            {
              int v81 = a10;
              int v82 = a11;
              uint64_t v83 = a13;
              uint64_t v84 = a15;
              uint64_t v85 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v84, a3, a4 + a9 * v85, a5, a6, a7, a8, v81, v82, v83, v80);
                int v81 = a10;
                int v82 = a11;
                uint64_t v83 = a13;
                uint64_t v84 = a15;
                uint64_t v85 = a16;
                int v80 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x16:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v86 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v87 = a17;
          if (a12)
          {
            if (v86 == 3)
            {
              int v88 = a10;
              int v89 = a11;
              uint64_t v90 = a13;
              uint64_t v91 = a15;
              uint64_t v92 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v91, a3, a4 + a9 * v92, a5, a6, a7, a8, v88, v89, v90, v87);
                int v88 = a10;
                int v89 = a11;
                uint64_t v90 = a13;
                uint64_t v91 = a15;
                uint64_t v92 = a16;
                int v87 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x17:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v93 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v94 = a17;
          if (a12)
          {
            if (v93 == 3)
            {
              int v95 = a10;
              int v96 = a11;
              uint64_t v97 = a13;
              uint64_t v98 = a15;
              uint64_t v99 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v98, a3, a4 + a9 * v99, a5, a6, a7, a8, v95, v96, v97, v94);
                int v95 = a10;
                int v96 = a11;
                uint64_t v97 = a13;
                uint64_t v98 = a15;
                uint64_t v99 = a16;
                int v94 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x18:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v100 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v101 = a17;
          if (a12)
          {
            if (v100 == 3)
            {
              int v102 = a10;
              int v103 = a11;
              uint64_t v104 = a13;
              uint64_t v105 = a15;
              uint64_t v106 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v105, a3, a4 + a9 * v106, a5, a6, a7, a8, v102, v103, v104, v101);
                int v102 = a10;
                int v103 = a11;
                uint64_t v104 = a13;
                uint64_t v105 = a15;
                uint64_t v106 = a16;
                int v101 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x19:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v107 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v108 = a17;
          if (a12)
          {
            if (v107 == 3)
            {
              int v109 = a10;
              int v110 = a11;
              uint64_t v111 = a13;
              uint64_t v112 = a15;
              uint64_t v113 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v112, a3, a4 + a9 * v113, a5, a6, a7, a8, v109, v110, v111, v108);
                int v109 = a10;
                int v110 = a11;
                uint64_t v111 = a13;
                uint64_t v112 = a15;
                uint64_t v113 = a16;
                int v108 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x1E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v114 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v115 = a17;
          if (a12)
          {
            if (v114 == 3)
            {
              int v116 = a10;
              int v117 = a11;
              uint64_t v118 = a13;
              uint64_t v119 = a15;
              uint64_t v120 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v119, a3, a4 + a9 * v120, a5, a6, a7, a8, v116, v117, v118, v115);
                int v116 = a10;
                int v117 = a11;
                uint64_t v118 = a13;
                uint64_t v119 = a15;
                uint64_t v120 = a16;
                int v115 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x1F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v121 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v122 = a17;
          if (a12)
          {
            if (v121 == 3)
            {
              int v123 = a10;
              int v124 = a11;
              uint64_t v125 = a13;
              uint64_t v126 = a15;
              uint64_t v127 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v126, a3, a4 + a9 * v127, a5, a6, a7, a8, v123, v124, v125, v122);
                int v123 = a10;
                int v124 = a11;
                uint64_t v125 = a13;
                uint64_t v126 = a15;
                uint64_t v127 = a16;
                int v122 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x20:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v128 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v129 = a17;
          if (a12)
          {
            if (v128 == 3)
            {
              int v130 = a10;
              int v131 = a11;
              uint64_t v132 = a13;
              uint64_t v133 = a15;
              uint64_t v134 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v133, a3, a4 + a9 * v134, a5, a6, a7, a8, v130, v131, v132, v129);
                int v130 = a10;
                int v131 = a11;
                uint64_t v132 = a13;
                uint64_t v133 = a15;
                uint64_t v134 = a16;
                int v129 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x21:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v135 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v136 = a17;
          if (a12)
          {
            if (v135 == 3)
            {
              int v137 = a10;
              int v138 = a11;
              uint64_t v139 = a13;
              uint64_t v140 = a15;
              uint64_t v141 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v140, a3, a4 + a9 * v141, a5, a6, a7, a8, v137, v138, v139, v136);
                int v137 = a10;
                int v138 = a11;
                uint64_t v139 = a13;
                uint64_t v140 = a15;
                uint64_t v141 = a16;
                int v136 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v142 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v143 = a17;
          if (a12)
          {
            if (v142 == 3)
            {
              int v144 = a10;
              int v145 = a11;
              uint64_t v146 = a13;
              uint64_t v147 = a15;
              uint64_t v148 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v147, a3, a4 + a9 * v148, a5, a6, a7, a8, v144, v145, v146, v143);
                int v144 = a10;
                int v145 = a11;
                uint64_t v146 = a13;
                uint64_t v147 = a15;
                uint64_t v148 = a16;
                int v143 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x35:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v149 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v150 = a17;
          if (a12)
          {
            if (v149 == 3)
            {
              int v151 = a10;
              int v152 = a11;
              uint64_t v153 = a13;
              uint64_t v154 = a15;
              uint64_t v155 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v154, a3, a4 + a9 * v155, a5, a6, a7, a8, v151, v152, v153, v150);
                int v151 = a10;
                int v152 = a11;
                uint64_t v153 = a13;
                uint64_t v154 = a15;
                uint64_t v155 = a16;
                int v150 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x36:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v156 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v157 = a17;
          if (a12)
          {
            if (v156 == 3)
            {
              int v158 = a10;
              int v159 = a11;
              uint64_t v160 = a13;
              uint64_t v161 = a15;
              uint64_t v162 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v161, a3, a4 + a9 * v162, a5, a6, a7, a8, v158, v159, v160, v157);
                int v158 = a10;
                int v159 = a11;
                uint64_t v160 = a13;
                uint64_t v161 = a15;
                uint64_t v162 = a16;
                int v157 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x37:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v163 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v164 = a17;
          if (a12)
          {
            if (v163 == 3)
            {
              int v165 = a10;
              int v166 = a11;
              uint64_t v167 = a13;
              uint64_t v168 = a15;
              uint64_t v169 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v168, a3, a4 + a9 * v169, a5, a6, a7, a8, v165, v166, v167, v164);
                int v165 = a10;
                int v166 = a11;
                uint64_t v167 = a13;
                uint64_t v168 = a15;
                uint64_t v169 = a16;
                int v164 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v170 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v171 = a17;
          if (a12)
          {
            if (v170 == 3)
            {
              int v172 = a10;
              int v173 = a11;
              uint64_t v174 = a13;
              uint64_t v175 = a15;
              uint64_t v176 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v175, a3, a4 + a9 * v176, a5, a6, a7, a8, v172, v173, v174, v171);
                int v172 = a10;
                int v173 = a11;
                uint64_t v174 = a13;
                uint64_t v175 = a15;
                uint64_t v176 = a16;
                int v171 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v177 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v178 = a17;
          if (a12)
          {
            if (v177 == 3)
            {
              int v179 = a10;
              int v180 = a11;
              uint64_t v181 = a13;
              uint64_t v182 = a15;
              uint64_t v183 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v182, a3, a4 + a9 * v183, a5, a6, a7, a8, v179, v180, v181, v178);
                int v179 = a10;
                int v180 = a11;
                uint64_t v181 = a13;
                uint64_t v182 = a15;
                uint64_t v183 = a16;
                int v178 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x3F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v184 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v185 = a17;
          if (a12)
          {
            if (v184 == 3)
            {
              int v186 = a10;
              int v187 = a11;
              uint64_t v188 = a13;
              uint64_t v189 = a15;
              uint64_t v190 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v189, a3, a4 + a9 * v190, a5, a6, a7, a8, v186, v187, v188, v185);
                int v186 = a10;
                int v187 = a11;
                uint64_t v188 = a13;
                uint64_t v189 = a15;
                uint64_t v190 = a16;
                int v185 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x40:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v191 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v192 = a17;
          if (a12)
          {
            if (v191 == 3)
            {
              int v193 = a10;
              int v194 = a11;
              uint64_t v195 = a13;
              uint64_t v196 = a15;
              uint64_t v197 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v196, a3, a4 + a9 * v197, a5, a6, a7, a8, v193, v194, v195, v192);
                int v193 = a10;
                int v194 = a11;
                uint64_t v195 = a13;
                uint64_t v196 = a15;
                uint64_t v197 = a16;
                int v192 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x41:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v198 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v199 = a17;
          if (a12)
          {
            if (v198 == 3)
            {
              int v200 = a10;
              int v201 = a11;
              uint64_t v202 = a13;
              uint64_t v203 = a15;
              uint64_t v204 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v203, a3, a4 + a9 * v204, a5, a6, a7, a8, v200, v201, v202, v199);
                int v200 = a10;
                int v201 = a11;
                uint64_t v202 = a13;
                uint64_t v203 = a15;
                uint64_t v204 = a16;
                int v199 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x46:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v205 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v206 = a17;
          if (a12)
          {
            if (v205 == 3)
            {
              int v207 = a10;
              int v208 = a11;
              uint64_t v209 = a13;
              uint64_t v210 = a15;
              uint64_t v211 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v210, a3, a4 + a9 * v211, a5, a6, a7, a8, v207, v208, v209, v206);
                int v207 = a10;
                int v208 = a11;
                uint64_t v209 = a13;
                uint64_t v210 = a15;
                uint64_t v211 = a16;
                int v206 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x47:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v212 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v213 = a17;
          if (a12)
          {
            if (v212 == 3)
            {
              int v214 = a10;
              int v215 = a11;
              uint64_t v216 = a13;
              uint64_t v217 = a15;
              uint64_t v218 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v217, a3, a4 + a9 * v218, a5, a6, a7, a8, v214, v215, v216, v213);
                int v214 = a10;
                int v215 = a11;
                uint64_t v216 = a13;
                uint64_t v217 = a15;
                uint64_t v218 = a16;
                int v213 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x48:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v219 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v220 = a17;
          if (a12)
          {
            if (v219 == 3)
            {
              int v221 = a10;
              int v222 = a11;
              uint64_t v223 = a13;
              uint64_t v224 = a15;
              uint64_t v225 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v224, a3, a4 + a9 * v225, a5, a6, a7, a8, v221, v222, v223, v220);
                int v221 = a10;
                int v222 = a11;
                uint64_t v223 = a13;
                uint64_t v224 = a15;
                uint64_t v225 = a16;
                int v220 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x49:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v226 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v227 = a17;
          if (a12)
          {
            if (v226 == 3)
            {
              int v228 = a10;
              int v229 = a11;
              uint64_t v230 = a13;
              uint64_t v231 = a15;
              uint64_t v232 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v231, a3, a4 + a9 * v232, a5, a6, a7, a8, v228, v229, v230, v227);
                int v228 = a10;
                int v229 = a11;
                uint64_t v230 = a13;
                uint64_t v231 = a15;
                uint64_t v232 = a16;
                int v227 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x4A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v233 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v234 = a17;
          if (a12)
          {
            if (v233 == 3)
            {
              int v235 = a10;
              int v236 = a11;
              uint64_t v237 = a13;
              uint64_t v238 = a15;
              uint64_t v239 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v238, a3, a4 + a9 * v239, a5, a6, a7, a8, v235, v236, v237, v234);
                int v235 = a10;
                int v236 = a11;
                uint64_t v237 = a13;
                uint64_t v238 = a15;
                uint64_t v239 = a16;
                int v234 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x50:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v240 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v241 = a17;
          if (a12)
          {
            if (v240 == 3)
            {
              int v242 = a10;
              int v243 = a11;
              uint64_t v244 = a13;
              uint64_t v245 = a15;
              uint64_t v246 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v245, a3, a4 + a9 * v246, a5, a6, a7, a8, v242, v243, v244, v241);
                int v242 = a10;
                int v243 = a11;
                uint64_t v244 = a13;
                uint64_t v245 = a15;
                uint64_t v246 = a16;
                int v241 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x51:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v247 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v248 = a17;
          if (a12)
          {
            if (v247 == 3)
            {
              int v249 = a10;
              int v250 = a11;
              uint64_t v251 = a13;
              uint64_t v252 = a15;
              uint64_t v253 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v252, a3, a4 + a9 * v253, a5, a6, a7, a8, v249, v250, v251, v248);
                int v249 = a10;
                int v250 = a11;
                uint64_t v251 = a13;
                uint64_t v252 = a15;
                uint64_t v253 = a16;
                int v248 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x54:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v254 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v255 = a17;
          if (a12)
          {
            if (v254 == 3)
            {
              int v256 = a10;
              int v257 = a11;
              uint64_t v258 = a13;
              uint64_t v259 = a15;
              uint64_t v260 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v259, a3, a4 + a9 * v260, a5, a6, a7, a8, v256, v257, v258, v255);
                int v256 = a10;
                int v257 = a11;
                uint64_t v258 = a13;
                uint64_t v259 = a15;
                uint64_t v260 = a16;
                int v255 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x55:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v261 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v262 = a17;
          if (a12)
          {
            if (v261 == 3)
            {
              int v263 = a10;
              int v264 = a11;
              uint64_t v265 = a13;
              uint64_t v266 = a15;
              uint64_t v267 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v266, a3, a4 + a9 * v267, a5, a6, a7, a8, v263, v264, v265, v262);
                int v263 = a10;
                int v264 = a11;
                uint64_t v265 = a13;
                uint64_t v266 = a15;
                uint64_t v267 = a16;
                int v262 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v268 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v269 = a17;
          if (a12)
          {
            if (v268 == 3)
            {
              int v270 = a10;
              int v271 = a11;
              uint64_t v272 = a13;
              uint64_t v273 = a15;
              uint64_t v274 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v273, a3, a4 + a9 * v274, a5, a6, a7, a8, v270, v271, v272, v269);
                int v270 = a10;
                int v271 = a11;
                uint64_t v272 = a13;
                uint64_t v273 = a15;
                uint64_t v274 = a16;
                int v269 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v275 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v276 = a17;
          if (a12)
          {
            if (v275 == 3)
            {
              int v277 = a10;
              int v278 = a11;
              uint64_t v279 = a13;
              uint64_t v280 = a15;
              uint64_t v281 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v280, a3, a4 + a9 * v281, a5, a6, a7, a8, v277, v278, v279, v276);
                int v277 = a10;
                int v278 = a11;
                uint64_t v279 = a13;
                uint64_t v280 = a15;
                uint64_t v281 = a16;
                int v276 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x5E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v282 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v283 = a17;
          if (a12)
          {
            if (v282 == 3)
            {
              int v284 = a10;
              int v285 = a11;
              uint64_t v286 = a13;
              uint64_t v287 = a15;
              uint64_t v288 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v287, a3, a4 + a9 * v288, a5, a6, a7, a8, v284, v285, v286, v283);
                int v284 = a10;
                int v285 = a11;
                uint64_t v286 = a13;
                uint64_t v287 = a15;
                uint64_t v288 = a16;
                int v283 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x67:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v289 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v290 = a17;
          if (a12)
          {
            if (v289 == 3)
            {
              int v291 = a10;
              int v292 = a11;
              uint64_t v293 = a13;
              uint64_t v294 = a15;
              uint64_t v295 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v294, a3, a4 + a9 * v295, a5, a6, a7, a8, v291, v292, v293, v290);
                int v291 = a10;
                int v292 = a11;
                uint64_t v293 = a13;
                uint64_t v294 = a15;
                uint64_t v295 = a16;
                int v290 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x68:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v296 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v297 = a17;
          if (a12)
          {
            if (v296 == 3)
            {
              int v298 = a10;
              int v299 = a11;
              uint64_t v300 = a13;
              uint64_t v301 = a15;
              uint64_t v302 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v301, a3, a4 + a9 * v302, a5, a6, a7, a8, v298, v299, v300, v297);
                int v298 = a10;
                int v299 = a11;
                uint64_t v300 = a13;
                uint64_t v301 = a15;
                uint64_t v302 = a16;
                int v297 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x69:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v303 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v304 = a17;
          if (a12)
          {
            if (v303 == 3)
            {
              int v305 = a10;
              int v306 = a11;
              uint64_t v307 = a13;
              uint64_t v308 = a15;
              uint64_t v309 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v308, a3, a4 + a9 * v309, a5, a6, a7, a8, v305, v306, v307, v304);
                int v305 = a10;
                int v306 = a11;
                uint64_t v307 = a13;
                uint64_t v308 = a15;
                uint64_t v309 = a16;
                int v304 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x6E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v310 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v311 = a17;
          if (a12)
          {
            if (v310 == 3)
            {
              int v312 = a10;
              int v313 = a11;
              uint64_t v314 = a13;
              uint64_t v315 = a15;
              uint64_t v316 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v315, a3, a4 + a9 * v316, a5, a6, a7, a8, v312, v313, v314, v311);
                int v312 = a10;
                int v313 = a11;
                uint64_t v314 = a13;
                uint64_t v315 = a15;
                uint64_t v316 = a16;
                int v311 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x70:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v317 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v318 = a17;
          if (a12)
          {
            if (v317 == 3)
            {
              int v319 = a10;
              int v320 = a11;
              uint64_t v321 = a13;
              uint64_t v322 = a15;
              uint64_t v323 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v322, a3, a4 + a9 * v323, a5, a6, a7, a8, v319, v320, v321, v318);
                int v319 = a10;
                int v320 = a11;
                uint64_t v321 = a13;
                uint64_t v322 = a15;
                uint64_t v323 = a16;
                int v318 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x71:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v324 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v325 = a17;
          if (a12)
          {
            if (v324 == 3)
            {
              int v326 = a10;
              int v327 = a11;
              uint64_t v328 = a13;
              uint64_t v329 = a15;
              uint64_t v330 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v329, a3, a4 + a9 * v330, a5, a6, a7, a8, v326, v327, v328, v325);
                int v326 = a10;
                int v327 = a11;
                uint64_t v328 = a13;
                uint64_t v329 = a15;
                uint64_t v330 = a16;
                int v325 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x72:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v331 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v332 = a17;
          if (a12)
          {
            if (v331 == 3)
            {
              int v333 = a10;
              int v334 = a11;
              uint64_t v335 = a13;
              uint64_t v336 = a15;
              uint64_t v337 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v336, a3, a4 + a9 * v337, a5, a6, a7, a8, v333, v334, v335, v332);
                int v333 = a10;
                int v334 = a11;
                uint64_t v335 = a13;
                uint64_t v336 = a15;
                uint64_t v337 = a16;
                int v332 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x73:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v338 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v339 = a17;
          if (a12)
          {
            if (v338 == 3)
            {
              int v340 = a10;
              int v341 = a11;
              uint64_t v342 = a13;
              uint64_t v343 = a15;
              uint64_t v344 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v343, a3, a4 + a9 * v344, a5, a6, a7, a8, v340, v341, v342, v339);
                int v340 = a10;
                int v341 = a11;
                uint64_t v342 = a13;
                uint64_t v343 = a15;
                uint64_t v344 = a16;
                int v339 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v345 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v346 = a17;
          if (a12)
          {
            if (v345 == 3)
            {
              int v347 = a10;
              int v348 = a11;
              uint64_t v349 = a13;
              uint64_t v350 = a15;
              uint64_t v351 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v350, a3, a4 + a9 * v351, a5, a6, a7, a8, v347, v348, v349, v346);
                int v347 = a10;
                int v348 = a11;
                uint64_t v349 = a13;
                uint64_t v350 = a15;
                uint64_t v351 = a16;
                int v346 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v352 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v353 = a17;
          if (a12)
          {
            if (v352 == 3)
            {
              int v354 = a10;
              int v355 = a11;
              uint64_t v356 = a13;
              uint64_t v357 = a15;
              uint64_t v358 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v357, a3, a4 + a9 * v358, a5, a6, a7, a8, v354, v355, v356, v353);
                int v354 = a10;
                int v355 = a11;
                uint64_t v356 = a13;
                uint64_t v357 = a15;
                uint64_t v358 = a16;
                int v353 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x7D:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v359 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v360 = a17;
          if (a12)
          {
            if (v359 == 3)
            {
              int v361 = a10;
              int v362 = a11;
              uint64_t v363 = a13;
              uint64_t v364 = a15;
              uint64_t v365 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v364, a3, a4 + a9 * v365, a5, a6, a7, a8, v361, v362, v363, v360);
                int v361 = a10;
                int v362 = a11;
                uint64_t v363 = a13;
                uint64_t v364 = a15;
                uint64_t v365 = a16;
                int v360 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12C:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v366 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v367 = a17;
          if (a12)
          {
            if (v366 == 3)
            {
              int v368 = a10;
              int v369 = a11;
              uint64_t v370 = a13;
              uint64_t v371 = a15;
              uint64_t v372 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v371, a3, a4 + a9 * v372, a5, a6, a7, a8, v368, v369, v370, v367);
                int v368 = a10;
                int v369 = a11;
                uint64_t v370 = a13;
                uint64_t v371 = a15;
                uint64_t v372 = a16;
                int v367 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12D:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v373 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v374 = a17;
          if (a12)
          {
            if (v373 == 3)
            {
              int v375 = a10;
              int v376 = a11;
              uint64_t v377 = a13;
              uint64_t v378 = a15;
              uint64_t v379 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v378, a3, a4 + a9 * v379, a5, a6, a7, a8, v375, v376, v377, v374);
                int v375 = a10;
                int v376 = a11;
                uint64_t v377 = a13;
                uint64_t v378 = a15;
                uint64_t v379 = a16;
                int v374 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12E:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v380 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v381 = a17;
          if (a12)
          {
            if (v380 == 3)
            {
              int v382 = a10;
              int v383 = a11;
              uint64_t v384 = a13;
              uint64_t v385 = a15;
              uint64_t v386 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v385, a3, a4 + a9 * v386, a5, a6, a7, a8, v382, v383, v384, v381);
                int v382 = a10;
                int v383 = a11;
                uint64_t v384 = a13;
                uint64_t v385 = a15;
                uint64_t v386 = a16;
                int v381 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x12F:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v387 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v388 = a17;
          if (a12)
          {
            if (v387 == 3)
            {
              int v389 = a10;
              int v390 = a11;
              uint64_t v391 = a13;
              uint64_t v392 = a15;
              uint64_t v393 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v392, a3, a4 + a9 * v393, a5, a6, a7, a8, v389, v390, v391, v388);
                int v389 = a10;
                int v390 = a11;
                uint64_t v391 = a13;
                uint64_t v392 = a15;
                uint64_t v393 = a16;
                int v388 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x130:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v394 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v395 = a17;
          if (a12)
          {
            if (v394 == 3)
            {
              int v396 = a10;
              int v397 = a11;
              uint64_t v398 = a13;
              uint64_t v399 = a15;
              uint64_t v400 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v399, a3, a4 + a9 * v400, a5, a6, a7, a8, v396, v397, v398, v395);
                int v396 = a10;
                int v397 = a11;
                uint64_t v398 = a13;
                uint64_t v399 = a15;
                uint64_t v400 = a16;
                int v395 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x139:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v401 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v402 = a17;
          if (a12)
          {
            if (v401 == 3)
            {
              int v403 = a10;
              int v404 = a11;
              uint64_t v405 = a13;
              uint64_t v406 = a15;
              uint64_t v407 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v406, a3, a4 + a9 * v407, a5, a6, a7, a8, v403, v404, v405, v402);
                int v403 = a10;
                int v404 = a11;
                uint64_t v405 = a13;
                uint64_t v406 = a15;
                uint64_t v407 = a16;
                int v402 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x13A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v408 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v409 = a17;
          if (a12)
          {
            if (v408 == 3)
            {
              int v410 = a10;
              int v411 = a11;
              uint64_t v412 = a13;
              uint64_t v413 = a15;
              uint64_t v414 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v413, a3, a4 + a9 * v414, a5, a6, a7, a8, v410, v411, v412, v409);
                int v410 = a10;
                int v411 = a11;
                uint64_t v412 = a13;
                uint64_t v413 = a15;
                uint64_t v414 = a16;
                int v409 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x13B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v415 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v416 = a17;
          if (a12)
          {
            if (v415 == 3)
            {
              int v417 = a10;
              int v418 = a11;
              uint64_t v419 = a13;
              uint64_t v420 = a15;
              uint64_t v421 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v420, a3, a4 + a9 * v421, a5, a6, a7, a8, v417, v418, v419, v416);
                int v417 = a10;
                int v418 = a11;
                uint64_t v419 = a13;
                uint64_t v420 = a15;
                uint64_t v421 = a16;
                int v416 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x143:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v422 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v423 = a17;
          if (a12)
          {
            if (v422 == 3)
            {
              int v424 = a10;
              int v425 = a11;
              uint64_t v426 = a13;
              uint64_t v427 = a15;
              uint64_t v428 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v427, a3, a4 + a9 * v428, a5, a6, a7, a8, v424, v425, v426, v423);
                int v424 = a10;
                int v425 = a11;
                uint64_t v426 = a13;
                uint64_t v427 = a15;
                uint64_t v428 = a16;
                int v423 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x144:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v429 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v430 = a17;
          if (a12)
          {
            if (v429 == 3)
            {
              int v431 = a10;
              int v432 = a11;
              uint64_t v433 = a13;
              uint64_t v434 = a15;
              uint64_t v435 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v434, a3, a4 + a9 * v435, a5, a6, a7, a8, v431, v432, v433, v430);
                int v431 = a10;
                int v432 = a11;
                uint64_t v433 = a13;
                uint64_t v434 = a15;
                uint64_t v435 = a16;
                int v430 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x145:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v436 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v437 = a17;
          if (a12)
          {
            if (v436 == 3)
            {
              int v438 = a10;
              int v439 = a11;
              uint64_t v440 = a13;
              uint64_t v441 = a15;
              uint64_t v442 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v441, a3, a4 + a9 * v442, a5, a6, a7, a8, v438, v439, v440, v437);
                int v438 = a10;
                int v439 = a11;
                uint64_t v440 = a13;
                uint64_t v441 = a15;
                uint64_t v442 = a16;
                int v437 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22A:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v443 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v444 = a17;
          if (a12)
          {
            if (v443 == 3)
            {
              int v445 = a10;
              int v446 = a11;
              uint64_t v447 = a13;
              uint64_t v448 = a15;
              uint64_t v449 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v448, a3, a4 + a9 * v449, a5, a6, a7, a8, v445, v446, v447, v444);
                int v445 = a10;
                int v446 = a11;
                uint64_t v447 = a13;
                uint64_t v448 = a15;
                uint64_t v449 = a16;
                int v444 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      case 0x22B:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v450 = getCompressionCodecConfig(*(void *)(a1 + 56));
          int v451 = a17;
          if (a12)
          {
            if (v450 == 3)
            {
              int v452 = a10;
              int v453 = a11;
              uint64_t v454 = a13;
              uint64_t v455 = a15;
              uint64_t v456 = a16;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v455, a3, a4 + a9 * v456, a5, a6, a7, a8, v452, v453, v454, v451);
                int v452 = a10;
                int v453 = a11;
                uint64_t v454 = a13;
                uint64_t v455 = a15;
                uint64_t v456 = a16;
                int v451 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        break;
      default:
        return;
    }
  }
  else if (v27 == 1)
  {
    int v28 = *(_DWORD *)(a1 + 32);
    switch(v28)
    {
      case 637:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 638:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 639:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 640:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      case 641:
        if (*(unsigned char *)(a1 + 380) != 1)
        {
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 != 1) {
            goto LABEL_53;
          }
          if (a12)
          {
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
              int v25 = a10;
              int v23 = a11;
              uint64_t v22 = a13;
              uint64_t v21 = a15;
              uint64_t v20 = a16;
              int v19 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        return;
      default:
        if (v28 != 553)
        {
          if (v28 != 552 || *(unsigned char *)(a1 + 380) == 1) {
            return;
          }
          int v29 = *(unsigned __int8 *)(a1 + 57);
          if (v29 == 1)
          {
            if (a12)
            {
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
                int v25 = a10;
                int v23 = a11;
                uint64_t v22 = a13;
                uint64_t v21 = a15;
                uint64_t v20 = a16;
                int v19 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
            return;
          }
LABEL_53:
          if (!v29
          {
            getCompressionCodecConfig(AGXTextureCompressionSettings)::losslessCodecConfig = 1;
          }
          return;
        }
        if (*(unsigned char *)(a1 + 380) == 1) {
          return;
        }
        int v29 = *(unsigned __int8 *)(a1 + 57);
        if (v29 != 1) {
          goto LABEL_53;
        }
        if (a12)
        {
          do
          {
            AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v21, a3, a4 + a9 * v20, a5, a6, a7, a8, v25, v23, v22, v19);
            int v25 = a10;
            int v23 = a11;
            uint64_t v22 = a13;
            uint64_t v21 = a15;
            uint64_t v20 = a16;
            int v19 = a17;
            ++a9;
            a3 += a14;
            --v24;
          }
          while (v24);
        }
        break;
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        uint64_t v2600 = *(unsigned __int8 *)(a1 + 380);
        int v37 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2600 == 1)
        {
          if (v37 == 4)
          {
            char v1568 = a17;
            if (a12)
            {
              uint64_t v1569 = a16;
              uint64_t v1570 = a15;
              uint64_t v1571 = a13;
              int v1572 = a11;
              int v1573 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1570, a3, a4 + a9 * v1569, a5, a6, a7, a8, v1573, v1572, v1571, v1568);
                int v1573 = a10;
                int v1572 = a11;
                uint64_t v1571 = a13;
                uint64_t v1570 = a15;
                uint64_t v1569 = a16;
                char v1568 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v38 = a17;
            if (!v37 && a12)
            {
              uint64_t v39 = a16;
              uint64_t v40 = a15;
              uint64_t v41 = a13;
              int v42 = a11;
              int v43 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v40, a3, a4 + a9 * v39, a5, a6, a7, a8, v43, v42, v41, v38);
                int v43 = a10;
                int v42 = a11;
                uint64_t v41 = a13;
                uint64_t v40 = a15;
                uint64_t v39 = a16;
                char v38 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v37 == 4)
        {
          int v2084 = a17;
          if (a12)
          {
            uint64_t v2085 = a16;
            uint64_t v2086 = a15;
            uint64_t v2087 = a13;
            int v2088 = a11;
            int v2089 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2086, a3, a4 + a9 * v2085, a5, a6, a7, a8, v2089, v2088, v2087, v2084);
              int v2089 = a10;
              int v2088 = a11;
              uint64_t v2087 = a13;
              uint64_t v2086 = a15;
              uint64_t v2085 = a16;
              int v2084 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1052 = a17;
          if (!v37 && a12)
          {
            uint64_t v1053 = a16;
            uint64_t v1054 = a15;
            uint64_t v1055 = a13;
            int v1056 = a11;
            int v1057 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1054, a3, a4 + a9 * v1053, a5, a6, a7, a8, v1057, v1056, v1055, v1052);
              int v1057 = a10;
              int v1056 = a11;
              uint64_t v1055 = a13;
              uint64_t v1054 = a15;
              uint64_t v1053 = a16;
              int v1052 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xA:
        uint64_t v2601 = *(unsigned __int8 *)(a1 + 380);
        int v457 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2601 == 1)
        {
          if (v457 == 4)
          {
            char v1574 = a17;
            if (a12)
            {
              uint64_t v1575 = a16;
              uint64_t v1576 = a15;
              uint64_t v1577 = a13;
              int v1578 = a11;
              int v1579 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1576, a3, a4 + a9 * v1575, a5, a6, a7, a8, v1579, v1578, v1577, v1574);
                int v1579 = a10;
                int v1578 = a11;
                uint64_t v1577 = a13;
                uint64_t v1576 = a15;
                uint64_t v1575 = a16;
                char v1574 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v458 = a17;
            if (!v457 && a12)
            {
              uint64_t v459 = a16;
              uint64_t v460 = a15;
              uint64_t v461 = a13;
              int v462 = a11;
              int v463 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v460, a3, a4 + a9 * v459, a5, a6, a7, a8, v463, v462, v461, v458);
                int v463 = a10;
                int v462 = a11;
                uint64_t v461 = a13;
                uint64_t v460 = a15;
                uint64_t v459 = a16;
                char v458 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v457 == 4)
        {
          int v2090 = a17;
          if (a12)
          {
            uint64_t v2091 = a16;
            uint64_t v2092 = a15;
            uint64_t v2093 = a13;
            int v2094 = a11;
            int v2095 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2092, a3, a4 + a9 * v2091, a5, a6, a7, a8, v2095, v2094, v2093, v2090);
              int v2095 = a10;
              int v2094 = a11;
              uint64_t v2093 = a13;
              uint64_t v2092 = a15;
              uint64_t v2091 = a16;
              int v2090 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1058 = a17;
          if (!v457 && a12)
          {
            uint64_t v1059 = a16;
            uint64_t v1060 = a15;
            uint64_t v1061 = a13;
            int v1062 = a11;
            int v1063 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1060, a3, a4 + a9 * v1059, a5, a6, a7, a8, v1063, v1062, v1061, v1058);
              int v1063 = a10;
              int v1062 = a11;
              uint64_t v1061 = a13;
              uint64_t v1060 = a15;
              uint64_t v1059 = a16;
              int v1058 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xB:
        uint64_t v2602 = *(unsigned __int8 *)(a1 + 380);
        int v464 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2602 == 1)
        {
          if (v464 == 4)
          {
            char v1580 = a17;
            if (a12)
            {
              uint64_t v1581 = a16;
              uint64_t v1582 = a15;
              uint64_t v1583 = a13;
              int v1584 = a11;
              int v1585 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1582, a3, a4 + a9 * v1581, a5, a6, a7, a8, v1585, v1584, v1583, v1580);
                int v1585 = a10;
                int v1584 = a11;
                uint64_t v1583 = a13;
                uint64_t v1582 = a15;
                uint64_t v1581 = a16;
                char v1580 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v465 = a17;
            if (!v464 && a12)
            {
              uint64_t v466 = a16;
              uint64_t v467 = a15;
              uint64_t v468 = a13;
              int v469 = a11;
              int v470 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v467, a3, a4 + a9 * v466, a5, a6, a7, a8, v470, v469, v468, v465);
                int v470 = a10;
                int v469 = a11;
                uint64_t v468 = a13;
                uint64_t v467 = a15;
                uint64_t v466 = a16;
                char v465 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v464 == 4)
        {
          int v2096 = a17;
          if (a12)
          {
            uint64_t v2097 = a16;
            uint64_t v2098 = a15;
            uint64_t v2099 = a13;
            int v2100 = a11;
            int v2101 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2098, a3, a4 + a9 * v2097, a5, a6, a7, a8, v2101, v2100, v2099, v2096);
              int v2101 = a10;
              int v2100 = a11;
              uint64_t v2099 = a13;
              uint64_t v2098 = a15;
              uint64_t v2097 = a16;
              int v2096 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1064 = a17;
          if (!v464 && a12)
          {
            uint64_t v1065 = a16;
            uint64_t v1066 = a15;
            uint64_t v1067 = a13;
            int v1068 = a11;
            int v1069 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1066, a3, a4 + a9 * v1065, a5, a6, a7, a8, v1069, v1068, v1067, v1064);
              int v1069 = a10;
              int v1068 = a11;
              uint64_t v1067 = a13;
              uint64_t v1066 = a15;
              uint64_t v1065 = a16;
              int v1064 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xC:
        uint64_t v2603 = *(unsigned __int8 *)(a1 + 380);
        int v471 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2603 == 1)
        {
          if (v471 == 4)
          {
            char v1586 = a17;
            if (a12)
            {
              uint64_t v1587 = a16;
              uint64_t v1588 = a15;
              uint64_t v1589 = a13;
              int v1590 = a11;
              int v1591 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1588, a3, a4 + a9 * v1587, a5, a6, a7, a8, v1591, v1590, v1589, v1586);
                int v1591 = a10;
                int v1590 = a11;
                uint64_t v1589 = a13;
                uint64_t v1588 = a15;
                uint64_t v1587 = a16;
                char v1586 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v472 = a17;
            if (!v471 && a12)
            {
              uint64_t v473 = a16;
              uint64_t v474 = a15;
              uint64_t v475 = a13;
              int v476 = a11;
              int v477 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v474, a3, a4 + a9 * v473, a5, a6, a7, a8, v477, v476, v475, v472);
                int v477 = a10;
                int v476 = a11;
                uint64_t v475 = a13;
                uint64_t v474 = a15;
                uint64_t v473 = a16;
                char v472 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v471 == 4)
        {
          int v2102 = a17;
          if (a12)
          {
            uint64_t v2103 = a16;
            uint64_t v2104 = a15;
            uint64_t v2105 = a13;
            int v2106 = a11;
            int v2107 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2104, a3, a4 + a9 * v2103, a5, a6, a7, a8, v2107, v2106, v2105, v2102);
              int v2107 = a10;
              int v2106 = a11;
              uint64_t v2105 = a13;
              uint64_t v2104 = a15;
              uint64_t v2103 = a16;
              int v2102 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1070 = a17;
          if (!v471 && a12)
          {
            uint64_t v1071 = a16;
            uint64_t v1072 = a15;
            uint64_t v1073 = a13;
            int v1074 = a11;
            int v1075 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1072, a3, a4 + a9 * v1071, a5, a6, a7, a8, v1075, v1074, v1073, v1070);
              int v1075 = a10;
              int v1074 = a11;
              uint64_t v1073 = a13;
              uint64_t v1072 = a15;
              uint64_t v1071 = a16;
              int v1070 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xD:
        uint64_t v2604 = *(unsigned __int8 *)(a1 + 380);
        int v478 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2604 == 1)
        {
          if (v478 == 4)
          {
            char v1592 = a17;
            if (a12)
            {
              uint64_t v1593 = a16;
              uint64_t v1594 = a15;
              uint64_t v1595 = a13;
              int v1596 = a11;
              int v1597 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1594, a3, a4 + a9 * v1593, a5, a6, a7, a8, v1597, v1596, v1595, v1592);
                int v1597 = a10;
                int v1596 = a11;
                uint64_t v1595 = a13;
                uint64_t v1594 = a15;
                uint64_t v1593 = a16;
                char v1592 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v479 = a17;
            if (!v478 && a12)
            {
              uint64_t v480 = a16;
              uint64_t v481 = a15;
              uint64_t v482 = a13;
              int v483 = a11;
              int v484 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v481, a3, a4 + a9 * v480, a5, a6, a7, a8, v484, v483, v482, v479);
                int v484 = a10;
                int v483 = a11;
                uint64_t v482 = a13;
                uint64_t v481 = a15;
                uint64_t v480 = a16;
                char v479 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v478 == 4)
        {
          int v2108 = a17;
          if (a12)
          {
            uint64_t v2109 = a16;
            uint64_t v2110 = a15;
            uint64_t v2111 = a13;
            int v2112 = a11;
            int v2113 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2110, a3, a4 + a9 * v2109, a5, a6, a7, a8, v2113, v2112, v2111, v2108);
              int v2113 = a10;
              int v2112 = a11;
              uint64_t v2111 = a13;
              uint64_t v2110 = a15;
              uint64_t v2109 = a16;
              int v2108 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1076 = a17;
          if (!v478 && a12)
          {
            uint64_t v1077 = a16;
            uint64_t v1078 = a15;
            uint64_t v1079 = a13;
            int v1080 = a11;
            int v1081 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1078, a3, a4 + a9 * v1077, a5, a6, a7, a8, v1081, v1080, v1079, v1076);
              int v1081 = a10;
              int v1080 = a11;
              uint64_t v1079 = a13;
              uint64_t v1078 = a15;
              uint64_t v1077 = a16;
              int v1076 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xE:
        uint64_t v2605 = *(unsigned __int8 *)(a1 + 380);
        int v485 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2605 == 1)
        {
          if (v485 == 4)
          {
            char v1598 = a17;
            if (a12)
            {
              uint64_t v1599 = a16;
              uint64_t v1600 = a15;
              uint64_t v1601 = a13;
              int v1602 = a11;
              int v1603 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1600, a3, a4 + a9 * v1599, a5, a6, a7, a8, v1603, v1602, v1601, v1598);
                int v1603 = a10;
                int v1602 = a11;
                uint64_t v1601 = a13;
                uint64_t v1600 = a15;
                uint64_t v1599 = a16;
                char v1598 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v486 = a17;
            if (!v485 && a12)
            {
              uint64_t v487 = a16;
              uint64_t v488 = a15;
              uint64_t v489 = a13;
              int v490 = a11;
              int v491 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v488, a3, a4 + a9 * v487, a5, a6, a7, a8, v491, v490, v489, v486);
                int v491 = a10;
                int v490 = a11;
                uint64_t v489 = a13;
                uint64_t v488 = a15;
                uint64_t v487 = a16;
                char v486 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v485 == 4)
        {
          int v2114 = a17;
          if (a12)
          {
            uint64_t v2115 = a16;
            uint64_t v2116 = a15;
            uint64_t v2117 = a13;
            int v2118 = a11;
            int v2119 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2116, a3, a4 + a9 * v2115, a5, a6, a7, a8, v2119, v2118, v2117, v2114);
              int v2119 = a10;
              int v2118 = a11;
              uint64_t v2117 = a13;
              uint64_t v2116 = a15;
              uint64_t v2115 = a16;
              int v2114 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1082 = a17;
          if (!v485 && a12)
          {
            uint64_t v1083 = a16;
            uint64_t v1084 = a15;
            uint64_t v1085 = a13;
            int v1086 = a11;
            int v1087 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1084, a3, a4 + a9 * v1083, a5, a6, a7, a8, v1087, v1086, v1085, v1082);
              int v1087 = a10;
              int v1086 = a11;
              uint64_t v1085 = a13;
              uint64_t v1084 = a15;
              uint64_t v1083 = a16;
              int v1082 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x14:
        uint64_t v2606 = *(unsigned __int8 *)(a1 + 380);
        int v492 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2606 == 1)
        {
          if (v492 == 4)
          {
            char v1604 = a17;
            if (a12)
            {
              uint64_t v1605 = a16;
              uint64_t v1606 = a15;
              uint64_t v1607 = a13;
              int v1608 = a11;
              int v1609 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1606, a3, a4 + a9 * v1605, a5, a6, a7, a8, v1609, v1608, v1607, v1604);
                int v1609 = a10;
                int v1608 = a11;
                uint64_t v1607 = a13;
                uint64_t v1606 = a15;
                uint64_t v1605 = a16;
                char v1604 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v493 = a17;
            if (!v492 && a12)
            {
              uint64_t v494 = a16;
              uint64_t v495 = a15;
              uint64_t v496 = a13;
              int v497 = a11;
              int v498 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v495, a3, a4 + a9 * v494, a5, a6, a7, a8, v498, v497, v496, v493);
                int v498 = a10;
                int v497 = a11;
                uint64_t v496 = a13;
                uint64_t v495 = a15;
                uint64_t v494 = a16;
                char v493 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v492 == 4)
        {
          int v2120 = a17;
          if (a12)
          {
            uint64_t v2121 = a16;
            uint64_t v2122 = a15;
            uint64_t v2123 = a13;
            int v2124 = a11;
            int v2125 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2122, a3, a4 + a9 * v2121, a5, a6, a7, a8, v2125, v2124, v2123, v2120);
              int v2125 = a10;
              int v2124 = a11;
              uint64_t v2123 = a13;
              uint64_t v2122 = a15;
              uint64_t v2121 = a16;
              int v2120 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1088 = a17;
          if (!v492 && a12)
          {
            uint64_t v1089 = a16;
            uint64_t v1090 = a15;
            uint64_t v1091 = a13;
            int v1092 = a11;
            int v1093 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1090, a3, a4 + a9 * v1089, a5, a6, a7, a8, v1093, v1092, v1091, v1088);
              int v1093 = a10;
              int v1092 = a11;
              uint64_t v1091 = a13;
              uint64_t v1090 = a15;
              uint64_t v1089 = a16;
              int v1088 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x16:
        uint64_t v2607 = *(unsigned __int8 *)(a1 + 380);
        int v499 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2607 == 1)
        {
          if (v499 == 4)
          {
            char v1610 = a17;
            if (a12)
            {
              uint64_t v1611 = a16;
              uint64_t v1612 = a15;
              uint64_t v1613 = a13;
              int v1614 = a11;
              int v1615 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1612, a3, a4 + a9 * v1611, a5, a6, a7, a8, v1615, v1614, v1613, v1610);
                int v1615 = a10;
                int v1614 = a11;
                uint64_t v1613 = a13;
                uint64_t v1612 = a15;
                uint64_t v1611 = a16;
                char v1610 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v500 = a17;
            if (!v499 && a12)
            {
              uint64_t v501 = a16;
              uint64_t v502 = a15;
              uint64_t v503 = a13;
              int v504 = a11;
              int v505 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v502, a3, a4 + a9 * v501, a5, a6, a7, a8, v505, v504, v503, v500);
                int v505 = a10;
                int v504 = a11;
                uint64_t v503 = a13;
                uint64_t v502 = a15;
                uint64_t v501 = a16;
                char v500 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v499 == 4)
        {
          int v2126 = a17;
          if (a12)
          {
            uint64_t v2127 = a16;
            uint64_t v2128 = a15;
            uint64_t v2129 = a13;
            int v2130 = a11;
            int v2131 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2128, a3, a4 + a9 * v2127, a5, a6, a7, a8, v2131, v2130, v2129, v2126);
              int v2131 = a10;
              int v2130 = a11;
              uint64_t v2129 = a13;
              uint64_t v2128 = a15;
              uint64_t v2127 = a16;
              int v2126 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1094 = a17;
          if (!v499 && a12)
          {
            uint64_t v1095 = a16;
            uint64_t v1096 = a15;
            uint64_t v1097 = a13;
            int v1098 = a11;
            int v1099 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1096, a3, a4 + a9 * v1095, a5, a6, a7, a8, v1099, v1098, v1097, v1094);
              int v1099 = a10;
              int v1098 = a11;
              uint64_t v1097 = a13;
              uint64_t v1096 = a15;
              uint64_t v1095 = a16;
              int v1094 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x17:
        uint64_t v2608 = *(unsigned __int8 *)(a1 + 380);
        int v506 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2608 == 1)
        {
          if (v506 == 4)
          {
            char v1616 = a17;
            if (a12)
            {
              uint64_t v1617 = a16;
              uint64_t v1618 = a15;
              uint64_t v1619 = a13;
              int v1620 = a11;
              int v1621 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1618, a3, a4 + a9 * v1617, a5, a6, a7, a8, v1621, v1620, v1619, v1616);
                int v1621 = a10;
                int v1620 = a11;
                uint64_t v1619 = a13;
                uint64_t v1618 = a15;
                uint64_t v1617 = a16;
                char v1616 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v507 = a17;
            if (!v506 && a12)
            {
              uint64_t v508 = a16;
              uint64_t v509 = a15;
              uint64_t v510 = a13;
              int v511 = a11;
              int v512 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v509, a3, a4 + a9 * v508, a5, a6, a7, a8, v512, v511, v510, v507);
                int v512 = a10;
                int v511 = a11;
                uint64_t v510 = a13;
                uint64_t v509 = a15;
                uint64_t v508 = a16;
                char v507 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v506 == 4)
        {
          int v2132 = a17;
          if (a12)
          {
            uint64_t v2133 = a16;
            uint64_t v2134 = a15;
            uint64_t v2135 = a13;
            int v2136 = a11;
            int v2137 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2134, a3, a4 + a9 * v2133, a5, a6, a7, a8, v2137, v2136, v2135, v2132);
              int v2137 = a10;
              int v2136 = a11;
              uint64_t v2135 = a13;
              uint64_t v2134 = a15;
              uint64_t v2133 = a16;
              int v2132 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1100 = a17;
          if (!v506 && a12)
          {
            uint64_t v1101 = a16;
            uint64_t v1102 = a15;
            uint64_t v1103 = a13;
            int v1104 = a11;
            int v1105 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1102, a3, a4 + a9 * v1101, a5, a6, a7, a8, v1105, v1104, v1103, v1100);
              int v1105 = a10;
              int v1104 = a11;
              uint64_t v1103 = a13;
              uint64_t v1102 = a15;
              uint64_t v1101 = a16;
              int v1100 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x18:
        uint64_t v2609 = *(unsigned __int8 *)(a1 + 380);
        int v513 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2609 == 1)
        {
          if (v513 == 4)
          {
            char v1622 = a17;
            if (a12)
            {
              uint64_t v1623 = a16;
              uint64_t v1624 = a15;
              uint64_t v1625 = a13;
              int v1626 = a11;
              int v1627 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1624, a3, a4 + a9 * v1623, a5, a6, a7, a8, v1627, v1626, v1625, v1622);
                int v1627 = a10;
                int v1626 = a11;
                uint64_t v1625 = a13;
                uint64_t v1624 = a15;
                uint64_t v1623 = a16;
                char v1622 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v514 = a17;
            if (!v513 && a12)
            {
              uint64_t v515 = a16;
              uint64_t v516 = a15;
              uint64_t v517 = a13;
              int v518 = a11;
              int v519 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v516, a3, a4 + a9 * v515, a5, a6, a7, a8, v519, v518, v517, v514);
                int v519 = a10;
                int v518 = a11;
                uint64_t v517 = a13;
                uint64_t v516 = a15;
                uint64_t v515 = a16;
                char v514 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v513 == 4)
        {
          int v2138 = a17;
          if (a12)
          {
            uint64_t v2139 = a16;
            uint64_t v2140 = a15;
            uint64_t v2141 = a13;
            int v2142 = a11;
            int v2143 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2140, a3, a4 + a9 * v2139, a5, a6, a7, a8, v2143, v2142, v2141, v2138);
              int v2143 = a10;
              int v2142 = a11;
              uint64_t v2141 = a13;
              uint64_t v2140 = a15;
              uint64_t v2139 = a16;
              int v2138 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1106 = a17;
          if (!v513 && a12)
          {
            uint64_t v1107 = a16;
            uint64_t v1108 = a15;
            uint64_t v1109 = a13;
            int v1110 = a11;
            int v1111 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1108, a3, a4 + a9 * v1107, a5, a6, a7, a8, v1111, v1110, v1109, v1106);
              int v1111 = a10;
              int v1110 = a11;
              uint64_t v1109 = a13;
              uint64_t v1108 = a15;
              uint64_t v1107 = a16;
              int v1106 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x19:
        uint64_t v2610 = *(unsigned __int8 *)(a1 + 380);
        int v520 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2610 == 1)
        {
          if (v520 == 4)
          {
            char v1628 = a17;
            if (a12)
            {
              uint64_t v1629 = a16;
              uint64_t v1630 = a15;
              uint64_t v1631 = a13;
              int v1632 = a11;
              int v1633 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1630, a3, a4 + a9 * v1629, a5, a6, a7, a8, v1633, v1632, v1631, v1628);
                int v1633 = a10;
                int v1632 = a11;
                uint64_t v1631 = a13;
                uint64_t v1630 = a15;
                uint64_t v1629 = a16;
                char v1628 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v521 = a17;
            if (!v520 && a12)
            {
              uint64_t v522 = a16;
              uint64_t v523 = a15;
              uint64_t v524 = a13;
              int v525 = a11;
              int v526 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v523, a3, a4 + a9 * v522, a5, a6, a7, a8, v526, v525, v524, v521);
                int v526 = a10;
                int v525 = a11;
                uint64_t v524 = a13;
                uint64_t v523 = a15;
                uint64_t v522 = a16;
                char v521 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v520 == 4)
        {
          int v2144 = a17;
          if (a12)
          {
            uint64_t v2145 = a16;
            uint64_t v2146 = a15;
            uint64_t v2147 = a13;
            int v2148 = a11;
            int v2149 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2146, a3, a4 + a9 * v2145, a5, a6, a7, a8, v2149, v2148, v2147, v2144);
              int v2149 = a10;
              int v2148 = a11;
              uint64_t v2147 = a13;
              uint64_t v2146 = a15;
              uint64_t v2145 = a16;
              int v2144 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1112 = a17;
          if (!v520 && a12)
          {
            uint64_t v1113 = a16;
            uint64_t v1114 = a15;
            uint64_t v1115 = a13;
            int v1116 = a11;
            int v1117 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1114, a3, a4 + a9 * v1113, a5, a6, a7, a8, v1117, v1116, v1115, v1112);
              int v1117 = a10;
              int v1116 = a11;
              uint64_t v1115 = a13;
              uint64_t v1114 = a15;
              uint64_t v1113 = a16;
              int v1112 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1A:
        uint64_t v2611 = *(unsigned __int8 *)(a1 + 380);
        int v527 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2611 == 1)
        {
          if (v527 == 4)
          {
            char v1634 = a17;
            if (a12)
            {
              uint64_t v1635 = a16;
              uint64_t v1636 = a15;
              uint64_t v1637 = a13;
              int v1638 = a11;
              int v1639 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1636, a3, a4 + a9 * v1635, a5, a6, a7, a8, v1639, v1638, v1637, v1634);
                int v1639 = a10;
                int v1638 = a11;
                uint64_t v1637 = a13;
                uint64_t v1636 = a15;
                uint64_t v1635 = a16;
                char v1634 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v528 = a17;
            if (!v527 && a12)
            {
              uint64_t v529 = a16;
              uint64_t v530 = a15;
              uint64_t v531 = a13;
              int v532 = a11;
              int v533 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v530, a3, a4 + a9 * v529, a5, a6, a7, a8, v533, v532, v531, v528);
                int v533 = a10;
                int v532 = a11;
                uint64_t v531 = a13;
                uint64_t v530 = a15;
                uint64_t v529 = a16;
                char v528 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v527 == 4)
        {
          int v2150 = a17;
          if (a12)
          {
            uint64_t v2151 = a16;
            uint64_t v2152 = a15;
            uint64_t v2153 = a13;
            int v2154 = a11;
            int v2155 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2152, a3, a4 + a9 * v2151, a5, a6, a7, a8, v2155, v2154, v2153, v2150);
              int v2155 = a10;
              int v2154 = a11;
              uint64_t v2153 = a13;
              uint64_t v2152 = a15;
              uint64_t v2151 = a16;
              int v2150 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1118 = a17;
          if (!v527 && a12)
          {
            uint64_t v1119 = a16;
            uint64_t v1120 = a15;
            uint64_t v1121 = a13;
            int v1122 = a11;
            int v1123 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1120, a3, a4 + a9 * v1119, a5, a6, a7, a8, v1123, v1122, v1121, v1118);
              int v1123 = a10;
              int v1122 = a11;
              uint64_t v1121 = a13;
              uint64_t v1120 = a15;
              uint64_t v1119 = a16;
              int v1118 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1E:
        uint64_t v2612 = *(unsigned __int8 *)(a1 + 380);
        int v534 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2612 == 1)
        {
          if (v534 == 4)
          {
            char v1640 = a17;
            if (a12)
            {
              uint64_t v1641 = a16;
              uint64_t v1642 = a15;
              uint64_t v1643 = a13;
              int v1644 = a11;
              int v1645 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1642, a3, a4 + a9 * v1641, a5, a6, a7, a8, v1645, v1644, v1643, v1640);
                int v1645 = a10;
                int v1644 = a11;
                uint64_t v1643 = a13;
                uint64_t v1642 = a15;
                uint64_t v1641 = a16;
                char v1640 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v535 = a17;
            if (!v534 && a12)
            {
              uint64_t v536 = a16;
              uint64_t v537 = a15;
              uint64_t v538 = a13;
              int v539 = a11;
              int v540 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v537, a3, a4 + a9 * v536, a5, a6, a7, a8, v540, v539, v538, v535);
                int v540 = a10;
                int v539 = a11;
                uint64_t v538 = a13;
                uint64_t v537 = a15;
                uint64_t v536 = a16;
                char v535 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v534 == 4)
        {
          int v2156 = a17;
          if (a12)
          {
            uint64_t v2157 = a16;
            uint64_t v2158 = a15;
            uint64_t v2159 = a13;
            int v2160 = a11;
            int v2161 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2158, a3, a4 + a9 * v2157, a5, a6, a7, a8, v2161, v2160, v2159, v2156);
              int v2161 = a10;
              int v2160 = a11;
              uint64_t v2159 = a13;
              uint64_t v2158 = a15;
              uint64_t v2157 = a16;
              int v2156 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1124 = a17;
          if (!v534 && a12)
          {
            uint64_t v1125 = a16;
            uint64_t v1126 = a15;
            uint64_t v1127 = a13;
            int v1128 = a11;
            int v1129 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1126, a3, a4 + a9 * v1125, a5, a6, a7, a8, v1129, v1128, v1127, v1124);
              int v1129 = a10;
              int v1128 = a11;
              uint64_t v1127 = a13;
              uint64_t v1126 = a15;
              uint64_t v1125 = a16;
              int v1124 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x1F:
        uint64_t v2613 = *(unsigned __int8 *)(a1 + 380);
        int v541 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2613 == 1)
        {
          if (v541 == 4)
          {
            char v1646 = a17;
            if (a12)
            {
              uint64_t v1647 = a16;
              uint64_t v1648 = a15;
              uint64_t v1649 = a13;
              int v1650 = a11;
              int v1651 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1648, a3, a4 + a9 * v1647, a5, a6, a7, a8, v1651, v1650, v1649, v1646);
                int v1651 = a10;
                int v1650 = a11;
                uint64_t v1649 = a13;
                uint64_t v1648 = a15;
                uint64_t v1647 = a16;
                char v1646 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v542 = a17;
            if (!v541 && a12)
            {
              uint64_t v543 = a16;
              uint64_t v544 = a15;
              uint64_t v545 = a13;
              int v546 = a11;
              int v547 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v544, a3, a4 + a9 * v543, a5, a6, a7, a8, v547, v546, v545, v542);
                int v547 = a10;
                int v546 = a11;
                uint64_t v545 = a13;
                uint64_t v544 = a15;
                uint64_t v543 = a16;
                char v542 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v541 == 4)
        {
          int v2162 = a17;
          if (a12)
          {
            uint64_t v2163 = a16;
            uint64_t v2164 = a15;
            uint64_t v2165 = a13;
            int v2166 = a11;
            int v2167 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2164, a3, a4 + a9 * v2163, a5, a6, a7, a8, v2167, v2166, v2165, v2162);
              int v2167 = a10;
              int v2166 = a11;
              uint64_t v2165 = a13;
              uint64_t v2164 = a15;
              uint64_t v2163 = a16;
              int v2162 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1130 = a17;
          if (!v541 && a12)
          {
            uint64_t v1131 = a16;
            uint64_t v1132 = a15;
            uint64_t v1133 = a13;
            int v1134 = a11;
            int v1135 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1132, a3, a4 + a9 * v1131, a5, a6, a7, a8, v1135, v1134, v1133, v1130);
              int v1135 = a10;
              int v1134 = a11;
              uint64_t v1133 = a13;
              uint64_t v1132 = a15;
              uint64_t v1131 = a16;
              int v1130 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x20:
        uint64_t v2614 = *(unsigned __int8 *)(a1 + 380);
        int v548 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2614 == 1)
        {
          if (v548 == 4)
          {
            char v1652 = a17;
            if (a12)
            {
              uint64_t v1653 = a16;
              uint64_t v1654 = a15;
              uint64_t v1655 = a13;
              int v1656 = a11;
              int v1657 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1654, a3, a4 + a9 * v1653, a5, a6, a7, a8, v1657, v1656, v1655, v1652);
                int v1657 = a10;
                int v1656 = a11;
                uint64_t v1655 = a13;
                uint64_t v1654 = a15;
                uint64_t v1653 = a16;
                char v1652 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v549 = a17;
            if (!v548 && a12)
            {
              uint64_t v550 = a16;
              uint64_t v551 = a15;
              uint64_t v552 = a13;
              int v553 = a11;
              int v554 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v551, a3, a4 + a9 * v550, a5, a6, a7, a8, v554, v553, v552, v549);
                int v554 = a10;
                int v553 = a11;
                uint64_t v552 = a13;
                uint64_t v551 = a15;
                uint64_t v550 = a16;
                char v549 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v548 == 4)
        {
          int v2168 = a17;
          if (a12)
          {
            uint64_t v2169 = a16;
            uint64_t v2170 = a15;
            uint64_t v2171 = a13;
            int v2172 = a11;
            int v2173 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2170, a3, a4 + a9 * v2169, a5, a6, a7, a8, v2173, v2172, v2171, v2168);
              int v2173 = a10;
              int v2172 = a11;
              uint64_t v2171 = a13;
              uint64_t v2170 = a15;
              uint64_t v2169 = a16;
              int v2168 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1136 = a17;
          if (!v548 && a12)
          {
            uint64_t v1137 = a16;
            uint64_t v1138 = a15;
            uint64_t v1139 = a13;
            int v1140 = a11;
            int v1141 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1138, a3, a4 + a9 * v1137, a5, a6, a7, a8, v1141, v1140, v1139, v1136);
              int v1141 = a10;
              int v1140 = a11;
              uint64_t v1139 = a13;
              uint64_t v1138 = a15;
              uint64_t v1137 = a16;
              int v1136 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x21:
        uint64_t v2615 = *(unsigned __int8 *)(a1 + 380);
        int v555 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2615 == 1)
        {
          if (v555 == 4)
          {
            char v1658 = a17;
            if (a12)
            {
              uint64_t v1659 = a16;
              uint64_t v1660 = a15;
              uint64_t v1661 = a13;
              int v1662 = a11;
              int v1663 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1660, a3, a4 + a9 * v1659, a5, a6, a7, a8, v1663, v1662, v1661, v1658);
                int v1663 = a10;
                int v1662 = a11;
                uint64_t v1661 = a13;
                uint64_t v1660 = a15;
                uint64_t v1659 = a16;
                char v1658 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v556 = a17;
            if (!v555 && a12)
            {
              uint64_t v557 = a16;
              uint64_t v558 = a15;
              uint64_t v559 = a13;
              int v560 = a11;
              int v561 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v558, a3, a4 + a9 * v557, a5, a6, a7, a8, v561, v560, v559, v556);
                int v561 = a10;
                int v560 = a11;
                uint64_t v559 = a13;
                uint64_t v558 = a15;
                uint64_t v557 = a16;
                char v556 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v555 == 4)
        {
          int v2174 = a17;
          if (a12)
          {
            uint64_t v2175 = a16;
            uint64_t v2176 = a15;
            uint64_t v2177 = a13;
            int v2178 = a11;
            int v2179 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2176, a3, a4 + a9 * v2175, a5, a6, a7, a8, v2179, v2178, v2177, v2174);
              int v2179 = a10;
              int v2178 = a11;
              uint64_t v2177 = a13;
              uint64_t v2176 = a15;
              uint64_t v2175 = a16;
              int v2174 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1142 = a17;
          if (!v555 && a12)
          {
            uint64_t v1143 = a16;
            uint64_t v1144 = a15;
            uint64_t v1145 = a13;
            int v1146 = a11;
            int v1147 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1144, a3, a4 + a9 * v1143, a5, a6, a7, a8, v1147, v1146, v1145, v1142);
              int v1147 = a10;
              int v1146 = a11;
              uint64_t v1145 = a13;
              uint64_t v1144 = a15;
              uint64_t v1143 = a16;
              int v1142 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22:
        uint64_t v2616 = *(unsigned __int8 *)(a1 + 380);
        int v562 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2616 == 1)
        {
          if (v562 == 4)
          {
            char v1664 = a17;
            if (a12)
            {
              uint64_t v1665 = a16;
              uint64_t v1666 = a15;
              uint64_t v1667 = a13;
              int v1668 = a11;
              int v1669 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1666, a3, a4 + a9 * v1665, a5, a6, a7, a8, v1669, v1668, v1667, v1664);
                int v1669 = a10;
                int v1668 = a11;
                uint64_t v1667 = a13;
                uint64_t v1666 = a15;
                uint64_t v1665 = a16;
                char v1664 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v563 = a17;
            if (!v562 && a12)
            {
              uint64_t v564 = a16;
              uint64_t v565 = a15;
              uint64_t v566 = a13;
              int v567 = a11;
              int v568 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v565, a3, a4 + a9 * v564, a5, a6, a7, a8, v568, v567, v566, v563);
                int v568 = a10;
                int v567 = a11;
                uint64_t v566 = a13;
                uint64_t v565 = a15;
                uint64_t v564 = a16;
                char v563 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v562 == 4)
        {
          int v2180 = a17;
          if (a12)
          {
            uint64_t v2181 = a16;
            uint64_t v2182 = a15;
            uint64_t v2183 = a13;
            int v2184 = a11;
            int v2185 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2182, a3, a4 + a9 * v2181, a5, a6, a7, a8, v2185, v2184, v2183, v2180);
              int v2185 = a10;
              int v2184 = a11;
              uint64_t v2183 = a13;
              uint64_t v2182 = a15;
              uint64_t v2181 = a16;
              int v2180 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1148 = a17;
          if (!v562 && a12)
          {
            uint64_t v1149 = a16;
            uint64_t v1150 = a15;
            uint64_t v1151 = a13;
            int v1152 = a11;
            int v1153 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1150, a3, a4 + a9 * v1149, a5, a6, a7, a8, v1153, v1152, v1151, v1148);
              int v1153 = a10;
              int v1152 = a11;
              uint64_t v1151 = a13;
              uint64_t v1150 = a15;
              uint64_t v1149 = a16;
              int v1148 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x28:
        uint64_t v2617 = *(unsigned __int8 *)(a1 + 380);
        int v569 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2617 == 1)
        {
          if (v569 == 4)
          {
            char v1670 = a17;
            if (a12)
            {
              uint64_t v1671 = a16;
              uint64_t v1672 = a15;
              uint64_t v1673 = a13;
              int v1674 = a11;
              int v1675 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1672, a3, a4 + a9 * v1671, a5, a6, a7, a8, v1675, v1674, v1673, v1670);
                int v1675 = a10;
                int v1674 = a11;
                uint64_t v1673 = a13;
                uint64_t v1672 = a15;
                uint64_t v1671 = a16;
                char v1670 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v570 = a17;
            if (!v569 && a12)
            {
              uint64_t v571 = a16;
              uint64_t v572 = a15;
              uint64_t v573 = a13;
              int v574 = a11;
              int v575 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v572, a3, a4 + a9 * v571, a5, a6, a7, a8, v575, v574, v573, v570);
                int v575 = a10;
                int v574 = a11;
                uint64_t v573 = a13;
                uint64_t v572 = a15;
                uint64_t v571 = a16;
                char v570 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v569 == 4)
        {
          int v2186 = a17;
          if (a12)
          {
            uint64_t v2187 = a16;
            uint64_t v2188 = a15;
            uint64_t v2189 = a13;
            int v2190 = a11;
            int v2191 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2188, a3, a4 + a9 * v2187, a5, a6, a7, a8, v2191, v2190, v2189, v2186);
              int v2191 = a10;
              int v2190 = a11;
              uint64_t v2189 = a13;
              uint64_t v2188 = a15;
              uint64_t v2187 = a16;
              int v2186 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1154 = a17;
          if (!v569 && a12)
          {
            uint64_t v1155 = a16;
            uint64_t v1156 = a15;
            uint64_t v1157 = a13;
            int v1158 = a11;
            int v1159 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1156, a3, a4 + a9 * v1155, a5, a6, a7, a8, v1159, v1158, v1157, v1154);
              int v1159 = a10;
              int v1158 = a11;
              uint64_t v1157 = a13;
              uint64_t v1156 = a15;
              uint64_t v1155 = a16;
              int v1154 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x29:
        uint64_t v2618 = *(unsigned __int8 *)(a1 + 380);
        int v576 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2618 == 1)
        {
          if (v576 == 4)
          {
            char v1676 = a17;
            if (a12)
            {
              uint64_t v1677 = a16;
              uint64_t v1678 = a15;
              uint64_t v1679 = a13;
              int v1680 = a11;
              int v1681 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1678, a3, a4 + a9 * v1677, a5, a6, a7, a8, v1681, v1680, v1679, v1676);
                int v1681 = a10;
                int v1680 = a11;
                uint64_t v1679 = a13;
                uint64_t v1678 = a15;
                uint64_t v1677 = a16;
                char v1676 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v577 = a17;
            if (!v576 && a12)
            {
              uint64_t v578 = a16;
              uint64_t v579 = a15;
              uint64_t v580 = a13;
              int v581 = a11;
              int v582 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v579, a3, a4 + a9 * v578, a5, a6, a7, a8, v582, v581, v580, v577);
                int v582 = a10;
                int v581 = a11;
                uint64_t v580 = a13;
                uint64_t v579 = a15;
                uint64_t v578 = a16;
                char v577 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v576 == 4)
        {
          int v2192 = a17;
          if (a12)
          {
            uint64_t v2193 = a16;
            uint64_t v2194 = a15;
            uint64_t v2195 = a13;
            int v2196 = a11;
            int v2197 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2194, a3, a4 + a9 * v2193, a5, a6, a7, a8, v2197, v2196, v2195, v2192);
              int v2197 = a10;
              int v2196 = a11;
              uint64_t v2195 = a13;
              uint64_t v2194 = a15;
              uint64_t v2193 = a16;
              int v2192 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1160 = a17;
          if (!v576 && a12)
          {
            uint64_t v1161 = a16;
            uint64_t v1162 = a15;
            uint64_t v1163 = a13;
            int v1164 = a11;
            int v1165 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1162, a3, a4 + a9 * v1161, a5, a6, a7, a8, v1165, v1164, v1163, v1160);
              int v1165 = a10;
              int v1164 = a11;
              uint64_t v1163 = a13;
              uint64_t v1162 = a15;
              uint64_t v1161 = a16;
              int v1160 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2A:
        uint64_t v2619 = *(unsigned __int8 *)(a1 + 380);
        int v583 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2619 == 1)
        {
          if (v583 == 4)
          {
            char v1682 = a17;
            if (a12)
            {
              uint64_t v1683 = a16;
              uint64_t v1684 = a15;
              uint64_t v1685 = a13;
              int v1686 = a11;
              int v1687 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1684, a3, a4 + a9 * v1683, a5, a6, a7, a8, v1687, v1686, v1685, v1682);
                int v1687 = a10;
                int v1686 = a11;
                uint64_t v1685 = a13;
                uint64_t v1684 = a15;
                uint64_t v1683 = a16;
                char v1682 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v584 = a17;
            if (!v583 && a12)
            {
              uint64_t v585 = a16;
              uint64_t v586 = a15;
              uint64_t v587 = a13;
              int v588 = a11;
              int v589 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v586, a3, a4 + a9 * v585, a5, a6, a7, a8, v589, v588, v587, v584);
                int v589 = a10;
                int v588 = a11;
                uint64_t v587 = a13;
                uint64_t v586 = a15;
                uint64_t v585 = a16;
                char v584 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v583 == 4)
        {
          int v2198 = a17;
          if (a12)
          {
            uint64_t v2199 = a16;
            uint64_t v2200 = a15;
            uint64_t v2201 = a13;
            int v2202 = a11;
            int v2203 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2200, a3, a4 + a9 * v2199, a5, a6, a7, a8, v2203, v2202, v2201, v2198);
              int v2203 = a10;
              int v2202 = a11;
              uint64_t v2201 = a13;
              uint64_t v2200 = a15;
              uint64_t v2199 = a16;
              int v2198 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1166 = a17;
          if (!v583 && a12)
          {
            uint64_t v1167 = a16;
            uint64_t v1168 = a15;
            uint64_t v1169 = a13;
            int v1170 = a11;
            int v1171 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1168, a3, a4 + a9 * v1167, a5, a6, a7, a8, v1171, v1170, v1169, v1166);
              int v1171 = a10;
              int v1170 = a11;
              uint64_t v1169 = a13;
              uint64_t v1168 = a15;
              uint64_t v1167 = a16;
              int v1166 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2B:
        uint64_t v2620 = *(unsigned __int8 *)(a1 + 380);
        int v590 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2620 == 1)
        {
          if (v590 == 4)
          {
            char v1688 = a17;
            if (a12)
            {
              uint64_t v1689 = a16;
              uint64_t v1690 = a15;
              uint64_t v1691 = a13;
              int v1692 = a11;
              int v1693 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1690, a3, a4 + a9 * v1689, a5, a6, a7, a8, v1693, v1692, v1691, v1688);
                int v1693 = a10;
                int v1692 = a11;
                uint64_t v1691 = a13;
                uint64_t v1690 = a15;
                uint64_t v1689 = a16;
                char v1688 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v591 = a17;
            if (!v590 && a12)
            {
              uint64_t v592 = a16;
              uint64_t v593 = a15;
              uint64_t v594 = a13;
              int v595 = a11;
              int v596 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v593, a3, a4 + a9 * v592, a5, a6, a7, a8, v596, v595, v594, v591);
                int v596 = a10;
                int v595 = a11;
                uint64_t v594 = a13;
                uint64_t v593 = a15;
                uint64_t v592 = a16;
                char v591 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v590 == 4)
        {
          int v2204 = a17;
          if (a12)
          {
            uint64_t v2205 = a16;
            uint64_t v2206 = a15;
            uint64_t v2207 = a13;
            int v2208 = a11;
            int v2209 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2206, a3, a4 + a9 * v2205, a5, a6, a7, a8, v2209, v2208, v2207, v2204);
              int v2209 = a10;
              int v2208 = a11;
              uint64_t v2207 = a13;
              uint64_t v2206 = a15;
              uint64_t v2205 = a16;
              int v2204 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1172 = a17;
          if (!v590 && a12)
          {
            uint64_t v1173 = a16;
            uint64_t v1174 = a15;
            uint64_t v1175 = a13;
            int v1176 = a11;
            int v1177 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1174, a3, a4 + a9 * v1173, a5, a6, a7, a8, v1177, v1176, v1175, v1172);
              int v1177 = a10;
              int v1176 = a11;
              uint64_t v1175 = a13;
              uint64_t v1174 = a15;
              uint64_t v1173 = a16;
              int v1172 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x2C:
        uint64_t v2621 = *(unsigned __int8 *)(a1 + 380);
        int v597 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2621 == 1)
        {
          if (v597 == 4)
          {
            char v1694 = a17;
            if (a12)
            {
              uint64_t v1695 = a16;
              uint64_t v1696 = a15;
              uint64_t v1697 = a13;
              int v1698 = a11;
              int v1699 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1696, a3, a4 + a9 * v1695, a5, a6, a7, a8, v1699, v1698, v1697, v1694);
                int v1699 = a10;
                int v1698 = a11;
                uint64_t v1697 = a13;
                uint64_t v1696 = a15;
                uint64_t v1695 = a16;
                char v1694 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v598 = a17;
            if (!v597 && a12)
            {
              uint64_t v599 = a16;
              uint64_t v600 = a15;
              uint64_t v601 = a13;
              int v602 = a11;
              int v603 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v600, a3, a4 + a9 * v599, a5, a6, a7, a8, v603, v602, v601, v598);
                int v603 = a10;
                int v602 = a11;
                uint64_t v601 = a13;
                uint64_t v600 = a15;
                uint64_t v599 = a16;
                char v598 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v597 == 4)
        {
          int v2210 = a17;
          if (a12)
          {
            uint64_t v2211 = a16;
            uint64_t v2212 = a15;
            uint64_t v2213 = a13;
            int v2214 = a11;
            int v2215 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2212, a3, a4 + a9 * v2211, a5, a6, a7, a8, v2215, v2214, v2213, v2210);
              int v2215 = a10;
              int v2214 = a11;
              uint64_t v2213 = a13;
              uint64_t v2212 = a15;
              uint64_t v2211 = a16;
              int v2210 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1178 = a17;
          if (!v597 && a12)
          {
            uint64_t v1179 = a16;
            uint64_t v1180 = a15;
            uint64_t v1181 = a13;
            int v1182 = a11;
            int v1183 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1180, a3, a4 + a9 * v1179, a5, a6, a7, a8, v1183, v1182, v1181, v1178);
              int v1183 = a10;
              int v1182 = a11;
              uint64_t v1181 = a13;
              uint64_t v1180 = a15;
              uint64_t v1179 = a16;
              int v1178 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x35:
        uint64_t v2622 = *(unsigned __int8 *)(a1 + 380);
        int v604 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2622 == 1)
        {
          if (v604 == 4)
          {
            char v1700 = a17;
            if (a12)
            {
              uint64_t v1701 = a16;
              uint64_t v1702 = a15;
              uint64_t v1703 = a13;
              int v1704 = a11;
              int v1705 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1702, a3, a4 + a9 * v1701, a5, a6, a7, a8, v1705, v1704, v1703, v1700);
                int v1705 = a10;
                int v1704 = a11;
                uint64_t v1703 = a13;
                uint64_t v1702 = a15;
                uint64_t v1701 = a16;
                char v1700 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v605 = a17;
            if (!v604 && a12)
            {
              uint64_t v606 = a16;
              uint64_t v607 = a15;
              uint64_t v608 = a13;
              int v609 = a11;
              int v610 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v607, a3, a4 + a9 * v606, a5, a6, a7, a8, v610, v609, v608, v605);
                int v610 = a10;
                int v609 = a11;
                uint64_t v608 = a13;
                uint64_t v607 = a15;
                uint64_t v606 = a16;
                char v605 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v604 == 4)
        {
          int v2216 = a17;
          if (a12)
          {
            uint64_t v2217 = a16;
            uint64_t v2218 = a15;
            uint64_t v2219 = a13;
            int v2220 = a11;
            int v2221 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2218, a3, a4 + a9 * v2217, a5, a6, a7, a8, v2221, v2220, v2219, v2216);
              int v2221 = a10;
              int v2220 = a11;
              uint64_t v2219 = a13;
              uint64_t v2218 = a15;
              uint64_t v2217 = a16;
              int v2216 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1184 = a17;
          if (!v604 && a12)
          {
            uint64_t v1185 = a16;
            uint64_t v1186 = a15;
            uint64_t v1187 = a13;
            int v1188 = a11;
            int v1189 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1186, a3, a4 + a9 * v1185, a5, a6, a7, a8, v1189, v1188, v1187, v1184);
              int v1189 = a10;
              int v1188 = a11;
              uint64_t v1187 = a13;
              uint64_t v1186 = a15;
              uint64_t v1185 = a16;
              int v1184 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x36:
        uint64_t v2623 = *(unsigned __int8 *)(a1 + 380);
        int v611 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2623 == 1)
        {
          if (v611 == 4)
          {
            char v1706 = a17;
            if (a12)
            {
              uint64_t v1707 = a16;
              uint64_t v1708 = a15;
              uint64_t v1709 = a13;
              int v1710 = a11;
              int v1711 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1708, a3, a4 + a9 * v1707, a5, a6, a7, a8, v1711, v1710, v1709, v1706);
                int v1711 = a10;
                int v1710 = a11;
                uint64_t v1709 = a13;
                uint64_t v1708 = a15;
                uint64_t v1707 = a16;
                char v1706 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v612 = a17;
            if (!v611 && a12)
            {
              uint64_t v613 = a16;
              uint64_t v614 = a15;
              uint64_t v615 = a13;
              int v616 = a11;
              int v617 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v614, a3, a4 + a9 * v613, a5, a6, a7, a8, v617, v616, v615, v612);
                int v617 = a10;
                int v616 = a11;
                uint64_t v615 = a13;
                uint64_t v614 = a15;
                uint64_t v613 = a16;
                char v612 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v611 == 4)
        {
          int v2222 = a17;
          if (a12)
          {
            uint64_t v2223 = a16;
            uint64_t v2224 = a15;
            uint64_t v2225 = a13;
            int v2226 = a11;
            int v2227 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2224, a3, a4 + a9 * v2223, a5, a6, a7, a8, v2227, v2226, v2225, v2222);
              int v2227 = a10;
              int v2226 = a11;
              uint64_t v2225 = a13;
              uint64_t v2224 = a15;
              uint64_t v2223 = a16;
              int v2222 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1190 = a17;
          if (!v611 && a12)
          {
            uint64_t v1191 = a16;
            uint64_t v1192 = a15;
            uint64_t v1193 = a13;
            int v1194 = a11;
            int v1195 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1192, a3, a4 + a9 * v1191, a5, a6, a7, a8, v1195, v1194, v1193, v1190);
              int v1195 = a10;
              int v1194 = a11;
              uint64_t v1193 = a13;
              uint64_t v1192 = a15;
              uint64_t v1191 = a16;
              int v1190 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x37:
        uint64_t v2624 = *(unsigned __int8 *)(a1 + 380);
        int v618 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2624 == 1)
        {
          if (v618 == 4)
          {
            char v1712 = a17;
            if (a12)
            {
              uint64_t v1713 = a16;
              uint64_t v1714 = a15;
              uint64_t v1715 = a13;
              int v1716 = a11;
              int v1717 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1714, a3, a4 + a9 * v1713, a5, a6, a7, a8, v1717, v1716, v1715, v1712);
                int v1717 = a10;
                int v1716 = a11;
                uint64_t v1715 = a13;
                uint64_t v1714 = a15;
                uint64_t v1713 = a16;
                char v1712 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v619 = a17;
            if (!v618 && a12)
            {
              uint64_t v620 = a16;
              uint64_t v621 = a15;
              uint64_t v622 = a13;
              int v623 = a11;
              int v624 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v621, a3, a4 + a9 * v620, a5, a6, a7, a8, v624, v623, v622, v619);
                int v624 = a10;
                int v623 = a11;
                uint64_t v622 = a13;
                uint64_t v621 = a15;
                uint64_t v620 = a16;
                char v619 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v618 == 4)
        {
          int v2228 = a17;
          if (a12)
          {
            uint64_t v2229 = a16;
            uint64_t v2230 = a15;
            uint64_t v2231 = a13;
            int v2232 = a11;
            int v2233 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2230, a3, a4 + a9 * v2229, a5, a6, a7, a8, v2233, v2232, v2231, v2228);
              int v2233 = a10;
              int v2232 = a11;
              uint64_t v2231 = a13;
              uint64_t v2230 = a15;
              uint64_t v2229 = a16;
              int v2228 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1196 = a17;
          if (!v618 && a12)
          {
            uint64_t v1197 = a16;
            uint64_t v1198 = a15;
            uint64_t v1199 = a13;
            int v1200 = a11;
            int v1201 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1198, a3, a4 + a9 * v1197, a5, a6, a7, a8, v1201, v1200, v1199, v1196);
              int v1201 = a10;
              int v1200 = a11;
              uint64_t v1199 = a13;
              uint64_t v1198 = a15;
              uint64_t v1197 = a16;
              int v1196 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3C:
        uint64_t v2625 = *(unsigned __int8 *)(a1 + 380);
        int v625 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2625 == 1)
        {
          if (v625 == 4)
          {
            char v1718 = a17;
            if (a12)
            {
              uint64_t v1719 = a16;
              uint64_t v1720 = a15;
              uint64_t v1721 = a13;
              int v1722 = a11;
              int v1723 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1720, a3, a4 + a9 * v1719, a5, a6, a7, a8, v1723, v1722, v1721, v1718);
                int v1723 = a10;
                int v1722 = a11;
                uint64_t v1721 = a13;
                uint64_t v1720 = a15;
                uint64_t v1719 = a16;
                char v1718 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v626 = a17;
            if (!v625 && a12)
            {
              uint64_t v627 = a16;
              uint64_t v628 = a15;
              uint64_t v629 = a13;
              int v630 = a11;
              int v631 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v628, a3, a4 + a9 * v627, a5, a6, a7, a8, v631, v630, v629, v626);
                int v631 = a10;
                int v630 = a11;
                uint64_t v629 = a13;
                uint64_t v628 = a15;
                uint64_t v627 = a16;
                char v626 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v625 == 4)
        {
          int v2234 = a17;
          if (a12)
          {
            uint64_t v2235 = a16;
            uint64_t v2236 = a15;
            uint64_t v2237 = a13;
            int v2238 = a11;
            int v2239 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2236, a3, a4 + a9 * v2235, a5, a6, a7, a8, v2239, v2238, v2237, v2234);
              int v2239 = a10;
              int v2238 = a11;
              uint64_t v2237 = a13;
              uint64_t v2236 = a15;
              uint64_t v2235 = a16;
              int v2234 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1202 = a17;
          if (!v625 && a12)
          {
            uint64_t v1203 = a16;
            uint64_t v1204 = a15;
            uint64_t v1205 = a13;
            int v1206 = a11;
            int v1207 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1204, a3, a4 + a9 * v1203, a5, a6, a7, a8, v1207, v1206, v1205, v1202);
              int v1207 = a10;
              int v1206 = a11;
              uint64_t v1205 = a13;
              uint64_t v1204 = a15;
              uint64_t v1203 = a16;
              int v1202 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3E:
        uint64_t v2626 = *(unsigned __int8 *)(a1 + 380);
        int v632 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2626 == 1)
        {
          if (v632 == 4)
          {
            char v1724 = a17;
            if (a12)
            {
              uint64_t v1725 = a16;
              uint64_t v1726 = a15;
              uint64_t v1727 = a13;
              int v1728 = a11;
              int v1729 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1726, a3, a4 + a9 * v1725, a5, a6, a7, a8, v1729, v1728, v1727, v1724);
                int v1729 = a10;
                int v1728 = a11;
                uint64_t v1727 = a13;
                uint64_t v1726 = a15;
                uint64_t v1725 = a16;
                char v1724 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v633 = a17;
            if (!v632 && a12)
            {
              uint64_t v634 = a16;
              uint64_t v635 = a15;
              uint64_t v636 = a13;
              int v637 = a11;
              int v638 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v635, a3, a4 + a9 * v634, a5, a6, a7, a8, v638, v637, v636, v633);
                int v638 = a10;
                int v637 = a11;
                uint64_t v636 = a13;
                uint64_t v635 = a15;
                uint64_t v634 = a16;
                char v633 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v632 == 4)
        {
          int v2240 = a17;
          if (a12)
          {
            uint64_t v2241 = a16;
            uint64_t v2242 = a15;
            uint64_t v2243 = a13;
            int v2244 = a11;
            int v2245 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2242, a3, a4 + a9 * v2241, a5, a6, a7, a8, v2245, v2244, v2243, v2240);
              int v2245 = a10;
              int v2244 = a11;
              uint64_t v2243 = a13;
              uint64_t v2242 = a15;
              uint64_t v2241 = a16;
              int v2240 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1208 = a17;
          if (!v632 && a12)
          {
            uint64_t v1209 = a16;
            uint64_t v1210 = a15;
            uint64_t v1211 = a13;
            int v1212 = a11;
            int v1213 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1210, a3, a4 + a9 * v1209, a5, a6, a7, a8, v1213, v1212, v1211, v1208);
              int v1213 = a10;
              int v1212 = a11;
              uint64_t v1211 = a13;
              uint64_t v1210 = a15;
              uint64_t v1209 = a16;
              int v1208 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x3F:
        uint64_t v2627 = *(unsigned __int8 *)(a1 + 380);
        int v639 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2627 == 1)
        {
          if (v639 == 4)
          {
            char v1730 = a17;
            if (a12)
            {
              uint64_t v1731 = a16;
              uint64_t v1732 = a15;
              uint64_t v1733 = a13;
              int v1734 = a11;
              int v1735 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1732, a3, a4 + a9 * v1731, a5, a6, a7, a8, v1735, v1734, v1733, v1730);
                int v1735 = a10;
                int v1734 = a11;
                uint64_t v1733 = a13;
                uint64_t v1732 = a15;
                uint64_t v1731 = a16;
                char v1730 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v640 = a17;
            if (!v639 && a12)
            {
              uint64_t v641 = a16;
              uint64_t v642 = a15;
              uint64_t v643 = a13;
              int v644 = a11;
              int v645 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v642, a3, a4 + a9 * v641, a5, a6, a7, a8, v645, v644, v643, v640);
                int v645 = a10;
                int v644 = a11;
                uint64_t v643 = a13;
                uint64_t v642 = a15;
                uint64_t v641 = a16;
                char v640 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v639 == 4)
        {
          int v2246 = a17;
          if (a12)
          {
            uint64_t v2247 = a16;
            uint64_t v2248 = a15;
            uint64_t v2249 = a13;
            int v2250 = a11;
            int v2251 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2248, a3, a4 + a9 * v2247, a5, a6, a7, a8, v2251, v2250, v2249, v2246);
              int v2251 = a10;
              int v2250 = a11;
              uint64_t v2249 = a13;
              uint64_t v2248 = a15;
              uint64_t v2247 = a16;
              int v2246 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1214 = a17;
          if (!v639 && a12)
          {
            uint64_t v1215 = a16;
            uint64_t v1216 = a15;
            uint64_t v1217 = a13;
            int v1218 = a11;
            int v1219 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1216, a3, a4 + a9 * v1215, a5, a6, a7, a8, v1219, v1218, v1217, v1214);
              int v1219 = a10;
              int v1218 = a11;
              uint64_t v1217 = a13;
              uint64_t v1216 = a15;
              uint64_t v1215 = a16;
              int v1214 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x40:
        uint64_t v2628 = *(unsigned __int8 *)(a1 + 380);
        int v646 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2628 == 1)
        {
          if (v646 == 4)
          {
            char v1736 = a17;
            if (a12)
            {
              uint64_t v1737 = a16;
              uint64_t v1738 = a15;
              uint64_t v1739 = a13;
              int v1740 = a11;
              int v1741 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1738, a3, a4 + a9 * v1737, a5, a6, a7, a8, v1741, v1740, v1739, v1736);
                int v1741 = a10;
                int v1740 = a11;
                uint64_t v1739 = a13;
                uint64_t v1738 = a15;
                uint64_t v1737 = a16;
                char v1736 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v647 = a17;
            if (!v646 && a12)
            {
              uint64_t v648 = a16;
              uint64_t v649 = a15;
              uint64_t v650 = a13;
              int v651 = a11;
              int v652 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v649, a3, a4 + a9 * v648, a5, a6, a7, a8, v652, v651, v650, v647);
                int v652 = a10;
                int v651 = a11;
                uint64_t v650 = a13;
                uint64_t v649 = a15;
                uint64_t v648 = a16;
                char v647 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v646 == 4)
        {
          int v2252 = a17;
          if (a12)
          {
            uint64_t v2253 = a16;
            uint64_t v2254 = a15;
            uint64_t v2255 = a13;
            int v2256 = a11;
            int v2257 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2254, a3, a4 + a9 * v2253, a5, a6, a7, a8, v2257, v2256, v2255, v2252);
              int v2257 = a10;
              int v2256 = a11;
              uint64_t v2255 = a13;
              uint64_t v2254 = a15;
              uint64_t v2253 = a16;
              int v2252 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1220 = a17;
          if (!v646 && a12)
          {
            uint64_t v1221 = a16;
            uint64_t v1222 = a15;
            uint64_t v1223 = a13;
            int v1224 = a11;
            int v1225 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1222, a3, a4 + a9 * v1221, a5, a6, a7, a8, v1225, v1224, v1223, v1220);
              int v1225 = a10;
              int v1224 = a11;
              uint64_t v1223 = a13;
              uint64_t v1222 = a15;
              uint64_t v1221 = a16;
              int v1220 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x41:
        uint64_t v2629 = *(unsigned __int8 *)(a1 + 380);
        int v653 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2629 == 1)
        {
          if (v653 == 4)
          {
            char v1742 = a17;
            if (a12)
            {
              uint64_t v1743 = a16;
              uint64_t v1744 = a15;
              uint64_t v1745 = a13;
              int v1746 = a11;
              int v1747 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1744, a3, a4 + a9 * v1743, a5, a6, a7, a8, v1747, v1746, v1745, v1742);
                int v1747 = a10;
                int v1746 = a11;
                uint64_t v1745 = a13;
                uint64_t v1744 = a15;
                uint64_t v1743 = a16;
                char v1742 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v654 = a17;
            if (!v653 && a12)
            {
              uint64_t v655 = a16;
              uint64_t v656 = a15;
              uint64_t v657 = a13;
              int v658 = a11;
              int v659 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v656, a3, a4 + a9 * v655, a5, a6, a7, a8, v659, v658, v657, v654);
                int v659 = a10;
                int v658 = a11;
                uint64_t v657 = a13;
                uint64_t v656 = a15;
                uint64_t v655 = a16;
                char v654 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v653 == 4)
        {
          int v2258 = a17;
          if (a12)
          {
            uint64_t v2259 = a16;
            uint64_t v2260 = a15;
            uint64_t v2261 = a13;
            int v2262 = a11;
            int v2263 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2260, a3, a4 + a9 * v2259, a5, a6, a7, a8, v2263, v2262, v2261, v2258);
              int v2263 = a10;
              int v2262 = a11;
              uint64_t v2261 = a13;
              uint64_t v2260 = a15;
              uint64_t v2259 = a16;
              int v2258 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1226 = a17;
          if (!v653 && a12)
          {
            uint64_t v1227 = a16;
            uint64_t v1228 = a15;
            uint64_t v1229 = a13;
            int v1230 = a11;
            int v1231 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1228, a3, a4 + a9 * v1227, a5, a6, a7, a8, v1231, v1230, v1229, v1226);
              int v1231 = a10;
              int v1230 = a11;
              uint64_t v1229 = a13;
              uint64_t v1228 = a15;
              uint64_t v1227 = a16;
              int v1226 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x42:
        uint64_t v2630 = *(unsigned __int8 *)(a1 + 380);
        int v660 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2630 == 1)
        {
          if (v660 == 4)
          {
            char v1748 = a17;
            if (a12)
            {
              uint64_t v1749 = a16;
              uint64_t v1750 = a15;
              uint64_t v1751 = a13;
              int v1752 = a11;
              int v1753 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1750, a3, a4 + a9 * v1749, a5, a6, a7, a8, v1753, v1752, v1751, v1748);
                int v1753 = a10;
                int v1752 = a11;
                uint64_t v1751 = a13;
                uint64_t v1750 = a15;
                uint64_t v1749 = a16;
                char v1748 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v661 = a17;
            if (!v660 && a12)
            {
              uint64_t v662 = a16;
              uint64_t v663 = a15;
              uint64_t v664 = a13;
              int v665 = a11;
              int v666 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v663, a3, a4 + a9 * v662, a5, a6, a7, a8, v666, v665, v664, v661);
                int v666 = a10;
                int v665 = a11;
                uint64_t v664 = a13;
                uint64_t v663 = a15;
                uint64_t v662 = a16;
                char v661 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v660 == 4)
        {
          int v2264 = a17;
          if (a12)
          {
            uint64_t v2265 = a16;
            uint64_t v2266 = a15;
            uint64_t v2267 = a13;
            int v2268 = a11;
            int v2269 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2266, a3, a4 + a9 * v2265, a5, a6, a7, a8, v2269, v2268, v2267, v2264);
              int v2269 = a10;
              int v2268 = a11;
              uint64_t v2267 = a13;
              uint64_t v2266 = a15;
              uint64_t v2265 = a16;
              int v2264 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1232 = a17;
          if (!v660 && a12)
          {
            uint64_t v1233 = a16;
            uint64_t v1234 = a15;
            uint64_t v1235 = a13;
            int v1236 = a11;
            int v1237 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1234, a3, a4 + a9 * v1233, a5, a6, a7, a8, v1237, v1236, v1235, v1232);
              int v1237 = a10;
              int v1236 = a11;
              uint64_t v1235 = a13;
              uint64_t v1234 = a15;
              uint64_t v1233 = a16;
              int v1232 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x46:
        uint64_t v2631 = *(unsigned __int8 *)(a1 + 380);
        int v667 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2631 == 1)
        {
          if (v667 == 4)
          {
            char v1754 = a17;
            if (a12)
            {
              uint64_t v1755 = a16;
              uint64_t v1756 = a15;
              uint64_t v1757 = a13;
              int v1758 = a11;
              int v1759 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1756, a3, a4 + a9 * v1755, a5, a6, a7, a8, v1759, v1758, v1757, v1754);
                int v1759 = a10;
                int v1758 = a11;
                uint64_t v1757 = a13;
                uint64_t v1756 = a15;
                uint64_t v1755 = a16;
                char v1754 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v668 = a17;
            if (!v667 && a12)
            {
              uint64_t v669 = a16;
              uint64_t v670 = a15;
              uint64_t v671 = a13;
              int v672 = a11;
              int v673 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v670, a3, a4 + a9 * v669, a5, a6, a7, a8, v673, v672, v671, v668);
                int v673 = a10;
                int v672 = a11;
                uint64_t v671 = a13;
                uint64_t v670 = a15;
                uint64_t v669 = a16;
                char v668 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v667 == 4)
        {
          int v2270 = a17;
          if (a12)
          {
            uint64_t v2271 = a16;
            uint64_t v2272 = a15;
            uint64_t v2273 = a13;
            int v2274 = a11;
            int v2275 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2272, a3, a4 + a9 * v2271, a5, a6, a7, a8, v2275, v2274, v2273, v2270);
              int v2275 = a10;
              int v2274 = a11;
              uint64_t v2273 = a13;
              uint64_t v2272 = a15;
              uint64_t v2271 = a16;
              int v2270 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1238 = a17;
          if (!v667 && a12)
          {
            uint64_t v1239 = a16;
            uint64_t v1240 = a15;
            uint64_t v1241 = a13;
            int v1242 = a11;
            int v1243 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1240, a3, a4 + a9 * v1239, a5, a6, a7, a8, v1243, v1242, v1241, v1238);
              int v1243 = a10;
              int v1242 = a11;
              uint64_t v1241 = a13;
              uint64_t v1240 = a15;
              uint64_t v1239 = a16;
              int v1238 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x47:
        uint64_t v2632 = *(unsigned __int8 *)(a1 + 380);
        int v674 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2632 == 1)
        {
          if (v674 == 4)
          {
            char v1760 = a17;
            if (a12)
            {
              uint64_t v1761 = a16;
              uint64_t v1762 = a15;
              uint64_t v1763 = a13;
              int v1764 = a11;
              int v1765 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1762, a3, a4 + a9 * v1761, a5, a6, a7, a8, v1765, v1764, v1763, v1760);
                int v1765 = a10;
                int v1764 = a11;
                uint64_t v1763 = a13;
                uint64_t v1762 = a15;
                uint64_t v1761 = a16;
                char v1760 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v675 = a17;
            if (!v674 && a12)
            {
              uint64_t v676 = a16;
              uint64_t v677 = a15;
              uint64_t v678 = a13;
              int v679 = a11;
              int v680 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v677, a3, a4 + a9 * v676, a5, a6, a7, a8, v680, v679, v678, v675);
                int v680 = a10;
                int v679 = a11;
                uint64_t v678 = a13;
                uint64_t v677 = a15;
                uint64_t v676 = a16;
                char v675 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v674 == 4)
        {
          int v2276 = a17;
          if (a12)
          {
            uint64_t v2277 = a16;
            uint64_t v2278 = a15;
            uint64_t v2279 = a13;
            int v2280 = a11;
            int v2281 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2278, a3, a4 + a9 * v2277, a5, a6, a7, a8, v2281, v2280, v2279, v2276);
              int v2281 = a10;
              int v2280 = a11;
              uint64_t v2279 = a13;
              uint64_t v2278 = a15;
              uint64_t v2277 = a16;
              int v2276 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1244 = a17;
          if (!v674 && a12)
          {
            uint64_t v1245 = a16;
            uint64_t v1246 = a15;
            uint64_t v1247 = a13;
            int v1248 = a11;
            int v1249 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1246, a3, a4 + a9 * v1245, a5, a6, a7, a8, v1249, v1248, v1247, v1244);
              int v1249 = a10;
              int v1248 = a11;
              uint64_t v1247 = a13;
              uint64_t v1246 = a15;
              uint64_t v1245 = a16;
              int v1244 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x48:
        uint64_t v2633 = *(unsigned __int8 *)(a1 + 380);
        int v681 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2633 == 1)
        {
          if (v681 == 4)
          {
            char v1766 = a17;
            if (a12)
            {
              uint64_t v1767 = a16;
              uint64_t v1768 = a15;
              uint64_t v1769 = a13;
              int v1770 = a11;
              int v1771 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1768, a3, a4 + a9 * v1767, a5, a6, a7, a8, v1771, v1770, v1769, v1766);
                int v1771 = a10;
                int v1770 = a11;
                uint64_t v1769 = a13;
                uint64_t v1768 = a15;
                uint64_t v1767 = a16;
                char v1766 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v682 = a17;
            if (!v681 && a12)
            {
              uint64_t v683 = a16;
              uint64_t v684 = a15;
              uint64_t v685 = a13;
              int v686 = a11;
              int v687 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v684, a3, a4 + a9 * v683, a5, a6, a7, a8, v687, v686, v685, v682);
                int v687 = a10;
                int v686 = a11;
                uint64_t v685 = a13;
                uint64_t v684 = a15;
                uint64_t v683 = a16;
                char v682 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v681 == 4)
        {
          int v2282 = a17;
          if (a12)
          {
            uint64_t v2283 = a16;
            uint64_t v2284 = a15;
            uint64_t v2285 = a13;
            int v2286 = a11;
            int v2287 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2284, a3, a4 + a9 * v2283, a5, a6, a7, a8, v2287, v2286, v2285, v2282);
              int v2287 = a10;
              int v2286 = a11;
              uint64_t v2285 = a13;
              uint64_t v2284 = a15;
              uint64_t v2283 = a16;
              int v2282 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1250 = a17;
          if (!v681 && a12)
          {
            uint64_t v1251 = a16;
            uint64_t v1252 = a15;
            uint64_t v1253 = a13;
            int v1254 = a11;
            int v1255 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1252, a3, a4 + a9 * v1251, a5, a6, a7, a8, v1255, v1254, v1253, v1250);
              int v1255 = a10;
              int v1254 = a11;
              uint64_t v1253 = a13;
              uint64_t v1252 = a15;
              uint64_t v1251 = a16;
              int v1250 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x49:
        uint64_t v2634 = *(unsigned __int8 *)(a1 + 380);
        int v688 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2634 == 1)
        {
          if (v688 == 4)
          {
            char v1772 = a17;
            if (a12)
            {
              uint64_t v1773 = a16;
              uint64_t v1774 = a15;
              uint64_t v1775 = a13;
              int v1776 = a11;
              int v1777 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1774, a3, a4 + a9 * v1773, a5, a6, a7, a8, v1777, v1776, v1775, v1772);
                int v1777 = a10;
                int v1776 = a11;
                uint64_t v1775 = a13;
                uint64_t v1774 = a15;
                uint64_t v1773 = a16;
                char v1772 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v689 = a17;
            if (!v688 && a12)
            {
              uint64_t v690 = a16;
              uint64_t v691 = a15;
              uint64_t v692 = a13;
              int v693 = a11;
              int v694 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v691, a3, a4 + a9 * v690, a5, a6, a7, a8, v694, v693, v692, v689);
                int v694 = a10;
                int v693 = a11;
                uint64_t v692 = a13;
                uint64_t v691 = a15;
                uint64_t v690 = a16;
                char v689 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v688 == 4)
        {
          int v2288 = a17;
          if (a12)
          {
            uint64_t v2289 = a16;
            uint64_t v2290 = a15;
            uint64_t v2291 = a13;
            int v2292 = a11;
            int v2293 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2290, a3, a4 + a9 * v2289, a5, a6, a7, a8, v2293, v2292, v2291, v2288);
              int v2293 = a10;
              int v2292 = a11;
              uint64_t v2291 = a13;
              uint64_t v2290 = a15;
              uint64_t v2289 = a16;
              int v2288 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1256 = a17;
          if (!v688 && a12)
          {
            uint64_t v1257 = a16;
            uint64_t v1258 = a15;
            uint64_t v1259 = a13;
            int v1260 = a11;
            int v1261 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1258, a3, a4 + a9 * v1257, a5, a6, a7, a8, v1261, v1260, v1259, v1256);
              int v1261 = a10;
              int v1260 = a11;
              uint64_t v1259 = a13;
              uint64_t v1258 = a15;
              uint64_t v1257 = a16;
              int v1256 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x4A:
        uint64_t v2635 = *(unsigned __int8 *)(a1 + 380);
        int v695 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2635 == 1)
        {
          if (v695 == 4)
          {
            char v1778 = a17;
            if (a12)
            {
              uint64_t v1779 = a16;
              uint64_t v1780 = a15;
              uint64_t v1781 = a13;
              int v1782 = a11;
              int v1783 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1780, a3, a4 + a9 * v1779, a5, a6, a7, a8, v1783, v1782, v1781, v1778);
                int v1783 = a10;
                int v1782 = a11;
                uint64_t v1781 = a13;
                uint64_t v1780 = a15;
                uint64_t v1779 = a16;
                char v1778 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v696 = a17;
            if (!v695 && a12)
            {
              uint64_t v697 = a16;
              uint64_t v698 = a15;
              uint64_t v699 = a13;
              int v700 = a11;
              int v701 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v698, a3, a4 + a9 * v697, a5, a6, a7, a8, v701, v700, v699, v696);
                int v701 = a10;
                int v700 = a11;
                uint64_t v699 = a13;
                uint64_t v698 = a15;
                uint64_t v697 = a16;
                char v696 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v695 == 4)
        {
          int v2294 = a17;
          if (a12)
          {
            uint64_t v2295 = a16;
            uint64_t v2296 = a15;
            uint64_t v2297 = a13;
            int v2298 = a11;
            int v2299 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2296, a3, a4 + a9 * v2295, a5, a6, a7, a8, v2299, v2298, v2297, v2294);
              int v2299 = a10;
              int v2298 = a11;
              uint64_t v2297 = a13;
              uint64_t v2296 = a15;
              uint64_t v2295 = a16;
              int v2294 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1262 = a17;
          if (!v695 && a12)
          {
            uint64_t v1263 = a16;
            uint64_t v1264 = a15;
            uint64_t v1265 = a13;
            int v1266 = a11;
            int v1267 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1264, a3, a4 + a9 * v1263, a5, a6, a7, a8, v1267, v1266, v1265, v1262);
              int v1267 = a10;
              int v1266 = a11;
              uint64_t v1265 = a13;
              uint64_t v1264 = a15;
              uint64_t v1263 = a16;
              int v1262 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x50:
        uint64_t v2636 = *(unsigned __int8 *)(a1 + 380);
        int v702 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2636 == 1)
        {
          if (v702 == 4)
          {
            char v1784 = a17;
            if (a12)
            {
              uint64_t v1785 = a16;
              uint64_t v1786 = a15;
              uint64_t v1787 = a13;
              int v1788 = a11;
              int v1789 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1786, a3, a4 + a9 * v1785, a5, a6, a7, a8, v1789, v1788, v1787, v1784);
                int v1789 = a10;
                int v1788 = a11;
                uint64_t v1787 = a13;
                uint64_t v1786 = a15;
                uint64_t v1785 = a16;
                char v1784 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v703 = a17;
            if (!v702 && a12)
            {
              uint64_t v704 = a16;
              uint64_t v705 = a15;
              uint64_t v706 = a13;
              int v707 = a11;
              int v708 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v705, a3, a4 + a9 * v704, a5, a6, a7, a8, v708, v707, v706, v703);
                int v708 = a10;
                int v707 = a11;
                uint64_t v706 = a13;
                uint64_t v705 = a15;
                uint64_t v704 = a16;
                char v703 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v702 == 4)
        {
          int v2300 = a17;
          if (a12)
          {
            uint64_t v2301 = a16;
            uint64_t v2302 = a15;
            uint64_t v2303 = a13;
            int v2304 = a11;
            int v2305 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2302, a3, a4 + a9 * v2301, a5, a6, a7, a8, v2305, v2304, v2303, v2300);
              int v2305 = a10;
              int v2304 = a11;
              uint64_t v2303 = a13;
              uint64_t v2302 = a15;
              uint64_t v2301 = a16;
              int v2300 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1268 = a17;
          if (!v702 && a12)
          {
            uint64_t v1269 = a16;
            uint64_t v1270 = a15;
            uint64_t v1271 = a13;
            int v1272 = a11;
            int v1273 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1270, a3, a4 + a9 * v1269, a5, a6, a7, a8, v1273, v1272, v1271, v1268);
              int v1273 = a10;
              int v1272 = a11;
              uint64_t v1271 = a13;
              uint64_t v1270 = a15;
              uint64_t v1269 = a16;
              int v1268 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x51:
        uint64_t v2637 = *(unsigned __int8 *)(a1 + 380);
        int v709 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2637 == 1)
        {
          if (v709 == 4)
          {
            char v1790 = a17;
            if (a12)
            {
              uint64_t v1791 = a16;
              uint64_t v1792 = a15;
              uint64_t v1793 = a13;
              int v1794 = a11;
              int v1795 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1792, a3, a4 + a9 * v1791, a5, a6, a7, a8, v1795, v1794, v1793, v1790);
                int v1795 = a10;
                int v1794 = a11;
                uint64_t v1793 = a13;
                uint64_t v1792 = a15;
                uint64_t v1791 = a16;
                char v1790 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v710 = a17;
            if (!v709 && a12)
            {
              uint64_t v711 = a16;
              uint64_t v712 = a15;
              uint64_t v713 = a13;
              int v714 = a11;
              int v715 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v712, a3, a4 + a9 * v711, a5, a6, a7, a8, v715, v714, v713, v710);
                int v715 = a10;
                int v714 = a11;
                uint64_t v713 = a13;
                uint64_t v712 = a15;
                uint64_t v711 = a16;
                char v710 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v709 == 4)
        {
          int v2306 = a17;
          if (a12)
          {
            uint64_t v2307 = a16;
            uint64_t v2308 = a15;
            uint64_t v2309 = a13;
            int v2310 = a11;
            int v2311 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2308, a3, a4 + a9 * v2307, a5, a6, a7, a8, v2311, v2310, v2309, v2306);
              int v2311 = a10;
              int v2310 = a11;
              uint64_t v2309 = a13;
              uint64_t v2308 = a15;
              uint64_t v2307 = a16;
              int v2306 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1274 = a17;
          if (!v709 && a12)
          {
            uint64_t v1275 = a16;
            uint64_t v1276 = a15;
            uint64_t v1277 = a13;
            int v1278 = a11;
            int v1279 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1276, a3, a4 + a9 * v1275, a5, a6, a7, a8, v1279, v1278, v1277, v1274);
              int v1279 = a10;
              int v1278 = a11;
              uint64_t v1277 = a13;
              uint64_t v1276 = a15;
              uint64_t v1275 = a16;
              int v1274 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x54:
        uint64_t v2638 = *(unsigned __int8 *)(a1 + 380);
        int v716 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2638 == 1)
        {
          if (v716 == 4)
          {
            char v1796 = a17;
            if (a12)
            {
              uint64_t v1797 = a16;
              uint64_t v1798 = a15;
              uint64_t v1799 = a13;
              int v1800 = a11;
              int v1801 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1798, a3, a4 + a9 * v1797, a5, a6, a7, a8, v1801, v1800, v1799, v1796);
                int v1801 = a10;
                int v1800 = a11;
                uint64_t v1799 = a13;
                uint64_t v1798 = a15;
                uint64_t v1797 = a16;
                char v1796 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v717 = a17;
            if (!v716 && a12)
            {
              uint64_t v718 = a16;
              uint64_t v719 = a15;
              uint64_t v720 = a13;
              int v721 = a11;
              int v722 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v719, a3, a4 + a9 * v718, a5, a6, a7, a8, v722, v721, v720, v717);
                int v722 = a10;
                int v721 = a11;
                uint64_t v720 = a13;
                uint64_t v719 = a15;
                uint64_t v718 = a16;
                char v717 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v716 == 4)
        {
          int v2312 = a17;
          if (a12)
          {
            uint64_t v2313 = a16;
            uint64_t v2314 = a15;
            uint64_t v2315 = a13;
            int v2316 = a11;
            int v2317 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2314, a3, a4 + a9 * v2313, a5, a6, a7, a8, v2317, v2316, v2315, v2312);
              int v2317 = a10;
              int v2316 = a11;
              uint64_t v2315 = a13;
              uint64_t v2314 = a15;
              uint64_t v2313 = a16;
              int v2312 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1280 = a17;
          if (!v716 && a12)
          {
            uint64_t v1281 = a16;
            uint64_t v1282 = a15;
            uint64_t v1283 = a13;
            int v1284 = a11;
            int v1285 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1282, a3, a4 + a9 * v1281, a5, a6, a7, a8, v1285, v1284, v1283, v1280);
              int v1285 = a10;
              int v1284 = a11;
              uint64_t v1283 = a13;
              uint64_t v1282 = a15;
              uint64_t v1281 = a16;
              int v1280 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x55:
        uint64_t v2639 = *(unsigned __int8 *)(a1 + 380);
        int v723 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2639 == 1)
        {
          if (v723 == 4)
          {
            char v1802 = a17;
            if (a12)
            {
              uint64_t v1803 = a16;
              uint64_t v1804 = a15;
              uint64_t v1805 = a13;
              int v1806 = a11;
              int v1807 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1804, a3, a4 + a9 * v1803, a5, a6, a7, a8, v1807, v1806, v1805, v1802);
                int v1807 = a10;
                int v1806 = a11;
                uint64_t v1805 = a13;
                uint64_t v1804 = a15;
                uint64_t v1803 = a16;
                char v1802 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v724 = a17;
            if (!v723 && a12)
            {
              uint64_t v725 = a16;
              uint64_t v726 = a15;
              uint64_t v727 = a13;
              int v728 = a11;
              int v729 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v726, a3, a4 + a9 * v725, a5, a6, a7, a8, v729, v728, v727, v724);
                int v729 = a10;
                int v728 = a11;
                uint64_t v727 = a13;
                uint64_t v726 = a15;
                uint64_t v725 = a16;
                char v724 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v723 == 4)
        {
          int v2318 = a17;
          if (a12)
          {
            uint64_t v2319 = a16;
            uint64_t v2320 = a15;
            uint64_t v2321 = a13;
            int v2322 = a11;
            int v2323 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2320, a3, a4 + a9 * v2319, a5, a6, a7, a8, v2323, v2322, v2321, v2318);
              int v2323 = a10;
              int v2322 = a11;
              uint64_t v2321 = a13;
              uint64_t v2320 = a15;
              uint64_t v2319 = a16;
              int v2318 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1286 = a17;
          if (!v723 && a12)
          {
            uint64_t v1287 = a16;
            uint64_t v1288 = a15;
            uint64_t v1289 = a13;
            int v1290 = a11;
            int v1291 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1288, a3, a4 + a9 * v1287, a5, a6, a7, a8, v1291, v1290, v1289, v1286);
              int v1291 = a10;
              int v1290 = a11;
              uint64_t v1289 = a13;
              uint64_t v1288 = a15;
              uint64_t v1287 = a16;
              int v1286 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5A:
        uint64_t v2640 = *(unsigned __int8 *)(a1 + 380);
        int v730 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2640 == 1)
        {
          if (v730 == 4)
          {
            char v1808 = a17;
            if (a12)
            {
              uint64_t v1809 = a16;
              uint64_t v1810 = a15;
              uint64_t v1811 = a13;
              int v1812 = a11;
              int v1813 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1810, a3, a4 + a9 * v1809, a5, a6, a7, a8, v1813, v1812, v1811, v1808);
                int v1813 = a10;
                int v1812 = a11;
                uint64_t v1811 = a13;
                uint64_t v1810 = a15;
                uint64_t v1809 = a16;
                char v1808 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v731 = a17;
            if (!v730 && a12)
            {
              uint64_t v732 = a16;
              uint64_t v733 = a15;
              uint64_t v734 = a13;
              int v735 = a11;
              int v736 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v733, a3, a4 + a9 * v732, a5, a6, a7, a8, v736, v735, v734, v731);
                int v736 = a10;
                int v735 = a11;
                uint64_t v734 = a13;
                uint64_t v733 = a15;
                uint64_t v732 = a16;
                char v731 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v730 == 4)
        {
          int v2324 = a17;
          if (a12)
          {
            uint64_t v2325 = a16;
            uint64_t v2326 = a15;
            uint64_t v2327 = a13;
            int v2328 = a11;
            int v2329 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2326, a3, a4 + a9 * v2325, a5, a6, a7, a8, v2329, v2328, v2327, v2324);
              int v2329 = a10;
              int v2328 = a11;
              uint64_t v2327 = a13;
              uint64_t v2326 = a15;
              uint64_t v2325 = a16;
              int v2324 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1292 = a17;
          if (!v730 && a12)
          {
            uint64_t v1293 = a16;
            uint64_t v1294 = a15;
            uint64_t v1295 = a13;
            int v1296 = a11;
            int v1297 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1294, a3, a4 + a9 * v1293, a5, a6, a7, a8, v1297, v1296, v1295, v1292);
              int v1297 = a10;
              int v1296 = a11;
              uint64_t v1295 = a13;
              uint64_t v1294 = a15;
              uint64_t v1293 = a16;
              int v1292 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5B:
        uint64_t v2641 = *(unsigned __int8 *)(a1 + 380);
        int v737 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2641 == 1)
        {
          if (v737 == 4)
          {
            char v1814 = a17;
            if (a12)
            {
              uint64_t v1815 = a16;
              uint64_t v1816 = a15;
              uint64_t v1817 = a13;
              int v1818 = a11;
              int v1819 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1816, a3, a4 + a9 * v1815, a5, a6, a7, a8, v1819, v1818, v1817, v1814);
                int v1819 = a10;
                int v1818 = a11;
                uint64_t v1817 = a13;
                uint64_t v1816 = a15;
                uint64_t v1815 = a16;
                char v1814 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v738 = a17;
            if (!v737 && a12)
            {
              uint64_t v739 = a16;
              uint64_t v740 = a15;
              uint64_t v741 = a13;
              int v742 = a11;
              int v743 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v740, a3, a4 + a9 * v739, a5, a6, a7, a8, v743, v742, v741, v738);
                int v743 = a10;
                int v742 = a11;
                uint64_t v741 = a13;
                uint64_t v740 = a15;
                uint64_t v739 = a16;
                char v738 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v737 == 4)
        {
          int v2330 = a17;
          if (a12)
          {
            uint64_t v2331 = a16;
            uint64_t v2332 = a15;
            uint64_t v2333 = a13;
            int v2334 = a11;
            int v2335 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2332, a3, a4 + a9 * v2331, a5, a6, a7, a8, v2335, v2334, v2333, v2330);
              int v2335 = a10;
              int v2334 = a11;
              uint64_t v2333 = a13;
              uint64_t v2332 = a15;
              uint64_t v2331 = a16;
              int v2330 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1298 = a17;
          if (!v737 && a12)
          {
            uint64_t v1299 = a16;
            uint64_t v1300 = a15;
            uint64_t v1301 = a13;
            int v1302 = a11;
            int v1303 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1300, a3, a4 + a9 * v1299, a5, a6, a7, a8, v1303, v1302, v1301, v1298);
              int v1303 = a10;
              int v1302 = a11;
              uint64_t v1301 = a13;
              uint64_t v1300 = a15;
              uint64_t v1299 = a16;
              int v1298 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5C:
        uint64_t v2642 = *(unsigned __int8 *)(a1 + 380);
        int v744 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2642 == 1)
        {
          if (v744 == 4)
          {
            char v1820 = a17;
            if (a12)
            {
              uint64_t v1821 = a16;
              uint64_t v1822 = a15;
              uint64_t v1823 = a13;
              int v1824 = a11;
              int v1825 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1822, a3, a4 + a9 * v1821, a5, a6, a7, a8, v1825, v1824, v1823, v1820);
                int v1825 = a10;
                int v1824 = a11;
                uint64_t v1823 = a13;
                uint64_t v1822 = a15;
                uint64_t v1821 = a16;
                char v1820 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v745 = a17;
            if (!v744 && a12)
            {
              uint64_t v746 = a16;
              uint64_t v747 = a15;
              uint64_t v748 = a13;
              int v749 = a11;
              int v750 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v747, a3, a4 + a9 * v746, a5, a6, a7, a8, v750, v749, v748, v745);
                int v750 = a10;
                int v749 = a11;
                uint64_t v748 = a13;
                uint64_t v747 = a15;
                uint64_t v746 = a16;
                char v745 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v744 == 4)
        {
          int v2336 = a17;
          if (a12)
          {
            uint64_t v2337 = a16;
            uint64_t v2338 = a15;
            uint64_t v2339 = a13;
            int v2340 = a11;
            int v2341 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2338, a3, a4 + a9 * v2337, a5, a6, a7, a8, v2341, v2340, v2339, v2336);
              int v2341 = a10;
              int v2340 = a11;
              uint64_t v2339 = a13;
              uint64_t v2338 = a15;
              uint64_t v2337 = a16;
              int v2336 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1304 = a17;
          if (!v744 && a12)
          {
            uint64_t v1305 = a16;
            uint64_t v1306 = a15;
            uint64_t v1307 = a13;
            int v1308 = a11;
            int v1309 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1306, a3, a4 + a9 * v1305, a5, a6, a7, a8, v1309, v1308, v1307, v1304);
              int v1309 = a10;
              int v1308 = a11;
              uint64_t v1307 = a13;
              uint64_t v1306 = a15;
              uint64_t v1305 = a16;
              int v1304 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5D:
        uint64_t v2643 = *(unsigned __int8 *)(a1 + 380);
        int v751 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2643 == 1)
        {
          if (v751 == 4)
          {
            char v1826 = a17;
            if (a12)
            {
              uint64_t v1827 = a16;
              uint64_t v1828 = a15;
              uint64_t v1829 = a13;
              int v1830 = a11;
              int v1831 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1828, a3, a4 + a9 * v1827, a5, a6, a7, a8, v1831, v1830, v1829, v1826);
                int v1831 = a10;
                int v1830 = a11;
                uint64_t v1829 = a13;
                uint64_t v1828 = a15;
                uint64_t v1827 = a16;
                char v1826 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v752 = a17;
            if (!v751 && a12)
            {
              uint64_t v753 = a16;
              uint64_t v754 = a15;
              uint64_t v755 = a13;
              int v756 = a11;
              int v757 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v754, a3, a4 + a9 * v753, a5, a6, a7, a8, v757, v756, v755, v752);
                int v757 = a10;
                int v756 = a11;
                uint64_t v755 = a13;
                uint64_t v754 = a15;
                uint64_t v753 = a16;
                char v752 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v751 == 4)
        {
          int v2342 = a17;
          if (a12)
          {
            uint64_t v2343 = a16;
            uint64_t v2344 = a15;
            uint64_t v2345 = a13;
            int v2346 = a11;
            int v2347 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2344, a3, a4 + a9 * v2343, a5, a6, a7, a8, v2347, v2346, v2345, v2342);
              int v2347 = a10;
              int v2346 = a11;
              uint64_t v2345 = a13;
              uint64_t v2344 = a15;
              uint64_t v2343 = a16;
              int v2342 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1310 = a17;
          if (!v751 && a12)
          {
            uint64_t v1311 = a16;
            uint64_t v1312 = a15;
            uint64_t v1313 = a13;
            int v1314 = a11;
            int v1315 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1312, a3, a4 + a9 * v1311, a5, a6, a7, a8, v1315, v1314, v1313, v1310);
              int v1315 = a10;
              int v1314 = a11;
              uint64_t v1313 = a13;
              uint64_t v1312 = a15;
              uint64_t v1311 = a16;
              int v1310 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x5E:
        uint64_t v2644 = *(unsigned __int8 *)(a1 + 380);
        int v758 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2644 == 1)
        {
          if (v758 == 4)
          {
            char v1832 = a17;
            if (a12)
            {
              uint64_t v1833 = a16;
              uint64_t v1834 = a15;
              uint64_t v1835 = a13;
              int v1836 = a11;
              int v1837 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1834, a3, a4 + a9 * v1833, a5, a6, a7, a8, v1837, v1836, v1835, v1832);
                int v1837 = a10;
                int v1836 = a11;
                uint64_t v1835 = a13;
                uint64_t v1834 = a15;
                uint64_t v1833 = a16;
                char v1832 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v759 = a17;
            if (!v758 && a12)
            {
              uint64_t v760 = a16;
              uint64_t v761 = a15;
              uint64_t v762 = a13;
              int v763 = a11;
              int v764 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v761, a3, a4 + a9 * v760, a5, a6, a7, a8, v764, v763, v762, v759);
                int v764 = a10;
                int v763 = a11;
                uint64_t v762 = a13;
                uint64_t v761 = a15;
                uint64_t v760 = a16;
                char v759 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v758 == 4)
        {
          int v2348 = a17;
          if (a12)
          {
            uint64_t v2349 = a16;
            uint64_t v2350 = a15;
            uint64_t v2351 = a13;
            int v2352 = a11;
            int v2353 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2350, a3, a4 + a9 * v2349, a5, a6, a7, a8, v2353, v2352, v2351, v2348);
              int v2353 = a10;
              int v2352 = a11;
              uint64_t v2351 = a13;
              uint64_t v2350 = a15;
              uint64_t v2349 = a16;
              int v2348 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1316 = a17;
          if (!v758 && a12)
          {
            uint64_t v1317 = a16;
            uint64_t v1318 = a15;
            uint64_t v1319 = a13;
            int v1320 = a11;
            int v1321 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1318, a3, a4 + a9 * v1317, a5, a6, a7, a8, v1321, v1320, v1319, v1316);
              int v1321 = a10;
              int v1320 = a11;
              uint64_t v1319 = a13;
              uint64_t v1318 = a15;
              uint64_t v1317 = a16;
              int v1316 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x67:
        uint64_t v2645 = *(unsigned __int8 *)(a1 + 380);
        int v765 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2645 == 1)
        {
          if (v765 == 4)
          {
            char v1838 = a17;
            if (a12)
            {
              uint64_t v1839 = a16;
              uint64_t v1840 = a15;
              uint64_t v1841 = a13;
              int v1842 = a11;
              int v1843 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1840, a3, a4 + a9 * v1839, a5, a6, a7, a8, v1843, v1842, v1841, v1838);
                int v1843 = a10;
                int v1842 = a11;
                uint64_t v1841 = a13;
                uint64_t v1840 = a15;
                uint64_t v1839 = a16;
                char v1838 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v766 = a17;
            if (!v765 && a12)
            {
              uint64_t v767 = a16;
              uint64_t v768 = a15;
              uint64_t v769 = a13;
              int v770 = a11;
              int v771 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v768, a3, a4 + a9 * v767, a5, a6, a7, a8, v771, v770, v769, v766);
                int v771 = a10;
                int v770 = a11;
                uint64_t v769 = a13;
                uint64_t v768 = a15;
                uint64_t v767 = a16;
                char v766 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v765 == 4)
        {
          int v2354 = a17;
          if (a12)
          {
            uint64_t v2355 = a16;
            uint64_t v2356 = a15;
            uint64_t v2357 = a13;
            int v2358 = a11;
            int v2359 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2356, a3, a4 + a9 * v2355, a5, a6, a7, a8, v2359, v2358, v2357, v2354);
              int v2359 = a10;
              int v2358 = a11;
              uint64_t v2357 = a13;
              uint64_t v2356 = a15;
              uint64_t v2355 = a16;
              int v2354 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1322 = a17;
          if (!v765 && a12)
          {
            uint64_t v1323 = a16;
            uint64_t v1324 = a15;
            uint64_t v1325 = a13;
            int v1326 = a11;
            int v1327 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1324, a3, a4 + a9 * v1323, a5, a6, a7, a8, v1327, v1326, v1325, v1322);
              int v1327 = a10;
              int v1326 = a11;
              uint64_t v1325 = a13;
              uint64_t v1324 = a15;
              uint64_t v1323 = a16;
              int v1322 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x68:
        uint64_t v2646 = *(unsigned __int8 *)(a1 + 380);
        int v772 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2646 == 1)
        {
          if (v772 == 4)
          {
            char v1844 = a17;
            if (a12)
            {
              uint64_t v1845 = a16;
              uint64_t v1846 = a15;
              uint64_t v1847 = a13;
              int v1848 = a11;
              int v1849 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1846, a3, a4 + a9 * v1845, a5, a6, a7, a8, v1849, v1848, v1847, v1844);
                int v1849 = a10;
                int v1848 = a11;
                uint64_t v1847 = a13;
                uint64_t v1846 = a15;
                uint64_t v1845 = a16;
                char v1844 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v773 = a17;
            if (!v772 && a12)
            {
              uint64_t v774 = a16;
              uint64_t v775 = a15;
              uint64_t v776 = a13;
              int v777 = a11;
              int v778 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v775, a3, a4 + a9 * v774, a5, a6, a7, a8, v778, v777, v776, v773);
                int v778 = a10;
                int v777 = a11;
                uint64_t v776 = a13;
                uint64_t v775 = a15;
                uint64_t v774 = a16;
                char v773 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v772 == 4)
        {
          int v2360 = a17;
          if (a12)
          {
            uint64_t v2361 = a16;
            uint64_t v2362 = a15;
            uint64_t v2363 = a13;
            int v2364 = a11;
            int v2365 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2362, a3, a4 + a9 * v2361, a5, a6, a7, a8, v2365, v2364, v2363, v2360);
              int v2365 = a10;
              int v2364 = a11;
              uint64_t v2363 = a13;
              uint64_t v2362 = a15;
              uint64_t v2361 = a16;
              int v2360 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1328 = a17;
          if (!v772 && a12)
          {
            uint64_t v1329 = a16;
            uint64_t v1330 = a15;
            uint64_t v1331 = a13;
            int v1332 = a11;
            int v1333 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1330, a3, a4 + a9 * v1329, a5, a6, a7, a8, v1333, v1332, v1331, v1328);
              int v1333 = a10;
              int v1332 = a11;
              uint64_t v1331 = a13;
              uint64_t v1330 = a15;
              uint64_t v1329 = a16;
              int v1328 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x69:
        uint64_t v2647 = *(unsigned __int8 *)(a1 + 380);
        int v779 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2647 == 1)
        {
          if (v779 == 4)
          {
            char v1850 = a17;
            if (a12)
            {
              uint64_t v1851 = a16;
              uint64_t v1852 = a15;
              uint64_t v1853 = a13;
              int v1854 = a11;
              int v1855 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1852, a3, a4 + a9 * v1851, a5, a6, a7, a8, v1855, v1854, v1853, v1850);
                int v1855 = a10;
                int v1854 = a11;
                uint64_t v1853 = a13;
                uint64_t v1852 = a15;
                uint64_t v1851 = a16;
                char v1850 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v780 = a17;
            if (!v779 && a12)
            {
              uint64_t v781 = a16;
              uint64_t v782 = a15;
              uint64_t v783 = a13;
              int v784 = a11;
              int v785 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v782, a3, a4 + a9 * v781, a5, a6, a7, a8, v785, v784, v783, v780);
                int v785 = a10;
                int v784 = a11;
                uint64_t v783 = a13;
                uint64_t v782 = a15;
                uint64_t v781 = a16;
                char v780 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v779 == 4)
        {
          int v2366 = a17;
          if (a12)
          {
            uint64_t v2367 = a16;
            uint64_t v2368 = a15;
            uint64_t v2369 = a13;
            int v2370 = a11;
            int v2371 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2368, a3, a4 + a9 * v2367, a5, a6, a7, a8, v2371, v2370, v2369, v2366);
              int v2371 = a10;
              int v2370 = a11;
              uint64_t v2369 = a13;
              uint64_t v2368 = a15;
              uint64_t v2367 = a16;
              int v2366 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1334 = a17;
          if (!v779 && a12)
          {
            uint64_t v1335 = a16;
            uint64_t v1336 = a15;
            uint64_t v1337 = a13;
            int v1338 = a11;
            int v1339 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1336, a3, a4 + a9 * v1335, a5, a6, a7, a8, v1339, v1338, v1337, v1334);
              int v1339 = a10;
              int v1338 = a11;
              uint64_t v1337 = a13;
              uint64_t v1336 = a15;
              uint64_t v1335 = a16;
              int v1334 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x6E:
        uint64_t v2648 = *(unsigned __int8 *)(a1 + 380);
        int v786 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2648 == 1)
        {
          if (v786 == 4)
          {
            char v1856 = a17;
            if (a12)
            {
              uint64_t v1857 = a16;
              uint64_t v1858 = a15;
              uint64_t v1859 = a13;
              int v1860 = a11;
              int v1861 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1858, a3, a4 + a9 * v1857, a5, a6, a7, a8, v1861, v1860, v1859, v1856);
                int v1861 = a10;
                int v1860 = a11;
                uint64_t v1859 = a13;
                uint64_t v1858 = a15;
                uint64_t v1857 = a16;
                char v1856 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v787 = a17;
            if (!v786 && a12)
            {
              uint64_t v788 = a16;
              uint64_t v789 = a15;
              uint64_t v790 = a13;
              int v791 = a11;
              int v792 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v789, a3, a4 + a9 * v788, a5, a6, a7, a8, v792, v791, v790, v787);
                int v792 = a10;
                int v791 = a11;
                uint64_t v790 = a13;
                uint64_t v789 = a15;
                uint64_t v788 = a16;
                char v787 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v786 == 4)
        {
          int v2372 = a17;
          if (a12)
          {
            uint64_t v2373 = a16;
            uint64_t v2374 = a15;
            uint64_t v2375 = a13;
            int v2376 = a11;
            int v2377 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2374, a3, a4 + a9 * v2373, a5, a6, a7, a8, v2377, v2376, v2375, v2372);
              int v2377 = a10;
              int v2376 = a11;
              uint64_t v2375 = a13;
              uint64_t v2374 = a15;
              uint64_t v2373 = a16;
              int v2372 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1340 = a17;
          if (!v786 && a12)
          {
            uint64_t v1341 = a16;
            uint64_t v1342 = a15;
            uint64_t v1343 = a13;
            int v1344 = a11;
            int v1345 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1342, a3, a4 + a9 * v1341, a5, a6, a7, a8, v1345, v1344, v1343, v1340);
              int v1345 = a10;
              int v1344 = a11;
              uint64_t v1343 = a13;
              uint64_t v1342 = a15;
              uint64_t v1341 = a16;
              int v1340 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x70:
        uint64_t v2649 = *(unsigned __int8 *)(a1 + 380);
        int v793 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2649 == 1)
        {
          if (v793 == 4)
          {
            char v1862 = a17;
            if (a12)
            {
              uint64_t v1863 = a16;
              uint64_t v1864 = a15;
              uint64_t v1865 = a13;
              int v1866 = a11;
              int v1867 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1864, a3, a4 + a9 * v1863, a5, a6, a7, a8, v1867, v1866, v1865, v1862);
                int v1867 = a10;
                int v1866 = a11;
                uint64_t v1865 = a13;
                uint64_t v1864 = a15;
                uint64_t v1863 = a16;
                char v1862 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v794 = a17;
            if (!v793 && a12)
            {
              uint64_t v795 = a16;
              uint64_t v796 = a15;
              uint64_t v797 = a13;
              int v798 = a11;
              int v799 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v796, a3, a4 + a9 * v795, a5, a6, a7, a8, v799, v798, v797, v794);
                int v799 = a10;
                int v798 = a11;
                uint64_t v797 = a13;
                uint64_t v796 = a15;
                uint64_t v795 = a16;
                char v794 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v793 == 4)
        {
          int v2378 = a17;
          if (a12)
          {
            uint64_t v2379 = a16;
            uint64_t v2380 = a15;
            uint64_t v2381 = a13;
            int v2382 = a11;
            int v2383 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2380, a3, a4 + a9 * v2379, a5, a6, a7, a8, v2383, v2382, v2381, v2378);
              int v2383 = a10;
              int v2382 = a11;
              uint64_t v2381 = a13;
              uint64_t v2380 = a15;
              uint64_t v2379 = a16;
              int v2378 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1346 = a17;
          if (!v793 && a12)
          {
            uint64_t v1347 = a16;
            uint64_t v1348 = a15;
            uint64_t v1349 = a13;
            int v1350 = a11;
            int v1351 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1348, a3, a4 + a9 * v1347, a5, a6, a7, a8, v1351, v1350, v1349, v1346);
              int v1351 = a10;
              int v1350 = a11;
              uint64_t v1349 = a13;
              uint64_t v1348 = a15;
              uint64_t v1347 = a16;
              int v1346 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x71:
        uint64_t v2650 = *(unsigned __int8 *)(a1 + 380);
        int v800 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2650 == 1)
        {
          if (v800 == 4)
          {
            char v1868 = a17;
            if (a12)
            {
              uint64_t v1869 = a16;
              uint64_t v1870 = a15;
              uint64_t v1871 = a13;
              int v1872 = a11;
              int v1873 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1870, a3, a4 + a9 * v1869, a5, a6, a7, a8, v1873, v1872, v1871, v1868);
                int v1873 = a10;
                int v1872 = a11;
                uint64_t v1871 = a13;
                uint64_t v1870 = a15;
                uint64_t v1869 = a16;
                char v1868 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v801 = a17;
            if (!v800 && a12)
            {
              uint64_t v802 = a16;
              uint64_t v803 = a15;
              uint64_t v804 = a13;
              int v805 = a11;
              int v806 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v803, a3, a4 + a9 * v802, a5, a6, a7, a8, v806, v805, v804, v801);
                int v806 = a10;
                int v805 = a11;
                uint64_t v804 = a13;
                uint64_t v803 = a15;
                uint64_t v802 = a16;
                char v801 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v800 == 4)
        {
          int v2384 = a17;
          if (a12)
          {
            uint64_t v2385 = a16;
            uint64_t v2386 = a15;
            uint64_t v2387 = a13;
            int v2388 = a11;
            int v2389 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2386, a3, a4 + a9 * v2385, a5, a6, a7, a8, v2389, v2388, v2387, v2384);
              int v2389 = a10;
              int v2388 = a11;
              uint64_t v2387 = a13;
              uint64_t v2386 = a15;
              uint64_t v2385 = a16;
              int v2384 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1352 = a17;
          if (!v800 && a12)
          {
            uint64_t v1353 = a16;
            uint64_t v1354 = a15;
            uint64_t v1355 = a13;
            int v1356 = a11;
            int v1357 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1354, a3, a4 + a9 * v1353, a5, a6, a7, a8, v1357, v1356, v1355, v1352);
              int v1357 = a10;
              int v1356 = a11;
              uint64_t v1355 = a13;
              uint64_t v1354 = a15;
              uint64_t v1353 = a16;
              int v1352 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x72:
        uint64_t v2651 = *(unsigned __int8 *)(a1 + 380);
        int v807 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2651 == 1)
        {
          if (v807 == 4)
          {
            char v1874 = a17;
            if (a12)
            {
              uint64_t v1875 = a16;
              uint64_t v1876 = a15;
              uint64_t v1877 = a13;
              int v1878 = a11;
              int v1879 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1876, a3, a4 + a9 * v1875, a5, a6, a7, a8, v1879, v1878, v1877, v1874);
                int v1879 = a10;
                int v1878 = a11;
                uint64_t v1877 = a13;
                uint64_t v1876 = a15;
                uint64_t v1875 = a16;
                char v1874 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v808 = a17;
            if (!v807 && a12)
            {
              uint64_t v809 = a16;
              uint64_t v810 = a15;
              uint64_t v811 = a13;
              int v812 = a11;
              int v813 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v810, a3, a4 + a9 * v809, a5, a6, a7, a8, v813, v812, v811, v808);
                int v813 = a10;
                int v812 = a11;
                uint64_t v811 = a13;
                uint64_t v810 = a15;
                uint64_t v809 = a16;
                char v808 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v807 == 4)
        {
          int v2390 = a17;
          if (a12)
          {
            uint64_t v2391 = a16;
            uint64_t v2392 = a15;
            uint64_t v2393 = a13;
            int v2394 = a11;
            int v2395 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2392, a3, a4 + a9 * v2391, a5, a6, a7, a8, v2395, v2394, v2393, v2390);
              int v2395 = a10;
              int v2394 = a11;
              uint64_t v2393 = a13;
              uint64_t v2392 = a15;
              uint64_t v2391 = a16;
              int v2390 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1358 = a17;
          if (!v807 && a12)
          {
            uint64_t v1359 = a16;
            uint64_t v1360 = a15;
            uint64_t v1361 = a13;
            int v1362 = a11;
            int v1363 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1360, a3, a4 + a9 * v1359, a5, a6, a7, a8, v1363, v1362, v1361, v1358);
              int v1363 = a10;
              int v1362 = a11;
              uint64_t v1361 = a13;
              uint64_t v1360 = a15;
              uint64_t v1359 = a16;
              int v1358 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x73:
        uint64_t v2652 = *(unsigned __int8 *)(a1 + 380);
        int v814 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2652 == 1)
        {
          if (v814 == 4)
          {
            char v1880 = a17;
            if (a12)
            {
              uint64_t v1881 = a16;
              uint64_t v1882 = a15;
              uint64_t v1883 = a13;
              int v1884 = a11;
              int v1885 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1882, a3, a4 + a9 * v1881, a5, a6, a7, a8, v1885, v1884, v1883, v1880);
                int v1885 = a10;
                int v1884 = a11;
                uint64_t v1883 = a13;
                uint64_t v1882 = a15;
                uint64_t v1881 = a16;
                char v1880 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v815 = a17;
            if (!v814 && a12)
            {
              uint64_t v816 = a16;
              uint64_t v817 = a15;
              uint64_t v818 = a13;
              int v819 = a11;
              int v820 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v817, a3, a4 + a9 * v816, a5, a6, a7, a8, v820, v819, v818, v815);
                int v820 = a10;
                int v819 = a11;
                uint64_t v818 = a13;
                uint64_t v817 = a15;
                uint64_t v816 = a16;
                char v815 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v814 == 4)
        {
          int v2396 = a17;
          if (a12)
          {
            uint64_t v2397 = a16;
            uint64_t v2398 = a15;
            uint64_t v2399 = a13;
            int v2400 = a11;
            int v2401 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2398, a3, a4 + a9 * v2397, a5, a6, a7, a8, v2401, v2400, v2399, v2396);
              int v2401 = a10;
              int v2400 = a11;
              uint64_t v2399 = a13;
              uint64_t v2398 = a15;
              uint64_t v2397 = a16;
              int v2396 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1364 = a17;
          if (!v814 && a12)
          {
            uint64_t v1365 = a16;
            uint64_t v1366 = a15;
            uint64_t v1367 = a13;
            int v1368 = a11;
            int v1369 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1366, a3, a4 + a9 * v1365, a5, a6, a7, a8, v1369, v1368, v1367, v1364);
              int v1369 = a10;
              int v1368 = a11;
              uint64_t v1367 = a13;
              uint64_t v1366 = a15;
              uint64_t v1365 = a16;
              int v1364 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x74:
        uint64_t v2653 = *(unsigned __int8 *)(a1 + 380);
        int v821 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2653 == 1)
        {
          if (v821 == 4)
          {
            char v1886 = a17;
            if (a12)
            {
              uint64_t v1887 = a16;
              uint64_t v1888 = a15;
              uint64_t v1889 = a13;
              int v1890 = a11;
              int v1891 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1888, a3, a4 + a9 * v1887, a5, a6, a7, a8, v1891, v1890, v1889, v1886);
                int v1891 = a10;
                int v1890 = a11;
                uint64_t v1889 = a13;
                uint64_t v1888 = a15;
                uint64_t v1887 = a16;
                char v1886 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v822 = a17;
            if (!v821 && a12)
            {
              uint64_t v823 = a16;
              uint64_t v824 = a15;
              uint64_t v825 = a13;
              int v826 = a11;
              int v827 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v824, a3, a4 + a9 * v823, a5, a6, a7, a8, v827, v826, v825, v822);
                int v827 = a10;
                int v826 = a11;
                uint64_t v825 = a13;
                uint64_t v824 = a15;
                uint64_t v823 = a16;
                char v822 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v821 == 4)
        {
          int v2402 = a17;
          if (a12)
          {
            uint64_t v2403 = a16;
            uint64_t v2404 = a15;
            uint64_t v2405 = a13;
            int v2406 = a11;
            int v2407 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2404, a3, a4 + a9 * v2403, a5, a6, a7, a8, v2407, v2406, v2405, v2402);
              int v2407 = a10;
              int v2406 = a11;
              uint64_t v2405 = a13;
              uint64_t v2404 = a15;
              uint64_t v2403 = a16;
              int v2402 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1370 = a17;
          if (!v821 && a12)
          {
            uint64_t v1371 = a16;
            uint64_t v1372 = a15;
            uint64_t v1373 = a13;
            int v1374 = a11;
            int v1375 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1372, a3, a4 + a9 * v1371, a5, a6, a7, a8, v1375, v1374, v1373, v1370);
              int v1375 = a10;
              int v1374 = a11;
              uint64_t v1373 = a13;
              uint64_t v1372 = a15;
              uint64_t v1371 = a16;
              int v1370 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7B:
        uint64_t v2654 = *(unsigned __int8 *)(a1 + 380);
        int v828 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2654 == 1)
        {
          if (v828 == 4)
          {
            char v1892 = a17;
            if (a12)
            {
              uint64_t v1893 = a16;
              uint64_t v1894 = a15;
              uint64_t v1895 = a13;
              int v1896 = a11;
              int v1897 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1894, a3, a4 + a9 * v1893, a5, a6, a7, a8, v1897, v1896, v1895, v1892);
                int v1897 = a10;
                int v1896 = a11;
                uint64_t v1895 = a13;
                uint64_t v1894 = a15;
                uint64_t v1893 = a16;
                char v1892 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v829 = a17;
            if (!v828 && a12)
            {
              uint64_t v830 = a16;
              uint64_t v831 = a15;
              uint64_t v832 = a13;
              int v833 = a11;
              int v834 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v831, a3, a4 + a9 * v830, a5, a6, a7, a8, v834, v833, v832, v829);
                int v834 = a10;
                int v833 = a11;
                uint64_t v832 = a13;
                uint64_t v831 = a15;
                uint64_t v830 = a16;
                char v829 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v828 == 4)
        {
          int v2408 = a17;
          if (a12)
          {
            uint64_t v2409 = a16;
            uint64_t v2410 = a15;
            uint64_t v2411 = a13;
            int v2412 = a11;
            int v2413 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2410, a3, a4 + a9 * v2409, a5, a6, a7, a8, v2413, v2412, v2411, v2408);
              int v2413 = a10;
              int v2412 = a11;
              uint64_t v2411 = a13;
              uint64_t v2410 = a15;
              uint64_t v2409 = a16;
              int v2408 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1376 = a17;
          if (!v828 && a12)
          {
            uint64_t v1377 = a16;
            uint64_t v1378 = a15;
            uint64_t v1379 = a13;
            int v1380 = a11;
            int v1381 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1378, a3, a4 + a9 * v1377, a5, a6, a7, a8, v1381, v1380, v1379, v1376);
              int v1381 = a10;
              int v1380 = a11;
              uint64_t v1379 = a13;
              uint64_t v1378 = a15;
              uint64_t v1377 = a16;
              int v1376 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7C:
        uint64_t v2655 = *(unsigned __int8 *)(a1 + 380);
        int v835 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2655 == 1)
        {
          if (v835 == 4)
          {
            char v1898 = a17;
            if (a12)
            {
              uint64_t v1899 = a16;
              uint64_t v1900 = a15;
              uint64_t v1901 = a13;
              int v1902 = a11;
              int v1903 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1900, a3, a4 + a9 * v1899, a5, a6, a7, a8, v1903, v1902, v1901, v1898);
                int v1903 = a10;
                int v1902 = a11;
                uint64_t v1901 = a13;
                uint64_t v1900 = a15;
                uint64_t v1899 = a16;
                char v1898 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v836 = a17;
            if (!v835 && a12)
            {
              uint64_t v837 = a16;
              uint64_t v838 = a15;
              uint64_t v839 = a13;
              int v840 = a11;
              int v841 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v838, a3, a4 + a9 * v837, a5, a6, a7, a8, v841, v840, v839, v836);
                int v841 = a10;
                int v840 = a11;
                uint64_t v839 = a13;
                uint64_t v838 = a15;
                uint64_t v837 = a16;
                char v836 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v835 == 4)
        {
          int v2414 = a17;
          if (a12)
          {
            uint64_t v2415 = a16;
            uint64_t v2416 = a15;
            uint64_t v2417 = a13;
            int v2418 = a11;
            int v2419 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2416, a3, a4 + a9 * v2415, a5, a6, a7, a8, v2419, v2418, v2417, v2414);
              int v2419 = a10;
              int v2418 = a11;
              uint64_t v2417 = a13;
              uint64_t v2416 = a15;
              uint64_t v2415 = a16;
              int v2414 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1382 = a17;
          if (!v835 && a12)
          {
            uint64_t v1383 = a16;
            uint64_t v1384 = a15;
            uint64_t v1385 = a13;
            int v1386 = a11;
            int v1387 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1384, a3, a4 + a9 * v1383, a5, a6, a7, a8, v1387, v1386, v1385, v1382);
              int v1387 = a10;
              int v1386 = a11;
              uint64_t v1385 = a13;
              uint64_t v1384 = a15;
              uint64_t v1383 = a16;
              int v1382 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x7D:
        uint64_t v2656 = *(unsigned __int8 *)(a1 + 380);
        int v842 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2656 == 1)
        {
          if (v842 == 4)
          {
            char v1904 = a17;
            if (a12)
            {
              uint64_t v1905 = a16;
              uint64_t v1906 = a15;
              uint64_t v1907 = a13;
              int v1908 = a11;
              int v1909 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1906, a3, a4 + a9 * v1905, a5, a6, a7, a8, v1909, v1908, v1907, v1904);
                int v1909 = a10;
                int v1908 = a11;
                uint64_t v1907 = a13;
                uint64_t v1906 = a15;
                uint64_t v1905 = a16;
                char v1904 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v843 = a17;
            if (!v842 && a12)
            {
              uint64_t v844 = a16;
              uint64_t v845 = a15;
              uint64_t v846 = a13;
              int v847 = a11;
              int v848 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v845, a3, a4 + a9 * v844, a5, a6, a7, a8, v848, v847, v846, v843);
                int v848 = a10;
                int v847 = a11;
                uint64_t v846 = a13;
                uint64_t v845 = a15;
                uint64_t v844 = a16;
                char v843 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v842 == 4)
        {
          int v2420 = a17;
          if (a12)
          {
            uint64_t v2421 = a16;
            uint64_t v2422 = a15;
            uint64_t v2423 = a13;
            int v2424 = a11;
            int v2425 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2422, a3, a4 + a9 * v2421, a5, a6, a7, a8, v2425, v2424, v2423, v2420);
              int v2425 = a10;
              int v2424 = a11;
              uint64_t v2423 = a13;
              uint64_t v2422 = a15;
              uint64_t v2421 = a16;
              int v2420 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1388 = a17;
          if (!v842 && a12)
          {
            uint64_t v1389 = a16;
            uint64_t v1390 = a15;
            uint64_t v1391 = a13;
            int v1392 = a11;
            int v1393 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1390, a3, a4 + a9 * v1389, a5, a6, a7, a8, v1393, v1392, v1391, v1388);
              int v1393 = a10;
              int v1392 = a11;
              uint64_t v1391 = a13;
              uint64_t v1390 = a15;
              uint64_t v1389 = a16;
              int v1388 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFA:
        uint64_t v2657 = *(unsigned __int8 *)(a1 + 380);
        int v849 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2657 == 1)
        {
          if (v849 == 4)
          {
            char v1910 = a17;
            if (a12)
            {
              uint64_t v1911 = a16;
              uint64_t v1912 = a15;
              uint64_t v1913 = a13;
              int v1914 = a11;
              int v1915 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1912, a3, a4 + a9 * v1911, a5, a6, a7, a8, v1915, v1914, v1913, v1910);
                int v1915 = a10;
                int v1914 = a11;
                uint64_t v1913 = a13;
                uint64_t v1912 = a15;
                uint64_t v1911 = a16;
                char v1910 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v850 = a17;
            if (!v849 && a12)
            {
              uint64_t v851 = a16;
              uint64_t v852 = a15;
              uint64_t v853 = a13;
              int v854 = a11;
              int v855 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v852, a3, a4 + a9 * v851, a5, a6, a7, a8, v855, v854, v853, v850);
                int v855 = a10;
                int v854 = a11;
                uint64_t v853 = a13;
                uint64_t v852 = a15;
                uint64_t v851 = a16;
                char v850 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v849 == 4)
        {
          int v2426 = a17;
          if (a12)
          {
            uint64_t v2427 = a16;
            uint64_t v2428 = a15;
            uint64_t v2429 = a13;
            int v2430 = a11;
            int v2431 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2428, a3, a4 + a9 * v2427, a5, a6, a7, a8, v2431, v2430, v2429, v2426);
              int v2431 = a10;
              int v2430 = a11;
              uint64_t v2429 = a13;
              uint64_t v2428 = a15;
              uint64_t v2427 = a16;
              int v2426 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1394 = a17;
          if (!v849 && a12)
          {
            uint64_t v1395 = a16;
            uint64_t v1396 = a15;
            uint64_t v1397 = a13;
            int v1398 = a11;
            int v1399 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1396, a3, a4 + a9 * v1395, a5, a6, a7, a8, v1399, v1398, v1397, v1394);
              int v1399 = a10;
              int v1398 = a11;
              uint64_t v1397 = a13;
              uint64_t v1396 = a15;
              uint64_t v1395 = a16;
              int v1394 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFC:
        uint64_t v2658 = *(unsigned __int8 *)(a1 + 380);
        int v856 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2658 == 1)
        {
          if (v856 == 4)
          {
            char v1916 = a17;
            if (a12)
            {
              uint64_t v1917 = a16;
              uint64_t v1918 = a15;
              uint64_t v1919 = a13;
              int v1920 = a11;
              int v1921 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1918, a3, a4 + a9 * v1917, a5, a6, a7, a8, v1921, v1920, v1919, v1916);
                int v1921 = a10;
                int v1920 = a11;
                uint64_t v1919 = a13;
                uint64_t v1918 = a15;
                uint64_t v1917 = a16;
                char v1916 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v857 = a17;
            if (!v856 && a12)
            {
              uint64_t v858 = a16;
              uint64_t v859 = a15;
              uint64_t v860 = a13;
              int v861 = a11;
              int v862 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v859, a3, a4 + a9 * v858, a5, a6, a7, a8, v862, v861, v860, v857);
                int v862 = a10;
                int v861 = a11;
                uint64_t v860 = a13;
                uint64_t v859 = a15;
                uint64_t v858 = a16;
                char v857 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v856 == 4)
        {
          int v2432 = a17;
          if (a12)
          {
            uint64_t v2433 = a16;
            uint64_t v2434 = a15;
            uint64_t v2435 = a13;
            int v2436 = a11;
            int v2437 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2434, a3, a4 + a9 * v2433, a5, a6, a7, a8, v2437, v2436, v2435, v2432);
              int v2437 = a10;
              int v2436 = a11;
              uint64_t v2435 = a13;
              uint64_t v2434 = a15;
              uint64_t v2433 = a16;
              int v2432 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1400 = a17;
          if (!v856 && a12)
          {
            uint64_t v1401 = a16;
            uint64_t v1402 = a15;
            uint64_t v1403 = a13;
            int v1404 = a11;
            int v1405 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1402, a3, a4 + a9 * v1401, a5, a6, a7, a8, v1405, v1404, v1403, v1400);
              int v1405 = a10;
              int v1404 = a11;
              uint64_t v1403 = a13;
              uint64_t v1402 = a15;
              uint64_t v1401 = a16;
              int v1400 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0xFD:
        uint64_t v2659 = *(unsigned __int8 *)(a1 + 380);
        int v863 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2659 == 1)
        {
          if (v863 == 4)
          {
            char v1922 = a17;
            if (a12)
            {
              uint64_t v1923 = a16;
              uint64_t v1924 = a15;
              uint64_t v1925 = a13;
              int v1926 = a11;
              int v1927 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1924, a3, a4 + a9 * v1923, a5, a6, a7, a8, v1927, v1926, v1925, v1922);
                int v1927 = a10;
                int v1926 = a11;
                uint64_t v1925 = a13;
                uint64_t v1924 = a15;
                uint64_t v1923 = a16;
                char v1922 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v864 = a17;
            if (!v863 && a12)
            {
              uint64_t v865 = a16;
              uint64_t v866 = a15;
              uint64_t v867 = a13;
              int v868 = a11;
              int v869 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v866, a3, a4 + a9 * v865, a5, a6, a7, a8, v869, v868, v867, v864);
                int v869 = a10;
                int v868 = a11;
                uint64_t v867 = a13;
                uint64_t v866 = a15;
                uint64_t v865 = a16;
                char v864 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v863 == 4)
        {
          int v2438 = a17;
          if (a12)
          {
            uint64_t v2439 = a16;
            uint64_t v2440 = a15;
            uint64_t v2441 = a13;
            int v2442 = a11;
            int v2443 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2440, a3, a4 + a9 * v2439, a5, a6, a7, a8, v2443, v2442, v2441, v2438);
              int v2443 = a10;
              int v2442 = a11;
              uint64_t v2441 = a13;
              uint64_t v2440 = a15;
              uint64_t v2439 = a16;
              int v2438 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1406 = a17;
          if (!v863 && a12)
          {
            uint64_t v1407 = a16;
            uint64_t v1408 = a15;
            uint64_t v1409 = a13;
            int v1410 = a11;
            int v1411 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1408, a3, a4 + a9 * v1407, a5, a6, a7, a8, v1411, v1410, v1409, v1406);
              int v1411 = a10;
              int v1410 = a11;
              uint64_t v1409 = a13;
              uint64_t v1408 = a15;
              uint64_t v1407 = a16;
              int v1406 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x105:
        uint64_t v2660 = *(unsigned __int8 *)(a1 + 380);
        int v870 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2660 == 1)
        {
          if (v870 == 4)
          {
            char v1928 = a17;
            if (a12)
            {
              uint64_t v1929 = a16;
              uint64_t v1930 = a15;
              uint64_t v1931 = a13;
              int v1932 = a11;
              int v1933 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1930, a3, a4 + a9 * v1929, a5, a6, a7, a8, v1933, v1932, v1931, v1928);
                int v1933 = a10;
                int v1932 = a11;
                uint64_t v1931 = a13;
                uint64_t v1930 = a15;
                uint64_t v1929 = a16;
                char v1928 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v871 = a17;
            if (!v870 && a12)
            {
              uint64_t v872 = a16;
              uint64_t v873 = a15;
              uint64_t v874 = a13;
              int v875 = a11;
              int v876 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v873, a3, a4 + a9 * v872, a5, a6, a7, a8, v876, v875, v874, v871);
                int v876 = a10;
                int v875 = a11;
                uint64_t v874 = a13;
                uint64_t v873 = a15;
                uint64_t v872 = a16;
                char v871 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v870 == 4)
        {
          int v2444 = a17;
          if (a12)
          {
            uint64_t v2445 = a16;
            uint64_t v2446 = a15;
            uint64_t v2447 = a13;
            int v2448 = a11;
            int v2449 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2446, a3, a4 + a9 * v2445, a5, a6, a7, a8, v2449, v2448, v2447, v2444);
              int v2449 = a10;
              int v2448 = a11;
              uint64_t v2447 = a13;
              uint64_t v2446 = a15;
              uint64_t v2445 = a16;
              int v2444 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1412 = a17;
          if (!v870 && a12)
          {
            uint64_t v1413 = a16;
            uint64_t v1414 = a15;
            uint64_t v1415 = a13;
            int v1416 = a11;
            int v1417 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1414, a3, a4 + a9 * v1413, a5, a6, a7, a8, v1417, v1416, v1415, v1412);
              int v1417 = a10;
              int v1416 = a11;
              uint64_t v1415 = a13;
              uint64_t v1414 = a15;
              uint64_t v1413 = a16;
              int v1412 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12C:
        uint64_t v2661 = *(unsigned __int8 *)(a1 + 380);
        int v877 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2661 == 1)
        {
          if (v877 == 4)
          {
            char v1934 = a17;
            if (a12)
            {
              uint64_t v1935 = a16;
              uint64_t v1936 = a15;
              uint64_t v1937 = a13;
              int v1938 = a11;
              int v1939 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1936, a3, a4 + a9 * v1935, a5, a6, a7, a8, v1939, v1938, v1937, v1934);
                int v1939 = a10;
                int v1938 = a11;
                uint64_t v1937 = a13;
                uint64_t v1936 = a15;
                uint64_t v1935 = a16;
                char v1934 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v878 = a17;
            if (!v877 && a12)
            {
              uint64_t v879 = a16;
              uint64_t v880 = a15;
              uint64_t v881 = a13;
              int v882 = a11;
              int v883 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v880, a3, a4 + a9 * v879, a5, a6, a7, a8, v883, v882, v881, v878);
                int v883 = a10;
                int v882 = a11;
                uint64_t v881 = a13;
                uint64_t v880 = a15;
                uint64_t v879 = a16;
                char v878 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v877 == 4)
        {
          int v2450 = a17;
          if (a12)
          {
            uint64_t v2451 = a16;
            uint64_t v2452 = a15;
            uint64_t v2453 = a13;
            int v2454 = a11;
            int v2455 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2452, a3, a4 + a9 * v2451, a5, a6, a7, a8, v2455, v2454, v2453, v2450);
              int v2455 = a10;
              int v2454 = a11;
              uint64_t v2453 = a13;
              uint64_t v2452 = a15;
              uint64_t v2451 = a16;
              int v2450 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1418 = a17;
          if (!v877 && a12)
          {
            uint64_t v1419 = a16;
            uint64_t v1420 = a15;
            uint64_t v1421 = a13;
            int v1422 = a11;
            int v1423 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1420, a3, a4 + a9 * v1419, a5, a6, a7, a8, v1423, v1422, v1421, v1418);
              int v1423 = a10;
              int v1422 = a11;
              uint64_t v1421 = a13;
              uint64_t v1420 = a15;
              uint64_t v1419 = a16;
              int v1418 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12D:
        uint64_t v2662 = *(unsigned __int8 *)(a1 + 380);
        int v884 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2662 == 1)
        {
          if (v884 == 4)
          {
            char v1940 = a17;
            if (a12)
            {
              uint64_t v1941 = a16;
              uint64_t v1942 = a15;
              uint64_t v1943 = a13;
              int v1944 = a11;
              int v1945 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1942, a3, a4 + a9 * v1941, a5, a6, a7, a8, v1945, v1944, v1943, v1940);
                int v1945 = a10;
                int v1944 = a11;
                uint64_t v1943 = a13;
                uint64_t v1942 = a15;
                uint64_t v1941 = a16;
                char v1940 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v885 = a17;
            if (!v884 && a12)
            {
              uint64_t v886 = a16;
              uint64_t v887 = a15;
              uint64_t v888 = a13;
              int v889 = a11;
              int v890 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v887, a3, a4 + a9 * v886, a5, a6, a7, a8, v890, v889, v888, v885);
                int v890 = a10;
                int v889 = a11;
                uint64_t v888 = a13;
                uint64_t v887 = a15;
                uint64_t v886 = a16;
                char v885 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v884 == 4)
        {
          int v2456 = a17;
          if (a12)
          {
            uint64_t v2457 = a16;
            uint64_t v2458 = a15;
            uint64_t v2459 = a13;
            int v2460 = a11;
            int v2461 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2458, a3, a4 + a9 * v2457, a5, a6, a7, a8, v2461, v2460, v2459, v2456);
              int v2461 = a10;
              int v2460 = a11;
              uint64_t v2459 = a13;
              uint64_t v2458 = a15;
              uint64_t v2457 = a16;
              int v2456 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1424 = a17;
          if (!v884 && a12)
          {
            uint64_t v1425 = a16;
            uint64_t v1426 = a15;
            uint64_t v1427 = a13;
            int v1428 = a11;
            int v1429 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1426, a3, a4 + a9 * v1425, a5, a6, a7, a8, v1429, v1428, v1427, v1424);
              int v1429 = a10;
              int v1428 = a11;
              uint64_t v1427 = a13;
              uint64_t v1426 = a15;
              uint64_t v1425 = a16;
              int v1424 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12E:
        uint64_t v2663 = *(unsigned __int8 *)(a1 + 380);
        int v891 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2663 == 1)
        {
          if (v891 == 4)
          {
            char v1946 = a17;
            if (a12)
            {
              uint64_t v1947 = a16;
              uint64_t v1948 = a15;
              uint64_t v1949 = a13;
              int v1950 = a11;
              int v1951 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1948, a3, a4 + a9 * v1947, a5, a6, a7, a8, v1951, v1950, v1949, v1946);
                int v1951 = a10;
                int v1950 = a11;
                uint64_t v1949 = a13;
                uint64_t v1948 = a15;
                uint64_t v1947 = a16;
                char v1946 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v892 = a17;
            if (!v891 && a12)
            {
              uint64_t v893 = a16;
              uint64_t v894 = a15;
              uint64_t v895 = a13;
              int v896 = a11;
              int v897 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v894, a3, a4 + a9 * v893, a5, a6, a7, a8, v897, v896, v895, v892);
                int v897 = a10;
                int v896 = a11;
                uint64_t v895 = a13;
                uint64_t v894 = a15;
                uint64_t v893 = a16;
                char v892 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v891 == 4)
        {
          int v2462 = a17;
          if (a12)
          {
            uint64_t v2463 = a16;
            uint64_t v2464 = a15;
            uint64_t v2465 = a13;
            int v2466 = a11;
            int v2467 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2464, a3, a4 + a9 * v2463, a5, a6, a7, a8, v2467, v2466, v2465, v2462);
              int v2467 = a10;
              int v2466 = a11;
              uint64_t v2465 = a13;
              uint64_t v2464 = a15;
              uint64_t v2463 = a16;
              int v2462 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1430 = a17;
          if (!v891 && a12)
          {
            uint64_t v1431 = a16;
            uint64_t v1432 = a15;
            uint64_t v1433 = a13;
            int v1434 = a11;
            int v1435 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1432, a3, a4 + a9 * v1431, a5, a6, a7, a8, v1435, v1434, v1433, v1430);
              int v1435 = a10;
              int v1434 = a11;
              uint64_t v1433 = a13;
              uint64_t v1432 = a15;
              uint64_t v1431 = a16;
              int v1430 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x12F:
        uint64_t v2664 = *(unsigned __int8 *)(a1 + 380);
        int v898 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2664 == 1)
        {
          if (v898 == 4)
          {
            char v1952 = a17;
            if (a12)
            {
              uint64_t v1953 = a16;
              uint64_t v1954 = a15;
              uint64_t v1955 = a13;
              int v1956 = a11;
              int v1957 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1954, a3, a4 + a9 * v1953, a5, a6, a7, a8, v1957, v1956, v1955, v1952);
                int v1957 = a10;
                int v1956 = a11;
                uint64_t v1955 = a13;
                uint64_t v1954 = a15;
                uint64_t v1953 = a16;
                char v1952 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v899 = a17;
            if (!v898 && a12)
            {
              uint64_t v900 = a16;
              uint64_t v901 = a15;
              uint64_t v902 = a13;
              int v903 = a11;
              int v904 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v901, a3, a4 + a9 * v900, a5, a6, a7, a8, v904, v903, v902, v899);
                int v904 = a10;
                int v903 = a11;
                uint64_t v902 = a13;
                uint64_t v901 = a15;
                uint64_t v900 = a16;
                char v899 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v898 == 4)
        {
          int v2468 = a17;
          if (a12)
          {
            uint64_t v2469 = a16;
            uint64_t v2470 = a15;
            uint64_t v2471 = a13;
            int v2472 = a11;
            int v2473 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2470, a3, a4 + a9 * v2469, a5, a6, a7, a8, v2473, v2472, v2471, v2468);
              int v2473 = a10;
              int v2472 = a11;
              uint64_t v2471 = a13;
              uint64_t v2470 = a15;
              uint64_t v2469 = a16;
              int v2468 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1436 = a17;
          if (!v898 && a12)
          {
            uint64_t v1437 = a16;
            uint64_t v1438 = a15;
            uint64_t v1439 = a13;
            int v1440 = a11;
            int v1441 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1438, a3, a4 + a9 * v1437, a5, a6, a7, a8, v1441, v1440, v1439, v1436);
              int v1441 = a10;
              int v1440 = a11;
              uint64_t v1439 = a13;
              uint64_t v1438 = a15;
              uint64_t v1437 = a16;
              int v1436 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x130:
        uint64_t v2665 = *(unsigned __int8 *)(a1 + 380);
        int v905 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2665 == 1)
        {
          if (v905 == 4)
          {
            char v1958 = a17;
            if (a12)
            {
              uint64_t v1959 = a16;
              uint64_t v1960 = a15;
              uint64_t v1961 = a13;
              int v1962 = a11;
              int v1963 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1960, a3, a4 + a9 * v1959, a5, a6, a7, a8, v1963, v1962, v1961, v1958);
                int v1963 = a10;
                int v1962 = a11;
                uint64_t v1961 = a13;
                uint64_t v1960 = a15;
                uint64_t v1959 = a16;
                char v1958 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v906 = a17;
            if (!v905 && a12)
            {
              uint64_t v907 = a16;
              uint64_t v908 = a15;
              uint64_t v909 = a13;
              int v910 = a11;
              int v911 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v908, a3, a4 + a9 * v907, a5, a6, a7, a8, v911, v910, v909, v906);
                int v911 = a10;
                int v910 = a11;
                uint64_t v909 = a13;
                uint64_t v908 = a15;
                uint64_t v907 = a16;
                char v906 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v905 == 4)
        {
          int v2474 = a17;
          if (a12)
          {
            uint64_t v2475 = a16;
            uint64_t v2476 = a15;
            uint64_t v2477 = a13;
            int v2478 = a11;
            int v2479 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2476, a3, a4 + a9 * v2475, a5, a6, a7, a8, v2479, v2478, v2477, v2474);
              int v2479 = a10;
              int v2478 = a11;
              uint64_t v2477 = a13;
              uint64_t v2476 = a15;
              uint64_t v2475 = a16;
              int v2474 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1442 = a17;
          if (!v905 && a12)
          {
            uint64_t v1443 = a16;
            uint64_t v1444 = a15;
            uint64_t v1445 = a13;
            int v1446 = a11;
            int v1447 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1444, a3, a4 + a9 * v1443, a5, a6, a7, a8, v1447, v1446, v1445, v1442);
              int v1447 = a10;
              int v1446 = a11;
              uint64_t v1445 = a13;
              uint64_t v1444 = a15;
              uint64_t v1443 = a16;
              int v1442 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x139:
        uint64_t v2666 = *(unsigned __int8 *)(a1 + 380);
        int v912 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2666 == 1)
        {
          if (v912 == 4)
          {
            char v1964 = a17;
            if (a12)
            {
              uint64_t v1965 = a16;
              uint64_t v1966 = a15;
              uint64_t v1967 = a13;
              int v1968 = a11;
              int v1969 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1966, a3, a4 + a9 * v1965, a5, a6, a7, a8, v1969, v1968, v1967, v1964);
                int v1969 = a10;
                int v1968 = a11;
                uint64_t v1967 = a13;
                uint64_t v1966 = a15;
                uint64_t v1965 = a16;
                char v1964 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v913 = a17;
            if (!v912 && a12)
            {
              uint64_t v914 = a16;
              uint64_t v915 = a15;
              uint64_t v916 = a13;
              int v917 = a11;
              int v918 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v915, a3, a4 + a9 * v914, a5, a6, a7, a8, v918, v917, v916, v913);
                int v918 = a10;
                int v917 = a11;
                uint64_t v916 = a13;
                uint64_t v915 = a15;
                uint64_t v914 = a16;
                char v913 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v912 == 4)
        {
          int v2480 = a17;
          if (a12)
          {
            uint64_t v2481 = a16;
            uint64_t v2482 = a15;
            uint64_t v2483 = a13;
            int v2484 = a11;
            int v2485 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2482, a3, a4 + a9 * v2481, a5, a6, a7, a8, v2485, v2484, v2483, v2480);
              int v2485 = a10;
              int v2484 = a11;
              uint64_t v2483 = a13;
              uint64_t v2482 = a15;
              uint64_t v2481 = a16;
              int v2480 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1448 = a17;
          if (!v912 && a12)
          {
            uint64_t v1449 = a16;
            uint64_t v1450 = a15;
            uint64_t v1451 = a13;
            int v1452 = a11;
            int v1453 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1450, a3, a4 + a9 * v1449, a5, a6, a7, a8, v1453, v1452, v1451, v1448);
              int v1453 = a10;
              int v1452 = a11;
              uint64_t v1451 = a13;
              uint64_t v1450 = a15;
              uint64_t v1449 = a16;
              int v1448 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x13A:
        uint64_t v2667 = *(unsigned __int8 *)(a1 + 380);
        int v919 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2667 == 1)
        {
          if (v919 == 4)
          {
            char v1970 = a17;
            if (a12)
            {
              uint64_t v1971 = a16;
              uint64_t v1972 = a15;
              uint64_t v1973 = a13;
              int v1974 = a11;
              int v1975 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1972, a3, a4 + a9 * v1971, a5, a6, a7, a8, v1975, v1974, v1973, v1970);
                int v1975 = a10;
                int v1974 = a11;
                uint64_t v1973 = a13;
                uint64_t v1972 = a15;
                uint64_t v1971 = a16;
                char v1970 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v920 = a17;
            if (!v919 && a12)
            {
              uint64_t v921 = a16;
              uint64_t v922 = a15;
              uint64_t v923 = a13;
              int v924 = a11;
              int v925 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v922, a3, a4 + a9 * v921, a5, a6, a7, a8, v925, v924, v923, v920);
                int v925 = a10;
                int v924 = a11;
                uint64_t v923 = a13;
                uint64_t v922 = a15;
                uint64_t v921 = a16;
                char v920 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v919 == 4)
        {
          int v2486 = a17;
          if (a12)
          {
            uint64_t v2487 = a16;
            uint64_t v2488 = a15;
            uint64_t v2489 = a13;
            int v2490 = a11;
            int v2491 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2488, a3, a4 + a9 * v2487, a5, a6, a7, a8, v2491, v2490, v2489, v2486);
              int v2491 = a10;
              int v2490 = a11;
              uint64_t v2489 = a13;
              uint64_t v2488 = a15;
              uint64_t v2487 = a16;
              int v2486 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1454 = a17;
          if (!v919 && a12)
          {
            uint64_t v1455 = a16;
            uint64_t v1456 = a15;
            uint64_t v1457 = a13;
            int v1458 = a11;
            int v1459 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1456, a3, a4 + a9 * v1455, a5, a6, a7, a8, v1459, v1458, v1457, v1454);
              int v1459 = a10;
              int v1458 = a11;
              uint64_t v1457 = a13;
              uint64_t v1456 = a15;
              uint64_t v1455 = a16;
              int v1454 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x13B:
        uint64_t v2668 = *(unsigned __int8 *)(a1 + 380);
        int v926 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2668 == 1)
        {
          if (v926 == 4)
          {
            char v1976 = a17;
            if (a12)
            {
              uint64_t v1977 = a16;
              uint64_t v1978 = a15;
              uint64_t v1979 = a13;
              int v1980 = a11;
              int v1981 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1978, a3, a4 + a9 * v1977, a5, a6, a7, a8, v1981, v1980, v1979, v1976);
                int v1981 = a10;
                int v1980 = a11;
                uint64_t v1979 = a13;
                uint64_t v1978 = a15;
                uint64_t v1977 = a16;
                char v1976 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v927 = a17;
            if (!v926 && a12)
            {
              uint64_t v928 = a16;
              uint64_t v929 = a15;
              uint64_t v930 = a13;
              int v931 = a11;
              int v932 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v929, a3, a4 + a9 * v928, a5, a6, a7, a8, v932, v931, v930, v927);
                int v932 = a10;
                int v931 = a11;
                uint64_t v930 = a13;
                uint64_t v929 = a15;
                uint64_t v928 = a16;
                char v927 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v926 == 4)
        {
          int v2492 = a17;
          if (a12)
          {
            uint64_t v2493 = a16;
            uint64_t v2494 = a15;
            uint64_t v2495 = a13;
            int v2496 = a11;
            int v2497 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2494, a3, a4 + a9 * v2493, a5, a6, a7, a8, v2497, v2496, v2495, v2492);
              int v2497 = a10;
              int v2496 = a11;
              uint64_t v2495 = a13;
              uint64_t v2494 = a15;
              uint64_t v2493 = a16;
              int v2492 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1460 = a17;
          if (!v926 && a12)
          {
            uint64_t v1461 = a16;
            uint64_t v1462 = a15;
            uint64_t v1463 = a13;
            int v1464 = a11;
            int v1465 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1462, a3, a4 + a9 * v1461, a5, a6, a7, a8, v1465, v1464, v1463, v1460);
              int v1465 = a10;
              int v1464 = a11;
              uint64_t v1463 = a13;
              uint64_t v1462 = a15;
              uint64_t v1461 = a16;
              int v1460 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x143:
        uint64_t v2669 = *(unsigned __int8 *)(a1 + 380);
        int v933 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2669 == 1)
        {
          if (v933 == 4)
          {
            char v1982 = a17;
            if (a12)
            {
              uint64_t v1983 = a16;
              uint64_t v1984 = a15;
              uint64_t v1985 = a13;
              int v1986 = a11;
              int v1987 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1984, a3, a4 + a9 * v1983, a5, a6, a7, a8, v1987, v1986, v1985, v1982);
                int v1987 = a10;
                int v1986 = a11;
                uint64_t v1985 = a13;
                uint64_t v1984 = a15;
                uint64_t v1983 = a16;
                char v1982 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v934 = a17;
            if (!v933 && a12)
            {
              uint64_t v935 = a16;
              uint64_t v936 = a15;
              uint64_t v937 = a13;
              int v938 = a11;
              int v939 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v936, a3, a4 + a9 * v935, a5, a6, a7, a8, v939, v938, v937, v934);
                int v939 = a10;
                int v938 = a11;
                uint64_t v937 = a13;
                uint64_t v936 = a15;
                uint64_t v935 = a16;
                char v934 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v933 == 4)
        {
          int v2498 = a17;
          if (a12)
          {
            uint64_t v2499 = a16;
            uint64_t v2500 = a15;
            uint64_t v2501 = a13;
            int v2502 = a11;
            int v2503 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2500, a3, a4 + a9 * v2499, a5, a6, a7, a8, v2503, v2502, v2501, v2498);
              int v2503 = a10;
              int v2502 = a11;
              uint64_t v2501 = a13;
              uint64_t v2500 = a15;
              uint64_t v2499 = a16;
              int v2498 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1466 = a17;
          if (!v933 && a12)
          {
            uint64_t v1467 = a16;
            uint64_t v1468 = a15;
            uint64_t v1469 = a13;
            int v1470 = a11;
            int v1471 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1468, a3, a4 + a9 * v1467, a5, a6, a7, a8, v1471, v1470, v1469, v1466);
              int v1471 = a10;
              int v1470 = a11;
              uint64_t v1469 = a13;
              uint64_t v1468 = a15;
              uint64_t v1467 = a16;
              int v1466 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x144:
        uint64_t v2670 = *(unsigned __int8 *)(a1 + 380);
        int v940 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2670 == 1)
        {
          if (v940 == 4)
          {
            char v1988 = a17;
            if (a12)
            {
              uint64_t v1989 = a16;
              uint64_t v1990 = a15;
              uint64_t v1991 = a13;
              int v1992 = a11;
              int v1993 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1990, a3, a4 + a9 * v1989, a5, a6, a7, a8, v1993, v1992, v1991, v1988);
                int v1993 = a10;
                int v1992 = a11;
                uint64_t v1991 = a13;
                uint64_t v1990 = a15;
                uint64_t v1989 = a16;
                char v1988 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v941 = a17;
            if (!v940 && a12)
            {
              uint64_t v942 = a16;
              uint64_t v943 = a15;
              uint64_t v944 = a13;
              int v945 = a11;
              int v946 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v943, a3, a4 + a9 * v942, a5, a6, a7, a8, v946, v945, v944, v941);
                int v946 = a10;
                int v945 = a11;
                uint64_t v944 = a13;
                uint64_t v943 = a15;
                uint64_t v942 = a16;
                char v941 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v940 == 4)
        {
          int v2504 = a17;
          if (a12)
          {
            uint64_t v2505 = a16;
            uint64_t v2506 = a15;
            uint64_t v2507 = a13;
            int v2508 = a11;
            int v2509 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2506, a3, a4 + a9 * v2505, a5, a6, a7, a8, v2509, v2508, v2507, v2504);
              int v2509 = a10;
              int v2508 = a11;
              uint64_t v2507 = a13;
              uint64_t v2506 = a15;
              uint64_t v2505 = a16;
              int v2504 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1472 = a17;
          if (!v940 && a12)
          {
            uint64_t v1473 = a16;
            uint64_t v1474 = a15;
            uint64_t v1475 = a13;
            int v1476 = a11;
            int v1477 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1474, a3, a4 + a9 * v1473, a5, a6, a7, a8, v1477, v1476, v1475, v1472);
              int v1477 = a10;
              int v1476 = a11;
              uint64_t v1475 = a13;
              uint64_t v1474 = a15;
              uint64_t v1473 = a16;
              int v1472 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x145:
        uint64_t v2671 = *(unsigned __int8 *)(a1 + 380);
        int v947 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2671 == 1)
        {
          if (v947 == 4)
          {
            char v1994 = a17;
            if (a12)
            {
              uint64_t v1995 = a16;
              uint64_t v1996 = a15;
              uint64_t v1997 = a13;
              int v1998 = a11;
              int v1999 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1996, a3, a4 + a9 * v1995, a5, a6, a7, a8, v1999, v1998, v1997, v1994);
                int v1999 = a10;
                int v1998 = a11;
                uint64_t v1997 = a13;
                uint64_t v1996 = a15;
                uint64_t v1995 = a16;
                char v1994 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v948 = a17;
            if (!v947 && a12)
            {
              uint64_t v949 = a16;
              uint64_t v950 = a15;
              uint64_t v951 = a13;
              int v952 = a11;
              int v953 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v950, a3, a4 + a9 * v949, a5, a6, a7, a8, v953, v952, v951, v948);
                int v953 = a10;
                int v952 = a11;
                uint64_t v951 = a13;
                uint64_t v950 = a15;
                uint64_t v949 = a16;
                char v948 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v947 == 4)
        {
          int v2510 = a17;
          if (a12)
          {
            uint64_t v2511 = a16;
            uint64_t v2512 = a15;
            uint64_t v2513 = a13;
            int v2514 = a11;
            int v2515 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2512, a3, a4 + a9 * v2511, a5, a6, a7, a8, v2515, v2514, v2513, v2510);
              int v2515 = a10;
              int v2514 = a11;
              uint64_t v2513 = a13;
              uint64_t v2512 = a15;
              uint64_t v2511 = a16;
              int v2510 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1478 = a17;
          if (!v947 && a12)
          {
            uint64_t v1479 = a16;
            uint64_t v1480 = a15;
            uint64_t v1481 = a13;
            int v1482 = a11;
            int v1483 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1480, a3, a4 + a9 * v1479, a5, a6, a7, a8, v1483, v1482, v1481, v1478);
              int v1483 = a10;
              int v1482 = a11;
              uint64_t v1481 = a13;
              uint64_t v1480 = a15;
              uint64_t v1479 = a16;
              int v1478 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x228:
        uint64_t v2672 = *(unsigned __int8 *)(a1 + 380);
        int v954 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2672 == 1)
        {
          if (v954 == 4)
          {
            char v2000 = a17;
            if (a12)
            {
              uint64_t v2001 = a16;
              uint64_t v2002 = a15;
              uint64_t v2003 = a13;
              int v2004 = a11;
              int v2005 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2002, a3, a4 + a9 * v2001, a5, a6, a7, a8, v2005, v2004, v2003, v2000);
                int v2005 = a10;
                int v2004 = a11;
                uint64_t v2003 = a13;
                uint64_t v2002 = a15;
                uint64_t v2001 = a16;
                char v2000 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v955 = a17;
            if (!v954 && a12)
            {
              uint64_t v956 = a16;
              uint64_t v957 = a15;
              uint64_t v958 = a13;
              int v959 = a11;
              int v960 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v957, a3, a4 + a9 * v956, a5, a6, a7, a8, v960, v959, v958, v955);
                int v960 = a10;
                int v959 = a11;
                uint64_t v958 = a13;
                uint64_t v957 = a15;
                uint64_t v956 = a16;
                char v955 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v954 == 4)
        {
          int v2516 = a17;
          if (a12)
          {
            uint64_t v2517 = a16;
            uint64_t v2518 = a15;
            uint64_t v2519 = a13;
            int v2520 = a11;
            int v2521 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2518, a3, a4 + a9 * v2517, a5, a6, a7, a8, v2521, v2520, v2519, v2516);
              int v2521 = a10;
              int v2520 = a11;
              uint64_t v2519 = a13;
              uint64_t v2518 = a15;
              uint64_t v2517 = a16;
              int v2516 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1484 = a17;
          if (!v954 && a12)
          {
            uint64_t v1485 = a16;
            uint64_t v1486 = a15;
            uint64_t v1487 = a13;
            int v1488 = a11;
            int v1489 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1486, a3, a4 + a9 * v1485, a5, a6, a7, a8, v1489, v1488, v1487, v1484);
              int v1489 = a10;
              int v1488 = a11;
              uint64_t v1487 = a13;
              uint64_t v1486 = a15;
              uint64_t v1485 = a16;
              int v1484 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x229:
        uint64_t v2673 = *(unsigned __int8 *)(a1 + 380);
        int v961 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2673 == 1)
        {
          if (v961 == 4)
          {
            char v2006 = a17;
            if (a12)
            {
              uint64_t v2007 = a16;
              uint64_t v2008 = a15;
              uint64_t v2009 = a13;
              int v2010 = a11;
              int v2011 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2008, a3, a4 + a9 * v2007, a5, a6, a7, a8, v2011, v2010, v2009, v2006);
                int v2011 = a10;
                int v2010 = a11;
                uint64_t v2009 = a13;
                uint64_t v2008 = a15;
                uint64_t v2007 = a16;
                char v2006 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v962 = a17;
            if (!v961 && a12)
            {
              uint64_t v963 = a16;
              uint64_t v964 = a15;
              uint64_t v965 = a13;
              int v966 = a11;
              int v967 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v964, a3, a4 + a9 * v963, a5, a6, a7, a8, v967, v966, v965, v962);
                int v967 = a10;
                int v966 = a11;
                uint64_t v965 = a13;
                uint64_t v964 = a15;
                uint64_t v963 = a16;
                char v962 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v961 == 4)
        {
          int v2522 = a17;
          if (a12)
          {
            uint64_t v2523 = a16;
            uint64_t v2524 = a15;
            uint64_t v2525 = a13;
            int v2526 = a11;
            int v2527 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2524, a3, a4 + a9 * v2523, a5, a6, a7, a8, v2527, v2526, v2525, v2522);
              int v2527 = a10;
              int v2526 = a11;
              uint64_t v2525 = a13;
              uint64_t v2524 = a15;
              uint64_t v2523 = a16;
              int v2522 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1490 = a17;
          if (!v961 && a12)
          {
            uint64_t v1491 = a16;
            uint64_t v1492 = a15;
            uint64_t v1493 = a13;
            int v1494 = a11;
            int v1495 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1492, a3, a4 + a9 * v1491, a5, a6, a7, a8, v1495, v1494, v1493, v1490);
              int v1495 = a10;
              int v1494 = a11;
              uint64_t v1493 = a13;
              uint64_t v1492 = a15;
              uint64_t v1491 = a16;
              int v1490 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22A:
        uint64_t v2674 = *(unsigned __int8 *)(a1 + 380);
        int v968 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2674 == 1)
        {
          if (v968 == 4)
          {
            char v2012 = a17;
            if (a12)
            {
              uint64_t v2013 = a16;
              uint64_t v2014 = a15;
              uint64_t v2015 = a13;
              int v2016 = a11;
              int v2017 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2014, a3, a4 + a9 * v2013, a5, a6, a7, a8, v2017, v2016, v2015, v2012);
                int v2017 = a10;
                int v2016 = a11;
                uint64_t v2015 = a13;
                uint64_t v2014 = a15;
                uint64_t v2013 = a16;
                char v2012 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v969 = a17;
            if (!v968 && a12)
            {
              uint64_t v970 = a16;
              uint64_t v971 = a15;
              uint64_t v972 = a13;
              int v973 = a11;
              int v974 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v971, a3, a4 + a9 * v970, a5, a6, a7, a8, v974, v973, v972, v969);
                int v974 = a10;
                int v973 = a11;
                uint64_t v972 = a13;
                uint64_t v971 = a15;
                uint64_t v970 = a16;
                char v969 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v968 == 4)
        {
          int v2528 = a17;
          if (a12)
          {
            uint64_t v2529 = a16;
            uint64_t v2530 = a15;
            uint64_t v2531 = a13;
            int v2532 = a11;
            int v2533 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2530, a3, a4 + a9 * v2529, a5, a6, a7, a8, v2533, v2532, v2531, v2528);
              int v2533 = a10;
              int v2532 = a11;
              uint64_t v2531 = a13;
              uint64_t v2530 = a15;
              uint64_t v2529 = a16;
              int v2528 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1496 = a17;
          if (!v968 && a12)
          {
            uint64_t v1497 = a16;
            uint64_t v1498 = a15;
            uint64_t v1499 = a13;
            int v1500 = a11;
            int v1501 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1498, a3, a4 + a9 * v1497, a5, a6, a7, a8, v1501, v1500, v1499, v1496);
              int v1501 = a10;
              int v1500 = a11;
              uint64_t v1499 = a13;
              uint64_t v1498 = a15;
              uint64_t v1497 = a16;
              int v1496 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22B:
        uint64_t v2675 = *(unsigned __int8 *)(a1 + 380);
        int v975 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2675 == 1)
        {
          if (v975 == 4)
          {
            char v2018 = a17;
            if (a12)
            {
              uint64_t v2019 = a16;
              uint64_t v2020 = a15;
              uint64_t v2021 = a13;
              int v2022 = a11;
              int v2023 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2020, a3, a4 + a9 * v2019, a5, a6, a7, a8, v2023, v2022, v2021, v2018);
                int v2023 = a10;
                int v2022 = a11;
                uint64_t v2021 = a13;
                uint64_t v2020 = a15;
                uint64_t v2019 = a16;
                char v2018 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v976 = a17;
            if (!v975 && a12)
            {
              uint64_t v977 = a16;
              uint64_t v978 = a15;
              uint64_t v979 = a13;
              int v980 = a11;
              int v981 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v978, a3, a4 + a9 * v977, a5, a6, a7, a8, v981, v980, v979, v976);
                int v981 = a10;
                int v980 = a11;
                uint64_t v979 = a13;
                uint64_t v978 = a15;
                uint64_t v977 = a16;
                char v976 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v975 == 4)
        {
          int v2534 = a17;
          if (a12)
          {
            uint64_t v2535 = a16;
            uint64_t v2536 = a15;
            uint64_t v2537 = a13;
            int v2538 = a11;
            int v2539 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2536, a3, a4 + a9 * v2535, a5, a6, a7, a8, v2539, v2538, v2537, v2534);
              int v2539 = a10;
              int v2538 = a11;
              uint64_t v2537 = a13;
              uint64_t v2536 = a15;
              uint64_t v2535 = a16;
              int v2534 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1502 = a17;
          if (!v975 && a12)
          {
            uint64_t v1503 = a16;
            uint64_t v1504 = a15;
            uint64_t v1505 = a13;
            int v1506 = a11;
            int v1507 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1504, a3, a4 + a9 * v1503, a5, a6, a7, a8, v1507, v1506, v1505, v1502);
              int v1507 = a10;
              int v1506 = a11;
              uint64_t v1505 = a13;
              uint64_t v1504 = a15;
              uint64_t v1503 = a16;
              int v1502 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x22C:
        uint64_t v2676 = *(unsigned __int8 *)(a1 + 380);
        int v982 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2676 == 1)
        {
          if (v982 == 4)
          {
            char v2024 = a17;
            if (a12)
            {
              uint64_t v2025 = a16;
              uint64_t v2026 = a15;
              uint64_t v2027 = a13;
              int v2028 = a11;
              int v2029 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2026, a3, a4 + a9 * v2025, a5, a6, a7, a8, v2029, v2028, v2027, v2024);
                int v2029 = a10;
                int v2028 = a11;
                uint64_t v2027 = a13;
                uint64_t v2026 = a15;
                uint64_t v2025 = a16;
                char v2024 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v983 = a17;
            if (!v982 && a12)
            {
              uint64_t v984 = a16;
              uint64_t v985 = a15;
              uint64_t v986 = a13;
              int v987 = a11;
              int v988 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v985, a3, a4 + a9 * v984, a5, a6, a7, a8, v988, v987, v986, v983);
                int v988 = a10;
                int v987 = a11;
                uint64_t v986 = a13;
                uint64_t v985 = a15;
                uint64_t v984 = a16;
                char v983 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v982 == 4)
        {
          int v2540 = a17;
          if (a12)
          {
            uint64_t v2541 = a16;
            uint64_t v2542 = a15;
            uint64_t v2543 = a13;
            int v2544 = a11;
            int v2545 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2542, a3, a4 + a9 * v2541, a5, a6, a7, a8, v2545, v2544, v2543, v2540);
              int v2545 = a10;
              int v2544 = a11;
              uint64_t v2543 = a13;
              uint64_t v2542 = a15;
              uint64_t v2541 = a16;
              int v2540 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1508 = a17;
          if (!v982 && a12)
          {
            uint64_t v1509 = a16;
            uint64_t v1510 = a15;
            uint64_t v1511 = a13;
            int v1512 = a11;
            int v1513 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1510, a3, a4 + a9 * v1509, a5, a6, a7, a8, v1513, v1512, v1511, v1508);
              int v1513 = a10;
              int v1512 = a11;
              uint64_t v1511 = a13;
              uint64_t v1510 = a15;
              uint64_t v1509 = a16;
              int v1508 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x24A:
        uint64_t v2677 = *(unsigned __int8 *)(a1 + 380);
        int v989 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2677 == 1)
        {
          if (v989 == 4)
          {
            char v2030 = a17;
            if (a12)
            {
              uint64_t v2031 = a16;
              uint64_t v2032 = a15;
              uint64_t v2033 = a13;
              int v2034 = a11;
              int v2035 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2032, a3, a4 + a9 * v2031, a5, a6, a7, a8, v2035, v2034, v2033, v2030);
                int v2035 = a10;
                int v2034 = a11;
                uint64_t v2033 = a13;
                uint64_t v2032 = a15;
                uint64_t v2031 = a16;
                char v2030 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v990 = a17;
            if (!v989 && a12)
            {
              uint64_t v991 = a16;
              uint64_t v992 = a15;
              uint64_t v993 = a13;
              int v994 = a11;
              int v995 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v992, a3, a4 + a9 * v991, a5, a6, a7, a8, v995, v994, v993, v990);
                int v995 = a10;
                int v994 = a11;
                uint64_t v993 = a13;
                uint64_t v992 = a15;
                uint64_t v991 = a16;
                char v990 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v989 == 4)
        {
          int v2546 = a17;
          if (a12)
          {
            uint64_t v2547 = a16;
            uint64_t v2548 = a15;
            uint64_t v2549 = a13;
            int v2550 = a11;
            int v2551 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2548, a3, a4 + a9 * v2547, a5, a6, a7, a8, v2551, v2550, v2549, v2546);
              int v2551 = a10;
              int v2550 = a11;
              uint64_t v2549 = a13;
              uint64_t v2548 = a15;
              uint64_t v2547 = a16;
              int v2546 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1514 = a17;
          if (!v989 && a12)
          {
            uint64_t v1515 = a16;
            uint64_t v1516 = a15;
            uint64_t v1517 = a13;
            int v1518 = a11;
            int v1519 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1516, a3, a4 + a9 * v1515, a5, a6, a7, a8, v1519, v1518, v1517, v1514);
              int v1519 = a10;
              int v1518 = a11;
              uint64_t v1517 = a13;
              uint64_t v1516 = a15;
              uint64_t v1515 = a16;
              int v1514 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x24B:
        uint64_t v2678 = *(unsigned __int8 *)(a1 + 380);
        int v996 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2678 == 1)
        {
          if (v996 == 4)
          {
            char v2036 = a17;
            if (a12)
            {
              uint64_t v2037 = a16;
              uint64_t v2038 = a15;
              uint64_t v2039 = a13;
              int v2040 = a11;
              int v2041 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2038, a3, a4 + a9 * v2037, a5, a6, a7, a8, v2041, v2040, v2039, v2036);
                int v2041 = a10;
                int v2040 = a11;
                uint64_t v2039 = a13;
                uint64_t v2038 = a15;
                uint64_t v2037 = a16;
                char v2036 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v997 = a17;
            if (!v996 && a12)
            {
              uint64_t v998 = a16;
              uint64_t v999 = a15;
              uint64_t v1000 = a13;
              int v1001 = a11;
              int v1002 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v999, a3, a4 + a9 * v998, a5, a6, a7, a8, v1002, v1001, v1000, v997);
                int v1002 = a10;
                int v1001 = a11;
                uint64_t v1000 = a13;
                uint64_t v999 = a15;
                uint64_t v998 = a16;
                char v997 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v996 == 4)
        {
          int v2552 = a17;
          if (a12)
          {
            uint64_t v2553 = a16;
            uint64_t v2554 = a15;
            uint64_t v2555 = a13;
            int v2556 = a11;
            int v2557 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2554, a3, a4 + a9 * v2553, a5, a6, a7, a8, v2557, v2556, v2555, v2552);
              int v2557 = a10;
              int v2556 = a11;
              uint64_t v2555 = a13;
              uint64_t v2554 = a15;
              uint64_t v2553 = a16;
              int v2552 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1520 = a17;
          if (!v996 && a12)
          {
            uint64_t v1521 = a16;
            uint64_t v1522 = a15;
            uint64_t v1523 = a13;
            int v1524 = a11;
            int v1525 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1522, a3, a4 + a9 * v1521, a5, a6, a7, a8, v1525, v1524, v1523, v1520);
              int v1525 = a10;
              int v1524 = a11;
              uint64_t v1523 = a13;
              uint64_t v1522 = a15;
              uint64_t v1521 = a16;
              int v1520 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x274:
        uint64_t v2679 = *(unsigned __int8 *)(a1 + 380);
        int v1003 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2679 == 1)
        {
          if (v1003 == 4)
          {
            char v2042 = a17;
            if (a12)
            {
              uint64_t v2043 = a16;
              uint64_t v2044 = a15;
              uint64_t v2045 = a13;
              int v2046 = a11;
              int v2047 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2044, a3, a4 + a9 * v2043, a5, a6, a7, a8, v2047, v2046, v2045, v2042);
                int v2047 = a10;
                int v2046 = a11;
                uint64_t v2045 = a13;
                uint64_t v2044 = a15;
                uint64_t v2043 = a16;
                char v2042 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1004 = a17;
            if (!v1003 && a12)
            {
              uint64_t v1005 = a16;
              uint64_t v1006 = a15;
              uint64_t v1007 = a13;
              int v1008 = a11;
              int v1009 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1006, a3, a4 + a9 * v1005, a5, a6, a7, a8, v1009, v1008, v1007, v1004);
                int v1009 = a10;
                int v1008 = a11;
                uint64_t v1007 = a13;
                uint64_t v1006 = a15;
                uint64_t v1005 = a16;
                char v1004 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1003 == 4)
        {
          int v2558 = a17;
          if (a12)
          {
            uint64_t v2559 = a16;
            uint64_t v2560 = a15;
            uint64_t v2561 = a13;
            int v2562 = a11;
            int v2563 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2560, a3, a4 + a9 * v2559, a5, a6, a7, a8, v2563, v2562, v2561, v2558);
              int v2563 = a10;
              int v2562 = a11;
              uint64_t v2561 = a13;
              uint64_t v2560 = a15;
              uint64_t v2559 = a16;
              int v2558 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1526 = a17;
          if (!v1003 && a12)
          {
            uint64_t v1527 = a16;
            uint64_t v1528 = a15;
            uint64_t v1529 = a13;
            int v1530 = a11;
            int v1531 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1528, a3, a4 + a9 * v1527, a5, a6, a7, a8, v1531, v1530, v1529, v1526);
              int v1531 = a10;
              int v1530 = a11;
              uint64_t v1529 = a13;
              uint64_t v1528 = a15;
              uint64_t v1527 = a16;
              int v1526 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x275:
        uint64_t v2680 = *(unsigned __int8 *)(a1 + 380);
        int v1010 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2680 == 1)
        {
          if (v1010 == 4)
          {
            char v2048 = a17;
            if (a12)
            {
              uint64_t v2049 = a16;
              uint64_t v2050 = a15;
              uint64_t v2051 = a13;
              int v2052 = a11;
              int v2053 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2050, a3, a4 + a9 * v2049, a5, a6, a7, a8, v2053, v2052, v2051, v2048);
                int v2053 = a10;
                int v2052 = a11;
                uint64_t v2051 = a13;
                uint64_t v2050 = a15;
                uint64_t v2049 = a16;
                char v2048 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1011 = a17;
            if (!v1010 && a12)
            {
              uint64_t v1012 = a16;
              uint64_t v1013 = a15;
              uint64_t v1014 = a13;
              int v1015 = a11;
              int v1016 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1013, a3, a4 + a9 * v1012, a5, a6, a7, a8, v1016, v1015, v1014, v1011);
                int v1016 = a10;
                int v1015 = a11;
                uint64_t v1014 = a13;
                uint64_t v1013 = a15;
                uint64_t v1012 = a16;
                char v1011 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1010 == 4)
        {
          int v2564 = a17;
          if (a12)
          {
            uint64_t v2565 = a16;
            uint64_t v2566 = a15;
            uint64_t v2567 = a13;
            int v2568 = a11;
            int v2569 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2566, a3, a4 + a9 * v2565, a5, a6, a7, a8, v2569, v2568, v2567, v2564);
              int v2569 = a10;
              int v2568 = a11;
              uint64_t v2567 = a13;
              uint64_t v2566 = a15;
              uint64_t v2565 = a16;
              int v2564 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1532 = a17;
          if (!v1010 && a12)
          {
            uint64_t v1533 = a16;
            uint64_t v1534 = a15;
            uint64_t v1535 = a13;
            int v1536 = a11;
            int v1537 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1534, a3, a4 + a9 * v1533, a5, a6, a7, a8, v1537, v1536, v1535, v1532);
              int v1537 = a10;
              int v1536 = a11;
              uint64_t v1535 = a13;
              uint64_t v1534 = a15;
              uint64_t v1533 = a16;
              int v1532 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27D:
        uint64_t v2681 = *(unsigned __int8 *)(a1 + 380);
        int v1017 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2681 == 1)
        {
          if (v1017 == 4)
          {
            char v2054 = a17;
            if (a12)
            {
              uint64_t v2055 = a16;
              uint64_t v2056 = a15;
              uint64_t v2057 = a13;
              int v2058 = a11;
              int v2059 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2056, a3, a4 + a9 * v2055, a5, a6, a7, a8, v2059, v2058, v2057, v2054);
                int v2059 = a10;
                int v2058 = a11;
                uint64_t v2057 = a13;
                uint64_t v2056 = a15;
                uint64_t v2055 = a16;
                char v2054 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1018 = a17;
            if (!v1017 && a12)
            {
              uint64_t v1019 = a16;
              uint64_t v1020 = a15;
              uint64_t v1021 = a13;
              int v1022 = a11;
              int v1023 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1020, a3, a4 + a9 * v1019, a5, a6, a7, a8, v1023, v1022, v1021, v1018);
                int v1023 = a10;
                int v1022 = a11;
                uint64_t v1021 = a13;
                uint64_t v1020 = a15;
                uint64_t v1019 = a16;
                char v1018 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1017 == 4)
        {
          int v2570 = a17;
          if (a12)
          {
            uint64_t v2571 = a16;
            uint64_t v2572 = a15;
            uint64_t v2573 = a13;
            int v2574 = a11;
            int v2575 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2572, a3, a4 + a9 * v2571, a5, a6, a7, a8, v2575, v2574, v2573, v2570);
              int v2575 = a10;
              int v2574 = a11;
              uint64_t v2573 = a13;
              uint64_t v2572 = a15;
              uint64_t v2571 = a16;
              int v2570 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1538 = a17;
          if (!v1017 && a12)
          {
            uint64_t v1539 = a16;
            uint64_t v1540 = a15;
            uint64_t v1541 = a13;
            int v1542 = a11;
            int v1543 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1540, a3, a4 + a9 * v1539, a5, a6, a7, a8, v1543, v1542, v1541, v1538);
              int v1543 = a10;
              int v1542 = a11;
              uint64_t v1541 = a13;
              uint64_t v1540 = a15;
              uint64_t v1539 = a16;
              int v1538 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27E:
        uint64_t v2682 = *(unsigned __int8 *)(a1 + 380);
        int v1024 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2682 == 1)
        {
          if (v1024 == 4)
          {
            char v2060 = a17;
            if (a12)
            {
              uint64_t v2061 = a16;
              uint64_t v2062 = a15;
              uint64_t v2063 = a13;
              int v2064 = a11;
              int v2065 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2062, a3, a4 + a9 * v2061, a5, a6, a7, a8, v2065, v2064, v2063, v2060);
                int v2065 = a10;
                int v2064 = a11;
                uint64_t v2063 = a13;
                uint64_t v2062 = a15;
                uint64_t v2061 = a16;
                char v2060 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1025 = a17;
            if (!v1024 && a12)
            {
              uint64_t v1026 = a16;
              uint64_t v1027 = a15;
              uint64_t v1028 = a13;
              int v1029 = a11;
              int v1030 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1027, a3, a4 + a9 * v1026, a5, a6, a7, a8, v1030, v1029, v1028, v1025);
                int v1030 = a10;
                int v1029 = a11;
                uint64_t v1028 = a13;
                uint64_t v1027 = a15;
                uint64_t v1026 = a16;
                char v1025 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1024 == 4)
        {
          int v2576 = a17;
          if (a12)
          {
            uint64_t v2577 = a16;
            uint64_t v2578 = a15;
            uint64_t v2579 = a13;
            int v2580 = a11;
            int v2581 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2578, a3, a4 + a9 * v2577, a5, a6, a7, a8, v2581, v2580, v2579, v2576);
              int v2581 = a10;
              int v2580 = a11;
              uint64_t v2579 = a13;
              uint64_t v2578 = a15;
              uint64_t v2577 = a16;
              int v2576 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1544 = a17;
          if (!v1024 && a12)
          {
            uint64_t v1545 = a16;
            uint64_t v1546 = a15;
            uint64_t v1547 = a13;
            int v1548 = a11;
            int v1549 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1546, a3, a4 + a9 * v1545, a5, a6, a7, a8, v1549, v1548, v1547, v1544);
              int v1549 = a10;
              int v1548 = a11;
              uint64_t v1547 = a13;
              uint64_t v1546 = a15;
              uint64_t v1545 = a16;
              int v1544 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x27F:
        uint64_t v2683 = *(unsigned __int8 *)(a1 + 380);
        int v1031 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2683 == 1)
        {
          if (v1031 == 4)
          {
            char v2066 = a17;
            if (a12)
            {
              uint64_t v2067 = a16;
              uint64_t v2068 = a15;
              uint64_t v2069 = a13;
              int v2070 = a11;
              int v2071 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2068, a3, a4 + a9 * v2067, a5, a6, a7, a8, v2071, v2070, v2069, v2066);
                int v2071 = a10;
                int v2070 = a11;
                uint64_t v2069 = a13;
                uint64_t v2068 = a15;
                uint64_t v2067 = a16;
                char v2066 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1032 = a17;
            if (!v1031 && a12)
            {
              uint64_t v1033 = a16;
              uint64_t v1034 = a15;
              uint64_t v1035 = a13;
              int v1036 = a11;
              int v1037 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1034, a3, a4 + a9 * v1033, a5, a6, a7, a8, v1037, v1036, v1035, v1032);
                int v1037 = a10;
                int v1036 = a11;
                uint64_t v1035 = a13;
                uint64_t v1034 = a15;
                uint64_t v1033 = a16;
                char v1032 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1031 == 4)
        {
          int v2582 = a17;
          if (a12)
          {
            uint64_t v2583 = a16;
            uint64_t v2584 = a15;
            uint64_t v2585 = a13;
            int v2586 = a11;
            int v2587 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2584, a3, a4 + a9 * v2583, a5, a6, a7, a8, v2587, v2586, v2585, v2582);
              int v2587 = a10;
              int v2586 = a11;
              uint64_t v2585 = a13;
              uint64_t v2584 = a15;
              uint64_t v2583 = a16;
              int v2582 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1550 = a17;
          if (!v1031 && a12)
          {
            uint64_t v1551 = a16;
            uint64_t v1552 = a15;
            uint64_t v1553 = a13;
            int v1554 = a11;
            int v1555 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1552, a3, a4 + a9 * v1551, a5, a6, a7, a8, v1555, v1554, v1553, v1550);
              int v1555 = a10;
              int v1554 = a11;
              uint64_t v1553 = a13;
              uint64_t v1552 = a15;
              uint64_t v1551 = a16;
              int v1550 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x280:
        uint64_t v2684 = *(unsigned __int8 *)(a1 + 380);
        int v1038 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2684 == 1)
        {
          if (v1038 == 4)
          {
            char v2072 = a17;
            if (a12)
            {
              uint64_t v2073 = a16;
              uint64_t v2074 = a15;
              uint64_t v2075 = a13;
              int v2076 = a11;
              int v2077 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2074, a3, a4 + a9 * v2073, a5, a6, a7, a8, v2077, v2076, v2075, v2072);
                int v2077 = a10;
                int v2076 = a11;
                uint64_t v2075 = a13;
                uint64_t v2074 = a15;
                uint64_t v2073 = a16;
                char v2072 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1039 = a17;
            if (!v1038 && a12)
            {
              uint64_t v1040 = a16;
              uint64_t v1041 = a15;
              uint64_t v1042 = a13;
              int v1043 = a11;
              int v1044 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1041, a3, a4 + a9 * v1040, a5, a6, a7, a8, v1044, v1043, v1042, v1039);
                int v1044 = a10;
                int v1043 = a11;
                uint64_t v1042 = a13;
                uint64_t v1041 = a15;
                uint64_t v1040 = a16;
                char v1039 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1038 == 4)
        {
          int v2588 = a17;
          if (a12)
          {
            uint64_t v2589 = a16;
            uint64_t v2590 = a15;
            uint64_t v2591 = a13;
            int v2592 = a11;
            int v2593 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2590, a3, a4 + a9 * v2589, a5, a6, a7, a8, v2593, v2592, v2591, v2588);
              int v2593 = a10;
              int v2592 = a11;
              uint64_t v2591 = a13;
              uint64_t v2590 = a15;
              uint64_t v2589 = a16;
              int v2588 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1556 = a17;
          if (!v1038 && a12)
          {
            uint64_t v1557 = a16;
            uint64_t v1558 = a15;
            uint64_t v1559 = a13;
            int v1560 = a11;
            int v1561 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1558, a3, a4 + a9 * v1557, a5, a6, a7, a8, v1561, v1560, v1559, v1556);
              int v1561 = a10;
              int v1560 = a11;
              uint64_t v1559 = a13;
              uint64_t v1558 = a15;
              uint64_t v1557 = a16;
              int v1556 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      case 0x281:
        uint64_t v2685 = *(unsigned __int8 *)(a1 + 380);
        int v1045 = getCompressionCodecConfig(*(void *)(a1 + 56));
        if (v2685 == 1)
        {
          if (v1045 == 4)
          {
            char v2078 = a17;
            if (a12)
            {
              uint64_t v2079 = a16;
              uint64_t v2080 = a15;
              uint64_t v2081 = a13;
              int v2082 = a11;
              int v2083 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v2080, a3, a4 + a9 * v2079, a5, a6, a7, a8, v2083, v2082, v2081, v2078);
                int v2083 = a10;
                int v2082 = a11;
                uint64_t v2081 = a13;
                uint64_t v2080 = a15;
                uint64_t v2079 = a16;
                char v2078 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
          else
          {
            char v1046 = a17;
            if (!v1045 && a12)
            {
              uint64_t v1047 = a16;
              uint64_t v1048 = a15;
              uint64_t v1049 = a13;
              int v1050 = a11;
              int v1051 = a10;
              do
              {
                AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(a1, a2 + a9 * v1048, a3, a4 + a9 * v1047, a5, a6, a7, a8, v1051, v1050, v1049, v1046);
                int v1051 = a10;
                int v1050 = a11;
                uint64_t v1049 = a13;
                uint64_t v1048 = a15;
                uint64_t v1047 = a16;
                char v1046 = a17;
                ++a9;
                a3 += a14;
                --v24;
              }
              while (v24);
            }
          }
        }
        else if (v1045 == 4)
        {
          int v2594 = a17;
          if (a12)
          {
            uint64_t v2595 = a16;
            uint64_t v2596 = a15;
            uint64_t v2597 = a13;
            int v2598 = a11;
            int v2599 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v2596, a3, a4 + a9 * v2595, a5, a6, a7, a8, v2599, v2598, v2597, v2594);
              int v2599 = a10;
              int v2598 = a11;
              uint64_t v2597 = a13;
              uint64_t v2596 = a15;
              uint64_t v2595 = a16;
              int v2594 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        else
        {
          int v1562 = a17;
          if (!v1045 && a12)
          {
            uint64_t v1563 = a16;
            uint64_t v1564 = a15;
            uint64_t v1565 = a13;
            int v1566 = a11;
            int v1567 = a10;
            do
            {
              AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(a1, a2 + a9 * v1564, a3, a4 + a9 * v1563, a5, a6, a7, a8, v1567, v1566, v1565, v1562);
              int v1567 = a10;
              int v1566 = a11;
              uint64_t v1565 = a13;
              uint64_t v1564 = a15;
              uint64_t v1563 = a16;
              int v1562 = a17;
              ++a9;
              a3 += a14;
              --v24;
            }
            while (v24);
          }
        }
        break;
      default:
        return;
    }
  }
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    unint64_t v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 1) >> 1;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 1, (a12 + 3) >> 2, (a13 + 1) >> 1, a15, a17, a18);
          unint64_t v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  unsigned int v14 = a8;
  uint64_t v17 = a11;
  int v18 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v228 = a9;
        int v229 = v13;
        uint64_t v230 = v47;
        do
        {
          long long v231 = *v229++;
          *(_OWORD *)(result + 16 * (v230 + v54)) = v231;
          uint64_t v230 = (v230 - v29) & v29;
          --v228;
        }
        while (v228);
        uint64_t v54 = (v54 - v38) & v38;
        uint64_t v13 = (long long *)((char *)v13 + a11);
      }
    }
    return result;
  }
  uint64_t v257 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v260 = a8 >> v66;
    unsigned int v262 = 1 << v66;
    int v76 = v69 - 1;
    unsigned int v258 = a10 + a8;
    unsigned int v254 = (v69 - 1 + a10 + a8) >> v66;
    char v256 = v66;
    if (a8 >> v66 >= v254) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v276 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v262 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v270 = a7 >> v67;
    unsigned int v274 = (v77 + a9 + a7) >> v67;
    if (result >= v274) {
      return result;
    }
    unsigned int v253 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v272 = v77 & v276;
    int v249 = v76 & v258;
    uint64_t v251 = v76 & a8;
    unsigned int v85 = v260;
LABEL_89:
    unsigned int v86 = v85 << v256;
    unsigned int v87 = v85 - v260;
    int v268 = v85 * v253;
    unsigned int v264 = v85 + 1;
    BOOL v88 = v258 >= (v85 + 1) << v256;
    unsigned int v89 = v262;
    if (!v88) {
      unsigned int v89 = v249;
    }
    int v90 = v262 - v251;
    if (!v88) {
      int v90 = v18;
    }
    int v91 = v87 << v256;
    if (v86 >= v14) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v251;
    }
    if (v86 >= v14) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v266 = (v92 + v91 - v251) * a11;
    unsigned int v94 = v270;
    unsigned int v95 = a7;
    while (1)
    {
      unsigned int v96 = v94 << v67;
      unsigned int v97 = v94 + 1;
      if (v276 >= (v94 + 1) << v67) {
        int v98 = (1 << v67) - v84;
      }
      else {
        int v98 = a9;
      }
      int v99 = v272;
      if (v276 >= v97 << v67) {
        int v99 = 1 << v67;
      }
      if (v96 >= v95) {
        unsigned int v100 = 0;
      }
      else {
        unsigned int v100 = v84;
      }
      if (v96 < v95) {
        int v99 = v98;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v102 = 0;
      uint64_t v109 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_146;
      }
LABEL_100:
      unsigned int v94 = v97;
      if (v97 == v274)
      {
        unsigned int v85 = v264;
        unsigned int v14 = a8;
        int v18 = a10;
        if (v264 == v254) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v101 = 0;
    uint64_t v102 = 0;
    int v103 = 1;
    BOOL v104 = v81 != 0;
    BOOL v105 = v83 != 0;
    unsigned int v106 = v81;
    unsigned int v107 = v83;
    do
    {
      --v106;
      if (v104) {
        v102 |= (unint64_t)(v103 & ~(-1 << v81)) << v101++;
      }
      else {
        unsigned int v106 = 0;
      }
      --v107;
      if (!v105) {
        unsigned int v107 = 0;
      }
      v103 *= 2;
      unsigned int v101 = (__PAIR64__(v101, v105) - 1) >> 32;
      BOOL v105 = v107 != 0;
      BOOL v104 = v106 != 0;
    }
    while (v107 | v106);
    int v108 = 0;
    uint64_t v109 = 0;
    int v110 = 1;
    BOOL v111 = v81 != 0;
    BOOL v112 = v83 != 0;
    unsigned int v113 = v81;
    unsigned int v114 = v83;
    do
    {
      int v115 = v111;
      if (v115) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      int v116 = v108 + v115;
      if (v112) {
        --v114;
      }
      else {
        unsigned int v114 = 0;
      }
      if (v112) {
        v109 |= (unint64_t)(v110 & ~(-1 << v83)) << v116++;
      }
      v110 *= 2;
      int v108 = v116 - 1;
      BOOL v112 = v114 != 0;
      BOOL v111 = v113 != 0;
    }
    while (v114 | v113);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v100) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    unsigned int v95 = a7;
    if (!v93) {
      goto LABEL_100;
    }
LABEL_146:
    if (v99)
    {
      int v133 = 0;
      uint64_t v134 = (long long *)((char *)&a2[v100 + ((v94 - v270) << v67) - v84] + v266);
      uint64_t v135 = (v94 + v268) * a12[3] * *((unsigned __int8 *)a12 + 9) + v257;
      do
      {
        int v136 = v99;
        int v137 = v134;
        uint64_t v138 = v118;
        do
        {
          long long v139 = *v137++;
          *(_OWORD *)(v135 + 16 * (v138 + v125)) = v139;
          uint64_t v138 = (v138 - v102) & v102;
          --v136;
        }
        while (v136);
        uint64_t result = v125 - v109;
        uint64_t v125 = (v125 - v109) & v109;
        uint64_t v134 = (long long *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_100;
  }
  unsigned int v19 = a7;
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v279);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v237 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v237 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v257;
  unsigned int v148 = a8;
  int v147 = a10;
  unsigned int v236 = v285;
  if (v285)
  {
    unsigned int v149 = 1 << v23;
    unsigned int v150 = v286;
    int v267 = v283;
    BOOL v263 = v283 != 0;
    int v265 = v284;
    BOOL v261 = v284 != 0;
    int v235 = 1 << v237;
    if (1 << v237 >= a5) {
      unsigned int v151 = a5;
    }
    else {
      unsigned int v151 = 1 << v237;
    }
    if (v149 >= a6) {
      unsigned int v152 = a6;
    }
    else {
      unsigned int v152 = 1 << v23;
    }
    unsigned int v153 = 32 - __clz(v151 - 1);
    if (v151 >= 2) {
      unsigned int v154 = v153;
    }
    else {
      unsigned int v154 = 0;
    }
    unsigned int v155 = 32 - __clz(v152 - 1);
    if (v152 < 2) {
      unsigned int v155 = 0;
    }
    BOOL v271 = v154 != 0;
    unsigned int v273 = v155;
    BOOL v269 = v155 != 0;
    if (v286)
    {
      unsigned int v156 = 0;
      int v157 = 0;
      unsigned int v234 = a7 >> v237;
      unsigned int v255 = a8 >> v23;
      int v278 = v287;
      int v275 = v284 | v283;
      unsigned int v233 = a9 + a7;
      int v232 = v280;
      int v158 = v282;
      int v277 = v281;
      int v250 = (v149 - 1) & a8;
      int v252 = (v149 - 1) & (a10 + a8);
      unsigned int v248 = v149 - v250;
      int v159 = ~(-1 << v154);
      int v246 = v282;
      int v247 = v273 | v154;
      unsigned int v259 = v154;
      int v239 = 1 << v23;
      char v240 = v23;
      do
      {
        int v238 = v157;
        int v160 = 0;
        int v161 = 0;
        unsigned int v162 = (v156 + v234) << v237;
        int v163 = a9;
        if (v233 >= (v156 + v234 + 1) << v237) {
          int v163 = v235 - ((v235 - 1) & a7);
        }
        int v164 = 1 << v237;
        if (v233 < (v156 + v234 + 1) << v237) {
          int v164 = (v235 - 1) & (a9 + a7);
        }
        int v165 = v232 + v156;
        int v166 = v156 << v237;
        if (v162 >= v19) {
          int v167 = v164;
        }
        else {
          int v167 = v163;
        }
        if (v162 >= v19) {
          int v168 = 0;
        }
        else {
          int v168 = (v235 - 1) & a7;
        }
        int v242 = &v243[v168 + v166];
        do
        {
          int v169 = v277 + v160;
          if (v278)
          {
            int v170 = v275;
            if (v275)
            {
              int v171 = 0;
              int v170 = 0;
              int v172 = 1;
              BOOL v173 = v261;
              BOOL v174 = v263;
              int v176 = v265;
              int v175 = v267;
              do
              {
                --v175;
                if (v174) {
                  v170 |= (v172 & v165) << v171;
                }
                else {
                  int v175 = 0;
                }
                if (v174) {
                  ++v171;
                }
                --v176;
                if (v173) {
                  v170 |= (v172 & v169) << v171;
                }
                else {
                  int v176 = 0;
                }
                if (v173) {
                  ++v171;
                }
                v172 *= 2;
                --v171;
                BOOL v173 = v176 != 0;
                BOOL v174 = v175 != 0;
              }
              while (v176 | v175);
            }
          }
          else
          {
            int v170 = v275;
            if (v275)
            {
              int v177 = 0;
              int v170 = 0;
              int v178 = 1;
              BOOL v180 = v261;
              BOOL v179 = v263;
              int v181 = v265;
              int v182 = v267;
              do
              {
                --v181;
                if (v180) {
                  v170 |= (v178 & v169) << v177;
                }
                else {
                  int v181 = 0;
                }
                if (v180) {
                  ++v177;
                }
                --v182;
                if (v179) {
                  v170 |= (v178 & v165) << v177;
                }
                else {
                  int v182 = 0;
                }
                if (v179) {
                  ++v177;
                }
                v178 *= 2;
                --v177;
                BOOL v179 = v182 != 0;
                BOOL v180 = v181 != 0;
              }
              while (v182 | v181);
            }
          }
          int v183 = *(_DWORD *)(v146 + 4 * ((v170 + v158) | ((v170 + v158) >> 8 << 9)));
          if (v183 < 0)
          {
            unint64_t v184 = v146 - *((void *)a13 + 3) + ((unint64_t)(v183 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v185 = a13[2];
            if (result > v185)
            {
              uint64_t result = get_level_offset_within_tail(result, v185, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v154 = v259;
              unsigned int v149 = v239;
              char v23 = v240;
              uint64_t v17 = a11;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v257;
              v184 += result;
            }
            unsigned int v186 = (v160 + v255) << v23;
            unsigned int v187 = v248;
            if (a10 + a8 >= (v160 + v255 + 1) << v23)
            {
              unsigned int v188 = v149;
            }
            else
            {
              unsigned int v187 = v147;
              unsigned int v188 = v252;
            }
            if (v186 >= v148) {
              int v189 = 0;
            }
            else {
              int v189 = v250;
            }
            if (v186 >= v148) {
              unsigned int v187 = v188;
            }
            if (!v247)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v246;
              if (!v187) {
                goto LABEL_191;
              }
LABEL_263:
              if (v167)
              {
                int v221 = 0;
                int v222 = (long long *)((char *)v242 + (v189 + (v160 << v23)) * v17);
                do
                {
                  int v223 = v167;
                  uint64_t v224 = v222;
                  uint64_t v225 = v207;
                  do
                  {
                    uint64_t result = v225 + v214;
                    long long v226 = *v224++;
                    *(_OWORD *)(v184 + 16 * (v225 + v214)) = v226;
                    uint64_t v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  int v222 = (long long *)((char *)v222 + v17);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_191;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v269;
            BOOL v194 = v271;
            unsigned int v195 = v154;
            unsigned int v196 = v273;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v269;
            BOOL v201 = v271;
            unsigned int v202 = v154;
            unsigned int v203 = v273;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & ~(-1 << v273)) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v269;
            BOOL v209 = v271;
            unsigned int v211 = v154;
            unsigned int v212 = v273;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v168) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v269;
            BOOL v216 = v271;
            unsigned int v217 = v154;
            unsigned int v218 = v273;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              uint64_t result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v154 = v259;
            int v158 = v246;
            if (v187) {
              goto LABEL_263;
            }
          }
LABEL_191:
          int v160 = (unsigned __int16)++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v238 + 1;
        unsigned int v156 = (unsigned __int16)(v238 + 1);
        unsigned int v19 = a7;
      }
      while (v236 > v156);
    }
  }
  return result;
}

uint64_t get_level_offset_within_tail(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, char a8)
{
  unsigned int v8 = (a5 - 1 + a3) / a5;
  unsigned int v9 = (a6 - 1 + a4) / a6;
  unsigned int v10 = 32 - __clz(~(-1 << -__clz(v8 - 1)));
  if (v8 >= 2) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v9 < 2)
  {
    unsigned int v12 = 0;
    unsigned int v13 = a1 - a2;
    if (a1 > a2) {
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v12 = 32 - __clz(~(-1 << -(char)__clz(v9 - 1)));
    unsigned int v13 = a1 - a2;
    if (a1 > a2)
    {
LABEL_6:
      if (a8)
      {
        if (v13 >= 4)
        {
          unsigned int v15 = v13 & 0xFFFFFFFC;
          uint32x2_t v16 = (uint32x2_t)vdup_n_s32(v11);
          uint32x2_t v17 = (uint32x2_t)vdup_n_s32(v12);
          uint64x2_t v18 = (uint64x2_t)vdupq_n_s64(a7);
          int32x2_t v19 = vadd_s32(vdup_n_s32(a2), (int32x2_t)0x100000000);
          int64x2_t v20 = 0uLL;
          int64x2_t v21 = vdupq_n_s64(0x7FuLL);
          int8x16_t v22 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFF80);
          unsigned int v23 = v13 & 0xFFFFFFFC;
          int64x2_t v24 = 0uLL;
          do
          {
            uint32x2_t v25 = (uint32x2_t)vadd_s32(v19, (int32x2_t)0x200000002);
            int32x2_t v26 = vadd_s32((int32x2_t)vqsub_u32(v17, (uint32x2_t)v19), (int32x2_t)vqsub_u32(v16, (uint32x2_t)v19));
            int32x2_t v27 = vadd_s32((int32x2_t)vqsub_u32(v17, v25), (int32x2_t)vqsub_u32(v16, v25));
            v28.i64[0] = v26.u32[0];
            v28.i64[1] = v26.u32[1];
            uint64x2_t v29 = v28;
            v28.i64[0] = v27.u32[0];
            v28.i64[1] = v27.u32[1];
            int64x2_t v20 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v18, v29), v21), v22), v20);
            int64x2_t v24 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v18, v28), v21), v22), v24);
            int32x2_t v19 = vadd_s32(v19, (int32x2_t)0x400000004);
            v23 -= 4;
          }
          while (v23);
          uint64_t v14 = vaddvq_s64(vaddq_s64(v24, v20));
          if (v13 == v15) {
            return v14;
          }
          a2 += v15;
        }
        else
        {
          uint64_t v14 = 0;
        }
        do
        {
          char v30 = v11 - a2;
          if (v11 < a2) {
            char v30 = 0;
          }
          char v31 = v12 - a2;
          if (v12 < a2) {
            char v31 = 0;
          }
          v14 += (((unint64_t)a7 << (v31 + v30)) + 127) & 0xFFFFFFFFFFFFFF80;
          ++a2;
        }
        while (a1 != a2);
        return v14;
      }
      uint64_t v14 = 0;
      while (1)
      {
        unsigned int v34 = a3 >> a2;
        if (!(a3 >> a2)) {
          goto LABEL_25;
        }
        unsigned int v35 = (a5 - 1 + v34) / a5;
        if (v35 >= 2) {
          break;
        }
        LOBYTE(v34) = 0;
        unsigned int v33 = a4 >> a2;
        if (a4 >> a2)
        {
LABEL_26:
          unsigned int v36 = (a6 - 1 + v33) / a6;
          if (v36 < 2) {
            LOBYTE(v33) = 0;
          }
          else {
            unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v36 - 1)));
          }
        }
LABEL_21:
        v14 += (((unint64_t)a7 << (v33 + v34)) + 127) & 0xFFFFFFFFFFFFFF80;
        if (a1 == ++a2) {
          return v14;
        }
      }
      unsigned int v34 = 32 - __clz(~(-1 << -(char)__clz(v35 - 1)));
LABEL_25:
      unsigned int v33 = a4 >> a2;
      if (a4 >> a2) {
        goto LABEL_26;
      }
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, long long *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64x2_t v18 = a2;
    if (a2)
    {
      int64x2_t v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            int64x2_t v20 = a17;
            a7 = v34;
            ++a11;
            uint64x2_t v18 = (long long *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          int64x2_t v20 = a17;
          a7 = v34;
          ++a11;
          uint64x2_t v18 = (long long *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64x2_t v18 = a2;
    if (a2)
    {
      int64x2_t v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            int64x2_t v20 = a17;
            a7 = v34;
            ++a11;
            uint64x2_t v18 = (uint64_t *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          int64x2_t v20 = a17;
          a7 = v34;
          ++a11;
          uint64x2_t v18 = (uint64_t *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  unsigned int v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        uint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          uint64_t v228 = *v226++;
          *(void *)(v17 + 8 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        unsigned int v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      uint64_t v134 = (uint64_t *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          uint64_t v138 = *v136++;
          *(void *)(v135 + 8 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        uint64_t v134 = (uint64_t *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              uint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (uint64_t *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    uint64_t v223 = *v221++;
                    uint64_t result = v223;
                    *(void *)(v180 + 8 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (uint64_t *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              uint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64_t v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            uint64_t v18 = (int *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          uint64_t v18 = (int *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  unsigned int v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        uint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          int v228 = *v226++;
          *(_DWORD *)(v17 + 4 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        unsigned int v13 = (int *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      uint64_t v134 = (int *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          int v138 = *v136++;
          *(_DWORD *)(v135 + 4 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        uint64_t v134 = (int *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              uint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (unsigned int *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    unsigned int v223 = *v221++;
                    uint64_t result = v223;
                    *(_DWORD *)(v180 + 4 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (unsigned int *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              uint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64_t v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            uint64_t v18 = (__int16 *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          uint64_t v18 = (__int16 *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  unsigned int v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = result;
  uint64_t v18 = a11;
  int v19 = a10;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        --v43;
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        else {
          unsigned int v43 = 0;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & a7) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
        uint64_t result = v27 | v25;
      }
      while (result);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        int v225 = a9;
        long long v226 = v13;
        uint64_t v227 = v47;
        do
        {
          __int16 v228 = *v226++;
          *(_WORD *)(v17 + 2 * (v227 + v54)) = v228;
          uint64_t v227 = (v227 - v29) & v29;
          --v225;
        }
        while (v225);
        uint64_t v54 = (v54 - v38) & v38;
        unsigned int v13 = (__int16 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  unsigned int v244 = a7;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v258 = 1 << v66;
    int v76 = v69 - 1;
    char v253 = v66;
    unsigned int v255 = a10 + a8;
    unsigned int v256 = a8 >> v66;
    unsigned int v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v273 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v258 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v266 = a7 >> v67;
    unsigned int v271 = (v77 + a9 + a7) >> v67;
    if (result >= v271) {
      return result;
    }
    unsigned int v250 = (v75 + ~(-1 << v67)) >> v67;
    uint64_t v84 = v77 & a7;
    int v269 = v77 & v273;
    int v246 = v76 & v255;
    uint64_t v248 = v76 & a8;
    unsigned int v85 = v256;
LABEL_87:
    unsigned int v86 = v85 << v253;
    unsigned int v87 = v85 - v256;
    int v264 = v85 * v250;
    unsigned int v260 = v85 + 1;
    BOOL v88 = v255 >= (v85 + 1) << v253;
    unsigned int v89 = v258;
    if (!v88) {
      unsigned int v89 = v246;
    }
    int v90 = v258 - v248;
    if (!v88) {
      int v90 = v19;
    }
    int v91 = v87 << v253;
    if (v86 >= a8) {
      unsigned int v92 = 0;
    }
    else {
      unsigned int v92 = v248;
    }
    if (v86 >= a8) {
      unsigned int v93 = v89;
    }
    else {
      unsigned int v93 = v90;
    }
    uint64_t v262 = (v92 + v91 - v248) * a11;
    unsigned int v94 = v266;
    while (1)
    {
      unsigned int v95 = v94 << v67;
      unsigned int v96 = v94 + 1;
      int v97 = a9;
      if (v273 >= (v94 + 1) << v67) {
        int v97 = (1 << v67) - v84;
      }
      int v98 = 1 << v67;
      if (v273 < v96 << v67) {
        int v98 = v269;
      }
      if (v95 >= a7) {
        unsigned int v99 = 0;
      }
      else {
        unsigned int v99 = v84;
      }
      if (v95 < a7) {
        int v98 = v97;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v118 = 0;
      uint64_t v101 = 0;
      uint64_t v108 = 0;
      uint64_t v125 = 0;
      if (v93) {
        goto LABEL_144;
      }
LABEL_98:
      unsigned int v94 = v96;
      if (v96 == v271)
      {
        unsigned int v85 = v260;
        int v19 = a10;
        if (v260 == v252) {
          return result;
        }
        goto LABEL_87;
      }
    }
    unsigned int v100 = 0;
    uint64_t v101 = 0;
    int v102 = 1;
    BOOL v103 = v81 != 0;
    BOOL v104 = v83 != 0;
    unsigned int v105 = v81;
    unsigned int v106 = v83;
    do
    {
      --v105;
      if (v103) {
        v101 |= (unint64_t)(v102 & ~(-1 << v81)) << v100++;
      }
      else {
        unsigned int v105 = 0;
      }
      --v106;
      if (!v104) {
        unsigned int v106 = 0;
      }
      v102 *= 2;
      unsigned int v100 = (__PAIR64__(v100, v104) - 1) >> 32;
      BOOL v104 = v106 != 0;
      BOOL v103 = v105 != 0;
    }
    while (v106 | v105);
    int v107 = 0;
    uint64_t v108 = 0;
    int v109 = 1;
    BOOL v110 = v81 != 0;
    BOOL v111 = v83 != 0;
    unsigned int v112 = v81;
    unsigned int v113 = v83;
    do
    {
      int v114 = v110;
      if (v114) {
        --v112;
      }
      else {
        unsigned int v112 = 0;
      }
      int v115 = v107 + v114;
      if (v111) {
        --v113;
      }
      else {
        unsigned int v113 = 0;
      }
      if (v111)
      {
        v108 |= (unint64_t)(v109 & ~(-1 << v83)) << v115;
        int v116 = v115 + 1;
      }
      else
      {
        int v116 = v115;
      }
      v109 *= 2;
      int v107 = v116 - 1;
      BOOL v111 = v113 != 0;
      BOOL v110 = v112 != 0;
    }
    while (v113 | v112);
    unsigned int v117 = 0;
    uint64_t v118 = 0;
    int v119 = 1;
    BOOL v120 = v81 != 0;
    BOOL v121 = v83 != 0;
    unsigned int v122 = v81;
    unsigned int v123 = v83;
    do
    {
      --v122;
      if (v120)
      {
        v118 |= (unint64_t)(v119 & v99) << v117;
        unsigned int v124 = v117 + 1;
      }
      else
      {
        unsigned int v122 = 0;
        unsigned int v124 = v117;
      }
      --v123;
      if (!v121) {
        unsigned int v123 = 0;
      }
      v119 *= 2;
      unsigned int v117 = (__PAIR64__(v124, v121) - 1) >> 32;
      BOOL v121 = v123 != 0;
      BOOL v120 = v122 != 0;
    }
    while (v123 | v122);
    LODWORD(result) = 0;
    uint64_t v125 = 0;
    int v126 = 1;
    BOOL v127 = v81 != 0;
    BOOL v128 = v83 != 0;
    unsigned int v129 = v81;
    unsigned int v130 = v83;
    do
    {
      --v129;
      int v131 = v127;
      if (!v131) {
        unsigned int v129 = 0;
      }
      int v132 = result + v131;
      --v130;
      if (v128) {
        v125 |= (unint64_t)(v126 & v92) << v132++;
      }
      else {
        unsigned int v130 = 0;
      }
      v126 *= 2;
      uint64_t result = (v132 - 1);
      BOOL v128 = v130 != 0;
      BOOL v127 = v129 != 0;
    }
    while (v130 | v129);
    a7 = v244;
    if (!v93) {
      goto LABEL_98;
    }
LABEL_144:
    if (v98)
    {
      int v133 = 0;
      uint64_t v134 = (__int16 *)((char *)&v13[v99 + ((v94 - v266) << v67) - v84] + v262);
      uint64_t v135 = (v94 + v264) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        LODWORD(result) = v98;
        int v136 = v134;
        uint64_t v137 = v118;
        do
        {
          __int16 v138 = *v136++;
          *(_WORD *)(v135 + 2 * (v137 + v125)) = v138;
          uint64_t v137 = (v137 - v101) & v101;
          uint64_t result = (result - 1);
        }
        while (result);
        uint64_t v125 = (v125 - v108) & v108;
        uint64_t v134 = (__int16 *)((char *)v134 + a11);
        ++v133;
      }
      while (v133 != v93);
    }
    goto LABEL_98;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v276);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  int v243 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v139 = a6 >> v20;
    unsigned int v140 = 1 << v21;
    unsigned int v141 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v141 = 0;
    }
    BOOL v142 = v140 >= a5;
    if (v140 < a5) {
      char v143 = v21 + v20 + v141;
    }
    else {
      char v143 = *((unsigned char *)a12 + 12);
    }
    if (v142) {
      LOBYTE(v144) = *((unsigned char *)a12 + 13);
    }
    else {
      int v144 = -v141;
    }
    if (!v139) {
      char v21 = v143;
    }
    char v236 = v21;
    if (v139) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v144;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v236 = v22;
    char v23 = v21 + v20 - v22;
  }
  int v145 = a10;
  unsigned int v146 = a8;
  unsigned int v235 = v282;
  if (v282)
  {
    unsigned int v147 = 1 << v23;
    uint64_t v148 = v283;
    int v149 = v280;
    BOOL v261 = v280 != 0;
    int v263 = v281;
    BOOL v259 = v281 != 0;
    int v234 = 1 << v236;
    if (1 << v236 >= a5) {
      unsigned int v150 = a5;
    }
    else {
      unsigned int v150 = 1 << v236;
    }
    if (v147 >= a6) {
      unsigned int v151 = a6;
    }
    else {
      unsigned int v151 = 1 << v23;
    }
    unsigned int v152 = 32 - __clz(v150 - 1);
    if (v150 >= 2) {
      unsigned int v153 = v152;
    }
    else {
      unsigned int v153 = 0;
    }
    unsigned int v154 = 32 - __clz(v151 - 1);
    if (v151 < 2) {
      unsigned int v154 = 0;
    }
    BOOL v267 = v153 != 0;
    unsigned int v268 = v154;
    BOOL v265 = v154 != 0;
    if (v283)
    {
      int v155 = 0;
      unsigned int v233 = a7 >> v236;
      unsigned int v254 = a8 >> v23;
      int v275 = v279;
      int v270 = v281 | v280;
      int v274 = v284;
      unsigned int v232 = a9 + a7;
      int v231 = (v234 - 1) & (a9 + a7);
      int v229 = v277;
      int v272 = v278;
      int v230 = (v234 - 1) & a7;
      int v251 = (v147 - 1) & (a10 + a8);
      int v249 = (v147 - 1) & a8;
      unsigned int v247 = v147 - v249;
      int v156 = ~(-1 << v153);
      int v245 = v154 | v153;
      int v157 = ~(-1 << v154);
      unsigned int v257 = v153;
      uint64_t v240 = v17;
      int v238 = 1 << v23;
      char v239 = v23;
      do
      {
        int v158 = 0;
        int v159 = v229 + v155;
        unsigned int v160 = (v155 + v233) << v236;
        int v161 = a9;
        if (v232 >= (v155 + v233 + 1) << v236) {
          int v161 = v234 - v230;
        }
        int v162 = 1 << v236;
        if (v232 < (v155 + v233 + 1) << v236) {
          int v162 = v231;
        }
        int v237 = v155;
        if (v160 >= v244) {
          int v163 = v162;
        }
        else {
          int v163 = v161;
        }
        if (v160 >= v244) {
          int v164 = 0;
        }
        else {
          int v164 = v230;
        }
        int v241 = &v243[v164 + (v155 << v236)];
        do
        {
          int v165 = v272 + v158;
          if (v274)
          {
            int v166 = v270;
            if (v270)
            {
              int v167 = 0;
              int v166 = 0;
              int v168 = 1;
              BOOL v169 = v259;
              BOOL v170 = v261;
              int v171 = v149;
              int v172 = v263;
              do
              {
                --v171;
                if (v170) {
                  v166 |= (v168 & v159) << v167;
                }
                else {
                  int v171 = 0;
                }
                if (v170) {
                  ++v167;
                }
                --v172;
                if (v169) {
                  v166 |= (v168 & v165) << v167;
                }
                else {
                  int v172 = 0;
                }
                if (v169) {
                  ++v167;
                }
                v168 *= 2;
                --v167;
                BOOL v169 = v172 != 0;
                BOOL v170 = v171 != 0;
              }
              while (v172 | v171);
            }
          }
          else
          {
            int v166 = v270;
            if (v270)
            {
              int v173 = 0;
              int v166 = 0;
              int v174 = 1;
              BOOL v176 = v259;
              BOOL v175 = v261;
              int v177 = v263;
              int v178 = v149;
              do
              {
                --v177;
                if (v176) {
                  v166 |= (v174 & v165) << v173;
                }
                else {
                  int v177 = 0;
                }
                if (v176) {
                  ++v173;
                }
                --v178;
                if (v175) {
                  v166 |= (v174 & v159) << v173;
                }
                else {
                  int v178 = 0;
                }
                if (v175) {
                  ++v173;
                }
                v174 *= 2;
                --v173;
                BOOL v175 = v178 != 0;
                BOOL v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          int v179 = *(_DWORD *)(v17 + 4 * ((v166 + v275) | ((v166 + v275) >> 8 << 9)));
          if (v179 < 0)
          {
            unint64_t v180 = v17 - *((void *)a13 + 3) + ((unint64_t)(v179 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v181 = a13[2];
            if (result > v181)
            {
              uint64_t v182 = v148;
              uint64_t result = get_level_offset_within_tail(result, v181, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v153 = v257;
              uint64_t v148 = v182;
              unsigned int v147 = v238;
              char v23 = v239;
              uint64_t v17 = v240;
              uint64_t v18 = a11;
              unsigned int v146 = a8;
              int v145 = a10;
              v180 += result;
            }
            unsigned int v183 = (v158 + v254) << v23;
            unsigned int v184 = v247;
            if (a10 + a8 >= (v158 + v254 + 1) << v23)
            {
              unsigned int v185 = v147;
            }
            else
            {
              unsigned int v184 = v145;
              unsigned int v185 = v251;
            }
            if (v183 >= v146) {
              int v186 = 0;
            }
            else {
              int v186 = v249;
            }
            if (v183 >= v146) {
              unsigned int v184 = v185;
            }
            if (!v245)
            {
              uint64_t v204 = 0;
              uint64_t v188 = 0;
              uint64_t v195 = 0;
              uint64_t v211 = 0;
              if (!v184) {
                goto LABEL_189;
              }
LABEL_261:
              if (v163)
              {
                int v218 = 0;
                int v219 = (unsigned __int16 *)((char *)v241 + (v186 + (v158 << v23)) * v18);
                do
                {
                  int v220 = v163;
                  int v221 = v219;
                  uint64_t v222 = v204;
                  do
                  {
                    unsigned int v223 = *v221++;
                    uint64_t result = v223;
                    *(_WORD *)(v180 + 2 * (v222 + v211)) = v223;
                    uint64_t v222 = (v222 - v188) & v188;
                    --v220;
                  }
                  while (v220);
                  uint64_t v211 = (v211 - v195) & v195;
                  int v219 = (unsigned __int16 *)((char *)v219 + v18);
                  ++v218;
                }
                while (v218 != v184);
              }
              goto LABEL_189;
            }
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            int v189 = 1;
            BOOL v190 = v265;
            BOOL v191 = v267;
            unsigned int v192 = v153;
            unsigned int v193 = v268;
            do
            {
              --v192;
              if (v191) {
                v188 |= (unint64_t)(v189 & v156) << v187++;
              }
              else {
                unsigned int v192 = 0;
              }
              --v193;
              if (!v190) {
                unsigned int v193 = 0;
              }
              v189 *= 2;
              unsigned int v187 = (__PAIR64__(v187, v190) - 1) >> 32;
              BOOL v190 = v193 != 0;
              BOOL v191 = v192 != 0;
            }
            while (v193 | v192);
            int v194 = 0;
            uint64_t v195 = 0;
            int v196 = 1;
            BOOL v197 = v265;
            BOOL v198 = v267;
            unsigned int v199 = v153;
            unsigned int v200 = v268;
            do
            {
              --v199;
              int v201 = v198;
              if (!v201) {
                unsigned int v199 = 0;
              }
              int v202 = v194 + v201;
              --v200;
              if (v197) {
                v195 |= (unint64_t)(v196 & v157) << v202++;
              }
              else {
                unsigned int v200 = 0;
              }
              v196 *= 2;
              int v194 = v202 - 1;
              BOOL v197 = v200 != 0;
              BOOL v198 = v199 != 0;
            }
            while (v200 | v199);
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            int v205 = 1;
            BOOL v207 = v265;
            BOOL v206 = v267;
            unsigned int v208 = v153;
            unsigned int v209 = v268;
            do
            {
              --v208;
              if (v206) {
                v204 |= (unint64_t)(v205 & v164) << v203++;
              }
              else {
                unsigned int v208 = 0;
              }
              --v209;
              if (!v207) {
                unsigned int v209 = 0;
              }
              v205 *= 2;
              unsigned int v203 = (__PAIR64__(v203, v207) - 1) >> 32;
              BOOL v207 = v209 != 0;
              BOOL v206 = v208 != 0;
            }
            while (v209 | v208);
            int v210 = 0;
            uint64_t v211 = 0;
            int v212 = 1;
            LOBYTE(result) = v265;
            BOOL v213 = v267;
            unsigned int v214 = v153;
            unsigned int v215 = v268;
            do
            {
              --v214;
              int v216 = v213;
              if (!v216) {
                unsigned int v214 = 0;
              }
              int v217 = v210 + v216;
              --v215;
              if (result) {
                v211 |= (unint64_t)(v212 & v186) << v217++;
              }
              else {
                unsigned int v215 = 0;
              }
              v212 *= 2;
              int v210 = v217 - 1;
              uint64_t result = v215 != 0;
              BOOL v213 = v214 != 0;
            }
            while (v215 | v214);
            unsigned int v153 = v257;
            if (v184) {
              goto LABEL_261;
            }
          }
LABEL_189:
          ++v158;
        }
        while (v148 > (unsigned __int16)v158);
        int v155 = v237 + 1;
      }
      while (v235 > (unsigned __int16)(v237 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>,(AGXTextureMemoryLayout)3>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  if (result)
  {
    uint64_t v18 = a2;
    if (a2)
    {
      char v20 = a17;
      uint64_t v21 = a15;
      int v22 = a13;
      uint64_t v23 = a14;
      int v24 = a12;
      unsigned int v26 = a9;
      unsigned int v34 = a7;
      uint64_t v30 = result;
      if (a18)
      {
        if (a14)
        {
          uint64_t v27 = *(void *)(a18 + 24);
          do
          {
            uint64_t v28 = *(_DWORD *)(a18 + 20) * a11;
            *(void *)(a18 + 24) = v27 + v28;
            uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            unsigned int v26 = a9;
            int v24 = a12;
            int v22 = a13;
            uint64_t v21 = a15;
            char v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          unsigned int v26 = a9;
          int v24 = a12;
          int v22 = a13;
          uint64_t v21 = a15;
          char v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (!result) {
    return result;
  }
  uint64_t v13 = a2;
  if (!a2) {
    return result;
  }
  uint64_t v17 = a11;
  int v19 = a9;
  int v18 = a10;
  unsigned int v240 = a7;
  if (!a12)
  {
    unsigned int v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = 0;
    }
    unsigned int v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v27 | v25)
    {
      unsigned int v28 = 0;
      uint64_t v29 = 0;
      BOOL v30 = v25 != 0;
      BOOL v31 = v27 != 0;
      BOOL v32 = v25 != 0;
      BOOL v33 = v27 != 0;
      int v34 = 1;
      unsigned int v35 = v25;
      unsigned int v36 = v27;
      do
      {
        --v35;
        if (v32) {
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        }
        else {
          unsigned int v35 = 0;
        }
        --v36;
        if (!v33) {
          unsigned int v36 = 0;
        }
        v34 *= 2;
        unsigned int v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        BOOL v33 = v36 != 0;
        BOOL v32 = v35 != 0;
      }
      while (v36 | v35);
      int v37 = 0;
      uint64_t v38 = 0;
      int v39 = 1;
      BOOL v40 = v25 != 0;
      BOOL v41 = v27 != 0;
      unsigned int v42 = v25;
      unsigned int v43 = v27;
      do
      {
        --v42;
        int v44 = v40;
        if (!v44) {
          unsigned int v42 = 0;
        }
        int v45 = v37 + v44;
        if (v41) {
          --v43;
        }
        else {
          unsigned int v43 = 0;
        }
        if (v41) {
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        }
        v39 *= 2;
        int v37 = v45 - 1;
        BOOL v41 = v43 != 0;
        BOOL v40 = v42 != 0;
      }
      while (v43 | v42);
      unsigned int v46 = 0;
      uint64_t v47 = 0;
      BOOL v48 = v25 != 0;
      BOOL v49 = v27 != 0;
      int v50 = 1;
      unsigned int v51 = v25;
      unsigned int v52 = v27;
      do
      {
        --v51;
        if (v48) {
          v47 |= (unint64_t)(v50 & v240) << v46++;
        }
        else {
          unsigned int v51 = 0;
        }
        --v52;
        if (!v49) {
          unsigned int v52 = 0;
        }
        v50 *= 2;
        unsigned int v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        BOOL v49 = v52 != 0;
        BOOL v48 = v51 != 0;
      }
      while (v52 | v51);
      int v53 = 0;
      uint64_t v54 = 0;
      int v55 = 1;
      do
      {
        --v25;
        int v56 = v30;
        if (!v56) {
          unsigned int v25 = 0;
        }
        int v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          int v58 = v57 + 1;
        }
        else
        {
          unsigned int v27 = 0;
          int v58 = v57;
        }
        v55 *= 2;
        int v53 = v58 - 1;
        BOOL v31 = v27 != 0;
        BOOL v30 = v25 != 0;
      }
      while (v27 | v25);
      if (!a10) {
        return result;
      }
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v29 = 0;
      uint64_t v38 = 0;
      uint64_t v54 = 0;
      if (!a10) {
        return result;
      }
    }
    if (a9)
    {
      for (int i = 0; i != a10; ++i)
      {
        uint64_t v226 = 0;
        uint64_t v227 = v47;
        do
        {
          *(unsigned char *)(v54 + result + v227) = *(unsigned char *)(v13 + v226);
          uint64_t v227 = (v227 - v29) & v29;
          ++v226;
        }
        while (a9 != v226);
        uint64_t v54 = (v54 - v38) & v38;
        v13 += a11;
      }
    }
    return result;
  }
  uint64_t v254 = result;
  if (!*((unsigned char *)a12 + 20))
  {
    int v59 = *((unsigned __int8 *)a12 + 13);
    int v60 = *((unsigned __int8 *)a12 + 12);
    unsigned int v61 = 1 << v59;
    unsigned int v62 = a5 >> v60;
    unsigned int v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v63 = 0;
    }
    char v64 = v60 + v59;
    uint64_t result = v60 + v59 + v63;
    if (a6 >> v59) {
      BOOL v65 = 1;
    }
    else {
      BOOL v65 = 1 << v60 >= a5;
    }
    if (v65)
    {
      LOBYTE(v66) = *((unsigned char *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      int v66 = -v63;
    }
    unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v67) = 0;
    }
    if (v61 < a6 && v62 == 0) {
      LOBYTE(v66) = v64 - v67;
    }
    else {
      LOBYTE(v67) = v60;
    }
    int v69 = 1 << v66;
    char v70 = *((unsigned char *)a12 + 15);
    unsigned int v71 = 1 << v70;
    if (v70) {
      BOOL v72 = v71 > a3;
    }
    else {
      BOOL v72 = 1;
    }
    BOOL v73 = v72 || v71 > a4;
    int v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73) {
      int v75 = a3;
    }
    else {
      int v75 = v74;
    }
    unsigned int v255 = 1 << v66;
    int v76 = v69 - 1;
    char v250 = v66;
    unsigned int v251 = a10 + a8;
    unsigned int v253 = a8 >> v66;
    unsigned int v248 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v248) {
      return result;
    }
    uint64_t result = a7 >> v67;
    int v77 = (1 << v67) - 1;
    unsigned int v271 = a9 + a7;
    if (1 << v67 >= a5) {
      unsigned int v78 = a5;
    }
    else {
      unsigned int v78 = 1 << v67;
    }
    unsigned int v79 = 1 << v66;
    if (v255 >= a6) {
      unsigned int v79 = a6;
    }
    unsigned int v80 = 32 - __clz(v78 - 1);
    unsigned int v81 = v78 >= 2 ? v80 : 0;
    unsigned int v82 = 32 - __clz(v79 - 1);
    unsigned int v83 = v79 >= 2 ? v82 : 0;
    unsigned int v265 = a7 >> v67;
    unsigned int v269 = (v77 + a9 + a7) >> v67;
    if (result >= v269) {
      return result;
    }
    unsigned int v246 = (v75 + ~(-1 << v67)) >> v67;
    unsigned int v84 = v77 & a7;
    int v267 = v77 & v271;
    int v85 = (1 << v67) - (v77 & a7);
    int v242 = v76 & v251;
    uint64_t v244 = v76 & a8;
    unsigned int v86 = v253;
    unsigned int v87 = v84;
    uint64_t v259 = a2 - v84;
LABEL_89:
    unsigned int v88 = v86;
    unsigned int v89 = v86 << v250;
    unsigned int v90 = v88 - v253;
    int v263 = v88 * v246;
    unsigned int v257 = v88 + 1;
    BOOL v91 = v251 >= (v88 + 1) << v250;
    unsigned int v92 = v255;
    if (!v91) {
      unsigned int v92 = v242;
    }
    int v93 = v255 - v244;
    if (!v91) {
      int v93 = v18;
    }
    int v94 = v90 << v250;
    if (v89 >= a8) {
      unsigned int v95 = 0;
    }
    else {
      unsigned int v95 = v244;
    }
    if (v89 >= a8) {
      unsigned int v96 = v92;
    }
    else {
      unsigned int v96 = v93;
    }
    uint64_t v261 = (v95 + v94 - v244) * a11;
    unsigned int v97 = v265;
    while (1)
    {
      unsigned int v98 = v97 << v67;
      unsigned int v99 = v97 + 1;
      if (v271 >= (v97 + 1) << v67) {
        int v100 = v85;
      }
      else {
        int v100 = v19;
      }
      int v101 = 1 << v67;
      if (v271 < v99 << v67) {
        int v101 = v267;
      }
      if (v98 >= a7) {
        unsigned int v102 = 0;
      }
      else {
        unsigned int v102 = v87;
      }
      if (v98 < a7) {
        int v101 = v100;
      }
      if (v83 | v81) {
        break;
      }
      uint64_t v121 = 0;
      uint64_t v104 = 0;
      uint64_t v111 = 0;
      uint64_t v128 = 0;
      if (v96) {
        goto LABEL_147;
      }
LABEL_100:
      unsigned int v97 = v99;
      int v19 = a9;
      if (v99 == v269)
      {
        unsigned int v86 = v257;
        int v18 = a10;
        if (v257 == v248) {
          return result;
        }
        goto LABEL_89;
      }
    }
    unsigned int v103 = 0;
    uint64_t v104 = 0;
    int v105 = 1;
    BOOL v106 = v81 != 0;
    BOOL v107 = v83 != 0;
    unsigned int v108 = v81;
    unsigned int v109 = v83;
    do
    {
      --v108;
      if (v106) {
        v104 |= (unint64_t)(v105 & ~(-1 << v81)) << v103++;
      }
      else {
        unsigned int v108 = 0;
      }
      --v109;
      if (!v107) {
        unsigned int v109 = 0;
      }
      v105 *= 2;
      unsigned int v103 = (__PAIR64__(v103, v107) - 1) >> 32;
      BOOL v107 = v109 != 0;
      BOOL v106 = v108 != 0;
    }
    while (v109 | v108);
    int v110 = 0;
    uint64_t v111 = 0;
    int v112 = 1;
    BOOL v113 = v81 != 0;
    BOOL v114 = v83 != 0;
    unsigned int v115 = v81;
    unsigned int v116 = v83;
    do
    {
      int v117 = v113;
      if (v117) {
        --v115;
      }
      else {
        unsigned int v115 = 0;
      }
      int v118 = v110 + v117;
      if (v114) {
        --v116;
      }
      else {
        unsigned int v116 = 0;
      }
      if (v114)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v118;
        int v119 = v118 + 1;
      }
      else
      {
        int v119 = v118;
      }
      v112 *= 2;
      int v110 = v119 - 1;
      BOOL v114 = v116 != 0;
      BOOL v113 = v115 != 0;
    }
    while (v116 | v115);
    unsigned int v120 = 0;
    uint64_t v121 = 0;
    int v122 = 1;
    BOOL v123 = v81 != 0;
    BOOL v124 = v83 != 0;
    unsigned int v125 = v81;
    unsigned int v126 = v83;
    do
    {
      --v125;
      if (v123)
      {
        v121 |= (unint64_t)(v122 & v102) << v120;
        unsigned int v127 = v120 + 1;
      }
      else
      {
        unsigned int v125 = 0;
        unsigned int v127 = v120;
      }
      --v126;
      if (!v124) {
        unsigned int v126 = 0;
      }
      v122 *= 2;
      unsigned int v120 = (__PAIR64__(v127, v124) - 1) >> 32;
      BOOL v124 = v126 != 0;
      BOOL v123 = v125 != 0;
    }
    while (v126 | v125);
    LODWORD(result) = 0;
    uint64_t v128 = 0;
    int v129 = 1;
    BOOL v130 = v81 != 0;
    BOOL v131 = v83 != 0;
    unsigned int v132 = v81;
    unsigned int v133 = v83;
    do
    {
      --v132;
      int v134 = v130;
      if (!v134) {
        unsigned int v132 = 0;
      }
      int v135 = result + v134;
      --v133;
      if (v131) {
        v128 |= (unint64_t)(v129 & v95) << v135++;
      }
      else {
        unsigned int v133 = 0;
      }
      v129 *= 2;
      uint64_t result = (v135 - 1);
      BOOL v131 = v133 != 0;
      BOOL v130 = v132 != 0;
    }
    while (v133 | v132);
    a7 = v240;
    if (!v96) {
      goto LABEL_100;
    }
LABEL_147:
    if (v101)
    {
      int v136 = 0;
      uint64_t v137 = v259 + v261 + v102 + ((v97 - v265) << v67);
      uint64_t v138 = (v97 + v263) * a12[3] * *((unsigned __int8 *)a12 + 9) + v254;
      do
      {
        uint64_t result = 0;
        uint64_t v139 = v121;
        do
        {
          *(unsigned char *)(v138 + v128 + v139) = *(unsigned char *)(v137 + result);
          uint64_t v139 = (v139 - v104) & v104;
          ++result;
        }
        while (v101 != result);
        uint64_t v128 = (v128 - v111) & v111;
        v137 += a11;
        ++v136;
      }
      while (v136 != v96);
    }
    goto LABEL_100;
  }
  uint64_t result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v274);
  char v20 = *((unsigned char *)a12 + 13);
  char v21 = *((unsigned char *)a12 + 12);
  uint64_t v233 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    unsigned int v140 = a6 >> v20;
    unsigned int v141 = 1 << v21;
    unsigned int v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
    if (a6 < 2) {
      unsigned int v142 = 0;
    }
    BOOL v143 = v141 >= a5;
    if (v141 < a5) {
      char v144 = v21 + v20 + v142;
    }
    else {
      char v144 = *((unsigned char *)a12 + 12);
    }
    if (v143) {
      LOBYTE(v145) = *((unsigned char *)a12 + 13);
    }
    else {
      int v145 = -v142;
    }
    if (!v140) {
      char v21 = v144;
    }
    char v234 = v21;
    if (v140) {
      char v23 = *((unsigned char *)a12 + 13);
    }
    else {
      char v23 = v145;
    }
  }
  else
  {
    unsigned int v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2) {
      LOBYTE(v22) = 0;
    }
    char v234 = v22;
    char v23 = v21 + v20 - v22;
  }
  uint64_t v146 = v254;
  int v147 = a10;
  unsigned int v148 = a8;
  unsigned int v232 = v280;
  if (v280)
  {
    uint64_t v149 = (1 << v23);
    unsigned int v150 = v281;
    int v151 = v278;
    BOOL v260 = v278 != 0;
    int v262 = v279;
    BOOL v258 = v279 != 0;
    int v231 = 1 << v234;
    if (1 << v234 >= a5) {
      unsigned int v152 = a5;
    }
    else {
      unsigned int v152 = 1 << v234;
    }
    if (v149 >= a6) {
      unsigned int v153 = a6;
    }
    else {
      unsigned int v153 = 1 << v23;
    }
    unsigned int v154 = 32 - __clz(v152 - 1);
    if (v152 >= 2) {
      unsigned int v155 = v154;
    }
    else {
      unsigned int v155 = 0;
    }
    unsigned int v156 = 32 - __clz(v153 - 1);
    if (v153 < 2) {
      unsigned int v156 = 0;
    }
    BOOL v266 = v155 != 0;
    unsigned int v268 = v156;
    BOOL v264 = v156 != 0;
    if (v281)
    {
      int v157 = 0;
      unsigned int v230 = v240 >> v234;
      unsigned int v252 = a8 >> v23;
      int v270 = v279 | v278;
      int v273 = v282;
      unsigned int v229 = a9 + v240;
      int v228 = v275;
      int v158 = v277;
      int v272 = v276;
      unsigned int v247 = (v149 - 1) & a8;
      int v249 = (v149 - 1) & (a10 + a8);
      int v245 = v149 - v247;
      int v159 = ~(-1 << v155);
      int v241 = v277;
      int v243 = v156 | v155;
      int v160 = ~(-1 << v156);
      unsigned int v256 = v155;
      unsigned int v236 = v281;
      char v237 = v23;
      do
      {
        int v161 = 0;
        int v162 = v228 + v157;
        unsigned int v163 = (v157 + v230) << v234;
        int v164 = v231 - ((v231 - 1) & v240);
        if (v229 < (v157 + v230 + 1) << v234) {
          int v164 = v19;
        }
        int v165 = 1 << v234;
        if (v229 < (v157 + v230 + 1) << v234) {
          int v165 = (v231 - 1) & (a9 + v240);
        }
        int v235 = v157;
        if (v163 >= v240) {
          int v166 = v165;
        }
        else {
          int v166 = v164;
        }
        if (v163 >= v240) {
          int v167 = 0;
        }
        else {
          int v167 = (v231 - 1) & v240;
        }
        uint64_t v238 = (v167 + (v157 << v234)) + v233;
        do
        {
          int v168 = v272 + v161;
          if (v273)
          {
            int v169 = v270;
            if (v270)
            {
              int v170 = 0;
              int v169 = 0;
              int v171 = 1;
              BOOL v172 = v258;
              BOOL v173 = v260;
              int v174 = v151;
              int v175 = v262;
              do
              {
                --v174;
                if (v173) {
                  v169 |= (v171 & v162) << v170;
                }
                else {
                  int v174 = 0;
                }
                if (v173) {
                  ++v170;
                }
                --v175;
                if (v172) {
                  v169 |= (v171 & v168) << v170;
                }
                else {
                  int v175 = 0;
                }
                if (v172) {
                  ++v170;
                }
                v171 *= 2;
                --v170;
                BOOL v172 = v175 != 0;
                BOOL v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            int v169 = v270;
            if (v270)
            {
              int v176 = 0;
              int v169 = 0;
              int v177 = 1;
              BOOL v179 = v258;
              BOOL v178 = v260;
              int v180 = v262;
              int v181 = v151;
              do
              {
                --v180;
                if (v179) {
                  v169 |= (v177 & v168) << v176;
                }
                else {
                  int v180 = 0;
                }
                if (v179) {
                  ++v176;
                }
                --v181;
                if (v178) {
                  v169 |= (v177 & v162) << v176;
                }
                else {
                  int v181 = 0;
                }
                if (v178) {
                  ++v176;
                }
                v177 *= 2;
                --v176;
                BOOL v178 = v181 != 0;
                BOOL v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          int v182 = *(_DWORD *)(v146 + 4 * ((v169 + v158) | ((v169 + v158) >> 8 << 9)));
          if (v182 < 0)
          {
            unint64_t v183 = v146 - *((void *)a13 + 3) + ((unint64_t)(v182 & 0x1FFFFFFF) << 14);
            uint64_t result = *a13;
            unsigned int v184 = a13[2];
            if (result > v184)
            {
              uint64_t v185 = v149;
              uint64_t result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              unsigned int v155 = v256;
              uint64_t v149 = v185;
              uint64_t v17 = a11;
              unsigned int v150 = v236;
              char v23 = v237;
              unsigned int v148 = a8;
              int v147 = a10;
              uint64_t v146 = v254;
              v183 += result;
            }
            unsigned int v186 = (v161 + v252) << v23;
            int v187 = v245;
            if (a10 + a8 >= (v161 + v252 + 1) << v23)
            {
              int v188 = v149;
            }
            else
            {
              int v187 = v147;
              int v188 = v249;
            }
            if (v186 >= v148) {
              unsigned int v189 = 0;
            }
            else {
              unsigned int v189 = v247;
            }
            if (v186 >= v148) {
              int v187 = v188;
            }
            if (!v243)
            {
              uint64_t v207 = 0;
              uint64_t v191 = 0;
              uint64_t v198 = 0;
              uint64_t v214 = 0;
              int v158 = v241;
              if (!v187) {
                goto LABEL_192;
              }
LABEL_264:
              if (v166)
              {
                int v221 = 0;
                uint64_t v222 = v238 + (v189 + (v161 << v23)) * v17;
                do
                {
                  uint64_t v223 = 0;
                  uint64_t v224 = v207;
                  do
                  {
                    uint64_t result = *(unsigned __int8 *)(v222 + v223);
                    *(unsigned char *)(v214 + v183 + v224) = result;
                    uint64_t v224 = (v224 - v191) & v191;
                    ++v223;
                  }
                  while (v166 != v223);
                  uint64_t v214 = (v214 - v198) & v198;
                  v222 += v17;
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_192;
            }
            unsigned int v190 = 0;
            uint64_t v191 = 0;
            int v192 = 1;
            BOOL v193 = v264;
            BOOL v194 = v266;
            unsigned int v195 = v155;
            unsigned int v196 = v268;
            do
            {
              --v195;
              if (v194) {
                v191 |= (unint64_t)(v192 & v159) << v190++;
              }
              else {
                unsigned int v195 = 0;
              }
              --v196;
              if (!v193) {
                unsigned int v196 = 0;
              }
              v192 *= 2;
              unsigned int v190 = (__PAIR64__(v190, v193) - 1) >> 32;
              BOOL v193 = v196 != 0;
              BOOL v194 = v195 != 0;
            }
            while (v196 | v195);
            int v197 = 0;
            uint64_t v198 = 0;
            int v199 = 1;
            BOOL v200 = v264;
            BOOL v201 = v266;
            unsigned int v202 = v155;
            unsigned int v203 = v268;
            do
            {
              --v202;
              int v204 = v201;
              if (!v204) {
                unsigned int v202 = 0;
              }
              int v205 = v197 + v204;
              --v203;
              if (v200) {
                v198 |= (unint64_t)(v199 & v160) << v205++;
              }
              else {
                unsigned int v203 = 0;
              }
              v199 *= 2;
              int v197 = v205 - 1;
              BOOL v200 = v203 != 0;
              BOOL v201 = v202 != 0;
            }
            while (v203 | v202);
            unsigned int v206 = 0;
            uint64_t v207 = 0;
            int v208 = 1;
            BOOL v210 = v264;
            BOOL v209 = v266;
            unsigned int v211 = v155;
            unsigned int v212 = v268;
            do
            {
              --v211;
              if (v209) {
                v207 |= (unint64_t)(v208 & v167) << v206++;
              }
              else {
                unsigned int v211 = 0;
              }
              --v212;
              if (!v210) {
                unsigned int v212 = 0;
              }
              v208 *= 2;
              unsigned int v206 = (__PAIR64__(v206, v210) - 1) >> 32;
              BOOL v210 = v212 != 0;
              BOOL v209 = v211 != 0;
            }
            while (v212 | v211);
            int v213 = 0;
            uint64_t v214 = 0;
            int v215 = 1;
            LOBYTE(result) = v264;
            BOOL v216 = v266;
            unsigned int v217 = v155;
            unsigned int v218 = v268;
            do
            {
              --v217;
              int v219 = v216;
              if (!v219) {
                unsigned int v217 = 0;
              }
              int v220 = v213 + v219;
              --v218;
              if (result) {
                v214 |= (unint64_t)(v215 & v189) << v220++;
              }
              else {
                unsigned int v218 = 0;
              }
              v215 *= 2;
              int v213 = v220 - 1;
              uint64_t result = v218 != 0;
              BOOL v216 = v217 != 0;
            }
            while (v218 | v217);
            unsigned int v155 = v256;
            int v158 = v241;
            if (v187) {
              goto LABEL_264;
            }
          }
LABEL_192:
          ++v161;
        }
        while (v150 > (unsigned __int16)v161);
        int v157 = v235 + 1;
        int v19 = a9;
      }
      while (v232 > (unsigned __int16)(v235 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)1>(uint64_t result, uint64_t *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (uint64_t *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 11) / 0xCu;
        unsigned int v26 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xC, (a12 + 11) / 0xCu, (a13 + 11) / 0xCu, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 9) / 0xAu;
        unsigned int v26 = (a3 + 11) / 0xCu;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xA, (a12 + 11) / 0xCu, (a13 + 9) / 0xAu, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 9) / 0xAu;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 0xA, (a12 + 9) / 0xAu, (a13 + 9) / 0xAu, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 9) / 0xAu;
        unsigned int v25 = (a4 + 7) >> 3;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 >> 3, (a12 + 9) / 0xAu, (a13 + 7) >> 3, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 5) / 6u;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 6, (a12 + 9) / 0xAu, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 9) / 0xAu;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 5, (a12 + 9) / 0xAu, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 7) >> 3;
        unsigned int v26 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 3, (a12 + 7) >> 3, (a13 + 7) >> 3, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 7) >> 3;
        unsigned int v25 = (a4 + 5) / 6u;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 6, (a12 + 7) >> 3, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 7) >> 3;
        unsigned int v25 = (a4 + 4) / 5u;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 5, (a12 + 7) >> 3, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 7) >> 3;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 2, (a12 + 7) >> 3, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 5) / 6u;
        unsigned int v26 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 6, (a12 + 5) / 6u, (a13 + 5) / 6u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 5) / 6u;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 5, (a12 + 5) / 6u, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 4) / 5u;
        unsigned int v26 = (a3 + 4) / 5u;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 / 5, (a12 + 4) / 5u, (a13 + 4) / 5u, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v26 = (a3 + 4) / 5u;
        unsigned int v25 = (a4 + 3) >> 2;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 >> 2, (a12 + 4) / 5u, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)1>(uint64_t result, long long *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  if (result)
  {
    int v18 = a2;
    if (a2)
    {
      uint64_t v19 = a14;
      if (a14)
      {
        uint64_t v23 = result;
        unsigned int v25 = (a4 + 3) >> 2;
        unsigned int v26 = (a3 + 3) >> 2;
        do
        {
          uint64_t result = agxsTwiddleAddressCommon<(TwiddleOrder)1,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)1>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          int v18 = (long long *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v154 = v21;
  uint64_t v155 = v22;
  uint64_t v144 = v23;
  uint64_t v24 = v12;
  uint64_t v185 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v159 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v143 = v14 + a10 - 1;
  unsigned int v145 = v143 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v163 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v163;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v164 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v163;
  BOOL v153 = isLevelTiled;
  if (v26 <= v145)
  {
    unsigned int v152 = v16 + a9 - 1;
    unsigned int v142 = v16 >> 4;
    if (v16 >> 4 <= v152 >> 4)
    {
      unsigned int v139 = v20 - 1;
      unsigned int v141 = (v18 - 1) >> 4;
      int v161 = ((v20 - 1) & 0xF) + 1;
      unsigned int v162 = (v20 - 1) >> 4;
      int v140 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v150 = v38.i32[0] | v38.i32[1];
      int8x8_t v149 = v38;
      BOOL v147 = v38.i32[0] != 0;
      BOOL v148 = v38.i32[1] != 0;
      unint64_t v138 = 8 * v28 * (unint64_t)v27;
      unsigned int v151 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v159) {
          int v40 = v159;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v142;
        if (v143 < v39) {
          unsigned int v39 = v143;
        }
        int v146 = v40 - 16 * v26;
        int v157 = v39 - v40 + 1;
        unsigned int v158 = 16 * v26;
        if (v26 == v141) {
          unsigned int v42 = v140;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v156 = v144 + (v40 - v159) * a11;
        unsigned int v160 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v152 < v44) {
            unsigned int v44 = v152;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v162) {
            unsigned int v47 = v161;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v158 >= v159 && v43 >= v16)
          {
            int v49 = v161;
            if (v41 != v162) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v157 != v42;
          }
          if (v153)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v138 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v129 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v130 = 0;
              if (v73) {
                goto LABEL_159;
              }
LABEL_148:
              unsigned int v131 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v131 | v130) {
                goto LABEL_149;
              }
LABEL_160:
              uint64_t v133 = 0;
            }
            else
            {
              unsigned int v130 = 32 - __clz(~(-1 << -(char)__clz(v129)));
              if ((v73 & 1) == 0) {
                goto LABEL_148;
              }
LABEL_159:
              unsigned int v131 = 0;
              if (!v130) {
                goto LABEL_160;
              }
LABEL_149:
              int v132 = 0;
              uint64_t v133 = 0;
              int v134 = v41 & v129;
              BOOL v135 = v130 != 0;
              BOOL v136 = v131 != 0;
              int v137 = 1;
              do
              {
                --v130;
                if (v135) {
                  v133 |= (unint64_t)(v137 & v134) << v132++;
                }
                else {
                  unsigned int v130 = 0;
                }
                --v131;
                if (v136) {
                  v133 |= (unint64_t)(v137 & v26 & ((v74 >> 4) - 1)) << v132++;
                }
                else {
                  unsigned int v131 = 0;
                }
                v137 *= 2;
                --v132;
                BOOL v136 = v131 != 0;
                BOOL v135 = v130 != 0;
              }
              while (v131 | v130);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v158 / v74 * ((v70 + v139) / v70)) << 14) + (v133 << 10);
            goto LABEL_59;
          }
          if (v150)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v147;
            BOOL v55 = v148;
            __int32 v57 = v149.i32[0];
            __int32 v56 = v149.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v155 + 8 * v66);
          unint64_t v77 = v156 + 8 * (v45 - v16);
          unsigned int v78 = (void *)(v154 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v164)
          {
            if (!v79)
            {
              int v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            unsigned int v82 = v78;
            int v83 = v46;
            int v84 = v45;
            memcpy(__dst, v80, sizeof(__dst));
            int v45 = v84;
            unsigned int v43 = 16 * v41;
            int v85 = __dst;
            int v46 = v83;
            unsigned int v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v160;
            uint64_t v36 = v163;
          }
          else
          {
            int v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int v166 = v85;
          unsigned __int8 v174 = v47;
          unsigned __int8 v175 = v42;
          unsigned int v170 = v146;
          unsigned int v171 = v45 - v43;
          int v167 = v76;
          unint64_t v168 = v77;
          uint64_t v169 = a11;
          unsigned int v172 = v157;
          unsigned int v173 = v46;
          if (!v48)
          {
            int v86 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v87 = (unint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v177, 128, (unint64_t)v85, *v76, v86)];
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v179, 128, v87, v76[1], v86);
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v178, 128, v88, v76[2], v86);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v180, 128, v89, v76[3], v86);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v181, 128, v90, v76[4], v86);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v183, 128, v91, v76[5], v86);
            uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v182, 128, v92, v76[6], v86);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v184, 128, v92 + v93, v76[7], v86);
            uint64_t v94 = v172;
            unsigned int v16 = v151;
            if (!v172 || !v173)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::compressMacroblock((unint64_t)v177, 128, (unint64_t)v166, v167, v174, v175, *(_DWORD *)(*(void *)(v163 + 208) + 52));
              if (!v164) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v95 = 0;
            unint64_t v96 = (unint64_t)v170 << 7;
            uint64_t v97 = 8 * v171;
            unsigned int v98 = (char *)v177 + v96 + v97;
            unint64_t v99 = v168;
            uint64_t v100 = v169;
            unint64_t v101 = 8 * v173;
            if (v101 <= 1) {
              unint64_t v102 = 1;
            }
            else {
              unint64_t v102 = 8 * v173;
            }
            unint64_t v103 = v96 + v97;
            uint64_t v104 = (char *)v177 + v96 + v97;
            if (v102) {
              BOOL v105 = (v102 - 1) >> 32 == 0;
            }
            else {
              BOOL v105 = 0;
            }
            char v106 = !v105;
            uint64_t v107 = v102 & 0x7FFFFFFE0;
            uint64_t v108 = v102 & 0x7FFFFFFF8;
            unsigned int v109 = (char *)&v177[1] + v103;
            int v110 = (long long *)(v168 + 16);
            uint64_t v111 = v98;
            unint64_t v112 = v168;
            while (2)
            {
              BOOL v113 = (char *)(v99 + v100 * v95);
              BOOL v114 = &v98[128 * v95];
              if ((unint64_t)(&v104[128 * v95] - v113) < 0x20) {
                char v115 = 1;
              }
              else {
                char v115 = v106;
              }
              if (v115)
              {
                int v116 = 0;
LABEL_127:
                unsigned int v126 = v116 + 1;
                do
                {
                  char v127 = *v113++;
                  *v114++ = v127;
                }
                while (v101 > v126++);
              }
              else
              {
                if (v102 >= 0x20)
                {
                  int v118 = v110;
                  int v119 = v109;
                  uint64_t v120 = v102 & 0x7FFFFFFE0;
                  do
                  {
                    long long v121 = *v118;
                    *(v119 - 1) = *(v118 - 1);
                    *int v119 = v121;
                    v119 += 2;
                    v118 += 2;
                    v120 -= 32;
                  }
                  while (v120);
                  if (v102 == v107) {
                    goto LABEL_110;
                  }
                  uint64_t v117 = v102 & 0x7FFFFFFE0;
                  if ((v102 & 0x18) == 0)
                  {
                    v113 += v107;
                    v114 += v107;
                    int v116 = v102 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v117 = 0;
                }
                v114 += v108;
                unint64_t v122 = v117 - (v102 & 0x7FFFFFFF8);
                BOOL v123 = (uint64_t *)(v112 + v117);
                BOOL v124 = &v111[v117];
                do
                {
                  uint64_t v125 = *v123++;
                  *(void *)BOOL v124 = v125;
                  v124 += 8;
                  v122 += 8;
                }
                while (v122);
                if (v102 != v108)
                {
                  v113 += v108;
                  int v116 = v102 & 0xFFFFFFF8;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v95;
              v109 += 128;
              int v110 = (long long *)((char *)v110 + v100);
              v112 += v100;
              v111 += 128;
              if (v95 == v94) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v151;
          if (!v164) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v152 >> 4;
          uint64_t v36 = v163;
          unsigned int v42 = v160;
        }
        while (!v31);
        BOOL v31 = v26++ == v145;
      }
      while (!v31);
    }
  }
}

uint64_t getCompressionCodecConfig(__int16 a1)
{
  char v1 = a1;
  uint64_t result = HIBYTE(a1);
  switch((int)result)
  {
    case 0:
      unsigned int v3 = &unk_268D5A000;
      {
        char v5 = v1;
        unsigned int v3 = &unk_268D5A000;
        char v1 = v5;
        if (v4)
        {
          getCompressionCodecConfig(AGXTextureCompressionSettings)::losslessCodecConfig = 1;
          unsigned int v3 = (unsigned char *)&unk_268D5A000;
          char v1 = v5;
        }
      }
      if ((((v1 & 8) == 0) & v3[3688]) != 0) {
        uint64_t result = 4;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = 4;
      break;
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v173 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v170 = a8 + a10 - 1;
  unsigned int v172 = v170 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v189 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v172)
  {
    unsigned int v180 = a7 + a9 - 1;
    if (a7 >> 4 <= v180 >> 4)
    {
      unsigned int v167 = a5 - 1;
      unsigned int v169 = (a6 - 1) >> 4;
      int v187 = ((a5 - 1) & 0xF) + 1;
      unsigned int v188 = (a5 - 1) >> 4;
      int v168 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(void *)&long long v29 = 0x2000000020;
      *(int32x2_t *)&long long v30 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL)));
      *(int32x2_t *)&long long v31 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)&v30))));
      *(int8x8_t *)&long long v32 = vbic_s8(*(int8x8_t *)&v31, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      int v179 = v32 | DWORD1(v32);
      uint64_t v177 = v32;
      BOOL v175 = v32 != 0;
      BOOL v176 = DWORD1(v32) != 0;
      unint64_t v166 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v33 = (16 * v17) | 0xF;
        unsigned int v34 = v173;
        if (16 * v17 <= v173) {
          int v35 = v173;
        }
        else {
          int v35 = 16 * v17;
        }
        unsigned int v36 = a7 >> 4;
        if (v170 < v33) {
          unsigned int v33 = v170;
        }
        int v174 = v35 - 16 * v17;
        int v185 = v33 - v35 + 1;
        unsigned int v186 = 16 * v17;
        if (v17 == v169) {
          unsigned int v37 = v168;
        }
        else {
          unsigned int v37 = 16;
        }
        uint64_t v184 = a3 + (v35 - v173) * a11;
        do
        {
          unsigned int v47 = 16 * v36;
          unsigned int v48 = 16 * (v36 + 1) - 1;
          if (16 * v36 <= a7) {
            int v49 = a7;
          }
          else {
            int v49 = 16 * v36;
          }
          if (v180 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v36 == v188) {
            unsigned int v51 = v187;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (v186 >= v34 && v47 >= a7)
          {
            int v53 = v187;
            if (v36 != v188) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v185 != v37;
          }
          if (isLevelTiled)
          {
            unsigned int v74 = 0;
            uint64_t v75 = v166 >> (*(unsigned char *)(a1 + 57) != 0);
            char v76 = 1;
            if (v75 > 127)
            {
              if (v75 > 511)
              {
                if (v75 == 512)
                {
                  unsigned int v74 = 16;
                  char v77 = 1;
                  unsigned int v78 = 16;
                }
                else
                {
                  char v77 = 1;
                  unsigned int v78 = 0;
                  if (v75 == 1024)
                  {
                    unsigned int v78 = 8;
                    unsigned int v74 = 16;
                  }
                }
              }
              else if (v75 == 128)
              {
                char v76 = 0;
                char v77 = 0;
                unsigned int v74 = 32;
                unsigned int v78 = 32;
              }
              else
              {
                char v77 = 1;
                unsigned int v78 = 0;
                if (v75 == 256)
                {
                  char v76 = 0;
                  unsigned int v78 = 16;
                  unsigned int v74 = 32;
                }
              }
            }
            else
            {
              char v77 = 1;
              unsigned int v78 = 0;
              switch(v75)
              {
                case 4:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v78 = 128;
                  unsigned int v74 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v74 = 128;
                  unsigned int v78 = 128;
                  break;
                case 16:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v78 = 64;
                  unsigned int v74 = 128;
                  break;
                case 32:
                  char v76 = 0;
                  char v77 = 0;
                  unsigned int v74 = 64;
                  unsigned int v78 = 64;
                  break;
                default:
                  if (v75 == 64)
                  {
                    char v76 = 0;
                    char v77 = 0;
                    unsigned int v78 = 32;
                    unsigned int v74 = 64;
                  }
                  break;
              }
            }
            unsigned int v157 = (v74 >> 4) - 1;
            if (v76)
            {
              unsigned int v158 = 0;
              if (v77) {
                goto LABEL_226;
              }
LABEL_215:
              unsigned int v159 = 32 - __clz(~(-1 << -(char)__clz(((v78 + 15) >> 4) - 1)));
              if (v159 | v158) {
                goto LABEL_216;
              }
LABEL_227:
              uint64_t v161 = 0;
            }
            else
            {
              unsigned int v158 = 32 - __clz(~(-1 << -(char)__clz(v157)));
              if ((v77 & 1) == 0) {
                goto LABEL_215;
              }
LABEL_226:
              unsigned int v159 = 0;
              if (!v158) {
                goto LABEL_227;
              }
LABEL_216:
              int v160 = 0;
              uint64_t v161 = 0;
              int v162 = v36 & v157;
              BOOL v163 = v158 != 0;
              BOOL v164 = v159 != 0;
              int v165 = 1;
              do
              {
                --v158;
                if (v163) {
                  v161 |= (unint64_t)(v165 & v162) << v160++;
                }
                else {
                  unsigned int v158 = 0;
                }
                --v159;
                if (v164) {
                  v161 |= (unint64_t)(v165 & v17 & ((v78 >> 4) - 1)) << v160++;
                }
                else {
                  unsigned int v159 = 0;
                }
                v165 *= 2;
                --v160;
                BOOL v164 = v159 != 0;
                BOOL v163 = v158 != 0;
              }
              while (v159 | v158);
            }
            unint64_t v62 = ((unint64_t)(v47 / v74 + v186 / v78 * ((v74 + v167) / v74)) << 14) + (v161 << 7);
            goto LABEL_60;
          }
          if (v179)
          {
            int v55 = 0;
            uint64_t v56 = 0;
            int v57 = 1;
            BOOL v59 = v175;
            BOOL v58 = v176;
            int v61 = v177;
            int v60 = HIDWORD(v177);
            do
            {
              --v60;
              if (v58) {
                v56 |= (unint64_t)(v57 & v36) << v55++;
              }
              else {
                int v60 = 0;
              }
              --v61;
              if (v59) {
                v56 |= (unint64_t)(v57 & v17) << v55++;
              }
              else {
                int v61 = 0;
              }
              v57 *= 2;
              --v55;
              BOOL v59 = v61 != 0;
              BOOL v58 = v60 != 0;
            }
            while (v61 | v60);
          }
          else
          {
            uint64_t v56 = 0;
          }
          unint64_t v62 = v56 << 7;
LABEL_60:
          unsigned int v63 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20)
          {
            unsigned int v68 = 0;
            if (!v65)
            {
LABEL_82:
              uint64_t v70 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
            if (!(v68 | v65)) {
              goto LABEL_82;
            }
          }
          int v69 = 0;
          uint64_t v70 = 0;
          BOOL v71 = v65 != 0;
          BOOL v72 = v68 != 0;
          int v73 = 1;
          do
          {
            --v65;
            if (v71) {
              v70 |= (unint64_t)(v73 & v36) << v69++;
            }
            else {
              unsigned int v65 = 0;
            }
            --v68;
            if (v72) {
              v70 |= (unint64_t)(v73 & v17) << v69++;
            }
            else {
              unsigned int v68 = 0;
            }
            v73 *= 2;
            --v69;
            BOOL v72 = v68 != 0;
            BOOL v71 = v65 != 0;
          }
          while (v68 | v65);
LABEL_83:
          int v79 = v51 < 0x10 || v52;
          unsigned int v80 = (unsigned __int8 *)(a4 + 8 * v70);
          char v81 = (_OWORD *)(a2 + v62);
          if (v37 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v79;
          }
          if (v189)
          {
            if (!v82)
            {
              unint64_t v90 = v201;
LABEL_97:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v184 + v49 - a7, a11, (unint64_t)v90, v80, v51, v37, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v32, *(double *)&v31, *(int8x8_t *)&v30, *(double *)&v29, *(double *)&v25, v26, v27);
              if (v189) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            long long v83 = v81[13];
            v201[12] = v81[12];
            v201[13] = v83;
            long long v84 = v81[15];
            v201[14] = v81[14];
            v201[15] = v84;
            long long v85 = v81[9];
            v201[8] = v81[8];
            v201[9] = v85;
            long long v86 = v81[11];
            v201[10] = v81[10];
            v201[11] = v86;
            long long v87 = v81[5];
            v201[4] = v81[4];
            v201[5] = v87;
            long long v88 = v81[7];
            v201[6] = v81[6];
            v201[7] = v88;
            long long v89 = v81[1];
            v201[0] = *v81;
            v201[1] = v89;
            long long v32 = v81[2];
            long long v31 = v81[3];
            unint64_t v90 = v201;
            v201[2] = v32;
            v201[3] = v31;
          }
          else
          {
            unint64_t v90 = v81;
            if (!v82) {
              goto LABEL_97;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          uint64_t v191 = v90;
          unsigned __int8 v199 = v51;
          unsigned __int8 v200 = v37;
          unsigned int v195 = v174;
          unsigned int v196 = v49 - v47;
          int v192 = (unsigned char *)(a4 + 8 * v70);
          uint64_t v193 = v184 + v49 - a7;
          uint64_t v194 = a11;
          unsigned int v197 = v185;
          unsigned int v198 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            if (v189) {
              goto LABEL_27;
            }
            goto LABEL_28;
          }
          int v178 = *(_DWORD *)(*(void *)(a1 + 208) + 52);
          unsigned int v91 = *v80;
          if (*v80)
          {
            if (v91 < 0xF0)
            {
              if (v91 == 31)
              {
                int16x4_t v93 = *(int16x4_t *)((char *)v90 + 8);
                *(void *)&long long v30 = *((void *)v90 + 2);
                *(void *)&long long v29 = *((void *)v90 + 3);
                int16x4_t v25 = vuzp1_s16(*(int16x4_t *)v90, *(int16x4_t *)&v30);
                int16x4_t v94 = vuzp2_s16(*(int16x4_t *)v90, *(int16x4_t *)&v30);
                int16x4_t v202 = v25;
                int16x4_t v204 = v94;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v93, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v93, *(int16x4_t *)&v29);
                uint64_t v206 = v32;
                uint64_t v208 = v31;
                uint64_t v92 = 32;
              }
              else if (v91 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8(*(int8x8_t *)v90, 0);
                int16x4_t v202 = (int16x4_t)v32;
                int16x4_t v204 = (int16x4_t)v32;
                uint64_t v206 = v32;
                uint64_t v208 = v32;
                uint64_t v92 = 1;
              }
              else
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v202, 16, (uint64_t)v90, v91);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v202, 16, (uint64_t)v90, v91, v178);
              uint64_t v92 = 16;
            }
          }
          else
          {
            uint64_t v92 = 0;
            int16x4_t v202 = 0;
            int16x4_t v204 = 0;
            uint64_t v206 = 0;
            uint64_t v208 = 0;
          }
          uint64_t v95 = (int16x4_t *)((char *)v90 + v92);
          unsigned int v96 = v80[1];
          if (v80[1])
          {
            if (v96 < 0xF0)
            {
              if (v96 == 31)
              {
                int16x4_t v98 = v95[1];
                *(int16x4_t *)&long long v30 = v95[2];
                *(int16x4_t *)&long long v29 = v95[3];
                int16x4_t v25 = vuzp1_s16(*v95, *(int16x4_t *)&v30);
                int16x4_t v99 = vuzp2_s16(*v95, *(int16x4_t *)&v30);
                int16x4_t v210 = v25;
                int16x4_t v212 = v99;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v98, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v98, *(int16x4_t *)&v29);
                uint64_t v214 = v32;
                uint64_t v216 = v31;
                uint64_t v97 = 32;
              }
              else if (v96 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v95, 0);
                int16x4_t v210 = (int16x4_t)v32;
                int16x4_t v212 = (int16x4_t)v32;
                uint64_t v214 = v32;
                uint64_t v216 = v32;
                uint64_t v97 = 1;
              }
              else
              {
                uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v210, 16, (uint64_t)v95, v96);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v210, 16, (uint64_t)v95, v96, v178);
              uint64_t v97 = 16;
            }
          }
          else
          {
            uint64_t v97 = 0;
            int16x4_t v210 = 0;
            int16x4_t v212 = 0;
            uint64_t v214 = 0;
            uint64_t v216 = 0;
          }
          uint64_t v100 = (int16x4_t *)((char *)v95 + v97);
          unsigned int v101 = v80[2];
          if (v80[2])
          {
            if (v101 < 0xF0)
            {
              if (v101 == 31)
              {
                int16x4_t v103 = v100[1];
                *(int16x4_t *)&long long v30 = v100[2];
                *(int16x4_t *)&long long v29 = v100[3];
                int16x4_t v25 = vuzp1_s16(*v100, *(int16x4_t *)&v30);
                int16x4_t v104 = vuzp2_s16(*v100, *(int16x4_t *)&v30);
                int16x4_t v203 = v25;
                int16x4_t v205 = v104;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v103, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v103, *(int16x4_t *)&v29);
                uint64_t v207 = v32;
                uint64_t v209 = v31;
                uint64_t v102 = 32;
              }
              else if (v101 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v100, 0);
                int16x4_t v203 = (int16x4_t)v32;
                int16x4_t v205 = (int16x4_t)v32;
                uint64_t v207 = v32;
                uint64_t v209 = v32;
                uint64_t v102 = 1;
              }
              else
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v203, 16, (uint64_t)v100, v101);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v203, 16, (uint64_t)v100, v101, v178);
              uint64_t v102 = 16;
            }
          }
          else
          {
            uint64_t v102 = 0;
            int16x4_t v203 = 0;
            int16x4_t v205 = 0;
            uint64_t v207 = 0;
            uint64_t v209 = 0;
          }
          BOOL v105 = (int16x4_t *)((char *)v100 + v102);
          unsigned int v106 = v80[3];
          if (v80[3])
          {
            if (v106 < 0xF0)
            {
              if (v106 == 31)
              {
                int16x4_t v108 = v105[1];
                *(int16x4_t *)&long long v30 = v105[2];
                *(int16x4_t *)&long long v29 = v105[3];
                int16x4_t v25 = vuzp1_s16(*v105, *(int16x4_t *)&v30);
                int16x4_t v109 = vuzp2_s16(*v105, *(int16x4_t *)&v30);
                int16x4_t v211 = v25;
                int16x4_t v213 = v109;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v108, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v108, *(int16x4_t *)&v29);
                uint64_t v215 = v32;
                uint64_t v217 = v31;
                uint64_t v107 = 32;
              }
              else if (v106 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v105, 0);
                int16x4_t v211 = (int16x4_t)v32;
                int16x4_t v213 = (int16x4_t)v32;
                uint64_t v215 = v32;
                uint64_t v217 = v32;
                uint64_t v107 = 1;
              }
              else
              {
                uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v211, 16, (uint64_t)v105, v106);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v211, 16, (uint64_t)v105, v106, v178);
              uint64_t v107 = 16;
            }
          }
          else
          {
            uint64_t v107 = 0;
            int16x4_t v211 = 0;
            int16x4_t v213 = 0;
            uint64_t v215 = 0;
            uint64_t v217 = 0;
          }
          int v110 = (int16x4_t *)((char *)v105 + v107);
          unsigned int v111 = v80[4];
          if (v80[4])
          {
            if (v111 < 0xF0)
            {
              if (v111 == 31)
              {
                int16x4_t v113 = v110[1];
                *(int16x4_t *)&long long v30 = v110[2];
                *(int16x4_t *)&long long v29 = v110[3];
                int16x4_t v25 = vuzp1_s16(*v110, *(int16x4_t *)&v30);
                int16x4_t v114 = vuzp2_s16(*v110, *(int16x4_t *)&v30);
                int16x4_t v218 = v25;
                int16x4_t v220 = v114;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v113, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v113, *(int16x4_t *)&v29);
                uint64_t v222 = v32;
                uint64_t v224 = v31;
                uint64_t v112 = 32;
              }
              else if (v111 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v110, 0);
                int16x4_t v218 = (int16x4_t)v32;
                int16x4_t v220 = (int16x4_t)v32;
                uint64_t v222 = v32;
                uint64_t v224 = v32;
                uint64_t v112 = 1;
              }
              else
              {
                uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v218, 16, (uint64_t)v110, v111);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v218, 16, (uint64_t)v110, v111, v178);
              uint64_t v112 = 16;
            }
          }
          else
          {
            uint64_t v112 = 0;
            int16x4_t v218 = 0;
            int16x4_t v220 = 0;
            uint64_t v222 = 0;
            uint64_t v224 = 0;
          }
          char v115 = (int16x4_t *)((char *)v110 + v112);
          unsigned int v116 = v80[5];
          if (v80[5])
          {
            if (v116 < 0xF0)
            {
              if (v116 == 31)
              {
                int16x4_t v118 = v115[1];
                *(int16x4_t *)&long long v30 = v115[2];
                *(int16x4_t *)&long long v29 = v115[3];
                int16x4_t v25 = vuzp1_s16(*v115, *(int16x4_t *)&v30);
                int16x4_t v119 = vuzp2_s16(*v115, *(int16x4_t *)&v30);
                int16x4_t v226 = v25;
                int16x4_t v228 = v119;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v118, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v118, *(int16x4_t *)&v29);
                uint64_t v230 = v32;
                uint64_t v232 = v31;
                uint64_t v117 = 32;
              }
              else if (v116 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v115, 0);
                int16x4_t v226 = (int16x4_t)v32;
                int16x4_t v228 = (int16x4_t)v32;
                uint64_t v230 = v32;
                uint64_t v232 = v32;
                uint64_t v117 = 1;
              }
              else
              {
                uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v226, 16, (uint64_t)v115, v116);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v226, 16, (uint64_t)v115, v116, v178);
              uint64_t v117 = 16;
            }
          }
          else
          {
            uint64_t v117 = 0;
            int16x4_t v226 = 0;
            int16x4_t v228 = 0;
            uint64_t v230 = 0;
            uint64_t v232 = 0;
          }
          uint64_t v120 = (int16x4_t *)((char *)v115 + v117);
          unsigned int v121 = v80[6];
          if (v80[6])
          {
            if (v121 < 0xF0)
            {
              if (v121 == 31)
              {
                int16x4_t v126 = v120[1];
                *(int16x4_t *)&long long v30 = v120[2];
                *(int16x4_t *)&long long v29 = v120[3];
                int16x4_t v25 = vuzp1_s16(*v120, *(int16x4_t *)&v30);
                int16x4_t v127 = vuzp2_s16(*v120, *(int16x4_t *)&v30);
                int16x4_t v219 = v25;
                int16x4_t v221 = v127;
                *(int16x4_t *)&long long v32 = vuzp1_s16(v126, *(int16x4_t *)&v29);
                *(int16x4_t *)&long long v31 = vuzp2_s16(v126, *(int16x4_t *)&v29);
                uint64_t v223 = v32;
                uint64_t v225 = v31;
                uint64_t v122 = 32;
                unsigned int v123 = v80[7];
                if (!v80[7]) {
                  goto LABEL_156;
                }
              }
              else if (v121 == 96)
              {
                *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v120, 0);
                int16x4_t v219 = (int16x4_t)v32;
                int16x4_t v221 = (int16x4_t)v32;
                uint64_t v223 = v32;
                uint64_t v225 = v32;
                uint64_t v122 = 1;
                unsigned int v123 = v80[7];
                if (!v80[7]) {
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v219, 16, (uint64_t)v120, v121);
                unsigned int v123 = v80[7];
                if (!v80[7])
                {
LABEL_156:
                  int16x4_t v227 = 0;
                  int16x4_t v229 = 0;
                  uint64_t v231 = 0;
                  uint64_t v233 = 0;
                  uint64_t v124 = v197;
                  if (v197) {
                    goto LABEL_177;
                  }
                  goto LABEL_197;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v219, 16, (uint64_t)v120, v121, v178);
              uint64_t v122 = 16;
              unsigned int v123 = v80[7];
              if (!v80[7]) {
                goto LABEL_156;
              }
            }
          }
          else
          {
            uint64_t v122 = 0;
            int16x4_t v219 = 0;
            int16x4_t v221 = 0;
            uint64_t v223 = 0;
            uint64_t v225 = 0;
            unsigned int v123 = v80[7];
            if (!v80[7]) {
              goto LABEL_156;
            }
          }
          uint64_t v125 = (int16x4_t *)((char *)v120 + v122);
          if (v123 < 0xF0)
          {
            if (v123 == 31)
            {
              int16x4_t v128 = v125[1];
              *(int16x4_t *)&long long v30 = v125[2];
              *(int16x4_t *)&long long v29 = v125[3];
              int16x4_t v25 = vuzp1_s16(*v125, *(int16x4_t *)&v30);
              int16x4_t v129 = vuzp2_s16(*v125, *(int16x4_t *)&v30);
              int16x4_t v227 = v25;
              int16x4_t v229 = v129;
              *(int16x4_t *)&long long v32 = vuzp1_s16(v128, *(int16x4_t *)&v29);
              *(int16x4_t *)&long long v31 = vuzp2_s16(v128, *(int16x4_t *)&v29);
              uint64_t v231 = v32;
              uint64_t v233 = v31;
              uint64_t v124 = v197;
              if (v197) {
                goto LABEL_177;
              }
            }
            else
            {
              if (v123 != 96)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v227, 16, (uint64_t)v125, v123);
                uint64_t v124 = v197;
                if (!v197) {
                  goto LABEL_197;
                }
LABEL_177:
                uint64_t v130 = v198;
                if (!v198) {
                  goto LABEL_197;
                }
                uint64_t v131 = 0;
                uint64_t v132 = 16 * v195;
                uint64_t v133 = (char *)&v202 + v196 + v132;
                uint64_t v134 = v132 + v196;
                BOOL v135 = (char *)&v202 + v134;
                uint64_t v136 = v193;
                uint64_t v137 = v194;
                uint64_t v138 = v198 & 0xFFFFFFE0;
                uint64_t v139 = v198 & 0xFFFFFFF8;
                int v140 = (char *)&v204 + v134;
                unsigned int v141 = (long long *)(v193 + 16);
                unsigned int v142 = v133;
                uint64_t v143 = v193;
                while (2)
                {
                  uint64_t v144 = (char *)(v136 + v131 * v137);
                  unsigned int v145 = &v133[16 * v131];
                  if (v130 >= 8 && (unint64_t)&v135[16 * v131 - v136 - v131 * v137] >= 0x20)
                  {
                    if (v130 >= 0x20)
                    {
                      __int32 v150 = v141;
                      unsigned int v151 = v140;
                      uint64_t v152 = v130 & 0xFFFFFFE0;
                      do
                      {
                        long long v32 = *(v150 - 1);
                        long long v31 = *v150;
                        *(v151 - 1) = v32;
                        *unsigned int v151 = v31;
                        v151 += 2;
                        v150 += 2;
                        v152 -= 32;
                      }
                      while (v152);
                      if (v138 == v130) {
                        goto LABEL_179;
                      }
                      uint64_t v149 = v130 & 0xFFFFFFE0;
                      if ((v130 & 0x18) == 0)
                      {
                        v144 += v138;
                        v145 += v138;
                        int v146 = v130 & 0xFFFFFFE0;
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      uint64_t v149 = 0;
                    }
                    v145 += v139;
                    uint64_t v153 = v149 - (v130 & 0xFFFFFFF8);
                    uint64_t v154 = (uint64_t *)(v143 + v149);
                    uint64_t v155 = &v142[v149];
                    do
                    {
                      uint64_t v156 = *v154++;
                      *(void *)&long long v32 = v156;
                      *(void *)uint64_t v155 = v156;
                      v155 += 8;
                      v153 += 8;
                    }
                    while (v153);
                    if (v139 != v130)
                    {
                      v144 += v139;
                      int v146 = v130 & 0xFFFFFFF8;
                      goto LABEL_183;
                    }
                  }
                  else
                  {
                    int v146 = 0;
LABEL_183:
                    int v147 = v130 - v146;
                    do
                    {
                      char v148 = *v144++;
                      *v145++ = v148;
                      --v147;
                    }
                    while (v147);
                  }
LABEL_179:
                  ++v131;
                  v140 += 16;
                  unsigned int v141 = (long long *)((char *)v141 + v137);
                  v143 += v137;
                  v142 += 16;
                  if (v131 == v124) {
                    goto LABEL_197;
                  }
                  continue;
                }
              }
              *(int8x8_t *)&long long v32 = vdup_lane_s8((int8x8_t)*v125, 0);
              int16x4_t v227 = (int16x4_t)v32;
              int16x4_t v229 = (int16x4_t)v32;
              uint64_t v231 = v32;
              uint64_t v233 = v32;
              uint64_t v124 = v197;
              if (v197) {
                goto LABEL_177;
              }
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v227, 16, (uint64_t)v125, v123, v178);
            uint64_t v124 = v197;
            if (v197) {
              goto LABEL_177;
            }
          }
LABEL_197:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v202, 16, (unint64_t)v191, v192, v199, v200, *(_DWORD *)(*(void *)(a1 + 208) + 52), *(double *)&v32, *(double *)&v31, *(int8x8_t *)&v30, *(double *)&v29, *(double *)&v25, v26, v27);
          unsigned int v34 = v173;
          if (v189)
          {
LABEL_27:
            long long v38 = *v90;
            long long v39 = v90[1];
            long long v40 = v90[3];
            v81[2] = v90[2];
            v81[3] = v40;
            *char v81 = v38;
            v81[1] = v39;
            long long v41 = v90[4];
            long long v42 = v90[5];
            long long v43 = v90[7];
            v81[6] = v90[6];
            v81[7] = v43;
            v81[4] = v41;
            v81[5] = v42;
            long long v44 = v90[8];
            long long v45 = v90[9];
            long long v46 = v90[11];
            v81[10] = v90[10];
            v81[11] = v46;
            v81[8] = v44;
            v81[9] = v45;
            long long v32 = v90[12];
            long long v31 = v90[13];
            long long v30 = v90[14];
            long long v29 = v90[15];
            v81[14] = v30;
            v81[15] = v29;
            v81[12] = v32;
            v81[13] = v31;
          }
LABEL_28:
          BOOL v21 = v36++ == v180 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v172;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v178 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v156 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v156;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v156;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 4;
    if (a7 >> 4 <= v145 >> 4)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 4;
      int v154 = ((a5 - 1) & 0xF) + 1;
      unsigned int v155 = (a5 - 1) >> 4;
      int v133 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 16 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 16 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v153 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v155) {
            unsigned int v39 = v154;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v154;
            if (v33 != v155) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v122 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v123 = 0;
              if (v65) {
                goto LABEL_162;
              }
LABEL_151:
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v124 | v123) {
                goto LABEL_152;
              }
LABEL_163:
              uint64_t v126 = 0;
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if ((v65 & 1) == 0) {
                goto LABEL_151;
              }
LABEL_162:
              unsigned int v124 = 0;
              if (!v123) {
                goto LABEL_163;
              }
LABEL_152:
              int v125 = 0;
              uint64_t v126 = 0;
              int v127 = v33 & v122;
              BOOL v128 = v123 != 0;
              BOOL v129 = v124 != 0;
              int v130 = 1;
              do
              {
                --v123;
                if (v128) {
                  v126 |= (unint64_t)(v130 & v127) << v125++;
                }
                else {
                  unsigned int v123 = 0;
                }
                --v124;
                if (v129) {
                  v126 |= (unint64_t)(v130 & v18 & ((v66 >> 4) - 1)) << v125++;
                }
                else {
                  unsigned int v124 = 0;
                }
                v130 *= 2;
                --v125;
                BOOL v129 = v124 != 0;
                BOOL v128 = v123 != 0;
              }
              while (v124 | v123);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v126 << 9);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (unsigned __int8 *)(a4 + 8 * v58);
          unint64_t v69 = v149 + 4 * (v37 - a7);
          uint64_t v70 = (void *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              char v77 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            BOOL v72 = v70;
            char v73 = v39;
            unsigned int v74 = v70;
            int v75 = v38;
            int v76 = v37;
            memcpy(__dst, v72, sizeof(__dst));
            int v37 = v76;
            unsigned int v35 = 16 * v33;
            char v77 = __dst;
            int v38 = v75;
            uint64_t v70 = v74;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v153;
            uint64_t v28 = v156;
          }
          else
          {
            char v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          int v160 = v68;
          unint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (!v40)
          {
            int v78 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            uint64_t v79 = (uint64_t)&v77[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v170, 64, (uint64_t)v77, *v68, v78)];
            uint64_t v80 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v172, 64, v79, v68[1], v78);
            uint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v171, 64, v80, v68[2], v78);
            uint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v173, 64, v81, v68[3], v78);
            uint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v174, 64, v82, v68[4], v78);
            uint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v176, 64, v83, v68[5], v78);
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v175, 64, v84, v68[6], v78);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v177, 64, v84 + v85, v68[7], v78);
            uint64_t v86 = v165;
            a7 = v144;
            if (!v165 || !v166)
            {
LABEL_133:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)v170, 64, (unint64_t)v159, v160, v167, v168, *(_DWORD *)(*(void *)(v156 + 208) + 52));
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_134;
            }
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v163 << 6;
            uint64_t v89 = 4 * v164;
            unint64_t v90 = (char *)v170 + v88 + v89;
            unint64_t v91 = v161;
            uint64_t v92 = v162;
            unint64_t v93 = 4 * v166;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 4 * v166;
            }
            unint64_t v95 = v88 + v89;
            unsigned int v96 = (char *)v170 + v88 + v89;
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x3FFFFFFE0;
            uint64_t v99 = v94 & 0x3FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            uint64_t v102 = (char *)&v170[1] + v95;
            int16x4_t v103 = (long long *)(v161 + 16);
            int16x4_t v104 = v90;
            unint64_t v105 = v161;
            while (2)
            {
              unsigned int v106 = (char *)(v91 + v92 * v87);
              uint64_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
LABEL_130:
                unsigned int v119 = v109 + 1;
                do
                {
                  char v120 = *v106++;
                  *v107++ = v120;
                }
                while (v93 > v119++);
              }
              else
              {
                if (v94 >= 0x20)
                {
                  unsigned int v111 = v103;
                  uint64_t v112 = v102;
                  uint64_t v113 = v94 & 0x3FFFFFFE0;
                  do
                  {
                    long long v114 = *v111;
                    *(v112 - 1) = *(v111 - 1);
                    *uint64_t v112 = v114;
                    v112 += 2;
                    v111 += 2;
                    v113 -= 32;
                  }
                  while (v113);
                  if (v94 == v98) {
                    goto LABEL_113;
                  }
                  uint64_t v110 = v94 & 0x3FFFFFFE0;
                  if ((v94 & 0x18) == 0)
                  {
                    v106 += v98;
                    v107 += v98;
                    int v109 = v94 & 0xFFFFFFE0;
                    goto LABEL_130;
                  }
                }
                else
                {
                  uint64_t v110 = 0;
                }
                v107 += v99;
                uint64_t v115 = v110 - v99;
                unsigned int v116 = (uint64_t *)(v105 + v110);
                uint64_t v117 = &v104[v110];
                do
                {
                  uint64_t v118 = *v116++;
                  *(void *)uint64_t v117 = v118;
                  v117 += 8;
                  v115 += 8;
                }
                while (v115);
                if (v94 != v99)
                {
                  v106 += v99;
                  int v109 = v94 & 0xFFFFFFF8;
                  goto LABEL_130;
                }
              }
LABEL_113:
              ++v87;
              v102 += 64;
              int16x4_t v103 = (long long *)((char *)v103 + v92);
              v105 += v92;
              v104 += 64;
              if (v87 == v86) {
                goto LABEL_133;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_134:
          memcpy(v70, v77, 0x400uLL);
LABEL_27:
          BOOL v23 = v33++ == v145 >> 4;
          uint64_t v28 = v156;
          unsigned int v34 = v153;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v320 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v237 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v221 = a8 + a10 - 1;
  unsigned int v223 = v221 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v240 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v240;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v242 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v240;
  int v231 = (int)result;
  if (v18 <= v223)
  {
    unsigned int v230 = a7 + a9 - 1;
    unsigned int v220 = a7 >> 4;
    if (a7 >> 4 <= v230 >> 4)
    {
      unsigned int v217 = a5 - 1;
      unsigned int v239 = (a5 - 1) >> 4;
      int v238 = ((a5 - 1) & 0xF) + 1;
      int v218 = ((a6 - 1) & 0xF) + 1;
      unsigned int v219 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v228 = v30.i32[0] | v30.i32[1];
      BOOL v226 = v30.i32[1] != 0;
      int8x8_t v227 = v30;
      BOOL v225 = v30.i32[0] != 0;
      unint64_t v216 = 8 * v20 * (unint64_t)v19;
      unsigned int v229 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v237) {
          int v32 = v237;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v220;
        if (v221 < v31) {
          unsigned int v31 = v221;
        }
        unsigned int v236 = 16 * v18;
        int v224 = v32 - 16 * v18;
        int v235 = v31 - v32 + 1;
        int v34 = v218;
        if (v18 != v219) {
          int v34 = 16;
        }
        unsigned int v243 = v34;
        uint64_t v234 = a3 + (v32 - v237) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v230 < v36) {
            unsigned int v36 = v230;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v239) {
            unsigned int v39 = v238;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v236 >= v237 && v35 >= a7)
          {
            int v41 = v238;
            if (v33 != v239) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v235 != v243;
          }
          if (v231)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v216 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v207 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v208 = 0;
              if (v65) {
                goto LABEL_234;
              }
LABEL_223:
              unsigned int v209 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v209 | v208) {
                goto LABEL_224;
              }
LABEL_235:
              uint64_t v211 = 0;
            }
            else
            {
              unsigned int v208 = 32 - __clz(~(-1 << -(char)__clz(v207)));
              if ((v65 & 1) == 0) {
                goto LABEL_223;
              }
LABEL_234:
              unsigned int v209 = 0;
              if (!v208) {
                goto LABEL_235;
              }
LABEL_224:
              int v210 = 0;
              uint64_t v211 = 0;
              int v212 = v33 & v207;
              BOOL v213 = v208 != 0;
              BOOL v214 = v209 != 0;
              int v215 = 1;
              do
              {
                --v208;
                if (v213) {
                  v211 |= (unint64_t)(v215 & v212) << v210++;
                }
                else {
                  unsigned int v208 = 0;
                }
                --v209;
                if (v214) {
                  v211 |= (unint64_t)(v215 & v18 & ((v66 >> 4) - 1)) << v210++;
                }
                else {
                  unsigned int v209 = 0;
                }
                v215 *= 2;
                --v210;
                BOOL v214 = v209 != 0;
                BOOL v213 = v208 != 0;
              }
              while (v209 | v208);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v236 / v66 * ((v62 + v217) / v62)) << 14) + (v211 << 9);
            goto LABEL_58;
          }
          if (v228)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v226;
            BOOL v47 = v225;
            __int32 v48 = v227.i32[1];
            __int32 v49 = v227.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v234 + 4 * (v37 - a7);
          uint64_t v70 = (int64x2_t *)(a2 + v50);
          if (v243 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          int v241 = v70;
          if (v242)
          {
            BOOL v72 = (int64x2_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            memcpy(__dst, v70, sizeof(__dst));
            uint64_t v28 = v240;
          }
          else
          {
            BOOL v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v243, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int v245 = v72;
          unsigned __int8 v253 = v39;
          unsigned __int8 v254 = v243;
          unsigned int v249 = v224;
          unsigned int v250 = v37 - v35;
          unsigned int v246 = v68;
          uint64_t v247 = v69;
          uint64_t v248 = a11;
          unsigned int v251 = v235;
          unsigned int v252 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v229;
            unsigned int v73 = v33 + 1;
            goto LABEL_205;
          }
          uint64_t v74 = *(void *)(v28 + 208);
          int v75 = *(_DWORD *)(v74 + 52);
          unsigned int v76 = *v68;
          if (*v68)
          {
            if (v76 < 0xF0)
            {
              if (v76 == 127)
              {
                int64x2_t v79 = *v72;
                int64x2_t v80 = v72[1];
                int64x2_t v81 = v72[2];
                int64x2_t v82 = v72[3];
                int64x2_t v83 = v72[4];
                int64x2_t v84 = v72[5];
                int64x2_t v85 = v72[6];
                int64x2_t v86 = v72[7];
                int64x2_t v256 = vzip1q_s64(*v72, v80);
                int64x2_t v257 = vzip1q_s64(v83, v84);
                int64x2_t v260 = vzip2q_s64(v79, v80);
                int64x2_t v261 = vzip2q_s64(v83, v84);
                int64x2_t v264 = vzip1q_s64(v81, v82);
                int64x2_t v265 = vzip1q_s64(v85, v86);
                int64x2_t v268 = vzip2q_s64(v81, v82);
                int64x2_t v269 = vzip2q_s64(v85, v86);
                uint64_t v77 = 128;
                unsigned int v73 = v33 + 1;
              }
              else
              {
                unsigned int v73 = v33 + 1;
                if (v76 == 3)
                {
                  float32x4_t v78 = vld1q_dup_f32((const float *)v72->i32);
                  int64x2_t v256 = (int64x2_t)v78;
                  int64x2_t v257 = (int64x2_t)v78;
                  int64x2_t v260 = (int64x2_t)v78;
                  int64x2_t v261 = (int64x2_t)v78;
                  int64x2_t v264 = (int64x2_t)v78;
                  int64x2_t v265 = (int64x2_t)v78;
                  int64x2_t v268 = (int64x2_t)v78;
                  int64x2_t v269 = (int64x2_t)v78;
                  uint64_t v77 = 4;
                }
                else
                {
                  uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v256, 64, (uint64_t)v72, v76);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v256, 64, (unint64_t)v72, v76, *(_DWORD *)(v74 + 52));
              uint64_t v77 = 64;
              unsigned int v73 = v33 + 1;
            }
          }
          else
          {
            uint64_t v77 = 0;
            int64x2_t v257 = 0u;
            int64x2_t v256 = 0u;
            int64x2_t v260 = 0u;
            int64x2_t v261 = 0u;
            int64x2_t v264 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v268 = 0u;
            int64x2_t v269 = 0u;
            unsigned int v73 = v33 + 1;
          }
          unint64_t v87 = (unint64_t)v72->u64 + v77;
          unsigned int v88 = v68[1];
          if (v68[1])
          {
            if (v88 < 0xF0)
            {
              if (v88 == 127)
              {
                int64x2_t v91 = *(int64x2_t *)v87;
                int64x2_t v92 = *(int64x2_t *)(v87 + 16);
                int64x2_t v93 = *(int64x2_t *)(v87 + 32);
                int64x2_t v94 = *(int64x2_t *)(v87 + 48);
                int64x2_t v95 = *(int64x2_t *)(v87 + 64);
                int64x2_t v96 = *(int64x2_t *)(v87 + 80);
                int64x2_t v97 = *(int64x2_t *)(v87 + 96);
                int64x2_t v98 = *(int64x2_t *)(v87 + 112);
                int64x2_t v272 = vzip1q_s64(*(int64x2_t *)v87, v92);
                int64x2_t v273 = vzip1q_s64(v95, v96);
                int64x2_t v276 = vzip2q_s64(v91, v92);
                int64x2_t v277 = vzip2q_s64(v95, v96);
                int64x2_t v280 = vzip1q_s64(v93, v94);
                int64x2_t v281 = vzip1q_s64(v97, v98);
                int64x2_t v284 = vzip2q_s64(v93, v94);
                int64x2_t v285 = vzip2q_s64(v97, v98);
                uint64_t v89 = 128;
              }
              else if (v88 == 3)
              {
                float32x4_t v90 = vld1q_dup_f32((const float *)v87);
                int64x2_t v272 = (int64x2_t)v90;
                int64x2_t v273 = (int64x2_t)v90;
                int64x2_t v276 = (int64x2_t)v90;
                int64x2_t v277 = (int64x2_t)v90;
                int64x2_t v280 = (int64x2_t)v90;
                int64x2_t v281 = (int64x2_t)v90;
                int64x2_t v284 = (int64x2_t)v90;
                int64x2_t v285 = (int64x2_t)v90;
                uint64_t v89 = 4;
              }
              else
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v272, 64, v87, v88);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v272, 64, v87, v88, v75);
              uint64_t v89 = 64;
            }
          }
          else
          {
            uint64_t v89 = 0;
            int64x2_t v272 = 0u;
            int64x2_t v273 = 0u;
            int64x2_t v276 = 0u;
            int64x2_t v277 = 0u;
            int64x2_t v280 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v284 = 0u;
            int64x2_t v285 = 0u;
          }
          unint64_t v99 = v87 + v89;
          unsigned int v100 = v68[2];
          if (v68[2])
          {
            if (v100 < 0xF0)
            {
              if (v100 == 127)
              {
                int64x2_t v103 = *(int64x2_t *)v99;
                int64x2_t v104 = *(int64x2_t *)(v99 + 16);
                int64x2_t v105 = *(int64x2_t *)(v99 + 32);
                int64x2_t v106 = *(int64x2_t *)(v99 + 48);
                int64x2_t v107 = *(int64x2_t *)(v99 + 64);
                int64x2_t v108 = *(int64x2_t *)(v99 + 80);
                int64x2_t v109 = *(int64x2_t *)(v99 + 96);
                int64x2_t v110 = *(int64x2_t *)(v99 + 112);
                int64x2_t v258 = vzip1q_s64(*(int64x2_t *)v99, v104);
                int64x2_t v259 = vzip1q_s64(v107, v108);
                int64x2_t v262 = vzip2q_s64(v103, v104);
                int64x2_t v263 = vzip2q_s64(v107, v108);
                int64x2_t v266 = vzip1q_s64(v105, v106);
                int64x2_t v267 = vzip1q_s64(v109, v110);
                int64x2_t v270 = vzip2q_s64(v105, v106);
                int64x2_t v271 = vzip2q_s64(v109, v110);
                uint64_t v101 = 128;
              }
              else if (v100 == 3)
              {
                float32x4_t v102 = vld1q_dup_f32((const float *)v99);
                int64x2_t v258 = (int64x2_t)v102;
                int64x2_t v259 = (int64x2_t)v102;
                int64x2_t v262 = (int64x2_t)v102;
                int64x2_t v263 = (int64x2_t)v102;
                int64x2_t v266 = (int64x2_t)v102;
                int64x2_t v267 = (int64x2_t)v102;
                int64x2_t v270 = (int64x2_t)v102;
                int64x2_t v271 = (int64x2_t)v102;
                uint64_t v101 = 4;
              }
              else
              {
                uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v258, 64, v99, v100);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v258, 64, v99, v100, v75);
              uint64_t v101 = 64;
            }
          }
          else
          {
            uint64_t v101 = 0;
            int64x2_t v258 = 0u;
            int64x2_t v259 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v266 = 0u;
            int64x2_t v267 = 0u;
            int64x2_t v270 = 0u;
            int64x2_t v271 = 0u;
          }
          unint64_t v111 = v99 + v101;
          unsigned int v112 = v68[3];
          if (v68[3])
          {
            if (v112 < 0xF0)
            {
              if (v112 == 127)
              {
                int64x2_t v115 = *(int64x2_t *)v111;
                int64x2_t v116 = *(int64x2_t *)(v111 + 16);
                int64x2_t v117 = *(int64x2_t *)(v111 + 32);
                int64x2_t v118 = *(int64x2_t *)(v111 + 48);
                int64x2_t v119 = *(int64x2_t *)(v111 + 64);
                int64x2_t v120 = *(int64x2_t *)(v111 + 80);
                int64x2_t v121 = *(int64x2_t *)(v111 + 96);
                int64x2_t v122 = *(int64x2_t *)(v111 + 112);
                int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v111, v116);
                int64x2_t v275 = vzip1q_s64(v119, v120);
                int64x2_t v278 = vzip2q_s64(v115, v116);
                int64x2_t v279 = vzip2q_s64(v119, v120);
                int64x2_t v282 = vzip1q_s64(v117, v118);
                int64x2_t v283 = vzip1q_s64(v121, v122);
                int64x2_t v286 = vzip2q_s64(v117, v118);
                int64x2_t v287 = vzip2q_s64(v121, v122);
                uint64_t v113 = 128;
              }
              else if (v112 == 3)
              {
                float32x4_t v114 = vld1q_dup_f32((const float *)v111);
                int64x2_t v274 = (int64x2_t)v114;
                int64x2_t v275 = (int64x2_t)v114;
                int64x2_t v278 = (int64x2_t)v114;
                int64x2_t v279 = (int64x2_t)v114;
                int64x2_t v282 = (int64x2_t)v114;
                int64x2_t v283 = (int64x2_t)v114;
                int64x2_t v286 = (int64x2_t)v114;
                int64x2_t v287 = (int64x2_t)v114;
                uint64_t v113 = 4;
              }
              else
              {
                uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v274, 64, v111, v112);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v274, 64, v111, v112, v75);
              uint64_t v113 = 64;
            }
          }
          else
          {
            uint64_t v113 = 0;
            int64x2_t v274 = 0u;
            int64x2_t v275 = 0u;
            int64x2_t v278 = 0u;
            int64x2_t v279 = 0u;
            int64x2_t v282 = 0u;
            int64x2_t v283 = 0u;
            int64x2_t v286 = 0u;
            int64x2_t v287 = 0u;
          }
          unint64_t v123 = v111 + v113;
          unsigned int v124 = v68[4];
          if (v68[4])
          {
            if (v124 < 0xF0)
            {
              if (v124 == 127)
              {
                int64x2_t v127 = *(int64x2_t *)v123;
                int64x2_t v128 = *(int64x2_t *)(v123 + 16);
                int64x2_t v129 = *(int64x2_t *)(v123 + 32);
                int64x2_t v130 = *(int64x2_t *)(v123 + 48);
                int64x2_t v131 = *(int64x2_t *)(v123 + 64);
                int64x2_t v132 = *(int64x2_t *)(v123 + 80);
                int64x2_t v133 = *(int64x2_t *)(v123 + 96);
                int64x2_t v134 = *(int64x2_t *)(v123 + 112);
                int64x2_t v288 = vzip1q_s64(*(int64x2_t *)v123, v128);
                int64x2_t v289 = vzip1q_s64(v131, v132);
                int64x2_t v292 = vzip2q_s64(v127, v128);
                int64x2_t v293 = vzip2q_s64(v131, v132);
                int64x2_t v296 = vzip1q_s64(v129, v130);
                int64x2_t v297 = vzip1q_s64(v133, v134);
                int64x2_t v300 = vzip2q_s64(v129, v130);
                int64x2_t v301 = vzip2q_s64(v133, v134);
                uint64_t v125 = 128;
              }
              else if (v124 == 3)
              {
                float32x4_t v126 = vld1q_dup_f32((const float *)v123);
                int64x2_t v288 = (int64x2_t)v126;
                int64x2_t v289 = (int64x2_t)v126;
                int64x2_t v292 = (int64x2_t)v126;
                int64x2_t v293 = (int64x2_t)v126;
                int64x2_t v296 = (int64x2_t)v126;
                int64x2_t v297 = (int64x2_t)v126;
                int64x2_t v300 = (int64x2_t)v126;
                int64x2_t v301 = (int64x2_t)v126;
                uint64_t v125 = 4;
              }
              else
              {
                uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v288, 64, v123, v124);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v288, 64, v123, v124, v75);
              uint64_t v125 = 64;
            }
          }
          else
          {
            uint64_t v125 = 0;
            int64x2_t v288 = 0u;
            int64x2_t v289 = 0u;
            int64x2_t v292 = 0u;
            int64x2_t v293 = 0u;
            int64x2_t v296 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v300 = 0u;
            int64x2_t v301 = 0u;
          }
          unint64_t v135 = v123 + v125;
          unsigned int v136 = v68[5];
          if (v68[5])
          {
            if (v136 < 0xF0)
            {
              if (v136 == 127)
              {
                int64x2_t v139 = *(int64x2_t *)v135;
                int64x2_t v140 = *(int64x2_t *)(v135 + 16);
                int64x2_t v141 = *(int64x2_t *)(v135 + 32);
                int64x2_t v142 = *(int64x2_t *)(v135 + 48);
                int64x2_t v143 = *(int64x2_t *)(v135 + 64);
                int64x2_t v144 = *(int64x2_t *)(v135 + 80);
                int64x2_t v145 = *(int64x2_t *)(v135 + 96);
                int64x2_t v146 = *(int64x2_t *)(v135 + 112);
                int64x2_t v304 = vzip1q_s64(*(int64x2_t *)v135, v140);
                int64x2_t v305 = vzip1q_s64(v143, v144);
                int64x2_t v308 = vzip2q_s64(v139, v140);
                int64x2_t v309 = vzip2q_s64(v143, v144);
                int64x2_t v312 = vzip1q_s64(v141, v142);
                int64x2_t v313 = vzip1q_s64(v145, v146);
                int64x2_t v316 = vzip2q_s64(v141, v142);
                int64x2_t v317 = vzip2q_s64(v145, v146);
                uint64_t v137 = 128;
              }
              else if (v136 == 3)
              {
                float32x4_t v138 = vld1q_dup_f32((const float *)v135);
                int64x2_t v304 = (int64x2_t)v138;
                int64x2_t v305 = (int64x2_t)v138;
                int64x2_t v308 = (int64x2_t)v138;
                int64x2_t v309 = (int64x2_t)v138;
                int64x2_t v312 = (int64x2_t)v138;
                int64x2_t v313 = (int64x2_t)v138;
                int64x2_t v316 = (int64x2_t)v138;
                int64x2_t v317 = (int64x2_t)v138;
                uint64_t v137 = 4;
              }
              else
              {
                uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v304, 64, v135, v136);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v304, 64, v135, v136, v75);
              uint64_t v137 = 64;
            }
          }
          else
          {
            uint64_t v137 = 0;
            int64x2_t v304 = 0u;
            int64x2_t v305 = 0u;
            int64x2_t v308 = 0u;
            int64x2_t v309 = 0u;
            int64x2_t v312 = 0u;
            int64x2_t v313 = 0u;
            int64x2_t v316 = 0u;
            int64x2_t v317 = 0u;
          }
          unint64_t v147 = v135 + v137;
          unsigned int v148 = v68[6];
          if (v68[6])
          {
            if (v148 < 0xF0)
            {
              if (v148 == 127)
              {
                int64x2_t v151 = *(int64x2_t *)v147;
                int64x2_t v152 = *(int64x2_t *)(v147 + 16);
                int64x2_t v153 = *(int64x2_t *)(v147 + 32);
                int64x2_t v154 = *(int64x2_t *)(v147 + 48);
                int64x2_t v155 = *(int64x2_t *)(v147 + 64);
                int64x2_t v156 = *(int64x2_t *)(v147 + 80);
                int64x2_t v157 = *(int64x2_t *)(v147 + 96);
                int64x2_t v158 = *(int64x2_t *)(v147 + 112);
                int64x2_t v290 = vzip1q_s64(*(int64x2_t *)v147, v152);
                int64x2_t v291 = vzip1q_s64(v155, v156);
                int64x2_t v294 = vzip2q_s64(v151, v152);
                int64x2_t v295 = vzip2q_s64(v155, v156);
                int64x2_t v298 = vzip1q_s64(v153, v154);
                int64x2_t v299 = vzip1q_s64(v157, v158);
                int64x2_t v302 = vzip2q_s64(v153, v154);
                int64x2_t v303 = vzip2q_s64(v157, v158);
                uint64_t v149 = 128;
              }
              else if (v148 == 3)
              {
                float32x4_t v150 = vld1q_dup_f32((const float *)v147);
                int64x2_t v290 = (int64x2_t)v150;
                int64x2_t v291 = (int64x2_t)v150;
                int64x2_t v294 = (int64x2_t)v150;
                int64x2_t v295 = (int64x2_t)v150;
                int64x2_t v298 = (int64x2_t)v150;
                int64x2_t v299 = (int64x2_t)v150;
                int64x2_t v302 = (int64x2_t)v150;
                int64x2_t v303 = (int64x2_t)v150;
                uint64_t v149 = 4;
              }
              else
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v290, 64, v147, v148);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v290, 64, v147, v148, v75);
              uint64_t v149 = 64;
            }
          }
          else
          {
            uint64_t v149 = 0;
            int64x2_t v290 = 0u;
            int64x2_t v291 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v298 = 0u;
            int64x2_t v299 = 0u;
            int64x2_t v302 = 0u;
            int64x2_t v303 = 0u;
          }
          unsigned int v159 = v72;
          unsigned int v160 = v68[7];
          if (!v68[7])
          {
            int64x2_t v306 = 0u;
            int64x2_t v307 = 0u;
            int64x2_t v310 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v314 = 0u;
            int64x2_t v315 = 0u;
            int64x2_t v318 = 0u;
            int64x2_t v319 = 0u;
LABEL_162:
            a7 = v229;
            uint64_t v162 = v251;
            if (!v251) {
              goto LABEL_204;
            }
            goto LABEL_163;
          }
          unint64_t v161 = v147 + v149;
          if (v160 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v306, 64, v161, v160, v75);
            goto LABEL_162;
          }
          a7 = v229;
          if (v160 == 127)
          {
            int64x2_t v199 = *(int64x2_t *)v161;
            int64x2_t v200 = *(int64x2_t *)(v161 + 16);
            int64x2_t v201 = *(int64x2_t *)(v161 + 32);
            int64x2_t v202 = *(int64x2_t *)(v161 + 48);
            int64x2_t v203 = *(int64x2_t *)(v161 + 64);
            int64x2_t v204 = *(int64x2_t *)(v161 + 80);
            int64x2_t v205 = *(int64x2_t *)(v161 + 96);
            int64x2_t v206 = *(int64x2_t *)(v161 + 112);
            int64x2_t v306 = vzip1q_s64(*(int64x2_t *)v161, v200);
            int64x2_t v307 = vzip1q_s64(v203, v204);
            int64x2_t v310 = vzip2q_s64(v199, v200);
            int64x2_t v311 = vzip2q_s64(v203, v204);
            int64x2_t v314 = vzip1q_s64(v201, v202);
            int64x2_t v315 = vzip1q_s64(v205, v206);
            int64x2_t v318 = vzip2q_s64(v201, v202);
            int64x2_t v319 = vzip2q_s64(v205, v206);
            uint64_t v162 = v251;
            if (!v251) {
              goto LABEL_204;
            }
          }
          else if (v160 == 3)
          {
            float32x4_t v198 = vld1q_dup_f32((const float *)v161);
            int64x2_t v306 = (int64x2_t)v198;
            int64x2_t v307 = (int64x2_t)v198;
            int64x2_t v310 = (int64x2_t)v198;
            int64x2_t v311 = (int64x2_t)v198;
            int64x2_t v314 = (int64x2_t)v198;
            int64x2_t v315 = (int64x2_t)v198;
            int64x2_t v318 = (int64x2_t)v198;
            int64x2_t v319 = (int64x2_t)v198;
            uint64_t v162 = v251;
            if (!v251) {
              goto LABEL_204;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v306, 64, v161, v160);
            uint64_t v162 = v251;
            if (!v251) {
              goto LABEL_204;
            }
          }
LABEL_163:
          if (v252)
          {
            uint64_t v163 = 0;
            unint64_t v164 = (unint64_t)v249 << 6;
            uint64_t v165 = 4 * v250;
            unsigned int v166 = &v256.i8[v164 + v165];
            uint64_t v167 = v247;
            uint64_t v168 = v248;
            unint64_t v169 = 4 * v252;
            if (v169 <= 1) {
              unint64_t v170 = 1;
            }
            else {
              unint64_t v170 = 4 * v252;
            }
            unint64_t v171 = v164 + v165;
            unsigned int v172 = &v256.i8[v164 + v165];
            if (v170) {
              BOOL v173 = (v170 - 1) >> 32 == 0;
            }
            else {
              BOOL v173 = 0;
            }
            uint64_t v174 = v170 & 0x3FFFFFFE0;
            uint64_t v175 = v170 & 0x3FFFFFFF8;
            char v177 = !v173 || v170 < 8;
            uint64_t v178 = &v257.i8[v171];
            int v179 = (long long *)(v247 + 16);
            unsigned int v180 = v166;
            uint64_t v181 = v247;
            do
            {
              int v182 = (char *)(v167 + v168 * v163);
              unint64_t v183 = &v166[64 * v163];
              if ((unint64_t)(&v172[64 * v163] - v182) < 0x20) {
                char v184 = 1;
              }
              else {
                char v184 = v177;
              }
              if (v184)
              {
                int v185 = 0;
                goto LABEL_194;
              }
              if (v170 >= 0x20)
              {
                int v187 = v179;
                unsigned int v188 = v178;
                uint64_t v189 = v170 & 0x3FFFFFFE0;
                do
                {
                  long long v190 = *v187;
                  *((_OWORD *)v188 - 1) = *(v187 - 1);
                  *(_OWORD *)unsigned int v188 = v190;
                  v188 += 32;
                  v187 += 2;
                  v189 -= 32;
                }
                while (v189);
                if (v170 == v174) {
                  goto LABEL_177;
                }
                uint64_t v186 = v170 & 0x3FFFFFFE0;
                if ((v170 & 0x18) == 0)
                {
                  v182 += v174;
                  v183 += v174;
                  int v185 = v170 & 0xFFFFFFE0;
                  goto LABEL_194;
                }
              }
              else
              {
                uint64_t v186 = 0;
              }
              v183 += v175;
              uint64_t v191 = v186 - v175;
              int v192 = (uint64_t *)(v181 + v186);
              uint64_t v193 = &v180[v186];
              do
              {
                uint64_t v194 = *v192++;
                *(void *)uint64_t v193 = v194;
                v193 += 8;
                v191 += 8;
              }
              while (v191);
              if (v170 == v175) {
                goto LABEL_177;
              }
              v182 += v175;
              int v185 = v170 & 0xFFFFFFF8;
LABEL_194:
              unsigned int v195 = v185 + 1;
              do
              {
                char v196 = *v182++;
                *v183++ = v196;
              }
              while (v169 > v195++);
LABEL_177:
              ++v163;
              v178 += 64;
              int v179 = (long long *)((char *)v179 + v168);
              v181 += v168;
              v180 += 64;
            }
            while (v163 != v162);
          }
LABEL_204:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v256, 64, (unint64_t)v245, v246, v253, v254, *(_DWORD *)(*(void *)(v240 + 208) + 52));
          BOOL v72 = v159;
LABEL_205:
          uint64_t result = v241;
          if (v242) {
            uint64_t result = memcpy(v241, v72, 0x400uLL);
          }
          BOOL v23 = v33 == v230 >> 4;
          unsigned int v33 = v73;
          uint64_t v28 = v240;
        }
        while (!v23);
        BOOL v23 = v18++ == v223;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v182 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v166 = a8 + a10 - 1;
  unsigned int v168 = v166 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v185 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v185;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v187 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v185;
  BOOL v176 = isLevelTiled;
  if (v18 <= v168)
  {
    unsigned int v175 = a7 + a9 - 1;
    unsigned int v165 = a7 >> 4;
    if (a7 >> 4 <= v175 >> 4)
    {
      unsigned int v162 = a5 - 1;
      unsigned int v184 = (a5 - 1) >> 4;
      int v183 = ((a5 - 1) & 0xF) + 1;
      int v163 = ((a6 - 1) & 0xF) + 1;
      unsigned int v164 = (a6 - 1) >> 4;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v31.i64[0] = 0x2000000020;
      *(int32x2_t *)v32.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 4uLL)));
      *(int32x2_t *)v33.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v32.i8))));
      *(int8x8_t *)v34.i8 = vbic_s8(*(int8x8_t *)v33.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v30));
      __int32 v173 = v34.i32[0] | v34.i32[1];
      BOOL v171 = v34.i32[1] != 0;
      uint64_t v172 = v34.i64[0];
      BOOL v170 = v34.i32[0] != 0;
      unint64_t v161 = 8 * v20 * (unint64_t)v19;
      unsigned int v174 = a7;
      do
      {
        unsigned int v35 = (16 * v18) | 0xF;
        if (16 * v18 <= v182) {
          int v36 = v182;
        }
        else {
          int v36 = 16 * v18;
        }
        unsigned int v37 = v165;
        if (v166 < v35) {
          unsigned int v35 = v166;
        }
        unsigned int v181 = 16 * v18;
        int v169 = v36 - 16 * v18;
        int v180 = v35 - v36 + 1;
        int v38 = v163;
        if (v18 != v164) {
          int v38 = 16;
        }
        unsigned int v188 = v38;
        uint64_t v179 = a3 + (v36 - v182) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v175 < v40) {
            unsigned int v40 = v175;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v184) {
            unsigned int v43 = v183;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v181 >= v182 && v39 >= a7)
          {
            int v45 = v183;
            if (v37 != v184) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v180 != v188;
          }
          if (v176)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v161 >> (*(unsigned char *)(v29 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  unsigned int v66 = 16;
                  char v69 = 1;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v152 = (v66 >> 4) - 1;
            if (v68)
            {
              unsigned int v153 = 0;
              if (v69) {
                goto LABEL_236;
              }
LABEL_225:
              unsigned int v154 = 32 - __clz(~(-1 << -(char)__clz(((v70 + 15) >> 4) - 1)));
              if (v154 | v153) {
                goto LABEL_226;
              }
LABEL_237:
              uint64_t v156 = 0;
            }
            else
            {
              unsigned int v153 = 32 - __clz(~(-1 << -(char)__clz(v152)));
              if ((v69 & 1) == 0) {
                goto LABEL_225;
              }
LABEL_236:
              unsigned int v154 = 0;
              if (!v153) {
                goto LABEL_237;
              }
LABEL_226:
              int v155 = 0;
              uint64_t v156 = 0;
              int v157 = v37 & v152;
              BOOL v158 = v153 != 0;
              BOOL v159 = v154 != 0;
              int v160 = 1;
              do
              {
                --v153;
                if (v158) {
                  v156 |= (unint64_t)(v160 & v157) << v155++;
                }
                else {
                  unsigned int v153 = 0;
                }
                --v154;
                if (v159) {
                  v156 |= (unint64_t)(v160 & v18 & ((v70 >> 4) - 1)) << v155++;
                }
                else {
                  unsigned int v154 = 0;
                }
                v160 *= 2;
                --v155;
                BOOL v159 = v154 != 0;
                BOOL v158 = v153 != 0;
              }
              while (v154 | v153);
            }
            unint64_t v54 = ((unint64_t)(v39 / v66 + v181 / v70 * ((v66 + v162) / v66)) << 14) + (v156 << 8);
            goto LABEL_58;
          }
          if (v173)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v171;
            BOOL v51 = v170;
            int v52 = HIDWORD(v172);
            int v53 = v172;
            do
            {
              --v52;
              if (v50) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                int v52 = 0;
              }
              --v53;
              if (v51) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                int v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v51 = v53 != 0;
              BOOL v50 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_58:
          unsigned int v55 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_80:
              uint64_t v62 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_80;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v37) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_81:
          int v71 = v43 < 0x10 || v44;
          BOOL v72 = (unsigned __int8 *)(a4 + 8 * v62);
          unint64_t v73 = v179 + 2 * (v41 - a7);
          uint64_t v74 = (int32x4_t *)(a2 + v54);
          if (v188 < 0x10) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          __src = v74;
          if (v187)
          {
            uint64_t v74 = (int32x4_t *)__dst;
            if (!v75) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v29 = v185;
          }
          else if (!v75)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v73, a11, (unint64_t)v74, v72, v43, v188, *(_DWORD *)(*(void *)(v29 + 208) + 52), *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int16x4_t *)v28.i8);
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          long long v190 = v74;
          unsigned __int8 v198 = v43;
          unsigned __int8 v199 = v188;
          unsigned int v194 = v169;
          unsigned int v195 = v41 - v39;
          uint64_t v191 = v72;
          unint64_t v192 = v73;
          uint64_t v193 = a11;
          unsigned int v196 = v180;
          unsigned int v197 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v174;
            unsigned int v76 = v37 + 1;
            goto LABEL_207;
          }
          uint64_t v77 = *(void *)(v29 + 208);
          int v78 = *(_DWORD *)(v77 + 52);
          unsigned int v79 = *v72;
          if (*v72)
          {
            if (v79 < 0xF0)
            {
              if (v79 == 63)
              {
                int32x4_t v81 = v74[1];
                int32x4_t v32 = v74[2];
                int32x4_t v31 = v74[3];
                int32x4_t v28 = vuzp1q_s32(*v74, v32);
                int32x4_t v82 = vuzp2q_s32(*v74, v32);
                int32x4_t v201 = v28;
                int32x4_t v203 = v82;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v81, v31);
                int32x4_t v33 = vuzp2q_s32(v81, v31);
                int16x8_t v205 = v34;
                int32x4_t v207 = v33;
                uint64_t v80 = 64;
                unsigned int v76 = v37 + 1;
              }
              else
              {
                unsigned int v76 = v37 + 1;
                if (v79 == 1)
                {
                  int16x8_t v34 = vld1q_dup_s16(v74->i16);
                  int32x4_t v201 = (int32x4_t)v34;
                  int32x4_t v203 = (int32x4_t)v34;
                  int16x8_t v205 = v34;
                  int32x4_t v207 = (int32x4_t)v34;
                  uint64_t v80 = 2;
                }
                else
                {
                  uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v201, 32, (uint64_t)v74, v79, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v201, 32, (uint64_t)v74, v79, *(_DWORD *)(v77 + 52));
              uint64_t v80 = 32;
              unsigned int v76 = v37 + 1;
            }
          }
          else
          {
            uint64_t v80 = 0;
            int32x4_t v201 = 0uLL;
            int32x4_t v203 = 0uLL;
            int16x8_t v205 = 0uLL;
            int32x4_t v207 = 0uLL;
            unsigned int v76 = v37 + 1;
          }
          uint64_t v83 = (uint64_t)v74->i64 + v80;
          unsigned int v84 = v72[1];
          if (v72[1])
          {
            if (v84 < 0xF0)
            {
              if (v84 == 63)
              {
                int32x4_t v86 = *(int32x4_t *)(v83 + 16);
                int32x4_t v32 = *(int32x4_t *)(v83 + 32);
                int32x4_t v31 = *(int32x4_t *)(v83 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v83, v32);
                int32x4_t v87 = vuzp2q_s32(*(int32x4_t *)v83, v32);
                int32x4_t v209 = v28;
                int32x4_t v211 = v87;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v86, v31);
                int32x4_t v33 = vuzp2q_s32(v86, v31);
                int16x8_t v213 = v34;
                int32x4_t v215 = v33;
                uint64_t v85 = 64;
              }
              else if (v84 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v83);
                int32x4_t v209 = (int32x4_t)v34;
                int32x4_t v211 = (int32x4_t)v34;
                int16x8_t v213 = v34;
                int32x4_t v215 = (int32x4_t)v34;
                uint64_t v85 = 2;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v209, 32, v83, v84, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v209, 32, v83, v84, v78);
              uint64_t v85 = 32;
            }
          }
          else
          {
            uint64_t v85 = 0;
            int32x4_t v209 = 0uLL;
            int32x4_t v211 = 0uLL;
            int16x8_t v213 = 0uLL;
            int32x4_t v215 = 0uLL;
          }
          uint64_t v88 = v83 + v85;
          unsigned int v89 = v72[2];
          if (v72[2])
          {
            if (v89 < 0xF0)
            {
              if (v89 == 63)
              {
                int32x4_t v91 = *(int32x4_t *)(v88 + 16);
                int32x4_t v32 = *(int32x4_t *)(v88 + 32);
                int32x4_t v31 = *(int32x4_t *)(v88 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v88, v32);
                int32x4_t v92 = vuzp2q_s32(*(int32x4_t *)v88, v32);
                int32x4_t v202 = v28;
                int32x4_t v204 = v92;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v91, v31);
                int32x4_t v33 = vuzp2q_s32(v91, v31);
                int16x8_t v206 = v34;
                int32x4_t v208 = v33;
                uint64_t v90 = 64;
              }
              else if (v89 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v88);
                int32x4_t v202 = (int32x4_t)v34;
                int32x4_t v204 = (int32x4_t)v34;
                int16x8_t v206 = v34;
                int32x4_t v208 = (int32x4_t)v34;
                uint64_t v90 = 2;
              }
              else
              {
                uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v202, 32, v88, v89, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v202, 32, v88, v89, v78);
              uint64_t v90 = 32;
            }
          }
          else
          {
            uint64_t v90 = 0;
            int32x4_t v202 = 0uLL;
            int32x4_t v204 = 0uLL;
            int16x8_t v206 = 0uLL;
            int32x4_t v208 = 0uLL;
          }
          uint64_t v93 = v88 + v90;
          unsigned int v94 = v72[3];
          if (v72[3])
          {
            if (v94 < 0xF0)
            {
              if (v94 == 63)
              {
                int32x4_t v96 = *(int32x4_t *)(v93 + 16);
                int32x4_t v32 = *(int32x4_t *)(v93 + 32);
                int32x4_t v31 = *(int32x4_t *)(v93 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v93, v32);
                int32x4_t v97 = vuzp2q_s32(*(int32x4_t *)v93, v32);
                int32x4_t v210 = v28;
                int32x4_t v212 = v97;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v96, v31);
                int32x4_t v33 = vuzp2q_s32(v96, v31);
                int16x8_t v214 = v34;
                int32x4_t v216 = v33;
                uint64_t v95 = 64;
              }
              else if (v94 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v93);
                int32x4_t v210 = (int32x4_t)v34;
                int32x4_t v212 = (int32x4_t)v34;
                int16x8_t v214 = v34;
                int32x4_t v216 = (int32x4_t)v34;
                uint64_t v95 = 2;
              }
              else
              {
                uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v210, 32, v93, v94, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v210, 32, v93, v94, v78);
              uint64_t v95 = 32;
            }
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v210 = 0uLL;
            int32x4_t v212 = 0uLL;
            int16x8_t v214 = 0uLL;
            int32x4_t v216 = 0uLL;
          }
          uint64_t v98 = v93 + v95;
          unsigned int v99 = v72[4];
          if (v72[4])
          {
            if (v99 < 0xF0)
            {
              if (v99 == 63)
              {
                int32x4_t v101 = *(int32x4_t *)(v98 + 16);
                int32x4_t v32 = *(int32x4_t *)(v98 + 32);
                int32x4_t v31 = *(int32x4_t *)(v98 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v98, v32);
                int32x4_t v102 = vuzp2q_s32(*(int32x4_t *)v98, v32);
                int32x4_t v217 = v28;
                int32x4_t v219 = v102;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v101, v31);
                int32x4_t v33 = vuzp2q_s32(v101, v31);
                int16x8_t v221 = v34;
                int32x4_t v223 = v33;
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v98);
                int32x4_t v217 = (int32x4_t)v34;
                int32x4_t v219 = (int32x4_t)v34;
                int16x8_t v221 = v34;
                int32x4_t v223 = (int32x4_t)v34;
                uint64_t v100 = 2;
              }
              else
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v217, 32, v98, v99, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v217, 32, v98, v99, v78);
              uint64_t v100 = 32;
            }
          }
          else
          {
            uint64_t v100 = 0;
            int32x4_t v217 = 0uLL;
            int32x4_t v219 = 0uLL;
            int16x8_t v221 = 0uLL;
            int32x4_t v223 = 0uLL;
          }
          uint64_t v103 = v98 + v100;
          unsigned int v104 = v72[5];
          if (v72[5])
          {
            if (v104 < 0xF0)
            {
              if (v104 == 63)
              {
                int32x4_t v106 = *(int32x4_t *)(v103 + 16);
                int32x4_t v32 = *(int32x4_t *)(v103 + 32);
                int32x4_t v31 = *(int32x4_t *)(v103 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v103, v32);
                int32x4_t v107 = vuzp2q_s32(*(int32x4_t *)v103, v32);
                int32x4_t v225 = v28;
                int32x4_t v227 = v107;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v106, v31);
                int32x4_t v33 = vuzp2q_s32(v106, v31);
                int16x8_t v229 = v34;
                int32x4_t v231 = v33;
                uint64_t v105 = 64;
              }
              else if (v104 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v103);
                int32x4_t v225 = (int32x4_t)v34;
                int32x4_t v227 = (int32x4_t)v34;
                int16x8_t v229 = v34;
                int32x4_t v231 = (int32x4_t)v34;
                uint64_t v105 = 2;
              }
              else
              {
                uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v225, 32, v103, v104, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v225, 32, v103, v104, v78);
              uint64_t v105 = 32;
            }
          }
          else
          {
            uint64_t v105 = 0;
            int32x4_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
            int16x8_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v108 = v103 + v105;
          unsigned int v109 = v72[6];
          if (v72[6])
          {
            if (v109 < 0xF0)
            {
              if (v109 == 63)
              {
                int32x4_t v148 = *(int32x4_t *)(v108 + 16);
                int32x4_t v32 = *(int32x4_t *)(v108 + 32);
                int32x4_t v31 = *(int32x4_t *)(v108 + 48);
                int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v108, v32);
                int32x4_t v149 = vuzp2q_s32(*(int32x4_t *)v108, v32);
                int32x4_t v218 = v28;
                int32x4_t v220 = v149;
                int16x8_t v34 = (int16x8_t)vuzp1q_s32(v148, v31);
                int32x4_t v33 = vuzp2q_s32(v148, v31);
                int16x8_t v222 = v34;
                int32x4_t v224 = v33;
                uint64_t v110 = 64;
                unsigned int v111 = v72[7];
                if (!v72[7]) {
                  goto LABEL_152;
                }
              }
              else if (v109 == 1)
              {
                int16x8_t v34 = vld1q_dup_s16((const __int16 *)v108);
                int32x4_t v218 = (int32x4_t)v34;
                int32x4_t v220 = (int32x4_t)v34;
                int16x8_t v222 = v34;
                int32x4_t v224 = (int32x4_t)v34;
                uint64_t v110 = 2;
                unsigned int v111 = v72[7];
                if (!v72[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v218, 32, v108, v109, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
                unsigned int v111 = v72[7];
                if (!v72[7])
                {
LABEL_152:
                  int32x4_t v226 = 0uLL;
                  int32x4_t v228 = 0uLL;
                  int16x8_t v230 = 0uLL;
                  int32x4_t v232 = 0uLL;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v218, 32, v108, v109, v78);
              uint64_t v110 = 32;
              unsigned int v111 = v72[7];
              if (!v72[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v110 = 0;
            int32x4_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
            int16x8_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
            unsigned int v111 = v72[7];
            if (!v72[7]) {
              goto LABEL_152;
            }
          }
          uint64_t v112 = v108 + v110;
          if (v111 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v226, 32, v112, v111, v78);
LABEL_156:
            a7 = v174;
            uint64_t v113 = v196;
            if (!v196) {
              goto LABEL_206;
            }
            goto LABEL_157;
          }
          a7 = v174;
          if (v111 == 63)
          {
            int32x4_t v150 = *(int32x4_t *)(v112 + 16);
            int32x4_t v32 = *(int32x4_t *)(v112 + 32);
            int32x4_t v31 = *(int32x4_t *)(v112 + 48);
            int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v112, v32);
            int32x4_t v151 = vuzp2q_s32(*(int32x4_t *)v112, v32);
            int32x4_t v226 = v28;
            int32x4_t v228 = v151;
            int16x8_t v34 = (int16x8_t)vuzp1q_s32(v150, v31);
            int32x4_t v33 = vuzp2q_s32(v150, v31);
            int16x8_t v230 = v34;
            int32x4_t v232 = v33;
            uint64_t v113 = v196;
            if (!v196) {
              goto LABEL_206;
            }
          }
          else if (v111 == 1)
          {
            int16x8_t v34 = vld1q_dup_s16((const __int16 *)v112);
            int32x4_t v226 = (int32x4_t)v34;
            int32x4_t v228 = (int32x4_t)v34;
            int16x8_t v230 = v34;
            int32x4_t v232 = (int32x4_t)v34;
            uint64_t v113 = v196;
            if (!v196) {
              goto LABEL_206;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v226, 32, v112, v111, *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(int8x8_t *)v31.i8);
            uint64_t v113 = v196;
            if (!v196) {
              goto LABEL_206;
            }
          }
LABEL_157:
          if (v197)
          {
            uint64_t v114 = 0;
            uint64_t v115 = 32 * v194;
            uint64_t v116 = 2 * v195;
            int64x2_t v117 = &v201.i8[v115 + v116];
            unint64_t v118 = v192;
            uint64_t v119 = v193;
            unint64_t v120 = 2 * v197;
            if (v120 <= 1) {
              unint64_t v121 = 1;
            }
            else {
              unint64_t v121 = 2 * v197;
            }
            uint64_t v122 = v115 + v116;
            unint64_t v123 = &v201.i8[v115 + v116];
            if (v121) {
              BOOL v124 = (v121 - 1) >> 32 == 0;
            }
            else {
              BOOL v124 = 0;
            }
            uint64_t v125 = v121 & 0x1FFFFFFE0;
            uint64_t v126 = v121 & 0x1FFFFFFF8;
            char v128 = !v124 || v121 < 8;
            int64x2_t v129 = &v202.i8[v122];
            int64x2_t v130 = (int16x8_t *)(v192 + 16);
            int64x2_t v131 = v117;
            unint64_t v132 = v192;
            do
            {
              int64x2_t v133 = (char *)(v118 + v119 * v114);
              int64x2_t v134 = &v117[32 * v114];
              if ((unint64_t)(&v123[32 * v114] - v133) < 0x20) {
                char v135 = 1;
              }
              else {
                char v135 = v128;
              }
              if (v135)
              {
                int v136 = 0;
                goto LABEL_188;
              }
              if (v121 >= 0x20)
              {
                float32x4_t v138 = v130;
                int64x2_t v139 = (int32x4_t *)v129;
                uint64_t v140 = v121 & 0x1FFFFFFE0;
                do
                {
                  int16x8_t v34 = v138[-1];
                  int32x4_t v33 = *(int32x4_t *)v138;
                  v139[-1] = (int32x4_t)v34;
                  *int64x2_t v139 = v33;
                  v139 += 2;
                  v138 += 2;
                  v140 -= 32;
                }
                while (v140);
                if (v121 == v125) {
                  goto LABEL_171;
                }
                uint64_t v137 = v121 & 0x1FFFFFFE0;
                if ((v121 & 0x18) == 0)
                {
                  v133 += v125;
                  v134 += v125;
                  int v136 = v121 & 0xFFFFFFE0;
                  goto LABEL_188;
                }
              }
              else
              {
                uint64_t v137 = 0;
              }
              v134 += v126;
              uint64_t v141 = v137 - v126;
              int64x2_t v142 = (uint64_t *)(v132 + v137);
              int64x2_t v143 = (uint64_t *)&v131[v137];
              do
              {
                uint64_t v144 = *v142++;
                v34.i64[0] = v144;
                *v143++ = v144;
                v141 += 8;
              }
              while (v141);
              if (v121 == v126) {
                goto LABEL_171;
              }
              v133 += v126;
              int v136 = v121 & 0xFFFFFFF8;
LABEL_188:
              unsigned int v145 = v136 + 1;
              do
              {
                char v146 = *v133++;
                *v134++ = v146;
              }
              while (v120 > v145++);
LABEL_171:
              ++v114;
              v129 += 32;
              int64x2_t v130 = (int16x8_t *)((char *)v130 + v119);
              v132 += v119;
              v131 += 32;
            }
            while (v114 != v113);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v201, 32, (unint64_t)v190, v191, v198, v199, *(_DWORD *)(*(void *)(v185 + 208) + 52), *(double *)v34.i64, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int16x4_t *)v28.i8);
LABEL_207:
          if (v187) {
            memcpy(__src, v74, 0x200uLL);
          }
          BOOL v23 = v37 == v175 >> 4;
          unsigned int v37 = v76;
          uint64_t v29 = v185;
        }
        while (!v23);
        BOOL v23 = v18++ == v168;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v177[28] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v152 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v136 = a8 + a10 - 1;
  unsigned int v138 = v136 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v156 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v156;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v157 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v156;
  BOOL v146 = isLevelTiled;
  if (v18 <= v138)
  {
    unsigned int v145 = a7 + a9 - 1;
    unsigned int v135 = a7 >> 4;
    if (a7 >> 4 <= v145 >> 4)
    {
      unsigned int v132 = a5 - 1;
      unsigned int v134 = (a6 - 1) >> 4;
      int v154 = ((a5 - 1) & 0xF) + 1;
      unsigned int v155 = (a5 - 1) >> 4;
      int v133 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v143 = v30.i32[0] | v30.i32[1];
      int8x8_t v142 = v30;
      BOOL v140 = v30.i32[0] != 0;
      BOOL v141 = v30.i32[1] != 0;
      unint64_t v131 = 8 * v20 * (unint64_t)v19;
      unsigned int v144 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v152) {
          int v32 = v152;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v135;
        if (v136 < v31) {
          unsigned int v31 = v136;
        }
        int v139 = v32 - 16 * v18;
        int v150 = v31 - v32 + 1;
        unsigned int v151 = 16 * v18;
        if (v18 == v134) {
          unsigned int v34 = v133;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v149 = a3 + (v32 - v152) * a11;
        unsigned int v153 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v145 < v36) {
            unsigned int v36 = v145;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v155) {
            unsigned int v39 = v154;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v151 >= v152 && v35 >= a7)
          {
            int v41 = v154;
            if (v33 != v155) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v150 != v34;
          }
          if (v146)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v131 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v122 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v123 = 0;
              if (v65) {
                goto LABEL_162;
              }
LABEL_151:
              unsigned int v124 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v124 | v123) {
                goto LABEL_152;
              }
LABEL_163:
              uint64_t v126 = 0;
            }
            else
            {
              unsigned int v123 = 32 - __clz(~(-1 << -(char)__clz(v122)));
              if ((v65 & 1) == 0) {
                goto LABEL_151;
              }
LABEL_162:
              unsigned int v124 = 0;
              if (!v123) {
                goto LABEL_163;
              }
LABEL_152:
              int v125 = 0;
              uint64_t v126 = 0;
              int v127 = v33 & v122;
              BOOL v128 = v123 != 0;
              BOOL v129 = v124 != 0;
              int v130 = 1;
              do
              {
                --v123;
                if (v128) {
                  v126 |= (unint64_t)(v130 & v127) << v125++;
                }
                else {
                  unsigned int v123 = 0;
                }
                --v124;
                if (v129) {
                  v126 |= (unint64_t)(v130 & v18 & ((v66 >> 4) - 1)) << v125++;
                }
                else {
                  unsigned int v124 = 0;
                }
                v130 *= 2;
                --v125;
                BOOL v129 = v124 != 0;
                BOOL v128 = v123 != 0;
              }
              while (v124 | v123);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v151 / v66 * ((v62 + v132) / v62)) << 14) + (v126 << 9);
            goto LABEL_59;
          }
          if (v143)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v140;
            BOOL v47 = v141;
            __int32 v49 = v142.i32[0];
            __int32 v48 = v142.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          char v68 = (unsigned __int8 *)(a4 + 8 * v58);
          uint64_t v69 = v149 + 4 * (v37 - a7);
          unsigned int v70 = (int64x2_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v157)
          {
            if (!v71)
            {
              uint64_t v77 = (int64x2_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v69, a11, (unint64_t)v77, v68, v39, v34, *(_DWORD *)(*(void *)(v28 + 208) + 52));
              goto LABEL_96;
            }
            BOOL v72 = v70;
            char v73 = v39;
            uint64_t v74 = v70;
            int v75 = v38;
            int v76 = v37;
            memcpy(__dst, v72, sizeof(__dst));
            int v37 = v76;
            unsigned int v35 = 16 * v33;
            uint64_t v77 = (int64x2_t *)__dst;
            int v38 = v75;
            unsigned int v70 = v74;
            LOBYTE(v39) = v73;
            LOBYTE(v34) = v153;
            uint64_t v28 = v156;
          }
          else
          {
            uint64_t v77 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          BOOL v159 = v77;
          unsigned __int8 v167 = v39;
          unsigned __int8 v168 = v34;
          unsigned int v163 = v139;
          unsigned int v164 = v37 - v35;
          int v160 = v68;
          uint64_t v161 = v69;
          uint64_t v162 = a11;
          unsigned int v165 = v150;
          unsigned int v166 = v38;
          if (!v40)
          {
            int v78 = *(_DWORD *)(*(void *)(v28 + 208) + 52);
            unsigned int v79 = (int64x2_t *)((char *)v77
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v170, 64, v77, *v68, v78));
            uint64_t v80 = (int64x2_t *)((char *)v79
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 64, v79, v68[1], v78));
            int32x4_t v81 = (int64x2_t *)((char *)v80
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v171, 64, v80, v68[2], v78));
            int32x4_t v82 = (int64x2_t *)((char *)v81
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 64, v81, v68[3], v78));
            uint64_t v83 = (int64x2_t *)((char *)v82
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 64, v82, v68[4], v78));
            unsigned int v84 = (int64x2_t *)((char *)v83
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v176, 64, v83, v68[5], v78));
            uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v175, 64, v84, v68[6], v78);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v177, 64, (int64x2_t *)((char *)v84 + v85), v68[7], v78);
            uint64_t v86 = v165;
            a7 = v144;
            if (!v165 || !v166)
            {
LABEL_133:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v170, 64, (unint64_t)v159, v160, v167, v168, *(_DWORD *)(*(void *)(v156 + 208) + 52));
              if (!v157) {
                goto LABEL_27;
              }
              goto LABEL_134;
            }
            uint64_t v87 = 0;
            unint64_t v88 = (unint64_t)v163 << 6;
            uint64_t v89 = 4 * v164;
            uint64_t v90 = &v170[v88 + v89];
            uint64_t v91 = v161;
            uint64_t v92 = v162;
            unint64_t v93 = 4 * v166;
            if (v93 <= 1) {
              unint64_t v94 = 1;
            }
            else {
              unint64_t v94 = 4 * v166;
            }
            unint64_t v95 = v88 + v89;
            int32x4_t v96 = &v170[v88 + v89];
            if (v94) {
              BOOL v97 = (v94 - 1) >> 32 == 0;
            }
            else {
              BOOL v97 = 0;
            }
            uint64_t v98 = v94 & 0x3FFFFFFE0;
            uint64_t v99 = v94 & 0x3FFFFFFF8;
            char v101 = !v97 || v94 < 8;
            int32x4_t v102 = &v170[v95 + 16];
            uint64_t v103 = (long long *)(v161 + 16);
            unsigned int v104 = v90;
            uint64_t v105 = v161;
            while (2)
            {
              int32x4_t v106 = (char *)(v91 + v92 * v87);
              int32x4_t v107 = &v90[64 * v87];
              if ((unint64_t)(&v96[64 * v87] - v106) < 0x20) {
                char v108 = 1;
              }
              else {
                char v108 = v101;
              }
              if (v108)
              {
                int v109 = 0;
LABEL_130:
                unsigned int v119 = v109 + 1;
                do
                {
                  char v120 = *v106++;
                  *v107++ = v120;
                }
                while (v93 > v119++);
              }
              else
              {
                if (v94 >= 0x20)
                {
                  unsigned int v111 = v103;
                  uint64_t v112 = v102;
                  uint64_t v113 = v94 & 0x3FFFFFFE0;
                  do
                  {
                    long long v114 = *v111;
                    *(v112 - 1) = *(v111 - 1);
                    *uint64_t v112 = v114;
                    v112 += 2;
                    v111 += 2;
                    v113 -= 32;
                  }
                  while (v113);
                  if (v94 == v98) {
                    goto LABEL_113;
                  }
                  uint64_t v110 = v94 & 0x3FFFFFFE0;
                  if ((v94 & 0x18) == 0)
                  {
                    v106 += v98;
                    v107 += v98;
                    int v109 = v94 & 0xFFFFFFE0;
                    goto LABEL_130;
                  }
                }
                else
                {
                  uint64_t v110 = 0;
                }
                v107 += v99;
                uint64_t v115 = v110 - v99;
                uint64_t v116 = (uint64_t *)(v105 + v110);
                int64x2_t v117 = &v104[v110];
                do
                {
                  uint64_t v118 = *v116++;
                  *v117++ = v118;
                  v115 += 8;
                }
                while (v115);
                if (v94 != v99)
                {
                  v106 += v99;
                  int v109 = v94 & 0xFFFFFFF8;
                  goto LABEL_130;
                }
              }
LABEL_113:
              ++v87;
              v102 += 64;
              uint64_t v103 = (long long *)((char *)v103 + v92);
              v105 += v92;
              v104 += 64;
              if (v87 == v86) {
                goto LABEL_133;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_96:
          a7 = v144;
          if (!v157) {
            goto LABEL_27;
          }
LABEL_134:
          memcpy(v70, v77, 0x400uLL);
LABEL_27:
          BOOL v23 = v33++ == v145 >> 4;
          uint64_t v28 = v156;
          unsigned int v34 = v153;
        }
        while (!v23);
        BOOL v23 = v18++ == v138;
      }
      while (!v23);
    }
  }
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v321 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v238 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v222 = a8 + a10 - 1;
  unsigned int v224 = v222 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v241 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v241;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v243 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v241;
  int v232 = (int)result;
  if (v18 <= v224)
  {
    unsigned int v231 = a7 + a9 - 1;
    unsigned int v221 = a7 >> 4;
    if (a7 >> 4 <= v231 >> 4)
    {
      unsigned int v218 = a5 - 1;
      unsigned int v240 = (a5 - 1) >> 4;
      int v239 = ((a5 - 1) & 0xF) + 1;
      int v219 = ((a6 - 1) & 0xF) + 1;
      unsigned int v220 = (a6 - 1) >> 4;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 4uLL)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v30));
      __int32 v229 = v28.i32[0] | v28.i32[1];
      BOOL v227 = v28.i32[1] != 0;
      uint64_t v228 = v28.i64[0];
      BOOL v226 = v28.i32[0] != 0;
      unint64_t v217 = 8 * v20 * (unint64_t)v19;
      unsigned int v230 = a7;
      do
      {
        unsigned int v32 = (16 * v18) | 0xF;
        if (16 * v18 <= v238) {
          int v33 = v238;
        }
        else {
          int v33 = 16 * v18;
        }
        unsigned int v34 = v221;
        if (v222 < v32) {
          unsigned int v32 = v222;
        }
        unsigned int v237 = 16 * v18;
        int v225 = v33 - 16 * v18;
        int v236 = v32 - v33 + 1;
        int v35 = v219;
        if (v18 != v220) {
          int v35 = 16;
        }
        unsigned int v244 = v35;
        uint64_t v235 = a3 + (v33 - v238) * a11;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v231 < v37) {
            unsigned int v37 = v231;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v240) {
            unsigned int v40 = v239;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v237 >= v238 && v36 >= a7)
          {
            int v42 = v239;
            if (v34 != v240) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v236 != v244;
          }
          if (v232)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v217 >> (*(unsigned char *)(v29 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  unsigned int v63 = 16;
                  char v66 = 1;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v208 = (v63 >> 4) - 1;
            if (v65)
            {
              unsigned int v209 = 0;
              if (v66) {
                goto LABEL_234;
              }
LABEL_223:
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(((v67 + 15) >> 4) - 1)));
              if (v210 | v209) {
                goto LABEL_224;
              }
LABEL_235:
              uint64_t v212 = 0;
            }
            else
            {
              unsigned int v209 = 32 - __clz(~(-1 << -(char)__clz(v208)));
              if ((v66 & 1) == 0) {
                goto LABEL_223;
              }
LABEL_234:
              unsigned int v210 = 0;
              if (!v209) {
                goto LABEL_235;
              }
LABEL_224:
              int v211 = 0;
              uint64_t v212 = 0;
              int v213 = v34 & v208;
              BOOL v214 = v209 != 0;
              BOOL v215 = v210 != 0;
              int v216 = 1;
              do
              {
                --v209;
                if (v214) {
                  v212 |= (unint64_t)(v216 & v213) << v211++;
                }
                else {
                  unsigned int v209 = 0;
                }
                --v210;
                if (v215) {
                  v212 |= (unint64_t)(v216 & v18 & ((v67 >> 4) - 1)) << v211++;
                }
                else {
                  unsigned int v210 = 0;
                }
                v216 *= 2;
                --v211;
                BOOL v215 = v210 != 0;
                BOOL v214 = v209 != 0;
              }
              while (v210 | v209);
            }
            unint64_t v51 = ((unint64_t)(v36 / v63 + v237 / v67 * ((v63 + v218) / v63)) << 14) + (v212 << 9);
            goto LABEL_58;
          }
          if (v229)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v227;
            BOOL v48 = v226;
            int v49 = HIDWORD(v228);
            int v50 = v228;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 9;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 0x10 || v41;
          uint64_t v69 = (unsigned __int8 *)(a4 + 8 * v59);
          uint64_t v70 = v235 + 4 * (v38 - a7);
          int v71 = (int64x2_t *)(a2 + v51);
          if (v244 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          int v242 = v71;
          if (v243)
          {
            char v73 = (int64x2_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v29 = v241;
          }
          else
          {
            char v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v70, a11, (unint64_t)v73, v69, v40, v244, *(_DWORD *)(*(void *)(v29 + 208) + 52));
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          unsigned int v246 = v73;
          unsigned __int8 v254 = v40;
          unsigned __int8 v255 = v244;
          unsigned int v250 = v225;
          unsigned int v251 = v38 - v36;
          uint64_t v247 = v69;
          uint64_t v248 = v70;
          uint64_t v249 = a11;
          unsigned int v252 = v236;
          unsigned int v253 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v230;
            unsigned int v74 = v34 + 1;
            goto LABEL_205;
          }
          uint64_t v75 = *(void *)(v29 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v69;
          if (*v69)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 127)
              {
                int64x2_t v80 = *v73;
                int64x2_t v81 = v73[1];
                int64x2_t v82 = v73[2];
                int64x2_t v83 = v73[3];
                int64x2_t v84 = v73[4];
                int64x2_t v85 = v73[5];
                int64x2_t v86 = v73[6];
                int64x2_t v87 = v73[7];
                int64x2_t v257 = vzip1q_s64(*v73, v81);
                int64x2_t v258 = vzip1q_s64(v84, v85);
                int64x2_t v261 = vzip2q_s64(v80, v81);
                int64x2_t v262 = vzip2q_s64(v84, v85);
                int64x2_t v265 = vzip1q_s64(v82, v83);
                int64x2_t v266 = vzip1q_s64(v86, v87);
                int32x4_t v78 = (int32x4_t)vzip2q_s64(v82, v83);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v86, v87);
                int32x4_t v269 = v78;
                int32x4_t v270 = v31;
                uint64_t v79 = 128;
                unsigned int v74 = v34 + 1;
              }
              else
              {
                unsigned int v74 = v34 + 1;
                if (v77 == 3)
                {
                  int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
                  int64x2_t v257 = (int64x2_t)v78;
                  int64x2_t v258 = (int64x2_t)v78;
                  int64x2_t v261 = (int64x2_t)v78;
                  int64x2_t v262 = (int64x2_t)v78;
                  int64x2_t v265 = (int64x2_t)v78;
                  int64x2_t v266 = (int64x2_t)v78;
                  int32x4_t v269 = v78;
                  int32x4_t v270 = v78;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v257, 64, (uint64_t)v73, v77, v28, v31);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v257.i32, 64, (uint64_t)v73, v77, *(_DWORD *)(v75 + 52));
              uint64_t v79 = 64;
              unsigned int v74 = v34 + 1;
            }
          }
          else
          {
            uint64_t v79 = 0;
            int32x4_t v78 = 0uLL;
            int64x2_t v258 = 0u;
            int64x2_t v257 = 0u;
            int64x2_t v261 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v266 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
            unsigned int v74 = v34 + 1;
          }
          uint64_t v88 = (uint64_t)v73->i64 + v79;
          unsigned int v89 = v69[1];
          if (v69[1])
          {
            if (v89 < 0xF0)
            {
              if (v89 == 127)
              {
                int64x2_t v92 = *(int64x2_t *)v88;
                int64x2_t v93 = *(int64x2_t *)(v88 + 16);
                int64x2_t v94 = *(int64x2_t *)(v88 + 32);
                int64x2_t v95 = *(int64x2_t *)(v88 + 48);
                int64x2_t v96 = *(int64x2_t *)(v88 + 64);
                int64x2_t v97 = *(int64x2_t *)(v88 + 80);
                int64x2_t v98 = *(int64x2_t *)(v88 + 96);
                int64x2_t v99 = *(int64x2_t *)(v88 + 112);
                int64x2_t v273 = vzip1q_s64(*(int64x2_t *)v88, v93);
                int64x2_t v274 = vzip1q_s64(v96, v97);
                int64x2_t v277 = vzip2q_s64(v92, v93);
                int64x2_t v278 = vzip2q_s64(v96, v97);
                int64x2_t v281 = vzip1q_s64(v94, v95);
                int64x2_t v282 = vzip1q_s64(v98, v99);
                int32x4_t v90 = (int32x4_t)vzip2q_s64(v94, v95);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v98, v99);
                int32x4_t v285 = v90;
                int32x4_t v286 = v31;
                uint64_t v91 = 128;
              }
              else if (v89 == 3)
              {
                int32x4_t v90 = (int32x4_t)vld1q_dup_f32((const float *)v88);
                int64x2_t v273 = (int64x2_t)v90;
                int64x2_t v274 = (int64x2_t)v90;
                int64x2_t v277 = (int64x2_t)v90;
                int64x2_t v278 = (int64x2_t)v90;
                int64x2_t v281 = (int64x2_t)v90;
                int64x2_t v282 = (int64x2_t)v90;
                int32x4_t v285 = v90;
                int32x4_t v286 = v90;
                uint64_t v91 = 4;
              }
              else
              {
                uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v273, 64, v88, v89, v78, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v273.i32, 64, v88, v89, v76);
              uint64_t v91 = 64;
            }
          }
          else
          {
            uint64_t v91 = 0;
            int32x4_t v90 = 0uLL;
            int64x2_t v273 = 0u;
            int64x2_t v274 = 0u;
            int64x2_t v277 = 0u;
            int64x2_t v278 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v282 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
          }
          uint64_t v100 = v88 + v91;
          unsigned int v101 = v69[2];
          if (v69[2])
          {
            if (v101 < 0xF0)
            {
              if (v101 == 127)
              {
                int64x2_t v104 = *(int64x2_t *)v100;
                int64x2_t v105 = *(int64x2_t *)(v100 + 16);
                int64x2_t v106 = *(int64x2_t *)(v100 + 32);
                int64x2_t v107 = *(int64x2_t *)(v100 + 48);
                int64x2_t v108 = *(int64x2_t *)(v100 + 64);
                int64x2_t v109 = *(int64x2_t *)(v100 + 80);
                int64x2_t v110 = *(int64x2_t *)(v100 + 96);
                int64x2_t v111 = *(int64x2_t *)(v100 + 112);
                int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v100, v105);
                int64x2_t v260 = vzip1q_s64(v108, v109);
                int64x2_t v263 = vzip2q_s64(v104, v105);
                int64x2_t v264 = vzip2q_s64(v108, v109);
                int64x2_t v267 = vzip1q_s64(v106, v107);
                int64x2_t v268 = vzip1q_s64(v110, v111);
                int32x4_t v102 = (int32x4_t)vzip2q_s64(v106, v107);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v110, v111);
                int32x4_t v271 = v102;
                int32x4_t v272 = v31;
                uint64_t v103 = 128;
              }
              else if (v101 == 3)
              {
                int32x4_t v102 = (int32x4_t)vld1q_dup_f32((const float *)v100);
                int64x2_t v259 = (int64x2_t)v102;
                int64x2_t v260 = (int64x2_t)v102;
                int64x2_t v263 = (int64x2_t)v102;
                int64x2_t v264 = (int64x2_t)v102;
                int64x2_t v267 = (int64x2_t)v102;
                int64x2_t v268 = (int64x2_t)v102;
                int32x4_t v271 = v102;
                int32x4_t v272 = v102;
                uint64_t v103 = 4;
              }
              else
              {
                uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 64, v100, v101, v90, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v259.i32, 64, v100, v101, v76);
              uint64_t v103 = 64;
            }
          }
          else
          {
            uint64_t v103 = 0;
            int32x4_t v102 = 0uLL;
            int64x2_t v259 = 0u;
            int64x2_t v260 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v264 = 0u;
            int64x2_t v267 = 0u;
            int64x2_t v268 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v112 = v100 + v103;
          unsigned int v113 = v69[3];
          if (v69[3])
          {
            if (v113 < 0xF0)
            {
              if (v113 == 127)
              {
                int64x2_t v116 = *(int64x2_t *)v112;
                int64x2_t v117 = *(int64x2_t *)(v112 + 16);
                int64x2_t v118 = *(int64x2_t *)(v112 + 32);
                int64x2_t v119 = *(int64x2_t *)(v112 + 48);
                int64x2_t v120 = *(int64x2_t *)(v112 + 64);
                int64x2_t v121 = *(int64x2_t *)(v112 + 80);
                int64x2_t v122 = *(int64x2_t *)(v112 + 96);
                int64x2_t v123 = *(int64x2_t *)(v112 + 112);
                int64x2_t v275 = vzip1q_s64(*(int64x2_t *)v112, v117);
                int64x2_t v276 = vzip1q_s64(v120, v121);
                int64x2_t v279 = vzip2q_s64(v116, v117);
                int64x2_t v280 = vzip2q_s64(v120, v121);
                int64x2_t v283 = vzip1q_s64(v118, v119);
                int64x2_t v284 = vzip1q_s64(v122, v123);
                int32x4_t v114 = (int32x4_t)vzip2q_s64(v118, v119);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v122, v123);
                int32x4_t v287 = v114;
                int32x4_t v288 = v31;
                uint64_t v115 = 128;
              }
              else if (v113 == 3)
              {
                int32x4_t v114 = (int32x4_t)vld1q_dup_f32((const float *)v112);
                int64x2_t v275 = (int64x2_t)v114;
                int64x2_t v276 = (int64x2_t)v114;
                int64x2_t v279 = (int64x2_t)v114;
                int64x2_t v280 = (int64x2_t)v114;
                int64x2_t v283 = (int64x2_t)v114;
                int64x2_t v284 = (int64x2_t)v114;
                int32x4_t v287 = v114;
                int32x4_t v288 = v114;
                uint64_t v115 = 4;
              }
              else
              {
                uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 64, v112, v113, v102, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v275.i32, 64, v112, v113, v76);
              uint64_t v115 = 64;
            }
          }
          else
          {
            uint64_t v115 = 0;
            int32x4_t v114 = 0uLL;
            int64x2_t v275 = 0u;
            int64x2_t v276 = 0u;
            int64x2_t v279 = 0u;
            int64x2_t v280 = 0u;
            int64x2_t v283 = 0u;
            int64x2_t v284 = 0u;
            int32x4_t v287 = 0u;
            int32x4_t v288 = 0u;
          }
          uint64_t v124 = v112 + v115;
          unsigned int v125 = v69[4];
          if (v69[4])
          {
            if (v125 < 0xF0)
            {
              if (v125 == 127)
              {
                int64x2_t v128 = *(int64x2_t *)v124;
                int64x2_t v129 = *(int64x2_t *)(v124 + 16);
                int64x2_t v130 = *(int64x2_t *)(v124 + 32);
                int64x2_t v131 = *(int64x2_t *)(v124 + 48);
                int64x2_t v132 = *(int64x2_t *)(v124 + 64);
                int64x2_t v133 = *(int64x2_t *)(v124 + 80);
                int64x2_t v134 = *(int64x2_t *)(v124 + 96);
                int64x2_t v135 = *(int64x2_t *)(v124 + 112);
                int64x2_t v289 = vzip1q_s64(*(int64x2_t *)v124, v129);
                int64x2_t v290 = vzip1q_s64(v132, v133);
                int64x2_t v293 = vzip2q_s64(v128, v129);
                int64x2_t v294 = vzip2q_s64(v132, v133);
                int64x2_t v297 = vzip1q_s64(v130, v131);
                int64x2_t v298 = vzip1q_s64(v134, v135);
                int32x4_t v126 = (int32x4_t)vzip2q_s64(v130, v131);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v134, v135);
                int32x4_t v301 = v126;
                int32x4_t v302 = v31;
                uint64_t v127 = 128;
              }
              else if (v125 == 3)
              {
                int32x4_t v126 = (int32x4_t)vld1q_dup_f32((const float *)v124);
                int64x2_t v289 = (int64x2_t)v126;
                int64x2_t v290 = (int64x2_t)v126;
                int64x2_t v293 = (int64x2_t)v126;
                int64x2_t v294 = (int64x2_t)v126;
                int64x2_t v297 = (int64x2_t)v126;
                int64x2_t v298 = (int64x2_t)v126;
                int32x4_t v301 = v126;
                int32x4_t v302 = v126;
                uint64_t v127 = 4;
              }
              else
              {
                uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v289, 64, v124, v125, v114, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v289.i32, 64, v124, v125, v76);
              uint64_t v127 = 64;
            }
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v126 = 0uLL;
            int64x2_t v289 = 0u;
            int64x2_t v290 = 0u;
            int64x2_t v293 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v298 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v136 = v124 + v127;
          unsigned int v137 = v69[5];
          if (v69[5])
          {
            if (v137 < 0xF0)
            {
              if (v137 == 127)
              {
                int64x2_t v140 = *(int64x2_t *)v136;
                int64x2_t v141 = *(int64x2_t *)(v136 + 16);
                int64x2_t v142 = *(int64x2_t *)(v136 + 32);
                int64x2_t v143 = *(int64x2_t *)(v136 + 48);
                int64x2_t v144 = *(int64x2_t *)(v136 + 64);
                int64x2_t v145 = *(int64x2_t *)(v136 + 80);
                int64x2_t v146 = *(int64x2_t *)(v136 + 96);
                int64x2_t v147 = *(int64x2_t *)(v136 + 112);
                int64x2_t v305 = vzip1q_s64(*(int64x2_t *)v136, v141);
                int64x2_t v306 = vzip1q_s64(v144, v145);
                int64x2_t v309 = vzip2q_s64(v140, v141);
                int64x2_t v310 = vzip2q_s64(v144, v145);
                int64x2_t v313 = vzip1q_s64(v142, v143);
                int64x2_t v314 = vzip1q_s64(v146, v147);
                int32x4_t v138 = (int32x4_t)vzip2q_s64(v142, v143);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v146, v147);
                int32x4_t v317 = v138;
                int32x4_t v318 = v31;
                uint64_t v139 = 128;
              }
              else if (v137 == 3)
              {
                int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v136);
                int64x2_t v305 = (int64x2_t)v138;
                int64x2_t v306 = (int64x2_t)v138;
                int64x2_t v309 = (int64x2_t)v138;
                int64x2_t v310 = (int64x2_t)v138;
                int64x2_t v313 = (int64x2_t)v138;
                int64x2_t v314 = (int64x2_t)v138;
                int32x4_t v317 = v138;
                int32x4_t v318 = v138;
                uint64_t v139 = 4;
              }
              else
              {
                uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v305, 64, v136, v137, v126, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v305.i32, 64, v136, v137, v76);
              uint64_t v139 = 64;
            }
          }
          else
          {
            uint64_t v139 = 0;
            int32x4_t v138 = 0uLL;
            int64x2_t v305 = 0u;
            int64x2_t v306 = 0u;
            int64x2_t v309 = 0u;
            int64x2_t v310 = 0u;
            int64x2_t v313 = 0u;
            int64x2_t v314 = 0u;
            int32x4_t v317 = 0u;
            int32x4_t v318 = 0u;
          }
          uint64_t v148 = v136 + v139;
          unsigned int v149 = v69[6];
          if (v69[6])
          {
            if (v149 < 0xF0)
            {
              if (v149 == 127)
              {
                int64x2_t v152 = *(int64x2_t *)v148;
                int64x2_t v153 = *(int64x2_t *)(v148 + 16);
                int64x2_t v154 = *(int64x2_t *)(v148 + 32);
                int64x2_t v155 = *(int64x2_t *)(v148 + 48);
                int64x2_t v156 = *(int64x2_t *)(v148 + 64);
                int64x2_t v157 = *(int64x2_t *)(v148 + 80);
                int64x2_t v158 = *(int64x2_t *)(v148 + 96);
                int64x2_t v159 = *(int64x2_t *)(v148 + 112);
                int64x2_t v291 = vzip1q_s64(*(int64x2_t *)v148, v153);
                int64x2_t v292 = vzip1q_s64(v156, v157);
                int64x2_t v295 = vzip2q_s64(v152, v153);
                int64x2_t v296 = vzip2q_s64(v156, v157);
                int64x2_t v299 = vzip1q_s64(v154, v155);
                int64x2_t v300 = vzip1q_s64(v158, v159);
                int32x4_t v150 = (int32x4_t)vzip2q_s64(v154, v155);
                int32x4_t v31 = (int32x4_t)vzip2q_s64(v158, v159);
                int32x4_t v303 = v150;
                int32x4_t v304 = v31;
                uint64_t v151 = 128;
              }
              else if (v149 == 3)
              {
                int32x4_t v150 = (int32x4_t)vld1q_dup_f32((const float *)v148);
                int64x2_t v291 = (int64x2_t)v150;
                int64x2_t v292 = (int64x2_t)v150;
                int64x2_t v295 = (int64x2_t)v150;
                int64x2_t v296 = (int64x2_t)v150;
                int64x2_t v299 = (int64x2_t)v150;
                int64x2_t v300 = (int64x2_t)v150;
                int32x4_t v303 = v150;
                int32x4_t v304 = v150;
                uint64_t v151 = 4;
              }
              else
              {
                uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v291, 64, v148, v149, v138, v31);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v291.i32, 64, v148, v149, v76);
              uint64_t v151 = 64;
            }
          }
          else
          {
            uint64_t v151 = 0;
            int32x4_t v150 = 0uLL;
            int64x2_t v291 = 0u;
            int64x2_t v292 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v296 = 0u;
            int64x2_t v299 = 0u;
            int64x2_t v300 = 0u;
            int32x4_t v303 = 0u;
            int32x4_t v304 = 0u;
          }
          int v160 = v73;
          unsigned int v161 = v69[7];
          if (!v69[7])
          {
            int64x2_t v307 = 0u;
            int64x2_t v308 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v312 = 0u;
            int64x2_t v315 = 0u;
            int64x2_t v316 = 0u;
            int64x2_t v319 = 0u;
            int64x2_t v320 = 0u;
LABEL_162:
            a7 = v230;
            uint64_t v163 = v252;
            if (!v252) {
              goto LABEL_204;
            }
            goto LABEL_163;
          }
          uint64_t v162 = v148 + v151;
          if (v161 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v307.i32, 64, v162, v161, v76);
            goto LABEL_162;
          }
          a7 = v230;
          if (v161 == 127)
          {
            int64x2_t v200 = *(int64x2_t *)v162;
            int64x2_t v201 = *(int64x2_t *)(v162 + 16);
            int64x2_t v202 = *(int64x2_t *)(v162 + 32);
            int64x2_t v203 = *(int64x2_t *)(v162 + 48);
            int64x2_t v204 = *(int64x2_t *)(v162 + 64);
            int64x2_t v205 = *(int64x2_t *)(v162 + 80);
            int64x2_t v206 = *(int64x2_t *)(v162 + 96);
            int64x2_t v207 = *(int64x2_t *)(v162 + 112);
            int64x2_t v307 = vzip1q_s64(*(int64x2_t *)v162, v201);
            int64x2_t v308 = vzip1q_s64(v204, v205);
            int64x2_t v311 = vzip2q_s64(v200, v201);
            int64x2_t v312 = vzip2q_s64(v204, v205);
            int64x2_t v315 = vzip1q_s64(v202, v203);
            int64x2_t v316 = vzip1q_s64(v206, v207);
            int64x2_t v319 = vzip2q_s64(v202, v203);
            int64x2_t v320 = vzip2q_s64(v206, v207);
            uint64_t v163 = v252;
            if (!v252) {
              goto LABEL_204;
            }
          }
          else if (v161 == 3)
          {
            float32x4_t v199 = vld1q_dup_f32((const float *)v162);
            int64x2_t v307 = (int64x2_t)v199;
            int64x2_t v308 = (int64x2_t)v199;
            int64x2_t v311 = (int64x2_t)v199;
            int64x2_t v312 = (int64x2_t)v199;
            int64x2_t v315 = (int64x2_t)v199;
            int64x2_t v316 = (int64x2_t)v199;
            int64x2_t v319 = (int64x2_t)v199;
            int64x2_t v320 = (int64x2_t)v199;
            uint64_t v163 = v252;
            if (!v252) {
              goto LABEL_204;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v307, 64, v162, v161, v150, v31);
            uint64_t v163 = v252;
            if (!v252) {
              goto LABEL_204;
            }
          }
LABEL_163:
          if (v253)
          {
            uint64_t v164 = 0;
            unint64_t v165 = (unint64_t)v250 << 6;
            uint64_t v166 = 4 * v251;
            unsigned __int8 v167 = &v257.i8[v165 + v166];
            uint64_t v168 = v248;
            uint64_t v169 = v249;
            unint64_t v170 = 4 * v253;
            if (v170 <= 1) {
              unint64_t v171 = 1;
            }
            else {
              unint64_t v171 = 4 * v253;
            }
            unint64_t v172 = v165 + v166;
            uint64_t v173 = &v257.i8[v165 + v166];
            if (v171) {
              BOOL v174 = (v171 - 1) >> 32 == 0;
            }
            else {
              BOOL v174 = 0;
            }
            uint64_t v175 = v171 & 0x3FFFFFFE0;
            uint64_t v176 = v171 & 0x3FFFFFFF8;
            char v178 = !v174 || v171 < 8;
            uint64_t v179 = &v258.i8[v172];
            int v180 = (long long *)(v248 + 16);
            unsigned int v181 = v167;
            uint64_t v182 = v248;
            do
            {
              int v183 = (char *)(v168 + v169 * v164);
              unsigned int v184 = &v167[64 * v164];
              if ((unint64_t)(&v173[64 * v164] - v183) < 0x20) {
                char v185 = 1;
              }
              else {
                char v185 = v178;
              }
              if (v185)
              {
                int v186 = 0;
                goto LABEL_194;
              }
              if (v171 >= 0x20)
              {
                unsigned int v188 = v180;
                uint64_t v189 = v179;
                uint64_t v190 = v171 & 0x3FFFFFFE0;
                do
                {
                  long long v191 = *v188;
                  *((_OWORD *)v189 - 1) = *(v188 - 1);
                  *(_OWORD *)uint64_t v189 = v191;
                  v189 += 32;
                  v188 += 2;
                  v190 -= 32;
                }
                while (v190);
                if (v171 == v175) {
                  goto LABEL_177;
                }
                uint64_t v187 = v171 & 0x3FFFFFFE0;
                if ((v171 & 0x18) == 0)
                {
                  v183 += v175;
                  v184 += v175;
                  int v186 = v171 & 0xFFFFFFE0;
                  goto LABEL_194;
                }
              }
              else
              {
                uint64_t v187 = 0;
              }
              v184 += v176;
              uint64_t v192 = v187 - v176;
              uint64_t v193 = (uint64_t *)(v182 + v187);
              unsigned int v194 = &v181[v187];
              do
              {
                uint64_t v195 = *v193++;
                *(void *)unsigned int v194 = v195;
                v194 += 8;
                v192 += 8;
              }
              while (v192);
              if (v171 == v176) {
                goto LABEL_177;
              }
              v183 += v176;
              int v186 = v171 & 0xFFFFFFF8;
LABEL_194:
              unsigned int v196 = v186 + 1;
              do
              {
                char v197 = *v183++;
                *v184++ = v197;
              }
              while (v170 > v196++);
LABEL_177:
              ++v164;
              v179 += 64;
              int v180 = (long long *)((char *)v180 + v169);
              v182 += v169;
              v181 += 64;
            }
            while (v164 != v163);
          }
LABEL_204:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v257, 64, (unint64_t)v246, v247, v254, v255, *(_DWORD *)(*(void *)(v241 + 208) + 52));
          char v73 = v160;
LABEL_205:
          uint64_t result = v242;
          if (v243) {
            uint64_t result = memcpy(v242, v73, 0x400uLL);
          }
          BOOL v23 = v34 == v231 >> 4;
          unsigned int v34 = v74;
          uint64_t v29 = v241;
        }
        while (!v23);
        BOOL v23 = v18++ == v224;
      }
      while (!v23);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v161 = v21;
  uint64_t v162 = v22;
  uint64_t v151 = v23;
  uint64_t v24 = v12;
  uint64_t v192 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v166 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v150 = v14 + a10 - 1;
  unsigned int v152 = v150 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v170 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v170;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v171 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v170;
  BOOL v160 = isLevelTiled;
  if (v26 <= v152)
  {
    unsigned int v159 = v16 + a9 - 1;
    unsigned int v149 = v16 >> 4;
    if (v16 >> 4 <= v159 >> 4)
    {
      unsigned int v146 = v20 - 1;
      unsigned int v148 = (v18 - 1) >> 4;
      int v168 = ((v20 - 1) & 0xF) + 1;
      unsigned int v169 = (v20 - 1) >> 4;
      int v147 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v157 = v38.i32[0] | v38.i32[1];
      int8x8_t v156 = v38;
      BOOL v154 = v38.i32[0] != 0;
      BOOL v155 = v38.i32[1] != 0;
      unint64_t v145 = 8 * v28 * (unint64_t)v27;
      unsigned int v158 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v166) {
          int v40 = v166;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v149;
        if (v150 < v39) {
          unsigned int v39 = v150;
        }
        int v153 = v40 - 16 * v26;
        int v164 = v39 - v40 + 1;
        unsigned int v165 = 16 * v26;
        if (v26 == v148) {
          unsigned int v42 = v147;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v163 = v151 + (v40 - v166) * a11;
        unsigned int v167 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v159 < v44) {
            unsigned int v44 = v159;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v169) {
            unsigned int v47 = v168;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v165 >= v166 && v43 >= v16)
          {
            int v49 = v168;
            if (v41 != v169) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v164 != v42;
          }
          if (v160)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v145 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v136 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v137 = 0;
              if (v73) {
                goto LABEL_159;
              }
LABEL_148:
              unsigned int v138 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v138 | v137) {
                goto LABEL_149;
              }
LABEL_160:
              uint64_t v140 = 0;
            }
            else
            {
              unsigned int v137 = 32 - __clz(~(-1 << -(char)__clz(v136)));
              if ((v73 & 1) == 0) {
                goto LABEL_148;
              }
LABEL_159:
              unsigned int v138 = 0;
              if (!v137) {
                goto LABEL_160;
              }
LABEL_149:
              int v139 = 0;
              uint64_t v140 = 0;
              int v141 = v41 & v136;
              BOOL v142 = v137 != 0;
              BOOL v143 = v138 != 0;
              int v144 = 1;
              do
              {
                --v137;
                if (v142) {
                  v140 |= (unint64_t)(v144 & v141) << v139++;
                }
                else {
                  unsigned int v137 = 0;
                }
                --v138;
                if (v143) {
                  v140 |= (unint64_t)(v144 & v26 & ((v74 >> 4) - 1)) << v139++;
                }
                else {
                  unsigned int v138 = 0;
                }
                v144 *= 2;
                --v139;
                BOOL v143 = v138 != 0;
                BOOL v142 = v137 != 0;
              }
              while (v138 | v137);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v165 / v74 * ((v70 + v146) / v70)) << 14) + (v140 << 10);
            goto LABEL_59;
          }
          if (v157)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v154;
            BOOL v55 = v155;
            __int32 v57 = v156.i32[0];
            __int32 v56 = v156.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v162 + 8 * v66);
          uint64_t v77 = v163 + 8 * (v45 - v16);
          int32x4_t v78 = (void *)(v161 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v171)
          {
            if (!v79)
            {
              int64x2_t v85 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v85, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            int64x2_t v80 = v78;
            char v81 = v47;
            int64x2_t v82 = v78;
            int v83 = v46;
            int v84 = v45;
            memcpy(__dst, v80, sizeof(__dst));
            int v45 = v84;
            unsigned int v43 = 16 * v41;
            int64x2_t v85 = __dst;
            int v46 = v83;
            int32x4_t v78 = v82;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v167;
            uint64_t v36 = v170;
          }
          else
          {
            int64x2_t v85 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          uint64_t v173 = v85;
          unsigned __int8 v181 = v47;
          unsigned __int8 v182 = v42;
          unsigned int v177 = v153;
          unsigned int v178 = v45 - v43;
          BOOL v174 = v76;
          uint64_t v175 = v77;
          uint64_t v176 = a11;
          unsigned int v179 = v164;
          unsigned int v180 = v46;
          if (!v48)
          {
            int v86 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            uint64_t v87 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v184, 128, (uint64_t)v85, *v76, v86, v38)];
            uint64_t v89 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v186, 128, v87, v76[1], v86, v88);
            uint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v185, 128, v89, v76[2], v86, v90);
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v187, 128, v91, v76[3], v86, v92);
            uint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v188, 128, v93, v76[4], v86, v94);
            uint64_t v97 = v95
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v190, 128, v95, v76[5], v86, v96);
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v189, 128, v97, v76[6], v86, v98);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v191, 128, v97 + v99, v76[7], v86, v100);
            uint64_t v101 = v179;
            unsigned int v16 = v158;
            if (!v179 || !v180)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v184, 128, (unint64_t)v173, v174, v181, v182, *(_DWORD *)(*(void *)(v170 + 208) + 52));
              if (!v171) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v102 = 0;
            unint64_t v103 = (unint64_t)v177 << 7;
            uint64_t v104 = 8 * v178;
            int64x2_t v105 = (char *)v184 + v103 + v104;
            uint64_t v106 = v175;
            uint64_t v107 = v176;
            unint64_t v108 = 8 * v180;
            if (v108 <= 1) {
              unint64_t v109 = 1;
            }
            else {
              unint64_t v109 = 8 * v180;
            }
            unint64_t v110 = v103 + v104;
            int64x2_t v111 = (char *)v184 + v103 + v104;
            if (v109) {
              BOOL v112 = (v109 - 1) >> 32 == 0;
            }
            else {
              BOOL v112 = 0;
            }
            char v113 = !v112;
            uint64_t v114 = v109 & 0x7FFFFFFE0;
            uint64_t v115 = v109 & 0x7FFFFFFF8;
            int64x2_t v116 = (char *)&v184[1] + v110;
            int64x2_t v117 = (long long *)(v175 + 16);
            int64x2_t v118 = v105;
            uint64_t v119 = v175;
            while (2)
            {
              int64x2_t v120 = (char *)(v106 + v107 * v102);
              int64x2_t v121 = &v105[128 * v102];
              if ((unint64_t)(&v111[128 * v102] - v120) < 0x20) {
                char v122 = 1;
              }
              else {
                char v122 = v113;
              }
              if (v122)
              {
                int v123 = 0;
LABEL_127:
                unsigned int v133 = v123 + 1;
                do
                {
                  char v134 = *v120++;
                  *v121++ = v134;
                }
                while (v108 > v133++);
              }
              else
              {
                if (v109 >= 0x20)
                {
                  unsigned int v125 = v117;
                  int32x4_t v126 = v116;
                  uint64_t v127 = v109 & 0x7FFFFFFE0;
                  do
                  {
                    long long v128 = *v125;
                    *(v126 - 1) = *(v125 - 1);
                    *int32x4_t v126 = v128;
                    v126 += 2;
                    v125 += 2;
                    v127 -= 32;
                  }
                  while (v127);
                  if (v109 == v114) {
                    goto LABEL_110;
                  }
                  uint64_t v124 = v109 & 0x7FFFFFFE0;
                  if ((v109 & 0x18) == 0)
                  {
                    v120 += v114;
                    v121 += v114;
                    int v123 = v109 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v124 = 0;
                }
                v121 += v115;
                unint64_t v129 = v124 - (v109 & 0x7FFFFFFF8);
                int64x2_t v130 = (uint64_t *)(v119 + v124);
                int64x2_t v131 = &v118[v124];
                do
                {
                  uint64_t v132 = *v130++;
                  *(void *)int64x2_t v131 = v132;
                  v131 += 8;
                  v129 += 8;
                }
                while (v129);
                if (v109 != v115)
                {
                  v120 += v115;
                  int v123 = v109 & 0xFFFFFFF8;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v102;
              v116 += 128;
              int64x2_t v117 = (long long *)((char *)v117 + v107);
              v119 += v107;
              v118 += 128;
              if (v102 == v101) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v158;
          if (!v171) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v78, v85, 0x800uLL);
LABEL_27:
          BOOL v31 = v41++ == v159 >> 4;
          uint64_t v36 = v170;
          unsigned int v42 = v167;
        }
        while (!v31);
        BOOL v31 = v26++ == v152;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v242 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v191 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v175 = a8 + a10 - 1;
  unsigned int v177 = v175 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v194 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v194;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v196 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v194;
  BOOL v185 = isLevelTiled;
  if (v18 <= v177)
  {
    unsigned int v184 = a7 + a9 - 1;
    unsigned int v174 = a7 >> 4;
    if (a7 >> 4 <= v184 >> 4)
    {
      unsigned int v171 = a5 - 1;
      unsigned int v193 = (a5 - 1) >> 4;
      int v192 = ((a5 - 1) & 0xF) + 1;
      int v172 = ((a6 - 1) & 0xF) + 1;
      unsigned int v173 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL)));
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v30.i8))));
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v182 = v32.i32[0] | v32.i32[1];
      BOOL v180 = v32.i32[1] != 0;
      uint64_t v181 = v32.i64[0];
      BOOL v179 = v32.i32[0] != 0;
      unint64_t v170 = 8 * v20 * (unint64_t)v19;
      unsigned int v183 = a7;
      do
      {
        unsigned int v33 = (16 * v18) | 0xF;
        if (16 * v18 <= v191) {
          int v34 = v191;
        }
        else {
          int v34 = 16 * v18;
        }
        unsigned int v35 = v174;
        if (v175 < v33) {
          unsigned int v33 = v175;
        }
        unsigned int v190 = 16 * v18;
        int v178 = v34 - 16 * v18;
        int v189 = v33 - v34 + 1;
        int v36 = v172;
        if (v18 != v173) {
          int v36 = 16;
        }
        unsigned int v197 = v36;
        uint64_t v188 = a3 + (v34 - v191) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v184 < v38) {
            unsigned int v38 = v184;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v193) {
            unsigned int v41 = v192;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v190 >= v191 && v37 >= a7)
          {
            int v43 = v192;
            if (v35 != v193) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v189 != v197;
          }
          if (v185)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v170 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v161 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v162 = 0;
              if (v67) {
                goto LABEL_236;
              }
LABEL_225:
              unsigned int v163 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v163 | v162) {
                goto LABEL_226;
              }
LABEL_237:
              uint64_t v165 = 0;
            }
            else
            {
              unsigned int v162 = 32 - __clz(~(-1 << -(char)__clz(v161)));
              if ((v67 & 1) == 0) {
                goto LABEL_225;
              }
LABEL_236:
              unsigned int v163 = 0;
              if (!v162) {
                goto LABEL_237;
              }
LABEL_226:
              int v164 = 0;
              uint64_t v165 = 0;
              int v166 = v35 & v161;
              BOOL v167 = v162 != 0;
              BOOL v168 = v163 != 0;
              int v169 = 1;
              do
              {
                --v162;
                if (v167) {
                  v165 |= (unint64_t)(v169 & v166) << v164++;
                }
                else {
                  unsigned int v162 = 0;
                }
                --v163;
                if (v168) {
                  v165 |= (unint64_t)(v169 & v18 & ((v68 >> 4) - 1)) << v164++;
                }
                else {
                  unsigned int v163 = 0;
                }
                v169 *= 2;
                --v164;
                BOOL v168 = v163 != 0;
                BOOL v167 = v162 != 0;
              }
              while (v163 | v162);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v190 / v68 * ((v64 + v171) / v64)) << 14) + (v165 << 8);
            goto LABEL_58;
          }
          if (v182)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v180;
            BOOL v49 = v179;
            int v50 = HIDWORD(v181);
            int v51 = v181;
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          unint64_t v71 = v188 + 2 * (v39 - a7);
          char v72 = (int32x4_t *)(a2 + v52);
          if (v197 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          __src = v72;
          if (v196)
          {
            char v72 = (int32x4_t *)__dst;
            if (!v73) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v28 = v194;
          }
          else if (!v73)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v71, a11, (unint64_t)v72, v70, v41, v197, *(_DWORD *)(*(void *)(v28 + 208) + 52));
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          float32x4_t v199 = v72;
          unsigned __int8 v207 = v41;
          unsigned __int8 v208 = v197;
          unsigned int v203 = v178;
          unsigned int v204 = v39 - v37;
          int64x2_t v200 = v70;
          unint64_t v201 = v71;
          uint64_t v202 = a11;
          unsigned int v205 = v189;
          unsigned int v206 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v183;
            unsigned int v74 = v35 + 1;
            goto LABEL_207;
          }
          uint64_t v75 = *(void *)(v28 + 208);
          int v76 = *(_DWORD *)(v75 + 52);
          unsigned int v77 = *v70;
          if (*v70)
          {
            if (v77 < 0xF0)
            {
              if (v77 == 63)
              {
                int32x4_t v79 = v72[1];
                int32x4_t v30 = v72[2];
                int32x4_t v80 = v72[3];
                int32x4_t v81 = vuzp2q_s32(*v72, v30);
                int32x4_t v210 = vuzp1q_s32(*v72, v30);
                int32x4_t v212 = v81;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v79, v80);
                int32x4_t v31 = vuzp2q_s32(v79, v80);
                int16x8_t v214 = v32;
                int32x4_t v216 = v31;
                uint64_t v78 = 64;
                unsigned int v74 = v35 + 1;
              }
              else
              {
                unsigned int v74 = v35 + 1;
                if (v77 == 1)
                {
                  int16x8_t v32 = vld1q_dup_s16(v72->i16);
                  int32x4_t v210 = (int32x4_t)v32;
                  int32x4_t v212 = (int32x4_t)v32;
                  int16x8_t v214 = v32;
                  int32x4_t v216 = (int32x4_t)v32;
                  uint64_t v78 = 2;
                }
                else
                {
                  uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v210, 32, (uint64_t)v72, v77, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v210, 32, (uint64_t)v72, v77, *(_DWORD *)(v75 + 52));
              uint64_t v78 = 32;
              unsigned int v74 = v35 + 1;
            }
          }
          else
          {
            uint64_t v78 = 0;
            int32x4_t v210 = 0uLL;
            int32x4_t v212 = 0uLL;
            int16x8_t v214 = 0uLL;
            int32x4_t v216 = 0uLL;
            unsigned int v74 = v35 + 1;
          }
          uint64_t v82 = (uint64_t)v72->i64 + v78;
          unsigned int v83 = v70[1];
          if (v70[1])
          {
            if (v83 < 0xF0)
            {
              if (v83 == 63)
              {
                int32x4_t v85 = *(int32x4_t *)(v82 + 16);
                int32x4_t v30 = *(int32x4_t *)(v82 + 32);
                int32x4_t v86 = *(int32x4_t *)(v82 + 48);
                int32x4_t v87 = vuzp2q_s32(*(int32x4_t *)v82, v30);
                int32x4_t v218 = vuzp1q_s32(*(int32x4_t *)v82, v30);
                int32x4_t v220 = v87;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v85, v86);
                int32x4_t v31 = vuzp2q_s32(v85, v86);
                int16x8_t v222 = v32;
                int32x4_t v224 = v31;
                uint64_t v84 = 64;
              }
              else if (v83 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v82);
                int32x4_t v218 = (int32x4_t)v32;
                int32x4_t v220 = (int32x4_t)v32;
                int16x8_t v222 = v32;
                int32x4_t v224 = (int32x4_t)v32;
                uint64_t v84 = 2;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v218, 32, v82, v83, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v218, 32, v82, v83, v76);
              uint64_t v84 = 32;
            }
          }
          else
          {
            uint64_t v84 = 0;
            int32x4_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
            int16x8_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
          }
          uint64_t v88 = v82 + v84;
          unsigned int v89 = v70[2];
          if (v70[2])
          {
            if (v89 < 0xF0)
            {
              if (v89 == 63)
              {
                int32x4_t v91 = *(int32x4_t *)(v88 + 16);
                int32x4_t v30 = *(int32x4_t *)(v88 + 32);
                int32x4_t v92 = *(int32x4_t *)(v88 + 48);
                int32x4_t v93 = vuzp2q_s32(*(int32x4_t *)v88, v30);
                int32x4_t v211 = vuzp1q_s32(*(int32x4_t *)v88, v30);
                int32x4_t v213 = v93;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v91, v92);
                int32x4_t v31 = vuzp2q_s32(v91, v92);
                int16x8_t v215 = v32;
                int32x4_t v217 = v31;
                uint64_t v90 = 64;
              }
              else if (v89 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v88);
                int32x4_t v211 = (int32x4_t)v32;
                int32x4_t v213 = (int32x4_t)v32;
                int16x8_t v215 = v32;
                int32x4_t v217 = (int32x4_t)v32;
                uint64_t v90 = 2;
              }
              else
              {
                uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v211, 32, v88, v89, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v211, 32, v88, v89, v76);
              uint64_t v90 = 32;
            }
          }
          else
          {
            uint64_t v90 = 0;
            int32x4_t v211 = 0uLL;
            int32x4_t v213 = 0uLL;
            int16x8_t v215 = 0uLL;
            int32x4_t v217 = 0uLL;
          }
          uint64_t v94 = v88 + v90;
          unsigned int v95 = v70[3];
          if (v70[3])
          {
            if (v95 < 0xF0)
            {
              if (v95 == 63)
              {
                int32x4_t v97 = *(int32x4_t *)(v94 + 16);
                int32x4_t v30 = *(int32x4_t *)(v94 + 32);
                int32x4_t v98 = *(int32x4_t *)(v94 + 48);
                int32x4_t v99 = vuzp2q_s32(*(int32x4_t *)v94, v30);
                int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v94, v30);
                int32x4_t v221 = v99;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v97, v98);
                int32x4_t v31 = vuzp2q_s32(v97, v98);
                int16x8_t v223 = v32;
                int32x4_t v225 = v31;
                uint64_t v96 = 64;
              }
              else if (v95 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v94);
                int32x4_t v219 = (int32x4_t)v32;
                int32x4_t v221 = (int32x4_t)v32;
                int16x8_t v223 = v32;
                int32x4_t v225 = (int32x4_t)v32;
                uint64_t v96 = 2;
              }
              else
              {
                uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v219, 32, v94, v95, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v219, 32, v94, v95, v76);
              uint64_t v96 = 32;
            }
          }
          else
          {
            uint64_t v96 = 0;
            int32x4_t v219 = 0uLL;
            int32x4_t v221 = 0uLL;
            int16x8_t v223 = 0uLL;
            int32x4_t v225 = 0uLL;
          }
          uint64_t v100 = v94 + v96;
          unsigned int v101 = v70[4];
          if (v70[4])
          {
            if (v101 < 0xF0)
            {
              if (v101 == 63)
              {
                int32x4_t v103 = *(int32x4_t *)(v100 + 16);
                int32x4_t v30 = *(int32x4_t *)(v100 + 32);
                int32x4_t v104 = *(int32x4_t *)(v100 + 48);
                int32x4_t v105 = vuzp2q_s32(*(int32x4_t *)v100, v30);
                int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v100, v30);
                int32x4_t v228 = v105;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v103, v104);
                int32x4_t v31 = vuzp2q_s32(v103, v104);
                int16x8_t v230 = v32;
                int32x4_t v232 = v31;
                uint64_t v102 = 64;
              }
              else if (v101 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v100);
                int32x4_t v226 = (int32x4_t)v32;
                int32x4_t v228 = (int32x4_t)v32;
                int16x8_t v230 = v32;
                int32x4_t v232 = (int32x4_t)v32;
                uint64_t v102 = 2;
              }
              else
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v226, 32, v100, v101, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v226, 32, v100, v101, v76);
              uint64_t v102 = 32;
            }
          }
          else
          {
            uint64_t v102 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int16x8_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v106 = v100 + v102;
          unsigned int v107 = v70[5];
          if (v70[5])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 63)
              {
                int32x4_t v109 = *(int32x4_t *)(v106 + 16);
                int32x4_t v30 = *(int32x4_t *)(v106 + 32);
                int32x4_t v110 = *(int32x4_t *)(v106 + 48);
                int32x4_t v111 = vuzp2q_s32(*(int32x4_t *)v106, v30);
                int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v106, v30);
                int32x4_t v236 = v111;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v109, v110);
                int32x4_t v31 = vuzp2q_s32(v109, v110);
                int16x8_t v238 = v32;
                int32x4_t v240 = v31;
                uint64_t v108 = 64;
              }
              else if (v107 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v106);
                int32x4_t v234 = (int32x4_t)v32;
                int32x4_t v236 = (int32x4_t)v32;
                int16x8_t v238 = v32;
                int32x4_t v240 = (int32x4_t)v32;
                uint64_t v108 = 2;
              }
              else
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v234, 32, v106, v107, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v234, 32, v106, v107, v76);
              uint64_t v108 = 32;
            }
          }
          else
          {
            uint64_t v108 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int16x8_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v112 = v106 + v108;
          unsigned int v113 = v70[6];
          if (v70[6])
          {
            if (v113 < 0xF0)
            {
              if (v113 == 63)
              {
                int32x4_t v154 = *(int32x4_t *)(v112 + 16);
                int32x4_t v30 = *(int32x4_t *)(v112 + 32);
                int32x4_t v155 = *(int32x4_t *)(v112 + 48);
                int32x4_t v156 = vuzp2q_s32(*(int32x4_t *)v112, v30);
                int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v112, v30);
                int32x4_t v229 = v156;
                int16x8_t v32 = (int16x8_t)vuzp1q_s32(v154, v155);
                int32x4_t v31 = vuzp2q_s32(v154, v155);
                int16x8_t v231 = v32;
                int32x4_t v233 = v31;
                uint64_t v114 = 64;
                unsigned int v115 = v70[7];
                if (!v70[7]) {
                  goto LABEL_152;
                }
              }
              else if (v113 == 1)
              {
                int16x8_t v32 = vld1q_dup_s16((const __int16 *)v112);
                int32x4_t v227 = (int32x4_t)v32;
                int32x4_t v229 = (int32x4_t)v32;
                int16x8_t v231 = v32;
                int32x4_t v233 = (int32x4_t)v32;
                uint64_t v114 = 2;
                unsigned int v115 = v70[7];
                if (!v70[7]) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v227, 32, v112, v113, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
                unsigned int v115 = v70[7];
                if (!v70[7])
                {
LABEL_152:
                  int32x4_t v235 = 0uLL;
                  int32x4_t v237 = 0uLL;
                  int32x4_t v239 = 0uLL;
                  int32x4_t v241 = 0uLL;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v227, 32, v112, v113, v76);
              uint64_t v114 = 32;
              unsigned int v115 = v70[7];
              if (!v70[7]) {
                goto LABEL_152;
              }
            }
          }
          else
          {
            uint64_t v114 = 0;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int16x8_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
            unsigned int v115 = v70[7];
            if (!v70[7]) {
              goto LABEL_152;
            }
          }
          uint64_t v116 = v112 + v114;
          if (v115 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v235, 32, v116, v115, v76);
LABEL_156:
            a7 = v183;
            uint64_t v117 = v205;
            if (!v205) {
              goto LABEL_206;
            }
            goto LABEL_157;
          }
          a7 = v183;
          if (v115 == 63)
          {
            int32x4_t v157 = *(int32x4_t *)(v116 + 16);
            int32x4_t v158 = *(int32x4_t *)(v116 + 32);
            int32x4_t v159 = *(int32x4_t *)(v116 + 48);
            int32x4_t v160 = vuzp2q_s32(*(int32x4_t *)v116, v158);
            int32x4_t v235 = vuzp1q_s32(*(int32x4_t *)v116, v158);
            int32x4_t v237 = v160;
            int32x4_t v239 = vuzp1q_s32(v157, v159);
            int32x4_t v241 = vuzp2q_s32(v157, v159);
            uint64_t v117 = v205;
            if (!v205) {
              goto LABEL_206;
            }
          }
          else if (v115 == 1)
          {
            int16x8_t v153 = vld1q_dup_s16((const __int16 *)v116);
            int32x4_t v235 = (int32x4_t)v153;
            int32x4_t v237 = (int32x4_t)v153;
            int32x4_t v239 = (int32x4_t)v153;
            int32x4_t v241 = (int32x4_t)v153;
            uint64_t v117 = v205;
            if (!v205) {
              goto LABEL_206;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v235, 32, v116, v115, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            uint64_t v117 = v205;
            if (!v205) {
              goto LABEL_206;
            }
          }
LABEL_157:
          if (v206)
          {
            uint64_t v118 = 0;
            uint64_t v119 = 32 * v203;
            uint64_t v120 = 2 * v204;
            int64x2_t v121 = &v210.i8[v119 + v120];
            unint64_t v122 = v201;
            uint64_t v123 = v202;
            unint64_t v124 = 2 * v206;
            if (v124 <= 1) {
              unint64_t v125 = 1;
            }
            else {
              unint64_t v125 = 2 * v206;
            }
            uint64_t v126 = v119 + v120;
            uint64_t v127 = &v210.i8[v119 + v120];
            if (v125) {
              BOOL v128 = (v125 - 1) >> 32 == 0;
            }
            else {
              BOOL v128 = 0;
            }
            uint64_t v129 = v125 & 0x1FFFFFFE0;
            uint64_t v130 = v125 & 0x1FFFFFFF8;
            char v132 = !v128 || v125 < 8;
            unsigned int v133 = &v211.i8[v126];
            char v134 = (long long *)(v201 + 16);
            int64x2_t v135 = v121;
            unint64_t v136 = v201;
            do
            {
              unsigned int v137 = (char *)(v122 + v123 * v118);
              unsigned int v138 = &v121[32 * v118];
              if ((unint64_t)(&v127[32 * v118] - v137) < 0x20) {
                char v139 = 1;
              }
              else {
                char v139 = v132;
              }
              if (v139)
              {
                int v140 = 0;
                goto LABEL_188;
              }
              if (v125 >= 0x20)
              {
                BOOL v142 = v134;
                BOOL v143 = v133;
                uint64_t v144 = v125 & 0x1FFFFFFE0;
                do
                {
                  long long v145 = *v142;
                  *((_OWORD *)v143 - 1) = *(v142 - 1);
                  *(_OWORD *)BOOL v143 = v145;
                  v143 += 32;
                  v142 += 2;
                  v144 -= 32;
                }
                while (v144);
                if (v125 == v129) {
                  goto LABEL_171;
                }
                uint64_t v141 = v125 & 0x1FFFFFFE0;
                if ((v125 & 0x18) == 0)
                {
                  v137 += v129;
                  v138 += v129;
                  int v140 = v125 & 0xFFFFFFE0;
                  goto LABEL_188;
                }
              }
              else
              {
                uint64_t v141 = 0;
              }
              v138 += v130;
              uint64_t v146 = v141 - v130;
              int v147 = (uint64_t *)(v136 + v141);
              unsigned int v148 = &v135[v141];
              do
              {
                uint64_t v149 = *v147++;
                *(void *)unsigned int v148 = v149;
                v148 += 8;
                v146 += 8;
              }
              while (v146);
              if (v125 == v130) {
                goto LABEL_171;
              }
              v137 += v130;
              int v140 = v125 & 0xFFFFFFF8;
LABEL_188:
              unsigned int v150 = v140 + 1;
              do
              {
                char v151 = *v137++;
                *v138++ = v151;
              }
              while (v124 > v150++);
LABEL_171:
              ++v118;
              v133 += 32;
              char v134 = (long long *)((char *)v134 + v123);
              v136 += v123;
              v135 += 32;
            }
            while (v118 != v117);
          }
LABEL_206:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((unint64_t)&v210, 32, (unint64_t)v199, v200, v207, v208, *(_DWORD *)(*(void *)(v194 + 208) + 52));
LABEL_207:
          if (v196) {
            memcpy(__src, v72, 0x200uLL);
          }
          BOOL v23 = v35 == v184 >> 4;
          unsigned int v35 = v74;
          uint64_t v28 = v194;
        }
        while (!v23);
        BOOL v23 = v18++ == v177;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v173 = v21;
  uint64_t v174 = v22;
  uint64_t v163 = v23;
  uint64_t v24 = v12;
  uint64_t v325 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v178 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v162 = v14 + a10 - 1;
  unsigned int v164 = v162 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v181 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v181;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v183 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v181;
  BOOL v172 = isLevelTiled;
  if (v26 <= v164)
  {
    unsigned int v171 = v16 + a9 - 1;
    unsigned int v161 = v16 >> 4;
    if (v16 >> 4 <= v171 >> 4)
    {
      unsigned int v158 = v20 - 1;
      unsigned int v180 = (v20 - 1) >> 4;
      int v179 = ((v20 - 1) & 0xF) + 1;
      int v159 = ((v18 - 1) & 0xF) + 1;
      unsigned int v160 = (v18 - 1) >> 4;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v169 = v38.i32[0] | v38.i32[1];
      BOOL v167 = v38.i32[1] != 0;
      int8x8_t v168 = v38;
      BOOL v166 = v38.i32[0] != 0;
      unint64_t v157 = 8 * v28 * (unint64_t)v27;
      unsigned int v170 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v178) {
          int v40 = v178;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v161;
        if (v162 < v39) {
          unsigned int v39 = v162;
        }
        unsigned int v177 = 16 * v26;
        int v165 = v40 - 16 * v26;
        int v176 = v39 - v40 + 1;
        int v42 = v159;
        if (v26 != v160) {
          int v42 = 16;
        }
        unsigned int v184 = v42;
        uint64_t v175 = v163 + (v40 - v178) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v171 < v44) {
            unsigned int v44 = v171;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v180) {
            unsigned int v47 = v179;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v177 >= v178 && v43 >= v16)
          {
            int v49 = v179;
            if (v41 != v180) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v176 != v184;
          }
          if (v172)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v157 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v148 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v149 = 0;
              if (v73) {
                goto LABEL_215;
              }
LABEL_204:
              unsigned int v150 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v150 | v149) {
                goto LABEL_205;
              }
LABEL_216:
              uint64_t v152 = 0;
            }
            else
            {
              unsigned int v149 = 32 - __clz(~(-1 << -(char)__clz(v148)));
              if ((v73 & 1) == 0) {
                goto LABEL_204;
              }
LABEL_215:
              unsigned int v150 = 0;
              if (!v149) {
                goto LABEL_216;
              }
LABEL_205:
              int v151 = 0;
              uint64_t v152 = 0;
              int v153 = v41 & v148;
              BOOL v154 = v149 != 0;
              BOOL v155 = v150 != 0;
              int v156 = 1;
              do
              {
                --v149;
                if (v154) {
                  v152 |= (unint64_t)(v156 & v153) << v151++;
                }
                else {
                  unsigned int v149 = 0;
                }
                --v150;
                if (v155) {
                  v152 |= (unint64_t)(v156 & v26 & ((v74 >> 4) - 1)) << v151++;
                }
                else {
                  unsigned int v150 = 0;
                }
                v156 *= 2;
                --v151;
                BOOL v155 = v150 != 0;
                BOOL v154 = v149 != 0;
              }
              while (v150 | v149);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v177 / v74 * ((v70 + v158) / v70)) << 14) + (v152 << 10);
            goto LABEL_58;
          }
          if (v169)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v167;
            BOOL v55 = v166;
            __int32 v56 = v168.i32[1];
            __int32 v57 = v168.i32[0];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v174 + 8 * v66);
          uint64_t v77 = v175 + 8 * (v45 - v16);
          uint64_t v78 = (const double *)(v173 + v58);
          if (v184 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = (double *)v78;
          if (v183)
          {
            uint64_t v78 = (const double *)__dst;
            if (!v79) {
              goto LABEL_93;
            }
            memcpy(__dst, __src, sizeof(__dst));
            uint64_t v36 = v181;
          }
          else if (!v79)
          {
LABEL_93:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v78, v76, v47, v184, *(_DWORD *)(*(void *)(v36 + 208) + 52));
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int v186 = v78;
          unsigned __int8 v194 = v47;
          unsigned __int8 v195 = v184;
          unsigned int v190 = v165;
          unsigned int v191 = v45 - v43;
          uint64_t v187 = v76;
          uint64_t v188 = v77;
          uint64_t v189 = a11;
          unsigned int v192 = v176;
          unsigned int v193 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            unsigned int v16 = v170;
            unsigned int v80 = v41 + 1;
            goto LABEL_186;
          }
          uint64_t v81 = *(void *)(v36 + 208);
          int v82 = *(_DWORD *)(v81 + 52);
          unsigned int v83 = *v76;
          if (*v76)
          {
            if (v83 < 0xF0)
            {
              if (v83 == 7)
              {
                float64x2_t v85 = vld1q_dup_f64(v78);
                float64x2_t v197 = v85;
                float64x2_t v198 = v85;
                float64x2_t v199 = v85;
                float64x2_t v200 = v85;
                float64x2_t v205 = v85;
                float64x2_t v206 = v85;
                float64x2_t v207 = v85;
                float64x2_t v208 = v85;
                float64x2_t v213 = v85;
                float64x2_t v214 = v85;
                float64x2_t v215 = v85;
                float64x2_t v216 = v85;
                float64x2_t v221 = v85;
                float64x2_t v222 = v85;
                uint64_t v84 = 8;
                float64x2_t v223 = v85;
                float64x2_t v224 = v85;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v197, 128, (uint64_t)v78, v83);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v197, 128, (unint64_t)v78, v83, *(_DWORD *)(v81 + 52));
              uint64_t v84 = 128;
            }
          }
          else
          {
            uint64_t v84 = 0;
            float64x2_t v200 = 0u;
            float64x2_t v199 = 0u;
            float64x2_t v198 = 0u;
            float64x2_t v197 = 0u;
            float64x2_t v205 = 0u;
            float64x2_t v206 = 0u;
            float64x2_t v207 = 0u;
            float64x2_t v208 = 0u;
            float64x2_t v213 = 0u;
            float64x2_t v214 = 0u;
            float64x2_t v215 = 0u;
            float64x2_t v216 = 0u;
            float64x2_t v221 = 0u;
            float64x2_t v222 = 0u;
            float64x2_t v223 = 0u;
            float64x2_t v224 = 0u;
          }
          unsigned int v80 = v41 + 1;
          int32x4_t v86 = (const double *)((char *)v78 + v84);
          unsigned int v87 = v76[1];
          if (v76[1])
          {
            if (v87 < 0xF0)
            {
              if (v87 == 7)
              {
                float64x2_t v89 = vld1q_dup_f64(v86);
                float64x2_t v229 = v89;
                float64x2_t v230 = v89;
                float64x2_t v231 = v89;
                float64x2_t v232 = v89;
                float64x2_t v237 = v89;
                float64x2_t v238 = v89;
                float64x2_t v239 = v89;
                float64x2_t v240 = v89;
                float64x2_t v245 = v89;
                float64x2_t v246 = v89;
                float64x2_t v247 = v89;
                float64x2_t v248 = v89;
                float64x2_t v253 = v89;
                float64x2_t v254 = v89;
                uint64_t v88 = 8;
                float64x2_t v255 = v89;
                float64x2_t v256 = v89;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v229, 128, (uint64_t)v86, v87);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v229, 128, (unint64_t)v86, v87, v82);
              uint64_t v88 = 128;
            }
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v231 = 0u;
            float64x2_t v232 = 0u;
            float64x2_t v229 = 0u;
            float64x2_t v230 = 0u;
            float64x2_t v237 = 0u;
            float64x2_t v238 = 0u;
            float64x2_t v239 = 0u;
            float64x2_t v240 = 0u;
            float64x2_t v245 = 0u;
            float64x2_t v246 = 0u;
            float64x2_t v247 = 0u;
            float64x2_t v248 = 0u;
            float64x2_t v253 = 0u;
            float64x2_t v254 = 0u;
            float64x2_t v255 = 0u;
            float64x2_t v256 = 0u;
          }
          uint64_t v90 = (const double *)((char *)v86 + v88);
          unsigned int v91 = v76[2];
          if (v76[2])
          {
            if (v91 < 0xF0)
            {
              if (v91 == 7)
              {
                float64x2_t v93 = vld1q_dup_f64(v90);
                float64x2_t v201 = v93;
                float64x2_t v202 = v93;
                float64x2_t v203 = v93;
                float64x2_t v204 = v93;
                float64x2_t v209 = v93;
                float64x2_t v210 = v93;
                float64x2_t v211 = v93;
                float64x2_t v212 = v93;
                float64x2_t v217 = v93;
                float64x2_t v218 = v93;
                float64x2_t v219 = v93;
                float64x2_t v220 = v93;
                float64x2_t v225 = v93;
                float64x2_t v226 = v93;
                uint64_t v92 = 8;
                float64x2_t v227 = v93;
                float64x2_t v228 = v93;
              }
              else
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v201, 128, (uint64_t)v90, v91);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v201, 128, (unint64_t)v90, v91, v82);
              uint64_t v92 = 128;
            }
          }
          else
          {
            uint64_t v92 = 0;
            float64x2_t v203 = 0u;
            float64x2_t v204 = 0u;
            float64x2_t v201 = 0u;
            float64x2_t v202 = 0u;
            float64x2_t v209 = 0u;
            float64x2_t v210 = 0u;
            float64x2_t v211 = 0u;
            float64x2_t v212 = 0u;
            float64x2_t v217 = 0u;
            float64x2_t v218 = 0u;
            float64x2_t v219 = 0u;
            float64x2_t v220 = 0u;
            float64x2_t v225 = 0u;
            float64x2_t v226 = 0u;
            float64x2_t v227 = 0u;
            float64x2_t v228 = 0u;
          }
          uint64_t v94 = (const double *)((char *)v90 + v92);
          unsigned int v95 = v76[3];
          if (v76[3])
          {
            if (v95 < 0xF0)
            {
              if (v95 == 7)
              {
                float64x2_t v97 = vld1q_dup_f64(v94);
                float64x2_t v233 = v97;
                float64x2_t v234 = v97;
                float64x2_t v235 = v97;
                float64x2_t v236 = v97;
                float64x2_t v241 = v97;
                float64x2_t v242 = v97;
                float64x2_t v243 = v97;
                float64x2_t v244 = v97;
                float64x2_t v249 = v97;
                float64x2_t v250 = v97;
                float64x2_t v251 = v97;
                float64x2_t v252 = v97;
                float64x2_t v257 = v97;
                float64x2_t v258 = v97;
                uint64_t v96 = 8;
                float64x2_t v259 = v97;
                float64x2_t v260 = v97;
              }
              else
              {
                uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v233, 128, (uint64_t)v94, v95);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v233, 128, (unint64_t)v94, v95, v82);
              uint64_t v96 = 128;
            }
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v235 = 0u;
            float64x2_t v236 = 0u;
            float64x2_t v233 = 0u;
            float64x2_t v234 = 0u;
            float64x2_t v241 = 0u;
            float64x2_t v242 = 0u;
            float64x2_t v243 = 0u;
            float64x2_t v244 = 0u;
            float64x2_t v249 = 0u;
            float64x2_t v250 = 0u;
            float64x2_t v251 = 0u;
            float64x2_t v252 = 0u;
            float64x2_t v257 = 0u;
            float64x2_t v258 = 0u;
            float64x2_t v259 = 0u;
            float64x2_t v260 = 0u;
          }
          int32x4_t v98 = (const double *)((char *)v94 + v96);
          unsigned int v99 = v76[4];
          if (v76[4])
          {
            if (v99 < 0xF0)
            {
              if (v99 == 7)
              {
                float64x2_t v101 = vld1q_dup_f64(v98);
                float64x2_t v261 = v101;
                float64x2_t v262 = v101;
                float64x2_t v263 = v101;
                float64x2_t v264 = v101;
                float64x2_t v269 = v101;
                float64x2_t v270 = v101;
                float64x2_t v271 = v101;
                float64x2_t v272 = v101;
                float64x2_t v277 = v101;
                float64x2_t v278 = v101;
                float64x2_t v279 = v101;
                float64x2_t v280 = v101;
                float64x2_t v285 = v101;
                float64x2_t v286 = v101;
                float64x2_t v287 = v101;
                uint64_t v100 = 8;
                float64x2_t v288 = v101;
              }
              else
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v261, 128, (uint64_t)v98, v99);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v261, 128, (unint64_t)v98, v99, v82);
              uint64_t v100 = 128;
            }
          }
          else
          {
            uint64_t v100 = 0;
            float64x2_t v263 = 0u;
            float64x2_t v264 = 0u;
            float64x2_t v261 = 0u;
            float64x2_t v262 = 0u;
            float64x2_t v269 = 0u;
            float64x2_t v270 = 0u;
            float64x2_t v271 = 0u;
            float64x2_t v272 = 0u;
            float64x2_t v277 = 0u;
            float64x2_t v278 = 0u;
            float64x2_t v279 = 0u;
            float64x2_t v280 = 0u;
            float64x2_t v285 = 0u;
            float64x2_t v286 = 0u;
            float64x2_t v287 = 0u;
            float64x2_t v288 = 0u;
          }
          uint64_t v102 = (const double *)((char *)v98 + v100);
          unsigned int v103 = v76[5];
          if (v76[5])
          {
            if (v103 < 0xF0)
            {
              if (v103 == 7)
              {
                float64x2_t v105 = vld1q_dup_f64(v102);
                float64x2_t v293 = v105;
                float64x2_t v294 = v105;
                float64x2_t v295 = v105;
                float64x2_t v296 = v105;
                float64x2_t v301 = v105;
                float64x2_t v302 = v105;
                float64x2_t v303 = v105;
                float64x2_t v304 = v105;
                float64x2_t v309 = v105;
                float64x2_t v310 = v105;
                float64x2_t v311 = v105;
                float64x2_t v312 = v105;
                float64x2_t v317 = v105;
                float64x2_t v318 = v105;
                float64x2_t v319 = v105;
                uint64_t v104 = 8;
                float64x2_t v320 = v105;
              }
              else
              {
                uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v293, 128, (uint64_t)v102, v103);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v293, 128, (unint64_t)v102, v103, v82);
              uint64_t v104 = 128;
            }
          }
          else
          {
            uint64_t v104 = 0;
            float64x2_t v295 = 0u;
            float64x2_t v296 = 0u;
            float64x2_t v293 = 0u;
            float64x2_t v294 = 0u;
            float64x2_t v301 = 0u;
            float64x2_t v302 = 0u;
            float64x2_t v303 = 0u;
            float64x2_t v304 = 0u;
            float64x2_t v309 = 0u;
            float64x2_t v310 = 0u;
            float64x2_t v311 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v320 = 0u;
          }
          uint64_t v106 = (const double *)((char *)v102 + v104);
          unsigned int v107 = v76[6];
          if (v76[6])
          {
            if (v107 < 0xF0)
            {
              if (v107 == 7)
              {
                float64x2_t v146 = vld1q_dup_f64(v106);
                float64x2_t v265 = v146;
                float64x2_t v266 = v146;
                float64x2_t v267 = v146;
                float64x2_t v268 = v146;
                float64x2_t v273 = v146;
                float64x2_t v274 = v146;
                float64x2_t v275 = v146;
                float64x2_t v276 = v146;
                float64x2_t v281 = v146;
                float64x2_t v282 = v146;
                float64x2_t v283 = v146;
                float64x2_t v284 = v146;
                float64x2_t v289 = v146;
                float64x2_t v290 = v146;
                float64x2_t v291 = v146;
                uint64_t v108 = 8;
                float64x2_t v292 = v146;
                unsigned int v109 = v76[7];
                if (!v76[7]) {
                  goto LABEL_140;
                }
              }
              else
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v265, 128, (uint64_t)v106, v107);
                unsigned int v109 = v76[7];
                if (!v76[7])
                {
LABEL_140:
                  float64x2_t v299 = 0u;
                  float64x2_t v300 = 0u;
                  float64x2_t v297 = 0u;
                  float64x2_t v298 = 0u;
                  float64x2_t v305 = 0u;
                  float64x2_t v306 = 0u;
                  float64x2_t v307 = 0u;
                  float64x2_t v308 = 0u;
                  float64x2_t v313 = 0u;
                  float64x2_t v314 = 0u;
                  float64x2_t v315 = 0u;
                  float64x2_t v316 = 0u;
                  float64x2_t v321 = 0u;
                  float64x2_t v322 = 0u;
                  float64x2_t v323 = 0u;
                  float64x2_t v324 = 0u;
                  goto LABEL_144;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v265, 128, (unint64_t)v106, v107, v82);
              uint64_t v108 = 128;
              unsigned int v109 = v76[7];
              if (!v76[7]) {
                goto LABEL_140;
              }
            }
          }
          else
          {
            uint64_t v108 = 0;
            float64x2_t v267 = 0u;
            float64x2_t v268 = 0u;
            float64x2_t v265 = 0u;
            float64x2_t v266 = 0u;
            float64x2_t v273 = 0u;
            float64x2_t v274 = 0u;
            float64x2_t v275 = 0u;
            float64x2_t v276 = 0u;
            float64x2_t v281 = 0u;
            float64x2_t v282 = 0u;
            float64x2_t v283 = 0u;
            float64x2_t v284 = 0u;
            float64x2_t v289 = 0u;
            float64x2_t v290 = 0u;
            float64x2_t v291 = 0u;
            float64x2_t v292 = 0u;
            unsigned int v109 = v76[7];
            if (!v76[7]) {
              goto LABEL_140;
            }
          }
          int32x4_t v110 = (const double *)((char *)v106 + v108);
          if (v109 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v297, 128, (unint64_t)v110, v109, v82);
LABEL_144:
            unsigned int v16 = v170;
            uint64_t v111 = v192;
            if (!v192) {
              goto LABEL_185;
            }
            goto LABEL_145;
          }
          unsigned int v16 = v170;
          if (v109 == 7)
          {
            float64x2_t v147 = vld1q_dup_f64(v110);
            float64x2_t v297 = v147;
            float64x2_t v298 = v147;
            float64x2_t v299 = v147;
            float64x2_t v300 = v147;
            float64x2_t v305 = v147;
            float64x2_t v306 = v147;
            float64x2_t v307 = v147;
            float64x2_t v308 = v147;
            float64x2_t v313 = v147;
            float64x2_t v314 = v147;
            float64x2_t v315 = v147;
            float64x2_t v316 = v147;
            float64x2_t v321 = v147;
            float64x2_t v322 = v147;
            float64x2_t v323 = v147;
            float64x2_t v324 = v147;
            uint64_t v111 = v192;
            if (!v192) {
              goto LABEL_185;
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v297, 128, (uint64_t)v110, v109);
            uint64_t v111 = v192;
            if (!v192) {
              goto LABEL_185;
            }
          }
LABEL_145:
          if (v193)
          {
            uint64_t v112 = 0;
            unint64_t v113 = (unint64_t)v190 << 7;
            uint64_t v114 = 8 * v191;
            unsigned int v115 = (char *)&v197 + v113 + v114;
            uint64_t v116 = v188;
            uint64_t v117 = v189;
            unint64_t v118 = 8 * v193;
            if (v118 <= 1) {
              unint64_t v119 = 1;
            }
            else {
              unint64_t v119 = 8 * v193;
            }
            unint64_t v120 = v113 + v114;
            int64x2_t v121 = (char *)&v197 + v113 + v114;
            if (v119) {
              BOOL v122 = (v119 - 1) >> 32 == 0;
            }
            else {
              BOOL v122 = 0;
            }
            char v123 = !v122;
            uint64_t v124 = v119 & 0x7FFFFFFE0;
            uint64_t v125 = v119 & 0x7FFFFFFF8;
            uint64_t v126 = (char *)&v198 + v120;
            uint64_t v127 = (long long *)(v188 + 16);
            BOOL v128 = v115;
            uint64_t v129 = v188;
            do
            {
              uint64_t v130 = (char *)(v116 + v117 * v112);
              int64x2_t v131 = &v115[128 * v112];
              if ((unint64_t)(&v121[128 * v112] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v123;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_173;
              }
              if (v119 >= 0x20)
              {
                int64x2_t v135 = v127;
                unint64_t v136 = v126;
                uint64_t v137 = v119 & 0x7FFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *(v136 - 1) = *(v135 - 1);
                  *unint64_t v136 = v138;
                  v136 += 2;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v119 == v124) {
                  goto LABEL_156;
                }
                uint64_t v134 = v119 & 0x7FFFFFFE0;
                if ((v119 & 0x18) == 0)
                {
                  v130 += v124;
                  v131 += v124;
                  int v133 = v119 & 0xFFFFFFE0;
                  goto LABEL_173;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v125;
              unint64_t v139 = v134 - (v119 & 0x7FFFFFFF8);
              int v140 = (uint64_t *)(v129 + v134);
              uint64_t v141 = &v128[v134];
              do
              {
                uint64_t v142 = *v140++;
                *(void *)uint64_t v141 = v142;
                v141 += 8;
                v139 += 8;
              }
              while (v139);
              if (v119 == v125) {
                goto LABEL_156;
              }
              v130 += v125;
              int v133 = v119 & 0xFFFFFFF8;
LABEL_173:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v118 > v143++);
LABEL_156:
              ++v112;
              v126 += 128;
              uint64_t v127 = (long long *)((char *)v127 + v117);
              v129 += v117;
              v128 += 128;
            }
            while (v112 != v111);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)&v197, 128, (unint64_t)v186, v187, v194, v195, *(_DWORD *)(*(void *)(v181 + 208) + 52));
LABEL_186:
          if (v183) {
            memcpy(__src, v78, 0x800uLL);
          }
          BOOL v31 = v41 == v171 >> 4;
          unsigned int v41 = v80;
          uint64_t v36 = v181;
        }
        while (!v31);
        BOOL v31 = v26++ == v164;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v155 = v21;
  uint64_t v156 = v22;
  uint64_t v145 = v23;
  uint64_t v24 = v12;
  v185[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v160 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v144 = v14 + a10 - 1;
  unsigned int v146 = v144 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v164 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v164;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v165 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v164;
  BOOL v154 = isLevelTiled;
  if (v26 <= v146)
  {
    unsigned int v153 = v16 + a9 - 1;
    unsigned int v143 = v16 >> 4;
    if (v16 >> 4 <= v153 >> 4)
    {
      unsigned int v140 = v20 - 1;
      unsigned int v142 = (v18 - 1) >> 4;
      int v162 = ((v20 - 1) & 0xF) + 1;
      unsigned int v163 = (v20 - 1) >> 4;
      int v141 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v151 = v38.i32[0] | v38.i32[1];
      int8x8_t v150 = v38;
      BOOL v148 = v38.i32[0] != 0;
      BOOL v149 = v38.i32[1] != 0;
      unint64_t v139 = 8 * v28 * (unint64_t)v27;
      unsigned int v152 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v160) {
          int v40 = v160;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v143;
        if (v144 < v39) {
          unsigned int v39 = v144;
        }
        int v147 = v40 - 16 * v26;
        int v158 = v39 - v40 + 1;
        unsigned int v159 = 16 * v26;
        if (v26 == v142) {
          unsigned int v42 = v141;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v157 = v145 + (v40 - v160) * a11;
        unsigned int v161 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v153 < v44) {
            unsigned int v44 = v153;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v163) {
            unsigned int v47 = v162;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v159 >= v160 && v43 >= v16)
          {
            int v49 = v162;
            if (v41 != v163) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v158 != v42;
          }
          if (v154)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v139 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v130 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v131 = 0;
              if (v73) {
                goto LABEL_159;
              }
LABEL_148:
              unsigned int v132 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v132 | v131) {
                goto LABEL_149;
              }
LABEL_160:
              uint64_t v134 = 0;
            }
            else
            {
              unsigned int v131 = 32 - __clz(~(-1 << -(char)__clz(v130)));
              if ((v73 & 1) == 0) {
                goto LABEL_148;
              }
LABEL_159:
              unsigned int v132 = 0;
              if (!v131) {
                goto LABEL_160;
              }
LABEL_149:
              int v133 = 0;
              uint64_t v134 = 0;
              int v135 = v41 & v130;
              BOOL v136 = v131 != 0;
              BOOL v137 = v132 != 0;
              int v138 = 1;
              do
              {
                --v131;
                if (v136) {
                  v134 |= (unint64_t)(v138 & v135) << v133++;
                }
                else {
                  unsigned int v131 = 0;
                }
                --v132;
                if (v137) {
                  v134 |= (unint64_t)(v138 & v26 & ((v74 >> 4) - 1)) << v133++;
                }
                else {
                  unsigned int v132 = 0;
                }
                v138 *= 2;
                --v133;
                BOOL v137 = v132 != 0;
                BOOL v136 = v131 != 0;
              }
              while (v132 | v131);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v159 / v74 * ((v70 + v140) / v70)) << 14) + (v134 << 11);
            goto LABEL_59;
          }
          if (v151)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v148;
            BOOL v55 = v149;
            __int32 v57 = v150.i32[0];
            __int32 v56 = v150.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          int v76 = (unsigned __int8 *)(v156 + 8 * v66);
          uint64_t v77 = v157 + 16 * (v45 - v16);
          uint64_t v78 = (void *)(v155 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v165)
          {
            if (!v79)
            {
              int32x4_t v86 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock(v77, a11, (unint64_t)v86, v76, v47, v42, *(_DWORD *)(*(void *)(v36 + 208) + 52));
              goto LABEL_96;
            }
            unsigned int v80 = v78;
            char v81 = v47;
            int v82 = v45;
            int v83 = v46;
            uint64_t v84 = v78;
            BOOL v85 = v48;
            memcpy(__dst, v80, sizeof(__dst));
            BOOL v48 = v85;
            uint64_t v78 = v84;
            int v46 = v83;
            int v45 = v82;
            unsigned int v43 = 16 * v41;
            int32x4_t v86 = __dst;
            LOBYTE(v47) = v81;
            LOBYTE(v42) = v161;
            uint64_t v36 = v164;
          }
          else
          {
            int32x4_t v86 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          BOOL v167 = v86;
          unsigned __int8 v175 = v47;
          unsigned __int8 v176 = v42;
          unsigned int v171 = v147;
          unsigned int v172 = v45 - v43;
          int8x8_t v168 = v76;
          uint64_t v169 = v77;
          uint64_t v170 = a11;
          unsigned int v173 = v158;
          unsigned int v174 = v46;
          if (!v48)
          {
            int v87 = *(_DWORD *)(*(void *)(v36 + 208) + 52);
            unint64_t v88 = (unint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v178, 256, (unint64_t)v86, *v76, v87)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v180, 256, v88, v76[1], v87);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v179, 256, v89, v76[2], v87);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v181, 256, v90, v76[3], v87);
            unint64_t v92 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v182, 256, v91, v76[4], v87);
            unint64_t v93 = v92
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v184, 256, v92, v76[5], v87);
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v183, 256, v93, v76[6], v87);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v185, 256, v93 + v94, v76[7], v87);
            uint64_t v95 = v173;
            unsigned int v16 = v152;
            if (!v173 || !v174)
            {
LABEL_130:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressMacroblock((uint64_t)v178, 256, (unint64_t)v167, v168, v175, v176, *(_DWORD *)(*(void *)(v164 + 208) + 52));
              if (!v165) {
                goto LABEL_27;
              }
              goto LABEL_131;
            }
            uint64_t v96 = 0;
            unint64_t v97 = (unint64_t)v171 << 8;
            uint64_t v98 = 16 * v172;
            unsigned int v99 = &v178[v97 + v98];
            uint64_t v100 = v169;
            uint64_t v101 = v170;
            unint64_t v102 = 16 * v174;
            if (v102 <= 1) {
              unint64_t v103 = 1;
            }
            else {
              unint64_t v103 = 16 * v174;
            }
            unint64_t v104 = v97 + v98;
            float64x2_t v105 = &v178[v97 + v98];
            if (v103) {
              BOOL v106 = (v103 - 1) >> 32 == 0;
            }
            else {
              BOOL v106 = 0;
            }
            char v107 = !v106;
            uint64_t v108 = v103 & 0xFFFFFFFE0;
            uint64_t v109 = v103 & 0xFFFFFFFF0;
            int32x4_t v110 = &v178[v104 + 16];
            uint64_t v111 = (long long *)(v169 + 16);
            uint64_t v112 = v99;
            uint64_t v113 = v169;
            while (2)
            {
              uint64_t v114 = (char *)(v100 + v101 * v96);
              unsigned int v115 = &v99[256 * v96];
              if ((unint64_t)(&v105[256 * v96] - v114) < 0x20) {
                char v116 = 1;
              }
              else {
                char v116 = v107;
              }
              if (v116)
              {
                int v117 = 0;
LABEL_127:
                unsigned int v127 = v117 + 1;
                do
                {
                  char v128 = *v114++;
                  *v115++ = v128;
                }
                while (v102 > v127++);
              }
              else
              {
                if (v103 >= 0x20)
                {
                  char v123 = v111;
                  uint64_t v124 = v110;
                  uint64_t v125 = v103 & 0xFFFFFFFE0;
                  do
                  {
                    long long v126 = *v123;
                    *(v124 - 1) = *(v123 - 1);
                    *uint64_t v124 = v126;
                    v124 += 2;
                    v123 += 2;
                    v125 -= 32;
                  }
                  while (v125);
                  if (v103 == v108) {
                    goto LABEL_110;
                  }
                  uint64_t v118 = v103 & 0xFFFFFFFE0;
                  if ((v103 & 0x10) == 0)
                  {
                    v114 += v108;
                    v115 += v108;
                    int v117 = v103 & 0xFFFFFFE0;
                    goto LABEL_127;
                  }
                }
                else
                {
                  uint64_t v118 = 0;
                }
                v115 += v109;
                unint64_t v119 = v118 - (v103 & 0xFFFFFFFF0);
                unint64_t v120 = (uint64_t *)(v113 + v118);
                int64x2_t v121 = &v112[v118];
                do
                {
                  uint64_t v122 = *v120++;
                  *v121++ = v122;
                  v119 += 8;
                }
                while (v119);
                if (v103 != v109)
                {
                  v114 += v109;
                  int v117 = v103 & 0xFFFFFFF0;
                  goto LABEL_127;
                }
              }
LABEL_110:
              ++v96;
              v110 += 256;
              uint64_t v111 = (long long *)((char *)v111 + v101);
              v113 += v101;
              v112 += 256;
              if (v96 == v95) {
                goto LABEL_130;
              }
              continue;
            }
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_96:
          unsigned int v16 = v152;
          if (!v165) {
            goto LABEL_27;
          }
LABEL_131:
          memcpy(v78, v86, 0x1000uLL);
LABEL_27:
          BOOL v31 = v41++ == v153 >> 4;
          uint64_t v36 = v164;
          unsigned int v42 = v161;
        }
        while (!v31);
        BOOL v31 = v26++ == v146;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v236 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v188 = a8;
  unsigned int v173 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v172 = v173 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v183 = 0;
LABEL_32:
      unsigned int v180 = v26 - 4;
      unsigned int v177 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v170 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v183 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v183 = 0;
  unsigned int v170 = 0;
  unsigned int v177 = 0;
  unsigned int v180 = 0;
LABEL_33:
  if (v20 <= v172)
  {
    unsigned int v182 = a7 + a9 - 1;
    if (a7 >> 4 <= v182 >> 4)
    {
      unsigned int v191 = v18 >> 4;
      unsigned int v169 = v19 >> 4;
      int v190 = (v18 & 0xF) + 1;
      int v168 = (v19 & 0xF) + 1;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(void *)&long long v34 = 0x2000000020;
      *(int32x2_t *)&long long v35 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL)));
      *(int32x2_t *)&long long v36 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)&v35))));
      *(int8x8_t *)&long long v37 = vbic_s8(*(int8x8_t *)&v36, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      int v178 = v37 | DWORD1(v37);
      uint64_t v176 = v37;
      BOOL v174 = v37 != 0;
      BOOL v175 = DWORD1(v37) != 0;
      int v181 = v24;
      do
      {
        unsigned int v38 = (16 * v20) | 0xF;
        if (16 * v20 <= v188) {
          int v39 = v188;
        }
        else {
          int v39 = 16 * v20;
        }
        if (v173 < v38) {
          unsigned int v38 = v173;
        }
        int v179 = v39 - 16 * v20;
        int v187 = v38 - v39 + 1;
        unsigned int v40 = a7 >> 4;
        if (v20 == v169) {
          unsigned int v41 = v168;
        }
        else {
          unsigned int v41 = 16;
        }
        uint64_t v186 = a3 + (v39 - v188) * a11;
        unsigned int v189 = v41;
        do
        {
          unsigned int v51 = 16 * v40;
          unsigned int v52 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v53 = a7;
          }
          else {
            int v53 = 16 * v40;
          }
          if (v182 < v52) {
            unsigned int v52 = a7 + a9 - 1;
          }
          int v54 = v52 - v53 + 1;
          if (v40 == v191) {
            unsigned int v55 = v190;
          }
          else {
            unsigned int v55 = 16;
          }
          BOOL v56 = 1;
          if (16 * v20 >= v188 && v51 >= a7)
          {
            int v57 = v190;
            if (v40 != v191) {
              int v57 = 16;
            }
            BOOL v56 = v54 != v57 || v187 != v41;
          }
          if (v183)
          {
            if (v180 | v177)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              BOOL v61 = v177 != 0;
              int v62 = 1;
              BOOL v63 = v180 != 0;
              unsigned int v64 = v177;
              unsigned int v65 = v180;
              do
              {
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v40 & ~(-1 << v180) & v62) << v59++;
                }
                else {
                  unsigned int v65 = 0;
                }
                --v64;
                if (v61) {
                  v60 |= (unint64_t)(v20 & ~(-1 << v177) & v62) << v59++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v62 *= 2;
                --v59;
                BOOL v61 = v64 != 0;
                BOOL v63 = v65 != 0;
              }
              while (v64 | v65);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v73 = *(void *)(a1 + 320) * ((v40 >> v180) + (v20 >> v177) * v170) + (v60 << 8);
          }
          else
          {
            if (v178)
            {
              int v66 = 0;
              uint64_t v67 = 0;
              int v68 = 1;
              BOOL v70 = v174;
              BOOL v69 = v175;
              int v72 = v176;
              int v71 = HIDWORD(v176);
              do
              {
                --v71;
                if (v69) {
                  v67 |= (unint64_t)(v68 & v40) << v66++;
                }
                else {
                  int v71 = 0;
                }
                --v72;
                if (v70) {
                  v67 |= (unint64_t)(v68 & v20) << v66++;
                }
                else {
                  int v72 = 0;
                }
                v68 *= 2;
                --v66;
                BOOL v70 = v72 != 0;
                BOOL v69 = v71 != 0;
              }
              while (v72 | v71);
            }
            else
            {
              uint64_t v67 = 0;
            }
            uint64_t v73 = v67 << 8;
          }
          unsigned int v74 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
          }
          unsigned int v77 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v77 <= 1) {
            unsigned int v77 = 1;
          }
          unsigned int v78 = v77 + 15;
          if (v78 < 0x20)
          {
            unsigned int v79 = 0;
            if (!v76)
            {
LABEL_111:
              uint64_t v81 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v79 = 32 - __clz(~(-1 << -(char)__clz((v78 >> 4) - 1)));
            if (!(v79 | v76)) {
              goto LABEL_111;
            }
          }
          int v80 = 0;
          uint64_t v81 = 0;
          BOOL v82 = v76 != 0;
          BOOL v83 = v79 != 0;
          int v84 = 1;
          do
          {
            --v76;
            if (v82) {
              v81 |= (unint64_t)(v84 & v40) << v80++;
            }
            else {
              unsigned int v76 = 0;
            }
            --v79;
            if (v83) {
              v81 |= (unint64_t)(v84 & v20) << v80++;
            }
            else {
              unsigned int v79 = 0;
            }
            v84 *= 2;
            --v80;
            BOOL v83 = v79 != 0;
            BOOL v82 = v76 != 0;
          }
          while (v79 | v76);
LABEL_112:
          int v85 = v55 < 0x10 || v56;
          int32x4_t v86 = (unsigned __int8 *)(a4 + 8 * v81);
          int v87 = (int16x4_t *)(v186 + v53 - a7);
          unint64_t v88 = (int8x8_t *)(a2 + v73);
          if (v41 < 0x10) {
            int v89 = 1;
          }
          else {
            int v89 = v85;
          }
          if (v24)
          {
            if (!v89)
            {
              unint64_t v97 = (int8x8_t *)v203;
LABEL_126:
              uint64_t v98 = a11;
              unsigned int v99 = v97;
              uint64_t v100 = (char *)(a4 + 8 * v81);
              int v101 = v41;
              goto LABEL_207;
            }
            long long v90 = *(_OWORD *)v88[26].i8;
            v203[12] = *(_OWORD *)v88[24].i8;
            v203[13] = v90;
            long long v91 = *(_OWORD *)v88[30].i8;
            v203[14] = *(_OWORD *)v88[28].i8;
            v203[15] = v91;
            long long v92 = *(_OWORD *)v88[18].i8;
            v203[8] = *(_OWORD *)v88[16].i8;
            v203[9] = v92;
            long long v93 = *(_OWORD *)v88[22].i8;
            v203[10] = *(_OWORD *)v88[20].i8;
            v203[11] = v93;
            long long v94 = *(_OWORD *)v88[10].i8;
            v203[4] = *(_OWORD *)v88[8].i8;
            v203[5] = v94;
            long long v95 = *(_OWORD *)v88[14].i8;
            v203[6] = *(_OWORD *)v88[12].i8;
            v203[7] = v95;
            long long v96 = *(_OWORD *)v88[2].i8;
            v203[0] = *(_OWORD *)v88->i8;
            v203[1] = v96;
            long long v37 = *(_OWORD *)v88[4].i8;
            long long v36 = *(_OWORD *)v88[6].i8;
            unint64_t v97 = (int8x8_t *)v203;
            v203[2] = v37;
            v203[3] = v36;
          }
          else
          {
            unint64_t v97 = v88;
            if (!v89) {
              goto LABEL_126;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          unsigned int v193 = v97;
          unsigned __int8 v201 = v55;
          unsigned __int8 v202 = v41;
          unsigned int v197 = v179;
          unsigned int v198 = v53 - v51;
          unsigned __int8 v194 = (char *)(a4 + 8 * v81);
          uint64_t v195 = v186 + v53 - a7;
          uint64_t v196 = a11;
          unsigned int v199 = v187;
          unsigned int v200 = v54;
          if (v56)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            int v24 = v181;
            if (v181) {
              goto LABEL_47;
            }
            goto LABEL_48;
          }
          unsigned int v102 = *v86;
          if (v102 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v97, 0);
            int16x4_t v204 = (int16x4_t)v37;
            int16x4_t v206 = (int16x4_t)v37;
            uint64_t v208 = v37;
            uint64_t v210 = v37;
            uint64_t v103 = 1;
          }
          else if (v102 == 31)
          {
            int16x4_t v104 = (int16x4_t)v97[1];
            *(int8x8_t *)&long long v35 = v97[2];
            *(int8x8_t *)&long long v34 = v97[3];
            int16x4_t v105 = vuzp2_s16((int16x4_t)*v97, *(int16x4_t *)&v35);
            int16x4_t v204 = vuzp1_s16((int16x4_t)*v97, *(int16x4_t *)&v35);
            int16x4_t v206 = v105;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v104, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v104, *(int16x4_t *)&v34);
            uint64_t v208 = v37;
            uint64_t v210 = v36;
            uint64_t v103 = 32;
          }
          else if (*v86)
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 16, (uint64_t)v97, v102);
          }
          else
          {
            uint64_t v103 = 0;
            int16x4_t v204 = 0;
            int16x4_t v206 = 0;
            uint64_t v208 = 0;
            uint64_t v210 = 0;
          }
          BOOL v106 = (int8x8_t *)((char *)v97 + v103);
          unsigned int v107 = v86[1];
          if (v107 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v106, 0);
            int16x4_t v212 = (int16x4_t)v37;
            int16x4_t v214 = (int16x4_t)v37;
            uint64_t v216 = v37;
            uint64_t v218 = v37;
            uint64_t v108 = 1;
          }
          else if (v107 == 31)
          {
            int16x4_t v109 = (int16x4_t)v106[1];
            *(int8x8_t *)&long long v35 = v106[2];
            *(int8x8_t *)&long long v34 = v106[3];
            int16x4_t v110 = vuzp2_s16((int16x4_t)*v106, *(int16x4_t *)&v35);
            int16x4_t v212 = vuzp1_s16((int16x4_t)*v106, *(int16x4_t *)&v35);
            int16x4_t v214 = v110;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v109, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v109, *(int16x4_t *)&v34);
            uint64_t v216 = v37;
            uint64_t v218 = v36;
            uint64_t v108 = 32;
          }
          else if (v86[1])
          {
            uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 16, (uint64_t)v106, v107);
          }
          else
          {
            uint64_t v108 = 0;
            int16x4_t v212 = 0;
            int16x4_t v214 = 0;
            uint64_t v216 = 0;
            uint64_t v218 = 0;
          }
          uint64_t v111 = (int8x8_t *)((char *)v106 + v108);
          unsigned int v112 = v86[2];
          if (v112 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v111, 0);
            int16x4_t v205 = (int16x4_t)v37;
            int16x4_t v207 = (int16x4_t)v37;
            uint64_t v209 = v37;
            uint64_t v211 = v37;
            uint64_t v113 = 1;
          }
          else if (v112 == 31)
          {
            int16x4_t v114 = (int16x4_t)v111[1];
            *(int8x8_t *)&long long v35 = v111[2];
            *(int8x8_t *)&long long v34 = v111[3];
            int16x4_t v115 = vuzp2_s16((int16x4_t)*v111, *(int16x4_t *)&v35);
            int16x4_t v205 = vuzp1_s16((int16x4_t)*v111, *(int16x4_t *)&v35);
            int16x4_t v207 = v115;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v114, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v114, *(int16x4_t *)&v34);
            uint64_t v209 = v37;
            uint64_t v211 = v36;
            uint64_t v113 = 32;
          }
          else if (v86[2])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v205, 16, (uint64_t)v111, v112);
          }
          else
          {
            uint64_t v113 = 0;
            int16x4_t v205 = 0;
            int16x4_t v207 = 0;
            uint64_t v209 = 0;
            uint64_t v211 = 0;
          }
          char v116 = (int8x8_t *)((char *)v111 + v113);
          unsigned int v117 = v86[3];
          if (v117 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v116, 0);
            int16x4_t v213 = (int16x4_t)v37;
            int16x4_t v215 = (int16x4_t)v37;
            uint64_t v217 = v37;
            uint64_t v219 = v37;
            uint64_t v118 = 1;
          }
          else if (v117 == 31)
          {
            int16x4_t v119 = (int16x4_t)v116[1];
            *(int8x8_t *)&long long v35 = v116[2];
            *(int8x8_t *)&long long v34 = v116[3];
            int16x4_t v120 = vuzp2_s16((int16x4_t)*v116, *(int16x4_t *)&v35);
            int16x4_t v213 = vuzp1_s16((int16x4_t)*v116, *(int16x4_t *)&v35);
            int16x4_t v215 = v120;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v119, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v119, *(int16x4_t *)&v34);
            uint64_t v217 = v37;
            uint64_t v219 = v36;
            uint64_t v118 = 32;
          }
          else if (v86[3])
          {
            uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 16, (uint64_t)v116, v117);
          }
          else
          {
            uint64_t v118 = 0;
            int16x4_t v213 = 0;
            int16x4_t v215 = 0;
            uint64_t v217 = 0;
            uint64_t v219 = 0;
          }
          int64x2_t v121 = (int8x8_t *)((char *)v116 + v118);
          unsigned int v122 = v86[4];
          if (v122 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v121, 0);
            int16x4_t v220 = (int16x4_t)v37;
            int16x4_t v222 = (int16x4_t)v37;
            uint64_t v224 = v37;
            uint64_t v226 = v37;
            uint64_t v123 = 1;
          }
          else if (v122 == 31)
          {
            int16x4_t v124 = (int16x4_t)v121[1];
            *(int8x8_t *)&long long v35 = v121[2];
            *(int8x8_t *)&long long v34 = v121[3];
            int16x4_t v125 = vuzp2_s16((int16x4_t)*v121, *(int16x4_t *)&v35);
            int16x4_t v220 = vuzp1_s16((int16x4_t)*v121, *(int16x4_t *)&v35);
            int16x4_t v222 = v125;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v124, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v124, *(int16x4_t *)&v34);
            uint64_t v224 = v37;
            uint64_t v226 = v36;
            uint64_t v123 = 32;
          }
          else if (v86[4])
          {
            uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 16, (uint64_t)v121, v122);
          }
          else
          {
            uint64_t v123 = 0;
            int16x4_t v220 = 0;
            int16x4_t v222 = 0;
            uint64_t v224 = 0;
            uint64_t v226 = 0;
          }
          long long v126 = (int8x8_t *)((char *)v121 + v123);
          unsigned int v127 = v86[5];
          if (v127 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v126, 0);
            int16x4_t v228 = (int16x4_t)v37;
            int16x4_t v230 = (int16x4_t)v37;
            uint64_t v232 = v37;
            uint64_t v234 = v37;
            uint64_t v128 = 1;
          }
          else if (v127 == 31)
          {
            int16x4_t v129 = (int16x4_t)v126[1];
            *(int8x8_t *)&long long v35 = v126[2];
            *(int8x8_t *)&long long v34 = v126[3];
            int16x4_t v130 = vuzp2_s16((int16x4_t)*v126, *(int16x4_t *)&v35);
            int16x4_t v228 = vuzp1_s16((int16x4_t)*v126, *(int16x4_t *)&v35);
            int16x4_t v230 = v130;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v129, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v129, *(int16x4_t *)&v34);
            uint64_t v232 = v37;
            uint64_t v234 = v36;
            uint64_t v128 = 32;
          }
          else if (v86[5])
          {
            uint64_t v128 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 16, (uint64_t)v126, v127);
          }
          else
          {
            uint64_t v128 = 0;
            int16x4_t v228 = 0;
            int16x4_t v230 = 0;
            uint64_t v232 = 0;
            uint64_t v234 = 0;
          }
          unsigned int v131 = (int8x8_t *)((char *)v126 + v128);
          unsigned int v132 = v86[6];
          if (v132 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v131, 0);
            int16x4_t v221 = (int16x4_t)v37;
            int16x4_t v223 = (int16x4_t)v37;
            uint64_t v225 = v37;
            uint64_t v227 = v37;
            uint64_t v133 = 1;
          }
          else if (v132 == 31)
          {
            int16x4_t v134 = (int16x4_t)v131[1];
            *(int8x8_t *)&long long v35 = v131[2];
            *(int8x8_t *)&long long v34 = v131[3];
            int16x4_t v135 = vuzp2_s16((int16x4_t)*v131, *(int16x4_t *)&v35);
            int16x4_t v221 = vuzp1_s16((int16x4_t)*v131, *(int16x4_t *)&v35);
            int16x4_t v223 = v135;
            *(int16x4_t *)&long long v37 = vuzp1_s16(v134, *(int16x4_t *)&v34);
            *(int16x4_t *)&long long v36 = vuzp2_s16(v134, *(int16x4_t *)&v34);
            uint64_t v225 = v37;
            uint64_t v227 = v36;
            uint64_t v133 = 32;
          }
          else if (v86[6])
          {
            uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 16, (uint64_t)v131, v132);
          }
          else
          {
            uint64_t v133 = 0;
            int16x4_t v221 = 0;
            int16x4_t v223 = 0;
            uint64_t v225 = 0;
            uint64_t v227 = 0;
          }
          BOOL v136 = (int8x8_t *)((char *)v131 + v133);
          unsigned int v137 = v86[7];
          if (v137 == 96)
          {
            *(int8x8_t *)&long long v37 = vdup_lane_s8(*v136, 0);
            int16x4_t v229 = (int16x4_t)v37;
            int16x4_t v231 = (int16x4_t)v37;
            uint64_t v233 = v37;
            uint64_t v235 = v37;
            unsigned int v41 = v189;
            uint64_t v138 = v199;
            if (!v199) {
              goto LABEL_206;
            }
          }
          else
          {
            unsigned int v41 = v189;
            if (v137 == 31)
            {
              int16x4_t v139 = (int16x4_t)v136[1];
              *(int8x8_t *)&long long v35 = v136[2];
              *(int8x8_t *)&long long v34 = v136[3];
              int16x4_t v140 = vuzp2_s16((int16x4_t)*v136, *(int16x4_t *)&v35);
              int16x4_t v229 = vuzp1_s16((int16x4_t)*v136, *(int16x4_t *)&v35);
              int16x4_t v231 = v140;
              *(int16x4_t *)&long long v37 = vuzp1_s16(v139, *(int16x4_t *)&v34);
              *(int16x4_t *)&long long v36 = vuzp2_s16(v139, *(int16x4_t *)&v34);
              uint64_t v233 = v37;
              uint64_t v235 = v36;
              uint64_t v138 = v199;
              if (!v199) {
                goto LABEL_206;
              }
            }
            else if (v86[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 16, (uint64_t)v136, v137);
              uint64_t v138 = v199;
              if (!v199) {
                goto LABEL_206;
              }
            }
            else
            {
              int16x4_t v229 = 0;
              int16x4_t v231 = 0;
              uint64_t v233 = 0;
              uint64_t v235 = 0;
              uint64_t v138 = v199;
              if (!v199) {
                goto LABEL_206;
              }
            }
          }
          uint64_t v141 = v200;
          if (v200)
          {
            uint64_t v142 = 0;
            uint64_t v143 = 16 * v197;
            unsigned int v144 = (char *)&v204 + v198 + v143;
            uint64_t v145 = v143 + v198;
            unsigned int v146 = (char *)&v204 + v145;
            uint64_t v147 = v195;
            uint64_t v148 = v196;
            uint64_t v149 = v200 & 0xFFFFFFE0;
            uint64_t v150 = v200 & 0xFFFFFFF8;
            __int32 v151 = (char *)&v206 + v145;
            unsigned int v152 = (long long *)(v195 + 16);
            unsigned int v153 = v144;
            uint64_t v154 = v195;
            do
            {
              uint64_t v155 = (char *)(v147 + v142 * v148);
              uint64_t v156 = &v144[16 * v142];
              if (v141 < 8 || (unint64_t)&v146[16 * v142 - v147 - v142 * v148] < 0x20)
              {
                int v157 = 0;
                goto LABEL_192;
              }
              if (v141 >= 0x20)
              {
                unsigned int v161 = v152;
                int v162 = v151;
                uint64_t v163 = v141 & 0xFFFFFFE0;
                do
                {
                  long long v37 = *(v161 - 1);
                  long long v36 = *v161;
                  *(v162 - 1) = v37;
                  _OWORD *v162 = v36;
                  v162 += 2;
                  v161 += 2;
                  v163 -= 32;
                }
                while (v163);
                unsigned int v41 = v189;
                if (v149 == v141) {
                  goto LABEL_188;
                }
                uint64_t v160 = v141 & 0xFFFFFFE0;
                if ((v141 & 0x18) == 0)
                {
                  v155 += v149;
                  v156 += v149;
                  int v157 = v141 & 0xFFFFFFE0;
                  unsigned int v41 = v189;
                  goto LABEL_192;
                }
              }
              else
              {
                uint64_t v160 = 0;
              }
              v156 += v150;
              uint64_t v164 = v160 - (v141 & 0xFFFFFFF8);
              int v165 = (uint64_t *)(v154 + v160);
              BOOL v166 = &v153[v160];
              do
              {
                uint64_t v167 = *v165++;
                *(void *)&long long v37 = v167;
                *(void *)BOOL v166 = v167;
                v166 += 8;
                v164 += 8;
              }
              while (v164);
              unsigned int v41 = v189;
              if (v150 == v141) {
                goto LABEL_188;
              }
              v155 += v150;
              int v157 = v141 & 0xFFFFFFF8;
LABEL_192:
              int v158 = v141 - v157;
              do
              {
                char v159 = *v155++;
                *v156++ = v159;
                --v158;
              }
              while (v158);
LABEL_188:
              ++v142;
              v151 += 16;
              unsigned int v152 = (long long *)((char *)v152 + v148);
              v154 += v148;
              v153 += 16;
            }
            while (v142 != v138);
          }
LABEL_206:
          unsigned int v99 = v193;
          uint64_t v100 = v194;
          unsigned int v55 = v201;
          int v101 = v202;
          int v87 = &v204;
          uint64_t v98 = 16;
LABEL_207:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v87, v98, v99, v100, v55, v101, *(double *)&v37, *(double *)&v36, *(int8x8_t *)&v35, *(int8x8_t *)&v34);
          int v24 = v181;
          if (v181)
          {
LABEL_47:
            long long v42 = *(_OWORD *)v97->i8;
            long long v43 = *(_OWORD *)v97[2].i8;
            long long v44 = *(_OWORD *)v97[6].i8;
            *(_OWORD *)v88[4].i8 = *(_OWORD *)v97[4].i8;
            *(_OWORD *)v88[6].i8 = v44;
            *(_OWORD *)v88->i8 = v42;
            *(_OWORD *)v88[2].i8 = v43;
            long long v45 = *(_OWORD *)v97[8].i8;
            long long v46 = *(_OWORD *)v97[10].i8;
            long long v47 = *(_OWORD *)v97[14].i8;
            *(_OWORD *)v88[12].i8 = *(_OWORD *)v97[12].i8;
            *(_OWORD *)v88[14].i8 = v47;
            *(_OWORD *)v88[8].i8 = v45;
            *(_OWORD *)v88[10].i8 = v46;
            long long v48 = *(_OWORD *)v97[16].i8;
            long long v49 = *(_OWORD *)v97[18].i8;
            long long v50 = *(_OWORD *)v97[22].i8;
            *(_OWORD *)v88[20].i8 = *(_OWORD *)v97[20].i8;
            *(_OWORD *)v88[22].i8 = v50;
            *(_OWORD *)v88[16].i8 = v48;
            *(_OWORD *)v88[18].i8 = v49;
            long long v37 = *(_OWORD *)v97[24].i8;
            long long v36 = *(_OWORD *)v97[26].i8;
            long long v35 = *(_OWORD *)v97[28].i8;
            long long v34 = *(_OWORD *)v97[30].i8;
            *(_OWORD *)v88[28].i8 = v35;
            *(_OWORD *)v88[30].i8 = v34;
            *(_OWORD *)v88[24].i8 = v37;
            *(_OWORD *)v88[26].i8 = v36;
          }
LABEL_48:
          BOOL v21 = v40++ == v182 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v172;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v254 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  unsigned int v191 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v190 = v191 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v201 = 0;
LABEL_32:
      unsigned int v198 = v26 - 4;
      unsigned int v195 = v25 - 4;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v188 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v201 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v201 = 0;
  unsigned int v188 = 0;
  unsigned int v195 = 0;
  unsigned int v198 = 0;
LABEL_33:
  if (v20 <= v190)
  {
    unsigned int v200 = a7 + a9 - 1;
    if (a7 >> 4 <= v200 >> 4)
    {
      unsigned int v209 = v18 >> 4;
      unsigned int v187 = v19 >> 4;
      int v208 = (v18 & 0xF) + 1;
      int v186 = (v19 & 0xF) + 1;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v196 = v34.i32[0] | v34.i32[1];
      int8x8_t v194 = v34;
      BOOL v192 = v34.i32[0] != 0;
      BOOL v193 = v34.i32[1] != 0;
      int v199 = v24;
      do
      {
        unsigned int v35 = (16 * v20) | 0xF;
        if (16 * v20 <= v206) {
          int v36 = v206;
        }
        else {
          int v36 = 16 * v20;
        }
        if (v191 < v35) {
          unsigned int v35 = v191;
        }
        int v197 = v36 - 16 * v20;
        int v205 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        if (v20 == v187) {
          unsigned int v38 = v186;
        }
        else {
          unsigned int v38 = 16;
        }
        uint64_t v204 = a3 + (v36 - v206) * a11;
        unsigned int v207 = v38;
        do
        {
          unsigned int v51 = 16 * v37;
          unsigned int v52 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v53 = a7;
          }
          else {
            int v53 = 16 * v37;
          }
          if (v200 < v52) {
            unsigned int v52 = a7 + a9 - 1;
          }
          int v54 = v52 - v53 + 1;
          if (v37 == v209) {
            unsigned int v55 = v208;
          }
          else {
            unsigned int v55 = 16;
          }
          BOOL v56 = 1;
          if (16 * v20 >= v206 && v51 >= a7)
          {
            int v57 = v208;
            if (v37 != v209) {
              int v57 = 16;
            }
            BOOL v56 = v54 != v57 || v205 != v38;
          }
          if (v201)
          {
            if (v198 | v195)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              BOOL v61 = v195 != 0;
              int v62 = 1;
              BOOL v63 = v198 != 0;
              unsigned int v64 = v195;
              unsigned int v65 = v198;
              do
              {
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v37 & ~(-1 << v198) & v62) << v59++;
                }
                else {
                  unsigned int v65 = 0;
                }
                --v64;
                if (v61) {
                  v60 |= (unint64_t)(v20 & ~(-1 << v195) & v62) << v59++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v62 *= 2;
                --v59;
                BOOL v61 = v64 != 0;
                BOOL v63 = v65 != 0;
              }
              while (v64 | v65);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v73 = *(void *)(a1 + 320) * ((v37 >> v198) + (v20 >> v195) * v188) + (v60 << 8);
          }
          else
          {
            if (v196)
            {
              int v66 = 0;
              uint64_t v67 = 0;
              int v68 = 1;
              BOOL v70 = v192;
              BOOL v69 = v193;
              __int32 v72 = v194.i32[0];
              __int32 v71 = v194.i32[1];
              do
              {
                --v71;
                if (v69) {
                  v67 |= (unint64_t)(v68 & v37) << v66++;
                }
                else {
                  __int32 v71 = 0;
                }
                --v72;
                if (v70) {
                  v67 |= (unint64_t)(v68 & v20) << v66++;
                }
                else {
                  __int32 v72 = 0;
                }
                v68 *= 2;
                --v66;
                BOOL v70 = v72 != 0;
                BOOL v69 = v71 != 0;
              }
              while (v72 | v71);
            }
            else
            {
              uint64_t v67 = 0;
            }
            uint64_t v73 = v67 << 8;
          }
          unsigned int v74 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
          }
          unsigned int v77 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v77 <= 1) {
            unsigned int v77 = 1;
          }
          unsigned int v78 = v77 + 15;
          if (v78 < 0x20)
          {
            unsigned int v79 = 0;
            if (!v76)
            {
LABEL_111:
              uint64_t v81 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v79 = 32 - __clz(~(-1 << -(char)__clz((v78 >> 4) - 1)));
            if (!(v79 | v76)) {
              goto LABEL_111;
            }
          }
          int v80 = 0;
          uint64_t v81 = 0;
          BOOL v82 = v76 != 0;
          BOOL v83 = v79 != 0;
          int v84 = 1;
          do
          {
            --v76;
            if (v82) {
              v81 |= (unint64_t)(v84 & v37) << v80++;
            }
            else {
              unsigned int v76 = 0;
            }
            --v79;
            if (v83) {
              v81 |= (unint64_t)(v84 & v20) << v80++;
            }
            else {
              unsigned int v79 = 0;
            }
            v84 *= 2;
            --v80;
            BOOL v83 = v79 != 0;
            BOOL v82 = v76 != 0;
          }
          while (v79 | v76);
LABEL_112:
          int v85 = v55 < 0x10 || v56;
          int32x4_t v86 = (unsigned __int8 *)(a4 + 8 * v81);
          int v87 = (int16x4_t *)(v204 + v53 - a7);
          unint64_t v88 = (int16x4_t *)(a2 + v73);
          if (v38 < 0x10) {
            int v89 = 1;
          }
          else {
            int v89 = v85;
          }
          if (v24)
          {
            if (!v89)
            {
              uint64_t v98 = (int16x4_t *)v221;
LABEL_126:
              uint64_t v99 = a11;
              uint64_t v100 = v98;
              int v101 = (char *)(a4 + 8 * v81);
              int v102 = v38;
              goto LABEL_207;
            }
            long long v90 = *(_OWORD *)v88[26].i8;
            v221[12] = *(_OWORD *)v88[24].i8;
            v221[13] = v90;
            long long v91 = *(_OWORD *)v88[30].i8;
            v221[14] = *(_OWORD *)v88[28].i8;
            v221[15] = v91;
            long long v92 = *(_OWORD *)v88[18].i8;
            v221[8] = *(_OWORD *)v88[16].i8;
            v221[9] = v92;
            long long v93 = *(_OWORD *)v88[22].i8;
            v221[10] = *(_OWORD *)v88[20].i8;
            v221[11] = v93;
            long long v94 = *(_OWORD *)v88[10].i8;
            v221[4] = *(_OWORD *)v88[8].i8;
            v221[5] = v94;
            long long v95 = *(_OWORD *)v88[14].i8;
            v221[6] = *(_OWORD *)v88[12].i8;
            v221[7] = v95;
            long long v96 = *(_OWORD *)v88[2].i8;
            v221[0] = *(_OWORD *)v88->i8;
            v221[1] = v96;
            long long v97 = *(_OWORD *)v88[6].i8;
            uint64_t v98 = (int16x4_t *)v221;
            v221[2] = *(_OWORD *)v88[4].i8;
            v221[3] = v97;
          }
          else
          {
            uint64_t v98 = v88;
            if (!v89) {
              goto LABEL_126;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          uint64_t v211 = v98;
          unsigned __int8 v219 = v55;
          unsigned __int8 v220 = v38;
          unsigned int v215 = v197;
          unsigned int v216 = v53 - v51;
          int16x4_t v212 = (char *)(a4 + 8 * v81);
          uint64_t v213 = v204 + v53 - a7;
          uint64_t v214 = a11;
          unsigned int v217 = v205;
          unsigned int v218 = v54;
          if (v56)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            int v24 = v199;
            if (v199) {
              goto LABEL_47;
            }
            goto LABEL_48;
          }
          unsigned int v103 = *v86;
          if (v103 == 96)
          {
            int16x4_t v222 = (int16x4_t)vdup_lane_s8((int8x8_t)*v98, 0);
            int16x4_t v224 = v222;
            int16x4_t v226 = v222;
            int16x4_t v228 = v222;
            uint64_t v104 = 1;
          }
          else if (v103 == 31)
          {
            int16x4_t v105 = v98[1];
            int16x4_t v106 = v98[2];
            int16x4_t v107 = v98[3];
            int16x4_t v108 = vuzp2_s16(*v98, v106);
            int16x4_t v222 = vuzp1_s16(*v98, v106);
            int16x4_t v224 = v108;
            int16x4_t v226 = vuzp1_s16(v105, v107);
            int16x4_t v228 = vuzp2_s16(v105, v107);
            uint64_t v104 = 32;
          }
          else if (*v86)
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v222, 16, (uint64_t)v98, v103);
          }
          else
          {
            uint64_t v104 = 0;
            int16x4_t v222 = 0;
            int16x4_t v224 = 0;
            int16x4_t v226 = 0;
            int16x4_t v228 = 0;
          }
          int16x4_t v109 = (int8x8_t *)((char *)v98 + v104);
          unsigned int v110 = v86[1];
          if (v110 == 96)
          {
            int16x4_t v230 = (int16x4_t)vdup_lane_s8(*v109, 0);
            int16x4_t v232 = v230;
            int16x4_t v234 = v230;
            int16x4_t v236 = v230;
            uint64_t v111 = 1;
          }
          else if (v110 == 31)
          {
            int16x4_t v112 = (int16x4_t)v109[1];
            int16x4_t v113 = (int16x4_t)v109[2];
            int16x4_t v114 = (int16x4_t)v109[3];
            int16x4_t v115 = vuzp2_s16((int16x4_t)*v109, v113);
            int16x4_t v230 = vuzp1_s16((int16x4_t)*v109, v113);
            int16x4_t v232 = v115;
            int16x4_t v234 = vuzp1_s16(v112, v114);
            int16x4_t v236 = vuzp2_s16(v112, v114);
            uint64_t v111 = 32;
          }
          else if (v86[1])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 16, (uint64_t)v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int16x4_t v230 = 0;
            int16x4_t v232 = 0;
            int16x4_t v234 = 0;
            int16x4_t v236 = 0;
          }
          char v116 = (int8x8_t *)((char *)v109 + v111);
          unsigned int v117 = v86[2];
          if (v117 == 96)
          {
            int16x4_t v223 = (int16x4_t)vdup_lane_s8(*v116, 0);
            int16x4_t v225 = v223;
            int16x4_t v227 = v223;
            int16x4_t v229 = v223;
            uint64_t v118 = 1;
          }
          else if (v117 == 31)
          {
            int16x4_t v119 = (int16x4_t)v116[1];
            int16x4_t v120 = (int16x4_t)v116[2];
            int16x4_t v121 = (int16x4_t)v116[3];
            int16x4_t v122 = vuzp2_s16((int16x4_t)*v116, v120);
            int16x4_t v223 = vuzp1_s16((int16x4_t)*v116, v120);
            int16x4_t v225 = v122;
            int16x4_t v227 = vuzp1_s16(v119, v121);
            int16x4_t v229 = vuzp2_s16(v119, v121);
            uint64_t v118 = 32;
          }
          else if (v86[2])
          {
            uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 16, (uint64_t)v116, v117);
          }
          else
          {
            uint64_t v118 = 0;
            int16x4_t v223 = 0;
            int16x4_t v225 = 0;
            int16x4_t v227 = 0;
            int16x4_t v229 = 0;
          }
          uint64_t v123 = (int8x8_t *)((char *)v116 + v118);
          unsigned int v124 = v86[3];
          if (v124 == 96)
          {
            int16x4_t v231 = (int16x4_t)vdup_lane_s8(*v123, 0);
            int16x4_t v233 = v231;
            int16x4_t v235 = v231;
            int16x4_t v237 = v231;
            uint64_t v125 = 1;
          }
          else if (v124 == 31)
          {
            int16x4_t v126 = (int16x4_t)v123[1];
            int16x4_t v127 = (int16x4_t)v123[2];
            int16x4_t v128 = (int16x4_t)v123[3];
            int16x4_t v129 = vuzp2_s16((int16x4_t)*v123, v127);
            int16x4_t v231 = vuzp1_s16((int16x4_t)*v123, v127);
            int16x4_t v233 = v129;
            int16x4_t v235 = vuzp1_s16(v126, v128);
            int16x4_t v237 = vuzp2_s16(v126, v128);
            uint64_t v125 = 32;
          }
          else if (v86[3])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 16, (uint64_t)v123, v124);
          }
          else
          {
            uint64_t v125 = 0;
            int16x4_t v231 = 0;
            int16x4_t v233 = 0;
            int16x4_t v235 = 0;
            int16x4_t v237 = 0;
          }
          int16x4_t v130 = (int8x8_t *)((char *)v123 + v125);
          unsigned int v131 = v86[4];
          if (v131 == 96)
          {
            int16x4_t v238 = (int16x4_t)vdup_lane_s8(*v130, 0);
            int16x4_t v240 = v238;
            int16x4_t v242 = v238;
            int16x4_t v244 = v238;
            uint64_t v132 = 1;
          }
          else if (v131 == 31)
          {
            int16x4_t v133 = (int16x4_t)v130[1];
            int16x4_t v134 = (int16x4_t)v130[2];
            int16x4_t v135 = (int16x4_t)v130[3];
            int16x4_t v136 = vuzp2_s16((int16x4_t)*v130, v134);
            int16x4_t v238 = vuzp1_s16((int16x4_t)*v130, v134);
            int16x4_t v240 = v136;
            int16x4_t v242 = vuzp1_s16(v133, v135);
            int16x4_t v244 = vuzp2_s16(v133, v135);
            uint64_t v132 = 32;
          }
          else if (v86[4])
          {
            uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 16, (uint64_t)v130, v131);
          }
          else
          {
            uint64_t v132 = 0;
            int16x4_t v238 = 0;
            int16x4_t v240 = 0;
            int16x4_t v242 = 0;
            int16x4_t v244 = 0;
          }
          unsigned int v137 = (int8x8_t *)((char *)v130 + v132);
          unsigned int v138 = v86[5];
          if (v138 == 96)
          {
            int16x4_t v246 = (int16x4_t)vdup_lane_s8(*v137, 0);
            int16x4_t v248 = v246;
            int16x4_t v250 = v246;
            int16x4_t v252 = v246;
            uint64_t v139 = 1;
          }
          else if (v138 == 31)
          {
            int16x4_t v140 = (int16x4_t)v137[1];
            int16x4_t v141 = (int16x4_t)v137[2];
            int16x4_t v142 = (int16x4_t)v137[3];
            int16x4_t v143 = vuzp2_s16((int16x4_t)*v137, v141);
            int16x4_t v246 = vuzp1_s16((int16x4_t)*v137, v141);
            int16x4_t v248 = v143;
            int16x4_t v250 = vuzp1_s16(v140, v142);
            int16x4_t v252 = vuzp2_s16(v140, v142);
            uint64_t v139 = 32;
          }
          else if (v86[5])
          {
            uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 16, (uint64_t)v137, v138);
          }
          else
          {
            uint64_t v139 = 0;
            int16x4_t v246 = 0;
            int16x4_t v248 = 0;
            int16x4_t v250 = 0;
            int16x4_t v252 = 0;
          }
          unsigned int v144 = (int8x8_t *)((char *)v137 + v139);
          unsigned int v145 = v86[6];
          if (v145 == 96)
          {
            int16x4_t v239 = (int16x4_t)vdup_lane_s8(*v144, 0);
            int16x4_t v241 = v239;
            int16x4_t v243 = v239;
            int16x4_t v245 = v239;
            uint64_t v146 = 1;
          }
          else if (v145 == 31)
          {
            int16x4_t v147 = (int16x4_t)v144[1];
            int16x4_t v148 = (int16x4_t)v144[2];
            int16x4_t v149 = (int16x4_t)v144[3];
            int16x4_t v150 = vuzp2_s16((int16x4_t)*v144, v148);
            int16x4_t v239 = vuzp1_s16((int16x4_t)*v144, v148);
            int16x4_t v241 = v150;
            int16x4_t v243 = vuzp1_s16(v147, v149);
            int16x4_t v245 = vuzp2_s16(v147, v149);
            uint64_t v146 = 32;
          }
          else if (v86[6])
          {
            uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v239, 16, (uint64_t)v144, v145);
          }
          else
          {
            uint64_t v146 = 0;
            int16x4_t v239 = 0;
            int16x4_t v241 = 0;
            int16x4_t v243 = 0;
            int16x4_t v245 = 0;
          }
          __int32 v151 = (int8x8_t *)((char *)v144 + v146);
          unsigned int v152 = v86[7];
          if (v152 == 96)
          {
            int16x4_t v247 = (int16x4_t)vdup_lane_s8(*v151, 0);
            int16x4_t v249 = v247;
            int16x4_t v251 = v247;
            int16x4_t v253 = v247;
            unsigned int v38 = v207;
            uint64_t v153 = v217;
            if (!v217) {
              goto LABEL_206;
            }
          }
          else
          {
            unsigned int v38 = v207;
            if (v152 == 31)
            {
              int16x4_t v154 = (int16x4_t)v151[1];
              int16x4_t v155 = (int16x4_t)v151[2];
              int16x4_t v156 = (int16x4_t)v151[3];
              int16x4_t v157 = vuzp2_s16((int16x4_t)*v151, v155);
              int16x4_t v247 = vuzp1_s16((int16x4_t)*v151, v155);
              int16x4_t v249 = v157;
              int16x4_t v251 = vuzp1_s16(v154, v156);
              int16x4_t v253 = vuzp2_s16(v154, v156);
              uint64_t v153 = v217;
              if (!v217) {
                goto LABEL_206;
              }
            }
            else if (v86[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v247, 16, (uint64_t)v151, v152);
              uint64_t v153 = v217;
              if (!v217) {
                goto LABEL_206;
              }
            }
            else
            {
              int16x4_t v247 = 0;
              int16x4_t v249 = 0;
              int16x4_t v251 = 0;
              int16x4_t v253 = 0;
              uint64_t v153 = v217;
              if (!v217) {
                goto LABEL_206;
              }
            }
          }
          uint64_t v158 = v218;
          if (v218)
          {
            uint64_t v159 = 0;
            uint64_t v160 = 16 * v215;
            unsigned int v161 = (char *)&v222 + v216 + v160;
            uint64_t v162 = v160 + v216;
            uint64_t v163 = (char *)&v222 + v162;
            uint64_t v164 = v213;
            uint64_t v165 = v214;
            uint64_t v166 = v218 & 0xFFFFFFE0;
            uint64_t v167 = v218 & 0xFFFFFFF8;
            int v168 = (char *)&v224 + v162;
            unsigned int v169 = (long long *)(v213 + 16);
            unsigned int v170 = v161;
            uint64_t v171 = v213;
            do
            {
              unsigned int v172 = (char *)(v164 + v159 * v165);
              unsigned int v173 = &v161[16 * v159];
              if (v158 < 8 || (unint64_t)&v163[16 * v159 - v164 - v159 * v165] < 0x20)
              {
                int v174 = 0;
                goto LABEL_192;
              }
              if (v158 >= 0x20)
              {
                int v178 = v169;
                int v179 = v168;
                uint64_t v180 = v158 & 0xFFFFFFE0;
                do
                {
                  long long v181 = *v178;
                  *(v179 - 1) = *(v178 - 1);
                  *int v179 = v181;
                  v179 += 2;
                  v178 += 2;
                  v180 -= 32;
                }
                while (v180);
                unsigned int v38 = v207;
                if (v166 == v158) {
                  goto LABEL_188;
                }
                uint64_t v177 = v158 & 0xFFFFFFE0;
                if ((v158 & 0x18) == 0)
                {
                  v172 += v166;
                  v173 += v166;
                  int v174 = v158 & 0xFFFFFFE0;
                  unsigned int v38 = v207;
                  goto LABEL_192;
                }
              }
              else
              {
                uint64_t v177 = 0;
              }
              v173 += v167;
              uint64_t v182 = v177 - (v158 & 0xFFFFFFF8);
              BOOL v183 = (uint64_t *)(v171 + v177);
              uint64_t v184 = &v170[v177];
              do
              {
                uint64_t v185 = *v183++;
                *(void *)uint64_t v184 = v185;
                v184 += 8;
                v182 += 8;
              }
              while (v182);
              unsigned int v38 = v207;
              if (v167 == v158) {
                goto LABEL_188;
              }
              v172 += v167;
              int v174 = v158 & 0xFFFFFFF8;
LABEL_192:
              int v175 = v158 - v174;
              do
              {
                char v176 = *v172++;
                *v173++ = v176;
                --v175;
              }
              while (v175);
LABEL_188:
              ++v159;
              v168 += 16;
              unsigned int v169 = (long long *)((char *)v169 + v165);
              v171 += v165;
              v170 += 16;
            }
            while (v159 != v153);
          }
LABEL_206:
          uint64_t v100 = v211;
          int v101 = v212;
          unsigned int v55 = v219;
          int v102 = v220;
          int v87 = &v222;
          uint64_t v99 = 16;
LABEL_207:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v87, v99, v100, v101, v55, v102);
          int v24 = v199;
          if (v199)
          {
LABEL_47:
            long long v39 = *(_OWORD *)v98->i8;
            long long v40 = *(_OWORD *)v98[2].i8;
            long long v41 = *(_OWORD *)v98[6].i8;
            *(_OWORD *)v88[4].i8 = *(_OWORD *)v98[4].i8;
            *(_OWORD *)v88[6].i8 = v41;
            *(_OWORD *)v88->i8 = v39;
            *(_OWORD *)v88[2].i8 = v40;
            long long v42 = *(_OWORD *)v98[8].i8;
            long long v43 = *(_OWORD *)v98[10].i8;
            long long v44 = *(_OWORD *)v98[14].i8;
            *(_OWORD *)v88[12].i8 = *(_OWORD *)v98[12].i8;
            *(_OWORD *)v88[14].i8 = v44;
            *(_OWORD *)v88[8].i8 = v42;
            *(_OWORD *)v88[10].i8 = v43;
            long long v45 = *(_OWORD *)v98[16].i8;
            long long v46 = *(_OWORD *)v98[18].i8;
            long long v47 = *(_OWORD *)v98[22].i8;
            *(_OWORD *)v88[20].i8 = *(_OWORD *)v98[20].i8;
            *(_OWORD *)v88[22].i8 = v47;
            *(_OWORD *)v88[16].i8 = v45;
            *(_OWORD *)v88[18].i8 = v46;
            long long v48 = *(_OWORD *)v98[24].i8;
            long long v49 = *(_OWORD *)v98[26].i8;
            long long v50 = *(_OWORD *)v98[30].i8;
            *(_OWORD *)v88[28].i8 = *(_OWORD *)v98[28].i8;
            *(_OWORD *)v88[30].i8 = v50;
            *(_OWORD *)v88[24].i8 = v48;
            *(_OWORD *)v88[26].i8 = v49;
          }
LABEL_48:
          BOOL v21 = v37++ == v200 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v190;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v171 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v168 = v17;
  unsigned int v170 = v17 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v186 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v170)
  {
    unsigned int v177 = a7 + a9 - 1;
    if (a7 >> 4 <= v177 >> 4)
    {
      unsigned int v165 = a5 - 1;
      unsigned int v167 = (a6 - 1) >> 4;
      int v184 = ((a5 - 1) & 0xF) + 1;
      unsigned int v185 = (a5 - 1) >> 4;
      int v166 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(void *)&long long v27 = 0x2000000020;
      *(int32x2_t *)&long long v28 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL)));
      *(int32x2_t *)&long long v29 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)&v28))));
      *(int8x8_t *)&long long v30 = vbic_s8(*(int8x8_t *)&v29, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      int v176 = v30 | DWORD1(v30);
      uint64_t v175 = v30;
      BOOL v173 = v30 != 0;
      BOOL v174 = DWORD1(v30) != 0;
      unint64_t v164 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        unsigned int v32 = v171;
        if (16 * v18 <= v171) {
          int v33 = v171;
        }
        else {
          int v33 = 16 * v18;
        }
        unsigned int v34 = a7 >> 4;
        if (v168 < v31) {
          unsigned int v31 = v168;
        }
        int v172 = v33 - 16 * v18;
        int v182 = v31 - v33 + 1;
        unsigned int v183 = 16 * v18;
        if (v18 == v167) {
          unsigned int v35 = v166;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v181 = a3 + (v33 - v171) * a11;
        do
        {
          unsigned int v45 = 16 * v34;
          unsigned int v46 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v47 = a7;
          }
          else {
            int v47 = 16 * v34;
          }
          if (v177 < v46) {
            unsigned int v46 = a7 + a9 - 1;
          }
          int v48 = v46 - v47 + 1;
          if (v34 == v185) {
            unsigned int v49 = v184;
          }
          else {
            unsigned int v49 = 16;
          }
          BOOL v50 = 1;
          if (v183 >= v32 && v45 >= a7)
          {
            int v51 = v184;
            if (v34 != v185) {
              int v51 = 16;
            }
            BOOL v50 = v48 != v51 || v182 != v35;
          }
          if (isLevelTiled)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v164 >> (*(unsigned char *)(a1 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  unsigned int v72 = 16;
                  char v75 = 1;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v155 = (v72 >> 4) - 1;
            if (v74)
            {
              unsigned int v156 = 0;
              if (v75) {
                goto LABEL_207;
              }
LABEL_196:
              unsigned int v157 = 32 - __clz(~(-1 << -(char)__clz(((v76 + 15) >> 4) - 1)));
              if (v157 | v156) {
                goto LABEL_197;
              }
LABEL_208:
              uint64_t v159 = 0;
            }
            else
            {
              unsigned int v156 = 32 - __clz(~(-1 << -(char)__clz(v155)));
              if ((v75 & 1) == 0) {
                goto LABEL_196;
              }
LABEL_207:
              unsigned int v157 = 0;
              if (!v156) {
                goto LABEL_208;
              }
LABEL_197:
              int v158 = 0;
              uint64_t v159 = 0;
              int v160 = v34 & v155;
              BOOL v161 = v156 != 0;
              BOOL v162 = v157 != 0;
              int v163 = 1;
              do
              {
                --v156;
                if (v161) {
                  v159 |= (unint64_t)(v163 & v160) << v158++;
                }
                else {
                  unsigned int v156 = 0;
                }
                --v157;
                if (v162) {
                  v159 |= (unint64_t)(v163 & v18 & ((v76 >> 4) - 1)) << v158++;
                }
                else {
                  unsigned int v157 = 0;
                }
                v163 *= 2;
                --v158;
                BOOL v162 = v157 != 0;
                BOOL v161 = v156 != 0;
              }
              while (v157 | v156);
            }
            unint64_t v60 = ((unint64_t)(v45 / v72 + v183 / v76 * ((v72 + v165) / v72)) << 14) + (v159 << 8);
            goto LABEL_60;
          }
          if (v176)
          {
            int v53 = 0;
            uint64_t v54 = 0;
            int v55 = 1;
            BOOL v57 = v173;
            BOOL v56 = v174;
            int v59 = v175;
            int v58 = HIDWORD(v175);
            do
            {
              --v58;
              if (v56) {
                v54 |= (unint64_t)(v55 & v34) << v53++;
              }
              else {
                int v58 = 0;
              }
              --v59;
              if (v57) {
                v54 |= (unint64_t)(v55 & v18) << v53++;
              }
              else {
                int v59 = 0;
              }
              v55 *= 2;
              --v53;
              BOOL v57 = v59 != 0;
              BOOL v56 = v58 != 0;
            }
            while (v59 | v58);
          }
          else
          {
            uint64_t v54 = 0;
          }
          unint64_t v60 = v54 << 8;
LABEL_60:
          unsigned int v61 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20) {
            unsigned int v63 = 0;
          }
          else {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
          }
          unsigned int v64 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20)
          {
            unsigned int v66 = 0;
            if (!v63)
            {
LABEL_82:
              uint64_t v68 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
            if (!(v66 | v63)) {
              goto LABEL_82;
            }
          }
          int v67 = 0;
          uint64_t v68 = 0;
          BOOL v69 = v63 != 0;
          BOOL v70 = v66 != 0;
          int v71 = 1;
          do
          {
            --v63;
            if (v69) {
              v68 |= (unint64_t)(v71 & v34) << v67++;
            }
            else {
              unsigned int v63 = 0;
            }
            --v66;
            if (v70) {
              v68 |= (unint64_t)(v71 & v18) << v67++;
            }
            else {
              unsigned int v66 = 0;
            }
            v71 *= 2;
            --v67;
            BOOL v70 = v66 != 0;
            BOOL v69 = v63 != 0;
          }
          while (v66 | v63);
LABEL_83:
          int v77 = v49 < 0x10 || v50;
          unsigned int v78 = (char *)(a4 + 8 * v68);
          unsigned int v79 = (int8x8_t *)(a2 + v60);
          if (v35 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v77;
          }
          if (v186)
          {
            if (!v80)
            {
              unint64_t v88 = (int8x8_t *)v198;
LABEL_97:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v181 + v47 - a7, a11, v88, v78, v49, v35, *(double *)&v30, *(double *)&v29, *(int8x8_t *)&v28, *(int8x8_t *)&v27);
              if (v186) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            long long v81 = *(_OWORD *)v79[26].i8;
            v198[12] = *(_OWORD *)v79[24].i8;
            v198[13] = v81;
            long long v82 = *(_OWORD *)v79[30].i8;
            v198[14] = *(_OWORD *)v79[28].i8;
            v198[15] = v82;
            long long v83 = *(_OWORD *)v79[18].i8;
            v198[8] = *(_OWORD *)v79[16].i8;
            v198[9] = v83;
            long long v84 = *(_OWORD *)v79[22].i8;
            v198[10] = *(_OWORD *)v79[20].i8;
            v198[11] = v84;
            long long v85 = *(_OWORD *)v79[10].i8;
            v198[4] = *(_OWORD *)v79[8].i8;
            v198[5] = v85;
            long long v86 = *(_OWORD *)v79[14].i8;
            v198[6] = *(_OWORD *)v79[12].i8;
            v198[7] = v86;
            long long v87 = *(_OWORD *)v79[2].i8;
            v198[0] = *(_OWORD *)v79->i8;
            v198[1] = v87;
            long long v30 = *(_OWORD *)v79[4].i8;
            long long v29 = *(_OWORD *)v79[6].i8;
            unint64_t v88 = (int8x8_t *)v198;
            v198[2] = v30;
            v198[3] = v29;
          }
          else
          {
            unint64_t v88 = v79;
            if (!v80) {
              goto LABEL_97;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          unsigned int v188 = v88;
          unsigned __int8 v196 = v49;
          unsigned __int8 v197 = v35;
          unsigned int v192 = v172;
          unsigned int v193 = v47 - v45;
          unsigned int v189 = (char *)(a4 + 8 * v68);
          uint64_t v190 = v181 + v47 - a7;
          uint64_t v191 = a11;
          unsigned int v194 = v182;
          unsigned int v195 = v48;
          if (v50)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            if (v186) {
              goto LABEL_27;
            }
            goto LABEL_28;
          }
          unsigned int v89 = *v78;
          if (v89 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v88, 0);
            int16x4_t v199 = (int16x4_t)v30;
            int16x4_t v201 = (int16x4_t)v30;
            uint64_t v203 = v30;
            uint64_t v205 = v30;
            uint64_t v90 = 1;
          }
          else if (v89 == 31)
          {
            int16x4_t v91 = (int16x4_t)v88[1];
            *(int8x8_t *)&long long v28 = v88[2];
            *(int8x8_t *)&long long v27 = v88[3];
            int16x4_t v92 = vuzp2_s16((int16x4_t)*v88, *(int16x4_t *)&v28);
            int16x4_t v199 = vuzp1_s16((int16x4_t)*v88, *(int16x4_t *)&v28);
            int16x4_t v201 = v92;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v91, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v91, *(int16x4_t *)&v27);
            uint64_t v203 = v30;
            uint64_t v205 = v29;
            uint64_t v90 = 32;
          }
          else if (*v78)
          {
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v199, 16, (uint64_t)v88, v89);
          }
          else
          {
            uint64_t v90 = 0;
            int16x4_t v199 = 0;
            int16x4_t v201 = 0;
            uint64_t v203 = 0;
            uint64_t v205 = 0;
          }
          long long v93 = (int8x8_t *)((char *)v88 + v90);
          unsigned int v94 = v78[1];
          if (v94 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v93, 0);
            int16x4_t v207 = (int16x4_t)v30;
            int16x4_t v209 = (int16x4_t)v30;
            uint64_t v211 = v30;
            uint64_t v213 = v30;
            uint64_t v95 = 1;
          }
          else if (v94 == 31)
          {
            int16x4_t v96 = (int16x4_t)v93[1];
            *(int8x8_t *)&long long v28 = v93[2];
            *(int8x8_t *)&long long v27 = v93[3];
            int16x4_t v97 = vuzp2_s16((int16x4_t)*v93, *(int16x4_t *)&v28);
            int16x4_t v207 = vuzp1_s16((int16x4_t)*v93, *(int16x4_t *)&v28);
            int16x4_t v209 = v97;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v96, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v96, *(int16x4_t *)&v27);
            uint64_t v211 = v30;
            uint64_t v213 = v29;
            uint64_t v95 = 32;
          }
          else if (v78[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v207, 16, (uint64_t)v93, v94);
          }
          else
          {
            uint64_t v95 = 0;
            int16x4_t v207 = 0;
            int16x4_t v209 = 0;
            uint64_t v211 = 0;
            uint64_t v213 = 0;
          }
          uint64_t v98 = (int8x8_t *)((char *)v93 + v95);
          unsigned int v99 = v78[2];
          if (v99 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v98, 0);
            int16x4_t v200 = (int16x4_t)v30;
            int16x4_t v202 = (int16x4_t)v30;
            uint64_t v204 = v30;
            uint64_t v206 = v30;
            uint64_t v100 = 1;
          }
          else if (v99 == 31)
          {
            int16x4_t v101 = (int16x4_t)v98[1];
            *(int8x8_t *)&long long v28 = v98[2];
            *(int8x8_t *)&long long v27 = v98[3];
            int16x4_t v102 = vuzp2_s16((int16x4_t)*v98, *(int16x4_t *)&v28);
            int16x4_t v200 = vuzp1_s16((int16x4_t)*v98, *(int16x4_t *)&v28);
            int16x4_t v202 = v102;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v101, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v101, *(int16x4_t *)&v27);
            uint64_t v204 = v30;
            uint64_t v206 = v29;
            uint64_t v100 = 32;
          }
          else if (v78[2])
          {
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v200, 16, (uint64_t)v98, v99);
          }
          else
          {
            uint64_t v100 = 0;
            int16x4_t v200 = 0;
            int16x4_t v202 = 0;
            uint64_t v204 = 0;
            uint64_t v206 = 0;
          }
          unsigned int v103 = (int8x8_t *)((char *)v98 + v100);
          unsigned int v104 = v78[3];
          if (v104 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v103, 0);
            int16x4_t v208 = (int16x4_t)v30;
            int16x4_t v210 = (int16x4_t)v30;
            uint64_t v212 = v30;
            uint64_t v214 = v30;
            uint64_t v105 = 1;
          }
          else if (v104 == 31)
          {
            int16x4_t v106 = (int16x4_t)v103[1];
            *(int8x8_t *)&long long v28 = v103[2];
            *(int8x8_t *)&long long v27 = v103[3];
            int16x4_t v107 = vuzp2_s16((int16x4_t)*v103, *(int16x4_t *)&v28);
            int16x4_t v208 = vuzp1_s16((int16x4_t)*v103, *(int16x4_t *)&v28);
            int16x4_t v210 = v107;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v106, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v106, *(int16x4_t *)&v27);
            uint64_t v212 = v30;
            uint64_t v214 = v29;
            uint64_t v105 = 32;
          }
          else if (v78[3])
          {
            uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 16, (uint64_t)v103, v104);
          }
          else
          {
            uint64_t v105 = 0;
            int16x4_t v208 = 0;
            int16x4_t v210 = 0;
            uint64_t v212 = 0;
            uint64_t v214 = 0;
          }
          int16x4_t v108 = (int8x8_t *)((char *)v103 + v105);
          unsigned int v109 = v78[4];
          if (v109 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v108, 0);
            int16x4_t v215 = (int16x4_t)v30;
            int16x4_t v217 = (int16x4_t)v30;
            uint64_t v219 = v30;
            uint64_t v221 = v30;
            uint64_t v110 = 1;
          }
          else if (v109 == 31)
          {
            int16x4_t v111 = (int16x4_t)v108[1];
            *(int8x8_t *)&long long v28 = v108[2];
            *(int8x8_t *)&long long v27 = v108[3];
            int16x4_t v112 = vuzp2_s16((int16x4_t)*v108, *(int16x4_t *)&v28);
            int16x4_t v215 = vuzp1_s16((int16x4_t)*v108, *(int16x4_t *)&v28);
            int16x4_t v217 = v112;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v111, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v111, *(int16x4_t *)&v27);
            uint64_t v219 = v30;
            uint64_t v221 = v29;
            uint64_t v110 = 32;
          }
          else if (v78[4])
          {
            uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 16, (uint64_t)v108, v109);
          }
          else
          {
            uint64_t v110 = 0;
            int16x4_t v215 = 0;
            int16x4_t v217 = 0;
            uint64_t v219 = 0;
            uint64_t v221 = 0;
          }
          int16x4_t v113 = (int8x8_t *)((char *)v108 + v110);
          unsigned int v114 = v78[5];
          if (v114 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v113, 0);
            int16x4_t v223 = (int16x4_t)v30;
            int16x4_t v225 = (int16x4_t)v30;
            uint64_t v227 = v30;
            uint64_t v229 = v30;
            uint64_t v115 = 1;
          }
          else if (v114 == 31)
          {
            int16x4_t v116 = (int16x4_t)v113[1];
            *(int8x8_t *)&long long v28 = v113[2];
            *(int8x8_t *)&long long v27 = v113[3];
            int16x4_t v117 = vuzp2_s16((int16x4_t)*v113, *(int16x4_t *)&v28);
            int16x4_t v223 = vuzp1_s16((int16x4_t)*v113, *(int16x4_t *)&v28);
            int16x4_t v225 = v117;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v116, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v116, *(int16x4_t *)&v27);
            uint64_t v227 = v30;
            uint64_t v229 = v29;
            uint64_t v115 = 32;
          }
          else if (v78[5])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 16, (uint64_t)v113, v114);
          }
          else
          {
            uint64_t v115 = 0;
            int16x4_t v223 = 0;
            int16x4_t v225 = 0;
            uint64_t v227 = 0;
            uint64_t v229 = 0;
          }
          uint64_t v118 = (int8x8_t *)((char *)v113 + v115);
          unsigned int v119 = v78[6];
          if (v119 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v118, 0);
            int16x4_t v216 = (int16x4_t)v30;
            int16x4_t v218 = (int16x4_t)v30;
            uint64_t v220 = v30;
            uint64_t v222 = v30;
            uint64_t v120 = 1;
          }
          else if (v119 == 31)
          {
            int16x4_t v121 = (int16x4_t)v118[1];
            *(int8x8_t *)&long long v28 = v118[2];
            *(int8x8_t *)&long long v27 = v118[3];
            int16x4_t v122 = vuzp2_s16((int16x4_t)*v118, *(int16x4_t *)&v28);
            int16x4_t v216 = vuzp1_s16((int16x4_t)*v118, *(int16x4_t *)&v28);
            int16x4_t v218 = v122;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v121, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v121, *(int16x4_t *)&v27);
            uint64_t v220 = v30;
            uint64_t v222 = v29;
            uint64_t v120 = 32;
          }
          else if (v78[6])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 16, (uint64_t)v118, v119);
          }
          else
          {
            uint64_t v120 = 0;
            int16x4_t v216 = 0;
            int16x4_t v218 = 0;
            uint64_t v220 = 0;
            uint64_t v222 = 0;
          }
          uint64_t v123 = (int8x8_t *)((char *)v118 + v120);
          unsigned int v124 = v78[7];
          if (v124 == 96)
          {
            *(int8x8_t *)&long long v30 = vdup_lane_s8(*v123, 0);
            int16x4_t v224 = (int16x4_t)v30;
            int16x4_t v226 = (int16x4_t)v30;
            uint64_t v228 = v30;
            uint64_t v230 = v30;
            uint64_t v125 = v194;
            if (v194) {
              goto LABEL_158;
            }
          }
          else if (v124 == 31)
          {
            int16x4_t v126 = (int16x4_t)v123[1];
            *(int8x8_t *)&long long v28 = v123[2];
            *(int8x8_t *)&long long v27 = v123[3];
            int16x4_t v127 = vuzp2_s16((int16x4_t)*v123, *(int16x4_t *)&v28);
            int16x4_t v224 = vuzp1_s16((int16x4_t)*v123, *(int16x4_t *)&v28);
            int16x4_t v226 = v127;
            *(int16x4_t *)&long long v30 = vuzp1_s16(v126, *(int16x4_t *)&v27);
            *(int16x4_t *)&long long v29 = vuzp2_s16(v126, *(int16x4_t *)&v27);
            uint64_t v228 = v30;
            uint64_t v230 = v29;
            uint64_t v125 = v194;
            if (v194) {
              goto LABEL_158;
            }
          }
          else
          {
            if (v78[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 16, (uint64_t)v123, v124);
              uint64_t v125 = v194;
              if (!v194) {
                goto LABEL_178;
              }
LABEL_158:
              uint64_t v128 = v195;
              if (!v195) {
                goto LABEL_178;
              }
              uint64_t v129 = 0;
              uint64_t v130 = 16 * v192;
              unsigned int v131 = (char *)&v199 + v193 + v130;
              uint64_t v132 = v130 + v193;
              int16x4_t v133 = (char *)&v199 + v132;
              uint64_t v134 = v190;
              uint64_t v135 = v191;
              uint64_t v136 = v195 & 0xFFFFFFE0;
              uint64_t v137 = v195 & 0xFFFFFFF8;
              unsigned int v138 = (char *)&v201 + v132;
              uint64_t v139 = (long long *)(v190 + 16);
              int16x4_t v140 = v131;
              uint64_t v141 = v190;
              while (2)
              {
                int16x4_t v142 = (char *)(v134 + v129 * v135);
                int16x4_t v143 = &v131[16 * v129];
                if (v128 >= 8 && (unint64_t)&v133[16 * v129 - v134 - v129 * v135] >= 0x20)
                {
                  if (v128 >= 0x20)
                  {
                    int16x4_t v148 = v139;
                    int16x4_t v149 = v138;
                    uint64_t v150 = v128 & 0xFFFFFFE0;
                    do
                    {
                      long long v30 = *(v148 - 1);
                      long long v29 = *v148;
                      *(v149 - 1) = v30;
                      *int16x4_t v149 = v29;
                      v149 += 2;
                      v148 += 2;
                      v150 -= 32;
                    }
                    while (v150);
                    if (v136 == v128) {
                      goto LABEL_160;
                    }
                    uint64_t v147 = v128 & 0xFFFFFFE0;
                    if ((v128 & 0x18) == 0)
                    {
                      v142 += v136;
                      v143 += v136;
                      int v144 = v128 & 0xFFFFFFE0;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    uint64_t v147 = 0;
                  }
                  v143 += v137;
                  uint64_t v151 = v147 - (v128 & 0xFFFFFFF8);
                  unsigned int v152 = (uint64_t *)(v141 + v147);
                  uint64_t v153 = &v140[v147];
                  do
                  {
                    uint64_t v154 = *v152++;
                    *(void *)&long long v30 = v154;
                    *(void *)uint64_t v153 = v154;
                    v153 += 8;
                    v151 += 8;
                  }
                  while (v151);
                  if (v137 != v128)
                  {
                    v142 += v137;
                    int v144 = v128 & 0xFFFFFFF8;
                    goto LABEL_164;
                  }
                }
                else
                {
                  int v144 = 0;
LABEL_164:
                  int v145 = v128 - v144;
                  do
                  {
                    char v146 = *v142++;
                    *v143++ = v146;
                    --v145;
                  }
                  while (v145);
                }
LABEL_160:
                ++v129;
                v138 += 16;
                uint64_t v139 = (long long *)((char *)v139 + v135);
                v141 += v135;
                v140 += 16;
                if (v129 == v125) {
                  goto LABEL_178;
                }
                continue;
              }
            }
            int16x4_t v224 = 0;
            int16x4_t v226 = 0;
            uint64_t v228 = 0;
            uint64_t v230 = 0;
            uint64_t v125 = v194;
            if (v194) {
              goto LABEL_158;
            }
          }
LABEL_178:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v199, 16, v188, v189, v196, v197, *(double *)&v30, *(double *)&v29, *(int8x8_t *)&v28, *(int8x8_t *)&v27);
          unsigned int v32 = v171;
          if (v186)
          {
LABEL_27:
            long long v36 = *(_OWORD *)v88->i8;
            long long v37 = *(_OWORD *)v88[2].i8;
            long long v38 = *(_OWORD *)v88[6].i8;
            *(_OWORD *)v79[4].i8 = *(_OWORD *)v88[4].i8;
            *(_OWORD *)v79[6].i8 = v38;
            *(_OWORD *)v79->i8 = v36;
            *(_OWORD *)v79[2].i8 = v37;
            long long v39 = *(_OWORD *)v88[8].i8;
            long long v40 = *(_OWORD *)v88[10].i8;
            long long v41 = *(_OWORD *)v88[14].i8;
            *(_OWORD *)v79[12].i8 = *(_OWORD *)v88[12].i8;
            *(_OWORD *)v79[14].i8 = v41;
            *(_OWORD *)v79[8].i8 = v39;
            *(_OWORD *)v79[10].i8 = v40;
            long long v42 = *(_OWORD *)v88[16].i8;
            long long v43 = *(_OWORD *)v88[18].i8;
            long long v44 = *(_OWORD *)v88[22].i8;
            *(_OWORD *)v79[20].i8 = *(_OWORD *)v88[20].i8;
            *(_OWORD *)v79[22].i8 = v44;
            *(_OWORD *)v79[16].i8 = v42;
            *(_OWORD *)v79[18].i8 = v43;
            long long v30 = *(_OWORD *)v88[24].i8;
            long long v29 = *(_OWORD *)v88[26].i8;
            long long v28 = *(_OWORD *)v88[28].i8;
            long long v27 = *(_OWORD *)v88[30].i8;
            *(_OWORD *)v79[28].i8 = v28;
            *(_OWORD *)v79[30].i8 = v27;
            *(_OWORD *)v79[24].i8 = v30;
            *(_OWORD *)v79[26].i8 = v29;
          }
LABEL_28:
          BOOL v22 = v34++ == v177 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v170;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v249 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v189 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v186 = v17;
  unsigned int v188 = v17 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v204 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v188)
  {
    unsigned int v195 = a7 + a9 - 1;
    if (a7 >> 4 <= v195 >> 4)
    {
      unsigned int v183 = a5 - 1;
      unsigned int v185 = (a6 - 1) >> 4;
      int v202 = ((a5 - 1) & 0xF) + 1;
      unsigned int v203 = (a5 - 1) >> 4;
      int v184 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v26));
      __int32 v194 = v27.i32[0] | v27.i32[1];
      int8x8_t v193 = v27;
      BOOL v191 = v27.i32[0] != 0;
      BOOL v192 = v27.i32[1] != 0;
      unint64_t v182 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v28 = (16 * v18) | 0xF;
        unsigned int v29 = v189;
        if (16 * v18 <= v189) {
          int v30 = v189;
        }
        else {
          int v30 = 16 * v18;
        }
        unsigned int v31 = a7 >> 4;
        if (v186 < v28) {
          unsigned int v28 = v186;
        }
        int v190 = v30 - 16 * v18;
        int v200 = v28 - v30 + 1;
        unsigned int v201 = 16 * v18;
        if (v18 == v185) {
          unsigned int v32 = v184;
        }
        else {
          unsigned int v32 = 16;
        }
        uint64_t v199 = a3 + (v30 - v189) * a11;
        do
        {
          unsigned int v45 = 16 * v31;
          unsigned int v46 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v47 = a7;
          }
          else {
            int v47 = 16 * v31;
          }
          if (v195 < v46) {
            unsigned int v46 = a7 + a9 - 1;
          }
          int v48 = v46 - v47 + 1;
          if (v31 == v203) {
            unsigned int v49 = v202;
          }
          else {
            unsigned int v49 = 16;
          }
          BOOL v50 = 1;
          if (v201 >= v29 && v45 >= a7)
          {
            int v51 = v202;
            if (v31 != v203) {
              int v51 = 16;
            }
            BOOL v50 = v48 != v51 || v200 != v32;
          }
          if (isLevelTiled)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v182 >> (*(unsigned char *)(a1 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  unsigned int v72 = 16;
                  char v75 = 1;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v173 = (v72 >> 4) - 1;
            if (v74)
            {
              unsigned int v174 = 0;
              if (v75) {
                goto LABEL_207;
              }
LABEL_196:
              unsigned int v175 = 32 - __clz(~(-1 << -(char)__clz(((v76 + 15) >> 4) - 1)));
              if (v175 | v174) {
                goto LABEL_197;
              }
LABEL_208:
              uint64_t v177 = 0;
            }
            else
            {
              unsigned int v174 = 32 - __clz(~(-1 << -(char)__clz(v173)));
              if ((v75 & 1) == 0) {
                goto LABEL_196;
              }
LABEL_207:
              unsigned int v175 = 0;
              if (!v174) {
                goto LABEL_208;
              }
LABEL_197:
              int v176 = 0;
              uint64_t v177 = 0;
              int v178 = v31 & v173;
              BOOL v179 = v174 != 0;
              BOOL v180 = v175 != 0;
              int v181 = 1;
              do
              {
                --v174;
                if (v179) {
                  v177 |= (unint64_t)(v181 & v178) << v176++;
                }
                else {
                  unsigned int v174 = 0;
                }
                --v175;
                if (v180) {
                  v177 |= (unint64_t)(v181 & v18 & ((v76 >> 4) - 1)) << v176++;
                }
                else {
                  unsigned int v175 = 0;
                }
                v181 *= 2;
                --v176;
                BOOL v180 = v175 != 0;
                BOOL v179 = v174 != 0;
              }
              while (v175 | v174);
            }
            unint64_t v60 = ((unint64_t)(v45 / v72 + v201 / v76 * ((v72 + v183) / v72)) << 14) + (v177 << 8);
            goto LABEL_60;
          }
          if (v194)
          {
            int v53 = 0;
            uint64_t v54 = 0;
            int v55 = 1;
            BOOL v57 = v191;
            BOOL v56 = v192;
            __int32 v59 = v193.i32[0];
            __int32 v58 = v193.i32[1];
            do
            {
              --v58;
              if (v56) {
                v54 |= (unint64_t)(v55 & v31) << v53++;
              }
              else {
                __int32 v58 = 0;
              }
              --v59;
              if (v57) {
                v54 |= (unint64_t)(v55 & v18) << v53++;
              }
              else {
                __int32 v59 = 0;
              }
              v55 *= 2;
              --v53;
              BOOL v57 = v59 != 0;
              BOOL v56 = v58 != 0;
            }
            while (v59 | v58);
          }
          else
          {
            uint64_t v54 = 0;
          }
          unint64_t v60 = v54 << 8;
LABEL_60:
          unsigned int v61 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20) {
            unsigned int v63 = 0;
          }
          else {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
          }
          unsigned int v64 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20)
          {
            unsigned int v66 = 0;
            if (!v63)
            {
LABEL_82:
              uint64_t v68 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
            if (!(v66 | v63)) {
              goto LABEL_82;
            }
          }
          int v67 = 0;
          uint64_t v68 = 0;
          BOOL v69 = v63 != 0;
          BOOL v70 = v66 != 0;
          int v71 = 1;
          do
          {
            --v63;
            if (v69) {
              v68 |= (unint64_t)(v71 & v31) << v67++;
            }
            else {
              unsigned int v63 = 0;
            }
            --v66;
            if (v70) {
              v68 |= (unint64_t)(v71 & v18) << v67++;
            }
            else {
              unsigned int v66 = 0;
            }
            v71 *= 2;
            --v67;
            BOOL v70 = v66 != 0;
            BOOL v69 = v63 != 0;
          }
          while (v66 | v63);
LABEL_83:
          int v77 = v49 < 0x10 || v50;
          unsigned int v78 = (char *)(a4 + 8 * v68);
          unsigned int v79 = (int16x4_t *)(a2 + v60);
          if (v32 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v77;
          }
          if (v204)
          {
            if (!v80)
            {
              unsigned int v89 = (int16x4_t *)v216;
LABEL_97:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((int16x4_t *)(v199 + v47 - a7), a11, v89, v78, v49, v32);
              if (v204) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            long long v81 = *(_OWORD *)v79[26].i8;
            v216[12] = *(_OWORD *)v79[24].i8;
            v216[13] = v81;
            long long v82 = *(_OWORD *)v79[30].i8;
            v216[14] = *(_OWORD *)v79[28].i8;
            v216[15] = v82;
            long long v83 = *(_OWORD *)v79[18].i8;
            v216[8] = *(_OWORD *)v79[16].i8;
            v216[9] = v83;
            long long v84 = *(_OWORD *)v79[22].i8;
            v216[10] = *(_OWORD *)v79[20].i8;
            v216[11] = v84;
            long long v85 = *(_OWORD *)v79[10].i8;
            v216[4] = *(_OWORD *)v79[8].i8;
            v216[5] = v85;
            long long v86 = *(_OWORD *)v79[14].i8;
            v216[6] = *(_OWORD *)v79[12].i8;
            v216[7] = v86;
            long long v87 = *(_OWORD *)v79[2].i8;
            v216[0] = *(_OWORD *)v79->i8;
            v216[1] = v87;
            long long v88 = *(_OWORD *)v79[6].i8;
            unsigned int v89 = (int16x4_t *)v216;
            v216[2] = *(_OWORD *)v79[4].i8;
            v216[3] = v88;
          }
          else
          {
            unsigned int v89 = v79;
            if (!v80) {
              goto LABEL_97;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          uint64_t v206 = v89;
          unsigned __int8 v214 = v49;
          unsigned __int8 v215 = v32;
          unsigned int v210 = v190;
          unsigned int v211 = v47 - v45;
          int16x4_t v207 = (char *)(a4 + 8 * v68);
          uint64_t v208 = v199 + v47 - a7;
          uint64_t v209 = a11;
          unsigned int v212 = v200;
          unsigned int v213 = v48;
          if (v50)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            if (v204) {
              goto LABEL_27;
            }
            goto LABEL_28;
          }
          unsigned int v90 = *v78;
          if (v90 == 96)
          {
            int16x4_t v217 = (int16x4_t)vdup_lane_s8((int8x8_t)*v89, 0);
            int16x4_t v219 = v217;
            int16x4_t v221 = v217;
            int16x4_t v223 = v217;
            uint64_t v91 = 1;
          }
          else if (v90 == 31)
          {
            int16x4_t v92 = v89[1];
            int16x4_t v93 = v89[2];
            int16x4_t v94 = v89[3];
            int16x4_t v95 = vuzp2_s16(*v89, v93);
            int16x4_t v217 = vuzp1_s16(*v89, v93);
            int16x4_t v219 = v95;
            int16x4_t v221 = vuzp1_s16(v92, v94);
            int16x4_t v223 = vuzp2_s16(v92, v94);
            uint64_t v91 = 32;
          }
          else if (*v78)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 16, (uint64_t)v89, v90);
          }
          else
          {
            uint64_t v91 = 0;
            int16x4_t v217 = 0;
            int16x4_t v219 = 0;
            int16x4_t v221 = 0;
            int16x4_t v223 = 0;
          }
          int16x4_t v96 = (int8x8_t *)((char *)v89 + v91);
          unsigned int v97 = v78[1];
          if (v97 == 96)
          {
            int16x4_t v225 = (int16x4_t)vdup_lane_s8(*v96, 0);
            int16x4_t v227 = v225;
            int16x4_t v229 = v225;
            int16x4_t v231 = v225;
            uint64_t v98 = 1;
          }
          else if (v97 == 31)
          {
            int16x4_t v99 = (int16x4_t)v96[1];
            int16x4_t v100 = (int16x4_t)v96[2];
            int16x4_t v101 = (int16x4_t)v96[3];
            int16x4_t v102 = vuzp2_s16((int16x4_t)*v96, v100);
            int16x4_t v225 = vuzp1_s16((int16x4_t)*v96, v100);
            int16x4_t v227 = v102;
            int16x4_t v229 = vuzp1_s16(v99, v101);
            int16x4_t v231 = vuzp2_s16(v99, v101);
            uint64_t v98 = 32;
          }
          else if (v78[1])
          {
            uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 16, (uint64_t)v96, v97);
          }
          else
          {
            uint64_t v98 = 0;
            int16x4_t v225 = 0;
            int16x4_t v227 = 0;
            int16x4_t v229 = 0;
            int16x4_t v231 = 0;
          }
          unsigned int v103 = (int8x8_t *)((char *)v96 + v98);
          unsigned int v104 = v78[2];
          if (v104 == 96)
          {
            int16x4_t v218 = (int16x4_t)vdup_lane_s8(*v103, 0);
            int16x4_t v220 = v218;
            int16x4_t v222 = v218;
            int16x4_t v224 = v218;
            uint64_t v105 = 1;
          }
          else if (v104 == 31)
          {
            int16x4_t v106 = (int16x4_t)v103[1];
            int16x4_t v107 = (int16x4_t)v103[2];
            int16x4_t v108 = (int16x4_t)v103[3];
            int16x4_t v109 = vuzp2_s16((int16x4_t)*v103, v107);
            int16x4_t v218 = vuzp1_s16((int16x4_t)*v103, v107);
            int16x4_t v220 = v109;
            int16x4_t v222 = vuzp1_s16(v106, v108);
            int16x4_t v224 = vuzp2_s16(v106, v108);
            uint64_t v105 = 32;
          }
          else if (v78[2])
          {
            uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 16, (uint64_t)v103, v104);
          }
          else
          {
            uint64_t v105 = 0;
            int16x4_t v218 = 0;
            int16x4_t v220 = 0;
            int16x4_t v222 = 0;
            int16x4_t v224 = 0;
          }
          uint64_t v110 = (int8x8_t *)((char *)v103 + v105);
          unsigned int v111 = v78[3];
          if (v111 == 96)
          {
            int16x4_t v226 = (int16x4_t)vdup_lane_s8(*v110, 0);
            int16x4_t v228 = v226;
            int16x4_t v230 = v226;
            int16x4_t v232 = v226;
            uint64_t v112 = 1;
          }
          else if (v111 == 31)
          {
            int16x4_t v113 = (int16x4_t)v110[1];
            int16x4_t v114 = (int16x4_t)v110[2];
            int16x4_t v115 = (int16x4_t)v110[3];
            int16x4_t v116 = vuzp2_s16((int16x4_t)*v110, v114);
            int16x4_t v226 = vuzp1_s16((int16x4_t)*v110, v114);
            int16x4_t v228 = v116;
            int16x4_t v230 = vuzp1_s16(v113, v115);
            int16x4_t v232 = vuzp2_s16(v113, v115);
            uint64_t v112 = 32;
          }
          else if (v78[3])
          {
            uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 16, (uint64_t)v110, v111);
          }
          else
          {
            uint64_t v112 = 0;
            int16x4_t v226 = 0;
            int16x4_t v228 = 0;
            int16x4_t v230 = 0;
            int16x4_t v232 = 0;
          }
          int16x4_t v117 = (int8x8_t *)((char *)v110 + v112);
          unsigned int v118 = v78[4];
          if (v118 == 96)
          {
            int16x4_t v233 = (int16x4_t)vdup_lane_s8(*v117, 0);
            int16x4_t v235 = v233;
            int16x4_t v237 = v233;
            int16x4_t v239 = v233;
            uint64_t v119 = 1;
          }
          else if (v118 == 31)
          {
            int16x4_t v120 = (int16x4_t)v117[1];
            int16x4_t v121 = (int16x4_t)v117[2];
            int16x4_t v122 = (int16x4_t)v117[3];
            int16x4_t v123 = vuzp2_s16((int16x4_t)*v117, v121);
            int16x4_t v233 = vuzp1_s16((int16x4_t)*v117, v121);
            int16x4_t v235 = v123;
            int16x4_t v237 = vuzp1_s16(v120, v122);
            int16x4_t v239 = vuzp2_s16(v120, v122);
            uint64_t v119 = 32;
          }
          else if (v78[4])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 16, (uint64_t)v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            int16x4_t v233 = 0;
            int16x4_t v235 = 0;
            int16x4_t v237 = 0;
            int16x4_t v239 = 0;
          }
          unsigned int v124 = (int8x8_t *)((char *)v117 + v119);
          unsigned int v125 = v78[5];
          if (v125 == 96)
          {
            int16x4_t v241 = (int16x4_t)vdup_lane_s8(*v124, 0);
            int16x4_t v243 = v241;
            int16x4_t v245 = v241;
            int16x4_t v247 = v241;
            uint64_t v126 = 1;
          }
          else if (v125 == 31)
          {
            int16x4_t v127 = (int16x4_t)v124[1];
            int16x4_t v128 = (int16x4_t)v124[2];
            int16x4_t v129 = (int16x4_t)v124[3];
            int16x4_t v130 = vuzp2_s16((int16x4_t)*v124, v128);
            int16x4_t v241 = vuzp1_s16((int16x4_t)*v124, v128);
            int16x4_t v243 = v130;
            int16x4_t v245 = vuzp1_s16(v127, v129);
            int16x4_t v247 = vuzp2_s16(v127, v129);
            uint64_t v126 = 32;
          }
          else if (v78[5])
          {
            uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 16, (uint64_t)v124, v125);
          }
          else
          {
            uint64_t v126 = 0;
            int16x4_t v241 = 0;
            int16x4_t v243 = 0;
            int16x4_t v245 = 0;
            int16x4_t v247 = 0;
          }
          unsigned int v131 = (int8x8_t *)((char *)v124 + v126);
          unsigned int v132 = v78[6];
          if (v132 == 96)
          {
            int16x4_t v234 = (int16x4_t)vdup_lane_s8(*v131, 0);
            int16x4_t v236 = v234;
            int16x4_t v238 = v234;
            int16x4_t v240 = v234;
            uint64_t v133 = 1;
          }
          else if (v132 == 31)
          {
            int16x4_t v134 = (int16x4_t)v131[1];
            int16x4_t v135 = (int16x4_t)v131[2];
            int16x4_t v136 = (int16x4_t)v131[3];
            int16x4_t v137 = vuzp2_s16((int16x4_t)*v131, v135);
            int16x4_t v234 = vuzp1_s16((int16x4_t)*v131, v135);
            int16x4_t v236 = v137;
            int16x4_t v238 = vuzp1_s16(v134, v136);
            int16x4_t v240 = vuzp2_s16(v134, v136);
            uint64_t v133 = 32;
          }
          else if (v78[6])
          {
            uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 16, (uint64_t)v131, v132);
          }
          else
          {
            uint64_t v133 = 0;
            int16x4_t v234 = 0;
            int16x4_t v236 = 0;
            int16x4_t v238 = 0;
            int16x4_t v240 = 0;
          }
          unsigned int v138 = (int8x8_t *)((char *)v131 + v133);
          unsigned int v139 = v78[7];
          if (v139 == 96)
          {
            int16x4_t v242 = (int16x4_t)vdup_lane_s8(*v138, 0);
            int16x4_t v244 = v242;
            int16x4_t v246 = v242;
            int16x4_t v248 = v242;
            uint64_t v140 = v212;
            if (v212) {
              goto LABEL_158;
            }
          }
          else if (v139 == 31)
          {
            int16x4_t v141 = (int16x4_t)v138[1];
            int16x4_t v142 = (int16x4_t)v138[2];
            int16x4_t v143 = (int16x4_t)v138[3];
            int16x4_t v144 = vuzp2_s16((int16x4_t)*v138, v142);
            int16x4_t v242 = vuzp1_s16((int16x4_t)*v138, v142);
            int16x4_t v244 = v144;
            int16x4_t v246 = vuzp1_s16(v141, v143);
            int16x4_t v248 = vuzp2_s16(v141, v143);
            uint64_t v140 = v212;
            if (v212) {
              goto LABEL_158;
            }
          }
          else
          {
            if (v78[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 16, (uint64_t)v138, v139);
              uint64_t v140 = v212;
              if (!v212) {
                goto LABEL_178;
              }
LABEL_158:
              uint64_t v145 = v213;
              if (!v213) {
                goto LABEL_178;
              }
              uint64_t v146 = 0;
              uint64_t v147 = 16 * v210;
              int16x4_t v148 = (char *)&v217 + v211 + v147;
              uint64_t v149 = v147 + v211;
              uint64_t v150 = (char *)&v217 + v149;
              uint64_t v151 = v208;
              uint64_t v152 = v209;
              uint64_t v153 = v213 & 0xFFFFFFE0;
              uint64_t v154 = v213 & 0xFFFFFFF8;
              unsigned int v155 = (char *)&v219 + v149;
              unsigned int v156 = (long long *)(v208 + 16);
              unsigned int v157 = v148;
              uint64_t v158 = v208;
              while (2)
              {
                uint64_t v159 = (char *)(v151 + v146 * v152);
                int v160 = &v148[16 * v146];
                if (v145 >= 8 && (unint64_t)&v150[16 * v146 - v151 - v146 * v152] >= 0x20)
                {
                  if (v145 >= 0x20)
                  {
                    unsigned int v165 = v156;
                    int v166 = v155;
                    uint64_t v167 = v145 & 0xFFFFFFE0;
                    do
                    {
                      long long v168 = *v165;
                      *(v166 - 1) = *(v165 - 1);
                      *int v166 = v168;
                      v166 += 2;
                      v165 += 2;
                      v167 -= 32;
                    }
                    while (v167);
                    if (v153 == v145) {
                      goto LABEL_160;
                    }
                    uint64_t v164 = v145 & 0xFFFFFFE0;
                    if ((v145 & 0x18) == 0)
                    {
                      v159 += v153;
                      v160 += v153;
                      int v161 = v145 & 0xFFFFFFE0;
                      goto LABEL_164;
                    }
                  }
                  else
                  {
                    uint64_t v164 = 0;
                  }
                  v160 += v154;
                  uint64_t v169 = v164 - (v145 & 0xFFFFFFF8);
                  unsigned int v170 = (uint64_t *)(v158 + v164);
                  unsigned int v171 = &v157[v164];
                  do
                  {
                    uint64_t v172 = *v170++;
                    *(void *)unsigned int v171 = v172;
                    v171 += 8;
                    v169 += 8;
                  }
                  while (v169);
                  if (v154 != v145)
                  {
                    v159 += v154;
                    int v161 = v145 & 0xFFFFFFF8;
                    goto LABEL_164;
                  }
                }
                else
                {
                  int v161 = 0;
LABEL_164:
                  int v162 = v145 - v161;
                  do
                  {
                    char v163 = *v159++;
                    *v160++ = v163;
                    --v162;
                  }
                  while (v162);
                }
LABEL_160:
                ++v146;
                v155 += 16;
                unsigned int v156 = (long long *)((char *)v156 + v152);
                v158 += v152;
                v157 += 16;
                if (v146 == v140) {
                  goto LABEL_178;
                }
                continue;
              }
            }
            int16x4_t v242 = 0;
            int16x4_t v244 = 0;
            int16x4_t v246 = 0;
            int16x4_t v248 = 0;
            uint64_t v140 = v212;
            if (v212) {
              goto LABEL_158;
            }
          }
LABEL_178:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v217, 16, v206, v207, v214, v215);
          unsigned int v29 = v189;
          if (v204)
          {
LABEL_27:
            long long v33 = *(_OWORD *)v89->i8;
            long long v34 = *(_OWORD *)v89[2].i8;
            long long v35 = *(_OWORD *)v89[6].i8;
            *(_OWORD *)v79[4].i8 = *(_OWORD *)v89[4].i8;
            *(_OWORD *)v79[6].i8 = v35;
            *(_OWORD *)v79->i8 = v33;
            *(_OWORD *)v79[2].i8 = v34;
            long long v36 = *(_OWORD *)v89[8].i8;
            long long v37 = *(_OWORD *)v89[10].i8;
            long long v38 = *(_OWORD *)v89[14].i8;
            *(_OWORD *)v79[12].i8 = *(_OWORD *)v89[12].i8;
            *(_OWORD *)v79[14].i8 = v38;
            *(_OWORD *)v79[8].i8 = v36;
            *(_OWORD *)v79[10].i8 = v37;
            long long v39 = *(_OWORD *)v89[16].i8;
            long long v40 = *(_OWORD *)v89[18].i8;
            long long v41 = *(_OWORD *)v89[22].i8;
            *(_OWORD *)v79[20].i8 = *(_OWORD *)v89[20].i8;
            *(_OWORD *)v79[22].i8 = v41;
            *(_OWORD *)v79[16].i8 = v39;
            *(_OWORD *)v79[18].i8 = v40;
            long long v42 = *(_OWORD *)v89[24].i8;
            long long v43 = *(_OWORD *)v89[26].i8;
            long long v44 = *(_OWORD *)v89[30].i8;
            *(_OWORD *)v79[28].i8 = *(_OWORD *)v89[28].i8;
            *(_OWORD *)v79[30].i8 = v44;
            *(_OWORD *)v79[24].i8 = v42;
            *(_OWORD *)v79[26].i8 = v43;
          }
LABEL_28:
          BOOL v22 = v31++ == v195 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v188;
      }
      while (!v22);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v149 = a8;
  unsigned int v134 = a8 + a10 - 1;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v133 = v134 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v155 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v27 - 4;
      unsigned int v138 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v131 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v144 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v20 <= v133)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v130 = a7 >> 4;
    if (a7 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v18 >> 4;
      unsigned int v129 = v19 >> 4;
      int v152 = (v18 & 0xF) + 1;
      int v128 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v139 = v35.i32[0] | v35.i32[1];
      int8x8_t v137 = v35;
      BOOL v135 = v35.i32[0] != 0;
      BOOL v136 = v35.i32[1] != 0;
      unsigned int v142 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v149) {
          int v37 = v149;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v134 < v36) {
          unsigned int v36 = v134;
        }
        int v140 = v37 - 16 * v20;
        int v148 = v36 - v37 + 1;
        unsigned int v38 = v130;
        if (v20 == v129) {
          unsigned int v39 = v128;
        }
        else {
          unsigned int v39 = 16;
        }
        uint64_t v147 = a3 + (v37 - v149) * a11;
        unsigned int v151 = v39;
        do
        {
          unsigned int v40 = 16 * v38;
          unsigned int v41 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v38;
          }
          if (v143 < v41) {
            unsigned int v41 = v143;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v153) {
            unsigned int v44 = v152;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= v149 && v40 >= a7)
          {
            int v46 = v152;
            if (v38 != v153) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v148 != v39;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v138 != 0;
              int v51 = 1;
              BOOL v53 = v141 != 0;
              unsigned int v52 = v138;
              unsigned int v54 = v141;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v141) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v138) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v141) + (v20 >> v138) * v131) + (v49 << 10);
          }
          else
          {
            if (v139)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v135;
              BOOL v59 = v136;
              __int32 v61 = v137.i32[0];
              __int32 v60 = v137.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 0x10 || v45;
          unsigned int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v147 + 4 * (v42 - a7);
          unsigned int v78 = (int64x2_t *)(a2 + v62);
          if (v39 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v155)
          {
            if (!v79)
            {
              unsigned int v78 = (int64x2_t *)__dst;
LABEL_123:
              long long v81 = (int64x2_t *)(v147 + 4 * v74);
              uint64_t v82 = a11;
              unint64_t v83 = (unint64_t)v78;
              long long v84 = (char *)(a4 + 8 * v70);
              goto LABEL_160;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            unsigned int v78 = (int64x2_t *)__dst;
            LOBYTE(v39) = v151;
            uint64_t result = v150;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          unsigned int v157 = v78;
          unsigned __int8 v165 = v44;
          unsigned __int8 v166 = v39;
          unsigned int v161 = v140;
          unsigned int v162 = v42 - v40;
          uint64_t v158 = v76;
          uint64_t v159 = v77;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_161;
          }
          long long v85 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v78, *v76));
          long long v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v85, v76[1]));
          long long v87 = (int64x2_t *)((char *)v86
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v86, v76[2]));
          long long v88 = (int64x2_t *)((char *)v87
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v87, v76[3]));
          unsigned int v89 = (int64x2_t *)((char *)v88
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v88, v76[4]));
          unsigned int v90 = (int64x2_t *)((char *)v89
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v89, v76[5]));
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, (int64x2_t *)((char *)v90 + v91), v76[7]);
          uint64_t v92 = v163;
          if (v163 && v164)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v161 << 6;
            uint64_t v95 = 4 * v162;
            int16x4_t v96 = &v168[0].i8[v94 + v95];
            uint64_t v97 = v159;
            uint64_t v98 = v160;
            unint64_t v99 = 4 * v164;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 4 * v164;
            }
            unint64_t v101 = v94 + v95;
            int16x4_t v102 = &v168[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            uint64_t v104 = v100 & 0x3FFFFFFE0;
            uint64_t v105 = v100 & 0x3FFFFFFF8;
            char v107 = !v103 || v100 < 8;
            int16x4_t v108 = &v168[1].i8[v101];
            int16x4_t v109 = (long long *)(v159 + 16);
            uint64_t v110 = v96;
            uint64_t v111 = v159;
            do
            {
              uint64_t v112 = (char *)(v97 + v98 * v93);
              int16x4_t v113 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v107;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_156;
              }
              if (v100 >= 0x20)
              {
                int16x4_t v117 = v109;
                unsigned int v118 = v108;
                uint64_t v119 = v100 & 0x3FFFFFFE0;
                do
                {
                  long long v120 = *v117;
                  *((_OWORD *)v118 - 1) = *(v117 - 1);
                  *(_OWORD *)unsigned int v118 = v120;
                  v118 += 32;
                  v117 += 2;
                  v119 -= 32;
                }
                while (v119);
                if (v100 == v104) {
                  goto LABEL_139;
                }
                uint64_t v116 = v100 & 0x3FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v112 += v104;
                  v113 += v104;
                  int v115 = v100 & 0xFFFFFFE0;
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v105;
              uint64_t v121 = v116 - v105;
              int16x4_t v122 = (uint64_t *)(v111 + v116);
              int16x4_t v123 = &v110[v116];
              do
              {
                uint64_t v124 = *v122++;
                *(void *)int16x4_t v123 = v124;
                v123 += 8;
                v121 += 8;
              }
              while (v121);
              if (v100 == v105) {
                goto LABEL_139;
              }
              v112 += v105;
              int v115 = v100 & 0xFFFFFFF8;
LABEL_156:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v99 > v125++);
LABEL_139:
              ++v93;
              v108 += 64;
              int16x4_t v109 = (long long *)((char *)v109 + v98);
              v111 += v98;
              v110 += 64;
            }
            while (v93 != v92);
          }
          unint64_t v83 = (unint64_t)v157;
          long long v84 = (char *)v158;
          unsigned int v44 = v165;
          unsigned int v39 = v166;
          long long v81 = v168;
          uint64_t v82 = 64;
LABEL_160:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_161:
          a7 = v142;
          if (v155) {
            memcpy(__src, v78, 0x400uLL);
          }
          BOOL v21 = v38++ == v143 >> 4;
          uint64_t result = v150;
          unsigned int v39 = v151;
        }
        while (!v21);
        BOOL v21 = v20++ == v133;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v205 = a8;
  unsigned int v187 = a8 + a10 - 1;
  uint64_t v206 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v186 = v187 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v209 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v200 = 0;
LABEL_32:
      unsigned int v196 = v27 - 4;
      unsigned int v191 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v184 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v200 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v200 = 0;
  unsigned int v184 = 0;
  unsigned int v191 = 0;
  unsigned int v196 = 0;
LABEL_33:
  if (v20 <= v186)
  {
    unsigned int v199 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v199 >> 4)
    {
      unsigned int v208 = v18 >> 4;
      unsigned int v182 = v19 >> 4;
      int v207 = (v18 & 0xF) + 1;
      int v181 = (v19 & 0xF) + 1;
      int v180 = ~(-1 << v191);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v194 = v35.i32[0] | v35.i32[1];
      int8x8_t v190 = v35;
      BOOL v188 = v35.i32[0] != 0;
      BOOL v189 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v198 = a7;
      do
      {
        unsigned int v39 = (16 * v20) | 0xF;
        if (16 * v20 <= v205) {
          int v40 = v205;
        }
        else {
          int v40 = 16 * v20;
        }
        if (v187 < v39) {
          unsigned int v39 = v187;
        }
        int v195 = v40 - 16 * v20;
        int v204 = v39 - v40 + 1;
        unsigned int v41 = v183;
        if (v20 == v182) {
          unsigned int v42 = v181;
        }
        else {
          unsigned int v42 = 16;
        }
        int v43 = v20 & v180;
        uint64_t v203 = a3 + (v40 - v205) * v36;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v199 < v45) {
            unsigned int v45 = v199;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v208) {
            unsigned int v48 = v207;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v20 >= v205 && v44 >= a7)
          {
            int v50 = v207;
            if (v41 != v208) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v204 != v42;
          }
          if (v200)
          {
            if (v196 | v191)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              BOOL v54 = v191 != 0;
              int v55 = 1;
              BOOL v57 = v196 != 0;
              unsigned int v56 = v191;
              unsigned int v58 = v196;
              do
              {
                --v58;
                if (v57) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v196) & v55) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                --v56;
                if (v54) {
                  v53 |= (unint64_t)(v43 & v55) << v52++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v55 *= 2;
                --v52;
                BOOL v54 = v56 != 0;
                BOOL v57 = v58 != 0;
              }
              while (v56 | v58);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v196) + (v20 >> v191) * v184) + (v53 << 10);
          }
          else
          {
            if (v194)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v188;
              BOOL v63 = v189;
              __int32 v65 = v190.i32[0];
              __int32 v64 = v190.i32[1];
              do
              {
                --v64;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v62 = v65 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          int v78 = v48 < 0x10 || v49;
          int v79 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v80 = v203 + 4 * (v46 - a7);
          long long v81 = (int64x2_t *)(a2 + v66);
          if (v42 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v209)
          {
            if (v82)
            {
              unint64_t v83 = v81;
              int v84 = v47;
              BOOL v85 = v49;
              int v192 = v46;
              memcpy(__dst, v81, sizeof(__dst));
              int v46 = v192;
              BOOL v49 = v85;
              unsigned int v44 = 16 * v41;
              uint64_t v36 = a11;
              int v47 = v84;
              long long v86 = (int64x2_t *)__dst;
              long long v81 = v83;
              uint64_t result = v206;
LABEL_122:
              unsigned __int8 v197 = v81;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              unsigned int v211 = v86;
              unsigned __int8 v219 = v48;
              unsigned __int8 v220 = v42;
              unsigned int v215 = v195;
              unsigned int v216 = v46 - v44;
              unsigned int v212 = v79;
              uint64_t v213 = v80;
              uint64_t v214 = v36;
              unsigned int v217 = v204;
              unsigned int v218 = v47;
              if (v49)
              {
                long long v87 = v86;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                long long v86 = v87;
                uint64_t result = v206;
                a7 = v198;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                goto LABEL_187;
              }
              int8x8_t v193 = v86;
              int16x4_t v113 = (int64x2_t *)((char *)v86
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v86, *v79));
              char v114 = (int64x2_t *)((char *)v113
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v113, v79[1]));
              int v115 = (int64x2_t *)((char *)v114
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v114, v79[2]));
              uint64_t v116 = (int64x2_t *)((char *)v115
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v115, v79[3]));
              int16x4_t v117 = (int64x2_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v116, v79[4]));
              unsigned int v118 = (int64x2_t *)((char *)v117
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v228, 64, v117, v79[5]));
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, v118, v79[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v229, 64, (int64x2_t *)((char *)v118 + v119), v79[7]);
              uint64_t v120 = v217;
              if (!v217 || !v218)
              {
LABEL_174:
                uint64_t v156 = 0;
                unsigned int v157 = v211;
                uint64_t v158 = (char *)v212;
                int v159 = v219;
                int v160 = v220;
                a7 = v198;
                uint64_t result = v206;
                uint64_t v38 = 2 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                long long v86 = v193;
                do
                {
                  uint64_t v175 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156 + 1];
                  uint64_t v176 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156];
                  unsigned int v177 = (v159 - 8 * v176) & ~((v159 - 8 * (int)v176) >> 31);
                  if (v177 >= 8) {
                    unsigned int v177 = 8;
                  }
                  unsigned int v178 = (v160 - 4 * v175) & ~((v160 - 4 * (int)v175) >> 31);
                  if (v178 >= 4) {
                    unsigned int v178 = 4;
                  }
                  if (v177) {
                    BOOL v179 = v178 == 0;
                  }
                  else {
                    BOOL v179 = 1;
                  }
                  if (v179)
                  {
                    char v174 = 0;
                  }
                  else
                  {
                    unsigned int v161 = &v222[16 * v175 + 2 * v176];
                    int64x2_t v162 = v161[1];
                    int64x2_t v163 = v161[4];
                    int64x2_t v164 = v161[5];
                    int64x2_t v165 = vzip1q_s64(*v161, v163);
                    int64x2_t v166 = vzip2q_s64(*v161, v163);
                    int64x2_t v167 = vzip1q_s64(v162, v164);
                    int64x2_t v168 = vzip2q_s64(v162, v164);
                    int64x2_t v169 = v161[8];
                    int64x2_t v170 = v161[9];
                    v161 += 12;
                    int64x2_t v171 = v161[1];
                    int64x2_t v172 = vzip1q_s64(v169, *v161);
                    int64x2_t v173 = vzip2q_s64(v169, *v161);
                    *unsigned int v157 = v165;
                    v157[1] = v166;
                    v157[2] = v172;
                    v157[3] = v173;
                    v157[4] = v167;
                    v157[5] = v168;
                    v157[6] = vzip1q_s64(v170, v171);
                    v157[7] = vzip2q_s64(v170, v171);
                    v157 += 8;
                    char v174 = 127;
                  }
                  *v158++ = v174;
                  v156 += 2;
                }
                while (v156 != 16);
                uint64_t v37 = 4 * a11;
LABEL_187:
                long long v81 = v197;
                if (v209) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v121 = 0;
              unint64_t v122 = (unint64_t)v215 << 6;
              uint64_t v123 = 4 * v216;
              uint64_t v124 = &v222[0].i8[v122 + v123];
              uint64_t v125 = v213;
              uint64_t v126 = v214;
              unint64_t v127 = 4 * v218;
              if (v127 <= 1) {
                unint64_t v128 = 1;
              }
              else {
                unint64_t v128 = 4 * v218;
              }
              unint64_t v129 = v122 + v123;
              unsigned int v130 = &v222[0].i8[v122 + v123];
              if (v128) {
                BOOL v131 = (v128 - 1) >> 32 == 0;
              }
              else {
                BOOL v131 = 0;
              }
              uint64_t v132 = v128 & 0x3FFFFFFE0;
              uint64_t v133 = v128 & 0x3FFFFFFF8;
              char v135 = !v131 || v128 < 8;
              BOOL v136 = &v222[1].i8[v129];
              int8x8_t v137 = (long long *)(v213 + 16);
              unsigned int v138 = v124;
              uint64_t v139 = v213;
              while (2)
              {
                int v140 = (char *)(v125 + v126 * v121);
                unsigned int v141 = &v124[64 * v121];
                if ((unint64_t)(&v130[64 * v121] - v140) < 0x20) {
                  char v142 = 1;
                }
                else {
                  char v142 = v135;
                }
                if (v142)
                {
                  int v143 = 0;
LABEL_171:
                  unsigned int v153 = v143 + 1;
                  do
                  {
                    char v154 = *v140++;
                    *v141++ = v154;
                  }
                  while (v127 > v153++);
                }
                else
                {
                  if (v128 >= 0x20)
                  {
                    uint64_t v145 = v137;
                    uint64_t v146 = v136;
                    uint64_t v147 = v128 & 0x3FFFFFFE0;
                    do
                    {
                      long long v148 = *v145;
                      *((_OWORD *)v146 - 1) = *(v145 - 1);
                      *(_OWORD *)uint64_t v146 = v148;
                      v146 += 32;
                      v145 += 2;
                      v147 -= 32;
                    }
                    while (v147);
                    if (v128 == v132) {
                      goto LABEL_154;
                    }
                    uint64_t v144 = v128 & 0x3FFFFFFE0;
                    if ((v128 & 0x18) == 0)
                    {
                      v140 += v132;
                      v141 += v132;
                      int v143 = v128 & 0xFFFFFFE0;
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v144 = 0;
                  }
                  v141 += v133;
                  uint64_t v149 = v144 - v133;
                  uint64_t v150 = (uint64_t *)(v139 + v144);
                  unsigned int v151 = &v138[v144];
                  do
                  {
                    uint64_t v152 = *v150++;
                    *(void *)unsigned int v151 = v152;
                    v151 += 8;
                    v149 += 8;
                  }
                  while (v149);
                  if (v128 != v133)
                  {
                    v140 += v133;
                    int v143 = v128 & 0xFFFFFFF8;
                    goto LABEL_171;
                  }
                }
LABEL_154:
                ++v121;
                v136 += 64;
                int8x8_t v137 = (long long *)((char *)v137 + v126);
                v139 += v126;
                v138 += 64;
                if (v121 == v120) {
                  goto LABEL_174;
                }
                continue;
              }
            }
            long long v86 = (int64x2_t *)__dst;
          }
          else
          {
            long long v86 = v81;
            if (v82) {
              goto LABEL_122;
            }
          }
          uint64_t v89 = 0;
          unsigned int v90 = v86;
          do
          {
            uint64_t v108 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89 + 1];
            uint64_t v109 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89];
            unsigned int v110 = (v48 - 8 * v109) & ~((int)(v48 - 8 * v109) >> 31);
            if (v110 >= 8) {
              unsigned int v110 = 8;
            }
            unsigned int v111 = (v42 - 4 * v108) & ~((int)(v42 - 4 * v108) >> 31);
            if (v111 >= 4) {
              unsigned int v111 = 4;
            }
            if (v110) {
              BOOL v112 = v111 == 0;
            }
            else {
              BOOL v112 = 1;
            }
            if (v112)
            {
              char v107 = 0;
            }
            else
            {
              uint64_t v91 = (int64x2_t *)(v80 + v37 * v108 + 32 * v109);
              uint64_t v92 = (int64x2_t *)((char *)v91 + v36);
              int64x2_t v94 = *v91;
              int64x2_t v95 = v91[1];
              uint64_t v93 = (int64x2_t *)((char *)v91 + v38);
              int64x2_t v96 = v92[1];
              int64x2_t v97 = vzip1q_s64(v94, *v92);
              int64x2_t v98 = vzip2q_s64(v94, *v92);
              int64x2_t v99 = vzip1q_s64(v95, v96);
              int64x2_t v100 = vzip2q_s64(v95, v96);
              int64x2_t v102 = *v93;
              int64x2_t v103 = v93[1];
              unint64_t v101 = (int64x2_t *)((char *)v93 + v36);
              int64x2_t v104 = v101[1];
              int64x2_t v105 = vzip1q_s64(v102, *v101);
              int64x2_t v106 = vzip2q_s64(v102, *v101);
              *unsigned int v90 = v97;
              v90[1] = v98;
              v90[2] = v105;
              v90[3] = v106;
              v90[4] = v99;
              v90[5] = v100;
              v90[6] = vzip1q_s64(v103, v104);
              v90[7] = vzip2q_s64(v103, v104);
              v90 += 8;
              char v107 = 127;
            }
            *v79++ = v107;
            v89 += 2;
          }
          while (v89 != 16);
          a7 = v198;
          int v43 = v20 & v180;
          unsigned int v88 = v41 + 1;
          if (v209)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v206;
          }
LABEL_48:
          BOOL v21 = v41 == v199 >> 4;
          unsigned int v41 = v88;
        }
        while (!v21);
        BOOL v21 = v20++ == v186;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v149 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v133 = a8 + a10 - 1;
  unsigned int v135 = v133 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v150 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v150;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v154 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v150;
  BOOL v143 = isLevelTiled;
  if (v18 <= v135)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v132 = a7 >> 4;
    if (a7 >> 4 <= v142 >> 4)
    {
      unsigned int v129 = a5 - 1;
      unsigned int v131 = (a6 - 1) >> 4;
      int v152 = ((a5 - 1) & 0xF) + 1;
      unsigned int v153 = (a5 - 1) >> 4;
      int v130 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v140 = v30.i32[0] | v30.i32[1];
      int8x8_t v139 = v30;
      BOOL v137 = v30.i32[0] != 0;
      BOOL v138 = v30.i32[1] != 0;
      unint64_t v128 = 8 * v20 * (unint64_t)v19;
      unsigned int v141 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v149) {
          int v32 = v149;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v132;
        if (v133 < v31) {
          unsigned int v31 = v133;
        }
        int v136 = v32 - 16 * v18;
        int v147 = v31 - v32 + 1;
        unsigned int v148 = 16 * v18;
        if (v18 == v131) {
          unsigned int v34 = v130;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v146 = a3 + (v32 - v149) * a11;
        unsigned int v151 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v142 < v36) {
            unsigned int v36 = v142;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v153) {
            unsigned int v39 = v152;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v148 >= v149 && v35 >= a7)
          {
            int v41 = v152;
            if (v33 != v153) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v147 != v34;
          }
          if (v143)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v128 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v119 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v120 = 0;
              if (v65) {
                goto LABEL_161;
              }
LABEL_150:
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v121 | v120) {
                goto LABEL_151;
              }
LABEL_162:
              uint64_t v123 = 0;
            }
            else
            {
              unsigned int v120 = 32 - __clz(~(-1 << -(char)__clz(v119)));
              if ((v65 & 1) == 0) {
                goto LABEL_150;
              }
LABEL_161:
              unsigned int v121 = 0;
              if (!v120) {
                goto LABEL_162;
              }
LABEL_151:
              int v122 = 0;
              uint64_t v123 = 0;
              int v124 = v33 & v119;
              BOOL v125 = v120 != 0;
              BOOL v126 = v121 != 0;
              int v127 = 1;
              do
              {
                --v120;
                if (v125) {
                  v123 |= (unint64_t)(v127 & v124) << v122++;
                }
                else {
                  unsigned int v120 = 0;
                }
                --v121;
                if (v126) {
                  v123 |= (unint64_t)(v127 & v18 & ((v66 >> 4) - 1)) << v122++;
                }
                else {
                  unsigned int v121 = 0;
                }
                v127 *= 2;
                --v122;
                BOOL v126 = v121 != 0;
                BOOL v125 = v120 != 0;
              }
              while (v121 | v120);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v148 / v66 * ((v62 + v129) / v62)) << 14) + (v123 << 10);
            goto LABEL_59;
          }
          if (v140)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v137;
            BOOL v47 = v138;
            __int32 v49 = v139.i32[0];
            __int32 v48 = v139.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v146 + 4 * (v37 - a7);
          unsigned int v70 = (int64x2_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v154)
          {
            if (!v71)
            {
              BOOL v75 = (int64x2_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v75, v68, v39, v34);
              a7 = v141;
              goto LABEL_132;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = (int64x2_t *)__dst;
            int v38 = v73;
            unsigned int v35 = 16 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v151;
            uint64_t v28 = v150;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v156 = v75;
          unsigned __int8 v164 = v39;
          unsigned __int8 v165 = v34;
          unsigned int v160 = v136;
          unsigned int v161 = v37 - v35;
          unsigned int v157 = v68;
          unint64_t v158 = v69;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v141;
            goto LABEL_132;
          }
          BOOL v76 = (int64x2_t *)((char *)v75
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, v75, *v68));
          int v77 = (int64x2_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v76, v68[1]));
          int v78 = (int64x2_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v77, v68[2]));
          int v79 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v78, v68[3]));
          uint64_t v80 = (int64x2_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v79, v68[4]));
          long long v81 = (int64x2_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v80, v68[5]));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, (int64x2_t *)((char *)v81 + v82), v68[7]);
          uint64_t v83 = v162;
          a7 = v141;
          if (v162 && v163)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v160 << 6;
            uint64_t v86 = 4 * v161;
            long long v87 = &v167[0].i8[v85 + v86];
            unint64_t v88 = v158;
            uint64_t v89 = v159;
            unint64_t v90 = 4 * v163;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 4 * v163;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v167[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            uint64_t v95 = v91 & 0x3FFFFFFE0;
            uint64_t v96 = v91 & 0x3FFFFFFF8;
            char v98 = !v94 || v91 < 8;
            int64x2_t v99 = &v167[1].i8[v92];
            int64x2_t v100 = (long long *)(v158 + 16);
            unint64_t v101 = v87;
            unint64_t v102 = v158;
            do
            {
              int64x2_t v103 = (char *)(v88 + v89 * v84);
              int64x2_t v104 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v103) < 0x20) {
                char v105 = 1;
              }
              else {
                char v105 = v98;
              }
              if (v105)
              {
                int v106 = 0;
                goto LABEL_128;
              }
              if (v91 >= 0x20)
              {
                uint64_t v108 = v100;
                uint64_t v109 = v99;
                uint64_t v110 = v91 & 0x3FFFFFFE0;
                do
                {
                  long long v111 = *v108;
                  *((_OWORD *)v109 - 1) = *(v108 - 1);
                  *(_OWORD *)uint64_t v109 = v111;
                  v109 += 32;
                  v108 += 2;
                  v110 -= 32;
                }
                while (v110);
                if (v91 == v95) {
                  goto LABEL_111;
                }
                uint64_t v107 = v91 & 0x3FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v103 += v95;
                  v104 += v95;
                  int v106 = v91 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v107 = 0;
              }
              v104 += v96;
              uint64_t v112 = v107 - v96;
              int16x4_t v113 = (uint64_t *)(v102 + v107);
              char v114 = &v101[v107];
              do
              {
                uint64_t v115 = *v113++;
                *(void *)char v114 = v115;
                v114 += 8;
                v112 += 8;
              }
              while (v112);
              if (v91 == v96) {
                goto LABEL_111;
              }
              v103 += v96;
              int v106 = v91 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v116 = v106 + 1;
              do
              {
                char v117 = *v103++;
                *v104++ = v117;
              }
              while (v90 > v116++);
LABEL_111:
              ++v84;
              v99 += 64;
              int64x2_t v100 = (long long *)((char *)v100 + v89);
              v102 += v89;
              v101 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v167, 64, (unint64_t)v156, v157, v164, v165);
LABEL_132:
          if (v154) {
            memcpy(v70, v75, 0x400uLL);
          }
          BOOL v23 = v33++ == v142 >> 4;
          uint64_t v28 = v150;
          unsigned int v34 = v151;
        }
        while (!v23);
        BOOL v23 = v18++ == v135;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v204 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v207 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v197 = isLevelTiled;
  if (v17 <= v186)
  {
    unsigned int v196 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v196 >> 4)
    {
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 4;
      int v205 = ((a5 - 1) & 0xF) + 1;
      int v181 = ((a6 - 1) & 0xF) + 1;
      unsigned int v182 = (a6 - 1) >> 4;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v194 = v29.i32[0] | v29.i32[1];
      int8x8_t v192 = v29;
      BOOL v190 = v29.i32[0] != 0;
      BOOL v191 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v179 = 8 * v27;
      uint64_t v31 = 4 * a11;
      uint64_t v32 = 2 * a11;
      unsigned int v195 = a7;
      do
      {
        unsigned int v33 = (16 * v17) | 0xF;
        if (16 * v17 <= v203) {
          int v34 = v203;
        }
        else {
          int v34 = 16 * v17;
        }
        unsigned int v35 = v183;
        if (v184 < v33) {
          unsigned int v33 = v184;
        }
        int v189 = v34 - 16 * v17;
        int v201 = v33 - v34 + 1;
        unsigned int v202 = 16 * v17;
        if (v17 == v182) {
          unsigned int v36 = v181;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v200 = a3 + (v34 - v203) * v30;
        unsigned int v187 = v36;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v196 < v38) {
            unsigned int v38 = v196;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v206) {
            unsigned int v41 = v205;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v202 >= v203 && v37 >= a7)
          {
            int v43 = v205;
            if (v35 != v206) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v201 != v36;
          }
          if (v197)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v179 >> (*(unsigned char *)(v26 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v170 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v171 = 0;
              if (v67) {
                goto LABEL_186;
              }
LABEL_175:
              unsigned int v172 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v172 | v171) {
                goto LABEL_176;
              }
LABEL_187:
              uint64_t v174 = 0;
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if ((v67 & 1) == 0) {
                goto LABEL_175;
              }
LABEL_186:
              unsigned int v172 = 0;
              if (!v171) {
                goto LABEL_187;
              }
LABEL_176:
              int v173 = 0;
              uint64_t v174 = 0;
              int v175 = v35 & v170;
              BOOL v176 = v171 != 0;
              BOOL v177 = v172 != 0;
              int v178 = 1;
              do
              {
                --v171;
                if (v176) {
                  v174 |= (unint64_t)(v178 & v175) << v173++;
                }
                else {
                  unsigned int v171 = 0;
                }
                --v172;
                if (v177) {
                  v174 |= (unint64_t)(v178 & v17 & ((v68 >> 4) - 1)) << v173++;
                }
                else {
                  unsigned int v172 = 0;
                }
                v178 *= 2;
                --v173;
                BOOL v177 = v172 != 0;
                BOOL v176 = v171 != 0;
              }
              while (v172 | v171);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v202 / v68 * ((v64 + v180) / v64)) << 14) + (v174 << 10);
            goto LABEL_59;
          }
          if (v194)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v190;
            BOOL v49 = v191;
            __int32 v51 = v192.i32[0];
            __int32 v50 = v192.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 10;
LABEL_59:
          unsigned int v53 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_81:
              uint64_t v60 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_81;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v17) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_82:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v71 = v200 + 4 * (v39 - a7);
          char v72 = (int64x2_t *)(a2 + v52);
          if (v36 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v207)
          {
            if (!v73)
            {
              int v77 = (int64x2_t *)__dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79 + 1];
                uint64_t v99 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79];
                unsigned int v100 = (v41 - 8 * v99) & ~((int)(v41 - 8 * v99) >> 31);
                if (v100 >= 8) {
                  unsigned int v100 = 8;
                }
                unsigned int v101 = (v36 - 4 * v98) & ~((int)(v36 - 4 * v98) >> 31);
                if (v101 >= 4) {
                  unsigned int v101 = 4;
                }
                if (v100) {
                  BOOL v102 = v101 == 0;
                }
                else {
                  BOOL v102 = 1;
                }
                if (v102)
                {
                  char v97 = 0;
                }
                else
                {
                  long long v81 = (int64x2_t *)(v71 + v31 * v98 + 32 * v99);
                  uint64_t v82 = (int64x2_t *)((char *)v81 + v30);
                  int64x2_t v84 = *v81;
                  int64x2_t v85 = v81[1];
                  uint64_t v83 = (int64x2_t *)((char *)v81 + v32);
                  int64x2_t v86 = v82[1];
                  int64x2_t v87 = vzip1q_s64(v84, *v82);
                  int64x2_t v88 = vzip2q_s64(v84, *v82);
                  int64x2_t v89 = vzip1q_s64(v85, v86);
                  int64x2_t v90 = vzip2q_s64(v85, v86);
                  int64x2_t v92 = *v83;
                  int64x2_t v93 = v83[1];
                  unint64_t v91 = (int64x2_t *)((char *)v83 + v30);
                  int64x2_t v94 = v91[1];
                  int64x2_t v95 = vzip1q_s64(v92, *v91);
                  int64x2_t v96 = vzip2q_s64(v92, *v91);
                  *uint64_t v80 = v87;
                  v80[1] = v88;
                  v80[2] = v95;
                  v80[3] = v96;
                  v80[4] = v89;
                  v80[5] = v90;
                  v80[6] = vzip1q_s64(v93, v94);
                  v80[7] = vzip2q_s64(v93, v94);
                  v80 += 8;
                  char v97 = 127;
                }
                *v70++ = v97;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v195;
              if (v207) {
                goto LABEL_158;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v40;
            BOOL v76 = v42;
            memcpy(__dst, v72, sizeof(__dst));
            int v77 = (int64x2_t *)__dst;
            char v72 = v74;
            BOOL v42 = v76;
            uint64_t v30 = a11;
            unsigned int v36 = v187;
            unsigned int v37 = 16 * v35;
            int v40 = v75;
            uint64_t v26 = v204;
          }
          else
          {
            int v77 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          int8x8_t v193 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int v209 = v77;
          unsigned __int8 v217 = v41;
          unsigned __int8 v218 = v36;
          unsigned int v213 = v189;
          unsigned int v214 = v39 - v37;
          unsigned int v210 = v70;
          uint64_t v211 = v71;
          uint64_t v212 = v30;
          unsigned int v215 = v201;
          unsigned int v216 = v40;
          if (v42)
          {
            int v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            int v77 = v78;
            uint64_t v26 = v204;
            a7 = v195;
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            char v72 = v193;
            if (!v207) {
              goto LABEL_27;
            }
LABEL_158:
            memcpy(v72, v77, 0x400uLL);
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            uint64_t v26 = v204;
            goto LABEL_27;
          }
          BOOL v188 = v77;
          int64x2_t v103 = (int64x2_t *)((char *)v77
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v220, 64, v77, *v70));
          int64x2_t v104 = (int64x2_t *)((char *)v103
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v103, v70[1]));
          char v105 = (int64x2_t *)((char *)v104
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v221, 64, v104, v70[2]));
          int v106 = (int64x2_t *)((char *)v105
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v105, v70[3]));
          uint64_t v107 = (int64x2_t *)((char *)v106
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v106, v70[4]));
          uint64_t v108 = (int64x2_t *)((char *)v107
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v107, v70[5]));
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v108, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, (int64x2_t *)((char *)v108 + v109), v70[7]);
          uint64_t v110 = v215;
          if (v215 && v216)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v213 << 6;
            uint64_t v113 = 4 * v214;
            char v114 = &v220[0].i8[v112 + v113];
            uint64_t v115 = v211;
            uint64_t v116 = v212;
            unint64_t v117 = 4 * v216;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 4 * v216;
            }
            unint64_t v119 = v112 + v113;
            unsigned int v120 = &v220[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            uint64_t v122 = v118 & 0x3FFFFFFE0;
            uint64_t v123 = v118 & 0x3FFFFFFF8;
            char v125 = !v121 || v118 < 8;
            BOOL v126 = &v220[1].i8[v119];
            int v127 = (long long *)(v211 + 16);
            unint64_t v128 = v114;
            uint64_t v129 = v211;
            do
            {
              int v130 = (char *)(v115 + v116 * v111);
              unsigned int v131 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v125;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_142;
              }
              if (v118 >= 0x20)
              {
                unsigned int v135 = v127;
                int v136 = v126;
                uint64_t v137 = v118 & 0x3FFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *((_OWORD *)v136 - 1) = *(v135 - 1);
                  *(_OWORD *)int v136 = v138;
                  v136 += 32;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v118 == v122) {
                  goto LABEL_125;
                }
                uint64_t v134 = v118 & 0x3FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v130 += v122;
                  v131 += v122;
                  int v133 = v118 & 0xFFFFFFE0;
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v123;
              uint64_t v139 = v134 - v123;
              __int32 v140 = (uint64_t *)(v129 + v134);
              unsigned int v141 = &v128[v134];
              do
              {
                uint64_t v142 = *v140++;
                *(void *)unsigned int v141 = v142;
                v141 += 8;
                v139 += 8;
              }
              while (v139);
              if (v118 == v123) {
                goto LABEL_125;
              }
              v130 += v123;
              int v133 = v118 & 0xFFFFFFF8;
LABEL_142:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v117 > v143++);
LABEL_125:
              ++v111;
              v126 += 64;
              int v127 = (long long *)((char *)v127 + v116);
              v129 += v116;
              v128 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v146 = 0;
          int v147 = v209;
          unsigned int v148 = (char *)v210;
          int v149 = v217;
          int v150 = v218;
          a7 = v195;
          uint64_t v26 = v204;
          uint64_t v32 = 2 * a11;
          uint64_t v31 = 4 * a11;
          char v72 = v193;
          do
          {
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146 + 1];
            uint64_t v166 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146];
            unsigned int v167 = (v149 - 8 * v166) & ~((v149 - 8 * (int)v166) >> 31);
            if (v167 >= 8) {
              unsigned int v167 = 8;
            }
            unsigned int v168 = (v150 - 4 * v165) & ~((v150 - 4 * (int)v165) >> 31);
            if (v168 >= 4) {
              unsigned int v168 = 4;
            }
            if (v167) {
              BOOL v169 = v168 == 0;
            }
            else {
              BOOL v169 = 1;
            }
            if (v169)
            {
              char v164 = 0;
            }
            else
            {
              unsigned int v151 = &v220[16 * v165 + 2 * v166];
              int64x2_t v152 = v151[1];
              int64x2_t v153 = v151[4];
              int64x2_t v154 = v151[5];
              int64x2_t v155 = vzip1q_s64(*v151, v153);
              int64x2_t v156 = vzip2q_s64(*v151, v153);
              int64x2_t v157 = vzip1q_s64(v152, v154);
              int64x2_t v158 = vzip2q_s64(v152, v154);
              int64x2_t v159 = v151[8];
              int64x2_t v160 = v151[9];
              v151 += 12;
              int64x2_t v161 = v151[1];
              int64x2_t v162 = vzip1q_s64(v159, *v151);
              int64x2_t v163 = vzip2q_s64(v159, *v151);
              *int v147 = v155;
              v147[1] = v156;
              v147[2] = v162;
              v147[3] = v163;
              v147[4] = v157;
              v147[5] = v158;
              v147[6] = vzip1q_s64(v160, v161);
              v147[7] = vzip2q_s64(v160, v161);
              v147 += 8;
              char v164 = 127;
            }
            *v148++ = v164;
            v146 += 2;
          }
          while (v146 != 16);
          int v77 = v188;
          if (v207) {
            goto LABEL_158;
          }
LABEL_27:
          BOOL v21 = v35++ == v196 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v322 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v239 = a8;
  unsigned int v224 = a8 + a10 - 1;
  uint64_t v240 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v223 = v224 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v234 = 0;
LABEL_32:
      unsigned int v231 = v27 - 4;
      unsigned int v228 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v221 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v234 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v234 = 0;
  unsigned int v221 = 0;
  unsigned int v228 = 0;
  unsigned int v231 = 0;
LABEL_33:
  if (v20 <= v223)
  {
    unsigned int v233 = a7 + a9 - 1;
    unsigned int v220 = a7 >> 4;
    if (a7 >> 4 <= v233 >> 4)
    {
      unsigned int v242 = v18 >> 4;
      unsigned int v219 = v19 >> 4;
      int v241 = (v18 & 0xF) + 1;
      int v218 = (v19 & 0xF) + 1;
      int v217 = ~(-1 << v228);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v229 = v35.i32[0] | v35.i32[1];
      BOOL v226 = v35.i32[1] != 0;
      int8x8_t v227 = v35;
      BOOL v225 = v35.i32[0] != 0;
      unsigned int v232 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v239) {
          int v37 = v239;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v224 < v36) {
          unsigned int v36 = v224;
        }
        int v230 = v37 - 16 * v20;
        int v238 = v36 - v37 + 1;
        unsigned int v38 = v220;
        int v39 = v218;
        if (v20 != v219) {
          int v39 = 16;
        }
        unsigned int v245 = v39;
        int v40 = v20 & v217;
        uint64_t v237 = a3 + (v37 - v239) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v233 < v42) {
            unsigned int v42 = v233;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v242) {
            unsigned int v45 = v241;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v239 && v41 >= a7)
          {
            int v47 = v241;
            if (v38 != v242) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v238 != v245;
          }
          if (v234)
          {
            if (v231 | v228)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v231 != 0;
              BOOL v53 = v228 != 0;
              unsigned int v54 = v231;
              unsigned int v55 = v228;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v231) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v231) + (v20 >> v228) * v221) + (v50 << 10);
          }
          else
          {
            if (v229)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v226;
              BOOL v60 = v225;
              __int32 v61 = v227.i32[1];
              __int32 v62 = v227.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 10;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v237 + 4 * v75;
          uint64_t v79 = (int64x2_t *)(a2 + v63);
          if (v245 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          int16x4_t v243 = v79;
          if (v244)
          {
            long long v81 = (int64x2_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            uint64_t v82 = (char *)(a4 + 8 * v71);
            int v83 = v44;
            char v84 = v45;
            memcpy(__dst, v79, sizeof(__dst));
            unsigned int v41 = 16 * v38;
            LOBYTE(v45) = v84;
            int v44 = v83;
            int v77 = v82;
            int v40 = v20 & v217;
            uint64_t result = v240;
          }
          else
          {
            long long v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v245);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int16x4_t v247 = v81;
          unsigned __int8 v255 = v45;
          unsigned __int8 v256 = v245;
          unsigned int v251 = v230;
          unsigned int v252 = v43 - v41;
          int16x4_t v248 = v77;
          unint64_t v249 = v78;
          uint64_t v250 = a11;
          unsigned int v253 = v238;
          unsigned int v254 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v232;
            unsigned int v85 = v38 + 1;
            goto LABEL_218;
          }
          unsigned int v86 = *v77;
          if (v86 == 127)
          {
            int64x2_t v89 = *v81;
            int64x2_t v90 = v81[1];
            int64x2_t v91 = v81[2];
            int64x2_t v92 = v81[3];
            int64x2_t v93 = v81[4];
            int64x2_t v94 = v81[5];
            int64x2_t v95 = v81[6];
            int64x2_t v96 = v81[7];
            int64x2_t v258 = vzip1q_s64(*v81, v90);
            int64x2_t v259 = vzip1q_s64(v93, v94);
            int64x2_t v262 = vzip2q_s64(v89, v90);
            int64x2_t v263 = vzip2q_s64(v93, v94);
            int64x2_t v266 = vzip1q_s64(v91, v92);
            int64x2_t v267 = vzip1q_s64(v95, v96);
            int64x2_t v270 = vzip2q_s64(v91, v92);
            int64x2_t v271 = vzip2q_s64(v95, v96);
            uint64_t v87 = 128;
          }
          else if (v86 == 3)
          {
            float32x4_t v88 = vld1q_dup_f32((const float *)v81->i32);
            int64x2_t v258 = (int64x2_t)v88;
            int64x2_t v259 = (int64x2_t)v88;
            int64x2_t v262 = (int64x2_t)v88;
            int64x2_t v263 = (int64x2_t)v88;
            int64x2_t v266 = (int64x2_t)v88;
            int64x2_t v267 = (int64x2_t)v88;
            int64x2_t v270 = (int64x2_t)v88;
            int64x2_t v271 = (int64x2_t)v88;
            uint64_t v87 = 4;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 64, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int64x2_t v259 = 0u;
            int64x2_t v258 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v266 = 0u;
            int64x2_t v267 = 0u;
            int64x2_t v270 = 0u;
            int64x2_t v271 = 0u;
          }
          uint64_t v97 = (uint64_t)v81->i64 + v87;
          unsigned int v98 = v77[1];
          if (v98 == 127)
          {
            int64x2_t v101 = *(int64x2_t *)v97;
            int64x2_t v102 = *(int64x2_t *)(v97 + 16);
            int64x2_t v103 = *(int64x2_t *)(v97 + 32);
            int64x2_t v104 = *(int64x2_t *)(v97 + 48);
            int64x2_t v105 = *(int64x2_t *)(v97 + 64);
            int64x2_t v106 = *(int64x2_t *)(v97 + 80);
            int64x2_t v107 = *(int64x2_t *)(v97 + 96);
            int64x2_t v108 = *(int64x2_t *)(v97 + 112);
            int64x2_t v274 = vzip1q_s64(*(int64x2_t *)v97, v102);
            int64x2_t v275 = vzip1q_s64(v105, v106);
            int64x2_t v278 = vzip2q_s64(v101, v102);
            int64x2_t v279 = vzip2q_s64(v105, v106);
            int64x2_t v282 = vzip1q_s64(v103, v104);
            int64x2_t v283 = vzip1q_s64(v107, v108);
            int64x2_t v286 = vzip2q_s64(v103, v104);
            int64x2_t v287 = vzip2q_s64(v107, v108);
            uint64_t v99 = 128;
            unsigned int v85 = v38 + 1;
          }
          else
          {
            unsigned int v85 = v38 + 1;
            if (v98 == 3)
            {
              float32x4_t v100 = vld1q_dup_f32((const float *)v97);
              int64x2_t v274 = (int64x2_t)v100;
              int64x2_t v275 = (int64x2_t)v100;
              int64x2_t v278 = (int64x2_t)v100;
              int64x2_t v279 = (int64x2_t)v100;
              int64x2_t v282 = (int64x2_t)v100;
              int64x2_t v283 = (int64x2_t)v100;
              int64x2_t v286 = (int64x2_t)v100;
              int64x2_t v287 = (int64x2_t)v100;
              uint64_t v99 = 4;
            }
            else if (v77[1])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 64, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int64x2_t v274 = 0u;
              int64x2_t v275 = 0u;
              int64x2_t v278 = 0u;
              int64x2_t v279 = 0u;
              int64x2_t v282 = 0u;
              int64x2_t v283 = 0u;
              int64x2_t v286 = 0u;
              int64x2_t v287 = 0u;
            }
          }
          uint64_t v109 = v97 + v99;
          unsigned int v110 = v77[2];
          if (v110 == 127)
          {
            int64x2_t v113 = *(int64x2_t *)v109;
            int64x2_t v114 = *(int64x2_t *)(v109 + 16);
            int64x2_t v115 = *(int64x2_t *)(v109 + 32);
            int64x2_t v116 = *(int64x2_t *)(v109 + 48);
            int64x2_t v117 = *(int64x2_t *)(v109 + 64);
            int64x2_t v118 = *(int64x2_t *)(v109 + 80);
            int64x2_t v119 = *(int64x2_t *)(v109 + 96);
            int64x2_t v120 = *(int64x2_t *)(v109 + 112);
            int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v109, v114);
            int64x2_t v261 = vzip1q_s64(v117, v118);
            int64x2_t v264 = vzip2q_s64(v113, v114);
            int64x2_t v265 = vzip2q_s64(v117, v118);
            int64x2_t v268 = vzip1q_s64(v115, v116);
            int64x2_t v269 = vzip1q_s64(v119, v120);
            int64x2_t v272 = vzip2q_s64(v115, v116);
            int64x2_t v273 = vzip2q_s64(v119, v120);
            uint64_t v111 = 128;
          }
          else if (v110 == 3)
          {
            float32x4_t v112 = vld1q_dup_f32((const float *)v109);
            int64x2_t v260 = (int64x2_t)v112;
            int64x2_t v261 = (int64x2_t)v112;
            int64x2_t v264 = (int64x2_t)v112;
            int64x2_t v265 = (int64x2_t)v112;
            int64x2_t v268 = (int64x2_t)v112;
            int64x2_t v269 = (int64x2_t)v112;
            int64x2_t v272 = (int64x2_t)v112;
            int64x2_t v273 = (int64x2_t)v112;
            uint64_t v111 = 4;
          }
          else if (v77[2])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int64x2_t v260 = 0u;
            int64x2_t v261 = 0u;
            int64x2_t v264 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v268 = 0u;
            int64x2_t v269 = 0u;
            int64x2_t v272 = 0u;
            int64x2_t v273 = 0u;
          }
          uint64_t v121 = v109 + v111;
          unsigned int v122 = v77[3];
          if (v122 == 127)
          {
            int64x2_t v125 = *(int64x2_t *)v121;
            int64x2_t v126 = *(int64x2_t *)(v121 + 16);
            int64x2_t v127 = *(int64x2_t *)(v121 + 32);
            int64x2_t v128 = *(int64x2_t *)(v121 + 48);
            int64x2_t v129 = *(int64x2_t *)(v121 + 64);
            int64x2_t v130 = *(int64x2_t *)(v121 + 80);
            int64x2_t v131 = *(int64x2_t *)(v121 + 96);
            int64x2_t v132 = *(int64x2_t *)(v121 + 112);
            int64x2_t v276 = vzip1q_s64(*(int64x2_t *)v121, v126);
            int64x2_t v277 = vzip1q_s64(v129, v130);
            int64x2_t v280 = vzip2q_s64(v125, v126);
            int64x2_t v281 = vzip2q_s64(v129, v130);
            int64x2_t v284 = vzip1q_s64(v127, v128);
            int64x2_t v285 = vzip1q_s64(v131, v132);
            int64x2_t v288 = vzip2q_s64(v127, v128);
            int64x2_t v289 = vzip2q_s64(v131, v132);
            uint64_t v123 = 128;
          }
          else if (v122 == 3)
          {
            float32x4_t v124 = vld1q_dup_f32((const float *)v121);
            int64x2_t v276 = (int64x2_t)v124;
            int64x2_t v277 = (int64x2_t)v124;
            int64x2_t v280 = (int64x2_t)v124;
            int64x2_t v281 = (int64x2_t)v124;
            int64x2_t v284 = (int64x2_t)v124;
            int64x2_t v285 = (int64x2_t)v124;
            int64x2_t v288 = (int64x2_t)v124;
            int64x2_t v289 = (int64x2_t)v124;
            uint64_t v123 = 4;
          }
          else if (v77[3])
          {
            uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v276, 64, v121, v122);
          }
          else
          {
            uint64_t v123 = 0;
            int64x2_t v276 = 0u;
            int64x2_t v277 = 0u;
            int64x2_t v280 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v284 = 0u;
            int64x2_t v285 = 0u;
            int64x2_t v288 = 0u;
            int64x2_t v289 = 0u;
          }
          uint64_t v133 = v121 + v123;
          unsigned int v134 = v77[4];
          if (v134 == 127)
          {
            int64x2_t v137 = *(int64x2_t *)v133;
            int64x2_t v138 = *(int64x2_t *)(v133 + 16);
            int64x2_t v139 = *(int64x2_t *)(v133 + 32);
            int64x2_t v140 = *(int64x2_t *)(v133 + 48);
            int64x2_t v141 = *(int64x2_t *)(v133 + 64);
            int64x2_t v142 = *(int64x2_t *)(v133 + 80);
            int64x2_t v143 = *(int64x2_t *)(v133 + 96);
            int64x2_t v144 = *(int64x2_t *)(v133 + 112);
            int64x2_t v290 = vzip1q_s64(*(int64x2_t *)v133, v138);
            int64x2_t v291 = vzip1q_s64(v141, v142);
            int64x2_t v294 = vzip2q_s64(v137, v138);
            int64x2_t v295 = vzip2q_s64(v141, v142);
            int64x2_t v298 = vzip1q_s64(v139, v140);
            int64x2_t v299 = vzip1q_s64(v143, v144);
            int64x2_t v302 = vzip2q_s64(v139, v140);
            int64x2_t v303 = vzip2q_s64(v143, v144);
            uint64_t v135 = 128;
          }
          else if (v134 == 3)
          {
            float32x4_t v136 = vld1q_dup_f32((const float *)v133);
            int64x2_t v290 = (int64x2_t)v136;
            int64x2_t v291 = (int64x2_t)v136;
            int64x2_t v294 = (int64x2_t)v136;
            int64x2_t v295 = (int64x2_t)v136;
            int64x2_t v298 = (int64x2_t)v136;
            int64x2_t v299 = (int64x2_t)v136;
            int64x2_t v302 = (int64x2_t)v136;
            int64x2_t v303 = (int64x2_t)v136;
            uint64_t v135 = 4;
          }
          else if (v77[4])
          {
            uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v290, 64, v133, v134);
          }
          else
          {
            uint64_t v135 = 0;
            int64x2_t v290 = 0u;
            int64x2_t v291 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v298 = 0u;
            int64x2_t v299 = 0u;
            int64x2_t v302 = 0u;
            int64x2_t v303 = 0u;
          }
          uint64_t v145 = v133 + v135;
          unsigned int v146 = v77[5];
          if (v146 == 127)
          {
            int64x2_t v149 = *(int64x2_t *)v145;
            int64x2_t v150 = *(int64x2_t *)(v145 + 16);
            int64x2_t v151 = *(int64x2_t *)(v145 + 32);
            int64x2_t v152 = *(int64x2_t *)(v145 + 48);
            int64x2_t v153 = *(int64x2_t *)(v145 + 64);
            int64x2_t v154 = *(int64x2_t *)(v145 + 80);
            int64x2_t v155 = *(int64x2_t *)(v145 + 96);
            int64x2_t v156 = *(int64x2_t *)(v145 + 112);
            int64x2_t v306 = vzip1q_s64(*(int64x2_t *)v145, v150);
            int64x2_t v307 = vzip1q_s64(v153, v154);
            int64x2_t v310 = vzip2q_s64(v149, v150);
            int64x2_t v311 = vzip2q_s64(v153, v154);
            int64x2_t v314 = vzip1q_s64(v151, v152);
            int64x2_t v315 = vzip1q_s64(v155, v156);
            int64x2_t v318 = vzip2q_s64(v151, v152);
            int64x2_t v319 = vzip2q_s64(v155, v156);
            uint64_t v147 = 128;
          }
          else if (v146 == 3)
          {
            float32x4_t v148 = vld1q_dup_f32((const float *)v145);
            int64x2_t v306 = (int64x2_t)v148;
            int64x2_t v307 = (int64x2_t)v148;
            int64x2_t v310 = (int64x2_t)v148;
            int64x2_t v311 = (int64x2_t)v148;
            int64x2_t v314 = (int64x2_t)v148;
            int64x2_t v315 = (int64x2_t)v148;
            int64x2_t v318 = (int64x2_t)v148;
            int64x2_t v319 = (int64x2_t)v148;
            uint64_t v147 = 4;
          }
          else if (v77[5])
          {
            uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 64, v145, v146);
          }
          else
          {
            uint64_t v147 = 0;
            int64x2_t v306 = 0u;
            int64x2_t v307 = 0u;
            int64x2_t v310 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v314 = 0u;
            int64x2_t v315 = 0u;
            int64x2_t v318 = 0u;
            int64x2_t v319 = 0u;
          }
          uint64_t v157 = v145 + v147;
          unsigned int v158 = v77[6];
          if (v158 == 127)
          {
            int64x2_t v161 = *(int64x2_t *)v157;
            int64x2_t v162 = *(int64x2_t *)(v157 + 16);
            int64x2_t v163 = *(int64x2_t *)(v157 + 32);
            int64x2_t v164 = *(int64x2_t *)(v157 + 48);
            int64x2_t v165 = *(int64x2_t *)(v157 + 64);
            int64x2_t v166 = *(int64x2_t *)(v157 + 80);
            int64x2_t v167 = *(int64x2_t *)(v157 + 96);
            int64x2_t v168 = *(int64x2_t *)(v157 + 112);
            int64x2_t v292 = vzip1q_s64(*(int64x2_t *)v157, v162);
            int64x2_t v293 = vzip1q_s64(v165, v166);
            int64x2_t v296 = vzip2q_s64(v161, v162);
            int64x2_t v297 = vzip2q_s64(v165, v166);
            int64x2_t v300 = vzip1q_s64(v163, v164);
            int64x2_t v301 = vzip1q_s64(v167, v168);
            int64x2_t v304 = vzip2q_s64(v163, v164);
            int64x2_t v305 = vzip2q_s64(v167, v168);
            uint64_t v159 = 128;
          }
          else if (v158 == 3)
          {
            float32x4_t v160 = vld1q_dup_f32((const float *)v157);
            int64x2_t v292 = (int64x2_t)v160;
            int64x2_t v293 = (int64x2_t)v160;
            int64x2_t v296 = (int64x2_t)v160;
            int64x2_t v297 = (int64x2_t)v160;
            int64x2_t v300 = (int64x2_t)v160;
            int64x2_t v301 = (int64x2_t)v160;
            int64x2_t v304 = (int64x2_t)v160;
            int64x2_t v305 = (int64x2_t)v160;
            uint64_t v159 = 4;
          }
          else if (v77[6])
          {
            uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v292, 64, v157, v158);
          }
          else
          {
            uint64_t v159 = 0;
            int64x2_t v292 = 0u;
            int64x2_t v293 = 0u;
            int64x2_t v296 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v300 = 0u;
            int64x2_t v301 = 0u;
            int64x2_t v304 = 0u;
            int64x2_t v305 = 0u;
          }
          uint64_t v169 = v157 + v159;
          unsigned int v170 = v77[7];
          if (v170 == 127)
          {
            unsigned int v171 = v81;
            int64x2_t v174 = *(int64x2_t *)v169;
            int64x2_t v175 = *(int64x2_t *)(v169 + 16);
            int64x2_t v176 = *(int64x2_t *)(v169 + 32);
            int64x2_t v177 = *(int64x2_t *)(v169 + 48);
            int64x2_t v178 = *(int64x2_t *)(v169 + 64);
            int64x2_t v179 = *(int64x2_t *)(v169 + 80);
            int64x2_t v180 = *(int64x2_t *)(v169 + 96);
            int64x2_t v181 = *(int64x2_t *)(v169 + 112);
            int64x2_t v308 = vzip1q_s64(*(int64x2_t *)v169, v175);
            int64x2_t v309 = vzip1q_s64(v178, v179);
            int64x2_t v312 = vzip2q_s64(v174, v175);
            int64x2_t v313 = vzip2q_s64(v178, v179);
            int64x2_t v316 = vzip1q_s64(v176, v177);
            int64x2_t v317 = vzip1q_s64(v180, v181);
            int64x2_t v320 = vzip2q_s64(v176, v177);
            int64x2_t v321 = vzip2q_s64(v180, v181);
            a7 = v232;
            uint64_t v172 = v253;
            if (!v253) {
              goto LABEL_217;
            }
          }
          else
          {
            a7 = v232;
            unsigned int v171 = v81;
            if (v170 == 3)
            {
              float32x4_t v173 = vld1q_dup_f32((const float *)v169);
              int64x2_t v308 = (int64x2_t)v173;
              int64x2_t v309 = (int64x2_t)v173;
              int64x2_t v312 = (int64x2_t)v173;
              int64x2_t v313 = (int64x2_t)v173;
              int64x2_t v316 = (int64x2_t)v173;
              int64x2_t v317 = (int64x2_t)v173;
              int64x2_t v320 = (int64x2_t)v173;
              int64x2_t v321 = (int64x2_t)v173;
              uint64_t v172 = v253;
              if (!v253) {
                goto LABEL_217;
              }
            }
            else if (v170)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v308, 64, v169, v170);
              uint64_t v172 = v253;
              if (!v253) {
                goto LABEL_217;
              }
            }
            else
            {
              int64x2_t v308 = 0u;
              int64x2_t v309 = 0u;
              int64x2_t v312 = 0u;
              int64x2_t v313 = 0u;
              int64x2_t v316 = 0u;
              int64x2_t v317 = 0u;
              int64x2_t v320 = 0u;
              int64x2_t v321 = 0u;
              uint64_t v172 = v253;
              if (!v253) {
                goto LABEL_217;
              }
            }
          }
          if (v254)
          {
            uint64_t v182 = 0;
            unint64_t v183 = (unint64_t)v251 << 6;
            uint64_t v184 = 4 * v252;
            unsigned int v185 = &v258.i8[v183 + v184];
            unint64_t v186 = v249;
            uint64_t v187 = v250;
            unint64_t v188 = 4 * v254;
            if (v188 <= 1) {
              unint64_t v189 = 1;
            }
            else {
              unint64_t v189 = 4 * v254;
            }
            unint64_t v190 = v183 + v184;
            BOOL v191 = &v258.i8[v183 + v184];
            if (v189) {
              BOOL v192 = (v189 - 1) >> 32 == 0;
            }
            else {
              BOOL v192 = 0;
            }
            uint64_t v193 = v189 & 0x3FFFFFFE0;
            uint64_t v194 = v189 & 0x3FFFFFFF8;
            char v196 = !v192 || v189 < 8;
            BOOL v197 = &v259.i8[v190];
            unsigned int v198 = (long long *)(v249 + 16);
            unsigned int v199 = v185;
            unint64_t v200 = v249;
            do
            {
              int v201 = (char *)(v186 + v187 * v182);
              unsigned int v202 = &v185[64 * v182];
              if ((unint64_t)(&v191[64 * v182] - v201) < 0x20) {
                char v203 = 1;
              }
              else {
                char v203 = v196;
              }
              if (v203)
              {
                int v204 = 0;
                goto LABEL_214;
              }
              if (v189 >= 0x20)
              {
                unsigned int v206 = v198;
                int v207 = v197;
                uint64_t v208 = v189 & 0x3FFFFFFE0;
                do
                {
                  long long v209 = *v206;
                  *((_OWORD *)v207 - 1) = *(v206 - 1);
                  *(_OWORD *)int v207 = v209;
                  v207 += 32;
                  v206 += 2;
                  v208 -= 32;
                }
                while (v208);
                if (v189 == v193) {
                  goto LABEL_197;
                }
                uint64_t v205 = v189 & 0x3FFFFFFE0;
                if ((v189 & 0x18) == 0)
                {
                  v201 += v193;
                  v202 += v193;
                  int v204 = v189 & 0xFFFFFFE0;
                  goto LABEL_214;
                }
              }
              else
              {
                uint64_t v205 = 0;
              }
              v202 += v194;
              uint64_t v210 = v205 - v194;
              uint64_t v211 = (uint64_t *)(v200 + v205);
              uint64_t v212 = &v199[v205];
              do
              {
                uint64_t v213 = *v211++;
                *(void *)uint64_t v212 = v213;
                v212 += 8;
                v210 += 8;
              }
              while (v210);
              if (v189 == v194) {
                goto LABEL_197;
              }
              v201 += v194;
              int v204 = v189 & 0xFFFFFFF8;
LABEL_214:
              unsigned int v214 = v204 + 1;
              do
              {
                char v215 = *v201++;
                *v202++ = v215;
              }
              while (v188 > v214++);
LABEL_197:
              ++v182;
              v197 += 64;
              unsigned int v198 = (long long *)((char *)v198 + v187);
              v200 += v187;
              v199 += 64;
            }
            while (v182 != v172);
          }
LABEL_217:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v258, 64, (unint64_t)v247, v248, v255, v256);
          long long v81 = v171;
LABEL_218:
          if (v244) {
            memcpy(v243, v81, 0x400uLL);
          }
          BOOL v21 = v38 == v233 >> 4;
          unsigned int v38 = v85;
          uint64_t result = v240;
        }
        while (!v21);
        BOOL v21 = v20++ == v223;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v373 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v292 = a8;
  unsigned int v271 = a8 + a10 - 1;
  uint64_t v293 = a1;
  if (*(void *)(a1 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 4;
  unsigned int v270 = v271 >> 4;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v296 = v23;
  uint64_t result = a1;
  unsigned int v25 = a7;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v17);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v284 = 0;
LABEL_32:
      unsigned int v281 = v27 - 4;
      unsigned int v277 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v268 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v284 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v284 = 0;
  unsigned int v268 = 0;
  unsigned int v277 = 0;
  unsigned int v281 = 0;
LABEL_33:
  if (v19 <= v270)
  {
    unsigned int v283 = a7 + a9 - 1;
    if (a7 >> 4 <= v283 >> 4)
    {
      unsigned int v295 = v17 >> 4;
      unsigned int v267 = v18 >> 4;
      int v294 = (v17 & 0xF) + 1;
      int v266 = (v18 & 0xF) + 1;
      int v265 = ~(-1 << v277);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v278 = v35.i32[0] | v35.i32[1];
      BOOL v275 = v35.i32[1] != 0;
      int8x8_t v276 = v35;
      BOOL v274 = v35.i32[0] != 0;
      uint64_t v36 = a11;
      do
      {
        unsigned int v37 = (16 * v19) | 0xF;
        if (16 * v19 <= v292) {
          int v38 = v292;
        }
        else {
          int v38 = 16 * v19;
        }
        if (v271 < v37) {
          unsigned int v37 = v271;
        }
        unsigned int v291 = 16 * v19;
        int v280 = v38 - 16 * v19;
        int v290 = v37 - v38 + 1;
        unsigned int v39 = a7 >> 4;
        if (v19 == v267) {
          unsigned int v40 = v266;
        }
        else {
          unsigned int v40 = 16;
        }
        int v279 = (v19 >> v277) * v268;
        int v41 = v19 & v265;
        uint64_t v288 = a3 + (v38 - v292) * v36;
        int v289 = v19 & v265;
        unsigned int v273 = v19;
        unsigned int v272 = v40;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v25) {
            int v44 = v25;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v283 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v295) {
            unsigned int v46 = v294;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (v291 >= v292 && v42 >= v25)
          {
            int v48 = v294;
            if (v39 != v295) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v290 != v40;
          }
          if (v284)
          {
            if (v281 | v277)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v281 != 0;
              BOOL v54 = v277 != 0;
              unsigned int v55 = v281;
              unsigned int v56 = v277;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v281) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v281) + v279) + (v51 << 10);
          }
          else
          {
            if (v278)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v275;
              BOOL v61 = v274;
              __int32 v62 = v276.i32[1];
              __int32 v63 = v276.i32[0];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 15;
          if (v69 < 0x20)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_110:
              uint64_t v72 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 4) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_110;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v19) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_111:
          int v76 = v46 < 0x10 || v47;
          int v77 = (char *)(a4 + 8 * v72);
          uint64_t v78 = v288 + 4 * (v44 - v25);
          uint64_t v79 = (int64x2_t *)(a2 + v64);
          if (v40 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v296)
          {
            if (v80)
            {
              long long v81 = v79;
              uint64_t v82 = v36;
              BOOL v83 = v47;
              int v84 = v44;
              memcpy(__dst, v79, sizeof(__dst));
              int v44 = v84;
              unsigned int v42 = 16 * v39;
              unsigned int v40 = v272;
              unsigned int v19 = v273;
              BOOL v47 = v83;
              uint64_t v36 = v82;
              unsigned int v85 = (int64x2_t *)__dst;
              uint64_t v79 = v81;
              uint64_t result = v293;
LABEL_121:
              int64x2_t v282 = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v298 = v85;
              unsigned __int8 v306 = v46;
              unsigned __int8 v307 = v40;
              unsigned int v302 = v280;
              unsigned int v303 = v44 - v42;
              int64x2_t v299 = v77;
              uint64_t v300 = v78;
              uint64_t v301 = v36;
              unsigned int v304 = v290;
              unsigned int v305 = v45;
              if (v47)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v293;
                unsigned int v25 = a7;
                int v41 = v289;
                goto LABEL_123;
              }
              unsigned int v111 = *v77;
              if (v111 == 127)
              {
                int64x2_t v114 = *v85;
                int64x2_t v115 = v85[1];
                int64x2_t v116 = v85[2];
                int64x2_t v117 = v85[3];
                int64x2_t v118 = v85[4];
                int64x2_t v119 = v85[5];
                int64x2_t v120 = v85[6];
                int64x2_t v121 = v85[7];
                int64x2_t v309 = vzip1q_s64(*v85, v115);
                int64x2_t v310 = vzip1q_s64(v118, v119);
                int64x2_t v313 = vzip2q_s64(v114, v115);
                int64x2_t v314 = vzip2q_s64(v118, v119);
                int64x2_t v317 = vzip1q_s64(v116, v117);
                int64x2_t v318 = vzip1q_s64(v120, v121);
                int64x2_t v321 = vzip2q_s64(v116, v117);
                int64x2_t v322 = vzip2q_s64(v120, v121);
                uint64_t v112 = 128;
              }
              else if (v111 == 3)
              {
                float32x4_t v113 = vld1q_dup_f32((const float *)v85->i32);
                int64x2_t v309 = (int64x2_t)v113;
                int64x2_t v310 = (int64x2_t)v113;
                int64x2_t v313 = (int64x2_t)v113;
                int64x2_t v314 = (int64x2_t)v113;
                int64x2_t v317 = (int64x2_t)v113;
                int64x2_t v318 = (int64x2_t)v113;
                int64x2_t v321 = (int64x2_t)v113;
                int64x2_t v322 = (int64x2_t)v113;
                uint64_t v112 = 4;
              }
              else if (*v77)
              {
                uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v309, 64, (uint64_t)v85, v111);
              }
              else
              {
                uint64_t v112 = 0;
                int64x2_t v310 = 0u;
                int64x2_t v309 = 0u;
                int64x2_t v313 = 0u;
                int64x2_t v314 = 0u;
                int64x2_t v317 = 0u;
                int64x2_t v318 = 0u;
                int64x2_t v321 = 0u;
                int64x2_t v322 = 0u;
              }
              uint64_t v122 = (uint64_t)v85->i64 + v112;
              unsigned int v123 = v77[1];
              if (v123 == 127)
              {
                int64x2_t v126 = *(int64x2_t *)v122;
                int64x2_t v127 = *(int64x2_t *)(v122 + 16);
                int64x2_t v128 = *(int64x2_t *)(v122 + 32);
                int64x2_t v129 = *(int64x2_t *)(v122 + 48);
                int64x2_t v130 = *(int64x2_t *)(v122 + 64);
                int64x2_t v131 = *(int64x2_t *)(v122 + 80);
                int64x2_t v132 = *(int64x2_t *)(v122 + 96);
                int64x2_t v133 = *(int64x2_t *)(v122 + 112);
                int64x2_t v325 = vzip1q_s64(*(int64x2_t *)v122, v127);
                int64x2_t v326 = vzip1q_s64(v130, v131);
                int64x2_t v329 = vzip2q_s64(v126, v127);
                int64x2_t v330 = vzip2q_s64(v130, v131);
                int64x2_t v333 = vzip1q_s64(v128, v129);
                int64x2_t v334 = vzip1q_s64(v132, v133);
                int64x2_t v337 = vzip2q_s64(v128, v129);
                int64x2_t v338 = vzip2q_s64(v132, v133);
                uint64_t v124 = 128;
              }
              else if (v123 == 3)
              {
                float32x4_t v125 = vld1q_dup_f32((const float *)v122);
                int64x2_t v325 = (int64x2_t)v125;
                int64x2_t v326 = (int64x2_t)v125;
                int64x2_t v329 = (int64x2_t)v125;
                int64x2_t v330 = (int64x2_t)v125;
                int64x2_t v333 = (int64x2_t)v125;
                int64x2_t v334 = (int64x2_t)v125;
                int64x2_t v337 = (int64x2_t)v125;
                int64x2_t v338 = (int64x2_t)v125;
                uint64_t v124 = 4;
              }
              else if (v77[1])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v325, 64, v122, v123);
              }
              else
              {
                uint64_t v124 = 0;
                int64x2_t v325 = 0u;
                int64x2_t v326 = 0u;
                int64x2_t v329 = 0u;
                int64x2_t v330 = 0u;
                int64x2_t v333 = 0u;
                int64x2_t v334 = 0u;
                int64x2_t v337 = 0u;
                int64x2_t v338 = 0u;
              }
              uint64_t v134 = v122 + v124;
              unsigned int v135 = v77[2];
              if (v135 == 127)
              {
                int64x2_t v138 = *(int64x2_t *)v134;
                int64x2_t v139 = *(int64x2_t *)(v134 + 16);
                int64x2_t v140 = *(int64x2_t *)(v134 + 32);
                int64x2_t v141 = *(int64x2_t *)(v134 + 48);
                int64x2_t v142 = *(int64x2_t *)(v134 + 64);
                int64x2_t v143 = *(int64x2_t *)(v134 + 80);
                int64x2_t v144 = *(int64x2_t *)(v134 + 96);
                int64x2_t v145 = *(int64x2_t *)(v134 + 112);
                int64x2_t v311 = vzip1q_s64(*(int64x2_t *)v134, v139);
                int64x2_t v312 = vzip1q_s64(v142, v143);
                int64x2_t v315 = vzip2q_s64(v138, v139);
                int64x2_t v316 = vzip2q_s64(v142, v143);
                int64x2_t v319 = vzip1q_s64(v140, v141);
                int64x2_t v320 = vzip1q_s64(v144, v145);
                int64x2_t v323 = vzip2q_s64(v140, v141);
                int64x2_t v324 = vzip2q_s64(v144, v145);
                uint64_t v136 = 128;
              }
              else if (v135 == 3)
              {
                float32x4_t v137 = vld1q_dup_f32((const float *)v134);
                int64x2_t v311 = (int64x2_t)v137;
                int64x2_t v312 = (int64x2_t)v137;
                int64x2_t v315 = (int64x2_t)v137;
                int64x2_t v316 = (int64x2_t)v137;
                int64x2_t v319 = (int64x2_t)v137;
                int64x2_t v320 = (int64x2_t)v137;
                int64x2_t v323 = (int64x2_t)v137;
                int64x2_t v324 = (int64x2_t)v137;
                uint64_t v136 = 4;
              }
              else if (v77[2])
              {
                uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v311, 64, v134, v135);
              }
              else
              {
                uint64_t v136 = 0;
                int64x2_t v311 = 0u;
                int64x2_t v312 = 0u;
                int64x2_t v315 = 0u;
                int64x2_t v316 = 0u;
                int64x2_t v319 = 0u;
                int64x2_t v320 = 0u;
                int64x2_t v323 = 0u;
                int64x2_t v324 = 0u;
              }
              uint64_t v146 = v134 + v136;
              unsigned int v147 = v77[3];
              if (v147 == 127)
              {
                int64x2_t v150 = *(int64x2_t *)v146;
                int64x2_t v151 = *(int64x2_t *)(v146 + 16);
                int64x2_t v152 = *(int64x2_t *)(v146 + 32);
                int64x2_t v153 = *(int64x2_t *)(v146 + 48);
                int64x2_t v154 = *(int64x2_t *)(v146 + 64);
                int64x2_t v155 = *(int64x2_t *)(v146 + 80);
                int64x2_t v156 = *(int64x2_t *)(v146 + 96);
                int64x2_t v157 = *(int64x2_t *)(v146 + 112);
                int64x2_t v327 = vzip1q_s64(*(int64x2_t *)v146, v151);
                int64x2_t v328 = vzip1q_s64(v154, v155);
                int64x2_t v331 = vzip2q_s64(v150, v151);
                int64x2_t v332 = vzip2q_s64(v154, v155);
                int64x2_t v335 = vzip1q_s64(v152, v153);
                int64x2_t v336 = vzip1q_s64(v156, v157);
                int64x2_t v339 = vzip2q_s64(v152, v153);
                int64x2_t v340 = vzip2q_s64(v156, v157);
                uint64_t v148 = 128;
              }
              else if (v147 == 3)
              {
                float32x4_t v149 = vld1q_dup_f32((const float *)v146);
                int64x2_t v327 = (int64x2_t)v149;
                int64x2_t v328 = (int64x2_t)v149;
                int64x2_t v331 = (int64x2_t)v149;
                int64x2_t v332 = (int64x2_t)v149;
                int64x2_t v335 = (int64x2_t)v149;
                int64x2_t v336 = (int64x2_t)v149;
                int64x2_t v339 = (int64x2_t)v149;
                int64x2_t v340 = (int64x2_t)v149;
                uint64_t v148 = 4;
              }
              else if (v77[3])
              {
                uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v327, 64, v146, v147);
              }
              else
              {
                uint64_t v148 = 0;
                int64x2_t v327 = 0u;
                int64x2_t v328 = 0u;
                int64x2_t v331 = 0u;
                int64x2_t v332 = 0u;
                int64x2_t v335 = 0u;
                int64x2_t v336 = 0u;
                int64x2_t v339 = 0u;
                int64x2_t v340 = 0u;
              }
              uint64_t v158 = v146 + v148;
              unsigned int v159 = v77[4];
              if (v159 == 127)
              {
                int64x2_t v162 = *(int64x2_t *)v158;
                int64x2_t v163 = *(int64x2_t *)(v158 + 16);
                int64x2_t v164 = *(int64x2_t *)(v158 + 32);
                int64x2_t v165 = *(int64x2_t *)(v158 + 48);
                int64x2_t v166 = *(int64x2_t *)(v158 + 64);
                int64x2_t v167 = *(int64x2_t *)(v158 + 80);
                int64x2_t v168 = *(int64x2_t *)(v158 + 96);
                int64x2_t v169 = *(int64x2_t *)(v158 + 112);
                int64x2_t v341 = vzip1q_s64(*(int64x2_t *)v158, v163);
                int64x2_t v342 = vzip1q_s64(v166, v167);
                int64x2_t v345 = vzip2q_s64(v162, v163);
                int64x2_t v346 = vzip2q_s64(v166, v167);
                int64x2_t v349 = vzip1q_s64(v164, v165);
                int64x2_t v350 = vzip1q_s64(v168, v169);
                int64x2_t v353 = vzip2q_s64(v164, v165);
                int64x2_t v354 = vzip2q_s64(v168, v169);
                uint64_t v160 = 128;
              }
              else if (v159 == 3)
              {
                float32x4_t v161 = vld1q_dup_f32((const float *)v158);
                int64x2_t v341 = (int64x2_t)v161;
                int64x2_t v342 = (int64x2_t)v161;
                int64x2_t v345 = (int64x2_t)v161;
                int64x2_t v346 = (int64x2_t)v161;
                int64x2_t v349 = (int64x2_t)v161;
                int64x2_t v350 = (int64x2_t)v161;
                int64x2_t v353 = (int64x2_t)v161;
                int64x2_t v354 = (int64x2_t)v161;
                uint64_t v160 = 4;
              }
              else if (v77[4])
              {
                uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v341, 64, v158, v159);
              }
              else
              {
                uint64_t v160 = 0;
                int64x2_t v341 = 0u;
                int64x2_t v342 = 0u;
                int64x2_t v345 = 0u;
                int64x2_t v346 = 0u;
                int64x2_t v349 = 0u;
                int64x2_t v350 = 0u;
                int64x2_t v353 = 0u;
                int64x2_t v354 = 0u;
              }
              uint64_t v170 = v158 + v160;
              unsigned int v171 = v77[5];
              if (v171 == 127)
              {
                int64x2_t v174 = *(int64x2_t *)v170;
                int64x2_t v175 = *(int64x2_t *)(v170 + 16);
                int64x2_t v176 = *(int64x2_t *)(v170 + 32);
                int64x2_t v177 = *(int64x2_t *)(v170 + 48);
                int64x2_t v178 = *(int64x2_t *)(v170 + 64);
                int64x2_t v179 = *(int64x2_t *)(v170 + 80);
                int64x2_t v180 = *(int64x2_t *)(v170 + 96);
                int64x2_t v181 = *(int64x2_t *)(v170 + 112);
                int64x2_t v357 = vzip1q_s64(*(int64x2_t *)v170, v175);
                int64x2_t v358 = vzip1q_s64(v178, v179);
                int64x2_t v361 = vzip2q_s64(v174, v175);
                int64x2_t v362 = vzip2q_s64(v178, v179);
                int64x2_t v365 = vzip1q_s64(v176, v177);
                int64x2_t v366 = vzip1q_s64(v180, v181);
                int64x2_t v369 = vzip2q_s64(v176, v177);
                int64x2_t v370 = vzip2q_s64(v180, v181);
                uint64_t v172 = 128;
              }
              else if (v171 == 3)
              {
                float32x4_t v173 = vld1q_dup_f32((const float *)v170);
                int64x2_t v357 = (int64x2_t)v173;
                int64x2_t v358 = (int64x2_t)v173;
                int64x2_t v361 = (int64x2_t)v173;
                int64x2_t v362 = (int64x2_t)v173;
                int64x2_t v365 = (int64x2_t)v173;
                int64x2_t v366 = (int64x2_t)v173;
                int64x2_t v369 = (int64x2_t)v173;
                int64x2_t v370 = (int64x2_t)v173;
                uint64_t v172 = 4;
              }
              else if (v77[5])
              {
                uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v357, 64, v170, v171);
              }
              else
              {
                uint64_t v172 = 0;
                int64x2_t v357 = 0u;
                int64x2_t v358 = 0u;
                int64x2_t v361 = 0u;
                int64x2_t v362 = 0u;
                int64x2_t v365 = 0u;
                int64x2_t v366 = 0u;
                int64x2_t v369 = 0u;
                int64x2_t v370 = 0u;
              }
              uint64_t v182 = v170 + v172;
              unsigned int v183 = v77[6];
              if (v183 == 127)
              {
                int64x2_t v186 = *(int64x2_t *)v182;
                int64x2_t v187 = *(int64x2_t *)(v182 + 16);
                int64x2_t v188 = *(int64x2_t *)(v182 + 32);
                int64x2_t v189 = *(int64x2_t *)(v182 + 48);
                int64x2_t v190 = *(int64x2_t *)(v182 + 64);
                int64x2_t v191 = *(int64x2_t *)(v182 + 80);
                int64x2_t v192 = *(int64x2_t *)(v182 + 96);
                int64x2_t v193 = *(int64x2_t *)(v182 + 112);
                int64x2_t v343 = vzip1q_s64(*(int64x2_t *)v182, v187);
                int64x2_t v344 = vzip1q_s64(v190, v191);
                int64x2_t v347 = vzip2q_s64(v186, v187);
                int64x2_t v348 = vzip2q_s64(v190, v191);
                int64x2_t v351 = vzip1q_s64(v188, v189);
                int64x2_t v352 = vzip1q_s64(v192, v193);
                int64x2_t v355 = vzip2q_s64(v188, v189);
                int64x2_t v356 = vzip2q_s64(v192, v193);
                uint64_t v184 = 128;
              }
              else if (v183 == 3)
              {
                float32x4_t v185 = vld1q_dup_f32((const float *)v182);
                int64x2_t v343 = (int64x2_t)v185;
                int64x2_t v344 = (int64x2_t)v185;
                int64x2_t v347 = (int64x2_t)v185;
                int64x2_t v348 = (int64x2_t)v185;
                int64x2_t v351 = (int64x2_t)v185;
                int64x2_t v352 = (int64x2_t)v185;
                int64x2_t v355 = (int64x2_t)v185;
                int64x2_t v356 = (int64x2_t)v185;
                uint64_t v184 = 4;
              }
              else if (v77[6])
              {
                uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v343, 64, v182, v183);
              }
              else
              {
                uint64_t v184 = 0;
                int64x2_t v343 = 0u;
                int64x2_t v344 = 0u;
                int64x2_t v347 = 0u;
                int64x2_t v348 = 0u;
                int64x2_t v351 = 0u;
                int64x2_t v352 = 0u;
                int64x2_t v355 = 0u;
                int64x2_t v356 = 0u;
              }
              uint64_t v194 = v182 + v184;
              unsigned int v195 = v77[7];
              if (v195 == 127)
              {
                int64x2_t v198 = *(int64x2_t *)v194;
                int64x2_t v199 = *(int64x2_t *)(v194 + 16);
                int64x2_t v200 = *(int64x2_t *)(v194 + 32);
                int64x2_t v201 = *(int64x2_t *)(v194 + 48);
                int64x2_t v202 = *(int64x2_t *)(v194 + 64);
                int64x2_t v203 = *(int64x2_t *)(v194 + 80);
                int64x2_t v204 = *(int64x2_t *)(v194 + 96);
                int64x2_t v205 = *(int64x2_t *)(v194 + 112);
                int64x2_t v359 = vzip1q_s64(*(int64x2_t *)v194, v199);
                int64x2_t v360 = vzip1q_s64(v202, v203);
                int64x2_t v363 = vzip2q_s64(v198, v199);
                int64x2_t v364 = vzip2q_s64(v202, v203);
                int64x2_t v367 = vzip1q_s64(v200, v201);
                int64x2_t v368 = vzip1q_s64(v204, v205);
                int64x2_t v371 = vzip2q_s64(v200, v201);
                int64x2_t v372 = vzip2q_s64(v204, v205);
                uint64_t v196 = v304;
                if (v304) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v195 != 3)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v359, 64, v194, v195);
                    uint64_t v196 = v304;
                    if (!v304) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v359 = 0u;
                    int64x2_t v360 = 0u;
                    int64x2_t v363 = 0u;
                    int64x2_t v364 = 0u;
                    int64x2_t v367 = 0u;
                    int64x2_t v368 = 0u;
                    int64x2_t v371 = 0u;
                    int64x2_t v372 = 0u;
                    uint64_t v196 = v304;
                    if (!v304) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v305) {
                    goto LABEL_233;
                  }
                  uint64_t v206 = 0;
                  unint64_t v207 = (unint64_t)v302 << 6;
                  uint64_t v208 = 4 * v303;
                  long long v209 = &v309.i8[v207 + v208];
                  uint64_t v210 = v300;
                  uint64_t v211 = v301;
                  unint64_t v212 = 4 * v305;
                  if (v212 <= 1) {
                    unint64_t v213 = 1;
                  }
                  else {
                    unint64_t v213 = 4 * v305;
                  }
                  unint64_t v214 = v207 + v208;
                  char v215 = &v309.i8[v207 + v208];
                  if (v213) {
                    BOOL v216 = (v213 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v216 = 0;
                  }
                  uint64_t v217 = v213 & 0x3FFFFFFE0;
                  uint64_t v218 = v213 & 0x3FFFFFFF8;
                  char v220 = !v216 || v213 < 8;
                  unsigned int v221 = &v310.i8[v214];
                  int16x4_t v222 = (long long *)(v300 + 16);
                  unsigned int v223 = v209;
                  uint64_t v224 = v300;
                  while (2)
                  {
                    BOOL v225 = (char *)(v210 + v211 * v206);
                    BOOL v226 = &v209[64 * v206];
                    if ((unint64_t)(&v215[64 * v206] - v225) < 0x20) {
                      char v227 = 1;
                    }
                    else {
                      char v227 = v220;
                    }
                    if (v227)
                    {
                      int v228 = 0;
LABEL_230:
                      unsigned int v238 = v228 + 1;
                      do
                      {
                        char v239 = *v225++;
                        *v226++ = v239;
                      }
                      while (v212 > v238++);
                    }
                    else
                    {
                      if (v213 >= 0x20)
                      {
                        int v230 = v222;
                        unsigned int v231 = v221;
                        uint64_t v232 = v213 & 0x3FFFFFFE0;
                        do
                        {
                          long long v233 = *v230;
                          *((_OWORD *)v231 - 1) = *(v230 - 1);
                          *(_OWORD *)unsigned int v231 = v233;
                          v231 += 32;
                          v230 += 2;
                          v232 -= 32;
                        }
                        while (v232);
                        if (v213 == v217) {
                          goto LABEL_213;
                        }
                        uint64_t v229 = v213 & 0x3FFFFFFE0;
                        if ((v213 & 0x18) == 0)
                        {
                          v225 += v217;
                          v226 += v217;
                          int v228 = v213 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v229 = 0;
                      }
                      v226 += v218;
                      uint64_t v234 = v229 - v218;
                      int16x4_t v235 = (uint64_t *)(v224 + v229);
                      int16x4_t v236 = &v223[v229];
                      do
                      {
                        uint64_t v237 = *v235++;
                        *(void *)int16x4_t v236 = v237;
                        v236 += 8;
                        v234 += 8;
                      }
                      while (v234);
                      if (v213 != v218)
                      {
                        v225 += v218;
                        int v228 = v213 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v206;
                    v221 += 64;
                    int16x4_t v222 = (long long *)((char *)v222 + v211);
                    v224 += v211;
                    v223 += 64;
                    if (v206 == v196) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                float32x4_t v197 = vld1q_dup_f32((const float *)v194);
                int64x2_t v359 = (int64x2_t)v197;
                int64x2_t v360 = (int64x2_t)v197;
                int64x2_t v363 = (int64x2_t)v197;
                int64x2_t v364 = (int64x2_t)v197;
                int64x2_t v367 = (int64x2_t)v197;
                int64x2_t v368 = (int64x2_t)v197;
                int64x2_t v371 = (int64x2_t)v197;
                int64x2_t v372 = (int64x2_t)v197;
                uint64_t v196 = v304;
                if (v304) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v241 = 0;
              unsigned int v242 = v298;
              int16x4_t v243 = v299;
              int v244 = v306;
              int v245 = v307;
              unsigned int v25 = a7;
              uint64_t result = v293;
              int v41 = v289;
              do
              {
                uint64_t v260 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v241 + 1];
                uint64_t v261 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v241];
                unsigned int v262 = (v244 - 8 * v261) & ~((v244 - 8 * (int)v261) >> 31);
                if (v262 >= 8) {
                  unsigned int v262 = 8;
                }
                unsigned int v263 = (v245 - 4 * v260) & ~((v245 - 4 * (int)v260) >> 31);
                if (v263 >= 4) {
                  unsigned int v263 = 4;
                }
                if (v262) {
                  BOOL v264 = v263 == 0;
                }
                else {
                  BOOL v264 = 1;
                }
                if (v264)
                {
                  char v259 = 0;
                }
                else
                {
                  int16x4_t v246 = &v309 + 16 * v260 + 2 * v261;
                  int64x2_t v247 = v246[1];
                  int64x2_t v248 = v246[4];
                  int64x2_t v249 = v246[5];
                  int64x2_t v250 = vzip1q_s64(*v246, v248);
                  int64x2_t v251 = vzip2q_s64(*v246, v248);
                  int64x2_t v252 = vzip1q_s64(v247, v249);
                  int64x2_t v253 = vzip2q_s64(v247, v249);
                  int64x2_t v254 = v246[8];
                  int64x2_t v255 = v246[9];
                  v246 += 12;
                  int64x2_t v256 = v246[1];
                  int64x2_t v257 = vzip1q_s64(v254, *v246);
                  int64x2_t v258 = vzip2q_s64(v254, *v246);
                  *unsigned int v242 = v250;
                  v242[1] = v251;
                  v242[2] = v257;
                  v242[3] = v258;
                  v242[4] = v252;
                  v242[5] = v253;
                  v242[6] = vzip1q_s64(v255, v256);
                  v242[7] = vzip2q_s64(v255, v256);
                  v242 += 8;
                  char v259 = 127;
                }
                *v243++ = v259;
                v241 += 2;
              }
              while (v241 != 16);
LABEL_123:
              unsigned int v86 = v39 + 1;
              uint64_t v79 = v282;
              if (!v296) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v79, v85, 0x400uLL);
              int v41 = v289;
              uint64_t result = v293;
              goto LABEL_47;
            }
            unsigned int v85 = (int64x2_t *)__dst;
          }
          else
          {
            unsigned int v85 = v79;
            if (v80) {
              goto LABEL_121;
            }
          }
          uint64_t v87 = 0;
          float32x4_t v88 = v85;
          unsigned int v86 = v39 + 1;
          do
          {
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87 + 1];
            uint64_t v107 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87];
            unsigned int v108 = (v46 - 8 * v107) & ~((int)(v46 - 8 * v107) >> 31);
            if (v108 >= 8) {
              unsigned int v108 = 8;
            }
            unsigned int v109 = (v40 - 4 * v106) & ~((int)(v40 - 4 * v106) >> 31);
            if (v109 >= 4) {
              unsigned int v109 = 4;
            }
            if (v108) {
              BOOL v110 = v109 == 0;
            }
            else {
              BOOL v110 = 1;
            }
            if (v110)
            {
              char v105 = 0;
            }
            else
            {
              int64x2_t v89 = (int64x2_t *)(v78 + 4 * a11 * v106 + 32 * v107);
              int64x2_t v90 = (int64x2_t *)((char *)v89 + v36);
              int64x2_t v92 = *v89;
              int64x2_t v93 = v89[1];
              int64x2_t v91 = (int64x2_t *)((char *)v89 + 2 * a11);
              int64x2_t v94 = v90[1];
              int64x2_t v95 = vzip1q_s64(v92, *v90);
              int64x2_t v96 = vzip2q_s64(v92, *v90);
              int64x2_t v97 = vzip1q_s64(v93, v94);
              int64x2_t v98 = vzip2q_s64(v93, v94);
              int64x2_t v100 = *v91;
              int64x2_t v101 = v91[1];
              uint64_t v99 = (int64x2_t *)((char *)v91 + v36);
              int64x2_t v102 = v99[1];
              int64x2_t v103 = vzip1q_s64(v100, *v99);
              int64x2_t v104 = vzip2q_s64(v100, *v99);
              *float32x4_t v88 = v95;
              v88[1] = v96;
              v88[2] = v103;
              v88[3] = v104;
              v88[4] = v97;
              v88[5] = v98;
              v88[6] = vzip1q_s64(v101, v102);
              v88[7] = vzip2q_s64(v101, v102);
              v88 += 8;
              char v105 = 127;
            }
            *v77++ = v105;
            v87 += 2;
          }
          while (v87 != 16);
          unsigned int v25 = a7;
          if (v296) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v20 = v39 == v283 >> 4;
          unsigned int v39 = v86;
        }
        while (!v20);
        BOOL v20 = v19++ == v270;
      }
      while (!v20);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v318 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v235 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v219 = a8 + a10 - 1;
  unsigned int v221 = v219 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v236 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v236;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v240 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v236;
  int v229 = (int)result;
  if (v18 <= v221)
  {
    unsigned int v228 = a7 + a9 - 1;
    unsigned int v218 = a7 >> 4;
    if (a7 >> 4 <= v228 >> 4)
    {
      unsigned int v215 = a5 - 1;
      unsigned int v238 = (a5 - 1) >> 4;
      int v237 = ((a5 - 1) & 0xF) + 1;
      int v216 = ((a6 - 1) & 0xF) + 1;
      unsigned int v217 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v226 = v30.i32[0] | v30.i32[1];
      BOOL v224 = v30.i32[1] != 0;
      int8x8_t v225 = v30;
      BOOL v223 = v30.i32[0] != 0;
      unint64_t v214 = 8 * v20 * (unint64_t)v19;
      unsigned int v227 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v235) {
          int v32 = v235;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v218;
        if (v219 < v31) {
          unsigned int v31 = v219;
        }
        unsigned int v234 = 16 * v18;
        int v222 = v32 - 16 * v18;
        int v233 = v31 - v32 + 1;
        int v34 = v216;
        if (v18 != v217) {
          int v34 = 16;
        }
        unsigned int v241 = v34;
        uint64_t v232 = a3 + (v32 - v235) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v228 < v36) {
            unsigned int v36 = v228;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v238) {
            unsigned int v39 = v237;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v234 >= v235 && v35 >= a7)
          {
            int v41 = v237;
            if (v33 != v238) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v233 != v241;
          }
          if (v229)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v214 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v205 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v206 = 0;
              if (v65) {
                goto LABEL_218;
              }
LABEL_207:
              unsigned int v207 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v207 | v206) {
                goto LABEL_208;
              }
LABEL_219:
              uint64_t v209 = 0;
            }
            else
            {
              unsigned int v206 = 32 - __clz(~(-1 << -(char)__clz(v205)));
              if ((v65 & 1) == 0) {
                goto LABEL_207;
              }
LABEL_218:
              unsigned int v207 = 0;
              if (!v206) {
                goto LABEL_219;
              }
LABEL_208:
              int v208 = 0;
              uint64_t v209 = 0;
              int v210 = v33 & v205;
              BOOL v211 = v206 != 0;
              BOOL v212 = v207 != 0;
              int v213 = 1;
              do
              {
                --v206;
                if (v211) {
                  v209 |= (unint64_t)(v213 & v210) << v208++;
                }
                else {
                  unsigned int v206 = 0;
                }
                --v207;
                if (v212) {
                  v209 |= (unint64_t)(v213 & v18 & ((v66 >> 4) - 1)) << v208++;
                }
                else {
                  unsigned int v207 = 0;
                }
                v213 *= 2;
                --v208;
                BOOL v212 = v207 != 0;
                BOOL v211 = v206 != 0;
              }
              while (v207 | v206);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v234 / v66 * ((v62 + v215) / v62)) << 14) + (v209 << 10);
            goto LABEL_58;
          }
          if (v226)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v224;
            BOOL v47 = v223;
            __int32 v48 = v225.i32[1];
            __int32 v49 = v225.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v232 + 4 * (v37 - a7);
          unsigned int v70 = (int64x2_t *)(a2 + v50);
          if (v241 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          char v239 = v70;
          if (v240)
          {
            uint64_t v72 = (int64x2_t *)__dst;
            if (!v71) {
              goto LABEL_93;
            }
            char v73 = v39;
            BOOL v74 = v40;
            memcpy(__dst, v70, sizeof(__dst));
            unsigned int v35 = 16 * v33;
            BOOL v40 = v74;
            LOBYTE(v39) = v73;
            uint64_t v28 = v236;
          }
          else
          {
            uint64_t v72 = v70;
            if (!v71)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, (unint64_t)v72, v68, v39, v241);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          int16x4_t v243 = v72;
          unsigned __int8 v251 = v39;
          unsigned __int8 v252 = v241;
          unsigned int v247 = v222;
          unsigned int v248 = v37 - v35;
          int v244 = v68;
          unint64_t v245 = v69;
          uint64_t v246 = a11;
          unsigned int v249 = v233;
          unsigned int v250 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_94:
            a7 = v227;
            goto LABEL_189;
          }
          unsigned int v75 = *v68;
          a7 = v227;
          if (v75 == 127)
          {
            int64x2_t v78 = *v72;
            int64x2_t v79 = v72[1];
            int64x2_t v80 = v72[2];
            int64x2_t v81 = v72[3];
            int64x2_t v82 = v72[4];
            int64x2_t v83 = v72[5];
            int64x2_t v84 = v72[6];
            int64x2_t v85 = v72[7];
            int64x2_t v254 = vzip1q_s64(*v72, v79);
            int64x2_t v255 = vzip1q_s64(v82, v83);
            int64x2_t v258 = vzip2q_s64(v78, v79);
            int64x2_t v259 = vzip2q_s64(v82, v83);
            int64x2_t v262 = vzip1q_s64(v80, v81);
            int64x2_t v263 = vzip1q_s64(v84, v85);
            int64x2_t v266 = vzip2q_s64(v80, v81);
            int64x2_t v267 = vzip2q_s64(v84, v85);
            uint64_t v76 = 128;
          }
          else if (v75 == 3)
          {
            float32x4_t v77 = vld1q_dup_f32((const float *)v72->i32);
            int64x2_t v254 = (int64x2_t)v77;
            int64x2_t v255 = (int64x2_t)v77;
            int64x2_t v258 = (int64x2_t)v77;
            int64x2_t v259 = (int64x2_t)v77;
            int64x2_t v262 = (int64x2_t)v77;
            int64x2_t v263 = (int64x2_t)v77;
            int64x2_t v266 = (int64x2_t)v77;
            int64x2_t v267 = (int64x2_t)v77;
            uint64_t v76 = 4;
          }
          else if (*v68)
          {
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v254, 64, (uint64_t)v72, v75);
          }
          else
          {
            uint64_t v76 = 0;
            int64x2_t v255 = 0u;
            int64x2_t v254 = 0u;
            int64x2_t v258 = 0u;
            int64x2_t v259 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v266 = 0u;
            int64x2_t v267 = 0u;
          }
          uint64_t v86 = (uint64_t)v72->i64 + v76;
          unsigned int v87 = v68[1];
          if (v87 == 127)
          {
            int64x2_t v90 = *(int64x2_t *)v86;
            int64x2_t v91 = *(int64x2_t *)(v86 + 16);
            int64x2_t v92 = *(int64x2_t *)(v86 + 32);
            int64x2_t v93 = *(int64x2_t *)(v86 + 48);
            int64x2_t v94 = *(int64x2_t *)(v86 + 64);
            int64x2_t v95 = *(int64x2_t *)(v86 + 80);
            int64x2_t v96 = *(int64x2_t *)(v86 + 96);
            int64x2_t v97 = *(int64x2_t *)(v86 + 112);
            int64x2_t v270 = vzip1q_s64(*(int64x2_t *)v86, v91);
            int64x2_t v271 = vzip1q_s64(v94, v95);
            int64x2_t v274 = vzip2q_s64(v90, v91);
            int64x2_t v275 = vzip2q_s64(v94, v95);
            int64x2_t v278 = vzip1q_s64(v92, v93);
            int64x2_t v279 = vzip1q_s64(v96, v97);
            int64x2_t v282 = vzip2q_s64(v92, v93);
            int64x2_t v283 = vzip2q_s64(v96, v97);
            uint64_t v88 = 128;
          }
          else if (v87 == 3)
          {
            float32x4_t v89 = vld1q_dup_f32((const float *)v86);
            int64x2_t v270 = (int64x2_t)v89;
            int64x2_t v271 = (int64x2_t)v89;
            int64x2_t v274 = (int64x2_t)v89;
            int64x2_t v275 = (int64x2_t)v89;
            int64x2_t v278 = (int64x2_t)v89;
            int64x2_t v279 = (int64x2_t)v89;
            int64x2_t v282 = (int64x2_t)v89;
            int64x2_t v283 = (int64x2_t)v89;
            uint64_t v88 = 4;
          }
          else if (v68[1])
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 64, v86, v87);
          }
          else
          {
            uint64_t v88 = 0;
            int64x2_t v270 = 0u;
            int64x2_t v271 = 0u;
            int64x2_t v274 = 0u;
            int64x2_t v275 = 0u;
            int64x2_t v278 = 0u;
            int64x2_t v279 = 0u;
            int64x2_t v282 = 0u;
            int64x2_t v283 = 0u;
          }
          uint64_t v98 = v86 + v88;
          unsigned int v99 = v68[2];
          if (v99 == 127)
          {
            int64x2_t v102 = *(int64x2_t *)v98;
            int64x2_t v103 = *(int64x2_t *)(v98 + 16);
            int64x2_t v104 = *(int64x2_t *)(v98 + 32);
            int64x2_t v105 = *(int64x2_t *)(v98 + 48);
            int64x2_t v106 = *(int64x2_t *)(v98 + 64);
            int64x2_t v107 = *(int64x2_t *)(v98 + 80);
            int64x2_t v108 = *(int64x2_t *)(v98 + 96);
            int64x2_t v109 = *(int64x2_t *)(v98 + 112);
            int64x2_t v256 = vzip1q_s64(*(int64x2_t *)v98, v103);
            int64x2_t v257 = vzip1q_s64(v106, v107);
            int64x2_t v260 = vzip2q_s64(v102, v103);
            int64x2_t v261 = vzip2q_s64(v106, v107);
            int64x2_t v264 = vzip1q_s64(v104, v105);
            int64x2_t v265 = vzip1q_s64(v108, v109);
            int64x2_t v268 = vzip2q_s64(v104, v105);
            int64x2_t v269 = vzip2q_s64(v108, v109);
            uint64_t v100 = 128;
          }
          else if (v99 == 3)
          {
            float32x4_t v101 = vld1q_dup_f32((const float *)v98);
            int64x2_t v256 = (int64x2_t)v101;
            int64x2_t v257 = (int64x2_t)v101;
            int64x2_t v260 = (int64x2_t)v101;
            int64x2_t v261 = (int64x2_t)v101;
            int64x2_t v264 = (int64x2_t)v101;
            int64x2_t v265 = (int64x2_t)v101;
            int64x2_t v268 = (int64x2_t)v101;
            int64x2_t v269 = (int64x2_t)v101;
            uint64_t v100 = 4;
          }
          else if (v68[2])
          {
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v256, 64, v98, v99);
          }
          else
          {
            uint64_t v100 = 0;
            int64x2_t v256 = 0u;
            int64x2_t v257 = 0u;
            int64x2_t v260 = 0u;
            int64x2_t v261 = 0u;
            int64x2_t v264 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v268 = 0u;
            int64x2_t v269 = 0u;
          }
          uint64_t v110 = v98 + v100;
          unsigned int v111 = v68[3];
          if (v111 == 127)
          {
            int64x2_t v114 = *(int64x2_t *)v110;
            int64x2_t v115 = *(int64x2_t *)(v110 + 16);
            int64x2_t v116 = *(int64x2_t *)(v110 + 32);
            int64x2_t v117 = *(int64x2_t *)(v110 + 48);
            int64x2_t v118 = *(int64x2_t *)(v110 + 64);
            int64x2_t v119 = *(int64x2_t *)(v110 + 80);
            int64x2_t v120 = *(int64x2_t *)(v110 + 96);
            int64x2_t v121 = *(int64x2_t *)(v110 + 112);
            int64x2_t v272 = vzip1q_s64(*(int64x2_t *)v110, v115);
            int64x2_t v273 = vzip1q_s64(v118, v119);
            int64x2_t v276 = vzip2q_s64(v114, v115);
            int64x2_t v277 = vzip2q_s64(v118, v119);
            int64x2_t v280 = vzip1q_s64(v116, v117);
            int64x2_t v281 = vzip1q_s64(v120, v121);
            int64x2_t v284 = vzip2q_s64(v116, v117);
            int64x2_t v285 = vzip2q_s64(v120, v121);
            uint64_t v112 = 128;
          }
          else if (v111 == 3)
          {
            float32x4_t v113 = vld1q_dup_f32((const float *)v110);
            int64x2_t v272 = (int64x2_t)v113;
            int64x2_t v273 = (int64x2_t)v113;
            int64x2_t v276 = (int64x2_t)v113;
            int64x2_t v277 = (int64x2_t)v113;
            int64x2_t v280 = (int64x2_t)v113;
            int64x2_t v281 = (int64x2_t)v113;
            int64x2_t v284 = (int64x2_t)v113;
            int64x2_t v285 = (int64x2_t)v113;
            uint64_t v112 = 4;
          }
          else if (v68[3])
          {
            uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v272, 64, v110, v111);
          }
          else
          {
            uint64_t v112 = 0;
            int64x2_t v272 = 0u;
            int64x2_t v273 = 0u;
            int64x2_t v276 = 0u;
            int64x2_t v277 = 0u;
            int64x2_t v280 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v284 = 0u;
            int64x2_t v285 = 0u;
          }
          uint64_t v122 = v110 + v112;
          unsigned int v123 = v68[4];
          if (v123 == 127)
          {
            int64x2_t v126 = *(int64x2_t *)v122;
            int64x2_t v127 = *(int64x2_t *)(v122 + 16);
            int64x2_t v128 = *(int64x2_t *)(v122 + 32);
            int64x2_t v129 = *(int64x2_t *)(v122 + 48);
            int64x2_t v130 = *(int64x2_t *)(v122 + 64);
            int64x2_t v131 = *(int64x2_t *)(v122 + 80);
            int64x2_t v132 = *(int64x2_t *)(v122 + 96);
            int64x2_t v133 = *(int64x2_t *)(v122 + 112);
            int64x2_t v286 = vzip1q_s64(*(int64x2_t *)v122, v127);
            int64x2_t v287 = vzip1q_s64(v130, v131);
            int64x2_t v290 = vzip2q_s64(v126, v127);
            int64x2_t v291 = vzip2q_s64(v130, v131);
            int64x2_t v294 = vzip1q_s64(v128, v129);
            int64x2_t v295 = vzip1q_s64(v132, v133);
            int64x2_t v298 = vzip2q_s64(v128, v129);
            int64x2_t v299 = vzip2q_s64(v132, v133);
            uint64_t v124 = 128;
          }
          else if (v123 == 3)
          {
            float32x4_t v125 = vld1q_dup_f32((const float *)v122);
            int64x2_t v286 = (int64x2_t)v125;
            int64x2_t v287 = (int64x2_t)v125;
            int64x2_t v290 = (int64x2_t)v125;
            int64x2_t v291 = (int64x2_t)v125;
            int64x2_t v294 = (int64x2_t)v125;
            int64x2_t v295 = (int64x2_t)v125;
            int64x2_t v298 = (int64x2_t)v125;
            int64x2_t v299 = (int64x2_t)v125;
            uint64_t v124 = 4;
          }
          else if (v68[4])
          {
            uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 64, v122, v123);
          }
          else
          {
            uint64_t v124 = 0;
            int64x2_t v286 = 0u;
            int64x2_t v287 = 0u;
            int64x2_t v290 = 0u;
            int64x2_t v291 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v298 = 0u;
            int64x2_t v299 = 0u;
          }
          uint64_t v134 = v122 + v124;
          unsigned int v135 = v68[5];
          if (v135 == 127)
          {
            int64x2_t v138 = *(int64x2_t *)v134;
            int64x2_t v139 = *(int64x2_t *)(v134 + 16);
            int64x2_t v140 = *(int64x2_t *)(v134 + 32);
            int64x2_t v141 = *(int64x2_t *)(v134 + 48);
            int64x2_t v142 = *(int64x2_t *)(v134 + 64);
            int64x2_t v143 = *(int64x2_t *)(v134 + 80);
            int64x2_t v144 = *(int64x2_t *)(v134 + 96);
            int64x2_t v145 = *(int64x2_t *)(v134 + 112);
            int64x2_t v302 = vzip1q_s64(*(int64x2_t *)v134, v139);
            int64x2_t v303 = vzip1q_s64(v142, v143);
            int64x2_t v306 = vzip2q_s64(v138, v139);
            int64x2_t v307 = vzip2q_s64(v142, v143);
            int64x2_t v310 = vzip1q_s64(v140, v141);
            int64x2_t v311 = vzip1q_s64(v144, v145);
            int64x2_t v314 = vzip2q_s64(v140, v141);
            int64x2_t v315 = vzip2q_s64(v144, v145);
            uint64_t v136 = 128;
          }
          else if (v135 == 3)
          {
            float32x4_t v137 = vld1q_dup_f32((const float *)v134);
            int64x2_t v302 = (int64x2_t)v137;
            int64x2_t v303 = (int64x2_t)v137;
            int64x2_t v306 = (int64x2_t)v137;
            int64x2_t v307 = (int64x2_t)v137;
            int64x2_t v310 = (int64x2_t)v137;
            int64x2_t v311 = (int64x2_t)v137;
            int64x2_t v314 = (int64x2_t)v137;
            int64x2_t v315 = (int64x2_t)v137;
            uint64_t v136 = 4;
          }
          else if (v68[5])
          {
            uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 64, v134, v135);
          }
          else
          {
            uint64_t v136 = 0;
            int64x2_t v302 = 0u;
            int64x2_t v303 = 0u;
            int64x2_t v306 = 0u;
            int64x2_t v307 = 0u;
            int64x2_t v310 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v314 = 0u;
            int64x2_t v315 = 0u;
          }
          uint64_t v146 = v134 + v136;
          unsigned int v147 = v68[6];
          if (v147 == 127)
          {
            int64x2_t v150 = *(int64x2_t *)v146;
            int64x2_t v151 = *(int64x2_t *)(v146 + 16);
            int64x2_t v152 = *(int64x2_t *)(v146 + 32);
            int64x2_t v153 = *(int64x2_t *)(v146 + 48);
            int64x2_t v154 = *(int64x2_t *)(v146 + 64);
            int64x2_t v155 = *(int64x2_t *)(v146 + 80);
            int64x2_t v156 = *(int64x2_t *)(v146 + 96);
            int64x2_t v157 = *(int64x2_t *)(v146 + 112);
            int64x2_t v288 = vzip1q_s64(*(int64x2_t *)v146, v151);
            int64x2_t v289 = vzip1q_s64(v154, v155);
            int64x2_t v292 = vzip2q_s64(v150, v151);
            int64x2_t v293 = vzip2q_s64(v154, v155);
            int64x2_t v296 = vzip1q_s64(v152, v153);
            int64x2_t v297 = vzip1q_s64(v156, v157);
            int64x2_t v300 = vzip2q_s64(v152, v153);
            int64x2_t v301 = vzip2q_s64(v156, v157);
            uint64_t v148 = 128;
          }
          else if (v147 == 3)
          {
            float32x4_t v149 = vld1q_dup_f32((const float *)v146);
            int64x2_t v288 = (int64x2_t)v149;
            int64x2_t v289 = (int64x2_t)v149;
            int64x2_t v292 = (int64x2_t)v149;
            int64x2_t v293 = (int64x2_t)v149;
            int64x2_t v296 = (int64x2_t)v149;
            int64x2_t v297 = (int64x2_t)v149;
            int64x2_t v300 = (int64x2_t)v149;
            int64x2_t v301 = (int64x2_t)v149;
            uint64_t v148 = 4;
          }
          else if (v68[6])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v288, 64, v146, v147);
          }
          else
          {
            uint64_t v148 = 0;
            int64x2_t v288 = 0u;
            int64x2_t v289 = 0u;
            int64x2_t v292 = 0u;
            int64x2_t v293 = 0u;
            int64x2_t v296 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v300 = 0u;
            int64x2_t v301 = 0u;
          }
          uint64_t v158 = v146 + v148;
          unsigned int v159 = v68[7];
          if (v159 == 127)
          {
            int64x2_t v162 = *(int64x2_t *)v158;
            int64x2_t v163 = *(int64x2_t *)(v158 + 16);
            int64x2_t v164 = *(int64x2_t *)(v158 + 32);
            int64x2_t v165 = *(int64x2_t *)(v158 + 48);
            int64x2_t v166 = *(int64x2_t *)(v158 + 64);
            int64x2_t v167 = *(int64x2_t *)(v158 + 80);
            int64x2_t v168 = *(int64x2_t *)(v158 + 96);
            int64x2_t v169 = *(int64x2_t *)(v158 + 112);
            int64x2_t v304 = vzip1q_s64(*(int64x2_t *)v158, v163);
            int64x2_t v305 = vzip1q_s64(v166, v167);
            int64x2_t v308 = vzip2q_s64(v162, v163);
            int64x2_t v309 = vzip2q_s64(v166, v167);
            int64x2_t v312 = vzip1q_s64(v164, v165);
            int64x2_t v313 = vzip1q_s64(v168, v169);
            int64x2_t v316 = vzip2q_s64(v164, v165);
            int64x2_t v317 = vzip2q_s64(v168, v169);
            uint64_t v160 = v249;
            if (!v249) {
              goto LABEL_188;
            }
          }
          else if (v159 == 3)
          {
            float32x4_t v161 = vld1q_dup_f32((const float *)v158);
            int64x2_t v304 = (int64x2_t)v161;
            int64x2_t v305 = (int64x2_t)v161;
            int64x2_t v308 = (int64x2_t)v161;
            int64x2_t v309 = (int64x2_t)v161;
            int64x2_t v312 = (int64x2_t)v161;
            int64x2_t v313 = (int64x2_t)v161;
            int64x2_t v316 = (int64x2_t)v161;
            int64x2_t v317 = (int64x2_t)v161;
            uint64_t v160 = v249;
            if (!v249) {
              goto LABEL_188;
            }
          }
          else if (v68[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v304, 64, v158, v159);
            uint64_t v160 = v249;
            if (!v249) {
              goto LABEL_188;
            }
          }
          else
          {
            int64x2_t v304 = 0u;
            int64x2_t v305 = 0u;
            int64x2_t v308 = 0u;
            int64x2_t v309 = 0u;
            int64x2_t v312 = 0u;
            int64x2_t v313 = 0u;
            int64x2_t v316 = 0u;
            int64x2_t v317 = 0u;
            uint64_t v160 = v249;
            if (!v249) {
              goto LABEL_188;
            }
          }
          if (v250)
          {
            uint64_t v170 = 0;
            unint64_t v171 = (unint64_t)v247 << 6;
            uint64_t v172 = 4 * v248;
            float32x4_t v173 = &v254.i8[v171 + v172];
            unint64_t v174 = v245;
            uint64_t v175 = v246;
            unint64_t v176 = 4 * v250;
            if (v176 <= 1) {
              unint64_t v177 = 1;
            }
            else {
              unint64_t v177 = 4 * v250;
            }
            unint64_t v178 = v171 + v172;
            int64x2_t v179 = &v254.i8[v171 + v172];
            if (v177) {
              BOOL v180 = (v177 - 1) >> 32 == 0;
            }
            else {
              BOOL v180 = 0;
            }
            uint64_t v181 = v177 & 0x3FFFFFFE0;
            uint64_t v182 = v177 & 0x3FFFFFFF8;
            char v184 = !v180 || v177 < 8;
            float32x4_t v185 = &v255.i8[v178];
            int64x2_t v186 = (long long *)(v245 + 16);
            int64x2_t v187 = v173;
            unint64_t v188 = v245;
            do
            {
              int64x2_t v189 = (char *)(v174 + v175 * v170);
              int64x2_t v190 = &v173[64 * v170];
              if ((unint64_t)(&v179[64 * v170] - v189) < 0x20) {
                char v191 = 1;
              }
              else {
                char v191 = v184;
              }
              if (v191)
              {
                int v192 = 0;
                goto LABEL_185;
              }
              if (v177 >= 0x20)
              {
                uint64_t v194 = v186;
                unsigned int v195 = v185;
                uint64_t v196 = v177 & 0x3FFFFFFE0;
                do
                {
                  long long v197 = *v194;
                  *((_OWORD *)v195 - 1) = *(v194 - 1);
                  *(_OWORD *)unsigned int v195 = v197;
                  v195 += 32;
                  v194 += 2;
                  v196 -= 32;
                }
                while (v196);
                if (v177 == v181) {
                  goto LABEL_168;
                }
                uint64_t v193 = v177 & 0x3FFFFFFE0;
                if ((v177 & 0x18) == 0)
                {
                  v189 += v181;
                  v190 += v181;
                  int v192 = v177 & 0xFFFFFFE0;
                  goto LABEL_185;
                }
              }
              else
              {
                uint64_t v193 = 0;
              }
              v190 += v182;
              uint64_t v198 = v193 - v182;
              int64x2_t v199 = (uint64_t *)(v188 + v193);
              int64x2_t v200 = &v187[v193];
              do
              {
                uint64_t v201 = *v199++;
                *(void *)int64x2_t v200 = v201;
                v200 += 8;
                v198 += 8;
              }
              while (v198);
              if (v177 == v182) {
                goto LABEL_168;
              }
              v189 += v182;
              int v192 = v177 & 0xFFFFFFF8;
LABEL_185:
              unsigned int v202 = v192 + 1;
              do
              {
                char v203 = *v189++;
                *v190++ = v203;
              }
              while (v176 > v202++);
LABEL_168:
              ++v170;
              v185 += 64;
              int64x2_t v186 = (long long *)((char *)v186 + v175);
              v188 += v175;
              v187 += 64;
            }
            while (v170 != v160);
          }
LABEL_188:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v254, 64, (unint64_t)v243, v244, v251, v252);
LABEL_189:
          uint64_t result = v239;
          if (v240) {
            uint64_t result = memcpy(v239, v72, 0x400uLL);
          }
          BOOL v23 = v33++ == v228 >> 4;
          uint64_t v28 = v236;
        }
        while (!v23);
        BOOL v23 = v18++ == v221;
      }
      while (!v23);
    }
  }
  return result;
}

unsigned __int8 *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v369 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v288 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v270 = a8 + a10 - 1;
  unsigned int v272 = v270 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v289 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v292 = v24;
  uint64_t result = (unsigned __int8 *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  int v282 = (int)result;
  if (v17 <= v272)
  {
    unsigned int v281 = a7 + a9 - 1;
    unsigned int v269 = a7 >> 4;
    if (a7 >> 4 <= v281 >> 4)
    {
      unsigned int v266 = a5 - 1;
      unsigned int v291 = (a5 - 1) >> 4;
      int v290 = ((a5 - 1) & 0xF) + 1;
      int v267 = ((a6 - 1) & 0xF) + 1;
      unsigned int v268 = (a6 - 1) >> 4;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v27));
      __int32 v279 = v28.i32[0] | v28.i32[1];
      BOOL v276 = v28.i32[1] != 0;
      int8x8_t v277 = v28;
      BOOL v275 = v28.i32[0] != 0;
      unint64_t v265 = 8 * v19 * (unint64_t)v18;
      uint64_t v29 = a11;
      uint64_t v30 = 2 * a11;
      uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
      unsigned int v280 = a7;
      do
      {
        unsigned int v31 = (16 * v17) | 0xF;
        if (16 * v17 <= v288) {
          int v32 = v288;
        }
        else {
          int v32 = 16 * v17;
        }
        unsigned int v33 = v269;
        if (v270 < v31) {
          unsigned int v31 = v270;
        }
        unsigned int v287 = 16 * v17;
        int v274 = v32 - 16 * v17;
        int v286 = v31 - v32 + 1;
        if (v17 == v268) {
          unsigned int v34 = v267;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v285 = a3 + (v32 - v288) * v29;
        unsigned int v273 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v281 < v36) {
            unsigned int v36 = v281;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v291) {
            unsigned int v39 = v290;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v287 >= v288 && v35 >= a7)
          {
            int v41 = v290;
            if (v33 != v291) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v286 != v34;
          }
          if (v282)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v265 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v256 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v257 = 0;
              if (v65) {
                goto LABEL_244;
              }
LABEL_233:
              unsigned int v258 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v258 | v257) {
                goto LABEL_234;
              }
LABEL_245:
              uint64_t v260 = 0;
            }
            else
            {
              unsigned int v257 = 32 - __clz(~(-1 << -(char)__clz(v256)));
              if ((v65 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              unsigned int v258 = 0;
              if (!v257) {
                goto LABEL_245;
              }
LABEL_234:
              int v259 = 0;
              uint64_t v260 = 0;
              int v261 = v33 & v256;
              BOOL v262 = v257 != 0;
              BOOL v263 = v258 != 0;
              int v264 = 1;
              do
              {
                --v257;
                if (v262) {
                  v260 |= (unint64_t)(v264 & v261) << v259++;
                }
                else {
                  unsigned int v257 = 0;
                }
                --v258;
                if (v263) {
                  v260 |= (unint64_t)(v264 & v17 & ((v66 >> 4) - 1)) << v259++;
                }
                else {
                  unsigned int v258 = 0;
                }
                v264 *= 2;
                --v259;
                BOOL v263 = v258 != 0;
                BOOL v262 = v257 != 0;
              }
              while (v258 | v257);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v287 / v66 * ((v62 + v266) / v62)) << 14) + (v260 << 10);
            uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
            goto LABEL_60;
          }
          if (v279)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v276;
            BOOL v47 = v275;
            __int32 v48 = v277.i32[1];
            __int32 v49 = v277.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v17) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_60:
          unsigned int v51 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_82:
              uint64_t v58 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_82;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v17) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_83:
          unsigned int v67 = v37 - a7;
          int v68 = v39 < 0x10 || v40;
          unint64_t v69 = (char *)(a4 + 8 * v58);
          uint64_t v70 = v285 + 4 * v67;
          int v71 = (int64x2_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          if (v292)
          {
            if (v72)
            {
              char v73 = v71;
              int v74 = v38;
              BOOL v75 = v40;
              int v76 = v37;
              memcpy(v304, v71, sizeof(v304));
              int v37 = v76;
              unsigned int v35 = 16 * v33;
              uint64_t v29 = a11;
              unsigned int v34 = v273;
              BOOL v40 = v75;
              int v38 = v74;
              float32x4_t v77 = (int64x2_t *)v304;
              int v71 = v73;
              uint64_t v26 = v289;
LABEL_93:
              __dst = v71;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v26;
              int64x2_t v294 = v77;
              unsigned __int8 v302 = v39;
              unsigned __int8 v303 = v34;
              unsigned int v298 = v274;
              unsigned int v299 = v37 - v35;
              int64x2_t v295 = v69;
              uint64_t v296 = v70;
              uint64_t v297 = v29;
              unsigned int v300 = v286;
              unsigned int v301 = v38;
              if (v40)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
                uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
                uint64_t v26 = v289;
                a7 = v280;
                uint64_t v30 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v102 = *v69;
              if (v102 == 127)
              {
                int64x2_t v105 = *v77;
                int64x2_t v106 = v77[1];
                int64x2_t v107 = v77[2];
                int64x2_t v108 = v77[3];
                int64x2_t v109 = v77[4];
                int64x2_t v110 = v77[5];
                int64x2_t v111 = v77[6];
                int64x2_t v112 = v77[7];
                int64x2_t v305 = vzip1q_s64(*v77, v106);
                int64x2_t v306 = vzip1q_s64(v109, v110);
                int64x2_t v309 = vzip2q_s64(v105, v106);
                int64x2_t v310 = vzip2q_s64(v109, v110);
                int64x2_t v313 = vzip1q_s64(v107, v108);
                int64x2_t v314 = vzip1q_s64(v111, v112);
                int64x2_t v317 = vzip2q_s64(v107, v108);
                int64x2_t v318 = vzip2q_s64(v111, v112);
                uint64_t v103 = 128;
              }
              else if (v102 == 3)
              {
                float32x4_t v104 = vld1q_dup_f32((const float *)v77->i32);
                int64x2_t v305 = (int64x2_t)v104;
                int64x2_t v306 = (int64x2_t)v104;
                int64x2_t v309 = (int64x2_t)v104;
                int64x2_t v310 = (int64x2_t)v104;
                int64x2_t v313 = (int64x2_t)v104;
                int64x2_t v314 = (int64x2_t)v104;
                int64x2_t v317 = (int64x2_t)v104;
                int64x2_t v318 = (int64x2_t)v104;
                uint64_t v103 = 4;
              }
              else if (*v69)
              {
                uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 64, (uint64_t)v77, v102);
              }
              else
              {
                uint64_t v103 = 0;
                int64x2_t v306 = 0u;
                int64x2_t v305 = 0u;
                int64x2_t v309 = 0u;
                int64x2_t v310 = 0u;
                int64x2_t v313 = 0u;
                int64x2_t v314 = 0u;
                int64x2_t v317 = 0u;
                int64x2_t v318 = 0u;
              }
              uint64_t v113 = (uint64_t)v77->i64 + v103;
              unsigned int v114 = v69[1];
              if (v114 == 127)
              {
                int64x2_t v117 = *(int64x2_t *)v113;
                int64x2_t v118 = *(int64x2_t *)(v113 + 16);
                int64x2_t v119 = *(int64x2_t *)(v113 + 32);
                int64x2_t v120 = *(int64x2_t *)(v113 + 48);
                int64x2_t v121 = *(int64x2_t *)(v113 + 64);
                int64x2_t v122 = *(int64x2_t *)(v113 + 80);
                int64x2_t v123 = *(int64x2_t *)(v113 + 96);
                int64x2_t v124 = *(int64x2_t *)(v113 + 112);
                int64x2_t v321 = vzip1q_s64(*(int64x2_t *)v113, v118);
                int64x2_t v322 = vzip1q_s64(v121, v122);
                int64x2_t v325 = vzip2q_s64(v117, v118);
                int64x2_t v326 = vzip2q_s64(v121, v122);
                int64x2_t v329 = vzip1q_s64(v119, v120);
                int64x2_t v330 = vzip1q_s64(v123, v124);
                int64x2_t v333 = vzip2q_s64(v119, v120);
                int64x2_t v334 = vzip2q_s64(v123, v124);
                uint64_t v115 = 128;
              }
              else if (v114 == 3)
              {
                float32x4_t v116 = vld1q_dup_f32((const float *)v113);
                int64x2_t v321 = (int64x2_t)v116;
                int64x2_t v322 = (int64x2_t)v116;
                int64x2_t v325 = (int64x2_t)v116;
                int64x2_t v326 = (int64x2_t)v116;
                int64x2_t v329 = (int64x2_t)v116;
                int64x2_t v330 = (int64x2_t)v116;
                int64x2_t v333 = (int64x2_t)v116;
                int64x2_t v334 = (int64x2_t)v116;
                uint64_t v115 = 4;
              }
              else if (v69[1])
              {
                uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 64, v113, v114);
              }
              else
              {
                uint64_t v115 = 0;
                int64x2_t v321 = 0u;
                int64x2_t v322 = 0u;
                int64x2_t v325 = 0u;
                int64x2_t v326 = 0u;
                int64x2_t v329 = 0u;
                int64x2_t v330 = 0u;
                int64x2_t v333 = 0u;
                int64x2_t v334 = 0u;
              }
              uint64_t v125 = v113 + v115;
              unsigned int v126 = v69[2];
              if (v126 == 127)
              {
                int64x2_t v129 = *(int64x2_t *)v125;
                int64x2_t v130 = *(int64x2_t *)(v125 + 16);
                int64x2_t v131 = *(int64x2_t *)(v125 + 32);
                int64x2_t v132 = *(int64x2_t *)(v125 + 48);
                int64x2_t v133 = *(int64x2_t *)(v125 + 64);
                int64x2_t v134 = *(int64x2_t *)(v125 + 80);
                int64x2_t v135 = *(int64x2_t *)(v125 + 96);
                int64x2_t v136 = *(int64x2_t *)(v125 + 112);
                int64x2_t v307 = vzip1q_s64(*(int64x2_t *)v125, v130);
                int64x2_t v308 = vzip1q_s64(v133, v134);
                int64x2_t v311 = vzip2q_s64(v129, v130);
                int64x2_t v312 = vzip2q_s64(v133, v134);
                int64x2_t v315 = vzip1q_s64(v131, v132);
                int64x2_t v316 = vzip1q_s64(v135, v136);
                int64x2_t v319 = vzip2q_s64(v131, v132);
                int64x2_t v320 = vzip2q_s64(v135, v136);
                uint64_t v127 = 128;
              }
              else if (v126 == 3)
              {
                float32x4_t v128 = vld1q_dup_f32((const float *)v125);
                int64x2_t v307 = (int64x2_t)v128;
                int64x2_t v308 = (int64x2_t)v128;
                int64x2_t v311 = (int64x2_t)v128;
                int64x2_t v312 = (int64x2_t)v128;
                int64x2_t v315 = (int64x2_t)v128;
                int64x2_t v316 = (int64x2_t)v128;
                int64x2_t v319 = (int64x2_t)v128;
                int64x2_t v320 = (int64x2_t)v128;
                uint64_t v127 = 4;
              }
              else if (v69[2])
              {
                uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 64, v125, v126);
              }
              else
              {
                uint64_t v127 = 0;
                int64x2_t v307 = 0u;
                int64x2_t v308 = 0u;
                int64x2_t v311 = 0u;
                int64x2_t v312 = 0u;
                int64x2_t v315 = 0u;
                int64x2_t v316 = 0u;
                int64x2_t v319 = 0u;
                int64x2_t v320 = 0u;
              }
              uint64_t v137 = v125 + v127;
              unsigned int v138 = v69[3];
              if (v138 == 127)
              {
                int64x2_t v141 = *(int64x2_t *)v137;
                int64x2_t v142 = *(int64x2_t *)(v137 + 16);
                int64x2_t v143 = *(int64x2_t *)(v137 + 32);
                int64x2_t v144 = *(int64x2_t *)(v137 + 48);
                int64x2_t v145 = *(int64x2_t *)(v137 + 64);
                int64x2_t v146 = *(int64x2_t *)(v137 + 80);
                int64x2_t v147 = *(int64x2_t *)(v137 + 96);
                int64x2_t v148 = *(int64x2_t *)(v137 + 112);
                int64x2_t v323 = vzip1q_s64(*(int64x2_t *)v137, v142);
                int64x2_t v324 = vzip1q_s64(v145, v146);
                int64x2_t v327 = vzip2q_s64(v141, v142);
                int64x2_t v328 = vzip2q_s64(v145, v146);
                int64x2_t v331 = vzip1q_s64(v143, v144);
                int64x2_t v332 = vzip1q_s64(v147, v148);
                int64x2_t v335 = vzip2q_s64(v143, v144);
                int64x2_t v336 = vzip2q_s64(v147, v148);
                uint64_t v139 = 128;
              }
              else if (v138 == 3)
              {
                float32x4_t v140 = vld1q_dup_f32((const float *)v137);
                int64x2_t v323 = (int64x2_t)v140;
                int64x2_t v324 = (int64x2_t)v140;
                int64x2_t v327 = (int64x2_t)v140;
                int64x2_t v328 = (int64x2_t)v140;
                int64x2_t v331 = (int64x2_t)v140;
                int64x2_t v332 = (int64x2_t)v140;
                int64x2_t v335 = (int64x2_t)v140;
                int64x2_t v336 = (int64x2_t)v140;
                uint64_t v139 = 4;
              }
              else if (v69[3])
              {
                uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v323, 64, v137, v138);
              }
              else
              {
                uint64_t v139 = 0;
                int64x2_t v323 = 0u;
                int64x2_t v324 = 0u;
                int64x2_t v327 = 0u;
                int64x2_t v328 = 0u;
                int64x2_t v331 = 0u;
                int64x2_t v332 = 0u;
                int64x2_t v335 = 0u;
                int64x2_t v336 = 0u;
              }
              uint64_t v149 = v137 + v139;
              unsigned int v150 = v69[4];
              if (v150 == 127)
              {
                int64x2_t v153 = *(int64x2_t *)v149;
                int64x2_t v154 = *(int64x2_t *)(v149 + 16);
                int64x2_t v155 = *(int64x2_t *)(v149 + 32);
                int64x2_t v156 = *(int64x2_t *)(v149 + 48);
                int64x2_t v157 = *(int64x2_t *)(v149 + 64);
                int64x2_t v158 = *(int64x2_t *)(v149 + 80);
                int64x2_t v159 = *(int64x2_t *)(v149 + 96);
                int64x2_t v160 = *(int64x2_t *)(v149 + 112);
                int64x2_t v337 = vzip1q_s64(*(int64x2_t *)v149, v154);
                int64x2_t v338 = vzip1q_s64(v157, v158);
                int64x2_t v341 = vzip2q_s64(v153, v154);
                int64x2_t v342 = vzip2q_s64(v157, v158);
                int64x2_t v345 = vzip1q_s64(v155, v156);
                int64x2_t v346 = vzip1q_s64(v159, v160);
                int64x2_t v349 = vzip2q_s64(v155, v156);
                int64x2_t v350 = vzip2q_s64(v159, v160);
                uint64_t v151 = 128;
              }
              else if (v150 == 3)
              {
                float32x4_t v152 = vld1q_dup_f32((const float *)v149);
                int64x2_t v337 = (int64x2_t)v152;
                int64x2_t v338 = (int64x2_t)v152;
                int64x2_t v341 = (int64x2_t)v152;
                int64x2_t v342 = (int64x2_t)v152;
                int64x2_t v345 = (int64x2_t)v152;
                int64x2_t v346 = (int64x2_t)v152;
                int64x2_t v349 = (int64x2_t)v152;
                int64x2_t v350 = (int64x2_t)v152;
                uint64_t v151 = 4;
              }
              else if (v69[4])
              {
                uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v337, 64, v149, v150);
              }
              else
              {
                uint64_t v151 = 0;
                int64x2_t v337 = 0u;
                int64x2_t v338 = 0u;
                int64x2_t v341 = 0u;
                int64x2_t v342 = 0u;
                int64x2_t v345 = 0u;
                int64x2_t v346 = 0u;
                int64x2_t v349 = 0u;
                int64x2_t v350 = 0u;
              }
              uint64_t v161 = v149 + v151;
              unsigned int v162 = v69[5];
              if (v162 == 127)
              {
                int64x2_t v165 = *(int64x2_t *)v161;
                int64x2_t v166 = *(int64x2_t *)(v161 + 16);
                int64x2_t v167 = *(int64x2_t *)(v161 + 32);
                int64x2_t v168 = *(int64x2_t *)(v161 + 48);
                int64x2_t v169 = *(int64x2_t *)(v161 + 64);
                int64x2_t v170 = *(int64x2_t *)(v161 + 80);
                int64x2_t v171 = *(int64x2_t *)(v161 + 96);
                int64x2_t v172 = *(int64x2_t *)(v161 + 112);
                int64x2_t v353 = vzip1q_s64(*(int64x2_t *)v161, v166);
                int64x2_t v354 = vzip1q_s64(v169, v170);
                int64x2_t v357 = vzip2q_s64(v165, v166);
                int64x2_t v358 = vzip2q_s64(v169, v170);
                int64x2_t v361 = vzip1q_s64(v167, v168);
                int64x2_t v362 = vzip1q_s64(v171, v172);
                int64x2_t v365 = vzip2q_s64(v167, v168);
                int64x2_t v366 = vzip2q_s64(v171, v172);
                uint64_t v163 = 128;
              }
              else if (v162 == 3)
              {
                float32x4_t v164 = vld1q_dup_f32((const float *)v161);
                int64x2_t v353 = (int64x2_t)v164;
                int64x2_t v354 = (int64x2_t)v164;
                int64x2_t v357 = (int64x2_t)v164;
                int64x2_t v358 = (int64x2_t)v164;
                int64x2_t v361 = (int64x2_t)v164;
                int64x2_t v362 = (int64x2_t)v164;
                int64x2_t v365 = (int64x2_t)v164;
                int64x2_t v366 = (int64x2_t)v164;
                uint64_t v163 = 4;
              }
              else if (v69[5])
              {
                uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v353, 64, v161, v162);
              }
              else
              {
                uint64_t v163 = 0;
                int64x2_t v353 = 0u;
                int64x2_t v354 = 0u;
                int64x2_t v357 = 0u;
                int64x2_t v358 = 0u;
                int64x2_t v361 = 0u;
                int64x2_t v362 = 0u;
                int64x2_t v365 = 0u;
                int64x2_t v366 = 0u;
              }
              uint64_t v173 = v161 + v163;
              unsigned int v174 = v69[6];
              if (v174 == 127)
              {
                int64x2_t v177 = *(int64x2_t *)v173;
                int64x2_t v178 = *(int64x2_t *)(v173 + 16);
                int64x2_t v179 = *(int64x2_t *)(v173 + 32);
                int64x2_t v180 = *(int64x2_t *)(v173 + 48);
                int64x2_t v181 = *(int64x2_t *)(v173 + 64);
                int64x2_t v182 = *(int64x2_t *)(v173 + 80);
                int64x2_t v183 = *(int64x2_t *)(v173 + 96);
                int64x2_t v184 = *(int64x2_t *)(v173 + 112);
                int64x2_t v339 = vzip1q_s64(*(int64x2_t *)v173, v178);
                int64x2_t v340 = vzip1q_s64(v181, v182);
                int64x2_t v343 = vzip2q_s64(v177, v178);
                int64x2_t v344 = vzip2q_s64(v181, v182);
                int64x2_t v347 = vzip1q_s64(v179, v180);
                int64x2_t v348 = vzip1q_s64(v183, v184);
                int64x2_t v351 = vzip2q_s64(v179, v180);
                int64x2_t v352 = vzip2q_s64(v183, v184);
                uint64_t v175 = 128;
              }
              else if (v174 == 3)
              {
                float32x4_t v176 = vld1q_dup_f32((const float *)v173);
                int64x2_t v339 = (int64x2_t)v176;
                int64x2_t v340 = (int64x2_t)v176;
                int64x2_t v343 = (int64x2_t)v176;
                int64x2_t v344 = (int64x2_t)v176;
                int64x2_t v347 = (int64x2_t)v176;
                int64x2_t v348 = (int64x2_t)v176;
                int64x2_t v351 = (int64x2_t)v176;
                int64x2_t v352 = (int64x2_t)v176;
                uint64_t v175 = 4;
              }
              else if (v69[6])
              {
                uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v339, 64, v173, v174);
              }
              else
              {
                uint64_t v175 = 0;
                int64x2_t v339 = 0u;
                int64x2_t v340 = 0u;
                int64x2_t v343 = 0u;
                int64x2_t v344 = 0u;
                int64x2_t v347 = 0u;
                int64x2_t v348 = 0u;
                int64x2_t v351 = 0u;
                int64x2_t v352 = 0u;
              }
              uint64_t v185 = v173 + v175;
              unsigned int v186 = v69[7];
              if (v186 == 127)
              {
                int64x2_t v189 = *(int64x2_t *)v185;
                int64x2_t v190 = *(int64x2_t *)(v185 + 16);
                int64x2_t v191 = *(int64x2_t *)(v185 + 32);
                int64x2_t v192 = *(int64x2_t *)(v185 + 48);
                int64x2_t v193 = *(int64x2_t *)(v185 + 64);
                int64x2_t v194 = *(int64x2_t *)(v185 + 80);
                int64x2_t v195 = *(int64x2_t *)(v185 + 96);
                int64x2_t v196 = *(int64x2_t *)(v185 + 112);
                int64x2_t v355 = vzip1q_s64(*(int64x2_t *)v185, v190);
                int64x2_t v356 = vzip1q_s64(v193, v194);
                int64x2_t v359 = vzip2q_s64(v189, v190);
                int64x2_t v360 = vzip2q_s64(v193, v194);
                int64x2_t v363 = vzip1q_s64(v191, v192);
                int64x2_t v364 = vzip1q_s64(v195, v196);
                int64x2_t v367 = vzip2q_s64(v191, v192);
                int64x2_t v368 = vzip2q_s64(v195, v196);
                uint64_t v187 = v300;
                if (v300) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v186 != 3)
                {
                  if (v69[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v355, 64, v185, v186);
                    uint64_t v187 = v300;
                    if (!v300) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    int64x2_t v355 = 0u;
                    int64x2_t v356 = 0u;
                    int64x2_t v359 = 0u;
                    int64x2_t v360 = 0u;
                    int64x2_t v363 = 0u;
                    int64x2_t v364 = 0u;
                    int64x2_t v367 = 0u;
                    int64x2_t v368 = 0u;
                    uint64_t v187 = v300;
                    if (!v300) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v301) {
                    goto LABEL_205;
                  }
                  uint64_t v197 = 0;
                  unint64_t v198 = (unint64_t)v298 << 6;
                  uint64_t v199 = 4 * v299;
                  int64x2_t v200 = &v305.i8[v198 + v199];
                  uint64_t v201 = v296;
                  uint64_t v202 = v297;
                  unint64_t v203 = 4 * v301;
                  if (v203 <= 1) {
                    unint64_t v204 = 1;
                  }
                  else {
                    unint64_t v204 = 4 * v301;
                  }
                  unint64_t v205 = v198 + v199;
                  unsigned int v206 = &v305.i8[v198 + v199];
                  if (v204) {
                    BOOL v207 = (v204 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v207 = 0;
                  }
                  uint64_t v208 = v204 & 0x3FFFFFFE0;
                  uint64_t v209 = v204 & 0x3FFFFFFF8;
                  char v211 = !v207 || v204 < 8;
                  BOOL v212 = &v306.i8[v205];
                  int v213 = (long long *)(v296 + 16);
                  unint64_t v214 = v200;
                  uint64_t v215 = v296;
                  while (2)
                  {
                    int v216 = (char *)(v201 + v202 * v197);
                    unsigned int v217 = &v200[64 * v197];
                    if ((unint64_t)(&v206[64 * v197] - v216) < 0x20) {
                      char v218 = 1;
                    }
                    else {
                      char v218 = v211;
                    }
                    if (v218)
                    {
                      int v219 = 0;
LABEL_202:
                      unsigned int v229 = v219 + 1;
                      do
                      {
                        char v230 = *v216++;
                        *v217++ = v230;
                      }
                      while (v203 > v229++);
                    }
                    else
                    {
                      if (v204 >= 0x20)
                      {
                        unsigned int v221 = v213;
                        int v222 = v212;
                        uint64_t v223 = v204 & 0x3FFFFFFE0;
                        do
                        {
                          long long v224 = *v221;
                          *((_OWORD *)v222 - 1) = *(v221 - 1);
                          *(_OWORD *)int v222 = v224;
                          v222 += 32;
                          v221 += 2;
                          v223 -= 32;
                        }
                        while (v223);
                        if (v204 == v208) {
                          goto LABEL_185;
                        }
                        uint64_t v220 = v204 & 0x3FFFFFFE0;
                        if ((v204 & 0x18) == 0)
                        {
                          v216 += v208;
                          v217 += v208;
                          int v219 = v204 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        uint64_t v220 = 0;
                      }
                      v217 += v209;
                      uint64_t v225 = v220 - v209;
                      __int32 v226 = (uint64_t *)(v215 + v220);
                      unsigned int v227 = &v214[v220];
                      do
                      {
                        uint64_t v228 = *v226++;
                        *(void *)unsigned int v227 = v228;
                        v227 += 8;
                        v225 += 8;
                      }
                      while (v225);
                      if (v204 != v209)
                      {
                        v216 += v209;
                        int v219 = v204 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v197;
                    v212 += 64;
                    int v213 = (long long *)((char *)v213 + v202);
                    v215 += v202;
                    v214 += 64;
                    if (v197 == v187) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                float32x4_t v188 = vld1q_dup_f32((const float *)v185);
                int64x2_t v355 = (int64x2_t)v188;
                int64x2_t v356 = (int64x2_t)v188;
                int64x2_t v359 = (int64x2_t)v188;
                int64x2_t v360 = (int64x2_t)v188;
                int64x2_t v363 = (int64x2_t)v188;
                int64x2_t v364 = (int64x2_t)v188;
                int64x2_t v367 = (int64x2_t)v188;
                int64x2_t v368 = (int64x2_t)v188;
                uint64_t v187 = v300;
                if (v300) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              uint64_t v232 = 0;
              int v233 = v294;
              unsigned int v234 = v295;
              int v235 = v302;
              int v236 = v303;
              a7 = v280;
              uint64_t v26 = v289;
              uint64_t v30 = 2 * a11;
              uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
              do
              {
                uint64_t v251 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v232 + 1];
                uint64_t v252 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v232];
                unsigned int v253 = (v235 - 8 * v252) & ~((v235 - 8 * (int)v252) >> 31);
                if (v253 >= 8) {
                  unsigned int v253 = 8;
                }
                unsigned int v254 = (v236 - 4 * v251) & ~((v236 - 4 * (int)v251) >> 31);
                if (v254 >= 4) {
                  unsigned int v254 = 4;
                }
                if (v253) {
                  BOOL v255 = v254 == 0;
                }
                else {
                  BOOL v255 = 1;
                }
                if (v255)
                {
                  char v250 = 0;
                }
                else
                {
                  int v237 = &v305 + 16 * v251 + 2 * v252;
                  int64x2_t v238 = v237[1];
                  int64x2_t v239 = v237[4];
                  int64x2_t v240 = v237[5];
                  int64x2_t v241 = vzip1q_s64(*v237, v239);
                  int64x2_t v242 = vzip2q_s64(*v237, v239);
                  int64x2_t v243 = vzip1q_s64(v238, v240);
                  int64x2_t v244 = vzip2q_s64(v238, v240);
                  int64x2_t v245 = v237[8];
                  int64x2_t v246 = v237[9];
                  v237 += 12;
                  int64x2_t v247 = v237[1];
                  int64x2_t v248 = vzip1q_s64(v245, *v237);
                  int64x2_t v249 = vzip2q_s64(v245, *v237);
                  *int v233 = v241;
                  v233[1] = v242;
                  v233[2] = v248;
                  v233[3] = v249;
                  v233[4] = v243;
                  v233[5] = v244;
                  v233[6] = vzip1q_s64(v246, v247);
                  v233[7] = vzip2q_s64(v246, v247);
                  v233 += 8;
                  char v250 = 127;
                }
                *v234++ = v250;
                v232 += 2;
              }
              while (v232 != 16);
LABEL_95:
              int v71 = __dst;
              if (v292) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            float32x4_t v77 = (int64x2_t *)v304;
          }
          else
          {
            float32x4_t v77 = v71;
            if (v72) {
              goto LABEL_93;
            }
          }
          uint64_t v78 = 0;
          int64x2_t v79 = v77;
          do
          {
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v78 + 1];
            uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v78];
            unsigned int v99 = (v39 - 8 * v98) & ~((int)(v39 - 8 * v98) >> 31);
            if (v99 >= 8) {
              unsigned int v99 = 8;
            }
            unsigned int v100 = (v34 - 4 * v97) & ~((int)(v34 - 4 * v97) >> 31);
            if (v100 >= 4) {
              unsigned int v100 = 4;
            }
            if (v99) {
              BOOL v101 = v100 == 0;
            }
            else {
              BOOL v101 = 1;
            }
            if (v101)
            {
              char v96 = 0;
            }
            else
            {
              int64x2_t v80 = (int64x2_t *)(v70 + 4 * a11 * v97 + 32 * v98);
              int64x2_t v81 = (int64x2_t *)((char *)v80 + v29);
              int64x2_t v83 = *v80;
              int64x2_t v84 = v80[1];
              int64x2_t v82 = (int64x2_t *)((char *)v80 + v30);
              int64x2_t v85 = v81[1];
              int64x2_t v86 = vzip1q_s64(v83, *v81);
              int64x2_t v87 = vzip2q_s64(v83, *v81);
              int64x2_t v88 = vzip1q_s64(v84, v85);
              int64x2_t v89 = vzip2q_s64(v84, v85);
              int64x2_t v91 = *v82;
              int64x2_t v92 = v82[1];
              int64x2_t v90 = (int64x2_t *)((char *)v82 + v29);
              int64x2_t v93 = v90[1];
              int64x2_t v94 = vzip1q_s64(v91, *v90);
              int64x2_t v95 = vzip2q_s64(v91, *v90);
              *int64x2_t v79 = v86;
              v79[1] = v87;
              v79[2] = v94;
              v79[3] = v95;
              v79[4] = v88;
              v79[5] = v89;
              v79[6] = vzip1q_s64(v92, v93);
              v79[7] = vzip2q_s64(v92, v93);
              v79 += 8;
              char v96 = 127;
            }
            *v69++ = v96;
            v78 += 2;
          }
          while (v78 != 16);
          a7 = v280;
          if (v292)
          {
LABEL_27:
            memcpy(v71, v77, 0x400uLL);
            uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
            uint64_t v30 = 2 * a11;
            uint64_t v26 = v289;
          }
LABEL_28:
          BOOL v21 = v33++ == v281 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v272;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v188 = a8;
  unsigned int v172 = a8 + a10 - 1;
  uint64_t v189 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  unsigned int v22 = a5 - 1;
  unsigned int v23 = a6 - 1;
  unsigned int v24 = a8 >> 4;
  unsigned int v171 = v172 >> 4;
  BOOL v25 = (v21 & 0xD00) == 0 || v21 == 768;
  int v26 = v21 & 0xE00;
  int v28 = !v25 && v26 != 1024;
  int v193 = v28;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v30 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v31 = *(unsigned __int8 *)(a1 + 254);
    char v32 = __clz(v22);
    if (1 << v30 >= a6 || a5 >> v31)
    {
      if (!(a6 >> v30) && 1 << v31 < a5)
      {
        if (a6 < 2) {
          unsigned int v35 = 0;
        }
        else {
          unsigned int v35 = __clz(~(-1 << -(char)__clz(v23))) - 32;
        }
        v31 += v30 + v35;
        unsigned int v30 = -v35;
      }
    }
    else
    {
      unsigned int v33 = 32 - __clz(~(-1 << -v32));
      unsigned int v34 = v31 + v30;
      if (a5 < 2) {
        unsigned int v33 = 0;
      }
      unsigned int v30 = v34 - v33;
      unsigned int v31 = v33;
    }
    if (a5 < 2)
    {
      if (v31) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v32)) < v31)
    {
LABEL_27:
      BOOL v183 = 0;
LABEL_32:
      unsigned int v180 = v31 - 4;
      unsigned int v176 = v30 - 4;
      int v37 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v169 = (((~v37 + a5) & v37) + ~(-1 << v31)) >> v31;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = 32 - __clz(~(-1 << -(char)__clz(v23)));
    }
    BOOL v183 = v36 >= v30;
    goto LABEL_32;
  }
  BOOL v183 = 0;
  unsigned int v169 = 0;
  unsigned int v176 = 0;
  unsigned int v180 = 0;
LABEL_33:
  if (v24 <= v171)
  {
    unsigned int v182 = a7 + a9 - 1;
    unsigned int v168 = a7 >> 4;
    if (a7 >> 4 <= v182 >> 4)
    {
      unsigned int v191 = v22 >> 4;
      unsigned int v167 = v23 >> 4;
      int v190 = (v22 & 0xF) + 1;
      int v166 = (v23 & 0xF) + 1;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v39.i64[0] = 0x2000000020;
      *(int32x2_t *)v40.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v38, 4uLL)));
      *(int32x2_t *)v41.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v40.i8))));
      *(int8x8_t *)v42.i8 = vbic_s8(*(int8x8_t *)v41.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v38));
      __int32 v178 = v42.i32[0] | v42.i32[1];
      BOOL v174 = v42.i32[1] != 0;
      uint64_t v175 = v42.i64[0];
      BOOL v173 = v42.i32[0] != 0;
      unsigned int v181 = a7;
      do
      {
        unsigned int v43 = (16 * v24) | 0xF;
        if (16 * v24 <= v188) {
          int v44 = v188;
        }
        else {
          int v44 = 16 * v24;
        }
        if (v172 < v43) {
          unsigned int v43 = v172;
        }
        int v179 = v44 - 16 * v24;
        int v187 = v43 - v44 + 1;
        unsigned int v45 = v168;
        int v46 = v166;
        if (v24 != v167) {
          int v46 = 16;
        }
        unsigned int v194 = v46;
        uint64_t v47 = v24 & ~(-1 << v176);
        uint64_t v186 = a3 + (v44 - v188) * a11;
        do
        {
          unsigned int v48 = 16 * v45;
          unsigned int v49 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= a7) {
            int v50 = a7;
          }
          else {
            int v50 = 16 * v45;
          }
          if (v182 < v49) {
            unsigned int v49 = v182;
          }
          int v51 = v49 - v50 + 1;
          if (v45 == v191) {
            unsigned int v52 = v190;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (16 * v24 >= v188 && v48 >= a7)
          {
            int v54 = v190;
            if (v45 != v191) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v187 != v194;
          }
          if (v183)
          {
            if (v180 | v176)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v180 != 0;
              BOOL v60 = v176 != 0;
              unsigned int v61 = v180;
              unsigned int v62 = v176;
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v45 & ~(-1 << v180) & v58) << v56++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v47 & v58) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v45 >> v180) + (v24 >> v176) * v169) + (v57 << 9);
          }
          else
          {
            if (v178)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v174;
              BOOL v67 = v173;
              int v68 = HIDWORD(v175);
              int v69 = v175;
              do
              {
                --v68;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v45) << v63++;
                }
                else {
                  int v68 = 0;
                }
                --v69;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v24) << v63++;
                }
                else {
                  int v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v67 = v69 != 0;
                BOOL v66 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 9;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20)
          {
            unsigned int v76 = 0;
            if (!v73)
            {
LABEL_109:
              uint64_t v78 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
            if (!(v76 | v73)) {
              goto LABEL_109;
            }
          }
          int v77 = 0;
          uint64_t v78 = 0;
          BOOL v79 = v73 != 0;
          BOOL v80 = v76 != 0;
          int v81 = 1;
          do
          {
            --v73;
            if (v79) {
              v78 |= (unint64_t)(v81 & v45) << v77++;
            }
            else {
              unsigned int v73 = 0;
            }
            --v76;
            if (v80) {
              v78 |= (unint64_t)(v81 & v24) << v77++;
            }
            else {
              unsigned int v76 = 0;
            }
            v81 *= 2;
            --v77;
            BOOL v80 = v76 != 0;
            BOOL v79 = v73 != 0;
          }
          while (v76 | v73);
LABEL_110:
          unsigned int v82 = v50 - a7;
          int v83 = v52 < 0x10 || v53;
          int64x2_t v84 = (char *)(a4 + 8 * v78);
          unint64_t v85 = v186 + 2 * v82;
          int64x2_t v86 = (int16x8_t *)(a2 + v70);
          if (v194 < 0x10) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          int64x2_t v192 = v86;
          if (v193)
          {
            int64x2_t v88 = (int16x8_t *)__dst;
            if (!v87) {
              goto LABEL_122;
            }
            int64x2_t v177 = (char *)(a4 + 8 * v78);
            int v89 = v51;
            char v90 = v52;
            uint64_t v91 = v47;
            BOOL v92 = v53;
            memcpy(__dst, v86, sizeof(__dst));
            BOOL v53 = v92;
            uint64_t v47 = v91;
            LOBYTE(v52) = v90;
            int v51 = v89;
            int64x2_t v84 = v177;
            uint64_t result = v189;
          }
          else
          {
            int64x2_t v88 = v86;
            if (!v87)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v85, a11, v88, v84, v52, v194, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(double *)v39.i64, *(double *)v17.i64, v18, v19, v20);
              a7 = v181;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v196 = v88;
          unsigned __int8 v204 = v52;
          unsigned __int8 v205 = v194;
          unsigned int v200 = v179;
          unsigned int v201 = v50 - v48;
          uint64_t v197 = v84;
          unint64_t v198 = v85;
          uint64_t v199 = a11;
          unsigned int v202 = v187;
          unsigned int v203 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v181;
            goto LABEL_217;
          }
          unsigned int v93 = *v84;
          if (v93 == 63)
          {
            int32x4_t v95 = (int32x4_t)v88[1];
            int32x4_t v40 = (int32x4_t)v88[2];
            int32x4_t v39 = (int32x4_t)v88[3];
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v88, v40);
            int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v88, v40);
            int32x4_t v207 = v17;
            int32x4_t v209 = v96;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v95, v39);
            int32x4_t v41 = vuzp2q_s32(v95, v39);
            int16x8_t v211 = v42;
            int32x4_t v213 = v41;
            uint64_t v94 = 64;
          }
          else if (v93 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16(v88->i16);
            int32x4_t v207 = (int32x4_t)v42;
            int32x4_t v209 = (int32x4_t)v42;
            int16x8_t v211 = v42;
            int32x4_t v213 = (int32x4_t)v42;
            uint64_t v94 = 2;
          }
          else if (*v84)
          {
            uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v207, 32, (uint64_t)v88, v93, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v94 = 0;
            int32x4_t v207 = 0uLL;
            int32x4_t v209 = 0uLL;
            int16x8_t v211 = 0uLL;
            int32x4_t v213 = 0uLL;
          }
          uint64_t v97 = (uint64_t)v88->i64 + v94;
          unsigned int v98 = v84[1];
          if (v98 == 63)
          {
            int32x4_t v100 = *(int32x4_t *)(v97 + 16);
            int32x4_t v40 = *(int32x4_t *)(v97 + 32);
            int32x4_t v39 = *(int32x4_t *)(v97 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v97, v40);
            int32x4_t v101 = vuzp2q_s32(*(int32x4_t *)v97, v40);
            int32x4_t v215 = v17;
            int32x4_t v217 = v101;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v100, v39);
            int32x4_t v41 = vuzp2q_s32(v100, v39);
            int16x8_t v219 = v42;
            int32x4_t v221 = v41;
            uint64_t v99 = 64;
          }
          else if (v98 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v97);
            int32x4_t v215 = (int32x4_t)v42;
            int32x4_t v217 = (int32x4_t)v42;
            int16x8_t v219 = v42;
            int32x4_t v221 = (int32x4_t)v42;
            uint64_t v99 = 2;
          }
          else if (v84[1])
          {
            uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 32, v97, v98, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v99 = 0;
            int32x4_t v215 = 0uLL;
            int32x4_t v217 = 0uLL;
            int16x8_t v219 = 0uLL;
            int32x4_t v221 = 0uLL;
          }
          uint64_t v102 = v97 + v99;
          unsigned int v103 = v84[2];
          if (v103 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v102 + 16);
            int32x4_t v40 = *(int32x4_t *)(v102 + 32);
            int32x4_t v39 = *(int32x4_t *)(v102 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v102, v40);
            int32x4_t v106 = vuzp2q_s32(*(int32x4_t *)v102, v40);
            int32x4_t v208 = v17;
            int32x4_t v210 = v106;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v105, v39);
            int32x4_t v41 = vuzp2q_s32(v105, v39);
            int16x8_t v212 = v42;
            int32x4_t v214 = v41;
            uint64_t v104 = 64;
          }
          else if (v103 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v102);
            int32x4_t v208 = (int32x4_t)v42;
            int32x4_t v210 = (int32x4_t)v42;
            int16x8_t v212 = v42;
            int32x4_t v214 = (int32x4_t)v42;
            uint64_t v104 = 2;
          }
          else if (v84[2])
          {
            uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 32, v102, v103, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v104 = 0;
            int32x4_t v208 = 0uLL;
            int32x4_t v210 = 0uLL;
            int16x8_t v212 = 0uLL;
            int32x4_t v214 = 0uLL;
          }
          uint64_t v107 = v102 + v104;
          unsigned int v108 = v84[3];
          if (v108 == 63)
          {
            int32x4_t v110 = *(int32x4_t *)(v107 + 16);
            int32x4_t v40 = *(int32x4_t *)(v107 + 32);
            int32x4_t v39 = *(int32x4_t *)(v107 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v107, v40);
            int32x4_t v111 = vuzp2q_s32(*(int32x4_t *)v107, v40);
            int32x4_t v216 = v17;
            int32x4_t v218 = v111;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v110, v39);
            int32x4_t v41 = vuzp2q_s32(v110, v39);
            int16x8_t v220 = v42;
            int32x4_t v222 = v41;
            uint64_t v109 = 64;
          }
          else if (v108 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v107);
            int32x4_t v216 = (int32x4_t)v42;
            int32x4_t v218 = (int32x4_t)v42;
            int16x8_t v220 = v42;
            int32x4_t v222 = (int32x4_t)v42;
            uint64_t v109 = 2;
          }
          else if (v84[3])
          {
            uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 32, v107, v108, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v109 = 0;
            int32x4_t v216 = 0uLL;
            int32x4_t v218 = 0uLL;
            int16x8_t v220 = 0uLL;
            int32x4_t v222 = 0uLL;
          }
          uint64_t v112 = v107 + v109;
          unsigned int v113 = v84[4];
          if (v113 == 63)
          {
            int32x4_t v115 = *(int32x4_t *)(v112 + 16);
            int32x4_t v40 = *(int32x4_t *)(v112 + 32);
            int32x4_t v39 = *(int32x4_t *)(v112 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v112, v40);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v112, v40);
            int32x4_t v223 = v17;
            int32x4_t v225 = v116;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v115, v39);
            int32x4_t v41 = vuzp2q_s32(v115, v39);
            int16x8_t v227 = v42;
            int32x4_t v229 = v41;
            uint64_t v114 = 64;
          }
          else if (v113 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v112);
            int32x4_t v223 = (int32x4_t)v42;
            int32x4_t v225 = (int32x4_t)v42;
            int16x8_t v227 = v42;
            int32x4_t v229 = (int32x4_t)v42;
            uint64_t v114 = 2;
          }
          else if (v84[4])
          {
            uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 32, v112, v113, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v114 = 0;
            int32x4_t v223 = 0uLL;
            int32x4_t v225 = 0uLL;
            int16x8_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
          }
          uint64_t v117 = v112 + v114;
          unsigned int v118 = v84[5];
          if (v118 == 63)
          {
            int32x4_t v120 = *(int32x4_t *)(v117 + 16);
            int32x4_t v40 = *(int32x4_t *)(v117 + 32);
            int32x4_t v39 = *(int32x4_t *)(v117 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v117, v40);
            int32x4_t v121 = vuzp2q_s32(*(int32x4_t *)v117, v40);
            int32x4_t v231 = v17;
            int32x4_t v233 = v121;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v120, v39);
            int32x4_t v41 = vuzp2q_s32(v120, v39);
            int16x8_t v235 = v42;
            int32x4_t v237 = v41;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v231 = (int32x4_t)v42;
            int32x4_t v233 = (int32x4_t)v42;
            int16x8_t v235 = v42;
            int32x4_t v237 = (int32x4_t)v42;
            uint64_t v119 = 2;
          }
          else if (v84[5])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 32, v117, v118, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
            int16x8_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
          }
          uint64_t v122 = v117 + v119;
          unsigned int v123 = v84[6];
          if (v123 == 63)
          {
            int32x4_t v125 = *(int32x4_t *)(v122 + 16);
            int32x4_t v40 = *(int32x4_t *)(v122 + 32);
            int32x4_t v39 = *(int32x4_t *)(v122 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v122, v40);
            int32x4_t v126 = vuzp2q_s32(*(int32x4_t *)v122, v40);
            int32x4_t v224 = v17;
            int32x4_t v226 = v126;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v125, v39);
            int32x4_t v41 = vuzp2q_s32(v125, v39);
            int16x8_t v228 = v42;
            int32x4_t v230 = v41;
            uint64_t v124 = 64;
          }
          else if (v123 == 1)
          {
            int16x8_t v42 = vld1q_dup_s16((const __int16 *)v122);
            int32x4_t v224 = (int32x4_t)v42;
            int32x4_t v226 = (int32x4_t)v42;
            int16x8_t v228 = v42;
            int32x4_t v230 = (int32x4_t)v42;
            uint64_t v124 = 2;
          }
          else if (v84[6])
          {
            uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 32, v122, v123, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
          }
          else
          {
            uint64_t v124 = 0;
            int32x4_t v224 = 0uLL;
            int32x4_t v226 = 0uLL;
            int16x8_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
          }
          uint64_t v127 = v122 + v124;
          unsigned int v128 = v84[7];
          if (v128 == 63)
          {
            int32x4_t v130 = *(int32x4_t *)(v127 + 16);
            int32x4_t v40 = *(int32x4_t *)(v127 + 32);
            int32x4_t v39 = *(int32x4_t *)(v127 + 48);
            int32x4_t v17 = vuzp1q_s32(*(int32x4_t *)v127, v40);
            int32x4_t v131 = vuzp2q_s32(*(int32x4_t *)v127, v40);
            int32x4_t v232 = v17;
            int32x4_t v234 = v131;
            int16x8_t v42 = (int16x8_t)vuzp1q_s32(v130, v39);
            int32x4_t v41 = vuzp2q_s32(v130, v39);
            int16x8_t v236 = v42;
            int32x4_t v238 = v41;
            a7 = v181;
            uint64_t v129 = v202;
            if (!v202) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v181;
            if (v128 == 1)
            {
              int16x8_t v42 = vld1q_dup_s16((const __int16 *)v127);
              int32x4_t v232 = (int32x4_t)v42;
              int32x4_t v234 = (int32x4_t)v42;
              int16x8_t v236 = v42;
              int32x4_t v238 = (int32x4_t)v42;
              uint64_t v129 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
            else if (v128)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 32, v127, v128, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(int8x8_t *)v39.i8);
              uint64_t v129 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
              int16x8_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              uint64_t v129 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
          }
          if (v203)
          {
            uint64_t v132 = 0;
            uint64_t v133 = 32 * v200;
            uint64_t v134 = 2 * v201;
            int64x2_t v135 = &v207.i8[v133 + v134];
            unint64_t v136 = v198;
            uint64_t v137 = v199;
            unint64_t v138 = 2 * v203;
            if (v138 <= 1) {
              unint64_t v139 = 1;
            }
            else {
              unint64_t v139 = 2 * v203;
            }
            uint64_t v140 = v133 + v134;
            int64x2_t v141 = &v207.i8[v133 + v134];
            if (v139) {
              BOOL v142 = (v139 - 1) >> 32 == 0;
            }
            else {
              BOOL v142 = 0;
            }
            uint64_t v143 = v139 & 0x1FFFFFFE0;
            uint64_t v144 = v139 & 0x1FFFFFFF8;
            char v146 = !v142 || v139 < 8;
            int64x2_t v147 = &v208.i8[v140];
            int64x2_t v148 = (int16x8_t *)(v198 + 16);
            uint64_t v149 = v135;
            unint64_t v150 = v198;
            do
            {
              uint64_t v151 = (char *)(v136 + v137 * v132);
              float32x4_t v152 = &v135[32 * v132];
              if ((unint64_t)(&v141[32 * v132] - v151) < 0x20) {
                char v153 = 1;
              }
              else {
                char v153 = v146;
              }
              if (v153)
              {
                int v154 = 0;
                goto LABEL_213;
              }
              if (v139 >= 0x20)
              {
                int64x2_t v156 = v148;
                int64x2_t v157 = (int32x4_t *)v147;
                uint64_t v158 = v139 & 0x1FFFFFFE0;
                do
                {
                  int16x8_t v42 = v156[-1];
                  int32x4_t v41 = *(int32x4_t *)v156;
                  v157[-1] = (int32x4_t)v42;
                  *int64x2_t v157 = v41;
                  v157 += 2;
                  v156 += 2;
                  v158 -= 32;
                }
                while (v158);
                if (v139 == v143) {
                  goto LABEL_196;
                }
                uint64_t v155 = v139 & 0x1FFFFFFE0;
                if ((v139 & 0x18) == 0)
                {
                  v151 += v143;
                  v152 += v143;
                  int v154 = v139 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v155 = 0;
              }
              v152 += v144;
              uint64_t v159 = v155 - v144;
              int64x2_t v160 = (uint64_t *)(v150 + v155);
              uint64_t v161 = (uint64_t *)&v149[v155];
              do
              {
                uint64_t v162 = *v160++;
                v42.i64[0] = v162;
                *v161++ = v162;
                v159 += 8;
              }
              while (v159);
              if (v139 == v144) {
                goto LABEL_196;
              }
              v151 += v144;
              int v154 = v139 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v163 = v154 + 1;
              do
              {
                char v164 = *v151++;
                *v152++ = v164;
              }
              while (v138 > v163++);
LABEL_196:
              ++v132;
              v147 += 32;
              int64x2_t v148 = (int16x8_t *)((char *)v148 + v137);
              v150 += v137;
              v149 += 32;
            }
            while (v132 != v129);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v207, 32, v196, v197, v204, v205, *(double *)v42.i64, *(double *)v41.i64, *(double *)v40.i64, *(double *)v39.i64, *(double *)v17.i64, v18, v19, v20);
LABEL_217:
          if (v193) {
            memcpy(v192, v88, 0x200uLL);
          }
          BOOL v25 = v45++ == v182 >> 4;
          uint64_t result = v189;
        }
        while (!v25);
        BOOL v25 = v24++ == v171;
      }
      while (!v25);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v188 = a8;
  unsigned int v172 = a8 + a10 - 1;
  uint64_t v189 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v171 = v172 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v193 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v183 = 0;
LABEL_32:
      unsigned int v180 = v27 - 4;
      unsigned int v176 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v169 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v183 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v183 = 0;
  unsigned int v169 = 0;
  unsigned int v176 = 0;
  unsigned int v180 = 0;
LABEL_33:
  if (v20 <= v171)
  {
    unsigned int v182 = a7 + a9 - 1;
    unsigned int v168 = a7 >> 4;
    if (a7 >> 4 <= v182 >> 4)
    {
      unsigned int v191 = v18 >> 4;
      unsigned int v167 = v19 >> 4;
      int v190 = (v18 & 0xF) + 1;
      int v166 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v35.i64[0] = 0x2000000020;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL)));
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v36.i8))));
      *(int8x8_t *)v38.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v178 = v38.i32[0] | v38.i32[1];
      BOOL v174 = v38.i32[1] != 0;
      uint64_t v175 = v38.i64[0];
      BOOL v173 = v38.i32[0] != 0;
      unsigned int v181 = a7;
      do
      {
        unsigned int v39 = (16 * v20) | 0xF;
        if (16 * v20 <= v188) {
          int v40 = v188;
        }
        else {
          int v40 = 16 * v20;
        }
        if (v172 < v39) {
          unsigned int v39 = v172;
        }
        int v179 = v40 - 16 * v20;
        int v187 = v39 - v40 + 1;
        unsigned int v41 = v168;
        int v42 = v166;
        if (v20 != v167) {
          int v42 = 16;
        }
        unsigned int v194 = v42;
        uint64_t v43 = v20 & ~(-1 << v176);
        uint64_t v186 = a3 + (v40 - v188) * a11;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v182 < v45) {
            unsigned int v45 = v182;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v191) {
            unsigned int v48 = v190;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v20 >= v188 && v44 >= a7)
          {
            int v50 = v190;
            if (v41 != v191) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v187 != v194;
          }
          if (v183)
          {
            if (v180 | v176)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              int v54 = 1;
              BOOL v55 = v180 != 0;
              BOOL v56 = v176 != 0;
              unsigned int v57 = v180;
              unsigned int v58 = v176;
              do
              {
                --v57;
                if (v55) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v180) & v54) << v52++;
                }
                else {
                  unsigned int v57 = 0;
                }
                --v58;
                if (v56) {
                  v53 |= (unint64_t)(v43 & v54) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                v54 *= 2;
                --v52;
                BOOL v56 = v58 != 0;
                BOOL v55 = v57 != 0;
              }
              while (v58 | v57);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v180) + (v20 >> v176) * v169) + (v53 << 9);
          }
          else
          {
            if (v178)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v174;
              BOOL v63 = v173;
              int v64 = HIDWORD(v175);
              int v65 = v175;
              do
              {
                --v64;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  int v64 = 0;
                }
                --v65;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  int v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v63 = v65 != 0;
                BOOL v62 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 9;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_109:
              uint64_t v74 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_109;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_110:
          unsigned int v78 = v46 - a7;
          int v79 = v48 < 0x10 || v49;
          BOOL v80 = (char *)(a4 + 8 * v74);
          int v81 = (float32x2x2_t *)(v186 + 2 * v78);
          unsigned int v82 = (int32x4_t *)(a2 + v66);
          if (v194 < 0x10) {
            int v83 = 1;
          }
          else {
            int v83 = v79;
          }
          int64x2_t v192 = v82;
          if (v193)
          {
            int64x2_t v84 = (int32x4_t *)__dst;
            if (!v83) {
              goto LABEL_122;
            }
            int64x2_t v177 = (char *)(a4 + 8 * v74);
            int v85 = v47;
            char v86 = v48;
            uint64_t v87 = v43;
            BOOL v88 = v49;
            memcpy(__dst, v82, sizeof(__dst));
            BOOL v49 = v88;
            uint64_t v43 = v87;
            LOBYTE(v48) = v86;
            int v47 = v85;
            BOOL v80 = v177;
            uint64_t result = v189;
          }
          else
          {
            int64x2_t v84 = v82;
            if (!v83)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v81, a11, (uint64_t)v84, v80, v48, v194);
              a7 = v181;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v196 = v84;
          unsigned __int8 v204 = v48;
          unsigned __int8 v205 = v194;
          unsigned int v200 = v179;
          unsigned int v201 = v46 - v44;
          uint64_t v197 = v80;
          unint64_t v198 = v81;
          uint64_t v199 = a11;
          unsigned int v202 = v187;
          unsigned int v203 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v181;
            goto LABEL_217;
          }
          unsigned int v89 = *v80;
          if (v89 == 63)
          {
            int32x4_t v91 = v84[1];
            int32x4_t v36 = v84[2];
            int32x4_t v35 = v84[3];
            int32x4_t v92 = vuzp2q_s32(*v84, v36);
            unsigned long long v207 = (unsigned __int128)vuzp1q_s32(*v84, v36);
            int32x4_t v209 = v92;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v91, v35);
            int32x4_t v37 = vuzp2q_s32(v91, v35);
            int16x8_t v211 = v38;
            int32x4_t v213 = v37;
            uint64_t v90 = 64;
          }
          else if (v89 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16(v84->i16);
            unsigned long long v207 = (unsigned __int128)v38;
            int32x4_t v209 = (int32x4_t)v38;
            int16x8_t v211 = v38;
            int32x4_t v213 = (int32x4_t)v38;
            uint64_t v90 = 2;
          }
          else if (*v80)
          {
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v207, 32, (uint64_t)v84, v89, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v90 = 0;
            unsigned long long v207 = 0uLL;
            int32x4_t v209 = 0uLL;
            int16x8_t v211 = 0uLL;
            int32x4_t v213 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v84->i64 + v90;
          unsigned int v94 = v80[1];
          if (v94 == 63)
          {
            int32x4_t v96 = *(int32x4_t *)(v93 + 16);
            int32x4_t v36 = *(int32x4_t *)(v93 + 32);
            int32x4_t v35 = *(int32x4_t *)(v93 + 48);
            int32x4_t v97 = vuzp2q_s32(*(int32x4_t *)v93, v36);
            int32x4_t v215 = vuzp1q_s32(*(int32x4_t *)v93, v36);
            int32x4_t v217 = v97;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v96, v35);
            int32x4_t v37 = vuzp2q_s32(v96, v35);
            int16x8_t v219 = v38;
            int32x4_t v221 = v37;
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v215 = (int32x4_t)v38;
            int32x4_t v217 = (int32x4_t)v38;
            int16x8_t v219 = v38;
            int32x4_t v221 = (int32x4_t)v38;
            uint64_t v95 = 2;
          }
          else if (v80[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v215, 32, v93, v94, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v215 = 0uLL;
            int32x4_t v217 = 0uLL;
            int16x8_t v219 = 0uLL;
            int32x4_t v221 = 0uLL;
          }
          uint64_t v98 = v93 + v95;
          unsigned int v99 = v80[2];
          if (v99 == 63)
          {
            int32x4_t v101 = *(int32x4_t *)(v98 + 16);
            int32x4_t v36 = *(int32x4_t *)(v98 + 32);
            int32x4_t v35 = *(int32x4_t *)(v98 + 48);
            int32x4_t v102 = vuzp2q_s32(*(int32x4_t *)v98, v36);
            int32x4_t v208 = vuzp1q_s32(*(int32x4_t *)v98, v36);
            int32x4_t v210 = v102;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v101, v35);
            int32x4_t v37 = vuzp2q_s32(v101, v35);
            int16x8_t v212 = v38;
            int32x4_t v214 = v37;
            uint64_t v100 = 64;
          }
          else if (v99 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v98);
            int32x4_t v208 = (int32x4_t)v38;
            int32x4_t v210 = (int32x4_t)v38;
            int16x8_t v212 = v38;
            int32x4_t v214 = (int32x4_t)v38;
            uint64_t v100 = 2;
          }
          else if (v80[2])
          {
            uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 32, v98, v99, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v100 = 0;
            int32x4_t v208 = 0uLL;
            int32x4_t v210 = 0uLL;
            int16x8_t v212 = 0uLL;
            int32x4_t v214 = 0uLL;
          }
          uint64_t v103 = v98 + v100;
          unsigned int v104 = v80[3];
          if (v104 == 63)
          {
            int32x4_t v106 = *(int32x4_t *)(v103 + 16);
            int32x4_t v36 = *(int32x4_t *)(v103 + 32);
            int32x4_t v35 = *(int32x4_t *)(v103 + 48);
            int32x4_t v107 = vuzp2q_s32(*(int32x4_t *)v103, v36);
            int32x4_t v216 = vuzp1q_s32(*(int32x4_t *)v103, v36);
            int32x4_t v218 = v107;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v106, v35);
            int32x4_t v37 = vuzp2q_s32(v106, v35);
            int16x8_t v220 = v38;
            int32x4_t v222 = v37;
            uint64_t v105 = 64;
          }
          else if (v104 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v103);
            int32x4_t v216 = (int32x4_t)v38;
            int32x4_t v218 = (int32x4_t)v38;
            int16x8_t v220 = v38;
            int32x4_t v222 = (int32x4_t)v38;
            uint64_t v105 = 2;
          }
          else if (v80[3])
          {
            uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 32, v103, v104, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v105 = 0;
            int32x4_t v216 = 0uLL;
            int32x4_t v218 = 0uLL;
            int16x8_t v220 = 0uLL;
            int32x4_t v222 = 0uLL;
          }
          uint64_t v108 = v103 + v105;
          unsigned int v109 = v80[4];
          if (v109 == 63)
          {
            int32x4_t v111 = *(int32x4_t *)(v108 + 16);
            int32x4_t v36 = *(int32x4_t *)(v108 + 32);
            int32x4_t v35 = *(int32x4_t *)(v108 + 48);
            int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v108, v36);
            int32x4_t v223 = vuzp1q_s32(*(int32x4_t *)v108, v36);
            int32x4_t v225 = v112;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v111, v35);
            int32x4_t v37 = vuzp2q_s32(v111, v35);
            int16x8_t v227 = v38;
            int32x4_t v229 = v37;
            uint64_t v110 = 64;
          }
          else if (v109 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v108);
            int32x4_t v223 = (int32x4_t)v38;
            int32x4_t v225 = (int32x4_t)v38;
            int16x8_t v227 = v38;
            int32x4_t v229 = (int32x4_t)v38;
            uint64_t v110 = 2;
          }
          else if (v80[4])
          {
            uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v223, 32, v108, v109, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v110 = 0;
            int32x4_t v223 = 0uLL;
            int32x4_t v225 = 0uLL;
            int16x8_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
          }
          uint64_t v113 = v108 + v110;
          unsigned int v114 = v80[5];
          if (v114 == 63)
          {
            int32x4_t v116 = *(int32x4_t *)(v113 + 16);
            int32x4_t v36 = *(int32x4_t *)(v113 + 32);
            int32x4_t v35 = *(int32x4_t *)(v113 + 48);
            int32x4_t v117 = vuzp2q_s32(*(int32x4_t *)v113, v36);
            int32x4_t v231 = vuzp1q_s32(*(int32x4_t *)v113, v36);
            int32x4_t v233 = v117;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v116, v35);
            int32x4_t v37 = vuzp2q_s32(v116, v35);
            int16x8_t v235 = v38;
            int32x4_t v237 = v37;
            uint64_t v115 = 64;
          }
          else if (v114 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v113);
            int32x4_t v231 = (int32x4_t)v38;
            int32x4_t v233 = (int32x4_t)v38;
            int16x8_t v235 = v38;
            int32x4_t v237 = (int32x4_t)v38;
            uint64_t v115 = 2;
          }
          else if (v80[5])
          {
            uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v231, 32, v113, v114, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v115 = 0;
            int32x4_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
            int16x8_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
          }
          uint64_t v118 = v113 + v115;
          unsigned int v119 = v80[6];
          if (v119 == 63)
          {
            int32x4_t v121 = *(int32x4_t *)(v118 + 16);
            int32x4_t v36 = *(int32x4_t *)(v118 + 32);
            int32x4_t v35 = *(int32x4_t *)(v118 + 48);
            int32x4_t v122 = vuzp2q_s32(*(int32x4_t *)v118, v36);
            int32x4_t v224 = vuzp1q_s32(*(int32x4_t *)v118, v36);
            int32x4_t v226 = v122;
            int16x8_t v38 = (int16x8_t)vuzp1q_s32(v121, v35);
            int32x4_t v37 = vuzp2q_s32(v121, v35);
            int16x8_t v228 = v38;
            int32x4_t v230 = v37;
            uint64_t v120 = 64;
          }
          else if (v119 == 1)
          {
            int16x8_t v38 = vld1q_dup_s16((const __int16 *)v118);
            int32x4_t v224 = (int32x4_t)v38;
            int32x4_t v226 = (int32x4_t)v38;
            int16x8_t v228 = v38;
            int32x4_t v230 = (int32x4_t)v38;
            uint64_t v120 = 2;
          }
          else if (v80[6])
          {
            uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 32, v118, v119, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v120 = 0;
            int32x4_t v224 = 0uLL;
            int32x4_t v226 = 0uLL;
            int16x8_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
          }
          uint64_t v123 = v118 + v120;
          unsigned int v124 = v80[7];
          if (v124 == 63)
          {
            int32x4_t v127 = *(int32x4_t *)(v123 + 16);
            int32x4_t v128 = *(int32x4_t *)(v123 + 32);
            int32x4_t v129 = *(int32x4_t *)(v123 + 48);
            int32x4_t v130 = vuzp2q_s32(*(int32x4_t *)v123, v128);
            int32x4_t v232 = vuzp1q_s32(*(int32x4_t *)v123, v128);
            int32x4_t v234 = v130;
            int32x4_t v236 = vuzp1q_s32(v127, v129);
            int32x4_t v238 = vuzp2q_s32(v127, v129);
            a7 = v181;
            uint64_t v125 = v202;
            if (!v202) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v181;
            if (v124 == 1)
            {
              int16x8_t v126 = vld1q_dup_s16((const __int16 *)v123);
              int32x4_t v232 = (int32x4_t)v126;
              int32x4_t v234 = (int32x4_t)v126;
              int32x4_t v236 = (int32x4_t)v126;
              int32x4_t v238 = (int32x4_t)v126;
              uint64_t v125 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
            else if (v124)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 32, v123, v124, *(double *)v38.i64, *(double *)v37.i64, *(double *)v36.i64, *(int8x8_t *)v35.i8);
              uint64_t v125 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
              int32x4_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              uint64_t v125 = v202;
              if (!v202) {
                goto LABEL_216;
              }
            }
          }
          if (v203)
          {
            uint64_t v131 = 0;
            uint64_t v132 = 32 * v200;
            uint64_t v133 = 2 * v201;
            uint64_t v134 = (char *)&v207 + v132 + v133;
            int64x2_t v135 = v198;
            uint64_t v136 = v199;
            unint64_t v137 = 2 * v203;
            if (v137 <= 1) {
              unint64_t v138 = 1;
            }
            else {
              unint64_t v138 = 2 * v203;
            }
            uint64_t v139 = v132 + v133;
            uint64_t v140 = (char *)&v207 + v132 + v133;
            if (v138) {
              BOOL v141 = (v138 - 1) >> 32 == 0;
            }
            else {
              BOOL v141 = 0;
            }
            uint64_t v142 = v138 & 0x1FFFFFFE0;
            uint64_t v143 = v138 & 0x1FFFFFFF8;
            char v145 = !v141 || v138 < 8;
            char v146 = &v208.i8[v139];
            int64x2_t v147 = v198 + 1;
            int64x2_t v148 = v134;
            uint64_t v149 = v198;
            do
            {
              unint64_t v150 = (char *)v135 + v136 * v131;
              uint64_t v151 = &v134[32 * v131];
              if ((unint64_t)(&v140[32 * v131] - v150) < 0x20) {
                char v152 = 1;
              }
              else {
                char v152 = v145;
              }
              if (v152)
              {
                int v153 = 0;
                goto LABEL_213;
              }
              if (v138 >= 0x20)
              {
                uint64_t v155 = v147;
                int64x2_t v156 = v146;
                uint64_t v157 = v138 & 0x1FFFFFFE0;
                do
                {
                  float32x2x2_t v158 = *v155;
                  *((float32x2x2_t *)v156 - 1) = v155[-1];
                  *(float32x2x2_t *)int64x2_t v156 = v158;
                  v156 += 32;
                  v155 += 2;
                  v157 -= 32;
                }
                while (v157);
                if (v138 == v142) {
                  goto LABEL_196;
                }
                uint64_t v154 = v138 & 0x1FFFFFFE0;
                if ((v138 & 0x18) == 0)
                {
                  v150 += v142;
                  v151 += v142;
                  int v153 = v138 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v154 = 0;
              }
              v151 += v143;
              uint64_t v159 = v154 - v143;
              int64x2_t v160 = (uint64_t *)((char *)v149 + v154);
              uint64_t v161 = &v148[v154];
              do
              {
                uint64_t v162 = *v160++;
                *(void *)uint64_t v161 = v162;
                v161 += 8;
                v159 += 8;
              }
              while (v159);
              if (v138 == v143) {
                goto LABEL_196;
              }
              v150 += v143;
              int v153 = v138 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v163 = v153 + 1;
              do
              {
                char v164 = *v150++;
                *v151++ = v164;
              }
              while (v137 > v163++);
LABEL_196:
              ++v131;
              v146 += 32;
              int64x2_t v147 = (float32x2x2_t *)((char *)v147 + v136);
              uint64_t v149 = (float32x2x2_t *)((char *)v149 + v136);
              v148 += 32;
            }
            while (v131 != v125);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((float32x2x2_t *)&v207, 32, (uint64_t)v196, v197, v204, v205);
LABEL_217:
          if (v193) {
            memcpy(v192, v84, 0x200uLL);
          }
          BOOL v21 = v41++ == v182 >> 4;
          uint64_t result = v189;
        }
        while (!v21);
        BOOL v21 = v20++ == v171;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v183 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v170 = v168 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v184 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v184;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v188 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v32 = v184;
  BOOL v177 = isLevelTiled;
  if (v18 <= v170)
  {
    unsigned int v176 = a7 + a9 - 1;
    unsigned int v167 = a7 >> 4;
    if (a7 >> 4 <= v176 >> 4)
    {
      unsigned int v164 = a5 - 1;
      unsigned int v186 = (a5 - 1) >> 4;
      int v185 = ((a5 - 1) & 0xF) + 1;
      int v165 = ((a6 - 1) & 0xF) + 1;
      unsigned int v166 = (a6 - 1) >> 4;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v34.i64[0] = 0x2000000020;
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL)));
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v35.i8))));
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v175 = v37.i32[0] | v37.i32[1];
      BOOL v173 = v37.i32[1] != 0;
      uint64_t v174 = v37.i64[0];
      BOOL v172 = v37.i32[0] != 0;
      unint64_t v163 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v38 = (16 * v18) | 0xF;
        if (16 * v18 <= v183) {
          int v39 = v183;
        }
        else {
          int v39 = 16 * v18;
        }
        unsigned int v40 = v167;
        if (v168 < v38) {
          unsigned int v38 = v168;
        }
        unsigned int v182 = 16 * v18;
        int v171 = v39 - 16 * v18;
        int v181 = v38 - v39 + 1;
        int v41 = v165;
        if (v18 != v166) {
          int v41 = 16;
        }
        unsigned int v189 = v41;
        uint64_t v180 = a3 + (v39 - v183) * a11;
        do
        {
          unsigned int v42 = 16 * v40;
          unsigned int v43 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v40;
          }
          if (v176 < v43) {
            unsigned int v43 = v176;
          }
          int v45 = v43 - v44 + 1;
          if (v40 == v186) {
            unsigned int v46 = v185;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (v182 >= v183 && v42 >= a7)
          {
            int v48 = v185;
            if (v40 != v186) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v181 != v189;
          }
          if (v177)
          {
            unsigned int v69 = 0;
            uint64_t v70 = v163 >> (*(unsigned char *)(v32 + 57) != 0);
            char v71 = 1;
            if (v70 > 127)
            {
              if (v70 > 511)
              {
                if (v70 == 512)
                {
                  unsigned int v69 = 16;
                  char v72 = 1;
                  unsigned int v73 = 16;
                }
                else
                {
                  char v72 = 1;
                  unsigned int v73 = 0;
                  if (v70 == 1024)
                  {
                    unsigned int v73 = 8;
                    unsigned int v69 = 16;
                  }
                }
              }
              else if (v70 == 128)
              {
                char v71 = 0;
                char v72 = 0;
                unsigned int v69 = 32;
                unsigned int v73 = 32;
              }
              else
              {
                char v72 = 1;
                unsigned int v73 = 0;
                if (v70 == 256)
                {
                  char v71 = 0;
                  unsigned int v73 = 16;
                  unsigned int v69 = 32;
                }
              }
            }
            else
            {
              char v72 = 1;
              unsigned int v73 = 0;
              switch(v70)
              {
                case 4:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 128;
                  unsigned int v69 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 128;
                  unsigned int v73 = 128;
                  break;
                case 16:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v73 = 64;
                  unsigned int v69 = 128;
                  break;
                case 32:
                  char v71 = 0;
                  char v72 = 0;
                  unsigned int v69 = 64;
                  unsigned int v73 = 64;
                  break;
                default:
                  if (v70 == 64)
                  {
                    char v71 = 0;
                    char v72 = 0;
                    unsigned int v73 = 32;
                    unsigned int v69 = 64;
                  }
                  break;
              }
            }
            unsigned int v154 = (v69 >> 4) - 1;
            if (v71)
            {
              unsigned int v155 = 0;
              if (v72) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v156 = 32 - __clz(~(-1 << -(char)__clz(((v73 + 15) >> 4) - 1)));
              if (v156 | v155) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v158 = 0;
            }
            else
            {
              unsigned int v155 = 32 - __clz(~(-1 << -(char)__clz(v154)));
              if ((v72 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v156 = 0;
              if (!v155) {
                goto LABEL_220;
              }
LABEL_209:
              int v157 = 0;
              uint64_t v158 = 0;
              int v159 = v40 & v154;
              BOOL v160 = v155 != 0;
              BOOL v161 = v156 != 0;
              int v162 = 1;
              do
              {
                --v155;
                if (v160) {
                  v158 |= (unint64_t)(v162 & v159) << v157++;
                }
                else {
                  unsigned int v155 = 0;
                }
                --v156;
                if (v161) {
                  v158 |= (unint64_t)(v162 & v18 & ((v73 >> 4) - 1)) << v157++;
                }
                else {
                  unsigned int v156 = 0;
                }
                v162 *= 2;
                --v157;
                BOOL v161 = v156 != 0;
                BOOL v160 = v155 != 0;
              }
              while (v156 | v155);
            }
            unint64_t v57 = ((unint64_t)(v42 / v69 + v182 / v73 * ((v69 + v164) / v69)) << 14) + (v158 << 9);
            goto LABEL_58;
          }
          if (v175)
          {
            int v50 = 0;
            uint64_t v51 = 0;
            int v52 = 1;
            BOOL v53 = v173;
            BOOL v54 = v172;
            int v55 = HIDWORD(v174);
            int v56 = v174;
            do
            {
              --v55;
              if (v53) {
                v51 |= (unint64_t)(v52 & v40) << v50++;
              }
              else {
                int v55 = 0;
              }
              --v56;
              if (v54) {
                v51 |= (unint64_t)(v52 & v18) << v50++;
              }
              else {
                int v56 = 0;
              }
              v52 *= 2;
              --v50;
              BOOL v54 = v56 != 0;
              BOOL v53 = v55 != 0;
            }
            while (v56 | v55);
          }
          else
          {
            uint64_t v51 = 0;
          }
          unint64_t v57 = v51 << 9;
LABEL_58:
          unsigned int v58 = *(_DWORD *)(v32 + 128) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20) {
            unsigned int v60 = 0;
          }
          else {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
          }
          unsigned int v61 = *(_DWORD *)(v32 + 132) >> (*(unsigned char *)(v32 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20)
          {
            unsigned int v63 = 0;
            if (!v60)
            {
LABEL_80:
              uint64_t v65 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
            if (!(v63 | v60)) {
              goto LABEL_80;
            }
          }
          int v64 = 0;
          uint64_t v65 = 0;
          BOOL v66 = v60 != 0;
          BOOL v67 = v63 != 0;
          int v68 = 1;
          do
          {
            --v60;
            if (v66) {
              v65 |= (unint64_t)(v68 & v40) << v64++;
            }
            else {
              unsigned int v60 = 0;
            }
            --v63;
            if (v67) {
              v65 |= (unint64_t)(v68 & v18) << v64++;
            }
            else {
              unsigned int v63 = 0;
            }
            v68 *= 2;
            --v64;
            BOOL v67 = v63 != 0;
            BOOL v66 = v60 != 0;
          }
          while (v63 | v60);
LABEL_81:
          uint64_t v74 = a7;
          int v75 = v46 < 0x10 || v47;
          BOOL v76 = (char *)(a4 + 8 * v65);
          unint64_t v77 = v180 + 2 * (v44 - a7);
          unsigned int v78 = (int16x8_t *)(a2 + v57);
          if (v189 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v188)
          {
            if (!v79)
            {
              unsigned int v78 = (int16x8_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, v78, v76, v46, v189, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(double *)v34.i64, *(double *)v28.i64, v29, v30, v31);
              goto LABEL_95;
            }
            int v80 = v45;
            memcpy(__dst, __src, sizeof(__dst));
            int v45 = v80;
            unsigned int v78 = (int16x8_t *)__dst;
            uint64_t v32 = v184;
          }
          else if (!v79)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v32;
          unsigned int v191 = v78;
          unsigned __int8 v199 = v46;
          unsigned __int8 v200 = v189;
          unsigned int v195 = v171;
          unsigned int v196 = v44 - v42;
          int64x2_t v192 = v76;
          unint64_t v193 = v77;
          uint64_t v194 = a11;
          unsigned int v197 = v181;
          unsigned int v198 = v45;
          if (!v47)
          {
            unsigned int v81 = *v76;
            a7 = v74;
            if (v81 == 63)
            {
              int32x4_t v83 = (int32x4_t)v78[1];
              int32x4_t v35 = (int32x4_t)v78[2];
              int32x4_t v34 = (int32x4_t)v78[3];
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v78, v35);
              int32x4_t v84 = vuzp2q_s32(*(int32x4_t *)v78, v35);
              int32x4_t v202 = v28;
              int32x4_t v204 = v84;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v83, v34);
              int32x4_t v36 = vuzp2q_s32(v83, v34);
              int16x8_t v206 = v37;
              int32x4_t v208 = v36;
              uint64_t v82 = 64;
            }
            else if (v81 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16(v78->i16);
              int32x4_t v202 = (int32x4_t)v37;
              int32x4_t v204 = (int32x4_t)v37;
              int16x8_t v206 = v37;
              int32x4_t v208 = (int32x4_t)v37;
              uint64_t v82 = 2;
            }
            else if (*v76)
            {
              uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v202, 32, (uint64_t)v78, v81, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v82 = 0;
              int32x4_t v202 = 0uLL;
              int32x4_t v204 = 0uLL;
              int16x8_t v206 = 0uLL;
              int32x4_t v208 = 0uLL;
            }
            uint64_t v85 = (uint64_t)v78->i64 + v82;
            unsigned int v86 = v76[1];
            if (v86 == 63)
            {
              int32x4_t v88 = *(int32x4_t *)(v85 + 16);
              int32x4_t v35 = *(int32x4_t *)(v85 + 32);
              int32x4_t v34 = *(int32x4_t *)(v85 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v85, v35);
              int32x4_t v89 = vuzp2q_s32(*(int32x4_t *)v85, v35);
              int32x4_t v210 = v28;
              int32x4_t v212 = v89;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v88, v34);
              int32x4_t v36 = vuzp2q_s32(v88, v34);
              int16x8_t v214 = v37;
              int32x4_t v216 = v36;
              uint64_t v87 = 64;
            }
            else if (v86 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v85);
              int32x4_t v210 = (int32x4_t)v37;
              int32x4_t v212 = (int32x4_t)v37;
              int16x8_t v214 = v37;
              int32x4_t v216 = (int32x4_t)v37;
              uint64_t v87 = 2;
            }
            else if (v76[1])
            {
              uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v210, 32, v85, v86, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v87 = 0;
              int32x4_t v210 = 0uLL;
              int32x4_t v212 = 0uLL;
              int16x8_t v214 = 0uLL;
              int32x4_t v216 = 0uLL;
            }
            uint64_t v90 = v85 + v87;
            unsigned int v91 = v76[2];
            if (v91 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)(v90 + 16);
              int32x4_t v35 = *(int32x4_t *)(v90 + 32);
              int32x4_t v34 = *(int32x4_t *)(v90 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v90, v35);
              int32x4_t v94 = vuzp2q_s32(*(int32x4_t *)v90, v35);
              int32x4_t v203 = v28;
              int32x4_t v205 = v94;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v93, v34);
              int32x4_t v36 = vuzp2q_s32(v93, v34);
              int16x8_t v207 = v37;
              int32x4_t v209 = v36;
              uint64_t v92 = 64;
            }
            else if (v91 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v90);
              int32x4_t v203 = (int32x4_t)v37;
              int32x4_t v205 = (int32x4_t)v37;
              int16x8_t v207 = v37;
              int32x4_t v209 = (int32x4_t)v37;
              uint64_t v92 = 2;
            }
            else if (v76[2])
            {
              uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 32, v90, v91, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v92 = 0;
              int32x4_t v203 = 0uLL;
              int32x4_t v205 = 0uLL;
              int16x8_t v207 = 0uLL;
              int32x4_t v209 = 0uLL;
            }
            uint64_t v95 = v90 + v92;
            unsigned int v96 = v76[3];
            if (v96 == 63)
            {
              int32x4_t v98 = *(int32x4_t *)(v95 + 16);
              int32x4_t v35 = *(int32x4_t *)(v95 + 32);
              int32x4_t v34 = *(int32x4_t *)(v95 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v95, v35);
              int32x4_t v99 = vuzp2q_s32(*(int32x4_t *)v95, v35);
              int32x4_t v211 = v28;
              int32x4_t v213 = v99;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v98, v34);
              int32x4_t v36 = vuzp2q_s32(v98, v34);
              int16x8_t v215 = v37;
              int32x4_t v217 = v36;
              uint64_t v97 = 64;
            }
            else if (v96 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v95);
              int32x4_t v211 = (int32x4_t)v37;
              int32x4_t v213 = (int32x4_t)v37;
              int16x8_t v215 = v37;
              int32x4_t v217 = (int32x4_t)v37;
              uint64_t v97 = 2;
            }
            else if (v76[3])
            {
              uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 32, v95, v96, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v97 = 0;
              int32x4_t v211 = 0uLL;
              int32x4_t v213 = 0uLL;
              int16x8_t v215 = 0uLL;
              int32x4_t v217 = 0uLL;
            }
            uint64_t v100 = v95 + v97;
            unsigned int v101 = v76[4];
            if (v101 == 63)
            {
              int32x4_t v103 = *(int32x4_t *)(v100 + 16);
              int32x4_t v35 = *(int32x4_t *)(v100 + 32);
              int32x4_t v34 = *(int32x4_t *)(v100 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v100, v35);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v100, v35);
              int32x4_t v218 = v28;
              int32x4_t v220 = v104;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v103, v34);
              int32x4_t v36 = vuzp2q_s32(v103, v34);
              int16x8_t v222 = v37;
              int32x4_t v224 = v36;
              uint64_t v102 = 64;
            }
            else if (v101 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v100);
              int32x4_t v218 = (int32x4_t)v37;
              int32x4_t v220 = (int32x4_t)v37;
              int16x8_t v222 = v37;
              int32x4_t v224 = (int32x4_t)v37;
              uint64_t v102 = 2;
            }
            else if (v76[4])
            {
              uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 32, v100, v101, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v102 = 0;
              int32x4_t v218 = 0uLL;
              int32x4_t v220 = 0uLL;
              int16x8_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
            }
            uint64_t v105 = v100 + v102;
            unsigned int v106 = v76[5];
            if (v106 == 63)
            {
              int32x4_t v108 = *(int32x4_t *)(v105 + 16);
              int32x4_t v35 = *(int32x4_t *)(v105 + 32);
              int32x4_t v34 = *(int32x4_t *)(v105 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v105, v35);
              int32x4_t v109 = vuzp2q_s32(*(int32x4_t *)v105, v35);
              int32x4_t v226 = v28;
              int32x4_t v228 = v109;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v108, v34);
              int32x4_t v36 = vuzp2q_s32(v108, v34);
              int16x8_t v230 = v37;
              int32x4_t v232 = v36;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v226 = (int32x4_t)v37;
              int32x4_t v228 = (int32x4_t)v37;
              int16x8_t v230 = v37;
              int32x4_t v232 = (int32x4_t)v37;
              uint64_t v107 = 2;
            }
            else if (v76[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v105, v106, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v226 = 0uLL;
              int32x4_t v228 = 0uLL;
              int16x8_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
            }
            uint64_t v110 = v105 + v107;
            unsigned int v111 = v76[6];
            if (v111 == 63)
            {
              int32x4_t v113 = *(int32x4_t *)(v110 + 16);
              int32x4_t v35 = *(int32x4_t *)(v110 + 32);
              int32x4_t v34 = *(int32x4_t *)(v110 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v110, v35);
              int32x4_t v114 = vuzp2q_s32(*(int32x4_t *)v110, v35);
              int32x4_t v219 = v28;
              int32x4_t v221 = v114;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v113, v34);
              int32x4_t v36 = vuzp2q_s32(v113, v34);
              int16x8_t v223 = v37;
              int32x4_t v225 = v36;
              uint64_t v112 = 64;
            }
            else if (v111 == 1)
            {
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v110);
              int32x4_t v219 = (int32x4_t)v37;
              int32x4_t v221 = (int32x4_t)v37;
              int16x8_t v223 = v37;
              int32x4_t v225 = (int32x4_t)v37;
              uint64_t v112 = 2;
            }
            else if (v76[6])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v110, v111, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
            }
            else
            {
              uint64_t v112 = 0;
              int32x4_t v219 = 0uLL;
              int32x4_t v221 = 0uLL;
              int16x8_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
            }
            uint64_t v115 = v110 + v112;
            unsigned int v116 = v76[7];
            if (v116 == 63)
            {
              int32x4_t v118 = *(int32x4_t *)(v115 + 16);
              int32x4_t v35 = *(int32x4_t *)(v115 + 32);
              int32x4_t v34 = *(int32x4_t *)(v115 + 48);
              int32x4_t v28 = vuzp1q_s32(*(int32x4_t *)v115, v35);
              int32x4_t v119 = vuzp2q_s32(*(int32x4_t *)v115, v35);
              int32x4_t v227 = v28;
              int32x4_t v229 = v119;
              int16x8_t v37 = (int16x8_t)vuzp1q_s32(v118, v34);
              int32x4_t v36 = vuzp2q_s32(v118, v34);
              int16x8_t v231 = v37;
              int32x4_t v233 = v36;
              uint64_t v117 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v116 != 1)
              {
                if (v76[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v115, v116, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(int8x8_t *)v34.i8);
                  uint64_t v117 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v227 = 0uLL;
                  int32x4_t v229 = 0uLL;
                  int16x8_t v231 = 0uLL;
                  int32x4_t v233 = 0uLL;
                  uint64_t v117 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v198) {
                  goto LABEL_190;
                }
                uint64_t v120 = 0;
                uint64_t v121 = 32 * v195;
                uint64_t v122 = 2 * v196;
                uint64_t v123 = &v202.i8[v121 + v122];
                unint64_t v124 = v193;
                uint64_t v125 = v194;
                unint64_t v126 = 2 * v198;
                if (v126 <= 1) {
                  unint64_t v127 = 1;
                }
                else {
                  unint64_t v127 = 2 * v198;
                }
                uint64_t v128 = v121 + v122;
                int32x4_t v129 = &v202.i8[v121 + v122];
                if (v127) {
                  BOOL v130 = (v127 - 1) >> 32 == 0;
                }
                else {
                  BOOL v130 = 0;
                }
                uint64_t v131 = v127 & 0x1FFFFFFE0;
                uint64_t v132 = v127 & 0x1FFFFFFF8;
                char v134 = !v130 || v127 < 8;
                int64x2_t v135 = &v203.i8[v128];
                uint64_t v136 = (int16x8_t *)(v193 + 16);
                unint64_t v137 = v123;
                unint64_t v138 = v193;
                while (2)
                {
                  uint64_t v139 = (char *)(v124 + v125 * v120);
                  uint64_t v140 = &v123[32 * v120];
                  if ((unint64_t)(&v129[32 * v120] - v139) < 0x20) {
                    char v141 = 1;
                  }
                  else {
                    char v141 = v134;
                  }
                  if (v141)
                  {
                    int v142 = 0;
LABEL_187:
                    unsigned int v151 = v142 + 1;
                    do
                    {
                      char v152 = *v139++;
                      *v140++ = v152;
                    }
                    while (v126 > v151++);
                  }
                  else
                  {
                    if (v127 >= 0x20)
                    {
                      uint64_t v144 = v136;
                      char v145 = (int32x4_t *)v135;
                      uint64_t v146 = v127 & 0x1FFFFFFE0;
                      do
                      {
                        int16x8_t v37 = v144[-1];
                        int32x4_t v36 = *(int32x4_t *)v144;
                        v145[-1] = (int32x4_t)v37;
                        int32x4_t *v145 = v36;
                        v145 += 2;
                        v144 += 2;
                        v146 -= 32;
                      }
                      while (v146);
                      if (v127 == v131) {
                        goto LABEL_170;
                      }
                      uint64_t v143 = v127 & 0x1FFFFFFE0;
                      if ((v127 & 0x18) == 0)
                      {
                        v139 += v131;
                        v140 += v131;
                        int v142 = v127 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v143 = 0;
                    }
                    v140 += v132;
                    uint64_t v147 = v143 - v132;
                    int64x2_t v148 = (uint64_t *)(v138 + v143);
                    uint64_t v149 = (uint64_t *)&v137[v143];
                    do
                    {
                      uint64_t v150 = *v148++;
                      v37.i64[0] = v150;
                      *v149++ = v150;
                      v147 += 8;
                    }
                    while (v147);
                    if (v127 != v132)
                    {
                      v139 += v132;
                      int v142 = v127 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v120;
                  v135 += 32;
                  uint64_t v136 = (int16x8_t *)((char *)v136 + v125);
                  v138 += v125;
                  v137 += 32;
                  if (v120 == v117) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v37 = vld1q_dup_s16((const __int16 *)v115);
              int32x4_t v227 = (int32x4_t)v37;
              int32x4_t v229 = (int32x4_t)v37;
              int16x8_t v231 = v37;
              int32x4_t v233 = (int32x4_t)v37;
              uint64_t v117 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v202, 32, v191, v192, v199, v200, *(double *)v37.i64, *(double *)v36.i64, *(double *)v35.i64, *(double *)v34.i64, *(double *)v28.i64, v29, v30, v31);
            if (!v188) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v32 + 8) + 7384), block);
LABEL_95:
          a7 = v74;
          if (!v188) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v78, 0x200uLL);
LABEL_26:
          BOOL v23 = v40++ == v176 >> 4;
          uint64_t v32 = v184;
        }
        while (!v23);
        BOOL v23 = v18++ == v170;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v234 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v183 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v168 = a8 + a10 - 1;
  unsigned int v170 = v168 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v184 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v184;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v188 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v184;
  BOOL v177 = isLevelTiled;
  if (v18 <= v170)
  {
    unsigned int v176 = a7 + a9 - 1;
    unsigned int v167 = a7 >> 4;
    if (a7 >> 4 <= v176 >> 4)
    {
      unsigned int v164 = a5 - 1;
      unsigned int v186 = (a5 - 1) >> 4;
      int v185 = ((a5 - 1) & 0xF) + 1;
      int v165 = ((a6 - 1) & 0xF) + 1;
      unsigned int v166 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v30.i64[0] = 0x2000000020;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL)));
      *(int32x2_t *)v32.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v31.i8))));
      *(int8x8_t *)v33.i8 = vbic_s8(*(int8x8_t *)v32.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v175 = v33.i32[0] | v33.i32[1];
      BOOL v173 = v33.i32[1] != 0;
      uint64_t v174 = v33.i64[0];
      BOOL v172 = v33.i32[0] != 0;
      unint64_t v163 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v34 = (16 * v18) | 0xF;
        if (16 * v18 <= v183) {
          int v35 = v183;
        }
        else {
          int v35 = 16 * v18;
        }
        unsigned int v36 = v167;
        if (v168 < v34) {
          unsigned int v34 = v168;
        }
        unsigned int v182 = 16 * v18;
        int v171 = v35 - 16 * v18;
        int v181 = v34 - v35 + 1;
        int v37 = v165;
        if (v18 != v166) {
          int v37 = 16;
        }
        unsigned int v189 = v37;
        uint64_t v180 = a3 + (v35 - v183) * a11;
        do
        {
          unsigned int v38 = 16 * v36;
          unsigned int v39 = 16 * (v36 + 1) - 1;
          if (16 * v36 <= a7) {
            int v40 = a7;
          }
          else {
            int v40 = 16 * v36;
          }
          if (v176 < v39) {
            unsigned int v39 = v176;
          }
          int v41 = v39 - v40 + 1;
          if (v36 == v186) {
            unsigned int v42 = v185;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (v182 >= v183 && v38 >= a7)
          {
            int v44 = v185;
            if (v36 != v186) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v181 != v189;
          }
          if (v177)
          {
            unsigned int v65 = 0;
            uint64_t v66 = v163 >> (*(unsigned char *)(v28 + 57) != 0);
            char v67 = 1;
            if (v66 > 127)
            {
              if (v66 > 511)
              {
                if (v66 == 512)
                {
                  unsigned int v65 = 16;
                  char v68 = 1;
                  unsigned int v69 = 16;
                }
                else
                {
                  char v68 = 1;
                  unsigned int v69 = 0;
                  if (v66 == 1024)
                  {
                    unsigned int v69 = 8;
                    unsigned int v65 = 16;
                  }
                }
              }
              else if (v66 == 128)
              {
                char v67 = 0;
                char v68 = 0;
                unsigned int v65 = 32;
                unsigned int v69 = 32;
              }
              else
              {
                char v68 = 1;
                unsigned int v69 = 0;
                if (v66 == 256)
                {
                  char v67 = 0;
                  unsigned int v69 = 16;
                  unsigned int v65 = 32;
                }
              }
            }
            else
            {
              char v68 = 1;
              unsigned int v69 = 0;
              switch(v66)
              {
                case 4:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 128;
                  unsigned int v65 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 128;
                  unsigned int v69 = 128;
                  break;
                case 16:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v69 = 64;
                  unsigned int v65 = 128;
                  break;
                case 32:
                  char v67 = 0;
                  char v68 = 0;
                  unsigned int v65 = 64;
                  unsigned int v69 = 64;
                  break;
                default:
                  if (v66 == 64)
                  {
                    char v67 = 0;
                    char v68 = 0;
                    unsigned int v69 = 32;
                    unsigned int v65 = 64;
                  }
                  break;
              }
            }
            unsigned int v154 = (v65 >> 4) - 1;
            if (v67)
            {
              unsigned int v155 = 0;
              if (v68) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v156 = 32 - __clz(~(-1 << -(char)__clz(((v69 + 15) >> 4) - 1)));
              if (v156 | v155) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v158 = 0;
            }
            else
            {
              unsigned int v155 = 32 - __clz(~(-1 << -(char)__clz(v154)));
              if ((v68 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v156 = 0;
              if (!v155) {
                goto LABEL_220;
              }
LABEL_209:
              int v157 = 0;
              uint64_t v158 = 0;
              int v159 = v36 & v154;
              BOOL v160 = v155 != 0;
              BOOL v161 = v156 != 0;
              int v162 = 1;
              do
              {
                --v155;
                if (v160) {
                  v158 |= (unint64_t)(v162 & v159) << v157++;
                }
                else {
                  unsigned int v155 = 0;
                }
                --v156;
                if (v161) {
                  v158 |= (unint64_t)(v162 & v18 & ((v69 >> 4) - 1)) << v157++;
                }
                else {
                  unsigned int v156 = 0;
                }
                v162 *= 2;
                --v157;
                BOOL v161 = v156 != 0;
                BOOL v160 = v155 != 0;
              }
              while (v156 | v155);
            }
            unint64_t v53 = ((unint64_t)(v38 / v65 + v182 / v69 * ((v65 + v164) / v65)) << 14) + (v158 << 9);
            goto LABEL_58;
          }
          if (v175)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v173;
            BOOL v50 = v172;
            int v51 = HIDWORD(v174);
            int v52 = v174;
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v36) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v18) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_58:
          unsigned int v54 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_80:
              uint64_t v61 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_80;
            }
          }
          int v60 = 0;
          uint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            if (v62) {
              v61 |= (unint64_t)(v64 & v36) << v60++;
            }
            else {
              unsigned int v56 = 0;
            }
            --v59;
            if (v63) {
              v61 |= (unint64_t)(v64 & v18) << v60++;
            }
            else {
              unsigned int v59 = 0;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_81:
          uint64_t v70 = a7;
          int v71 = v42 < 0x10 || v43;
          char v72 = (char *)(a4 + 8 * v61);
          unsigned int v73 = (float32x2x2_t *)(v180 + 2 * (v40 - a7));
          uint64_t v74 = (int32x4_t *)(a2 + v53);
          if (v189 < 0x10) {
            int v75 = 1;
          }
          else {
            int v75 = v71;
          }
          __src = v74;
          if (v188)
          {
            if (!v75)
            {
              uint64_t v74 = (int32x4_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v73, a11, (uint64_t)v74, v72, v42, v189);
              goto LABEL_95;
            }
            int v76 = v41;
            memcpy(__dst, __src, sizeof(__dst));
            int v41 = v76;
            uint64_t v74 = (int32x4_t *)__dst;
            uint64_t v28 = v184;
          }
          else if (!v75)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v191 = v74;
          unsigned __int8 v199 = v42;
          unsigned __int8 v200 = v189;
          unsigned int v195 = v171;
          unsigned int v196 = v40 - v38;
          int64x2_t v192 = v72;
          unint64_t v193 = v73;
          uint64_t v194 = a11;
          unsigned int v197 = v181;
          unsigned int v198 = v41;
          if (!v43)
          {
            unsigned int v77 = *v72;
            a7 = v70;
            if (v77 == 63)
            {
              int32x4_t v79 = v74[1];
              int32x4_t v31 = v74[2];
              int32x4_t v30 = v74[3];
              int32x4_t v80 = vuzp2q_s32(*v74, v31);
              unsigned long long v202 = (unsigned __int128)vuzp1q_s32(*v74, v31);
              int32x4_t v204 = v80;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v79, v30);
              int32x4_t v32 = vuzp2q_s32(v79, v30);
              int16x8_t v206 = v33;
              int32x4_t v208 = v32;
              uint64_t v78 = 64;
            }
            else if (v77 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16(v74->i16);
              unsigned long long v202 = (unsigned __int128)v33;
              int32x4_t v204 = (int32x4_t)v33;
              int16x8_t v206 = v33;
              int32x4_t v208 = (int32x4_t)v33;
              uint64_t v78 = 2;
            }
            else if (*v72)
            {
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v202, 32, (uint64_t)v74, v77, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v78 = 0;
              unsigned long long v202 = 0uLL;
              int32x4_t v204 = 0uLL;
              int16x8_t v206 = 0uLL;
              int32x4_t v208 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v74->i64 + v78;
            unsigned int v82 = v72[1];
            if (v82 == 63)
            {
              int32x4_t v84 = *(int32x4_t *)(v81 + 16);
              int32x4_t v31 = *(int32x4_t *)(v81 + 32);
              int32x4_t v30 = *(int32x4_t *)(v81 + 48);
              int32x4_t v85 = vuzp2q_s32(*(int32x4_t *)v81, v31);
              int32x4_t v210 = vuzp1q_s32(*(int32x4_t *)v81, v31);
              int32x4_t v212 = v85;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v84, v30);
              int32x4_t v32 = vuzp2q_s32(v84, v30);
              int16x8_t v214 = v33;
              int32x4_t v216 = v32;
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v210 = (int32x4_t)v33;
              int32x4_t v212 = (int32x4_t)v33;
              int16x8_t v214 = v33;
              int32x4_t v216 = (int32x4_t)v33;
              uint64_t v83 = 2;
            }
            else if (v72[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v210, 32, v81, v82, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v210 = 0uLL;
              int32x4_t v212 = 0uLL;
              int16x8_t v214 = 0uLL;
              int32x4_t v216 = 0uLL;
            }
            uint64_t v86 = v81 + v83;
            unsigned int v87 = v72[2];
            if (v87 == 63)
            {
              int32x4_t v89 = *(int32x4_t *)(v86 + 16);
              int32x4_t v31 = *(int32x4_t *)(v86 + 32);
              int32x4_t v30 = *(int32x4_t *)(v86 + 48);
              int32x4_t v90 = vuzp2q_s32(*(int32x4_t *)v86, v31);
              int32x4_t v203 = vuzp1q_s32(*(int32x4_t *)v86, v31);
              int32x4_t v205 = v90;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v89, v30);
              int32x4_t v32 = vuzp2q_s32(v89, v30);
              int16x8_t v207 = v33;
              int32x4_t v209 = v32;
              uint64_t v88 = 64;
            }
            else if (v87 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v86);
              int32x4_t v203 = (int32x4_t)v33;
              int32x4_t v205 = (int32x4_t)v33;
              int16x8_t v207 = v33;
              int32x4_t v209 = (int32x4_t)v33;
              uint64_t v88 = 2;
            }
            else if (v72[2])
            {
              uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 32, v86, v87, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v88 = 0;
              int32x4_t v203 = 0uLL;
              int32x4_t v205 = 0uLL;
              int16x8_t v207 = 0uLL;
              int32x4_t v209 = 0uLL;
            }
            uint64_t v91 = v86 + v88;
            unsigned int v92 = v72[3];
            if (v92 == 63)
            {
              int32x4_t v94 = *(int32x4_t *)(v91 + 16);
              int32x4_t v31 = *(int32x4_t *)(v91 + 32);
              int32x4_t v30 = *(int32x4_t *)(v91 + 48);
              int32x4_t v95 = vuzp2q_s32(*(int32x4_t *)v91, v31);
              int32x4_t v211 = vuzp1q_s32(*(int32x4_t *)v91, v31);
              int32x4_t v213 = v95;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v94, v30);
              int32x4_t v32 = vuzp2q_s32(v94, v30);
              int16x8_t v215 = v33;
              int32x4_t v217 = v32;
              uint64_t v93 = 64;
            }
            else if (v92 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v91);
              int32x4_t v211 = (int32x4_t)v33;
              int32x4_t v213 = (int32x4_t)v33;
              int16x8_t v215 = v33;
              int32x4_t v217 = (int32x4_t)v33;
              uint64_t v93 = 2;
            }
            else if (v72[3])
            {
              uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 32, v91, v92, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v93 = 0;
              int32x4_t v211 = 0uLL;
              int32x4_t v213 = 0uLL;
              int16x8_t v215 = 0uLL;
              int32x4_t v217 = 0uLL;
            }
            uint64_t v96 = v91 + v93;
            unsigned int v97 = v72[4];
            if (v97 == 63)
            {
              int32x4_t v99 = *(int32x4_t *)(v96 + 16);
              int32x4_t v31 = *(int32x4_t *)(v96 + 32);
              int32x4_t v30 = *(int32x4_t *)(v96 + 48);
              int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v96, v31);
              int32x4_t v218 = vuzp1q_s32(*(int32x4_t *)v96, v31);
              int32x4_t v220 = v100;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v99, v30);
              int32x4_t v32 = vuzp2q_s32(v99, v30);
              int16x8_t v222 = v33;
              int32x4_t v224 = v32;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v96);
              int32x4_t v218 = (int32x4_t)v33;
              int32x4_t v220 = (int32x4_t)v33;
              int16x8_t v222 = v33;
              int32x4_t v224 = (int32x4_t)v33;
              uint64_t v98 = 2;
            }
            else if (v72[4])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 32, v96, v97, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v98 = 0;
              int32x4_t v218 = 0uLL;
              int32x4_t v220 = 0uLL;
              int16x8_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
            }
            uint64_t v101 = v96 + v98;
            unsigned int v102 = v72[5];
            if (v102 == 63)
            {
              int32x4_t v104 = *(int32x4_t *)(v101 + 16);
              int32x4_t v31 = *(int32x4_t *)(v101 + 32);
              int32x4_t v30 = *(int32x4_t *)(v101 + 48);
              int32x4_t v105 = vuzp2q_s32(*(int32x4_t *)v101, v31);
              int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v101, v31);
              int32x4_t v228 = v105;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v104, v30);
              int32x4_t v32 = vuzp2q_s32(v104, v30);
              int16x8_t v230 = v33;
              int32x4_t v232 = v32;
              uint64_t v103 = 64;
            }
            else if (v102 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v101);
              int32x4_t v226 = (int32x4_t)v33;
              int32x4_t v228 = (int32x4_t)v33;
              int16x8_t v230 = v33;
              int32x4_t v232 = (int32x4_t)v33;
              uint64_t v103 = 2;
            }
            else if (v72[5])
            {
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v101, v102, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v103 = 0;
              int32x4_t v226 = 0uLL;
              int32x4_t v228 = 0uLL;
              int16x8_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
            }
            uint64_t v106 = v101 + v103;
            unsigned int v107 = v72[6];
            if (v107 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)(v106 + 16);
              int32x4_t v31 = *(int32x4_t *)(v106 + 32);
              int32x4_t v30 = *(int32x4_t *)(v106 + 48);
              int32x4_t v110 = vuzp2q_s32(*(int32x4_t *)v106, v31);
              int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v106, v31);
              int32x4_t v221 = v110;
              int16x8_t v33 = (int16x8_t)vuzp1q_s32(v109, v30);
              int32x4_t v32 = vuzp2q_s32(v109, v30);
              int16x8_t v223 = v33;
              int32x4_t v225 = v32;
              uint64_t v108 = 64;
            }
            else if (v107 == 1)
            {
              int16x8_t v33 = vld1q_dup_s16((const __int16 *)v106);
              int32x4_t v219 = (int32x4_t)v33;
              int32x4_t v221 = (int32x4_t)v33;
              int16x8_t v223 = v33;
              int32x4_t v225 = (int32x4_t)v33;
              uint64_t v108 = 2;
            }
            else if (v72[6])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v106, v107, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v108 = 0;
              int32x4_t v219 = 0uLL;
              int32x4_t v221 = 0uLL;
              int16x8_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
            }
            uint64_t v111 = v106 + v108;
            unsigned int v112 = v72[7];
            if (v112 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)(v111 + 16);
              int32x4_t v116 = *(int32x4_t *)(v111 + 32);
              int32x4_t v117 = *(int32x4_t *)(v111 + 48);
              int32x4_t v118 = vuzp2q_s32(*(int32x4_t *)v111, v116);
              int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v111, v116);
              int32x4_t v229 = v118;
              int32x4_t v231 = vuzp1q_s32(v115, v117);
              int32x4_t v233 = vuzp2q_s32(v115, v117);
              uint64_t v113 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v112 != 1)
              {
                if (v72[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v111, v112, *(double *)v33.i64, *(double *)v32.i64, *(double *)v31.i64, *(int8x8_t *)v30.i8);
                  uint64_t v113 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v227 = 0uLL;
                  int32x4_t v229 = 0uLL;
                  int32x4_t v231 = 0uLL;
                  int32x4_t v233 = 0uLL;
                  uint64_t v113 = v197;
                  if (!v197) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v198) {
                  goto LABEL_190;
                }
                uint64_t v119 = 0;
                uint64_t v120 = 32 * v195;
                uint64_t v121 = 2 * v196;
                uint64_t v122 = (char *)&v202 + v120 + v121;
                uint64_t v123 = v193;
                uint64_t v124 = v194;
                unint64_t v125 = 2 * v198;
                if (v125 <= 1) {
                  unint64_t v126 = 1;
                }
                else {
                  unint64_t v126 = 2 * v198;
                }
                uint64_t v127 = v120 + v121;
                uint64_t v128 = (char *)&v202 + v120 + v121;
                if (v126) {
                  BOOL v129 = (v126 - 1) >> 32 == 0;
                }
                else {
                  BOOL v129 = 0;
                }
                uint64_t v130 = v126 & 0x1FFFFFFE0;
                uint64_t v131 = v126 & 0x1FFFFFFF8;
                char v133 = !v129 || v126 < 8;
                char v134 = &v203.i8[v127];
                int64x2_t v135 = v193 + 1;
                uint64_t v136 = v122;
                unint64_t v137 = v193;
                while (2)
                {
                  unint64_t v138 = (char *)v123 + v124 * v119;
                  uint64_t v139 = &v122[32 * v119];
                  if ((unint64_t)(&v128[32 * v119] - v138) < 0x20) {
                    char v140 = 1;
                  }
                  else {
                    char v140 = v133;
                  }
                  if (v140)
                  {
                    int v141 = 0;
LABEL_187:
                    unsigned int v151 = v141 + 1;
                    do
                    {
                      char v152 = *v138++;
                      *v139++ = v152;
                    }
                    while (v125 > v151++);
                  }
                  else
                  {
                    if (v126 >= 0x20)
                    {
                      uint64_t v143 = v135;
                      uint64_t v144 = v134;
                      uint64_t v145 = v126 & 0x1FFFFFFE0;
                      do
                      {
                        float32x2x2_t v146 = *v143;
                        *((float32x2x2_t *)v144 - 1) = v143[-1];
                        *(float32x2x2_t *)uint64_t v144 = v146;
                        v144 += 32;
                        v143 += 2;
                        v145 -= 32;
                      }
                      while (v145);
                      if (v126 == v130) {
                        goto LABEL_170;
                      }
                      uint64_t v142 = v126 & 0x1FFFFFFE0;
                      if ((v126 & 0x18) == 0)
                      {
                        v138 += v130;
                        v139 += v130;
                        int v141 = v126 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v142 = 0;
                    }
                    v139 += v131;
                    uint64_t v147 = v142 - v131;
                    int64x2_t v148 = (uint64_t *)((char *)v137 + v142);
                    uint64_t v149 = &v136[v142];
                    do
                    {
                      uint64_t v150 = *v148++;
                      *(void *)uint64_t v149 = v150;
                      v149 += 8;
                      v147 += 8;
                    }
                    while (v147);
                    if (v126 != v131)
                    {
                      v138 += v131;
                      int v141 = v126 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v119;
                  v134 += 32;
                  int64x2_t v135 = (float32x2x2_t *)((char *)v135 + v124);
                  unint64_t v137 = (float32x2x2_t *)((char *)v137 + v124);
                  v136 += 32;
                  if (v119 == v113) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v114 = vld1q_dup_s16((const __int16 *)v111);
              int32x4_t v227 = (int32x4_t)v114;
              int32x4_t v229 = (int32x4_t)v114;
              int32x4_t v231 = (int32x4_t)v114;
              int32x4_t v233 = (int32x4_t)v114;
              uint64_t v113 = v197;
              if (v197) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((float32x2x2_t *)&v202, 32, (uint64_t)v191, v192, v199, v200);
            if (!v188) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v70;
          if (!v188) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v74, 0x200uLL);
LABEL_26:
          BOOL v23 = v36++ == v176 >> 4;
          uint64_t v28 = v184;
        }
        while (!v23);
        BOOL v23 = v18++ == v170;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v149 = a8;
  unsigned int v134 = a8 + a10 - 1;
  uint64_t v150 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v133 = v134 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v155 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v144 = 0;
LABEL_32:
      unsigned int v141 = v27 - 4;
      unsigned int v138 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v131 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v144 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v144 = 0;
  unsigned int v131 = 0;
  unsigned int v138 = 0;
  unsigned int v141 = 0;
LABEL_33:
  if (v20 <= v133)
  {
    unsigned int v143 = a7 + a9 - 1;
    unsigned int v130 = a7 >> 4;
    if (a7 >> 4 <= v143 >> 4)
    {
      unsigned int v153 = v18 >> 4;
      unsigned int v129 = v19 >> 4;
      int v152 = (v18 & 0xF) + 1;
      int v128 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v139 = v35.i32[0] | v35.i32[1];
      int8x8_t v137 = v35;
      BOOL v135 = v35.i32[0] != 0;
      BOOL v136 = v35.i32[1] != 0;
      unsigned int v142 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v149) {
          int v37 = v149;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v134 < v36) {
          unsigned int v36 = v134;
        }
        int v140 = v37 - 16 * v20;
        int v148 = v36 - v37 + 1;
        unsigned int v38 = v130;
        if (v20 == v129) {
          unsigned int v39 = v128;
        }
        else {
          unsigned int v39 = 16;
        }
        uint64_t v147 = a3 + (v37 - v149) * a11;
        unsigned int v151 = v39;
        do
        {
          unsigned int v40 = 16 * v38;
          unsigned int v41 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v38;
          }
          if (v143 < v41) {
            unsigned int v41 = v143;
          }
          int v43 = v41 - v42 + 1;
          if (v38 == v153) {
            unsigned int v44 = v152;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (16 * v20 >= v149 && v40 >= a7)
          {
            int v46 = v152;
            if (v38 != v153) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v148 != v39;
          }
          if (v144)
          {
            if (v141 | v138)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v138 != 0;
              int v51 = 1;
              BOOL v53 = v141 != 0;
              unsigned int v52 = v138;
              unsigned int v54 = v141;
              do
              {
                --v54;
                if (v53) {
                  v49 |= (unint64_t)(v38 & ~(-1 << v141) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v52;
                if (v50) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v138) & v51) << v48++;
                }
                else {
                  unsigned int v52 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v52 != 0;
                BOOL v53 = v54 != 0;
              }
              while (v52 | v54);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(result + 320) * ((v38 >> v141) + (v20 >> v138) * v131) + (v49 << 10);
          }
          else
          {
            if (v139)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v135;
              BOOL v59 = v136;
              __int32 v61 = v137.i32[0];
              __int32 v60 = v137.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v38) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 10;
          }
          unsigned int v63 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          if (v68 | v65)
          {
            int v69 = 0;
            uint64_t v70 = 0;
            BOOL v71 = v65 != 0;
            BOOL v72 = v68 != 0;
            int v73 = 1;
            do
            {
              --v65;
              if (v71) {
                v70 |= (unint64_t)(v73 & v38) << v69++;
              }
              else {
                unsigned int v65 = 0;
              }
              --v68;
              if (v72) {
                v70 |= (unint64_t)(v73 & v20) << v69++;
              }
              else {
                unsigned int v68 = 0;
              }
              v73 *= 2;
              --v69;
              BOOL v72 = v68 != 0;
              BOOL v71 = v65 != 0;
            }
            while (v68 | v65);
          }
          else
          {
            uint64_t v70 = 0;
          }
          int v75 = v44 < 0x10 || v45;
          int v76 = (unsigned __int8 *)(a4 + 8 * v70);
          unsigned int v74 = v42 - a7;
          uint64_t v77 = v147 + 4 * (v42 - a7);
          uint64_t v78 = (int64x2_t *)(a2 + v62);
          if (v39 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          __src = v78;
          if (v155)
          {
            if (!v79)
            {
              uint64_t v78 = (int64x2_t *)__dst;
LABEL_123:
              uint64_t v81 = (int64x2_t *)(v147 + 4 * v74);
              uint64_t v82 = a11;
              uint64_t v83 = (int32x4_t *)v78;
              int32x4_t v84 = (char *)(a4 + 8 * v70);
              goto LABEL_160;
            }
            char v80 = v44;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v44) = v80;
            uint64_t v78 = (int64x2_t *)__dst;
            LOBYTE(v39) = v151;
            uint64_t result = v150;
          }
          else if (!v79)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v157 = v78;
          unsigned __int8 v165 = v44;
          unsigned __int8 v166 = v39;
          unsigned int v161 = v140;
          unsigned int v162 = v42 - v40;
          uint64_t v158 = v76;
          uint64_t v159 = v77;
          uint64_t v160 = a11;
          unsigned int v163 = v148;
          unsigned int v164 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_161;
          }
          int32x4_t v85 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v78, *v76));
          uint64_t v86 = (int64x2_t *)((char *)v85
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v85, v76[1]));
          unsigned int v87 = (int64x2_t *)((char *)v86
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v86, v76[2]));
          uint64_t v88 = (int64x2_t *)((char *)v87
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v87, v76[3]));
          int32x4_t v89 = (int64x2_t *)((char *)v88
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v88, v76[4]));
          int32x4_t v90 = (int64x2_t *)((char *)v89
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, v89, v76[5]));
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v90, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 64, (int64x2_t *)((char *)v90 + v91), v76[7]);
          uint64_t v92 = v163;
          if (v163 && v164)
          {
            uint64_t v93 = 0;
            unint64_t v94 = (unint64_t)v161 << 6;
            uint64_t v95 = 4 * v162;
            uint64_t v96 = &v168[0].i8[v94 + v95];
            uint64_t v97 = v159;
            uint64_t v98 = v160;
            unint64_t v99 = 4 * v164;
            if (v99 <= 1) {
              unint64_t v100 = 1;
            }
            else {
              unint64_t v100 = 4 * v164;
            }
            unint64_t v101 = v94 + v95;
            unsigned int v102 = &v168[0].i8[v94 + v95];
            if (v100) {
              BOOL v103 = (v100 - 1) >> 32 == 0;
            }
            else {
              BOOL v103 = 0;
            }
            uint64_t v104 = v100 & 0x3FFFFFFE0;
            uint64_t v105 = v100 & 0x3FFFFFFF8;
            char v107 = !v103 || v100 < 8;
            uint64_t v108 = &v168[1].i8[v101];
            int32x4_t v109 = (long long *)(v159 + 16);
            int32x4_t v110 = v96;
            uint64_t v111 = v159;
            do
            {
              unsigned int v112 = (char *)(v97 + v98 * v93);
              uint64_t v113 = &v96[64 * v93];
              if ((unint64_t)(&v102[64 * v93] - v112) < 0x20) {
                char v114 = 1;
              }
              else {
                char v114 = v107;
              }
              if (v114)
              {
                int v115 = 0;
                goto LABEL_156;
              }
              if (v100 >= 0x20)
              {
                int32x4_t v117 = v109;
                int32x4_t v118 = v108;
                uint64_t v119 = v100 & 0x3FFFFFFE0;
                do
                {
                  long long v120 = *v117;
                  *((_OWORD *)v118 - 1) = *(v117 - 1);
                  *(_OWORD *)int32x4_t v118 = v120;
                  v118 += 32;
                  v117 += 2;
                  v119 -= 32;
                }
                while (v119);
                if (v100 == v104) {
                  goto LABEL_139;
                }
                uint64_t v116 = v100 & 0x3FFFFFFE0;
                if ((v100 & 0x18) == 0)
                {
                  v112 += v104;
                  v113 += v104;
                  int v115 = v100 & 0xFFFFFFE0;
                  goto LABEL_156;
                }
              }
              else
              {
                uint64_t v116 = 0;
              }
              v113 += v105;
              uint64_t v121 = v116 - v105;
              uint64_t v122 = (uint64_t *)(v111 + v116);
              uint64_t v123 = &v110[v116];
              do
              {
                uint64_t v124 = *v122++;
                *(void *)uint64_t v123 = v124;
                v123 += 8;
                v121 += 8;
              }
              while (v121);
              if (v100 == v105) {
                goto LABEL_139;
              }
              v112 += v105;
              int v115 = v100 & 0xFFFFFFF8;
LABEL_156:
              unsigned int v125 = v115 + 1;
              do
              {
                char v126 = *v112++;
                *v113++ = v126;
              }
              while (v99 > v125++);
LABEL_139:
              ++v93;
              v108 += 64;
              int32x4_t v109 = (long long *)((char *)v109 + v98);
              v111 += v98;
              v110 += 64;
            }
            while (v93 != v92);
          }
          uint64_t v83 = (int32x4_t *)v157;
          int32x4_t v84 = (char *)v158;
          unsigned int v44 = v165;
          unsigned int v39 = v166;
          uint64_t v81 = v168;
          uint64_t v82 = 64;
LABEL_160:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v81, v82, v83, v84, v44, v39);
LABEL_161:
          a7 = v142;
          if (v155) {
            memcpy(__src, v78, 0x400uLL);
          }
          BOOL v21 = v38++ == v143 >> 4;
          uint64_t result = v150;
          unsigned int v39 = v151;
        }
        while (!v21);
        BOOL v21 = v20++ == v133;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v205 = a8;
  unsigned int v187 = a8 + a10 - 1;
  uint64_t v206 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v186 = v187 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v209 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v200 = 0;
LABEL_32:
      unsigned int v196 = v27 - 4;
      unsigned int v191 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v184 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v200 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v200 = 0;
  unsigned int v184 = 0;
  unsigned int v191 = 0;
  unsigned int v196 = 0;
LABEL_33:
  if (v20 <= v186)
  {
    unsigned int v199 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v199 >> 4)
    {
      unsigned int v208 = v18 >> 4;
      unsigned int v182 = v19 >> 4;
      int v207 = (v18 & 0xF) + 1;
      int v181 = (v19 & 0xF) + 1;
      int v180 = ~(-1 << v191);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v194 = v35.i32[0] | v35.i32[1];
      int8x8_t v190 = v35;
      BOOL v188 = v35.i32[0] != 0;
      BOOL v189 = v35.i32[1] != 0;
      uint64_t v36 = a11;
      uint64_t v37 = 4 * a11;
      uint64_t v38 = 2 * a11;
      unsigned int v198 = a7;
      do
      {
        unsigned int v39 = (16 * v20) | 0xF;
        if (16 * v20 <= v205) {
          int v40 = v205;
        }
        else {
          int v40 = 16 * v20;
        }
        if (v187 < v39) {
          unsigned int v39 = v187;
        }
        int v195 = v40 - 16 * v20;
        int v204 = v39 - v40 + 1;
        unsigned int v41 = v183;
        if (v20 == v182) {
          unsigned int v42 = v181;
        }
        else {
          unsigned int v42 = 16;
        }
        int v43 = v20 & v180;
        uint64_t v203 = a3 + (v40 - v205) * v36;
        do
        {
          unsigned int v44 = 16 * v41;
          unsigned int v45 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= a7) {
            int v46 = a7;
          }
          else {
            int v46 = 16 * v41;
          }
          if (v199 < v45) {
            unsigned int v45 = v199;
          }
          int v47 = v45 - v46 + 1;
          if (v41 == v208) {
            unsigned int v48 = v207;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (16 * v20 >= v205 && v44 >= a7)
          {
            int v50 = v207;
            if (v41 != v208) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v204 != v42;
          }
          if (v200)
          {
            if (v196 | v191)
            {
              int v52 = 0;
              uint64_t v53 = 0;
              BOOL v54 = v191 != 0;
              int v55 = 1;
              BOOL v57 = v196 != 0;
              unsigned int v56 = v191;
              unsigned int v58 = v196;
              do
              {
                --v58;
                if (v57) {
                  v53 |= (unint64_t)(v41 & ~(-1 << v196) & v55) << v52++;
                }
                else {
                  unsigned int v58 = 0;
                }
                --v56;
                if (v54) {
                  v53 |= (unint64_t)(v43 & v55) << v52++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v55 *= 2;
                --v52;
                BOOL v54 = v56 != 0;
                BOOL v57 = v58 != 0;
              }
              while (v56 | v58);
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v66 = *(void *)(result + 320) * ((v41 >> v196) + (v20 >> v191) * v184) + (v53 << 10);
          }
          else
          {
            if (v194)
            {
              int v59 = 0;
              uint64_t v60 = 0;
              int v61 = 1;
              BOOL v62 = v188;
              BOOL v63 = v189;
              __int32 v65 = v190.i32[0];
              __int32 v64 = v190.i32[1];
              do
              {
                --v64;
                if (v63) {
                  v60 |= (unint64_t)(v61 & v41) << v59++;
                }
                else {
                  __int32 v64 = 0;
                }
                --v65;
                if (v62) {
                  v60 |= (unint64_t)(v61 & v20) << v59++;
                }
                else {
                  __int32 v65 = 0;
                }
                v61 *= 2;
                --v59;
                BOOL v62 = v65 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v65 | v64);
            }
            else
            {
              uint64_t v60 = 0;
            }
            uint64_t v66 = v60 << 10;
          }
          unsigned int v67 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
          }
          unsigned int v70 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20)
          {
            unsigned int v72 = 0;
            if (!v69)
            {
LABEL_111:
              uint64_t v74 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
            if (!(v72 | v69)) {
              goto LABEL_111;
            }
          }
          int v73 = 0;
          uint64_t v74 = 0;
          BOOL v75 = v69 != 0;
          BOOL v76 = v72 != 0;
          int v77 = 1;
          do
          {
            --v69;
            if (v75) {
              v74 |= (unint64_t)(v77 & v41) << v73++;
            }
            else {
              unsigned int v69 = 0;
            }
            --v72;
            if (v76) {
              v74 |= (unint64_t)(v77 & v20) << v73++;
            }
            else {
              unsigned int v72 = 0;
            }
            v77 *= 2;
            --v73;
            BOOL v76 = v72 != 0;
            BOOL v75 = v69 != 0;
          }
          while (v72 | v69);
LABEL_112:
          int v78 = v48 < 0x10 || v49;
          int v79 = (unsigned __int8 *)(a4 + 8 * v74);
          uint64_t v80 = v203 + 4 * (v46 - a7);
          uint64_t v81 = (int64x2_t *)(a2 + v66);
          if (v42 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          if (v209)
          {
            if (v82)
            {
              uint64_t v83 = v81;
              int v84 = v47;
              BOOL v85 = v49;
              int v192 = v46;
              memcpy(__dst, v81, sizeof(__dst));
              int v46 = v192;
              BOOL v49 = v85;
              unsigned int v44 = 16 * v41;
              uint64_t v36 = a11;
              int v47 = v84;
              uint64_t v86 = (int64x2_t *)__dst;
              uint64_t v81 = v83;
              uint64_t result = v206;
LABEL_122:
              unsigned int v197 = v81;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int32x4_t v211 = v86;
              unsigned __int8 v219 = v48;
              unsigned __int8 v220 = v42;
              unsigned int v215 = v195;
              unsigned int v216 = v46 - v44;
              int32x4_t v212 = v79;
              uint64_t v213 = v80;
              uint64_t v214 = v36;
              unsigned int v217 = v204;
              unsigned int v218 = v47;
              if (v49)
              {
                unsigned int v87 = v86;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t v86 = v87;
                uint64_t result = v206;
                a7 = v198;
                uint64_t v38 = 2 * a11;
                uint64_t v37 = 4 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                goto LABEL_187;
              }
              unint64_t v193 = v86;
              uint64_t v113 = (int64x2_t *)((char *)v86
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v86, *v79));
              char v114 = (int64x2_t *)((char *)v113
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v113, v79[1]));
              int v115 = (int64x2_t *)((char *)v114
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v114, v79[2]));
              uint64_t v116 = (int64x2_t *)((char *)v115
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v115, v79[3]));
              int32x4_t v117 = (int64x2_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v116, v79[4]));
              int32x4_t v118 = (int64x2_t *)((char *)v117
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v228, 64, v117, v79[5]));
              uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, v118, v79[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v229, 64, (int64x2_t *)((char *)v118 + v119), v79[7]);
              uint64_t v120 = v217;
              if (!v217 || !v218)
              {
LABEL_174:
                uint64_t v156 = 0;
                int v157 = v211;
                uint64_t v158 = (char *)v212;
                int v159 = v219;
                int v160 = v220;
                a7 = v198;
                uint64_t result = v206;
                uint64_t v38 = 2 * a11;
                int v43 = v20 & v180;
                unsigned int v88 = v41 + 1;
                uint64_t v86 = v193;
                do
                {
                  uint64_t v175 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156 + 1];
                  uint64_t v176 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v156];
                  unsigned int v177 = (v159 - 8 * v176) & ~((v159 - 8 * (int)v176) >> 31);
                  if (v177 >= 8) {
                    unsigned int v177 = 8;
                  }
                  unsigned int v178 = (v160 - 4 * v175) & ~((v160 - 4 * (int)v175) >> 31);
                  if (v178 >= 4) {
                    unsigned int v178 = 4;
                  }
                  if (v177) {
                    BOOL v179 = v178 == 0;
                  }
                  else {
                    BOOL v179 = 1;
                  }
                  if (v179)
                  {
                    char v174 = 0;
                  }
                  else
                  {
                    unsigned int v161 = &v222[16 * v175 + 2 * v176];
                    int64x2_t v162 = v161[1];
                    int64x2_t v163 = v161[4];
                    int64x2_t v164 = v161[5];
                    int64x2_t v165 = vzip1q_s64(*v161, v163);
                    int64x2_t v166 = vzip2q_s64(*v161, v163);
                    int64x2_t v167 = vzip1q_s64(v162, v164);
                    int64x2_t v168 = vzip2q_s64(v162, v164);
                    int64x2_t v169 = v161[8];
                    int64x2_t v170 = v161[9];
                    v161 += 12;
                    int64x2_t v171 = v161[1];
                    int64x2_t v172 = vzip1q_s64(v169, *v161);
                    int64x2_t v173 = vzip2q_s64(v169, *v161);
                    *int v157 = v165;
                    v157[1] = v166;
                    v157[2] = v172;
                    v157[3] = v173;
                    v157[4] = v167;
                    v157[5] = v168;
                    v157[6] = vzip1q_s64(v170, v171);
                    v157[7] = vzip2q_s64(v170, v171);
                    v157 += 8;
                    char v174 = 127;
                  }
                  *v158++ = v174;
                  v156 += 2;
                }
                while (v156 != 16);
                uint64_t v37 = 4 * a11;
LABEL_187:
                uint64_t v81 = v197;
                if (v209) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v121 = 0;
              unint64_t v122 = (unint64_t)v215 << 6;
              uint64_t v123 = 4 * v216;
              uint64_t v124 = &v222[0].i8[v122 + v123];
              uint64_t v125 = v213;
              uint64_t v126 = v214;
              unint64_t v127 = 4 * v218;
              if (v127 <= 1) {
                unint64_t v128 = 1;
              }
              else {
                unint64_t v128 = 4 * v218;
              }
              unint64_t v129 = v122 + v123;
              unsigned int v130 = &v222[0].i8[v122 + v123];
              if (v128) {
                BOOL v131 = (v128 - 1) >> 32 == 0;
              }
              else {
                BOOL v131 = 0;
              }
              uint64_t v132 = v128 & 0x3FFFFFFE0;
              uint64_t v133 = v128 & 0x3FFFFFFF8;
              char v135 = !v131 || v128 < 8;
              BOOL v136 = &v222[1].i8[v129];
              int8x8_t v137 = (long long *)(v213 + 16);
              unsigned int v138 = v124;
              uint64_t v139 = v213;
              while (2)
              {
                int v140 = (char *)(v125 + v126 * v121);
                unsigned int v141 = &v124[64 * v121];
                if ((unint64_t)(&v130[64 * v121] - v140) < 0x20) {
                  char v142 = 1;
                }
                else {
                  char v142 = v135;
                }
                if (v142)
                {
                  int v143 = 0;
LABEL_171:
                  unsigned int v153 = v143 + 1;
                  do
                  {
                    char v154 = *v140++;
                    *v141++ = v154;
                  }
                  while (v127 > v153++);
                }
                else
                {
                  if (v128 >= 0x20)
                  {
                    uint64_t v145 = v137;
                    float32x2x2_t v146 = v136;
                    uint64_t v147 = v128 & 0x3FFFFFFE0;
                    do
                    {
                      long long v148 = *v145;
                      *((_OWORD *)v146 - 1) = *(v145 - 1);
                      *(_OWORD *)float32x2x2_t v146 = v148;
                      v146 += 32;
                      v145 += 2;
                      v147 -= 32;
                    }
                    while (v147);
                    if (v128 == v132) {
                      goto LABEL_154;
                    }
                    uint64_t v144 = v128 & 0x3FFFFFFE0;
                    if ((v128 & 0x18) == 0)
                    {
                      v140 += v132;
                      v141 += v132;
                      int v143 = v128 & 0xFFFFFFE0;
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v144 = 0;
                  }
                  v141 += v133;
                  uint64_t v149 = v144 - v133;
                  uint64_t v150 = (uint64_t *)(v139 + v144);
                  unsigned int v151 = &v138[v144];
                  do
                  {
                    uint64_t v152 = *v150++;
                    *(void *)unsigned int v151 = v152;
                    v151 += 8;
                    v149 += 8;
                  }
                  while (v149);
                  if (v128 != v133)
                  {
                    v140 += v133;
                    int v143 = v128 & 0xFFFFFFF8;
                    goto LABEL_171;
                  }
                }
LABEL_154:
                ++v121;
                v136 += 64;
                int8x8_t v137 = (long long *)((char *)v137 + v126);
                v139 += v126;
                v138 += 64;
                if (v121 == v120) {
                  goto LABEL_174;
                }
                continue;
              }
            }
            uint64_t v86 = (int64x2_t *)__dst;
          }
          else
          {
            uint64_t v86 = v81;
            if (v82) {
              goto LABEL_122;
            }
          }
          uint64_t v89 = 0;
          int32x4_t v90 = v86;
          do
          {
            uint64_t v108 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89 + 1];
            uint64_t v109 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v89];
            unsigned int v110 = (v48 - 8 * v109) & ~((int)(v48 - 8 * v109) >> 31);
            if (v110 >= 8) {
              unsigned int v110 = 8;
            }
            unsigned int v111 = (v42 - 4 * v108) & ~((int)(v42 - 4 * v108) >> 31);
            if (v111 >= 4) {
              unsigned int v111 = 4;
            }
            if (v110) {
              BOOL v112 = v111 == 0;
            }
            else {
              BOOL v112 = 1;
            }
            if (v112)
            {
              char v107 = 0;
            }
            else
            {
              uint64_t v91 = (int64x2_t *)(v80 + v37 * v108 + 32 * v109);
              uint64_t v92 = (int64x2_t *)((char *)v91 + v36);
              int64x2_t v94 = *v91;
              int64x2_t v95 = v91[1];
              uint64_t v93 = (int64x2_t *)((char *)v91 + v38);
              int64x2_t v96 = v92[1];
              int64x2_t v97 = vzip1q_s64(v94, *v92);
              int64x2_t v98 = vzip2q_s64(v94, *v92);
              int64x2_t v99 = vzip1q_s64(v95, v96);
              int64x2_t v100 = vzip2q_s64(v95, v96);
              int64x2_t v102 = *v93;
              int64x2_t v103 = v93[1];
              unint64_t v101 = (int64x2_t *)((char *)v93 + v36);
              int64x2_t v104 = v101[1];
              int64x2_t v105 = vzip1q_s64(v102, *v101);
              int64x2_t v106 = vzip2q_s64(v102, *v101);
              *int32x4_t v90 = v97;
              v90[1] = v98;
              v90[2] = v105;
              v90[3] = v106;
              v90[4] = v99;
              v90[5] = v100;
              v90[6] = vzip1q_s64(v103, v104);
              v90[7] = vzip2q_s64(v103, v104);
              v90 += 8;
              char v107 = 127;
            }
            *v79++ = v107;
            v89 += 2;
          }
          while (v89 != 16);
          a7 = v198;
          int v43 = v20 & v180;
          unsigned int v88 = v41 + 1;
          if (v209)
          {
LABEL_47:
            memcpy(v81, v86, 0x400uLL);
            uint64_t v38 = 2 * a11;
            uint64_t v37 = 4 * a11;
            uint64_t result = v206;
          }
LABEL_48:
          BOOL v21 = v41 == v199 >> 4;
          unsigned int v41 = v88;
        }
        while (!v21);
        BOOL v21 = v20++ == v186;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v149 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v133 = a8 + a10 - 1;
  unsigned int v135 = v133 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v150 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v150;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v154 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v150;
  BOOL v143 = isLevelTiled;
  if (v18 <= v135)
  {
    unsigned int v142 = a7 + a9 - 1;
    unsigned int v132 = a7 >> 4;
    if (a7 >> 4 <= v142 >> 4)
    {
      unsigned int v129 = a5 - 1;
      unsigned int v131 = (a6 - 1) >> 4;
      int v152 = ((a5 - 1) & 0xF) + 1;
      unsigned int v153 = (a5 - 1) >> 4;
      int v130 = ((a6 - 1) & 0xF) + 1;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v140 = v30.i32[0] | v30.i32[1];
      int8x8_t v139 = v30;
      BOOL v137 = v30.i32[0] != 0;
      BOOL v138 = v30.i32[1] != 0;
      unint64_t v128 = 8 * v20 * (unint64_t)v19;
      unsigned int v141 = a7;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v149) {
          int v32 = v149;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v132;
        if (v133 < v31) {
          unsigned int v31 = v133;
        }
        int v136 = v32 - 16 * v18;
        int v147 = v31 - v32 + 1;
        unsigned int v148 = 16 * v18;
        if (v18 == v131) {
          unsigned int v34 = v130;
        }
        else {
          unsigned int v34 = 16;
        }
        uint64_t v146 = a3 + (v32 - v149) * a11;
        unsigned int v151 = v34;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v142 < v36) {
            unsigned int v36 = v142;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v153) {
            unsigned int v39 = v152;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v148 >= v149 && v35 >= a7)
          {
            int v41 = v152;
            if (v33 != v153) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v147 != v34;
          }
          if (v143)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v128 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v119 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v120 = 0;
              if (v65) {
                goto LABEL_161;
              }
LABEL_150:
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v121 | v120) {
                goto LABEL_151;
              }
LABEL_162:
              uint64_t v123 = 0;
            }
            else
            {
              unsigned int v120 = 32 - __clz(~(-1 << -(char)__clz(v119)));
              if ((v65 & 1) == 0) {
                goto LABEL_150;
              }
LABEL_161:
              unsigned int v121 = 0;
              if (!v120) {
                goto LABEL_162;
              }
LABEL_151:
              int v122 = 0;
              uint64_t v123 = 0;
              int v124 = v33 & v119;
              BOOL v125 = v120 != 0;
              BOOL v126 = v121 != 0;
              int v127 = 1;
              do
              {
                --v120;
                if (v125) {
                  v123 |= (unint64_t)(v127 & v124) << v122++;
                }
                else {
                  unsigned int v120 = 0;
                }
                --v121;
                if (v126) {
                  v123 |= (unint64_t)(v127 & v18 & ((v66 >> 4) - 1)) << v122++;
                }
                else {
                  unsigned int v121 = 0;
                }
                v127 *= 2;
                --v122;
                BOOL v126 = v121 != 0;
                BOOL v125 = v120 != 0;
              }
              while (v121 | v120);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v148 / v66 * ((v62 + v129) / v62)) << 14) + (v123 << 10);
            goto LABEL_59;
          }
          if (v140)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v137;
            BOOL v47 = v138;
            __int32 v49 = v139.i32[0];
            __int32 v48 = v139.i32[1];
            do
            {
              --v48;
              if (v47) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v46) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v46 = v49 != 0;
              BOOL v47 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 10;
LABEL_59:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_81:
              uint64_t v58 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_81;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_82:
          int v67 = v39 < 0x10 || v40;
          unsigned int v68 = (char *)(a4 + 8 * v58);
          unint64_t v69 = v146 + 4 * (v37 - a7);
          unsigned int v70 = (int32x4_t *)(a2 + v50);
          if (v34 < 0x10) {
            int v71 = 1;
          }
          else {
            int v71 = v67;
          }
          if (v154)
          {
            if (!v71)
            {
              BOOL v75 = (int32x4_t *)__dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v69, a11, v75, v68, v39, v34);
              a7 = v141;
              goto LABEL_132;
            }
            char v72 = v39;
            int v73 = v38;
            int v74 = v37;
            memcpy(__dst, v70, sizeof(__dst));
            int v37 = v74;
            BOOL v75 = (int32x4_t *)__dst;
            int v38 = v73;
            unsigned int v35 = 16 * v33;
            LOBYTE(v39) = v72;
            LOBYTE(v34) = v151;
            uint64_t v28 = v150;
          }
          else
          {
            BOOL v75 = v70;
            if (!v71) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          uint64_t v156 = v75;
          unsigned __int8 v164 = v39;
          unsigned __int8 v165 = v34;
          unsigned int v160 = v136;
          unsigned int v161 = v37 - v35;
          int v157 = v68;
          unint64_t v158 = v69;
          uint64_t v159 = a11;
          unsigned int v162 = v147;
          unsigned int v163 = v38;
          if (v40)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            a7 = v141;
            goto LABEL_132;
          }
          BOOL v76 = (int64x2_t *)&v75->i8[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v167, 64, (int64x2_t *)v75, *v68)];
          int v77 = (int64x2_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v169, 64, v76, v68[1]));
          int v78 = (int64x2_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v168, 64, v77, v68[2]));
          int v79 = (int64x2_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v170, 64, v78, v68[3]));
          uint64_t v80 = (int64x2_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v171, 64, v79, v68[4]));
          uint64_t v81 = (int64x2_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v173, 64, v80, v68[5]));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v172, 64, v81, v68[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v174, 64, (int64x2_t *)((char *)v81 + v82), v68[7]);
          uint64_t v83 = v162;
          a7 = v141;
          if (v162 && v163)
          {
            uint64_t v84 = 0;
            unint64_t v85 = (unint64_t)v160 << 6;
            uint64_t v86 = 4 * v161;
            unsigned int v87 = &v167[0].i8[v85 + v86];
            unint64_t v88 = v158;
            uint64_t v89 = v159;
            unint64_t v90 = 4 * v163;
            if (v90 <= 1) {
              unint64_t v91 = 1;
            }
            else {
              unint64_t v91 = 4 * v163;
            }
            unint64_t v92 = v85 + v86;
            uint64_t v93 = &v167[0].i8[v85 + v86];
            if (v91) {
              BOOL v94 = (v91 - 1) >> 32 == 0;
            }
            else {
              BOOL v94 = 0;
            }
            uint64_t v95 = v91 & 0x3FFFFFFE0;
            uint64_t v96 = v91 & 0x3FFFFFFF8;
            char v98 = !v94 || v91 < 8;
            int64x2_t v99 = &v167[1].i8[v92];
            int64x2_t v100 = (long long *)(v158 + 16);
            unint64_t v101 = v87;
            unint64_t v102 = v158;
            do
            {
              int64x2_t v103 = (char *)(v88 + v89 * v84);
              int64x2_t v104 = &v87[64 * v84];
              if ((unint64_t)(&v93[64 * v84] - v103) < 0x20) {
                char v105 = 1;
              }
              else {
                char v105 = v98;
              }
              if (v105)
              {
                int v106 = 0;
                goto LABEL_128;
              }
              if (v91 >= 0x20)
              {
                uint64_t v108 = v100;
                uint64_t v109 = v99;
                uint64_t v110 = v91 & 0x3FFFFFFE0;
                do
                {
                  long long v111 = *v108;
                  *((_OWORD *)v109 - 1) = *(v108 - 1);
                  *(_OWORD *)uint64_t v109 = v111;
                  v109 += 32;
                  v108 += 2;
                  v110 -= 32;
                }
                while (v110);
                if (v91 == v95) {
                  goto LABEL_111;
                }
                uint64_t v107 = v91 & 0x3FFFFFFE0;
                if ((v91 & 0x18) == 0)
                {
                  v103 += v95;
                  v104 += v95;
                  int v106 = v91 & 0xFFFFFFE0;
                  goto LABEL_128;
                }
              }
              else
              {
                uint64_t v107 = 0;
              }
              v104 += v96;
              uint64_t v112 = v107 - v96;
              uint64_t v113 = (uint64_t *)(v102 + v107);
              char v114 = &v101[v107];
              do
              {
                uint64_t v115 = *v113++;
                *(void *)char v114 = v115;
                v114 += 8;
                v112 += 8;
              }
              while (v112);
              if (v91 == v96) {
                goto LABEL_111;
              }
              v103 += v96;
              int v106 = v91 & 0xFFFFFFF8;
LABEL_128:
              unsigned int v116 = v106 + 1;
              do
              {
                char v117 = *v103++;
                *v104++ = v117;
              }
              while (v90 > v116++);
LABEL_111:
              ++v84;
              v99 += 64;
              int64x2_t v100 = (long long *)((char *)v100 + v89);
              v102 += v89;
              v101 += 64;
            }
            while (v84 != v83);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v167, 64, v156, v157, v164, v165);
LABEL_132:
          if (v154) {
            memcpy(v70, v75, 0x400uLL);
          }
          BOOL v23 = v33++ == v142 >> 4;
          uint64_t v28 = v150;
          unsigned int v34 = v151;
        }
        while (!v23);
        BOOL v23 = v18++ == v135;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v203 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v184 = a8 + a10 - 1;
  unsigned int v186 = v184 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v204 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v207 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v197 = isLevelTiled;
  if (v17 <= v186)
  {
    unsigned int v196 = a7 + a9 - 1;
    unsigned int v183 = a7 >> 4;
    if (a7 >> 4 <= v196 >> 4)
    {
      unsigned int v180 = a5 - 1;
      unsigned int v206 = (a5 - 1) >> 4;
      int v205 = ((a5 - 1) & 0xF) + 1;
      int v181 = ((a6 - 1) & 0xF) + 1;
      unsigned int v182 = (a6 - 1) >> 4;
      unint64_t v27 = v19 * (unint64_t)v18;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v194 = v29.i32[0] | v29.i32[1];
      int8x8_t v192 = v29;
      BOOL v190 = v29.i32[0] != 0;
      BOOL v191 = v29.i32[1] != 0;
      uint64_t v30 = a11;
      unint64_t v179 = 8 * v27;
      uint64_t v31 = 4 * a11;
      uint64_t v32 = 2 * a11;
      unsigned int v195 = a7;
      do
      {
        unsigned int v33 = (16 * v17) | 0xF;
        if (16 * v17 <= v203) {
          int v34 = v203;
        }
        else {
          int v34 = 16 * v17;
        }
        unsigned int v35 = v183;
        if (v184 < v33) {
          unsigned int v33 = v184;
        }
        int v189 = v34 - 16 * v17;
        int v201 = v33 - v34 + 1;
        unsigned int v202 = 16 * v17;
        if (v17 == v182) {
          unsigned int v36 = v181;
        }
        else {
          unsigned int v36 = 16;
        }
        uint64_t v200 = a3 + (v34 - v203) * v30;
        unsigned int v187 = v36;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v196 < v38) {
            unsigned int v38 = v196;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v206) {
            unsigned int v41 = v205;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v202 >= v203 && v37 >= a7)
          {
            int v43 = v205;
            if (v35 != v206) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v201 != v36;
          }
          if (v197)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v179 >> (*(unsigned char *)(v26 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v170 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v171 = 0;
              if (v67) {
                goto LABEL_186;
              }
LABEL_175:
              unsigned int v172 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v172 | v171) {
                goto LABEL_176;
              }
LABEL_187:
              uint64_t v174 = 0;
            }
            else
            {
              unsigned int v171 = 32 - __clz(~(-1 << -(char)__clz(v170)));
              if ((v67 & 1) == 0) {
                goto LABEL_175;
              }
LABEL_186:
              unsigned int v172 = 0;
              if (!v171) {
                goto LABEL_187;
              }
LABEL_176:
              int v173 = 0;
              uint64_t v174 = 0;
              int v175 = v35 & v170;
              BOOL v176 = v171 != 0;
              BOOL v177 = v172 != 0;
              int v178 = 1;
              do
              {
                --v171;
                if (v176) {
                  v174 |= (unint64_t)(v178 & v175) << v173++;
                }
                else {
                  unsigned int v171 = 0;
                }
                --v172;
                if (v177) {
                  v174 |= (unint64_t)(v178 & v17 & ((v68 >> 4) - 1)) << v173++;
                }
                else {
                  unsigned int v172 = 0;
                }
                v178 *= 2;
                --v173;
                BOOL v177 = v172 != 0;
                BOOL v176 = v171 != 0;
              }
              while (v172 | v171);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v202 / v68 * ((v64 + v180) / v64)) << 14) + (v174 << 10);
            goto LABEL_59;
          }
          if (v194)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v190;
            BOOL v49 = v191;
            __int32 v51 = v192.i32[0];
            __int32 v50 = v192.i32[1];
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 10;
LABEL_59:
          unsigned int v53 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_81:
              uint64_t v60 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_81;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v17) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_82:
          int v69 = v41 < 0x10 || v42;
          unsigned int v70 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v71 = v200 + 4 * (v39 - a7);
          char v72 = (int64x2_t *)(a2 + v52);
          if (v36 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v207)
          {
            if (!v73)
            {
              int v77 = (int64x2_t *)__dst;
LABEL_96:
              uint64_t v79 = 0;
              uint64_t v80 = v77;
              do
              {
                uint64_t v98 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79 + 1];
                uint64_t v99 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79];
                unsigned int v100 = (v41 - 8 * v99) & ~((int)(v41 - 8 * v99) >> 31);
                if (v100 >= 8) {
                  unsigned int v100 = 8;
                }
                unsigned int v101 = (v36 - 4 * v98) & ~((int)(v36 - 4 * v98) >> 31);
                if (v101 >= 4) {
                  unsigned int v101 = 4;
                }
                if (v100) {
                  BOOL v102 = v101 == 0;
                }
                else {
                  BOOL v102 = 1;
                }
                if (v102)
                {
                  char v97 = 0;
                }
                else
                {
                  uint64_t v81 = (int64x2_t *)(v71 + v31 * v98 + 32 * v99);
                  uint64_t v82 = (int64x2_t *)((char *)v81 + v30);
                  int64x2_t v84 = *v81;
                  int64x2_t v85 = v81[1];
                  uint64_t v83 = (int64x2_t *)((char *)v81 + v32);
                  int64x2_t v86 = v82[1];
                  int64x2_t v87 = vzip1q_s64(v84, *v82);
                  int64x2_t v88 = vzip2q_s64(v84, *v82);
                  int64x2_t v89 = vzip1q_s64(v85, v86);
                  int64x2_t v90 = vzip2q_s64(v85, v86);
                  int64x2_t v92 = *v83;
                  int64x2_t v93 = v83[1];
                  unint64_t v91 = (int64x2_t *)((char *)v83 + v30);
                  int64x2_t v94 = v91[1];
                  int64x2_t v95 = vzip1q_s64(v92, *v91);
                  int64x2_t v96 = vzip2q_s64(v92, *v91);
                  *uint64_t v80 = v87;
                  v80[1] = v88;
                  v80[2] = v95;
                  v80[3] = v96;
                  v80[4] = v89;
                  v80[5] = v90;
                  v80[6] = vzip1q_s64(v93, v94);
                  v80[7] = vzip2q_s64(v93, v94);
                  v80 += 8;
                  char v97 = 127;
                }
                *v70++ = v97;
                v79 += 2;
              }
              while (v79 != 16);
              a7 = v195;
              if (v207) {
                goto LABEL_158;
              }
              goto LABEL_27;
            }
            int v74 = v72;
            int v75 = v40;
            BOOL v76 = v42;
            memcpy(__dst, v72, sizeof(__dst));
            int v77 = (int64x2_t *)__dst;
            char v72 = v74;
            BOOL v42 = v76;
            uint64_t v30 = a11;
            unsigned int v36 = v187;
            unsigned int v37 = 16 * v35;
            int v40 = v75;
            uint64_t v26 = v204;
          }
          else
          {
            int v77 = v72;
            if (!v73) {
              goto LABEL_96;
            }
          }
          unint64_t v193 = v72;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          int v209 = v77;
          unsigned __int8 v217 = v41;
          unsigned __int8 v218 = v36;
          unsigned int v213 = v189;
          unsigned int v214 = v39 - v37;
          int32x4_t v210 = v70;
          uint64_t v211 = v71;
          uint64_t v212 = v30;
          unsigned int v215 = v201;
          unsigned int v216 = v40;
          if (v42)
          {
            int v78 = v77;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
            int v77 = v78;
            uint64_t v26 = v204;
            a7 = v195;
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            char v72 = v193;
            if (!v207) {
              goto LABEL_27;
            }
LABEL_158:
            memcpy(v72, v77, 0x400uLL);
            uint64_t v32 = 2 * a11;
            uint64_t v31 = 4 * a11;
            uint64_t v26 = v204;
            goto LABEL_27;
          }
          BOOL v188 = v77;
          int64x2_t v103 = (int64x2_t *)((char *)v77
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v220, 64, v77, *v70));
          int64x2_t v104 = (int64x2_t *)((char *)v103
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v222, 64, v103, v70[1]));
          char v105 = (int64x2_t *)((char *)v104
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v221, 64, v104, v70[2]));
          int v106 = (int64x2_t *)((char *)v105
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v223, 64, v105, v70[3]));
          uint64_t v107 = (int64x2_t *)((char *)v106
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v224, 64, v106, v70[4]));
          uint64_t v108 = (int64x2_t *)((char *)v107
                             + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v226, 64, v107, v70[5]));
          uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v225, 64, v108, v70[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v227, 64, (int64x2_t *)((char *)v108 + v109), v70[7]);
          uint64_t v110 = v215;
          if (v215 && v216)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)v213 << 6;
            uint64_t v113 = 4 * v214;
            char v114 = &v220[0].i8[v112 + v113];
            uint64_t v115 = v211;
            uint64_t v116 = v212;
            unint64_t v117 = 4 * v216;
            if (v117 <= 1) {
              unint64_t v118 = 1;
            }
            else {
              unint64_t v118 = 4 * v216;
            }
            unint64_t v119 = v112 + v113;
            unsigned int v120 = &v220[0].i8[v112 + v113];
            if (v118) {
              BOOL v121 = (v118 - 1) >> 32 == 0;
            }
            else {
              BOOL v121 = 0;
            }
            uint64_t v122 = v118 & 0x3FFFFFFE0;
            uint64_t v123 = v118 & 0x3FFFFFFF8;
            char v125 = !v121 || v118 < 8;
            BOOL v126 = &v220[1].i8[v119];
            int v127 = (long long *)(v211 + 16);
            unint64_t v128 = v114;
            uint64_t v129 = v211;
            do
            {
              int v130 = (char *)(v115 + v116 * v111);
              unsigned int v131 = &v114[64 * v111];
              if ((unint64_t)(&v120[64 * v111] - v130) < 0x20) {
                char v132 = 1;
              }
              else {
                char v132 = v125;
              }
              if (v132)
              {
                int v133 = 0;
                goto LABEL_142;
              }
              if (v118 >= 0x20)
              {
                unsigned int v135 = v127;
                int v136 = v126;
                uint64_t v137 = v118 & 0x3FFFFFFE0;
                do
                {
                  long long v138 = *v135;
                  *((_OWORD *)v136 - 1) = *(v135 - 1);
                  *(_OWORD *)int v136 = v138;
                  v136 += 32;
                  v135 += 2;
                  v137 -= 32;
                }
                while (v137);
                if (v118 == v122) {
                  goto LABEL_125;
                }
                uint64_t v134 = v118 & 0x3FFFFFFE0;
                if ((v118 & 0x18) == 0)
                {
                  v130 += v122;
                  v131 += v122;
                  int v133 = v118 & 0xFFFFFFE0;
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v134 = 0;
              }
              v131 += v123;
              uint64_t v139 = v134 - v123;
              __int32 v140 = (uint64_t *)(v129 + v134);
              unsigned int v141 = &v128[v134];
              do
              {
                uint64_t v142 = *v140++;
                *(void *)unsigned int v141 = v142;
                v141 += 8;
                v139 += 8;
              }
              while (v139);
              if (v118 == v123) {
                goto LABEL_125;
              }
              v130 += v123;
              int v133 = v118 & 0xFFFFFFF8;
LABEL_142:
              unsigned int v143 = v133 + 1;
              do
              {
                char v144 = *v130++;
                *v131++ = v144;
              }
              while (v117 > v143++);
LABEL_125:
              ++v111;
              v126 += 64;
              int v127 = (long long *)((char *)v127 + v116);
              v129 += v116;
              v128 += 64;
            }
            while (v111 != v110);
          }
          uint64_t v146 = 0;
          int v147 = v209;
          unsigned int v148 = (char *)v210;
          int v149 = v217;
          int v150 = v218;
          a7 = v195;
          uint64_t v26 = v204;
          uint64_t v32 = 2 * a11;
          uint64_t v31 = 4 * a11;
          char v72 = v193;
          do
          {
            uint64_t v165 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146 + 1];
            uint64_t v166 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v146];
            unsigned int v167 = (v149 - 8 * v166) & ~((v149 - 8 * (int)v166) >> 31);
            if (v167 >= 8) {
              unsigned int v167 = 8;
            }
            unsigned int v168 = (v150 - 4 * v165) & ~((v150 - 4 * (int)v165) >> 31);
            if (v168 >= 4) {
              unsigned int v168 = 4;
            }
            if (v167) {
              BOOL v169 = v168 == 0;
            }
            else {
              BOOL v169 = 1;
            }
            if (v169)
            {
              char v164 = 0;
            }
            else
            {
              unsigned int v151 = &v220[16 * v165 + 2 * v166];
              int64x2_t v152 = v151[1];
              int64x2_t v153 = v151[4];
              int64x2_t v154 = v151[5];
              int64x2_t v155 = vzip1q_s64(*v151, v153);
              int64x2_t v156 = vzip2q_s64(*v151, v153);
              int64x2_t v157 = vzip1q_s64(v152, v154);
              int64x2_t v158 = vzip2q_s64(v152, v154);
              int64x2_t v159 = v151[8];
              int64x2_t v160 = v151[9];
              v151 += 12;
              int64x2_t v161 = v151[1];
              int64x2_t v162 = vzip1q_s64(v159, *v151);
              int64x2_t v163 = vzip2q_s64(v159, *v151);
              *int v147 = v155;
              v147[1] = v156;
              v147[2] = v162;
              v147[3] = v163;
              v147[4] = v157;
              v147[5] = v158;
              v147[6] = vzip1q_s64(v160, v161);
              v147[7] = vzip2q_s64(v160, v161);
              v147 += 8;
              char v164 = 127;
            }
            *v148++ = v164;
            v146 += 2;
          }
          while (v146 != 16);
          int v77 = v188;
          if (v207) {
            goto LABEL_158;
          }
LABEL_27:
          BOOL v21 = v35++ == v196 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v186;
      }
      while (!v21);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v323 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v225 = a8 + a10 - 1;
  uint64_t v241 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = a8 >> 4;
  unsigned int v224 = v225 >> 4;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v245 = v25;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v19);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v235 = 0;
LABEL_32:
      unsigned int v232 = v28 - 4;
      unsigned int v229 = v27 - 4;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v222 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v235 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v235 = 0;
  unsigned int v222 = 0;
  unsigned int v229 = 0;
  unsigned int v232 = 0;
LABEL_33:
  if (v21 <= v224)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v221 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v243 = v19 >> 4;
      unsigned int v220 = v20 >> 4;
      int v242 = (v19 & 0xF) + 1;
      int v219 = (v20 & 0xF) + 1;
      int v218 = ~(-1 << v229);
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v36.i64[1] = -1;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)))))));
      *(int8x8_t *)v17.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v230 = v17.i32[0] | v17.i32[1];
      BOOL v227 = v17.i32[1] != 0;
      uint64_t v228 = v17.i64[0];
      BOOL v226 = v17.i32[0] != 0;
      unsigned int v233 = a7;
      do
      {
        unsigned int v37 = (16 * v21) | 0xF;
        if (16 * v21 <= v240) {
          int v38 = v240;
        }
        else {
          int v38 = 16 * v21;
        }
        if (v225 < v37) {
          unsigned int v37 = v225;
        }
        int v231 = v38 - 16 * v21;
        int v239 = v37 - v38 + 1;
        unsigned int v39 = v221;
        int v40 = v219;
        if (v21 != v220) {
          int v40 = 16;
        }
        unsigned int v246 = v40;
        int v41 = v21 & v218;
        uint64_t v238 = a3 + (v38 - v240) * a11;
        do
        {
          unsigned int v42 = 16 * v39;
          unsigned int v43 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= a7) {
            int v44 = a7;
          }
          else {
            int v44 = 16 * v39;
          }
          if (v234 < v43) {
            unsigned int v43 = v234;
          }
          int v45 = v43 - v44 + 1;
          if (v39 == v243) {
            unsigned int v46 = v242;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (16 * v21 >= v240 && v42 >= a7)
          {
            int v48 = v242;
            if (v39 != v243) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v239 != v246;
          }
          if (v235)
          {
            if (v232 | v229)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v232 != 0;
              BOOL v54 = v229 != 0;
              unsigned int v55 = v232;
              unsigned int v56 = v229;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & ~(-1 << v232) & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v41 & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(result + 320) * ((v39 >> v232) + (v21 >> v229) * v222) + (v51 << 10);
          }
          else
          {
            if (v230)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v227;
              BOOL v61 = v226;
              int v62 = HIDWORD(v228);
              int v63 = v228;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v39) << v57++;
                }
                else {
                  int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v21) << v57++;
                }
                else {
                  int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 15;
          if (v69 < 0x20)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_109:
              uint64_t v72 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 4) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_109;
            }
          }
          int v71 = 0;
          uint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            if (v73) {
              v72 |= (unint64_t)(v75 & v39) << v71++;
            }
            else {
              unsigned int v67 = 0;
            }
            --v70;
            if (v74) {
              v72 |= (unint64_t)(v75 & v21) << v71++;
            }
            else {
              unsigned int v70 = 0;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_110:
          unsigned int v76 = v44 - a7;
          int v77 = v46 < 0x10 || v47;
          int v78 = (char *)(a4 + 8 * v72);
          unint64_t v79 = v238 + 4 * v76;
          uint64_t v80 = (int16x8_t *)(a2 + v64);
          if (v246 < 0x10) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          int64x2_t v244 = v80;
          if (v245)
          {
            uint64_t v82 = (int16x8_t *)__dst;
            if (!v81) {
              goto LABEL_122;
            }
            uint64_t v83 = (char *)(a4 + 8 * v72);
            int v84 = v45;
            char v85 = v46;
            memcpy(__dst, v80, sizeof(__dst));
            unsigned int v42 = 16 * v39;
            LOBYTE(v46) = v85;
            int v45 = v84;
            int v78 = v83;
            int v41 = v21 & v218;
            uint64_t result = v241;
          }
          else
          {
            uint64_t v82 = v80;
            if (!v81)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v79, a11, v82, v78, v46, v246);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v248 = v82;
          unsigned __int8 v256 = v46;
          unsigned __int8 v257 = v246;
          unsigned int v252 = v231;
          unsigned int v253 = v44 - v42;
          int64x2_t v249 = v78;
          unint64_t v250 = v79;
          uint64_t v251 = a11;
          unsigned int v254 = v239;
          unsigned int v255 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            a7 = v233;
            unsigned int v86 = v39 + 1;
            goto LABEL_218;
          }
          unsigned int v87 = *v78;
          if (v87 == 127)
          {
            int64x2_t v90 = *(int64x2_t *)v82;
            int64x2_t v91 = (int64x2_t)v82[1];
            int64x2_t v92 = (int64x2_t)v82[2];
            int64x2_t v93 = (int64x2_t)v82[3];
            int64x2_t v94 = (int64x2_t)v82[4];
            int64x2_t v95 = (int64x2_t)v82[5];
            int64x2_t v96 = (int64x2_t)v82[6];
            int64x2_t v97 = (int64x2_t)v82[7];
            int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v82, v91);
            int64x2_t v260 = vzip1q_s64(v94, v95);
            int64x2_t v263 = vzip2q_s64(v90, v91);
            int64x2_t v264 = vzip2q_s64(v94, v95);
            int64x2_t v267 = vzip1q_s64(v92, v93);
            int64x2_t v268 = vzip1q_s64(v96, v97);
            int32x4_t v89 = (int32x4_t)vzip2q_s64(v92, v93);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v96, v97);
            int32x4_t v271 = v89;
            int32x4_t v272 = v36;
            uint64_t v88 = 128;
          }
          else if (v87 == 3)
          {
            int32x4_t v89 = (int32x4_t)vld1q_dup_f32((const float *)v82->i32);
            int64x2_t v259 = (int64x2_t)v89;
            int64x2_t v260 = (int64x2_t)v89;
            int64x2_t v263 = (int64x2_t)v89;
            int64x2_t v264 = (int64x2_t)v89;
            int64x2_t v267 = (int64x2_t)v89;
            int64x2_t v268 = (int64x2_t)v89;
            int32x4_t v271 = v89;
            int32x4_t v272 = v89;
            uint64_t v88 = 4;
          }
          else if (*v78)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, (uint64_t)v82, v87, v17, v36);
          }
          else
          {
            uint64_t v88 = 0;
            int32x4_t v89 = 0uLL;
            int64x2_t v260 = 0u;
            int64x2_t v259 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v264 = 0u;
            int64x2_t v267 = 0u;
            int64x2_t v268 = 0u;
            int32x4_t v271 = 0u;
            int32x4_t v272 = 0u;
          }
          uint64_t v98 = (uint64_t)v82->i64 + v88;
          unsigned int v99 = v78[1];
          if (v99 == 127)
          {
            int64x2_t v102 = *(int64x2_t *)v98;
            int64x2_t v103 = *(int64x2_t *)(v98 + 16);
            int64x2_t v104 = *(int64x2_t *)(v98 + 32);
            int64x2_t v105 = *(int64x2_t *)(v98 + 48);
            int64x2_t v106 = *(int64x2_t *)(v98 + 64);
            int64x2_t v107 = *(int64x2_t *)(v98 + 80);
            int64x2_t v108 = *(int64x2_t *)(v98 + 96);
            int64x2_t v109 = *(int64x2_t *)(v98 + 112);
            int64x2_t v275 = vzip1q_s64(*(int64x2_t *)v98, v103);
            int64x2_t v276 = vzip1q_s64(v106, v107);
            int64x2_t v279 = vzip2q_s64(v102, v103);
            int64x2_t v280 = vzip2q_s64(v106, v107);
            int64x2_t v283 = vzip1q_s64(v104, v105);
            int64x2_t v284 = vzip1q_s64(v108, v109);
            int32x4_t v101 = (int32x4_t)vzip2q_s64(v104, v105);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v108, v109);
            int32x4_t v287 = v101;
            int32x4_t v288 = v36;
            uint64_t v100 = 128;
            unsigned int v86 = v39 + 1;
          }
          else
          {
            unsigned int v86 = v39 + 1;
            if (v99 == 3)
            {
              int32x4_t v101 = (int32x4_t)vld1q_dup_f32((const float *)v98);
              int64x2_t v275 = (int64x2_t)v101;
              int64x2_t v276 = (int64x2_t)v101;
              int64x2_t v279 = (int64x2_t)v101;
              int64x2_t v280 = (int64x2_t)v101;
              int64x2_t v283 = (int64x2_t)v101;
              int64x2_t v284 = (int64x2_t)v101;
              int32x4_t v287 = v101;
              int32x4_t v288 = v101;
              uint64_t v100 = 4;
            }
            else if (v78[1])
            {
              uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v275, 64, v98, v99, v89, v36);
            }
            else
            {
              uint64_t v100 = 0;
              int32x4_t v101 = 0uLL;
              int64x2_t v275 = 0u;
              int64x2_t v276 = 0u;
              int64x2_t v279 = 0u;
              int64x2_t v280 = 0u;
              int64x2_t v283 = 0u;
              int64x2_t v284 = 0u;
              int32x4_t v287 = 0u;
              int32x4_t v288 = 0u;
            }
          }
          uint64_t v110 = v98 + v100;
          unsigned int v111 = v78[2];
          if (v111 == 127)
          {
            int64x2_t v114 = *(int64x2_t *)v110;
            int64x2_t v115 = *(int64x2_t *)(v110 + 16);
            int64x2_t v116 = *(int64x2_t *)(v110 + 32);
            int64x2_t v117 = *(int64x2_t *)(v110 + 48);
            int64x2_t v118 = *(int64x2_t *)(v110 + 64);
            int64x2_t v119 = *(int64x2_t *)(v110 + 80);
            int64x2_t v120 = *(int64x2_t *)(v110 + 96);
            int64x2_t v121 = *(int64x2_t *)(v110 + 112);
            int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v110, v115);
            int64x2_t v262 = vzip1q_s64(v118, v119);
            int64x2_t v265 = vzip2q_s64(v114, v115);
            int64x2_t v266 = vzip2q_s64(v118, v119);
            int64x2_t v269 = vzip1q_s64(v116, v117);
            int64x2_t v270 = vzip1q_s64(v120, v121);
            int32x4_t v113 = (int32x4_t)vzip2q_s64(v116, v117);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v120, v121);
            int32x4_t v273 = v113;
            int32x4_t v274 = v36;
            uint64_t v112 = 128;
          }
          else if (v111 == 3)
          {
            int32x4_t v113 = (int32x4_t)vld1q_dup_f32((const float *)v110);
            int64x2_t v261 = (int64x2_t)v113;
            int64x2_t v262 = (int64x2_t)v113;
            int64x2_t v265 = (int64x2_t)v113;
            int64x2_t v266 = (int64x2_t)v113;
            int64x2_t v269 = (int64x2_t)v113;
            int64x2_t v270 = (int64x2_t)v113;
            int32x4_t v273 = v113;
            int32x4_t v274 = v113;
            uint64_t v112 = 4;
          }
          else if (v78[2])
          {
            uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 64, v110, v111, v101, v36);
          }
          else
          {
            uint64_t v112 = 0;
            int32x4_t v113 = 0uLL;
            int64x2_t v261 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v266 = 0u;
            int64x2_t v269 = 0u;
            int64x2_t v270 = 0u;
            int32x4_t v273 = 0u;
            int32x4_t v274 = 0u;
          }
          uint64_t v122 = v110 + v112;
          unsigned int v123 = v78[3];
          if (v123 == 127)
          {
            int64x2_t v126 = *(int64x2_t *)v122;
            int64x2_t v127 = *(int64x2_t *)(v122 + 16);
            int64x2_t v128 = *(int64x2_t *)(v122 + 32);
            int64x2_t v129 = *(int64x2_t *)(v122 + 48);
            int64x2_t v130 = *(int64x2_t *)(v122 + 64);
            int64x2_t v131 = *(int64x2_t *)(v122 + 80);
            int64x2_t v132 = *(int64x2_t *)(v122 + 96);
            int64x2_t v133 = *(int64x2_t *)(v122 + 112);
            int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v122, v127);
            int64x2_t v278 = vzip1q_s64(v130, v131);
            int64x2_t v281 = vzip2q_s64(v126, v127);
            int64x2_t v282 = vzip2q_s64(v130, v131);
            int64x2_t v285 = vzip1q_s64(v128, v129);
            int64x2_t v286 = vzip1q_s64(v132, v133);
            int32x4_t v125 = (int32x4_t)vzip2q_s64(v128, v129);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v132, v133);
            int32x4_t v289 = v125;
            int32x4_t v290 = v36;
            uint64_t v124 = 128;
          }
          else if (v123 == 3)
          {
            int32x4_t v125 = (int32x4_t)vld1q_dup_f32((const float *)v122);
            int64x2_t v277 = (int64x2_t)v125;
            int64x2_t v278 = (int64x2_t)v125;
            int64x2_t v281 = (int64x2_t)v125;
            int64x2_t v282 = (int64x2_t)v125;
            int64x2_t v285 = (int64x2_t)v125;
            int64x2_t v286 = (int64x2_t)v125;
            int32x4_t v289 = v125;
            int32x4_t v290 = v125;
            uint64_t v124 = 4;
          }
          else if (v78[3])
          {
            uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v277, 64, v122, v123, v113, v36);
          }
          else
          {
            uint64_t v124 = 0;
            int32x4_t v125 = 0uLL;
            int64x2_t v277 = 0u;
            int64x2_t v278 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v282 = 0u;
            int64x2_t v285 = 0u;
            int64x2_t v286 = 0u;
            int32x4_t v289 = 0u;
            int32x4_t v290 = 0u;
          }
          uint64_t v134 = v122 + v124;
          unsigned int v135 = v78[4];
          if (v135 == 127)
          {
            int64x2_t v138 = *(int64x2_t *)v134;
            int64x2_t v139 = *(int64x2_t *)(v134 + 16);
            int64x2_t v140 = *(int64x2_t *)(v134 + 32);
            int64x2_t v141 = *(int64x2_t *)(v134 + 48);
            int64x2_t v142 = *(int64x2_t *)(v134 + 64);
            int64x2_t v143 = *(int64x2_t *)(v134 + 80);
            int64x2_t v144 = *(int64x2_t *)(v134 + 96);
            int64x2_t v145 = *(int64x2_t *)(v134 + 112);
            int64x2_t v291 = vzip1q_s64(*(int64x2_t *)v134, v139);
            int64x2_t v292 = vzip1q_s64(v142, v143);
            int64x2_t v295 = vzip2q_s64(v138, v139);
            int64x2_t v296 = vzip2q_s64(v142, v143);
            int64x2_t v299 = vzip1q_s64(v140, v141);
            int64x2_t v300 = vzip1q_s64(v144, v145);
            int32x4_t v137 = (int32x4_t)vzip2q_s64(v140, v141);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v144, v145);
            int32x4_t v303 = v137;
            int32x4_t v304 = v36;
            uint64_t v136 = 128;
          }
          else if (v135 == 3)
          {
            int32x4_t v137 = (int32x4_t)vld1q_dup_f32((const float *)v134);
            int64x2_t v291 = (int64x2_t)v137;
            int64x2_t v292 = (int64x2_t)v137;
            int64x2_t v295 = (int64x2_t)v137;
            int64x2_t v296 = (int64x2_t)v137;
            int64x2_t v299 = (int64x2_t)v137;
            int64x2_t v300 = (int64x2_t)v137;
            int32x4_t v303 = v137;
            int32x4_t v304 = v137;
            uint64_t v136 = 4;
          }
          else if (v78[4])
          {
            uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v291, 64, v134, v135, v125, v36);
          }
          else
          {
            uint64_t v136 = 0;
            int32x4_t v137 = 0uLL;
            int64x2_t v291 = 0u;
            int64x2_t v292 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v296 = 0u;
            int64x2_t v299 = 0u;
            int64x2_t v300 = 0u;
            int32x4_t v303 = 0u;
            int32x4_t v304 = 0u;
          }
          uint64_t v146 = v134 + v136;
          unsigned int v147 = v78[5];
          if (v147 == 127)
          {
            int64x2_t v150 = *(int64x2_t *)v146;
            int64x2_t v151 = *(int64x2_t *)(v146 + 16);
            int64x2_t v152 = *(int64x2_t *)(v146 + 32);
            int64x2_t v153 = *(int64x2_t *)(v146 + 48);
            int64x2_t v154 = *(int64x2_t *)(v146 + 64);
            int64x2_t v155 = *(int64x2_t *)(v146 + 80);
            int64x2_t v156 = *(int64x2_t *)(v146 + 96);
            int64x2_t v157 = *(int64x2_t *)(v146 + 112);
            int64x2_t v307 = vzip1q_s64(*(int64x2_t *)v146, v151);
            int64x2_t v308 = vzip1q_s64(v154, v155);
            int64x2_t v311 = vzip2q_s64(v150, v151);
            int64x2_t v312 = vzip2q_s64(v154, v155);
            int64x2_t v315 = vzip1q_s64(v152, v153);
            int64x2_t v316 = vzip1q_s64(v156, v157);
            int32x4_t v149 = (int32x4_t)vzip2q_s64(v152, v153);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v156, v157);
            int32x4_t v319 = v149;
            int32x4_t v320 = v36;
            uint64_t v148 = 128;
          }
          else if (v147 == 3)
          {
            int32x4_t v149 = (int32x4_t)vld1q_dup_f32((const float *)v146);
            int64x2_t v307 = (int64x2_t)v149;
            int64x2_t v308 = (int64x2_t)v149;
            int64x2_t v311 = (int64x2_t)v149;
            int64x2_t v312 = (int64x2_t)v149;
            int64x2_t v315 = (int64x2_t)v149;
            int64x2_t v316 = (int64x2_t)v149;
            int32x4_t v319 = v149;
            int32x4_t v320 = v149;
            uint64_t v148 = 4;
          }
          else if (v78[5])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v307, 64, v146, v147, v137, v36);
          }
          else
          {
            uint64_t v148 = 0;
            int32x4_t v149 = 0uLL;
            int64x2_t v307 = 0u;
            int64x2_t v308 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v312 = 0u;
            int64x2_t v315 = 0u;
            int64x2_t v316 = 0u;
            int32x4_t v319 = 0u;
            int32x4_t v320 = 0u;
          }
          uint64_t v158 = v146 + v148;
          unsigned int v159 = v78[6];
          if (v159 == 127)
          {
            int64x2_t v162 = *(int64x2_t *)v158;
            int64x2_t v163 = *(int64x2_t *)(v158 + 16);
            int64x2_t v164 = *(int64x2_t *)(v158 + 32);
            int64x2_t v165 = *(int64x2_t *)(v158 + 48);
            int64x2_t v166 = *(int64x2_t *)(v158 + 64);
            int64x2_t v167 = *(int64x2_t *)(v158 + 80);
            int64x2_t v168 = *(int64x2_t *)(v158 + 96);
            int64x2_t v169 = *(int64x2_t *)(v158 + 112);
            int64x2_t v293 = vzip1q_s64(*(int64x2_t *)v158, v163);
            int64x2_t v294 = vzip1q_s64(v166, v167);
            int64x2_t v297 = vzip2q_s64(v162, v163);
            int64x2_t v298 = vzip2q_s64(v166, v167);
            int64x2_t v301 = vzip1q_s64(v164, v165);
            int64x2_t v302 = vzip1q_s64(v168, v169);
            int32x4_t v161 = (int32x4_t)vzip2q_s64(v164, v165);
            int32x4_t v36 = (int32x4_t)vzip2q_s64(v168, v169);
            int32x4_t v305 = v161;
            int32x4_t v306 = v36;
            uint64_t v160 = 128;
          }
          else if (v159 == 3)
          {
            int32x4_t v161 = (int32x4_t)vld1q_dup_f32((const float *)v158);
            int64x2_t v293 = (int64x2_t)v161;
            int64x2_t v294 = (int64x2_t)v161;
            int64x2_t v297 = (int64x2_t)v161;
            int64x2_t v298 = (int64x2_t)v161;
            int64x2_t v301 = (int64x2_t)v161;
            int64x2_t v302 = (int64x2_t)v161;
            int32x4_t v305 = v161;
            int32x4_t v306 = v161;
            uint64_t v160 = 4;
          }
          else if (v78[6])
          {
            uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v293, 64, v158, v159, v149, v36);
          }
          else
          {
            uint64_t v160 = 0;
            int32x4_t v161 = 0uLL;
            int64x2_t v293 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v298 = 0u;
            int64x2_t v301 = 0u;
            int64x2_t v302 = 0u;
            int32x4_t v305 = 0u;
            int32x4_t v306 = 0u;
          }
          uint64_t v170 = v158 + v160;
          unsigned int v171 = v78[7];
          if (v171 == 127)
          {
            unsigned int v172 = v82;
            int64x2_t v175 = *(int64x2_t *)v170;
            int64x2_t v176 = *(int64x2_t *)(v170 + 16);
            int64x2_t v177 = *(int64x2_t *)(v170 + 32);
            int64x2_t v178 = *(int64x2_t *)(v170 + 48);
            int64x2_t v179 = *(int64x2_t *)(v170 + 64);
            int64x2_t v180 = *(int64x2_t *)(v170 + 80);
            int64x2_t v181 = *(int64x2_t *)(v170 + 96);
            int64x2_t v182 = *(int64x2_t *)(v170 + 112);
            int64x2_t v309 = vzip1q_s64(*(int64x2_t *)v170, v176);
            int64x2_t v310 = vzip1q_s64(v179, v180);
            int64x2_t v313 = vzip2q_s64(v175, v176);
            int64x2_t v314 = vzip2q_s64(v179, v180);
            int64x2_t v317 = vzip1q_s64(v177, v178);
            int64x2_t v318 = vzip1q_s64(v181, v182);
            int64x2_t v321 = vzip2q_s64(v177, v178);
            int64x2_t v322 = vzip2q_s64(v181, v182);
            a7 = v233;
            uint64_t v173 = v254;
            if (!v254) {
              goto LABEL_217;
            }
          }
          else
          {
            a7 = v233;
            unsigned int v172 = v82;
            if (v171 == 3)
            {
              float32x4_t v174 = vld1q_dup_f32((const float *)v170);
              int64x2_t v309 = (int64x2_t)v174;
              int64x2_t v310 = (int64x2_t)v174;
              int64x2_t v313 = (int64x2_t)v174;
              int64x2_t v314 = (int64x2_t)v174;
              int64x2_t v317 = (int64x2_t)v174;
              int64x2_t v318 = (int64x2_t)v174;
              int64x2_t v321 = (int64x2_t)v174;
              int64x2_t v322 = (int64x2_t)v174;
              uint64_t v173 = v254;
              if (!v254) {
                goto LABEL_217;
              }
            }
            else if (v171)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v309, 64, v170, v171, v161, v36);
              uint64_t v173 = v254;
              if (!v254) {
                goto LABEL_217;
              }
            }
            else
            {
              int64x2_t v309 = 0u;
              int64x2_t v310 = 0u;
              int64x2_t v313 = 0u;
              int64x2_t v314 = 0u;
              int64x2_t v317 = 0u;
              int64x2_t v318 = 0u;
              int64x2_t v321 = 0u;
              int64x2_t v322 = 0u;
              uint64_t v173 = v254;
              if (!v254) {
                goto LABEL_217;
              }
            }
          }
          if (v255)
          {
            uint64_t v183 = 0;
            unint64_t v184 = (unint64_t)v252 << 6;
            uint64_t v185 = 4 * v253;
            unsigned int v186 = &v259.i8[v184 + v185];
            unint64_t v187 = v250;
            uint64_t v188 = v251;
            unint64_t v189 = 4 * v255;
            if (v189 <= 1) {
              unint64_t v190 = 1;
            }
            else {
              unint64_t v190 = 4 * v255;
            }
            unint64_t v191 = v184 + v185;
            int8x8_t v192 = &v259.i8[v184 + v185];
            if (v190) {
              BOOL v193 = (v190 - 1) >> 32 == 0;
            }
            else {
              BOOL v193 = 0;
            }
            uint64_t v194 = v190 & 0x3FFFFFFE0;
            uint64_t v195 = v190 & 0x3FFFFFFF8;
            char v197 = !v193 || v190 < 8;
            unsigned int v198 = &v260.i8[v191];
            unsigned int v199 = (long long *)(v250 + 16);
            uint64_t v200 = v186;
            unint64_t v201 = v250;
            do
            {
              unsigned int v202 = (char *)(v187 + v188 * v183);
              unsigned int v203 = &v186[64 * v183];
              if ((unint64_t)(&v192[64 * v183] - v202) < 0x20) {
                char v204 = 1;
              }
              else {
                char v204 = v197;
              }
              if (v204)
              {
                int v205 = 0;
                goto LABEL_214;
              }
              if (v190 >= 0x20)
              {
                int v207 = v199;
                unsigned int v208 = v198;
                uint64_t v209 = v190 & 0x3FFFFFFE0;
                do
                {
                  long long v210 = *v207;
                  *((_OWORD *)v208 - 1) = *(v207 - 1);
                  *(_OWORD *)unsigned int v208 = v210;
                  v208 += 32;
                  v207 += 2;
                  v209 -= 32;
                }
                while (v209);
                if (v190 == v194) {
                  goto LABEL_197;
                }
                uint64_t v206 = v190 & 0x3FFFFFFE0;
                if ((v190 & 0x18) == 0)
                {
                  v202 += v194;
                  v203 += v194;
                  int v205 = v190 & 0xFFFFFFE0;
                  goto LABEL_214;
                }
              }
              else
              {
                uint64_t v206 = 0;
              }
              v203 += v195;
              uint64_t v211 = v206 - v195;
              uint64_t v212 = (uint64_t *)(v201 + v206);
              unsigned int v213 = &v200[v206];
              do
              {
                uint64_t v214 = *v212++;
                *(void *)unsigned int v213 = v214;
                v213 += 8;
                v211 += 8;
              }
              while (v211);
              if (v190 == v195) {
                goto LABEL_197;
              }
              v202 += v195;
              int v205 = v190 & 0xFFFFFFF8;
LABEL_214:
              unsigned int v215 = v205 + 1;
              do
              {
                char v216 = *v202++;
                *v203++ = v216;
              }
              while (v189 > v215++);
LABEL_197:
              ++v183;
              v198 += 64;
              unsigned int v199 = (long long *)((char *)v199 + v188);
              v201 += v188;
              v200 += 64;
            }
            while (v183 != v173);
          }
LABEL_217:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v259, 64, v248, v249, v256, v257);
          uint64_t v82 = v172;
LABEL_218:
          if (v245) {
            memcpy(v244, v82, 0x400uLL);
          }
          BOOL v22 = v39 == v234 >> 4;
          unsigned int v39 = v86;
          uint64_t result = v241;
        }
        while (!v22);
        BOOL v22 = v21++ == v224;
      }
      while (!v22);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v368 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v287 = a8;
  unsigned int v266 = a8 + a10 - 1;
  uint64_t v288 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v265 = v266 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v291 = v24;
  uint64_t result = a1;
  unsigned int v26 = a7;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v27 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v28 = *(unsigned __int8 *)(a1 + 254);
    char v29 = __clz(v18);
    if (1 << v27 >= a6 || a5 >> v28)
    {
      if (!(a6 >> v27) && 1 << v28 < a5)
      {
        if (a6 < 2) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v28 += v27 + v32;
        unsigned int v27 = -v32;
      }
    }
    else
    {
      unsigned int v30 = 32 - __clz(~(-1 << -v29));
      unsigned int v31 = v28 + v27;
      if (a5 < 2) {
        unsigned int v30 = 0;
      }
      unsigned int v27 = v31 - v30;
      unsigned int v28 = v30;
    }
    if (a5 < 2)
    {
      if (v28) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v29)) < v28)
    {
LABEL_27:
      BOOL v279 = 0;
LABEL_32:
      unsigned int v276 = v28 - 4;
      unsigned int v272 = v27 - 4;
      int v34 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v263 = (((~v34 + a5) & v34) + ~(-1 << v28)) >> v28;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v279 = v33 >= v27;
    goto LABEL_32;
  }
  BOOL v279 = 0;
  unsigned int v263 = 0;
  unsigned int v272 = 0;
  unsigned int v276 = 0;
LABEL_33:
  if (v20 <= v265)
  {
    unsigned int v278 = a7 + a9 - 1;
    if (a7 >> 4 <= v278 >> 4)
    {
      unsigned int v290 = v18 >> 4;
      unsigned int v262 = v19 >> 4;
      int v289 = (v18 & 0xF) + 1;
      int v261 = (v19 & 0xF) + 1;
      int v260 = ~(-1 << v272);
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v36.i64[1] = -1;
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 4uLL)))))));
      *(int8x8_t *)v16.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v35));
      __int32 v273 = v16.i32[0] | v16.i32[1];
      BOOL v270 = v16.i32[1] != 0;
      uint64_t v271 = v16.i64[0];
      BOOL v269 = v16.i32[0] != 0;
      uint64_t v37 = a11;
      do
      {
        unsigned int v38 = (16 * v20) | 0xF;
        if (16 * v20 <= v287) {
          int v39 = v287;
        }
        else {
          int v39 = 16 * v20;
        }
        if (v266 < v38) {
          unsigned int v38 = v266;
        }
        unsigned int v286 = 16 * v20;
        int v275 = v39 - 16 * v20;
        int v285 = v38 - v39 + 1;
        unsigned int v40 = a7 >> 4;
        if (v20 == v262) {
          unsigned int v41 = v261;
        }
        else {
          unsigned int v41 = 16;
        }
        int v274 = (v20 >> v272) * v263;
        int v42 = v20 & v260;
        uint64_t v283 = a3 + (v39 - v287) * v37;
        int v284 = v20 & v260;
        unsigned int v268 = v20;
        unsigned int v267 = v41;
        do
        {
          unsigned int v43 = 16 * v40;
          unsigned int v44 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= v26) {
            int v45 = v26;
          }
          else {
            int v45 = 16 * v40;
          }
          if (v278 < v44) {
            unsigned int v44 = a7 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v290) {
            unsigned int v47 = v289;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v286 >= v287 && v43 >= v26)
          {
            int v49 = v289;
            if (v40 != v290) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v285 != v41;
          }
          if (v279)
          {
            if (v276 | v272)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v276 != 0;
              BOOL v55 = v272 != 0;
              unsigned int v56 = v276;
              unsigned int v57 = v272;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v276) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v42 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v276) + v274) + (v52 << 10);
          }
          else
          {
            if (v273)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v270;
              BOOL v62 = v269;
              int v63 = HIDWORD(v271);
              int v64 = v271;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 10;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_110:
              uint64_t v73 = 0;
              goto LABEL_111;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_110;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_111:
          int v77 = v47 < 0x10 || v48;
          int v78 = (char *)(a4 + 8 * v73);
          unint64_t v79 = (int64x2_t *)(v283 + 4 * (v45 - v26));
          uint64_t v80 = (int64x2_t *)(a2 + v65);
          if (v41 < 0x10) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          if (v291)
          {
            if (v81)
            {
              uint64_t v82 = v80;
              uint64_t v83 = v37;
              BOOL v84 = v48;
              int v85 = v45;
              memcpy(__dst, v80, sizeof(__dst));
              int v45 = v85;
              unsigned int v43 = 16 * v40;
              unsigned int v41 = v267;
              unsigned int v20 = v268;
              BOOL v48 = v84;
              uint64_t v37 = v83;
              unsigned int v86 = (int64x2_t *)__dst;
              uint64_t v80 = v82;
              uint64_t result = v288;
LABEL_121:
              int64x2_t v277 = v80;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v293 = v86;
              unsigned __int8 v301 = v47;
              unsigned __int8 v302 = v41;
              unsigned int v297 = v275;
              unsigned int v298 = v45 - v43;
              int64x2_t v294 = v78;
              int64x2_t v295 = v79;
              uint64_t v296 = v37;
              unsigned int v299 = v285;
              unsigned int v300 = v46;
              if (v48)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v288;
                unsigned int v26 = a7;
                int v42 = v284;
                goto LABEL_123;
              }
              unsigned int v110 = *v78;
              if (v110 == 127)
              {
                int64x2_t v113 = *v86;
                int64x2_t v114 = v86[1];
                int64x2_t v115 = v86[2];
                int64x2_t v116 = v86[3];
                int64x2_t v117 = v86[4];
                int64x2_t v118 = v86[5];
                int64x2_t v119 = v86[6];
                int64x2_t v120 = v86[7];
                int64x2_t v304 = vzip1q_s64(*v86, v114);
                int64x2_t v305 = vzip1q_s64(v117, v118);
                int64x2_t v308 = vzip2q_s64(v113, v114);
                int64x2_t v309 = vzip2q_s64(v117, v118);
                int64x2_t v312 = vzip1q_s64(v115, v116);
                int64x2_t v313 = vzip1q_s64(v119, v120);
                int32x4_t v112 = (int32x4_t)vzip2q_s64(v115, v116);
                int64x2_t v36 = vzip2q_s64(v119, v120);
                int32x4_t v316 = v112;
                int64x2_t v317 = v36;
                uint64_t v111 = 128;
              }
              else if (v110 == 3)
              {
                int32x4_t v112 = (int32x4_t)vld1q_dup_f32((const float *)v86->i32);
                int64x2_t v304 = (int64x2_t)v112;
                int64x2_t v305 = (int64x2_t)v112;
                int64x2_t v308 = (int64x2_t)v112;
                int64x2_t v309 = (int64x2_t)v112;
                int64x2_t v312 = (int64x2_t)v112;
                int64x2_t v313 = (int64x2_t)v112;
                int32x4_t v316 = v112;
                int64x2_t v317 = (int64x2_t)v112;
                uint64_t v111 = 4;
              }
              else if (*v78)
              {
                uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v304, 64, (uint64_t)v86, v110, (int32x4_t)v16, (int32x4_t)v36);
              }
              else
              {
                uint64_t v111 = 0;
                int32x4_t v112 = 0uLL;
                int64x2_t v305 = 0u;
                int64x2_t v304 = 0u;
                int64x2_t v308 = 0u;
                int64x2_t v309 = 0u;
                int64x2_t v312 = 0u;
                int64x2_t v313 = 0u;
                int32x4_t v316 = 0u;
                int64x2_t v317 = 0u;
              }
              uint64_t v121 = (uint64_t)v86->i64 + v111;
              unsigned int v122 = v78[1];
              if (v122 == 127)
              {
                int64x2_t v125 = *(int64x2_t *)v121;
                int64x2_t v126 = *(int64x2_t *)(v121 + 16);
                int64x2_t v127 = *(int64x2_t *)(v121 + 32);
                int64x2_t v128 = *(int64x2_t *)(v121 + 48);
                int64x2_t v129 = *(int64x2_t *)(v121 + 64);
                int64x2_t v130 = *(int64x2_t *)(v121 + 80);
                int64x2_t v131 = *(int64x2_t *)(v121 + 96);
                int64x2_t v132 = *(int64x2_t *)(v121 + 112);
                int64x2_t v320 = vzip1q_s64(*(int64x2_t *)v121, v126);
                int64x2_t v321 = vzip1q_s64(v129, v130);
                int64x2_t v324 = vzip2q_s64(v125, v126);
                int64x2_t v325 = vzip2q_s64(v129, v130);
                int64x2_t v328 = vzip1q_s64(v127, v128);
                int64x2_t v329 = vzip1q_s64(v131, v132);
                int32x4_t v124 = (int32x4_t)vzip2q_s64(v127, v128);
                int64x2_t v36 = vzip2q_s64(v131, v132);
                int32x4_t v332 = v124;
                int64x2_t v333 = v36;
                uint64_t v123 = 128;
              }
              else if (v122 == 3)
              {
                int32x4_t v124 = (int32x4_t)vld1q_dup_f32((const float *)v121);
                int64x2_t v320 = (int64x2_t)v124;
                int64x2_t v321 = (int64x2_t)v124;
                int64x2_t v324 = (int64x2_t)v124;
                int64x2_t v325 = (int64x2_t)v124;
                int64x2_t v328 = (int64x2_t)v124;
                int64x2_t v329 = (int64x2_t)v124;
                int32x4_t v332 = v124;
                int64x2_t v333 = (int64x2_t)v124;
                uint64_t v123 = 4;
              }
              else if (v78[1])
              {
                uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v320, 64, v121, v122, v112, (int32x4_t)v36);
              }
              else
              {
                uint64_t v123 = 0;
                int32x4_t v124 = 0uLL;
                int64x2_t v320 = 0u;
                int64x2_t v321 = 0u;
                int64x2_t v324 = 0u;
                int64x2_t v325 = 0u;
                int64x2_t v328 = 0u;
                int64x2_t v329 = 0u;
                int32x4_t v332 = 0u;
                int64x2_t v333 = 0u;
              }
              uint64_t v133 = v121 + v123;
              unsigned int v134 = v78[2];
              if (v134 == 127)
              {
                int64x2_t v137 = *(int64x2_t *)v133;
                int64x2_t v138 = *(int64x2_t *)(v133 + 16);
                int64x2_t v139 = *(int64x2_t *)(v133 + 32);
                int64x2_t v140 = *(int64x2_t *)(v133 + 48);
                int64x2_t v141 = *(int64x2_t *)(v133 + 64);
                int64x2_t v142 = *(int64x2_t *)(v133 + 80);
                int64x2_t v143 = *(int64x2_t *)(v133 + 96);
                int64x2_t v144 = *(int64x2_t *)(v133 + 112);
                int64x2_t v306 = vzip1q_s64(*(int64x2_t *)v133, v138);
                int64x2_t v307 = vzip1q_s64(v141, v142);
                int64x2_t v310 = vzip2q_s64(v137, v138);
                int64x2_t v311 = vzip2q_s64(v141, v142);
                int64x2_t v314 = vzip1q_s64(v139, v140);
                int64x2_t v315 = vzip1q_s64(v143, v144);
                int32x4_t v136 = (int32x4_t)vzip2q_s64(v139, v140);
                int64x2_t v36 = vzip2q_s64(v143, v144);
                int32x4_t v318 = v136;
                int64x2_t v319 = v36;
                uint64_t v135 = 128;
              }
              else if (v134 == 3)
              {
                int32x4_t v136 = (int32x4_t)vld1q_dup_f32((const float *)v133);
                int64x2_t v306 = (int64x2_t)v136;
                int64x2_t v307 = (int64x2_t)v136;
                int64x2_t v310 = (int64x2_t)v136;
                int64x2_t v311 = (int64x2_t)v136;
                int64x2_t v314 = (int64x2_t)v136;
                int64x2_t v315 = (int64x2_t)v136;
                int32x4_t v318 = v136;
                int64x2_t v319 = (int64x2_t)v136;
                uint64_t v135 = 4;
              }
              else if (v78[2])
              {
                uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v306, 64, v133, v134, v124, (int32x4_t)v36);
              }
              else
              {
                uint64_t v135 = 0;
                int32x4_t v136 = 0uLL;
                int64x2_t v306 = 0u;
                int64x2_t v307 = 0u;
                int64x2_t v310 = 0u;
                int64x2_t v311 = 0u;
                int64x2_t v314 = 0u;
                int64x2_t v315 = 0u;
                int32x4_t v318 = 0u;
                int64x2_t v319 = 0u;
              }
              uint64_t v145 = v133 + v135;
              unsigned int v146 = v78[3];
              if (v146 == 127)
              {
                int64x2_t v149 = *(int64x2_t *)v145;
                int64x2_t v150 = *(int64x2_t *)(v145 + 16);
                int64x2_t v151 = *(int64x2_t *)(v145 + 32);
                int64x2_t v152 = *(int64x2_t *)(v145 + 48);
                int64x2_t v153 = *(int64x2_t *)(v145 + 64);
                int64x2_t v154 = *(int64x2_t *)(v145 + 80);
                int64x2_t v155 = *(int64x2_t *)(v145 + 96);
                int64x2_t v156 = *(int64x2_t *)(v145 + 112);
                int64x2_t v322 = vzip1q_s64(*(int64x2_t *)v145, v150);
                int64x2_t v323 = vzip1q_s64(v153, v154);
                int64x2_t v326 = vzip2q_s64(v149, v150);
                int64x2_t v327 = vzip2q_s64(v153, v154);
                int64x2_t v330 = vzip1q_s64(v151, v152);
                int64x2_t v331 = vzip1q_s64(v155, v156);
                int32x4_t v148 = (int32x4_t)vzip2q_s64(v151, v152);
                int64x2_t v36 = vzip2q_s64(v155, v156);
                int32x4_t v334 = v148;
                int64x2_t v335 = v36;
                uint64_t v147 = 128;
              }
              else if (v146 == 3)
              {
                int32x4_t v148 = (int32x4_t)vld1q_dup_f32((const float *)v145);
                int64x2_t v322 = (int64x2_t)v148;
                int64x2_t v323 = (int64x2_t)v148;
                int64x2_t v326 = (int64x2_t)v148;
                int64x2_t v327 = (int64x2_t)v148;
                int64x2_t v330 = (int64x2_t)v148;
                int64x2_t v331 = (int64x2_t)v148;
                int32x4_t v334 = v148;
                int64x2_t v335 = (int64x2_t)v148;
                uint64_t v147 = 4;
              }
              else if (v78[3])
              {
                uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 64, v145, v146, v136, (int32x4_t)v36);
              }
              else
              {
                uint64_t v147 = 0;
                int32x4_t v148 = 0uLL;
                int64x2_t v322 = 0u;
                int64x2_t v323 = 0u;
                int64x2_t v326 = 0u;
                int64x2_t v327 = 0u;
                int64x2_t v330 = 0u;
                int64x2_t v331 = 0u;
                int32x4_t v334 = 0u;
                int64x2_t v335 = 0u;
              }
              uint64_t v157 = v145 + v147;
              unsigned int v158 = v78[4];
              if (v158 == 127)
              {
                int64x2_t v161 = *(int64x2_t *)v157;
                int64x2_t v162 = *(int64x2_t *)(v157 + 16);
                int64x2_t v163 = *(int64x2_t *)(v157 + 32);
                int64x2_t v164 = *(int64x2_t *)(v157 + 48);
                int64x2_t v165 = *(int64x2_t *)(v157 + 64);
                int64x2_t v166 = *(int64x2_t *)(v157 + 80);
                int64x2_t v167 = *(int64x2_t *)(v157 + 96);
                int64x2_t v168 = *(int64x2_t *)(v157 + 112);
                int64x2_t v336 = vzip1q_s64(*(int64x2_t *)v157, v162);
                int64x2_t v337 = vzip1q_s64(v165, v166);
                int64x2_t v340 = vzip2q_s64(v161, v162);
                int64x2_t v341 = vzip2q_s64(v165, v166);
                int64x2_t v344 = vzip1q_s64(v163, v164);
                int64x2_t v345 = vzip1q_s64(v167, v168);
                int32x4_t v160 = (int32x4_t)vzip2q_s64(v163, v164);
                int64x2_t v36 = vzip2q_s64(v167, v168);
                int32x4_t v348 = v160;
                int64x2_t v349 = v36;
                uint64_t v159 = 128;
              }
              else if (v158 == 3)
              {
                int32x4_t v160 = (int32x4_t)vld1q_dup_f32((const float *)v157);
                int64x2_t v336 = (int64x2_t)v160;
                int64x2_t v337 = (int64x2_t)v160;
                int64x2_t v340 = (int64x2_t)v160;
                int64x2_t v341 = (int64x2_t)v160;
                int64x2_t v344 = (int64x2_t)v160;
                int64x2_t v345 = (int64x2_t)v160;
                int32x4_t v348 = v160;
                int64x2_t v349 = (int64x2_t)v160;
                uint64_t v159 = 4;
              }
              else if (v78[4])
              {
                uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v336, 64, v157, v158, v148, (int32x4_t)v36);
              }
              else
              {
                uint64_t v159 = 0;
                int32x4_t v160 = 0uLL;
                int64x2_t v336 = 0u;
                int64x2_t v337 = 0u;
                int64x2_t v340 = 0u;
                int64x2_t v341 = 0u;
                int64x2_t v344 = 0u;
                int64x2_t v345 = 0u;
                int32x4_t v348 = 0u;
                int64x2_t v349 = 0u;
              }
              uint64_t v169 = v157 + v159;
              unsigned int v170 = v78[5];
              if (v170 == 127)
              {
                int64x2_t v173 = *(int64x2_t *)v169;
                int64x2_t v174 = *(int64x2_t *)(v169 + 16);
                int64x2_t v175 = *(int64x2_t *)(v169 + 32);
                int64x2_t v176 = *(int64x2_t *)(v169 + 48);
                int64x2_t v177 = *(int64x2_t *)(v169 + 64);
                int64x2_t v178 = *(int64x2_t *)(v169 + 80);
                int64x2_t v179 = *(int64x2_t *)(v169 + 96);
                int64x2_t v180 = *(int64x2_t *)(v169 + 112);
                int64x2_t v352 = vzip1q_s64(*(int64x2_t *)v169, v174);
                int64x2_t v353 = vzip1q_s64(v177, v178);
                int64x2_t v356 = vzip2q_s64(v173, v174);
                int64x2_t v357 = vzip2q_s64(v177, v178);
                int64x2_t v360 = vzip1q_s64(v175, v176);
                int64x2_t v361 = vzip1q_s64(v179, v180);
                int32x4_t v172 = (int32x4_t)vzip2q_s64(v175, v176);
                int64x2_t v36 = vzip2q_s64(v179, v180);
                int32x4_t v364 = v172;
                int64x2_t v365 = v36;
                uint64_t v171 = 128;
              }
              else if (v170 == 3)
              {
                int32x4_t v172 = (int32x4_t)vld1q_dup_f32((const float *)v169);
                int64x2_t v352 = (int64x2_t)v172;
                int64x2_t v353 = (int64x2_t)v172;
                int64x2_t v356 = (int64x2_t)v172;
                int64x2_t v357 = (int64x2_t)v172;
                int64x2_t v360 = (int64x2_t)v172;
                int64x2_t v361 = (int64x2_t)v172;
                int32x4_t v364 = v172;
                int64x2_t v365 = (int64x2_t)v172;
                uint64_t v171 = 4;
              }
              else if (v78[5])
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v352, 64, v169, v170, v160, (int32x4_t)v36);
              }
              else
              {
                uint64_t v171 = 0;
                int32x4_t v172 = 0uLL;
                int64x2_t v352 = 0u;
                int64x2_t v353 = 0u;
                int64x2_t v356 = 0u;
                int64x2_t v357 = 0u;
                int64x2_t v360 = 0u;
                int64x2_t v361 = 0u;
                int32x4_t v364 = 0u;
                int64x2_t v365 = 0u;
              }
              uint64_t v181 = v169 + v171;
              unsigned int v182 = v78[6];
              if (v182 == 127)
              {
                int64x2_t v185 = *(int64x2_t *)v181;
                int64x2_t v186 = *(int64x2_t *)(v181 + 16);
                int64x2_t v187 = *(int64x2_t *)(v181 + 32);
                int64x2_t v188 = *(int64x2_t *)(v181 + 48);
                int64x2_t v189 = *(int64x2_t *)(v181 + 64);
                int64x2_t v190 = *(int64x2_t *)(v181 + 80);
                int64x2_t v191 = *(int64x2_t *)(v181 + 96);
                int64x2_t v192 = *(int64x2_t *)(v181 + 112);
                int64x2_t v338 = vzip1q_s64(*(int64x2_t *)v181, v186);
                int64x2_t v339 = vzip1q_s64(v189, v190);
                int64x2_t v342 = vzip2q_s64(v185, v186);
                int64x2_t v343 = vzip2q_s64(v189, v190);
                int64x2_t v346 = vzip1q_s64(v187, v188);
                int64x2_t v347 = vzip1q_s64(v191, v192);
                int32x4_t v184 = (int32x4_t)vzip2q_s64(v187, v188);
                int64x2_t v36 = vzip2q_s64(v191, v192);
                int32x4_t v350 = v184;
                int64x2_t v351 = v36;
                uint64_t v183 = 128;
              }
              else if (v182 == 3)
              {
                int32x4_t v184 = (int32x4_t)vld1q_dup_f32((const float *)v181);
                int64x2_t v338 = (int64x2_t)v184;
                int64x2_t v339 = (int64x2_t)v184;
                int64x2_t v342 = (int64x2_t)v184;
                int64x2_t v343 = (int64x2_t)v184;
                int64x2_t v346 = (int64x2_t)v184;
                int64x2_t v347 = (int64x2_t)v184;
                int32x4_t v350 = v184;
                int64x2_t v351 = (int64x2_t)v184;
                uint64_t v183 = 4;
              }
              else if (v78[6])
              {
                uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v338, 64, v181, v182, v172, (int32x4_t)v36);
              }
              else
              {
                uint64_t v183 = 0;
                int32x4_t v184 = 0uLL;
                int64x2_t v338 = 0u;
                int64x2_t v339 = 0u;
                int64x2_t v342 = 0u;
                int64x2_t v343 = 0u;
                int64x2_t v346 = 0u;
                int64x2_t v347 = 0u;
                int32x4_t v350 = 0u;
                int64x2_t v351 = 0u;
              }
              uint64_t v193 = v181 + v183;
              unsigned int v194 = v78[7];
              if (v194 == 127)
              {
                int64x2_t v196 = *(int64x2_t *)v193;
                int64x2_t v197 = *(int64x2_t *)(v193 + 16);
                int64x2_t v198 = *(int64x2_t *)(v193 + 32);
                int64x2_t v199 = *(int64x2_t *)(v193 + 48);
                int64x2_t v200 = *(int64x2_t *)(v193 + 64);
                int64x2_t v201 = *(int64x2_t *)(v193 + 80);
                int64x2_t v202 = *(int64x2_t *)(v193 + 96);
                int64x2_t v203 = *(int64x2_t *)(v193 + 112);
                int64x2_t v354 = vzip1q_s64(*(int64x2_t *)v193, v197);
                int64x2_t v355 = vzip1q_s64(v200, v201);
                int64x2_t v358 = vzip2q_s64(v196, v197);
                int64x2_t v359 = vzip2q_s64(v200, v201);
                int64x2_t v362 = vzip1q_s64(v198, v199);
                int64x2_t v363 = vzip1q_s64(v202, v203);
                int64x2_t v16 = vzip2q_s64(v198, v199);
                int64x2_t v36 = vzip2q_s64(v202, v203);
                int64x2_t v366 = v16;
                int64x2_t v367 = v36;
                uint64_t v195 = v299;
                if (v299) {
                  goto LABEL_199;
                }
              }
              else
              {
                if (v194 != 3)
                {
                  if (v78[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v354, 64, v193, v194, v184, (int32x4_t)v36);
                    uint64_t v195 = v299;
                    if (!v299) {
                      goto LABEL_233;
                    }
                  }
                  else
                  {
                    int64x2_t v16 = 0uLL;
                    int64x2_t v354 = 0u;
                    int64x2_t v355 = 0u;
                    int64x2_t v358 = 0u;
                    int64x2_t v359 = 0u;
                    int64x2_t v362 = 0u;
                    int64x2_t v363 = 0u;
                    int64x2_t v366 = 0u;
                    int64x2_t v367 = 0u;
                    uint64_t v195 = v299;
                    if (!v299) {
                      goto LABEL_233;
                    }
                  }
LABEL_199:
                  if (!v300) {
                    goto LABEL_233;
                  }
                  uint64_t v204 = 0;
                  unint64_t v205 = (unint64_t)v297 << 6;
                  uint64_t v206 = 4 * v298;
                  int v207 = &v304.i8[v205 + v206];
                  unsigned int v208 = v295;
                  uint64_t v209 = v296;
                  unint64_t v210 = 4 * v300;
                  if (v210 <= 1) {
                    unint64_t v211 = 1;
                  }
                  else {
                    unint64_t v211 = 4 * v300;
                  }
                  unint64_t v212 = v205 + v206;
                  unsigned int v213 = &v304.i8[v205 + v206];
                  if (v211) {
                    BOOL v214 = (v211 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v214 = 0;
                  }
                  uint64_t v215 = v211 & 0x3FFFFFFE0;
                  uint64_t v216 = v211 & 0x3FFFFFFF8;
                  char v218 = !v214 || v211 < 8;
                  int v219 = &v305.i8[v212];
                  unsigned int v220 = v295 + 1;
                  unsigned int v221 = v207;
                  unsigned int v222 = v295;
                  while (2)
                  {
                    int16x8_t v223 = &v208->i8[v209 * v204];
                    unsigned int v224 = &v207[64 * v204];
                    if ((unint64_t)(&v213[64 * v204] - v223) < 0x20) {
                      char v225 = 1;
                    }
                    else {
                      char v225 = v218;
                    }
                    if (v225)
                    {
                      int v226 = 0;
LABEL_230:
                      unsigned int v235 = v226 + 1;
                      do
                      {
                        char v236 = *v223++;
                        *v224++ = v236;
                      }
                      while (v210 > v235++);
                    }
                    else
                    {
                      if (v211 >= 0x20)
                      {
                        uint64_t v228 = v220;
                        unsigned int v229 = (int64x2_t *)v219;
                        uint64_t v230 = v211 & 0x3FFFFFFE0;
                        do
                        {
                          int64x2_t v16 = v228[-1];
                          int64x2_t v36 = *v228;
                          v229[-1] = v16;
                          *unsigned int v229 = v36;
                          v229 += 2;
                          v228 += 2;
                          v230 -= 32;
                        }
                        while (v230);
                        if (v211 == v215) {
                          goto LABEL_213;
                        }
                        uint64_t v227 = v211 & 0x3FFFFFFE0;
                        if ((v211 & 0x18) == 0)
                        {
                          v223 += v215;
                          v224 += v215;
                          int v226 = v211 & 0xFFFFFFE0;
                          goto LABEL_230;
                        }
                      }
                      else
                      {
                        uint64_t v227 = 0;
                      }
                      v224 += v216;
                      uint64_t v231 = v227 - v216;
                      unsigned int v232 = (uint64_t *)((char *)v222->i64 + v227);
                      unsigned int v233 = (uint64_t *)&v221[v227];
                      do
                      {
                        uint64_t v234 = *v232++;
                        v16.i64[0] = v234;
                        *v233++ = v234;
                        v231 += 8;
                      }
                      while (v231);
                      if (v211 != v216)
                      {
                        v223 += v216;
                        int v226 = v211 & 0xFFFFFFF8;
                        goto LABEL_230;
                      }
                    }
LABEL_213:
                    ++v204;
                    v219 += 64;
                    unsigned int v220 = (int64x2_t *)((char *)v220 + v209);
                    unsigned int v222 = (int64x2_t *)((char *)v222 + v209);
                    v221 += 64;
                    if (v204 == v195) {
                      goto LABEL_233;
                    }
                    continue;
                  }
                }
                int64x2_t v16 = (int64x2_t)vld1q_dup_f32((const float *)v193);
                int64x2_t v354 = v16;
                int64x2_t v355 = v16;
                int64x2_t v358 = v16;
                int64x2_t v359 = v16;
                int64x2_t v362 = v16;
                int64x2_t v363 = v16;
                int64x2_t v366 = v16;
                int64x2_t v367 = v16;
                uint64_t v195 = v299;
                if (v299) {
                  goto LABEL_199;
                }
              }
LABEL_233:
              uint64_t v238 = 0;
              int v239 = v293;
              unsigned int v240 = v294;
              int v241 = v301;
              int v242 = v302;
              unsigned int v26 = a7;
              uint64_t result = v288;
              int v42 = v284;
              do
              {
                uint64_t v255 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v238 + 1];
                uint64_t v256 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v238];
                unsigned int v257 = (v241 - 8 * v256) & ~((v241 - 8 * (int)v256) >> 31);
                if (v257 >= 8) {
                  unsigned int v257 = 8;
                }
                unsigned int v258 = (v242 - 4 * v255) & ~((v242 - 4 * (int)v255) >> 31);
                if (v258 >= 4) {
                  unsigned int v258 = 4;
                }
                if (v257) {
                  BOOL v259 = v258 == 0;
                }
                else {
                  BOOL v259 = 1;
                }
                if (v259)
                {
                  char v254 = 0;
                }
                else
                {
                  unsigned int v243 = &v304 + 16 * v255 + 2 * v256;
                  int64x2_t v244 = v243[1];
                  int64x2_t v245 = v243[4];
                  int64x2_t v246 = v243[5];
                  int64x2_t v247 = vzip1q_s64(*v243, v245);
                  int64x2_t v248 = vzip2q_s64(*v243, v245);
                  int64x2_t v249 = vzip1q_s64(v244, v246);
                  int64x2_t v250 = vzip2q_s64(v244, v246);
                  int64x2_t v16 = v243[8];
                  int64x2_t v36 = v243[9];
                  v243 += 12;
                  int64x2_t v251 = v243[1];
                  int64x2_t v252 = vzip1q_s64(v16, *v243);
                  int64x2_t v253 = vzip2q_s64(v16, *v243);
                  *int v239 = v247;
                  v239[1] = v248;
                  v239[2] = v252;
                  v239[3] = v253;
                  v239[4] = v249;
                  v239[5] = v250;
                  v239[6] = vzip1q_s64(v36, v251);
                  v239[7] = vzip2q_s64(v36, v251);
                  v239 += 8;
                  char v254 = 127;
                }
                *v240++ = v254;
                v238 += 2;
              }
              while (v238 != 16);
LABEL_123:
              unsigned int v87 = v40 + 1;
              uint64_t v80 = v277;
              if (!v291) {
                goto LABEL_47;
              }
LABEL_139:
              memcpy(v80, v86, 0x400uLL);
              int v42 = v284;
              uint64_t result = v288;
              goto LABEL_47;
            }
            unsigned int v86 = (int64x2_t *)__dst;
          }
          else
          {
            unsigned int v86 = v80;
            if (v81) {
              goto LABEL_121;
            }
          }
          uint64_t v88 = 0;
          int32x4_t v89 = v86;
          unsigned int v87 = v40 + 1;
          do
          {
            uint64_t v105 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v88 + 1];
            uint64_t v106 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v88];
            unsigned int v107 = (v47 - 8 * v106) & ~((int)(v47 - 8 * v106) >> 31);
            if (v107 >= 8) {
              unsigned int v107 = 8;
            }
            unsigned int v108 = (v41 - 4 * v105) & ~((int)(v41 - 4 * v105) >> 31);
            if (v108 >= 4) {
              unsigned int v108 = 4;
            }
            if (v107) {
              BOOL v109 = v108 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109)
            {
              char v104 = 0;
            }
            else
            {
              int64x2_t v90 = (int64x2_t *)((char *)&v79[2 * v106] + 4 * a11 * v105);
              int64x2_t v91 = (int64x2_t *)((char *)v90 + v37);
              int64x2_t v93 = *v90;
              int64x2_t v94 = v90[1];
              int64x2_t v92 = (int64x2_t *)((char *)v90 + 2 * a11);
              int64x2_t v95 = v91[1];
              int64x2_t v96 = vzip1q_s64(v93, *v91);
              int64x2_t v97 = vzip2q_s64(v93, *v91);
              int64x2_t v98 = vzip1q_s64(v94, v95);
              int64x2_t v99 = vzip2q_s64(v94, v95);
              int64x2_t v16 = *v92;
              int64x2_t v36 = v92[1];
              uint64_t v100 = (int64x2_t *)((char *)v92 + v37);
              int64x2_t v101 = v100[1];
              int64x2_t v102 = vzip1q_s64(v16, *v100);
              int64x2_t v103 = vzip2q_s64(v16, *v100);
              *int32x4_t v89 = v96;
              v89[1] = v97;
              v89[2] = v102;
              v89[3] = v103;
              v89[4] = v98;
              v89[5] = v99;
              v89[6] = vzip1q_s64(v36, v101);
              v89[7] = vzip2q_s64(v36, v101);
              v89 += 8;
              char v104 = 127;
            }
            *v78++ = v104;
            v88 += 2;
          }
          while (v88 != 16);
          unsigned int v26 = a7;
          if (v291) {
            goto LABEL_139;
          }
LABEL_47:
          BOOL v21 = v40 == v278 >> 4;
          unsigned int v40 = v87;
        }
        while (!v21);
        BOOL v21 = v20++ == v265;
      }
      while (!v21);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v319 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v236 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v220 = a8 + a10 - 1;
  unsigned int v222 = v220 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v237 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v237;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v241 = v26;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v29 = v237;
  int v230 = (int)result;
  if (v18 <= v222)
  {
    unsigned int v229 = a7 + a9 - 1;
    unsigned int v219 = a7 >> 4;
    if (a7 >> 4 <= v229 >> 4)
    {
      unsigned int v216 = a5 - 1;
      unsigned int v239 = (a5 - 1) >> 4;
      int v238 = ((a5 - 1) & 0xF) + 1;
      int v217 = ((a6 - 1) & 0xF) + 1;
      unsigned int v218 = (a6 - 1) >> 4;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v31.i64[1] = -1;
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 4uLL)))))));
      *(int8x8_t *)v28.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v30));
      __int32 v227 = v28.i32[0] | v28.i32[1];
      BOOL v225 = v28.i32[1] != 0;
      uint64_t v226 = v28.i64[0];
      BOOL v224 = v28.i32[0] != 0;
      unint64_t v215 = 8 * v20 * (unint64_t)v19;
      unsigned int v228 = a7;
      do
      {
        unsigned int v32 = (16 * v18) | 0xF;
        if (16 * v18 <= v236) {
          int v33 = v236;
        }
        else {
          int v33 = 16 * v18;
        }
        unsigned int v34 = v219;
        if (v220 < v32) {
          unsigned int v32 = v220;
        }
        unsigned int v235 = 16 * v18;
        int v223 = v33 - 16 * v18;
        int v234 = v32 - v33 + 1;
        int v35 = v217;
        if (v18 != v218) {
          int v35 = 16;
        }
        unsigned int v242 = v35;
        uint64_t v233 = a3 + (v33 - v236) * a11;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v229 < v37) {
            unsigned int v37 = v229;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v239) {
            unsigned int v40 = v238;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v235 >= v236 && v36 >= a7)
          {
            int v42 = v238;
            if (v34 != v239) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v234 != v242;
          }
          if (v230)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v215 >> (*(unsigned char *)(v29 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  unsigned int v63 = 16;
                  char v66 = 1;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v206 = (v63 >> 4) - 1;
            if (v65)
            {
              unsigned int v207 = 0;
              if (v66) {
                goto LABEL_218;
              }
LABEL_207:
              unsigned int v208 = 32 - __clz(~(-1 << -(char)__clz(((v67 + 15) >> 4) - 1)));
              if (v208 | v207) {
                goto LABEL_208;
              }
LABEL_219:
              uint64_t v210 = 0;
            }
            else
            {
              unsigned int v207 = 32 - __clz(~(-1 << -(char)__clz(v206)));
              if ((v66 & 1) == 0) {
                goto LABEL_207;
              }
LABEL_218:
              unsigned int v208 = 0;
              if (!v207) {
                goto LABEL_219;
              }
LABEL_208:
              int v209 = 0;
              uint64_t v210 = 0;
              int v211 = v34 & v206;
              BOOL v212 = v207 != 0;
              BOOL v213 = v208 != 0;
              int v214 = 1;
              do
              {
                --v207;
                if (v212) {
                  v210 |= (unint64_t)(v214 & v211) << v209++;
                }
                else {
                  unsigned int v207 = 0;
                }
                --v208;
                if (v213) {
                  v210 |= (unint64_t)(v214 & v18 & ((v67 >> 4) - 1)) << v209++;
                }
                else {
                  unsigned int v208 = 0;
                }
                v214 *= 2;
                --v209;
                BOOL v213 = v208 != 0;
                BOOL v212 = v207 != 0;
              }
              while (v208 | v207);
            }
            unint64_t v51 = ((unint64_t)(v36 / v63 + v235 / v67 * ((v63 + v216) / v63)) << 14) + (v210 << 10);
            goto LABEL_58;
          }
          if (v227)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v225;
            BOOL v48 = v224;
            int v49 = HIDWORD(v226);
            int v50 = v226;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v18) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_58:
          unsigned int v52 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_80:
              uint64_t v59 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_80;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v18) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_81:
          int v68 = v40 < 0x10 || v41;
          unsigned int v69 = (char *)(a4 + 8 * v59);
          unint64_t v70 = v233 + 4 * (v38 - a7);
          unsigned int v71 = (int16x8_t *)(a2 + v51);
          if (v242 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          unsigned int v240 = v71;
          if (v241)
          {
            uint64_t v73 = (int16x8_t *)__dst;
            if (!v72) {
              goto LABEL_93;
            }
            char v74 = v40;
            BOOL v75 = v41;
            memcpy(__dst, v71, sizeof(__dst));
            unsigned int v36 = 16 * v34;
            BOOL v41 = v75;
            LOBYTE(v40) = v74;
            uint64_t v29 = v237;
          }
          else
          {
            uint64_t v73 = v71;
            if (!v72)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, v73, v69, v40, v242);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          int64x2_t v244 = v73;
          unsigned __int8 v252 = v40;
          unsigned __int8 v253 = v242;
          unsigned int v248 = v223;
          unsigned int v249 = v38 - v36;
          int64x2_t v245 = v69;
          unint64_t v246 = v70;
          uint64_t v247 = a11;
          unsigned int v250 = v234;
          unsigned int v251 = v39;
          if (v41)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
LABEL_94:
            a7 = v228;
            goto LABEL_189;
          }
          unsigned int v76 = *v69;
          a7 = v228;
          if (v76 == 127)
          {
            int64x2_t v79 = *(int64x2_t *)v73;
            int64x2_t v80 = (int64x2_t)v73[1];
            int64x2_t v81 = (int64x2_t)v73[2];
            int64x2_t v82 = (int64x2_t)v73[3];
            int64x2_t v83 = (int64x2_t)v73[4];
            int64x2_t v84 = (int64x2_t)v73[5];
            int64x2_t v85 = (int64x2_t)v73[6];
            int64x2_t v86 = (int64x2_t)v73[7];
            int64x2_t v255 = vzip1q_s64(*(int64x2_t *)v73, v80);
            int64x2_t v256 = vzip1q_s64(v83, v84);
            int64x2_t v259 = vzip2q_s64(v79, v80);
            int64x2_t v260 = vzip2q_s64(v83, v84);
            int64x2_t v263 = vzip1q_s64(v81, v82);
            int64x2_t v264 = vzip1q_s64(v85, v86);
            int32x4_t v78 = (int32x4_t)vzip2q_s64(v81, v82);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v85, v86);
            int32x4_t v267 = v78;
            int32x4_t v268 = v31;
            uint64_t v77 = 128;
          }
          else if (v76 == 3)
          {
            int32x4_t v78 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
            int64x2_t v255 = (int64x2_t)v78;
            int64x2_t v256 = (int64x2_t)v78;
            int64x2_t v259 = (int64x2_t)v78;
            int64x2_t v260 = (int64x2_t)v78;
            int64x2_t v263 = (int64x2_t)v78;
            int64x2_t v264 = (int64x2_t)v78;
            int32x4_t v267 = v78;
            int32x4_t v268 = v78;
            uint64_t v77 = 4;
          }
          else if (*v69)
          {
            uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v255, 64, (uint64_t)v73, v76, v28, v31);
          }
          else
          {
            uint64_t v77 = 0;
            int32x4_t v78 = 0uLL;
            int64x2_t v256 = 0u;
            int64x2_t v255 = 0u;
            int64x2_t v259 = 0u;
            int64x2_t v260 = 0u;
            int64x2_t v263 = 0u;
            int64x2_t v264 = 0u;
            int32x4_t v267 = 0u;
            int32x4_t v268 = 0u;
          }
          uint64_t v87 = (uint64_t)v73->i64 + v77;
          unsigned int v88 = v69[1];
          if (v88 == 127)
          {
            int64x2_t v91 = *(int64x2_t *)v87;
            int64x2_t v92 = *(int64x2_t *)(v87 + 16);
            int64x2_t v93 = *(int64x2_t *)(v87 + 32);
            int64x2_t v94 = *(int64x2_t *)(v87 + 48);
            int64x2_t v95 = *(int64x2_t *)(v87 + 64);
            int64x2_t v96 = *(int64x2_t *)(v87 + 80);
            int64x2_t v97 = *(int64x2_t *)(v87 + 96);
            int64x2_t v98 = *(int64x2_t *)(v87 + 112);
            int64x2_t v271 = vzip1q_s64(*(int64x2_t *)v87, v92);
            int64x2_t v272 = vzip1q_s64(v95, v96);
            int64x2_t v275 = vzip2q_s64(v91, v92);
            int64x2_t v276 = vzip2q_s64(v95, v96);
            int64x2_t v279 = vzip1q_s64(v93, v94);
            int64x2_t v280 = vzip1q_s64(v97, v98);
            int32x4_t v90 = (int32x4_t)vzip2q_s64(v93, v94);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v97, v98);
            int32x4_t v283 = v90;
            int32x4_t v284 = v31;
            uint64_t v89 = 128;
          }
          else if (v88 == 3)
          {
            int32x4_t v90 = (int32x4_t)vld1q_dup_f32((const float *)v87);
            int64x2_t v271 = (int64x2_t)v90;
            int64x2_t v272 = (int64x2_t)v90;
            int64x2_t v275 = (int64x2_t)v90;
            int64x2_t v276 = (int64x2_t)v90;
            int64x2_t v279 = (int64x2_t)v90;
            int64x2_t v280 = (int64x2_t)v90;
            int32x4_t v283 = v90;
            int32x4_t v284 = v90;
            uint64_t v89 = 4;
          }
          else if (v69[1])
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 64, v87, v88, v78, v31);
          }
          else
          {
            uint64_t v89 = 0;
            int32x4_t v90 = 0uLL;
            int64x2_t v271 = 0u;
            int64x2_t v272 = 0u;
            int64x2_t v275 = 0u;
            int64x2_t v276 = 0u;
            int64x2_t v279 = 0u;
            int64x2_t v280 = 0u;
            int32x4_t v283 = 0u;
            int32x4_t v284 = 0u;
          }
          uint64_t v99 = v87 + v89;
          unsigned int v100 = v69[2];
          if (v100 == 127)
          {
            int64x2_t v103 = *(int64x2_t *)v99;
            int64x2_t v104 = *(int64x2_t *)(v99 + 16);
            int64x2_t v105 = *(int64x2_t *)(v99 + 32);
            int64x2_t v106 = *(int64x2_t *)(v99 + 48);
            int64x2_t v107 = *(int64x2_t *)(v99 + 64);
            int64x2_t v108 = *(int64x2_t *)(v99 + 80);
            int64x2_t v109 = *(int64x2_t *)(v99 + 96);
            int64x2_t v110 = *(int64x2_t *)(v99 + 112);
            int64x2_t v257 = vzip1q_s64(*(int64x2_t *)v99, v104);
            int64x2_t v258 = vzip1q_s64(v107, v108);
            int64x2_t v261 = vzip2q_s64(v103, v104);
            int64x2_t v262 = vzip2q_s64(v107, v108);
            int64x2_t v265 = vzip1q_s64(v105, v106);
            int64x2_t v266 = vzip1q_s64(v109, v110);
            int32x4_t v102 = (int32x4_t)vzip2q_s64(v105, v106);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v109, v110);
            int32x4_t v269 = v102;
            int32x4_t v270 = v31;
            uint64_t v101 = 128;
          }
          else if (v100 == 3)
          {
            int32x4_t v102 = (int32x4_t)vld1q_dup_f32((const float *)v99);
            int64x2_t v257 = (int64x2_t)v102;
            int64x2_t v258 = (int64x2_t)v102;
            int64x2_t v261 = (int64x2_t)v102;
            int64x2_t v262 = (int64x2_t)v102;
            int64x2_t v265 = (int64x2_t)v102;
            int64x2_t v266 = (int64x2_t)v102;
            int32x4_t v269 = v102;
            int32x4_t v270 = v102;
            uint64_t v101 = 4;
          }
          else if (v69[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 64, v99, v100, v90, v31);
          }
          else
          {
            uint64_t v101 = 0;
            int32x4_t v102 = 0uLL;
            int64x2_t v257 = 0u;
            int64x2_t v258 = 0u;
            int64x2_t v261 = 0u;
            int64x2_t v262 = 0u;
            int64x2_t v265 = 0u;
            int64x2_t v266 = 0u;
            int32x4_t v269 = 0u;
            int32x4_t v270 = 0u;
          }
          uint64_t v111 = v99 + v101;
          unsigned int v112 = v69[3];
          if (v112 == 127)
          {
            int64x2_t v115 = *(int64x2_t *)v111;
            int64x2_t v116 = *(int64x2_t *)(v111 + 16);
            int64x2_t v117 = *(int64x2_t *)(v111 + 32);
            int64x2_t v118 = *(int64x2_t *)(v111 + 48);
            int64x2_t v119 = *(int64x2_t *)(v111 + 64);
            int64x2_t v120 = *(int64x2_t *)(v111 + 80);
            int64x2_t v121 = *(int64x2_t *)(v111 + 96);
            int64x2_t v122 = *(int64x2_t *)(v111 + 112);
            int64x2_t v273 = vzip1q_s64(*(int64x2_t *)v111, v116);
            int64x2_t v274 = vzip1q_s64(v119, v120);
            int64x2_t v277 = vzip2q_s64(v115, v116);
            int64x2_t v278 = vzip2q_s64(v119, v120);
            int64x2_t v281 = vzip1q_s64(v117, v118);
            int64x2_t v282 = vzip1q_s64(v121, v122);
            int32x4_t v114 = (int32x4_t)vzip2q_s64(v117, v118);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v121, v122);
            int32x4_t v285 = v114;
            int32x4_t v286 = v31;
            uint64_t v113 = 128;
          }
          else if (v112 == 3)
          {
            int32x4_t v114 = (int32x4_t)vld1q_dup_f32((const float *)v111);
            int64x2_t v273 = (int64x2_t)v114;
            int64x2_t v274 = (int64x2_t)v114;
            int64x2_t v277 = (int64x2_t)v114;
            int64x2_t v278 = (int64x2_t)v114;
            int64x2_t v281 = (int64x2_t)v114;
            int64x2_t v282 = (int64x2_t)v114;
            int32x4_t v285 = v114;
            int32x4_t v286 = v114;
            uint64_t v113 = 4;
          }
          else if (v69[3])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 64, v111, v112, v102, v31);
          }
          else
          {
            uint64_t v113 = 0;
            int32x4_t v114 = 0uLL;
            int64x2_t v273 = 0u;
            int64x2_t v274 = 0u;
            int64x2_t v277 = 0u;
            int64x2_t v278 = 0u;
            int64x2_t v281 = 0u;
            int64x2_t v282 = 0u;
            int32x4_t v285 = 0u;
            int32x4_t v286 = 0u;
          }
          uint64_t v123 = v111 + v113;
          unsigned int v124 = v69[4];
          if (v124 == 127)
          {
            int64x2_t v127 = *(int64x2_t *)v123;
            int64x2_t v128 = *(int64x2_t *)(v123 + 16);
            int64x2_t v129 = *(int64x2_t *)(v123 + 32);
            int64x2_t v130 = *(int64x2_t *)(v123 + 48);
            int64x2_t v131 = *(int64x2_t *)(v123 + 64);
            int64x2_t v132 = *(int64x2_t *)(v123 + 80);
            int64x2_t v133 = *(int64x2_t *)(v123 + 96);
            int64x2_t v134 = *(int64x2_t *)(v123 + 112);
            int64x2_t v287 = vzip1q_s64(*(int64x2_t *)v123, v128);
            int64x2_t v288 = vzip1q_s64(v131, v132);
            int64x2_t v291 = vzip2q_s64(v127, v128);
            int64x2_t v292 = vzip2q_s64(v131, v132);
            int64x2_t v295 = vzip1q_s64(v129, v130);
            int64x2_t v296 = vzip1q_s64(v133, v134);
            int32x4_t v126 = (int32x4_t)vzip2q_s64(v129, v130);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v133, v134);
            int32x4_t v299 = v126;
            int32x4_t v300 = v31;
            uint64_t v125 = 128;
          }
          else if (v124 == 3)
          {
            int32x4_t v126 = (int32x4_t)vld1q_dup_f32((const float *)v123);
            int64x2_t v287 = (int64x2_t)v126;
            int64x2_t v288 = (int64x2_t)v126;
            int64x2_t v291 = (int64x2_t)v126;
            int64x2_t v292 = (int64x2_t)v126;
            int64x2_t v295 = (int64x2_t)v126;
            int64x2_t v296 = (int64x2_t)v126;
            int32x4_t v299 = v126;
            int32x4_t v300 = v126;
            uint64_t v125 = 4;
          }
          else if (v69[4])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v287, 64, v123, v124, v114, v31);
          }
          else
          {
            uint64_t v125 = 0;
            int32x4_t v126 = 0uLL;
            int64x2_t v287 = 0u;
            int64x2_t v288 = 0u;
            int64x2_t v291 = 0u;
            int64x2_t v292 = 0u;
            int64x2_t v295 = 0u;
            int64x2_t v296 = 0u;
            int32x4_t v299 = 0u;
            int32x4_t v300 = 0u;
          }
          uint64_t v135 = v123 + v125;
          unsigned int v136 = v69[5];
          if (v136 == 127)
          {
            int64x2_t v139 = *(int64x2_t *)v135;
            int64x2_t v140 = *(int64x2_t *)(v135 + 16);
            int64x2_t v141 = *(int64x2_t *)(v135 + 32);
            int64x2_t v142 = *(int64x2_t *)(v135 + 48);
            int64x2_t v143 = *(int64x2_t *)(v135 + 64);
            int64x2_t v144 = *(int64x2_t *)(v135 + 80);
            int64x2_t v145 = *(int64x2_t *)(v135 + 96);
            int64x2_t v146 = *(int64x2_t *)(v135 + 112);
            int64x2_t v303 = vzip1q_s64(*(int64x2_t *)v135, v140);
            int64x2_t v304 = vzip1q_s64(v143, v144);
            int64x2_t v307 = vzip2q_s64(v139, v140);
            int64x2_t v308 = vzip2q_s64(v143, v144);
            int64x2_t v311 = vzip1q_s64(v141, v142);
            int64x2_t v312 = vzip1q_s64(v145, v146);
            int32x4_t v138 = (int32x4_t)vzip2q_s64(v141, v142);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v145, v146);
            int32x4_t v315 = v138;
            int32x4_t v316 = v31;
            uint64_t v137 = 128;
          }
          else if (v136 == 3)
          {
            int32x4_t v138 = (int32x4_t)vld1q_dup_f32((const float *)v135);
            int64x2_t v303 = (int64x2_t)v138;
            int64x2_t v304 = (int64x2_t)v138;
            int64x2_t v307 = (int64x2_t)v138;
            int64x2_t v308 = (int64x2_t)v138;
            int64x2_t v311 = (int64x2_t)v138;
            int64x2_t v312 = (int64x2_t)v138;
            int32x4_t v315 = v138;
            int32x4_t v316 = v138;
            uint64_t v137 = 4;
          }
          else if (v69[5])
          {
            uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v303, 64, v135, v136, v126, v31);
          }
          else
          {
            uint64_t v137 = 0;
            int32x4_t v138 = 0uLL;
            int64x2_t v303 = 0u;
            int64x2_t v304 = 0u;
            int64x2_t v307 = 0u;
            int64x2_t v308 = 0u;
            int64x2_t v311 = 0u;
            int64x2_t v312 = 0u;
            int32x4_t v315 = 0u;
            int32x4_t v316 = 0u;
          }
          uint64_t v147 = v135 + v137;
          unsigned int v148 = v69[6];
          if (v148 == 127)
          {
            int64x2_t v151 = *(int64x2_t *)v147;
            int64x2_t v152 = *(int64x2_t *)(v147 + 16);
            int64x2_t v153 = *(int64x2_t *)(v147 + 32);
            int64x2_t v154 = *(int64x2_t *)(v147 + 48);
            int64x2_t v155 = *(int64x2_t *)(v147 + 64);
            int64x2_t v156 = *(int64x2_t *)(v147 + 80);
            int64x2_t v157 = *(int64x2_t *)(v147 + 96);
            int64x2_t v158 = *(int64x2_t *)(v147 + 112);
            int64x2_t v289 = vzip1q_s64(*(int64x2_t *)v147, v152);
            int64x2_t v290 = vzip1q_s64(v155, v156);
            int64x2_t v293 = vzip2q_s64(v151, v152);
            int64x2_t v294 = vzip2q_s64(v155, v156);
            int64x2_t v297 = vzip1q_s64(v153, v154);
            int64x2_t v298 = vzip1q_s64(v157, v158);
            int32x4_t v150 = (int32x4_t)vzip2q_s64(v153, v154);
            int32x4_t v31 = (int32x4_t)vzip2q_s64(v157, v158);
            int32x4_t v301 = v150;
            int32x4_t v302 = v31;
            uint64_t v149 = 128;
          }
          else if (v148 == 3)
          {
            int32x4_t v150 = (int32x4_t)vld1q_dup_f32((const float *)v147);
            int64x2_t v289 = (int64x2_t)v150;
            int64x2_t v290 = (int64x2_t)v150;
            int64x2_t v293 = (int64x2_t)v150;
            int64x2_t v294 = (int64x2_t)v150;
            int64x2_t v297 = (int64x2_t)v150;
            int64x2_t v298 = (int64x2_t)v150;
            int32x4_t v301 = v150;
            int32x4_t v302 = v150;
            uint64_t v149 = 4;
          }
          else if (v69[6])
          {
            uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v289, 64, v147, v148, v138, v31);
          }
          else
          {
            uint64_t v149 = 0;
            int32x4_t v150 = 0uLL;
            int64x2_t v289 = 0u;
            int64x2_t v290 = 0u;
            int64x2_t v293 = 0u;
            int64x2_t v294 = 0u;
            int64x2_t v297 = 0u;
            int64x2_t v298 = 0u;
            int32x4_t v301 = 0u;
            int32x4_t v302 = 0u;
          }
          uint64_t v159 = v147 + v149;
          unsigned int v160 = v69[7];
          if (v160 == 127)
          {
            int64x2_t v163 = *(int64x2_t *)v159;
            int64x2_t v164 = *(int64x2_t *)(v159 + 16);
            int64x2_t v165 = *(int64x2_t *)(v159 + 32);
            int64x2_t v166 = *(int64x2_t *)(v159 + 48);
            int64x2_t v167 = *(int64x2_t *)(v159 + 64);
            int64x2_t v168 = *(int64x2_t *)(v159 + 80);
            int64x2_t v169 = *(int64x2_t *)(v159 + 96);
            int64x2_t v170 = *(int64x2_t *)(v159 + 112);
            int64x2_t v305 = vzip1q_s64(*(int64x2_t *)v159, v164);
            int64x2_t v306 = vzip1q_s64(v167, v168);
            int64x2_t v309 = vzip2q_s64(v163, v164);
            int64x2_t v310 = vzip2q_s64(v167, v168);
            int64x2_t v313 = vzip1q_s64(v165, v166);
            int64x2_t v314 = vzip1q_s64(v169, v170);
            int64x2_t v317 = vzip2q_s64(v165, v166);
            int64x2_t v318 = vzip2q_s64(v169, v170);
            uint64_t v161 = v250;
            if (!v250) {
              goto LABEL_188;
            }
          }
          else if (v160 == 3)
          {
            float32x4_t v162 = vld1q_dup_f32((const float *)v159);
            int64x2_t v305 = (int64x2_t)v162;
            int64x2_t v306 = (int64x2_t)v162;
            int64x2_t v309 = (int64x2_t)v162;
            int64x2_t v310 = (int64x2_t)v162;
            int64x2_t v313 = (int64x2_t)v162;
            int64x2_t v314 = (int64x2_t)v162;
            int64x2_t v317 = (int64x2_t)v162;
            int64x2_t v318 = (int64x2_t)v162;
            uint64_t v161 = v250;
            if (!v250) {
              goto LABEL_188;
            }
          }
          else if (v69[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v305, 64, v159, v160, v150, v31);
            uint64_t v161 = v250;
            if (!v250) {
              goto LABEL_188;
            }
          }
          else
          {
            int64x2_t v305 = 0u;
            int64x2_t v306 = 0u;
            int64x2_t v309 = 0u;
            int64x2_t v310 = 0u;
            int64x2_t v313 = 0u;
            int64x2_t v314 = 0u;
            int64x2_t v317 = 0u;
            int64x2_t v318 = 0u;
            uint64_t v161 = v250;
            if (!v250) {
              goto LABEL_188;
            }
          }
          if (v251)
          {
            uint64_t v171 = 0;
            unint64_t v172 = (unint64_t)v248 << 6;
            uint64_t v173 = 4 * v249;
            int64x2_t v174 = &v255.i8[v172 + v173];
            unint64_t v175 = v246;
            uint64_t v176 = v247;
            unint64_t v177 = 4 * v251;
            if (v177 <= 1) {
              unint64_t v178 = 1;
            }
            else {
              unint64_t v178 = 4 * v251;
            }
            unint64_t v179 = v172 + v173;
            int64x2_t v180 = &v255.i8[v172 + v173];
            if (v178) {
              BOOL v181 = (v178 - 1) >> 32 == 0;
            }
            else {
              BOOL v181 = 0;
            }
            uint64_t v182 = v178 & 0x3FFFFFFE0;
            uint64_t v183 = v178 & 0x3FFFFFFF8;
            char v185 = !v181 || v178 < 8;
            int64x2_t v186 = &v256.i8[v179];
            int64x2_t v187 = (long long *)(v246 + 16);
            int64x2_t v188 = v174;
            unint64_t v189 = v246;
            do
            {
              int64x2_t v190 = (char *)(v175 + v176 * v171);
              int64x2_t v191 = &v174[64 * v171];
              if ((unint64_t)(&v180[64 * v171] - v190) < 0x20) {
                char v192 = 1;
              }
              else {
                char v192 = v185;
              }
              if (v192)
              {
                int v193 = 0;
                goto LABEL_185;
              }
              if (v178 >= 0x20)
              {
                uint64_t v195 = v187;
                int64x2_t v196 = v186;
                uint64_t v197 = v178 & 0x3FFFFFFE0;
                do
                {
                  long long v198 = *v195;
                  *((_OWORD *)v196 - 1) = *(v195 - 1);
                  *(_OWORD *)int64x2_t v196 = v198;
                  v196 += 32;
                  v195 += 2;
                  v197 -= 32;
                }
                while (v197);
                if (v178 == v182) {
                  goto LABEL_168;
                }
                uint64_t v194 = v178 & 0x3FFFFFFE0;
                if ((v178 & 0x18) == 0)
                {
                  v190 += v182;
                  v191 += v182;
                  int v193 = v178 & 0xFFFFFFE0;
                  goto LABEL_185;
                }
              }
              else
              {
                uint64_t v194 = 0;
              }
              v191 += v183;
              uint64_t v199 = v194 - v183;
              int64x2_t v200 = (uint64_t *)(v189 + v194);
              int64x2_t v201 = &v188[v194];
              do
              {
                uint64_t v202 = *v200++;
                *(void *)int64x2_t v201 = v202;
                v201 += 8;
                v199 += 8;
              }
              while (v199);
              if (v178 == v183) {
                goto LABEL_168;
              }
              v190 += v183;
              int v193 = v178 & 0xFFFFFFF8;
LABEL_185:
              unsigned int v203 = v193 + 1;
              do
              {
                char v204 = *v190++;
                *v191++ = v204;
              }
              while (v177 > v203++);
LABEL_168:
              ++v171;
              v186 += 64;
              int64x2_t v187 = (long long *)((char *)v187 + v176);
              v189 += v176;
              v188 += 64;
            }
            while (v171 != v161);
          }
LABEL_188:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v255, 64, v244, v245, v252, v253);
LABEL_189:
          uint64_t result = v240;
          if (v241) {
            uint64_t result = memcpy(v240, v73, 0x400uLL);
          }
          BOOL v23 = v34++ == v229 >> 4;
          uint64_t v29 = v237;
        }
        while (!v23);
        BOOL v23 = v18++ == v222;
      }
      while (!v23);
    }
  }
  return result;
}

unsigned __int8 *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v364 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v283 = a8;
  unsigned int v17 = a8 >> 4;
  unsigned int v265 = a8 + a10 - 1;
  unsigned int v267 = v265 >> 4;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v284 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v287 = v24;
  uint64_t result = (unsigned __int8 *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v27 = a1;
  int v277 = (int)result;
  if (v17 <= v267)
  {
    unsigned int v276 = a7 + a9 - 1;
    unsigned int v264 = a7 >> 4;
    if (a7 >> 4 <= v276 >> 4)
    {
      unsigned int v261 = a5 - 1;
      unsigned int v286 = (a5 - 1) >> 4;
      int v285 = ((a5 - 1) & 0xF) + 1;
      int v262 = ((a6 - 1) & 0xF) + 1;
      unsigned int v263 = (a6 - 1) >> 4;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      v29.i64[1] = -1;
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 4uLL)))))));
      *(int8x8_t *)v26.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v28));
      __int32 v274 = v26.i32[0] | v26.i32[1];
      BOOL v271 = v26.i32[1] != 0;
      uint64_t v272 = v26.i64[0];
      BOOL v270 = v26.i32[0] != 0;
      unint64_t v260 = 8 * v19 * (unint64_t)v18;
      uint64_t v30 = a11;
      uint64_t v31 = 2 * a11;
      uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
      unsigned int v275 = a7;
      do
      {
        unsigned int v32 = (16 * v17) | 0xF;
        if (16 * v17 <= v283) {
          int v33 = v283;
        }
        else {
          int v33 = 16 * v17;
        }
        unsigned int v34 = v264;
        if (v265 < v32) {
          unsigned int v32 = v265;
        }
        unsigned int v282 = 16 * v17;
        int v269 = v33 - 16 * v17;
        int v281 = v32 - v33 + 1;
        if (v17 == v263) {
          unsigned int v35 = v262;
        }
        else {
          unsigned int v35 = 16;
        }
        uint64_t v280 = a3 + (v33 - v283) * v30;
        unsigned int v268 = v35;
        do
        {
          unsigned int v36 = 16 * v34;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= a7) {
            int v38 = a7;
          }
          else {
            int v38 = 16 * v34;
          }
          if (v276 < v37) {
            unsigned int v37 = v276;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v286) {
            unsigned int v40 = v285;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (v282 >= v283 && v36 >= a7)
          {
            int v42 = v285;
            if (v34 != v286) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v281 != v35;
          }
          if (v277)
          {
            unsigned int v63 = 0;
            uint64_t v64 = v260 >> (*(unsigned char *)(v27 + 57) != 0);
            char v65 = 1;
            if (v64 > 127)
            {
              if (v64 > 511)
              {
                if (v64 == 512)
                {
                  unsigned int v63 = 16;
                  char v66 = 1;
                  unsigned int v67 = 16;
                }
                else
                {
                  char v66 = 1;
                  unsigned int v67 = 0;
                  if (v64 == 1024)
                  {
                    unsigned int v67 = 8;
                    unsigned int v63 = 16;
                  }
                }
              }
              else if (v64 == 128)
              {
                char v65 = 0;
                char v66 = 0;
                unsigned int v63 = 32;
                unsigned int v67 = 32;
              }
              else
              {
                char v66 = 1;
                unsigned int v67 = 0;
                if (v64 == 256)
                {
                  char v65 = 0;
                  unsigned int v67 = 16;
                  unsigned int v63 = 32;
                }
              }
            }
            else
            {
              char v66 = 1;
              unsigned int v67 = 0;
              switch(v64)
              {
                case 4:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 128;
                  unsigned int v63 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 128;
                  unsigned int v67 = 128;
                  break;
                case 16:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v67 = 64;
                  unsigned int v63 = 128;
                  break;
                case 32:
                  char v65 = 0;
                  char v66 = 0;
                  unsigned int v63 = 64;
                  unsigned int v67 = 64;
                  break;
                default:
                  if (v64 == 64)
                  {
                    char v65 = 0;
                    char v66 = 0;
                    unsigned int v67 = 32;
                    unsigned int v63 = 64;
                  }
                  break;
              }
            }
            unsigned int v251 = (v63 >> 4) - 1;
            if (v65)
            {
              unsigned int v252 = 0;
              if (v66) {
                goto LABEL_244;
              }
LABEL_233:
              unsigned int v253 = 32 - __clz(~(-1 << -(char)__clz(((v67 + 15) >> 4) - 1)));
              if (v253 | v252) {
                goto LABEL_234;
              }
LABEL_245:
              uint64_t v255 = 0;
            }
            else
            {
              unsigned int v252 = 32 - __clz(~(-1 << -(char)__clz(v251)));
              if ((v66 & 1) == 0) {
                goto LABEL_233;
              }
LABEL_244:
              unsigned int v253 = 0;
              if (!v252) {
                goto LABEL_245;
              }
LABEL_234:
              int v254 = 0;
              uint64_t v255 = 0;
              int v256 = v34 & v251;
              BOOL v257 = v252 != 0;
              BOOL v258 = v253 != 0;
              int v259 = 1;
              do
              {
                --v252;
                if (v257) {
                  v255 |= (unint64_t)(v259 & v256) << v254++;
                }
                else {
                  unsigned int v252 = 0;
                }
                --v253;
                if (v258) {
                  v255 |= (unint64_t)(v259 & v17 & ((v67 >> 4) - 1)) << v254++;
                }
                else {
                  unsigned int v253 = 0;
                }
                v259 *= 2;
                --v254;
                BOOL v258 = v253 != 0;
                BOOL v257 = v252 != 0;
              }
              while (v253 | v252);
            }
            unint64_t v51 = ((unint64_t)(v36 / v63 + v282 / v67 * ((v63 + v261) / v63)) << 14) + (v255 << 10);
            uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
            goto LABEL_60;
          }
          if (v274)
          {
            int v44 = 0;
            uint64_t v45 = 0;
            int v46 = 1;
            BOOL v47 = v271;
            BOOL v48 = v270;
            int v49 = HIDWORD(v272);
            int v50 = v272;
            do
            {
              --v49;
              if (v47) {
                v45 |= (unint64_t)(v46 & v34) << v44++;
              }
              else {
                int v49 = 0;
              }
              --v50;
              if (v48) {
                v45 |= (unint64_t)(v46 & v17) << v44++;
              }
              else {
                int v50 = 0;
              }
              v46 *= 2;
              --v44;
              BOOL v48 = v50 != 0;
              BOOL v47 = v49 != 0;
            }
            while (v50 | v49);
          }
          else
          {
            uint64_t v45 = 0;
          }
          unint64_t v51 = v45 << 10;
LABEL_60:
          unsigned int v52 = *(_DWORD *)(v27 + 128) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 15;
          if (v53 < 0x20) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 4) - 1)));
          }
          unsigned int v55 = *(_DWORD *)(v27 + 132) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20)
          {
            unsigned int v57 = 0;
            if (!v54)
            {
LABEL_82:
              uint64_t v59 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
            if (!(v57 | v54)) {
              goto LABEL_82;
            }
          }
          int v58 = 0;
          uint64_t v59 = 0;
          BOOL v60 = v54 != 0;
          BOOL v61 = v57 != 0;
          int v62 = 1;
          do
          {
            --v54;
            if (v60) {
              v59 |= (unint64_t)(v62 & v34) << v58++;
            }
            else {
              unsigned int v54 = 0;
            }
            --v57;
            if (v61) {
              v59 |= (unint64_t)(v62 & v17) << v58++;
            }
            else {
              unsigned int v57 = 0;
            }
            v62 *= 2;
            --v58;
            BOOL v61 = v57 != 0;
            BOOL v60 = v54 != 0;
          }
          while (v57 | v54);
LABEL_83:
          unsigned int v68 = v38 - a7;
          int v69 = v40 < 0x10 || v41;
          unint64_t v70 = (char *)(a4 + 8 * v59);
          unsigned int v71 = (int64x2_t *)(v280 + 4 * v68);
          int v72 = (int64x2_t *)(a2 + v51);
          if (v35 < 0x10) {
            int v73 = 1;
          }
          else {
            int v73 = v69;
          }
          if (v287)
          {
            if (v73)
            {
              char v74 = v72;
              int v75 = v39;
              BOOL v76 = v41;
              int v77 = v38;
              memcpy(v299, v72, sizeof(v299));
              int v38 = v77;
              unsigned int v36 = 16 * v34;
              uint64_t v30 = a11;
              unsigned int v35 = v268;
              BOOL v41 = v76;
              int v39 = v75;
              int32x4_t v78 = (int64x2_t *)v299;
              int v72 = v74;
              uint64_t v27 = v284;
LABEL_93:
              __dst = v72;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = v27;
              int64x2_t v289 = v78;
              unsigned __int8 v297 = v40;
              unsigned __int8 v298 = v35;
              unsigned int v293 = v269;
              unsigned int v294 = v38 - v36;
              int64x2_t v290 = v70;
              int64x2_t v291 = v71;
              uint64_t v292 = v30;
              unsigned int v295 = v281;
              unsigned int v296 = v39;
              if (v41)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(v27 + 8) + 7384), block);
                uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
                uint64_t v27 = v284;
                a7 = v275;
                uint64_t v31 = 2 * a11;
                goto LABEL_95;
              }
              unsigned int v101 = *v70;
              if (v101 == 127)
              {
                int64x2_t v104 = *v78;
                int64x2_t v105 = v78[1];
                int64x2_t v106 = v78[2];
                int64x2_t v107 = v78[3];
                int64x2_t v108 = v78[4];
                int64x2_t v109 = v78[5];
                int64x2_t v110 = v78[6];
                int64x2_t v111 = v78[7];
                int64x2_t v300 = vzip1q_s64(*v78, v105);
                int64x2_t v301 = vzip1q_s64(v108, v109);
                int64x2_t v304 = vzip2q_s64(v104, v105);
                int64x2_t v305 = vzip2q_s64(v108, v109);
                int64x2_t v308 = vzip1q_s64(v106, v107);
                int64x2_t v309 = vzip1q_s64(v110, v111);
                int32x4_t v103 = (int32x4_t)vzip2q_s64(v106, v107);
                int64x2_t v29 = vzip2q_s64(v110, v111);
                int32x4_t v312 = v103;
                int64x2_t v313 = v29;
                uint64_t v102 = 128;
              }
              else if (v101 == 3)
              {
                int32x4_t v103 = (int32x4_t)vld1q_dup_f32((const float *)v78->i32);
                int64x2_t v300 = (int64x2_t)v103;
                int64x2_t v301 = (int64x2_t)v103;
                int64x2_t v304 = (int64x2_t)v103;
                int64x2_t v305 = (int64x2_t)v103;
                int64x2_t v308 = (int64x2_t)v103;
                int64x2_t v309 = (int64x2_t)v103;
                int32x4_t v312 = v103;
                int64x2_t v313 = (int64x2_t)v103;
                uint64_t v102 = 4;
              }
              else if (*v70)
              {
                uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v300, 64, (uint64_t)v78, v101, (int32x4_t)v26, (int32x4_t)v29);
              }
              else
              {
                uint64_t v102 = 0;
                int32x4_t v103 = 0uLL;
                int64x2_t v301 = 0u;
                int64x2_t v300 = 0u;
                int64x2_t v304 = 0u;
                int64x2_t v305 = 0u;
                int64x2_t v308 = 0u;
                int64x2_t v309 = 0u;
                int32x4_t v312 = 0u;
                int64x2_t v313 = 0u;
              }
              uint64_t v112 = (uint64_t)v78->i64 + v102;
              unsigned int v113 = v70[1];
              if (v113 == 127)
              {
                int64x2_t v116 = *(int64x2_t *)v112;
                int64x2_t v117 = *(int64x2_t *)(v112 + 16);
                int64x2_t v118 = *(int64x2_t *)(v112 + 32);
                int64x2_t v119 = *(int64x2_t *)(v112 + 48);
                int64x2_t v120 = *(int64x2_t *)(v112 + 64);
                int64x2_t v121 = *(int64x2_t *)(v112 + 80);
                int64x2_t v122 = *(int64x2_t *)(v112 + 96);
                int64x2_t v123 = *(int64x2_t *)(v112 + 112);
                int64x2_t v316 = vzip1q_s64(*(int64x2_t *)v112, v117);
                int64x2_t v317 = vzip1q_s64(v120, v121);
                int64x2_t v320 = vzip2q_s64(v116, v117);
                int64x2_t v321 = vzip2q_s64(v120, v121);
                int64x2_t v324 = vzip1q_s64(v118, v119);
                int64x2_t v325 = vzip1q_s64(v122, v123);
                int32x4_t v115 = (int32x4_t)vzip2q_s64(v118, v119);
                int64x2_t v29 = vzip2q_s64(v122, v123);
                int32x4_t v328 = v115;
                int64x2_t v329 = v29;
                uint64_t v114 = 128;
              }
              else if (v113 == 3)
              {
                int32x4_t v115 = (int32x4_t)vld1q_dup_f32((const float *)v112);
                int64x2_t v316 = (int64x2_t)v115;
                int64x2_t v317 = (int64x2_t)v115;
                int64x2_t v320 = (int64x2_t)v115;
                int64x2_t v321 = (int64x2_t)v115;
                int64x2_t v324 = (int64x2_t)v115;
                int64x2_t v325 = (int64x2_t)v115;
                int32x4_t v328 = v115;
                int64x2_t v329 = (int64x2_t)v115;
                uint64_t v114 = 4;
              }
              else if (v70[1])
              {
                uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v316, 64, v112, v113, v103, (int32x4_t)v29);
              }
              else
              {
                uint64_t v114 = 0;
                int32x4_t v115 = 0uLL;
                int64x2_t v316 = 0u;
                int64x2_t v317 = 0u;
                int64x2_t v320 = 0u;
                int64x2_t v321 = 0u;
                int64x2_t v324 = 0u;
                int64x2_t v325 = 0u;
                int32x4_t v328 = 0u;
                int64x2_t v329 = 0u;
              }
              uint64_t v124 = v112 + v114;
              unsigned int v125 = v70[2];
              if (v125 == 127)
              {
                int64x2_t v128 = *(int64x2_t *)v124;
                int64x2_t v129 = *(int64x2_t *)(v124 + 16);
                int64x2_t v130 = *(int64x2_t *)(v124 + 32);
                int64x2_t v131 = *(int64x2_t *)(v124 + 48);
                int64x2_t v132 = *(int64x2_t *)(v124 + 64);
                int64x2_t v133 = *(int64x2_t *)(v124 + 80);
                int64x2_t v134 = *(int64x2_t *)(v124 + 96);
                int64x2_t v135 = *(int64x2_t *)(v124 + 112);
                int64x2_t v302 = vzip1q_s64(*(int64x2_t *)v124, v129);
                int64x2_t v303 = vzip1q_s64(v132, v133);
                int64x2_t v306 = vzip2q_s64(v128, v129);
                int64x2_t v307 = vzip2q_s64(v132, v133);
                int64x2_t v310 = vzip1q_s64(v130, v131);
                int64x2_t v311 = vzip1q_s64(v134, v135);
                int32x4_t v127 = (int32x4_t)vzip2q_s64(v130, v131);
                int64x2_t v29 = vzip2q_s64(v134, v135);
                int32x4_t v314 = v127;
                int64x2_t v315 = v29;
                uint64_t v126 = 128;
              }
              else if (v125 == 3)
              {
                int32x4_t v127 = (int32x4_t)vld1q_dup_f32((const float *)v124);
                int64x2_t v302 = (int64x2_t)v127;
                int64x2_t v303 = (int64x2_t)v127;
                int64x2_t v306 = (int64x2_t)v127;
                int64x2_t v307 = (int64x2_t)v127;
                int64x2_t v310 = (int64x2_t)v127;
                int64x2_t v311 = (int64x2_t)v127;
                int32x4_t v314 = v127;
                int64x2_t v315 = (int64x2_t)v127;
                uint64_t v126 = 4;
              }
              else if (v70[2])
              {
                uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v302, 64, v124, v125, v115, (int32x4_t)v29);
              }
              else
              {
                uint64_t v126 = 0;
                int32x4_t v127 = 0uLL;
                int64x2_t v302 = 0u;
                int64x2_t v303 = 0u;
                int64x2_t v306 = 0u;
                int64x2_t v307 = 0u;
                int64x2_t v310 = 0u;
                int64x2_t v311 = 0u;
                int32x4_t v314 = 0u;
                int64x2_t v315 = 0u;
              }
              uint64_t v136 = v124 + v126;
              unsigned int v137 = v70[3];
              if (v137 == 127)
              {
                int64x2_t v140 = *(int64x2_t *)v136;
                int64x2_t v141 = *(int64x2_t *)(v136 + 16);
                int64x2_t v142 = *(int64x2_t *)(v136 + 32);
                int64x2_t v143 = *(int64x2_t *)(v136 + 48);
                int64x2_t v144 = *(int64x2_t *)(v136 + 64);
                int64x2_t v145 = *(int64x2_t *)(v136 + 80);
                int64x2_t v146 = *(int64x2_t *)(v136 + 96);
                int64x2_t v147 = *(int64x2_t *)(v136 + 112);
                int64x2_t v318 = vzip1q_s64(*(int64x2_t *)v136, v141);
                int64x2_t v319 = vzip1q_s64(v144, v145);
                int64x2_t v322 = vzip2q_s64(v140, v141);
                int64x2_t v323 = vzip2q_s64(v144, v145);
                int64x2_t v326 = vzip1q_s64(v142, v143);
                int64x2_t v327 = vzip1q_s64(v146, v147);
                int32x4_t v139 = (int32x4_t)vzip2q_s64(v142, v143);
                int64x2_t v29 = vzip2q_s64(v146, v147);
                int32x4_t v330 = v139;
                int64x2_t v331 = v29;
                uint64_t v138 = 128;
              }
              else if (v137 == 3)
              {
                int32x4_t v139 = (int32x4_t)vld1q_dup_f32((const float *)v136);
                int64x2_t v318 = (int64x2_t)v139;
                int64x2_t v319 = (int64x2_t)v139;
                int64x2_t v322 = (int64x2_t)v139;
                int64x2_t v323 = (int64x2_t)v139;
                int64x2_t v326 = (int64x2_t)v139;
                int64x2_t v327 = (int64x2_t)v139;
                int32x4_t v330 = v139;
                int64x2_t v331 = (int64x2_t)v139;
                uint64_t v138 = 4;
              }
              else if (v70[3])
              {
                uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v318, 64, v136, v137, v127, (int32x4_t)v29);
              }
              else
              {
                uint64_t v138 = 0;
                int32x4_t v139 = 0uLL;
                int64x2_t v318 = 0u;
                int64x2_t v319 = 0u;
                int64x2_t v322 = 0u;
                int64x2_t v323 = 0u;
                int64x2_t v326 = 0u;
                int64x2_t v327 = 0u;
                int32x4_t v330 = 0u;
                int64x2_t v331 = 0u;
              }
              uint64_t v148 = v136 + v138;
              unsigned int v149 = v70[4];
              if (v149 == 127)
              {
                int64x2_t v152 = *(int64x2_t *)v148;
                int64x2_t v153 = *(int64x2_t *)(v148 + 16);
                int64x2_t v154 = *(int64x2_t *)(v148 + 32);
                int64x2_t v155 = *(int64x2_t *)(v148 + 48);
                int64x2_t v156 = *(int64x2_t *)(v148 + 64);
                int64x2_t v157 = *(int64x2_t *)(v148 + 80);
                int64x2_t v158 = *(int64x2_t *)(v148 + 96);
                int64x2_t v159 = *(int64x2_t *)(v148 + 112);
                int64x2_t v332 = vzip1q_s64(*(int64x2_t *)v148, v153);
                int64x2_t v333 = vzip1q_s64(v156, v157);
                int64x2_t v336 = vzip2q_s64(v152, v153);
                int64x2_t v337 = vzip2q_s64(v156, v157);
                int64x2_t v340 = vzip1q_s64(v154, v155);
                int64x2_t v341 = vzip1q_s64(v158, v159);
                int32x4_t v151 = (int32x4_t)vzip2q_s64(v154, v155);
                int64x2_t v29 = vzip2q_s64(v158, v159);
                int32x4_t v344 = v151;
                int64x2_t v345 = v29;
                uint64_t v150 = 128;
              }
              else if (v149 == 3)
              {
                int32x4_t v151 = (int32x4_t)vld1q_dup_f32((const float *)v148);
                int64x2_t v332 = (int64x2_t)v151;
                int64x2_t v333 = (int64x2_t)v151;
                int64x2_t v336 = (int64x2_t)v151;
                int64x2_t v337 = (int64x2_t)v151;
                int64x2_t v340 = (int64x2_t)v151;
                int64x2_t v341 = (int64x2_t)v151;
                int32x4_t v344 = v151;
                int64x2_t v345 = (int64x2_t)v151;
                uint64_t v150 = 4;
              }
              else if (v70[4])
              {
                uint64_t v150 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v332, 64, v148, v149, v139, (int32x4_t)v29);
              }
              else
              {
                uint64_t v150 = 0;
                int32x4_t v151 = 0uLL;
                int64x2_t v332 = 0u;
                int64x2_t v333 = 0u;
                int64x2_t v336 = 0u;
                int64x2_t v337 = 0u;
                int64x2_t v340 = 0u;
                int64x2_t v341 = 0u;
                int32x4_t v344 = 0u;
                int64x2_t v345 = 0u;
              }
              uint64_t v160 = v148 + v150;
              unsigned int v161 = v70[5];
              if (v161 == 127)
              {
                int64x2_t v164 = *(int64x2_t *)v160;
                int64x2_t v165 = *(int64x2_t *)(v160 + 16);
                int64x2_t v166 = *(int64x2_t *)(v160 + 32);
                int64x2_t v167 = *(int64x2_t *)(v160 + 48);
                int64x2_t v168 = *(int64x2_t *)(v160 + 64);
                int64x2_t v169 = *(int64x2_t *)(v160 + 80);
                int64x2_t v170 = *(int64x2_t *)(v160 + 96);
                int64x2_t v171 = *(int64x2_t *)(v160 + 112);
                int64x2_t v348 = vzip1q_s64(*(int64x2_t *)v160, v165);
                int64x2_t v349 = vzip1q_s64(v168, v169);
                int64x2_t v352 = vzip2q_s64(v164, v165);
                int64x2_t v353 = vzip2q_s64(v168, v169);
                int64x2_t v356 = vzip1q_s64(v166, v167);
                int64x2_t v357 = vzip1q_s64(v170, v171);
                int32x4_t v163 = (int32x4_t)vzip2q_s64(v166, v167);
                int64x2_t v29 = vzip2q_s64(v170, v171);
                int32x4_t v360 = v163;
                int64x2_t v361 = v29;
                uint64_t v162 = 128;
              }
              else if (v161 == 3)
              {
                int32x4_t v163 = (int32x4_t)vld1q_dup_f32((const float *)v160);
                int64x2_t v348 = (int64x2_t)v163;
                int64x2_t v349 = (int64x2_t)v163;
                int64x2_t v352 = (int64x2_t)v163;
                int64x2_t v353 = (int64x2_t)v163;
                int64x2_t v356 = (int64x2_t)v163;
                int64x2_t v357 = (int64x2_t)v163;
                int32x4_t v360 = v163;
                int64x2_t v361 = (int64x2_t)v163;
                uint64_t v162 = 4;
              }
              else if (v70[5])
              {
                uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v348, 64, v160, v161, v151, (int32x4_t)v29);
              }
              else
              {
                uint64_t v162 = 0;
                int32x4_t v163 = 0uLL;
                int64x2_t v348 = 0u;
                int64x2_t v349 = 0u;
                int64x2_t v352 = 0u;
                int64x2_t v353 = 0u;
                int64x2_t v356 = 0u;
                int64x2_t v357 = 0u;
                int32x4_t v360 = 0u;
                int64x2_t v361 = 0u;
              }
              uint64_t v172 = v160 + v162;
              unsigned int v173 = v70[6];
              if (v173 == 127)
              {
                int64x2_t v176 = *(int64x2_t *)v172;
                int64x2_t v177 = *(int64x2_t *)(v172 + 16);
                int64x2_t v178 = *(int64x2_t *)(v172 + 32);
                int64x2_t v179 = *(int64x2_t *)(v172 + 48);
                int64x2_t v180 = *(int64x2_t *)(v172 + 64);
                int64x2_t v181 = *(int64x2_t *)(v172 + 80);
                int64x2_t v182 = *(int64x2_t *)(v172 + 96);
                int64x2_t v183 = *(int64x2_t *)(v172 + 112);
                int64x2_t v334 = vzip1q_s64(*(int64x2_t *)v172, v177);
                int64x2_t v335 = vzip1q_s64(v180, v181);
                int64x2_t v338 = vzip2q_s64(v176, v177);
                int64x2_t v339 = vzip2q_s64(v180, v181);
                int64x2_t v342 = vzip1q_s64(v178, v179);
                int64x2_t v343 = vzip1q_s64(v182, v183);
                int32x4_t v175 = (int32x4_t)vzip2q_s64(v178, v179);
                int64x2_t v29 = vzip2q_s64(v182, v183);
                int32x4_t v346 = v175;
                int64x2_t v347 = v29;
                uint64_t v174 = 128;
              }
              else if (v173 == 3)
              {
                int32x4_t v175 = (int32x4_t)vld1q_dup_f32((const float *)v172);
                int64x2_t v334 = (int64x2_t)v175;
                int64x2_t v335 = (int64x2_t)v175;
                int64x2_t v338 = (int64x2_t)v175;
                int64x2_t v339 = (int64x2_t)v175;
                int64x2_t v342 = (int64x2_t)v175;
                int64x2_t v343 = (int64x2_t)v175;
                int32x4_t v346 = v175;
                int64x2_t v347 = (int64x2_t)v175;
                uint64_t v174 = 4;
              }
              else if (v70[6])
              {
                uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v334, 64, v172, v173, v163, (int32x4_t)v29);
              }
              else
              {
                uint64_t v174 = 0;
                int32x4_t v175 = 0uLL;
                int64x2_t v334 = 0u;
                int64x2_t v335 = 0u;
                int64x2_t v338 = 0u;
                int64x2_t v339 = 0u;
                int64x2_t v342 = 0u;
                int64x2_t v343 = 0u;
                int32x4_t v346 = 0u;
                int64x2_t v347 = 0u;
              }
              uint64_t v184 = v172 + v174;
              unsigned int v185 = v70[7];
              if (v185 == 127)
              {
                int64x2_t v187 = *(int64x2_t *)v184;
                int64x2_t v188 = *(int64x2_t *)(v184 + 16);
                int64x2_t v189 = *(int64x2_t *)(v184 + 32);
                int64x2_t v190 = *(int64x2_t *)(v184 + 48);
                int64x2_t v191 = *(int64x2_t *)(v184 + 64);
                int64x2_t v192 = *(int64x2_t *)(v184 + 80);
                int64x2_t v193 = *(int64x2_t *)(v184 + 96);
                int64x2_t v194 = *(int64x2_t *)(v184 + 112);
                int64x2_t v350 = vzip1q_s64(*(int64x2_t *)v184, v188);
                int64x2_t v351 = vzip1q_s64(v191, v192);
                int64x2_t v354 = vzip2q_s64(v187, v188);
                int64x2_t v355 = vzip2q_s64(v191, v192);
                int64x2_t v358 = vzip1q_s64(v189, v190);
                int64x2_t v359 = vzip1q_s64(v193, v194);
                int64x2_t v26 = vzip2q_s64(v189, v190);
                int64x2_t v29 = vzip2q_s64(v193, v194);
                int64x2_t v362 = v26;
                int64x2_t v363 = v29;
                uint64_t v186 = v295;
                if (v295) {
                  goto LABEL_171;
                }
              }
              else
              {
                if (v185 != 3)
                {
                  if (v70[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v350, 64, v184, v185, v175, (int32x4_t)v29);
                    uint64_t v186 = v295;
                    if (!v295) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    int64x2_t v26 = 0uLL;
                    int64x2_t v350 = 0u;
                    int64x2_t v351 = 0u;
                    int64x2_t v354 = 0u;
                    int64x2_t v355 = 0u;
                    int64x2_t v358 = 0u;
                    int64x2_t v359 = 0u;
                    int64x2_t v362 = 0u;
                    int64x2_t v363 = 0u;
                    uint64_t v186 = v295;
                    if (!v295) {
                      goto LABEL_205;
                    }
                  }
LABEL_171:
                  if (!v296) {
                    goto LABEL_205;
                  }
                  uint64_t v195 = 0;
                  unint64_t v196 = (unint64_t)v293 << 6;
                  uint64_t v197 = 4 * v294;
                  long long v198 = &v300.i8[v196 + v197];
                  uint64_t v199 = v291;
                  uint64_t v200 = v292;
                  unint64_t v201 = 4 * v296;
                  if (v201 <= 1) {
                    unint64_t v202 = 1;
                  }
                  else {
                    unint64_t v202 = 4 * v296;
                  }
                  unint64_t v203 = v196 + v197;
                  char v204 = &v300.i8[v196 + v197];
                  if (v202) {
                    BOOL v205 = (v202 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v205 = 0;
                  }
                  uint64_t v206 = v202 & 0x3FFFFFFE0;
                  uint64_t v207 = v202 & 0x3FFFFFFF8;
                  char v209 = !v205 || v202 < 8;
                  uint64_t v210 = &v301.i8[v203];
                  int v211 = v291 + 1;
                  BOOL v212 = v198;
                  BOOL v213 = v291;
                  while (2)
                  {
                    int v214 = &v199->i8[v200 * v195];
                    unint64_t v215 = &v198[64 * v195];
                    if ((unint64_t)(&v204[64 * v195] - v214) < 0x20) {
                      char v216 = 1;
                    }
                    else {
                      char v216 = v209;
                    }
                    if (v216)
                    {
                      int v217 = 0;
LABEL_202:
                      unsigned int v226 = v217 + 1;
                      do
                      {
                        char v227 = *v214++;
                        *v215++ = v227;
                      }
                      while (v201 > v226++);
                    }
                    else
                    {
                      if (v202 >= 0x20)
                      {
                        unsigned int v219 = v211;
                        unsigned int v220 = (int64x2_t *)v210;
                        uint64_t v221 = v202 & 0x3FFFFFFE0;
                        do
                        {
                          int64x2_t v26 = v219[-1];
                          int64x2_t v29 = *v219;
                          v220[-1] = v26;
                          *unsigned int v220 = v29;
                          v220 += 2;
                          v219 += 2;
                          v221 -= 32;
                        }
                        while (v221);
                        if (v202 == v206) {
                          goto LABEL_185;
                        }
                        uint64_t v218 = v202 & 0x3FFFFFFE0;
                        if ((v202 & 0x18) == 0)
                        {
                          v214 += v206;
                          v215 += v206;
                          int v217 = v202 & 0xFFFFFFE0;
                          goto LABEL_202;
                        }
                      }
                      else
                      {
                        uint64_t v218 = 0;
                      }
                      v215 += v207;
                      uint64_t v222 = v218 - v207;
                      int v223 = (uint64_t *)((char *)v213->i64 + v218);
                      BOOL v224 = (uint64_t *)&v212[v218];
                      do
                      {
                        uint64_t v225 = *v223++;
                        v26.i64[0] = v225;
                        *v224++ = v225;
                        v222 += 8;
                      }
                      while (v222);
                      if (v202 != v207)
                      {
                        v214 += v207;
                        int v217 = v202 & 0xFFFFFFF8;
                        goto LABEL_202;
                      }
                    }
LABEL_185:
                    ++v195;
                    v210 += 64;
                    int v211 = (int64x2_t *)((char *)v211 + v200);
                    BOOL v213 = (int64x2_t *)((char *)v213 + v200);
                    v212 += 64;
                    if (v195 == v186) {
                      goto LABEL_205;
                    }
                    continue;
                  }
                }
                int64x2_t v26 = (int64x2_t)vld1q_dup_f32((const float *)v184);
                int64x2_t v350 = v26;
                int64x2_t v351 = v26;
                int64x2_t v354 = v26;
                int64x2_t v355 = v26;
                int64x2_t v358 = v26;
                int64x2_t v359 = v26;
                int64x2_t v362 = v26;
                int64x2_t v363 = v26;
                uint64_t v186 = v295;
                if (v295) {
                  goto LABEL_171;
                }
              }
LABEL_205:
              uint64_t v229 = 0;
              int v230 = v289;
              uint64_t v231 = v290;
              int v232 = v297;
              int v233 = v298;
              a7 = v275;
              uint64_t v27 = v284;
              uint64_t v31 = 2 * a11;
              uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
              do
              {
                uint64_t v246 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v229 + 1];
                uint64_t v247 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v229];
                unsigned int v248 = (v232 - 8 * v247) & ~((v232 - 8 * (int)v247) >> 31);
                if (v248 >= 8) {
                  unsigned int v248 = 8;
                }
                unsigned int v249 = (v233 - 4 * v246) & ~((v233 - 4 * (int)v246) >> 31);
                if (v249 >= 4) {
                  unsigned int v249 = 4;
                }
                if (v248) {
                  BOOL v250 = v249 == 0;
                }
                else {
                  BOOL v250 = 1;
                }
                if (v250)
                {
                  char v245 = 0;
                }
                else
                {
                  int v234 = &v300 + 16 * v246 + 2 * v247;
                  int64x2_t v235 = v234[1];
                  int64x2_t v236 = v234[4];
                  int64x2_t v237 = v234[5];
                  int64x2_t v238 = vzip1q_s64(*v234, v236);
                  int64x2_t v239 = vzip2q_s64(*v234, v236);
                  int64x2_t v240 = vzip1q_s64(v235, v237);
                  int64x2_t v241 = vzip2q_s64(v235, v237);
                  int64x2_t v26 = v234[8];
                  int64x2_t v29 = v234[9];
                  v234 += 12;
                  int64x2_t v242 = v234[1];
                  int64x2_t v243 = vzip1q_s64(v26, *v234);
                  int64x2_t v244 = vzip2q_s64(v26, *v234);
                  *int v230 = v238;
                  v230[1] = v239;
                  v230[2] = v243;
                  v230[3] = v244;
                  v230[4] = v240;
                  v230[5] = v241;
                  v230[6] = vzip1q_s64(v29, v242);
                  v230[7] = vzip2q_s64(v29, v242);
                  v230 += 8;
                  char v245 = 127;
                }
                *v231++ = v245;
                v229 += 2;
              }
              while (v229 != 16);
LABEL_95:
              int v72 = __dst;
              if (v287) {
                goto LABEL_27;
              }
              goto LABEL_28;
            }
            int32x4_t v78 = (int64x2_t *)v299;
          }
          else
          {
            int32x4_t v78 = v72;
            if (v73) {
              goto LABEL_93;
            }
          }
          uint64_t v79 = 0;
          int64x2_t v80 = v78;
          do
          {
            uint64_t v96 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79 + 1];
            uint64_t v97 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v79];
            unsigned int v98 = (v40 - 8 * v97) & ~((int)(v40 - 8 * v97) >> 31);
            if (v98 >= 8) {
              unsigned int v98 = 8;
            }
            unsigned int v99 = (v35 - 4 * v96) & ~((int)(v35 - 4 * v96) >> 31);
            if (v99 >= 4) {
              unsigned int v99 = 4;
            }
            if (v98) {
              BOOL v100 = v99 == 0;
            }
            else {
              BOOL v100 = 1;
            }
            if (v100)
            {
              char v95 = 0;
            }
            else
            {
              int64x2_t v81 = (int64x2_t *)((char *)&v71[2 * v97] + 4 * a11 * v96);
              int64x2_t v82 = (int64x2_t *)((char *)v81 + v30);
              int64x2_t v84 = *v81;
              int64x2_t v85 = v81[1];
              int64x2_t v83 = (int64x2_t *)((char *)v81 + v31);
              int64x2_t v86 = v82[1];
              int64x2_t v87 = vzip1q_s64(v84, *v82);
              int64x2_t v88 = vzip2q_s64(v84, *v82);
              int64x2_t v89 = vzip1q_s64(v85, v86);
              int64x2_t v90 = vzip2q_s64(v85, v86);
              int64x2_t v26 = *v83;
              int64x2_t v29 = v83[1];
              int64x2_t v91 = (int64x2_t *)((char *)v83 + v30);
              int64x2_t v92 = v91[1];
              int64x2_t v93 = vzip1q_s64(v26, *v91);
              int64x2_t v94 = vzip2q_s64(v26, *v91);
              *int64x2_t v80 = v87;
              v80[1] = v88;
              v80[2] = v93;
              v80[3] = v94;
              v80[4] = v89;
              v80[5] = v90;
              v80[6] = vzip1q_s64(v29, v92);
              v80[7] = vzip2q_s64(v29, v92);
              v80 += 8;
              char v95 = 127;
            }
            *v70++ = v95;
            v79 += 2;
          }
          while (v79 != 16);
          a7 = v275;
          if (v287)
          {
LABEL_27:
            memcpy(v72, v78, 0x400uLL);
            uint64_t result = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions;
            uint64_t v31 = 2 * a11;
            uint64_t v27 = v284;
          }
LABEL_28:
          BOOL v21 = v34++ == v276 >> 4;
        }
        while (!v21);
        BOOL v21 = v17++ == v267;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v159 = v21;
  uint64_t v160 = v22;
  uint64_t v146 = v23;
  uint64_t v24 = v12;
  uint64_t v190 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v163 = v14;
  unsigned int v148 = v14 + a10 - 1;
  uint64_t v164 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v147 = v148 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v169 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v158 = 0;
LABEL_32:
      unsigned int v155 = v35 - 4;
      unsigned int v152 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v145 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v158 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v158 = 0;
  unsigned int v145 = 0;
  unsigned int v152 = 0;
  unsigned int v155 = 0;
LABEL_33:
  if (v28 <= v147)
  {
    unsigned int v157 = v16 + a9 - 1;
    unsigned int v144 = v16 >> 4;
    if (v16 >> 4 <= v157 >> 4)
    {
      unsigned int v167 = v26 >> 4;
      unsigned int v143 = v27 >> 4;
      int v166 = (v26 & 0xF) + 1;
      int v142 = (v27 & 0xF) + 1;
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v153 = v43.i32[0] | v43.i32[1];
      int8x8_t v151 = v43;
      BOOL v149 = v43.i32[0] != 0;
      BOOL v150 = v43.i32[1] != 0;
      unsigned int v156 = v16;
      do
      {
        unsigned int v44 = (16 * v28) | 0xF;
        if (16 * v28 <= v163) {
          int v45 = v163;
        }
        else {
          int v45 = 16 * v28;
        }
        if (v148 < v44) {
          unsigned int v44 = v148;
        }
        int v154 = v45 - 16 * v28;
        int v162 = v44 - v45 + 1;
        unsigned int v46 = v144;
        if (v28 == v143) {
          unsigned int v47 = v142;
        }
        else {
          unsigned int v47 = 16;
        }
        uint64_t v161 = v146 + (v45 - v163) * a11;
        unsigned int v165 = v47;
        do
        {
          unsigned int v48 = 16 * v46;
          unsigned int v49 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v50 = v16;
          }
          else {
            int v50 = 16 * v46;
          }
          if (v157 < v49) {
            unsigned int v49 = v157;
          }
          int v51 = v49 - v50 + 1;
          if (v46 == v167) {
            unsigned int v52 = v166;
          }
          else {
            unsigned int v52 = 16;
          }
          BOOL v53 = 1;
          if (16 * v28 >= v163 && v48 >= v16)
          {
            int v54 = v166;
            if (v46 != v167) {
              int v54 = 16;
            }
            BOOL v53 = v51 != v54 || v162 != v47;
          }
          if (v158)
          {
            if (v155 | v152)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              BOOL v58 = v152 != 0;
              int v59 = 1;
              BOOL v61 = v155 != 0;
              unsigned int v60 = v152;
              unsigned int v62 = v155;
              do
              {
                --v62;
                if (v61) {
                  v57 |= (unint64_t)(v46 & ~(-1 << v155) & v59) << v56++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v60;
                if (v58) {
                  v57 |= (unint64_t)(v28 & ~(-1 << v152) & v59) << v56++;
                }
                else {
                  unsigned int v60 = 0;
                }
                v59 *= 2;
                --v56;
                BOOL v58 = v60 != 0;
                BOOL v61 = v62 != 0;
              }
              while (v60 | v62);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v70 = *(void *)(result + 320) * ((v46 >> v155) + (v28 >> v152) * v145) + (v57 << 11);
          }
          else
          {
            if (v153)
            {
              int v63 = 0;
              uint64_t v64 = 0;
              int v65 = 1;
              BOOL v66 = v149;
              BOOL v67 = v150;
              __int32 v69 = v151.i32[0];
              __int32 v68 = v151.i32[1];
              do
              {
                --v68;
                if (v67) {
                  v64 |= (unint64_t)(v65 & v46) << v63++;
                }
                else {
                  __int32 v68 = 0;
                }
                --v69;
                if (v66) {
                  v64 |= (unint64_t)(v65 & v28) << v63++;
                }
                else {
                  __int32 v69 = 0;
                }
                v65 *= 2;
                --v63;
                BOOL v66 = v69 != 0;
                BOOL v67 = v68 != 0;
              }
              while (v69 | v68);
            }
            else
            {
              uint64_t v64 = 0;
            }
            uint64_t v70 = v64 << 11;
          }
          unsigned int v71 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v71 <= 1) {
            unsigned int v71 = 1;
          }
          unsigned int v72 = v71 + 15;
          if (v72 < 0x20) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = 32 - __clz(~(-1 << -(char)__clz((v72 >> 4) - 1)));
          }
          unsigned int v74 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v74 <= 1) {
            unsigned int v74 = 1;
          }
          unsigned int v75 = v74 + 15;
          if (v75 < 0x20) {
            unsigned int v76 = 0;
          }
          else {
            unsigned int v76 = 32 - __clz(~(-1 << -(char)__clz((v75 >> 4) - 1)));
          }
          if (v76 | v73)
          {
            int v77 = 0;
            uint64_t v78 = 0;
            BOOL v79 = v73 != 0;
            BOOL v80 = v76 != 0;
            int v81 = 1;
            do
            {
              --v73;
              if (v79) {
                v78 |= (unint64_t)(v81 & v46) << v77++;
              }
              else {
                unsigned int v73 = 0;
              }
              --v76;
              if (v80) {
                v78 |= (unint64_t)(v81 & v28) << v77++;
              }
              else {
                unsigned int v76 = 0;
              }
              v81 *= 2;
              --v77;
              BOOL v80 = v76 != 0;
              BOOL v79 = v73 != 0;
            }
            while (v76 | v73);
          }
          else
          {
            uint64_t v78 = 0;
          }
          int v83 = v52 < 0x10 || v53;
          int64x2_t v84 = (unsigned __int8 *)(v160 + 8 * v78);
          unsigned int v82 = v50 - v16;
          uint64_t v85 = v161 + 8 * (v50 - v16);
          int64x2_t v86 = (unsigned char *)(v159 + v70);
          if (v47 < 0x10) {
            int v87 = 1;
          }
          else {
            int v87 = v83;
          }
          __src = v86;
          if (v169)
          {
            if (!v87)
            {
              int64x2_t v86 = __dst;
LABEL_123:
              int64x2_t v89 = (float64x2_t *)(v161 + 8 * v82);
              uint64_t v90 = a11;
              unint64_t v91 = (unint64_t)v86;
              int64x2_t v92 = (char *)(v160 + 8 * v78);
              goto LABEL_157;
            }
            char v88 = v52;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v52) = v88;
            int64x2_t v86 = __dst;
            LOBYTE(v47) = v165;
            uint64_t result = v164;
          }
          else if (!v87)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v171 = v86;
          unsigned __int8 v179 = v52;
          unsigned __int8 v180 = v47;
          unsigned int v175 = v154;
          unsigned int v176 = v50 - v48;
          uint64_t v172 = v84;
          uint64_t v173 = v85;
          uint64_t v174 = a11;
          unsigned int v177 = v162;
          unsigned int v178 = v51;
          if (v53)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v93 = (uint64_t)&v86[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 128, (uint64_t)v86, *v84, v43)];
          uint64_t v95 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 128, v93, v84[1], v94);
          uint64_t v97 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 128, v95, v84[2], v96);
          uint64_t v99 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v185, 128, v97, v84[3], v98);
          uint64_t v101 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v186, 128, v99, v84[4], v100);
          uint64_t v103 = v101
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v188, 128, v101, v84[5], v102);
          uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v187, 128, v103, v84[6], v104);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v189, 128, v103 + v105, v84[7], v106);
          uint64_t v107 = v177;
          if (v177 && v178)
          {
            uint64_t v108 = 0;
            unint64_t v109 = (unint64_t)v175 << 7;
            uint64_t v110 = 8 * v176;
            int64x2_t v111 = (char *)v182 + v109 + v110;
            uint64_t v112 = v173;
            uint64_t v113 = v174;
            unint64_t v114 = 8 * v178;
            if (v114 <= 1) {
              unint64_t v115 = 1;
            }
            else {
              unint64_t v115 = 8 * v178;
            }
            unint64_t v116 = v109 + v110;
            int64x2_t v117 = (char *)v182 + v109 + v110;
            if (v115) {
              BOOL v118 = (v115 - 1) >> 32 == 0;
            }
            else {
              BOOL v118 = 0;
            }
            char v119 = !v118;
            uint64_t v120 = v115 & 0x7FFFFFFE0;
            uint64_t v121 = v115 & 0x7FFFFFFF8;
            int64x2_t v122 = (char *)&v182[1] + v116;
            int64x2_t v123 = (long long *)(v173 + 16);
            uint64_t v124 = v111;
            uint64_t v125 = v173;
            do
            {
              uint64_t v126 = (char *)(v112 + v113 * v108);
              int32x4_t v127 = &v111[128 * v108];
              if ((unint64_t)(&v117[128 * v108] - v126) < 0x20) {
                char v128 = 1;
              }
              else {
                char v128 = v119;
              }
              if (v128)
              {
                int v129 = 0;
                goto LABEL_153;
              }
              if (v115 >= 0x20)
              {
                int64x2_t v131 = v123;
                int64x2_t v132 = v122;
                uint64_t v133 = v115 & 0x7FFFFFFE0;
                do
                {
                  long long v134 = *v131;
                  *(v132 - 1) = *(v131 - 1);
                  *int64x2_t v132 = v134;
                  v132 += 2;
                  v131 += 2;
                  v133 -= 32;
                }
                while (v133);
                if (v115 == v120) {
                  goto LABEL_136;
                }
                uint64_t v130 = v115 & 0x7FFFFFFE0;
                if ((v115 & 0x18) == 0)
                {
                  v126 += v120;
                  v127 += v120;
                  int v129 = v115 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v130 = 0;
              }
              v127 += v121;
              unint64_t v135 = v130 - (v115 & 0x7FFFFFFF8);
              uint64_t v136 = (uint64_t *)(v125 + v130);
              unsigned int v137 = &v124[v130];
              do
              {
                uint64_t v138 = *v136++;
                *(void *)unsigned int v137 = v138;
                v137 += 8;
                v135 += 8;
              }
              while (v135);
              if (v115 == v121) {
                goto LABEL_136;
              }
              v126 += v121;
              int v129 = v115 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v139 = v129 + 1;
              do
              {
                char v140 = *v126++;
                *v127++ = v140;
              }
              while (v114 > v139++);
LABEL_136:
              ++v108;
              v122 += 128;
              int64x2_t v123 = (long long *)((char *)v123 + v113);
              v125 += v113;
              v124 += 128;
            }
            while (v108 != v107);
          }
          unint64_t v91 = (unint64_t)v171;
          int64x2_t v92 = (char *)v172;
          unsigned int v52 = v179;
          unsigned int v47 = v180;
          int64x2_t v89 = v182;
          uint64_t v90 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v89, v90, v91, v92, v52, v47);
LABEL_158:
          unsigned int v16 = v156;
          if (v169) {
            memcpy(__src, v86, 0x800uLL);
          }
          BOOL v29 = v46++ == v157 >> 4;
          uint64_t result = v164;
          unsigned int v47 = v165;
        }
        while (!v29);
        BOOL v29 = v28++ == v147;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v225 = v21;
  uint64_t v226 = v22;
  uint64_t v209 = v23;
  uint64_t v24 = v12;
  uint64_t v254 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v229 = v14;
  unsigned int v211 = v14 + a10 - 1;
  uint64_t v230 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v210 = v211 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v233 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v224 = 0;
LABEL_32:
      unsigned int v220 = v35 - 4;
      unsigned int v215 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v208 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v224 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v224 = 0;
  unsigned int v208 = 0;
  unsigned int v215 = 0;
  unsigned int v220 = 0;
LABEL_33:
  if (v28 <= v210)
  {
    unsigned int v223 = v16 + a9 - 1;
    unsigned int v207 = v16 >> 4;
    if (v16 >> 4 <= v223 >> 4)
    {
      unsigned int v232 = v26 >> 4;
      unsigned int v206 = v27 >> 4;
      int v231 = (v26 & 0xF) + 1;
      int v205 = (v27 & 0xF) + 1;
      int v204 = ~(-1 << v215);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      *(int8x8_t *)&v43.f64[0] = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      int v218 = LODWORD(v43.f64[0]) | HIDWORD(v43.f64[0]);
      float64_t v214 = v43.f64[0];
      BOOL v212 = LODWORD(v43.f64[0]) != 0;
      BOOL v213 = HIDWORD(v43.f64[0]) != 0;
      uint64_t v44 = a11;
      uint64_t v45 = 4 * a11;
      uint64_t v46 = 2 * a11;
      unsigned int v222 = v16;
      do
      {
        unsigned int v47 = (16 * v28) | 0xF;
        if (16 * v28 <= v229) {
          int v48 = v229;
        }
        else {
          int v48 = 16 * v28;
        }
        if (v211 < v47) {
          unsigned int v47 = v211;
        }
        int v219 = v48 - 16 * v28;
        int v228 = v47 - v48 + 1;
        unsigned int v49 = v207;
        if (v28 == v206) {
          unsigned int v50 = v205;
        }
        else {
          unsigned int v50 = 16;
        }
        int v51 = v28 & v204;
        uint64_t v227 = v209 + (v48 - v229) * v44;
        do
        {
          unsigned int v52 = 16 * v49;
          unsigned int v53 = 16 * (v49 + 1) - 1;
          if (16 * v49 <= v16) {
            int v54 = v16;
          }
          else {
            int v54 = 16 * v49;
          }
          if (v223 < v53) {
            unsigned int v53 = v223;
          }
          int v55 = v53 - v54 + 1;
          if (v49 == v232) {
            unsigned int v56 = v231;
          }
          else {
            unsigned int v56 = 16;
          }
          BOOL v57 = 1;
          if (16 * v28 >= v229 && v52 >= v16)
          {
            int v58 = v231;
            if (v49 != v232) {
              int v58 = 16;
            }
            BOOL v57 = v55 != v58 || v228 != v50;
          }
          if (v224)
          {
            if (v220 | v215)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              BOOL v62 = v215 != 0;
              int v63 = 1;
              BOOL v65 = v220 != 0;
              unsigned int v64 = v215;
              unsigned int v66 = v220;
              do
              {
                --v66;
                if (v65) {
                  v61 |= (unint64_t)(v49 & ~(-1 << v220) & v63) << v60++;
                }
                else {
                  unsigned int v66 = 0;
                }
                --v64;
                if (v62) {
                  v61 |= (unint64_t)(v51 & v63) << v60++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v63 *= 2;
                --v60;
                BOOL v62 = v64 != 0;
                BOOL v65 = v66 != 0;
              }
              while (v64 | v66);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v74 = *(void *)(result + 320) * ((v49 >> v220) + (v28 >> v215) * v208) + (v61 << 11);
          }
          else
          {
            if (v218)
            {
              int v67 = 0;
              uint64_t v68 = 0;
              int v69 = 1;
              BOOL v70 = v212;
              BOOL v71 = v213;
              int v73 = LODWORD(v214);
              int v72 = HIDWORD(v214);
              do
              {
                --v72;
                if (v71) {
                  v68 |= (unint64_t)(v69 & v49) << v67++;
                }
                else {
                  int v72 = 0;
                }
                --v73;
                if (v70) {
                  v68 |= (unint64_t)(v69 & v28) << v67++;
                }
                else {
                  int v73 = 0;
                }
                v69 *= 2;
                --v67;
                BOOL v70 = v73 != 0;
                BOOL v71 = v72 != 0;
              }
              while (v73 | v72);
            }
            else
            {
              uint64_t v68 = 0;
            }
            uint64_t v74 = v68 << 11;
          }
          unsigned int v75 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
          }
          unsigned int v78 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v78 <= 1) {
            unsigned int v78 = 1;
          }
          unsigned int v79 = v78 + 15;
          if (v79 < 0x20)
          {
            unsigned int v80 = 0;
            if (!v77)
            {
LABEL_111:
              uint64_t v82 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v80 = 32 - __clz(~(-1 << -(char)__clz((v79 >> 4) - 1)));
            if (!(v80 | v77)) {
              goto LABEL_111;
            }
          }
          int v81 = 0;
          uint64_t v82 = 0;
          BOOL v83 = v77 != 0;
          BOOL v84 = v80 != 0;
          int v85 = 1;
          do
          {
            --v77;
            if (v83) {
              v82 |= (unint64_t)(v85 & v49) << v81++;
            }
            else {
              unsigned int v77 = 0;
            }
            --v80;
            if (v84) {
              v82 |= (unint64_t)(v85 & v28) << v81++;
            }
            else {
              unsigned int v80 = 0;
            }
            v85 *= 2;
            --v81;
            BOOL v84 = v80 != 0;
            BOOL v83 = v77 != 0;
          }
          while (v80 | v77);
LABEL_112:
          int v86 = v56 < 0x10 || v57;
          int v87 = (unsigned __int8 *)(v226 + 8 * v82);
          char v88 = (float64x2_t *)(v227 + 8 * (v54 - v16));
          int64x2_t v89 = (float64x2_t *)(v225 + v74);
          if (v50 < 0x10) {
            int v90 = 1;
          }
          else {
            int v90 = v86;
          }
          if (v233)
          {
            if (v90)
            {
              unint64_t v91 = v89;
              int v92 = v55;
              BOOL v93 = v57;
              int v216 = v54;
              memcpy(__dst, v89, sizeof(__dst));
              int v54 = v216;
              BOOL v57 = v93;
              unsigned int v52 = 16 * v49;
              uint64_t v44 = a11;
              int v55 = v92;
              int8x8_t v94 = (float64x2_t *)__dst;
              int64x2_t v89 = v91;
              uint64_t result = v230;
LABEL_122:
              uint64_t v221 = v89;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int64x2_t v235 = v94;
              unsigned __int8 v243 = v56;
              unsigned __int8 v244 = v50;
              unsigned int v239 = v219;
              unsigned int v240 = v54 - v52;
              int64x2_t v236 = v87;
              int64x2_t v237 = v88;
              uint64_t v238 = v44;
              unsigned int v241 = v228;
              unsigned int v242 = v55;
              if (v57)
              {
                uint64_t v95 = v94;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                int8x8_t v94 = v95;
                uint64_t result = v230;
                unsigned int v16 = v222;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                int v51 = v28 & v204;
                unsigned int v96 = v49 + 1;
                goto LABEL_184;
              }
              int v217 = v94;
              uint64_t v127 = (uint64_t)v94
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 128, (uint64_t)v94, *v87, *(int8x8_t *)&v43.f64[0]);
              uint64_t v129 = v127
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v248, 128, v127, v87[1], v128);
              uint64_t v131 = v129
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v247, 128, v129, v87[2], v130);
              uint64_t v133 = v131
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v249, 128, v131, v87[3], v132);
              uint64_t v135 = v133
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v250, 128, v133, v87[4], v134);
              uint64_t v137 = v135
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v252, 128, v135, v87[5], v136);
              uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v251, 128, v137, v87[6], v138);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v253, 128, v137 + v139, v87[7], v140);
              uint64_t v141 = v241;
              if (!v241 || !v242)
              {
LABEL_171:
                uint64_t v176 = 0;
                unsigned int v177 = v235;
                unsigned int v178 = (char *)v236;
                int v179 = v243;
                int v180 = v244;
                unsigned int v16 = v222;
                uint64_t result = v230;
                uint64_t v46 = 2 * a11;
                int v51 = v28 & v204;
                unsigned int v96 = v49 + 1;
                int8x8_t v94 = v217;
                do
                {
                  uint64_t v199 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v176 + 1];
                  uint64_t v200 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v176];
                  unsigned int v201 = (v179 - 8 * v200) & ~((v179 - 8 * (int)v200) >> 31);
                  if (v201 >= 8) {
                    unsigned int v201 = 8;
                  }
                  unsigned int v202 = (v180 - 4 * v199) & ~((v180 - 4 * (int)v199) >> 31);
                  if (v202 >= 4) {
                    unsigned int v202 = 4;
                  }
                  if (v201) {
                    BOOL v203 = v202 == 0;
                  }
                  else {
                    BOOL v203 = 1;
                  }
                  if (v203)
                  {
                    char v198 = 0;
                  }
                  else
                  {
                    int64x2_t v181 = &v246[32 * v199 + 4 * v200];
                    float64x2_t v182 = v181[2];
                    float64x2_t v183 = v181[10];
                    float64x2_t v184 = v181[3];
                    float64x2_t v185 = v181[11];
                    float64x2_t v186 = *v181;
                    float64x2_t v187 = v181[8];
                    float64x2_t v188 = v181[1];
                    float64x2_t v43 = v181[16];
                    float64x2_t v189 = v181[17];
                    float64x2_t v190 = v181[18];
                    float64x2_t v191 = v181[19];
                    float64x2_t v192 = v181[9];
                    v181 += 24;
                    float64x2_t v193 = v181[1];
                    float64x2_t v194 = v181[2];
                    float64x2_t v195 = v181[3];
                    float64x2_t v196 = *v181;
                    *unsigned int v177 = v186;
                    v177[1] = v187;
                    v177[2] = v188;
                    v177[3] = v192;
                    _OWORD v177[4] = v43;
                    v177[5] = v196;
                    v177[6] = v189;
                    v177[7] = v193;
                    v177[8] = v182;
                    v177[9] = v183;
                    v177[10] = v184;
                    v177[11] = v185;
                    uint64_t v197 = v177 + 12;
                    v177 += 16;
                    char v198 = -1;
                    *uint64_t v197 = v190;
                    v197[1] = v194;
                    v197[2] = v191;
                    v197[3] = v195;
                  }
                  *v178++ = v198;
                  v176 += 2;
                }
                while (v176 != 16);
                uint64_t v45 = 4 * a11;
LABEL_184:
                int64x2_t v89 = v221;
                if (v233) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v142 = 0;
              unint64_t v143 = (unint64_t)v239 << 7;
              uint64_t v144 = 8 * v240;
              unsigned int v145 = (char *)v246 + v143 + v144;
              uint64_t v146 = v237;
              uint64_t v147 = v238;
              unint64_t v148 = 8 * v242;
              if (v148 <= 1) {
                unint64_t v149 = 1;
              }
              else {
                unint64_t v149 = 8 * v242;
              }
              unint64_t v150 = v143 + v144;
              int8x8_t v151 = (char *)v246 + v143 + v144;
              if (v149) {
                BOOL v152 = (v149 - 1) >> 32 == 0;
              }
              else {
                BOOL v152 = 0;
              }
              char v153 = !v152;
              uint64_t v154 = v149 & 0x7FFFFFFE0;
              uint64_t v155 = v149 & 0x7FFFFFFF8;
              unsigned int v156 = (float64x2_t *)((char *)&v246[1] + v150);
              unsigned int v157 = v237 + 1;
              BOOL v158 = v145;
              uint64_t v159 = v237;
              while (2)
              {
                uint64_t v160 = (char *)v146 + v147 * v142;
                uint64_t v161 = &v145[128 * v142];
                if ((unint64_t)(&v151[128 * v142] - v160) < 0x20) {
                  char v162 = 1;
                }
                else {
                  char v162 = v153;
                }
                if (v162)
                {
                  int v163 = 0;
LABEL_168:
                  unsigned int v173 = v163 + 1;
                  do
                  {
                    char v174 = *v160++;
                    *v161++ = v174;
                  }
                  while (v148 > v173++);
                }
                else
                {
                  if (v149 >= 0x20)
                  {
                    unsigned int v165 = v157;
                    int v166 = v156;
                    uint64_t v167 = v149 & 0x7FFFFFFE0;
                    do
                    {
                      float64x2_t v43 = v165[-1];
                      float64x2_t v168 = *v165;
                      v166[-1] = v43;
                      *int v166 = v168;
                      v166 += 2;
                      v165 += 2;
                      v167 -= 32;
                    }
                    while (v167);
                    if (v149 == v154) {
                      goto LABEL_151;
                    }
                    uint64_t v164 = v149 & 0x7FFFFFFE0;
                    if ((v149 & 0x18) == 0)
                    {
                      v160 += v154;
                      v161 += v154;
                      int v163 = v149 & 0xFFFFFFE0;
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    uint64_t v164 = 0;
                  }
                  v161 += v155;
                  unint64_t v169 = v164 - (v149 & 0x7FFFFFFF8);
                  int64x2_t v170 = (double *)((char *)v159->f64 + v164);
                  int64x2_t v171 = &v158[v164];
                  do
                  {
                    float64_t v172 = *v170++;
                    v43.f64[0] = v172;
                    *(float64_t *)int64x2_t v171 = v172;
                    v171 += 8;
                    v169 += 8;
                  }
                  while (v169);
                  if (v149 != v155)
                  {
                    v160 += v155;
                    int v163 = v149 & 0xFFFFFFF8;
                    goto LABEL_168;
                  }
                }
LABEL_151:
                ++v142;
                v156 += 8;
                unsigned int v157 = (float64x2_t *)((char *)v157 + v147);
                uint64_t v159 = (float64x2_t *)((char *)v159 + v147);
                v158 += 128;
                if (v142 == v141) {
                  goto LABEL_171;
                }
                continue;
              }
            }
            int8x8_t v94 = (float64x2_t *)__dst;
          }
          else
          {
            int8x8_t v94 = v89;
            if (v90) {
              goto LABEL_122;
            }
          }
          uint64_t v97 = 0;
          int8x8_t v98 = v94;
          do
          {
            uint64_t v122 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v97 + 1];
            uint64_t v123 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v97];
            unsigned int v124 = (v56 - 8 * v123) & ~((int)(v56 - 8 * v123) >> 31);
            if (v124 >= 8) {
              unsigned int v124 = 8;
            }
            unsigned int v125 = (v50 - 4 * v122) & ~((int)(v50 - 4 * v122) >> 31);
            if (v125 >= 4) {
              unsigned int v125 = 4;
            }
            if (v124) {
              BOOL v126 = v125 == 0;
            }
            else {
              BOOL v126 = 1;
            }
            if (v126)
            {
              char v121 = 0;
            }
            else
            {
              uint64_t v99 = (long long *)((char *)&v88[4 * v123] + v45 * v122);
              int8x8_t v100 = (long long *)((char *)v99 + v44);
              long long v102 = *v99;
              float64x2_t v103 = (float64x2_t)v99[1];
              long long v104 = v99[2];
              long long v105 = v99[3];
              uint64_t v101 = (long long *)((char *)v99 + v46);
              long long v106 = v100[2];
              long long v107 = v100[3];
              float64x2_t v108 = (float64x2_t)v102;
              long long v109 = *v100;
              long long v111 = *v101;
              long long v112 = v101[1];
              long long v113 = v101[2];
              long long v114 = v101[3];
              uint64_t v110 = (float64x2_t *)((char *)v101 + v44);
              float64x2_t v115 = v103;
              long long v116 = v100[1];
              float64x2_t v43 = *v110;
              float64x2_t v117 = v110[1];
              float64x2_t v118 = v110[2];
              float64x2_t v119 = v110[3];
              float64x2_t v120 = *v110;
              *int8x8_t v98 = v108;
              v98[1] = (float64x2_t)v109;
              v98[2] = v115;
              v98[3] = (float64x2_t)v116;
              v98[4] = (float64x2_t)v111;
              v98[5] = v120;
              v98[6] = (float64x2_t)v112;
              v98[7] = v117;
              v98[8] = (float64x2_t)v104;
              v98[9] = (float64x2_t)v106;
              v98[10] = (float64x2_t)v105;
              v98[11] = (float64x2_t)v107;
              v98[12] = (float64x2_t)v113;
              v98[13] = v118;
              v98[14] = (float64x2_t)v114;
              v98[15] = v119;
              v98 += 16;
              char v121 = -1;
            }
            *v87++ = v121;
            v97 += 2;
          }
          while (v97 != 16);
          unsigned int v16 = v222;
          int v51 = v28 & v204;
          unsigned int v96 = v49 + 1;
          if (v233)
          {
LABEL_47:
            memcpy(v89, v94, 0x800uLL);
            uint64_t v46 = 2 * a11;
            uint64_t v45 = 4 * a11;
            uint64_t result = v230;
          }
LABEL_48:
          BOOL v29 = v49 == v223 >> 4;
          unsigned int v49 = v96;
        }
        while (!v29);
        BOOL v29 = v28++ == v210;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v158 = v21;
  uint64_t v159 = v22;
  uint64_t v148 = v23;
  uint64_t v24 = v12;
  uint64_t v189 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v163 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v147 = v14 + a10 - 1;
  unsigned int v149 = v147 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v164 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v164;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v168 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v164;
  BOOL v157 = isLevelTiled;
  if (v26 <= v149)
  {
    unsigned int v156 = v16 + a9 - 1;
    unsigned int v146 = v16 >> 4;
    if (v16 >> 4 <= v156 >> 4)
    {
      unsigned int v143 = v20 - 1;
      unsigned int v145 = (v18 - 1) >> 4;
      int v166 = ((v20 - 1) & 0xF) + 1;
      unsigned int v167 = (v20 - 1) >> 4;
      int v144 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v154 = v38.i32[0] | v38.i32[1];
      int8x8_t v153 = v38;
      BOOL v151 = v38.i32[0] != 0;
      BOOL v152 = v38.i32[1] != 0;
      unint64_t v142 = 8 * v28 * (unint64_t)v27;
      unsigned int v155 = v16;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v163) {
          int v40 = v163;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v146;
        if (v147 < v39) {
          unsigned int v39 = v147;
        }
        int v150 = v40 - 16 * v26;
        int v161 = v39 - v40 + 1;
        unsigned int v162 = 16 * v26;
        if (v26 == v145) {
          unsigned int v42 = v144;
        }
        else {
          unsigned int v42 = 16;
        }
        uint64_t v160 = v148 + (v40 - v163) * a11;
        unsigned int v165 = v42;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v156 < v44) {
            unsigned int v44 = v156;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v167) {
            unsigned int v47 = v166;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v162 >= v163 && v43 >= v16)
          {
            int v49 = v166;
            if (v41 != v167) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v161 != v42;
          }
          if (v157)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v142 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v133 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v134 = 0;
              if (v73) {
                goto LABEL_158;
              }
LABEL_147:
              unsigned int v135 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v135 | v134) {
                goto LABEL_148;
              }
LABEL_159:
              uint64_t v137 = 0;
            }
            else
            {
              unsigned int v134 = 32 - __clz(~(-1 << -(char)__clz(v133)));
              if ((v73 & 1) == 0) {
                goto LABEL_147;
              }
LABEL_158:
              unsigned int v135 = 0;
              if (!v134) {
                goto LABEL_159;
              }
LABEL_148:
              int v136 = 0;
              uint64_t v137 = 0;
              int v138 = v41 & v133;
              BOOL v139 = v134 != 0;
              BOOL v140 = v135 != 0;
              int v141 = 1;
              do
              {
                --v134;
                if (v139) {
                  v137 |= (unint64_t)(v141 & v138) << v136++;
                }
                else {
                  unsigned int v134 = 0;
                }
                --v135;
                if (v140) {
                  v137 |= (unint64_t)(v141 & v26 & ((v74 >> 4) - 1)) << v136++;
                }
                else {
                  unsigned int v135 = 0;
                }
                v141 *= 2;
                --v136;
                BOOL v140 = v135 != 0;
                BOOL v139 = v134 != 0;
              }
              while (v135 | v134);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v162 / v74 * ((v70 + v143) / v70)) << 14) + (v137 << 11);
            goto LABEL_59;
          }
          if (v154)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v151;
            BOOL v55 = v152;
            __int32 v57 = v153.i32[0];
            __int32 v56 = v153.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_59:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_81:
              uint64_t v66 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_81;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_82:
          int v75 = v47 < 0x10 || v48;
          unsigned int v76 = (char *)(v159 + 8 * v66);
          unint64_t v77 = v160 + 8 * (v45 - v16);
          unsigned int v78 = (void *)(v158 + v58);
          if (v42 < 0x10) {
            int v79 = 1;
          }
          else {
            int v79 = v75;
          }
          if (v168)
          {
            if (!v79)
            {
              BOOL v83 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v77, a11, (unint64_t)v83, v76, v47, v42);
              unsigned int v16 = v155;
              goto LABEL_129;
            }
            char v80 = v47;
            int v81 = v46;
            int v82 = v45;
            memcpy(__dst, v78, sizeof(__dst));
            int v45 = v82;
            BOOL v83 = __dst;
            int v46 = v81;
            unsigned int v43 = 16 * v41;
            LOBYTE(v47) = v80;
            LOBYTE(v42) = v165;
            uint64_t v36 = v164;
          }
          else
          {
            BOOL v83 = v78;
            if (!v79) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int64x2_t v170 = v83;
          unsigned __int8 v178 = v47;
          unsigned __int8 v179 = v42;
          unsigned int v174 = v150;
          unsigned int v175 = v45 - v43;
          int64x2_t v171 = v76;
          unint64_t v172 = v77;
          uint64_t v173 = a11;
          unsigned int v176 = v161;
          unsigned int v177 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
            unsigned int v16 = v155;
            goto LABEL_129;
          }
          uint64_t v84 = (uint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 128, (uint64_t)v83, *v76, v38)];
          uint64_t v86 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v183, 128, v84, v76[1], v85);
          uint64_t v88 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 128, v86, v76[2], v87);
          uint64_t v90 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v184, 128, v88, v76[3], v89);
          uint64_t v92 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v185, 128, v90, v76[4], v91);
          uint64_t v94 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v187, 128, v92, v76[5], v93);
          uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v186, 128, v94, v76[6], v95);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v188, 128, v94 + v96, v76[7], v97);
          uint64_t v98 = v176;
          unsigned int v16 = v155;
          if (v176 && v177)
          {
            uint64_t v99 = 0;
            unint64_t v100 = (unint64_t)v174 << 7;
            uint64_t v101 = 8 * v175;
            long long v102 = (char *)v181 + v100 + v101;
            unint64_t v103 = v172;
            uint64_t v104 = v173;
            unint64_t v105 = 8 * v177;
            if (v105 <= 1) {
              unint64_t v106 = 1;
            }
            else {
              unint64_t v106 = 8 * v177;
            }
            unint64_t v107 = v100 + v101;
            float64x2_t v108 = (char *)v181 + v100 + v101;
            if (v106) {
              BOOL v109 = (v106 - 1) >> 32 == 0;
            }
            else {
              BOOL v109 = 0;
            }
            char v110 = !v109;
            uint64_t v111 = v106 & 0x7FFFFFFE0;
            uint64_t v112 = v106 & 0x7FFFFFFF8;
            long long v113 = (char *)&v181[1] + v107;
            long long v114 = (long long *)(v172 + 16);
            float64x2_t v115 = v102;
            unint64_t v116 = v172;
            do
            {
              float64x2_t v117 = (char *)(v103 + v104 * v99);
              float64x2_t v118 = &v102[128 * v99];
              if ((unint64_t)(&v108[128 * v99] - v117) < 0x20) {
                char v119 = 1;
              }
              else {
                char v119 = v110;
              }
              if (v119)
              {
                int v120 = 0;
                goto LABEL_125;
              }
              if (v106 >= 0x20)
              {
                uint64_t v122 = v114;
                uint64_t v123 = v113;
                uint64_t v124 = v106 & 0x7FFFFFFE0;
                do
                {
                  long long v125 = *v122;
                  *(v123 - 1) = *(v122 - 1);
                  *uint64_t v123 = v125;
                  v123 += 2;
                  v122 += 2;
                  v124 -= 32;
                }
                while (v124);
                if (v106 == v111) {
                  goto LABEL_108;
                }
                uint64_t v121 = v106 & 0x7FFFFFFE0;
                if ((v106 & 0x18) == 0)
                {
                  v117 += v111;
                  v118 += v111;
                  int v120 = v106 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v121 = 0;
              }
              v118 += v112;
              unint64_t v126 = v121 - (v106 & 0x7FFFFFFF8);
              uint64_t v127 = (uint64_t *)(v116 + v121);
              int8x8_t v128 = &v115[v121];
              do
              {
                uint64_t v129 = *v127++;
                *(void *)int8x8_t v128 = v129;
                v128 += 8;
                v126 += 8;
              }
              while (v126);
              if (v106 == v112) {
                goto LABEL_108;
              }
              v117 += v112;
              int v120 = v106 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v130 = v120 + 1;
              do
              {
                char v131 = *v117++;
                *v118++ = v131;
              }
              while (v105 > v130++);
LABEL_108:
              ++v99;
              v113 += 128;
              long long v114 = (long long *)((char *)v114 + v104);
              v116 += v104;
              v115 += 128;
            }
            while (v99 != v98);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v181, 128, (unint64_t)v170, v171, v178, v179);
LABEL_129:
          if (v168) {
            memcpy(v78, v83, 0x800uLL);
          }
          BOOL v31 = v41++ == v156 >> 4;
          uint64_t v36 = v164;
          unsigned int v42 = v165;
        }
        while (!v31);
        BOOL v31 = v26++ == v149;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v222 = v21;
  uint64_t v223 = v22;
  uint64_t v209 = v23;
  uint64_t v24 = v12;
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v227 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v208 = v14 + a10 - 1;
  unsigned int v210 = v208 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v228 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v231 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v221 = isLevelTiled;
  if (v25 <= v210)
  {
    unsigned int v220 = v16 + a9 - 1;
    unsigned int v207 = v16 >> 4;
    if (v16 >> 4 <= v220 >> 4)
    {
      unsigned int v204 = v20 - 1;
      unsigned int v230 = (v20 - 1) >> 4;
      int v229 = ((v20 - 1) & 0xF) + 1;
      int v205 = ((v18 - 1) & 0xF) + 1;
      unsigned int v206 = (v18 - 1) >> 4;
      unint64_t v35 = v27 * (unint64_t)v26;
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      *(int8x8_t *)&v37.f64[0] = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v36, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v36));
      int v218 = LODWORD(v37.f64[0]) | HIDWORD(v37.f64[0]);
      float64_t v216 = v37.f64[0];
      BOOL v214 = LODWORD(v37.f64[0]) != 0;
      BOOL v215 = HIDWORD(v37.f64[0]) != 0;
      uint64_t v38 = a11;
      unint64_t v203 = 8 * v35;
      uint64_t v39 = 4 * a11;
      uint64_t v40 = 2 * a11;
      unsigned int v219 = v16;
      do
      {
        unsigned int v41 = (16 * v25) | 0xF;
        if (16 * v25 <= v227) {
          int v42 = v227;
        }
        else {
          int v42 = 16 * v25;
        }
        unsigned int v43 = v207;
        if (v208 < v41) {
          unsigned int v41 = v208;
        }
        int v213 = v42 - 16 * v25;
        int v225 = v41 - v42 + 1;
        unsigned int v226 = 16 * v25;
        if (v25 == v206) {
          unsigned int v44 = v205;
        }
        else {
          unsigned int v44 = 16;
        }
        uint64_t v224 = v209 + (v42 - v227) * v38;
        unsigned int v211 = v44;
        do
        {
          unsigned int v45 = 16 * v43;
          unsigned int v46 = 16 * (v43 + 1) - 1;
          if (16 * v43 <= v16) {
            int v47 = v16;
          }
          else {
            int v47 = 16 * v43;
          }
          if (v220 < v46) {
            unsigned int v46 = v220;
          }
          int v48 = v46 - v47 + 1;
          if (v43 == v230) {
            unsigned int v49 = v229;
          }
          else {
            unsigned int v49 = 16;
          }
          BOOL v50 = 1;
          if (v226 >= v227 && v45 >= v16)
          {
            int v51 = v229;
            if (v43 != v230) {
              int v51 = 16;
            }
            BOOL v50 = v48 != v51 || v225 != v44;
          }
          if (v221)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v203 >> (*(unsigned char *)(v34 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  unsigned int v72 = 16;
                  char v75 = 1;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v194 = (v72 >> 4) - 1;
            if (v74)
            {
              unsigned int v195 = 0;
              if (v75) {
                goto LABEL_183;
              }
LABEL_172:
              unsigned int v196 = 32 - __clz(~(-1 << -(char)__clz(((v76 + 15) >> 4) - 1)));
              if (v196 | v195) {
                goto LABEL_173;
              }
LABEL_184:
              uint64_t v198 = 0;
            }
            else
            {
              unsigned int v195 = 32 - __clz(~(-1 << -(char)__clz(v194)));
              if ((v75 & 1) == 0) {
                goto LABEL_172;
              }
LABEL_183:
              unsigned int v196 = 0;
              if (!v195) {
                goto LABEL_184;
              }
LABEL_173:
              int v197 = 0;
              uint64_t v198 = 0;
              int v199 = v43 & v194;
              BOOL v200 = v195 != 0;
              BOOL v201 = v196 != 0;
              int v202 = 1;
              do
              {
                --v195;
                if (v200) {
                  v198 |= (unint64_t)(v202 & v199) << v197++;
                }
                else {
                  unsigned int v195 = 0;
                }
                --v196;
                if (v201) {
                  v198 |= (unint64_t)(v202 & v25 & ((v76 >> 4) - 1)) << v197++;
                }
                else {
                  unsigned int v196 = 0;
                }
                v202 *= 2;
                --v197;
                BOOL v201 = v196 != 0;
                BOOL v200 = v195 != 0;
              }
              while (v196 | v195);
            }
            unint64_t v60 = ((unint64_t)(v45 / v72 + v226 / v76 * ((v72 + v204) / v72)) << 14) + (v198 << 11);
            goto LABEL_59;
          }
          if (v218)
          {
            int v53 = 0;
            uint64_t v54 = 0;
            int v55 = 1;
            BOOL v56 = v214;
            BOOL v57 = v215;
            int v59 = LODWORD(v216);
            int v58 = HIDWORD(v216);
            do
            {
              --v58;
              if (v57) {
                v54 |= (unint64_t)(v55 & v43) << v53++;
              }
              else {
                int v58 = 0;
              }
              --v59;
              if (v56) {
                v54 |= (unint64_t)(v55 & v25) << v53++;
              }
              else {
                int v59 = 0;
              }
              v55 *= 2;
              --v53;
              BOOL v56 = v59 != 0;
              BOOL v57 = v58 != 0;
            }
            while (v59 | v58);
          }
          else
          {
            uint64_t v54 = 0;
          }
          unint64_t v60 = v54 << 11;
LABEL_59:
          unsigned int v61 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20) {
            unsigned int v63 = 0;
          }
          else {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
          }
          unsigned int v64 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20)
          {
            unsigned int v66 = 0;
            if (!v63)
            {
LABEL_81:
              uint64_t v68 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
            if (!(v66 | v63)) {
              goto LABEL_81;
            }
          }
          int v67 = 0;
          uint64_t v68 = 0;
          BOOL v69 = v63 != 0;
          BOOL v70 = v66 != 0;
          int v71 = 1;
          do
          {
            --v63;
            if (v69) {
              v68 |= (unint64_t)(v71 & v43) << v67++;
            }
            else {
              unsigned int v63 = 0;
            }
            --v66;
            if (v70) {
              v68 |= (unint64_t)(v71 & v25) << v67++;
            }
            else {
              unsigned int v66 = 0;
            }
            v71 *= 2;
            --v67;
            BOOL v70 = v66 != 0;
            BOOL v69 = v63 != 0;
          }
          while (v66 | v63);
LABEL_82:
          int v77 = v49 < 0x10 || v50;
          unsigned int v78 = (unsigned __int8 *)(v223 + 8 * v68);
          int v79 = (float64x2_t *)(v224 + 8 * (v47 - v16));
          char v80 = (void *)(v222 + v60);
          if (v44 < 0x10) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          if (v231)
          {
            if (!v81)
            {
              int8x8_t v85 = __dst;
LABEL_96:
              uint64_t v87 = 0;
              uint64_t v88 = v85;
              do
              {
                uint64_t v112 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87 + 1];
                uint64_t v113 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87];
                unsigned int v114 = (v49 - 8 * v113) & ~((int)(v49 - 8 * v113) >> 31);
                if (v114 >= 8) {
                  unsigned int v114 = 8;
                }
                unsigned int v115 = (v44 - 4 * v112) & ~((int)(v44 - 4 * v112) >> 31);
                if (v115 >= 4) {
                  unsigned int v115 = 4;
                }
                if (v114) {
                  BOOL v116 = v115 == 0;
                }
                else {
                  BOOL v116 = 1;
                }
                if (v116)
                {
                  char v111 = 0;
                }
                else
                {
                  int8x8_t v89 = (long long *)((char *)&v79[4 * v113] + v39 * v112);
                  uint64_t v90 = (long long *)((char *)v89 + v38);
                  long long v92 = *v89;
                  long long v93 = v89[1];
                  long long v94 = v89[2];
                  long long v95 = v89[3];
                  int8x8_t v91 = (long long *)((char *)v89 + v40);
                  long long v96 = v90[2];
                  long long v97 = v90[3];
                  long long v98 = v92;
                  long long v99 = *v90;
                  long long v101 = *v91;
                  long long v102 = v91[1];
                  long long v103 = v91[2];
                  long long v104 = v91[3];
                  unint64_t v100 = (float64x2_t *)((char *)v91 + v38);
                  long long v105 = v93;
                  long long v106 = v90[1];
                  float64x2_t v37 = *v100;
                  float64x2_t v107 = v100[1];
                  float64x2_t v108 = v100[2];
                  float64x2_t v109 = v100[3];
                  float64x2_t v110 = *v100;
                  *uint64_t v88 = v98;
                  v88[1] = v99;
                  v88[2] = v105;
                  v88[3] = v106;
                  v88[4] = v101;
                  v88[5] = v110;
                  v88[6] = v102;
                  v88[7] = v107;
                  v88[8] = v94;
                  v88[9] = v96;
                  v88[10] = v95;
                  v88[11] = v97;
                  v88[12] = v103;
                  v88[13] = v108;
                  v88[14] = v104;
                  v88[15] = v109;
                  v88 += 16;
                  char v111 = -1;
                }
                *v78++ = v111;
                v87 += 2;
              }
              while (v87 != 16);
              unsigned int v16 = v219;
              if (v231) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            int v82 = v80;
            int v83 = v48;
            BOOL v84 = v50;
            memcpy(__dst, v80, sizeof(__dst));
            int8x8_t v85 = __dst;
            char v80 = v82;
            BOOL v50 = v84;
            uint64_t v38 = a11;
            unsigned int v44 = v211;
            unsigned int v45 = 16 * v43;
            int v48 = v83;
            uint64_t v34 = v228;
          }
          else
          {
            int8x8_t v85 = v80;
            if (!v81) {
              goto LABEL_96;
            }
          }
          int v217 = v80;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          int v233 = (float64x2_t *)v85;
          unsigned __int8 v241 = v49;
          unsigned __int8 v242 = v44;
          unsigned int v237 = v213;
          unsigned int v238 = v47 - v45;
          int v234 = v78;
          int64x2_t v235 = v79;
          uint64_t v236 = v38;
          unsigned int v239 = v225;
          unsigned int v240 = v48;
          if (v50)
          {
            uint64_t v86 = v85;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
            int8x8_t v85 = v86;
            uint64_t v34 = v228;
            unsigned int v16 = v219;
            uint64_t v40 = 2 * a11;
            uint64_t v39 = 4 * a11;
            char v80 = v217;
            if (!v231) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v80, v85, 0x800uLL);
            uint64_t v40 = 2 * a11;
            uint64_t v39 = 4 * a11;
            uint64_t v34 = v228;
            goto LABEL_27;
          }
          BOOL v212 = v85;
          uint64_t v117 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 128, (uint64_t)v85, *v78, *(int8x8_t *)&v37.f64[0])];
          uint64_t v119 = v117
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 128, v117, v78[1], v118);
          uint64_t v121 = v119
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v245, 128, v119, v78[2], v120);
          uint64_t v123 = v121
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v247, 128, v121, v78[3], v122);
          uint64_t v125 = v123
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v248, 128, v123, v78[4], v124);
          uint64_t v127 = v125
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v250, 128, v125, v78[5], v126);
          uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v249, 128, v127, v78[6], v128);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v251, 128, v127 + v129, v78[7], v130);
          uint64_t v131 = v239;
          if (v239 && v240)
          {
            uint64_t v132 = 0;
            unint64_t v133 = (unint64_t)v237 << 7;
            uint64_t v134 = 8 * v238;
            unsigned int v135 = (char *)v244 + v133 + v134;
            int v136 = v235;
            uint64_t v137 = v236;
            unint64_t v138 = 8 * v240;
            if (v138 <= 1) {
              unint64_t v139 = 1;
            }
            else {
              unint64_t v139 = 8 * v240;
            }
            unint64_t v140 = v133 + v134;
            int v141 = (char *)v244 + v133 + v134;
            if (v139) {
              BOOL v142 = (v139 - 1) >> 32 == 0;
            }
            else {
              BOOL v142 = 0;
            }
            char v143 = !v142;
            uint64_t v144 = v139 & 0x7FFFFFFE0;
            uint64_t v145 = v139 & 0x7FFFFFFF8;
            unsigned int v146 = (float64x2_t *)((char *)&v244[1] + v140);
            unsigned int v147 = v235 + 1;
            uint64_t v148 = v135;
            unsigned int v149 = v235;
            do
            {
              int v150 = (char *)v136 + v137 * v132;
              BOOL v151 = &v135[128 * v132];
              if ((unint64_t)(&v141[128 * v132] - v150) < 0x20) {
                char v152 = 1;
              }
              else {
                char v152 = v143;
              }
              if (v152)
              {
                int v153 = 0;
                goto LABEL_139;
              }
              if (v139 >= 0x20)
              {
                unsigned int v155 = v147;
                unsigned int v156 = v146;
                uint64_t v157 = v139 & 0x7FFFFFFE0;
                do
                {
                  float64x2_t v37 = v155[-1];
                  float64x2_t v158 = *v155;
                  v156[-1] = v37;
                  *unsigned int v156 = v158;
                  v156 += 2;
                  v155 += 2;
                  v157 -= 32;
                }
                while (v157);
                if (v139 == v144) {
                  goto LABEL_122;
                }
                uint64_t v154 = v139 & 0x7FFFFFFE0;
                if ((v139 & 0x18) == 0)
                {
                  v150 += v144;
                  v151 += v144;
                  int v153 = v139 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v154 = 0;
              }
              v151 += v145;
              unint64_t v159 = v154 - (v139 & 0x7FFFFFFF8);
              uint64_t v160 = (double *)((char *)v149->f64 + v154);
              int v161 = &v148[v154];
              do
              {
                float64_t v162 = *v160++;
                v37.f64[0] = v162;
                *(float64_t *)int v161 = v162;
                v161 += 8;
                v159 += 8;
              }
              while (v159);
              if (v139 == v145) {
                goto LABEL_122;
              }
              v150 += v145;
              int v153 = v139 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v163 = v153 + 1;
              do
              {
                char v164 = *v150++;
                *v151++ = v164;
              }
              while (v138 > v163++);
LABEL_122:
              ++v132;
              v146 += 8;
              unsigned int v147 = (float64x2_t *)((char *)v147 + v137);
              unsigned int v149 = (float64x2_t *)((char *)v149 + v137);
              v148 += 128;
            }
            while (v132 != v131);
          }
          uint64_t v166 = 0;
          unsigned int v167 = v233;
          int v168 = (char *)v234;
          int v169 = v241;
          int v170 = v242;
          unsigned int v16 = v219;
          uint64_t v34 = v228;
          uint64_t v40 = 2 * a11;
          uint64_t v39 = 4 * a11;
          char v80 = v217;
          do
          {
            uint64_t v189 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v166 + 1];
            uint64_t v190 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v166];
            unsigned int v191 = (v169 - 8 * v190) & ~((v169 - 8 * (int)v190) >> 31);
            if (v191 >= 8) {
              unsigned int v191 = 8;
            }
            unsigned int v192 = (v170 - 4 * v189) & ~((v170 - 4 * (int)v189) >> 31);
            if (v192 >= 4) {
              unsigned int v192 = 4;
            }
            if (v191) {
              BOOL v193 = v192 == 0;
            }
            else {
              BOOL v193 = 1;
            }
            if (v193)
            {
              char v188 = 0;
            }
            else
            {
              int64x2_t v171 = &v244[32 * v189 + 4 * v190];
              float64x2_t v172 = v171[2];
              float64x2_t v173 = v171[10];
              float64x2_t v174 = v171[3];
              float64x2_t v175 = v171[11];
              float64x2_t v176 = *v171;
              float64x2_t v177 = v171[8];
              float64x2_t v178 = v171[1];
              float64x2_t v37 = v171[16];
              float64x2_t v179 = v171[17];
              float64x2_t v180 = v171[18];
              float64x2_t v181 = v171[19];
              float64x2_t v182 = v171[9];
              v171 += 24;
              float64x2_t v183 = v171[1];
              float64x2_t v184 = v171[2];
              float64x2_t v185 = v171[3];
              float64x2_t v186 = *v171;
              *unsigned int v167 = v176;
              v167[1] = v177;
              int64x2_t v167[2] = v178;
              v167[3] = v182;
              v167[4] = v37;
              v167[5] = v186;
              v167[6] = v179;
              v167[7] = v183;
              v167[8] = v172;
              v167[9] = v173;
              v167[10] = v174;
              v167[11] = v175;
              float64x2_t v187 = v167 + 12;
              v167 += 16;
              char v188 = -1;
              *float64x2_t v187 = v180;
              v187[1] = v184;
              v187[2] = v181;
              v187[3] = v185;
            }
            *v168++ = v188;
            v166 += 2;
          }
          while (v166 != 16);
          int8x8_t v85 = v212;
          if (v231) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v29 = v43++ == v220 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v210;
      }
      while (!v29);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v245 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v194 = a8;
  unsigned int v178 = a8 + a10 - 1;
  uint64_t v195 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v177 = v178 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v199 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v189 = 0;
LABEL_32:
      unsigned int v186 = v27 - 4;
      unsigned int v182 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v175 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v189 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v189 = 0;
  unsigned int v175 = 0;
  unsigned int v182 = 0;
  unsigned int v186 = 0;
LABEL_33:
  if (v20 <= v177)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v174 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v197 = v18 >> 4;
      unsigned int v173 = v19 >> 4;
      int v196 = (v18 & 0xF) + 1;
      int v172 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL)));
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v35.i8))));
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v184 = v37.i32[0] | v37.i32[1];
      BOOL v180 = v37.i32[1] != 0;
      uint64_t v181 = v37.i64[0];
      BOOL v179 = v37.i32[0] != 0;
      unsigned int v187 = a7;
      do
      {
        unsigned int v38 = (16 * v20) | 0xF;
        if (16 * v20 <= v194) {
          int v39 = v194;
        }
        else {
          int v39 = 16 * v20;
        }
        if (v178 < v38) {
          unsigned int v38 = v178;
        }
        int v185 = v39 - 16 * v20;
        int v193 = v38 - v39 + 1;
        unsigned int v40 = v174;
        int v41 = v172;
        if (v20 != v173) {
          int v41 = 16;
        }
        unsigned int v200 = v41;
        uint64_t v42 = v20 & ~(-1 << v182);
        uint64_t v192 = a3 + (v39 - v194) * a11;
        do
        {
          unsigned int v43 = 16 * v40;
          unsigned int v44 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 16 * v40;
          }
          if (v188 < v44) {
            unsigned int v44 = v188;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v197) {
            unsigned int v47 = v196;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (16 * v20 >= v194 && v43 >= a7)
          {
            int v49 = v196;
            if (v40 != v197) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v193 != v200;
          }
          if (v189)
          {
            if (v186 | v182)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v186 != 0;
              BOOL v55 = v182 != 0;
              unsigned int v56 = v186;
              unsigned int v57 = v182;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v186) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v42 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v186) + (v20 >> v182) * v175) + (v52 << 9);
          }
          else
          {
            if (v184)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v179;
              int v63 = HIDWORD(v181);
              int v64 = v181;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_109:
              uint64_t v73 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_109;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_110:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 0x10 || v48;
          int v79 = (char *)(a4 + 8 * v73);
          unint64_t v80 = v192 + 2 * v77;
          int v81 = (int8x16_t *)(a2 + v65);
          if (v200 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          uint64_t v198 = v81;
          if (v199)
          {
            int v83 = (int8x16_t *)__dst;
            if (!v82) {
              goto LABEL_122;
            }
            float64x2_t v183 = (char *)(a4 + 8 * v73);
            int v84 = v46;
            char v85 = v47;
            uint64_t v86 = v42;
            BOOL v87 = v48;
            memcpy(__dst, v81, sizeof(__dst));
            BOOL v48 = v87;
            uint64_t v42 = v86;
            LOBYTE(v47) = v85;
            int v46 = v84;
            int v79 = v183;
            uint64_t result = v195;
          }
          else
          {
            int v83 = v81;
            if (!v82)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v80, a11, v83, v79, v47, v200);
              a7 = v187;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v202 = v83;
          unsigned __int8 v210 = v47;
          unsigned __int8 v211 = v200;
          unsigned int v206 = v185;
          unsigned int v207 = v45 - v43;
          unint64_t v203 = v79;
          unint64_t v204 = v80;
          uint64_t v205 = a11;
          unsigned int v208 = v193;
          unsigned int v209 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v187;
            goto LABEL_217;
          }
          unsigned int v88 = *v79;
          if (v88 == 63)
          {
            int32x4_t v90 = (int32x4_t)v83[1];
            int32x4_t v35 = (int32x4_t)v83[2];
            int32x4_t v91 = (int32x4_t)v83[3];
            int32x4_t v92 = vuzp2q_s32(*(int32x4_t *)v83, v35);
            int32x4_t v213 = vuzp1q_s32(*(int32x4_t *)v83, v35);
            int32x4_t v215 = v92;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v90, v91);
            int32x4_t v36 = vuzp2q_s32(v90, v91);
            int16x8_t v217 = v37;
            int32x4_t v219 = v36;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16(v83->i16);
            int32x4_t v213 = (int32x4_t)v37;
            int32x4_t v215 = (int32x4_t)v37;
            int16x8_t v217 = v37;
            int32x4_t v219 = (int32x4_t)v37;
            uint64_t v89 = 2;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v213, 32, (uint64_t)v83, v88, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v89 = 0;
            int32x4_t v213 = 0uLL;
            int32x4_t v215 = 0uLL;
            int16x8_t v217 = 0uLL;
            int32x4_t v219 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v83->i64 + v89;
          unsigned int v94 = v79[1];
          if (v94 == 63)
          {
            int32x4_t v96 = *(int32x4_t *)(v93 + 16);
            int32x4_t v35 = *(int32x4_t *)(v93 + 32);
            int32x4_t v97 = *(int32x4_t *)(v93 + 48);
            int32x4_t v98 = vuzp2q_s32(*(int32x4_t *)v93, v35);
            int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v93, v35);
            int32x4_t v223 = v98;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v96, v97);
            int32x4_t v36 = vuzp2q_s32(v96, v97);
            int16x8_t v225 = v37;
            int32x4_t v227 = v36;
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v221 = (int32x4_t)v37;
            int32x4_t v223 = (int32x4_t)v37;
            int16x8_t v225 = v37;
            int32x4_t v227 = (int32x4_t)v37;
            uint64_t v95 = 2;
          }
          else if (v79[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v93, v94, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v221 = 0uLL;
            int32x4_t v223 = 0uLL;
            int16x8_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
          }
          uint64_t v99 = v93 + v95;
          unsigned int v100 = v79[2];
          if (v100 == 63)
          {
            int32x4_t v102 = *(int32x4_t *)(v99 + 16);
            int32x4_t v35 = *(int32x4_t *)(v99 + 32);
            int32x4_t v103 = *(int32x4_t *)(v99 + 48);
            int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v99, v35);
            int32x4_t v214 = vuzp1q_s32(*(int32x4_t *)v99, v35);
            int32x4_t v216 = v104;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v102, v103);
            int32x4_t v36 = vuzp2q_s32(v102, v103);
            int16x8_t v218 = v37;
            int32x4_t v220 = v36;
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v99);
            int32x4_t v214 = (int32x4_t)v37;
            int32x4_t v216 = (int32x4_t)v37;
            int16x8_t v218 = v37;
            int32x4_t v220 = (int32x4_t)v37;
            uint64_t v101 = 2;
          }
          else if (v79[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 32, v99, v100, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v101 = 0;
            int32x4_t v214 = 0uLL;
            int32x4_t v216 = 0uLL;
            int16x8_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
          }
          uint64_t v105 = v99 + v101;
          unsigned int v106 = v79[3];
          if (v106 == 63)
          {
            int32x4_t v108 = *(int32x4_t *)(v105 + 16);
            int32x4_t v35 = *(int32x4_t *)(v105 + 32);
            int32x4_t v109 = *(int32x4_t *)(v105 + 48);
            int32x4_t v110 = vuzp2q_s32(*(int32x4_t *)v105, v35);
            int32x4_t v222 = vuzp1q_s32(*(int32x4_t *)v105, v35);
            int32x4_t v224 = v110;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v108, v109);
            int32x4_t v36 = vuzp2q_s32(v108, v109);
            int16x8_t v226 = v37;
            int32x4_t v228 = v36;
            uint64_t v107 = 64;
          }
          else if (v106 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v105);
            int32x4_t v222 = (int32x4_t)v37;
            int32x4_t v224 = (int32x4_t)v37;
            int16x8_t v226 = v37;
            int32x4_t v228 = (int32x4_t)v37;
            uint64_t v107 = 2;
          }
          else if (v79[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v222, 32, v105, v106, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
            int16x8_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
          }
          uint64_t v111 = v105 + v107;
          unsigned int v112 = v79[4];
          if (v112 == 63)
          {
            int32x4_t v114 = *(int32x4_t *)(v111 + 16);
            int32x4_t v35 = *(int32x4_t *)(v111 + 32);
            int32x4_t v115 = *(int32x4_t *)(v111 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v111, v35);
            int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v111, v35);
            int32x4_t v231 = v116;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v114, v115);
            int32x4_t v36 = vuzp2q_s32(v114, v115);
            int16x8_t v233 = v37;
            int32x4_t v235 = v36;
            uint64_t v113 = 64;
          }
          else if (v112 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v111);
            int32x4_t v229 = (int32x4_t)v37;
            int32x4_t v231 = (int32x4_t)v37;
            int16x8_t v233 = v37;
            int32x4_t v235 = (int32x4_t)v37;
            uint64_t v113 = 2;
          }
          else if (v79[4])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v111, v112, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v113 = 0;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
            int16x8_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
          }
          uint64_t v117 = v111 + v113;
          unsigned int v118 = v79[5];
          if (v118 == 63)
          {
            int32x4_t v120 = *(int32x4_t *)(v117 + 16);
            int32x4_t v35 = *(int32x4_t *)(v117 + 32);
            int32x4_t v121 = *(int32x4_t *)(v117 + 48);
            int32x4_t v122 = vuzp2q_s32(*(int32x4_t *)v117, v35);
            int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v117, v35);
            int32x4_t v239 = v122;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v120, v121);
            int32x4_t v36 = vuzp2q_s32(v120, v121);
            int16x8_t v241 = v37;
            int32x4_t v243 = v36;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v237 = (int32x4_t)v37;
            int32x4_t v239 = (int32x4_t)v37;
            int16x8_t v241 = v37;
            int32x4_t v243 = (int32x4_t)v37;
            uint64_t v119 = 2;
          }
          else if (v79[5])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v117, v118, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
            int16x8_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
          }
          uint64_t v123 = v117 + v119;
          unsigned int v124 = v79[6];
          if (v124 == 63)
          {
            int32x4_t v126 = *(int32x4_t *)(v123 + 16);
            int32x4_t v35 = *(int32x4_t *)(v123 + 32);
            int32x4_t v127 = *(int32x4_t *)(v123 + 48);
            int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v123, v35);
            int32x4_t v230 = vuzp1q_s32(*(int32x4_t *)v123, v35);
            int32x4_t v232 = v128;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v126, v127);
            int32x4_t v36 = vuzp2q_s32(v126, v127);
            int16x8_t v234 = v37;
            int32x4_t v236 = v36;
            uint64_t v125 = 64;
          }
          else if (v124 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v123);
            int32x4_t v230 = (int32x4_t)v37;
            int32x4_t v232 = (int32x4_t)v37;
            int16x8_t v234 = v37;
            int32x4_t v236 = (int32x4_t)v37;
            uint64_t v125 = 2;
          }
          else if (v79[6])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 32, v123, v124, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v125 = 0;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
            int16x8_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
          }
          uint64_t v129 = v123 + v125;
          unsigned int v130 = v79[7];
          if (v130 == 63)
          {
            int32x4_t v133 = *(int32x4_t *)(v129 + 16);
            int32x4_t v134 = *(int32x4_t *)(v129 + 32);
            int32x4_t v135 = *(int32x4_t *)(v129 + 48);
            int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
            int32x4_t v238 = vuzp1q_s32(*(int32x4_t *)v129, v134);
            int32x4_t v240 = v136;
            int32x4_t v242 = vuzp1q_s32(v133, v135);
            int32x4_t v244 = vuzp2q_s32(v133, v135);
            a7 = v187;
            uint64_t v131 = v208;
            if (!v208) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v187;
            if (v130 == 1)
            {
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v238 = (int32x4_t)v132;
              int32x4_t v240 = (int32x4_t)v132;
              int32x4_t v242 = (int32x4_t)v132;
              int32x4_t v244 = (int32x4_t)v132;
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
            else if (v130)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 32, v129, v130, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
              int32x4_t v244 = 0uLL;
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
          }
          if (v209)
          {
            uint64_t v137 = 0;
            uint64_t v138 = 32 * v206;
            uint64_t v139 = 2 * v207;
            unint64_t v140 = &v213.i8[v138 + v139];
            unint64_t v141 = v204;
            uint64_t v142 = v205;
            unint64_t v143 = 2 * v209;
            if (v143 <= 1) {
              unint64_t v144 = 1;
            }
            else {
              unint64_t v144 = 2 * v209;
            }
            uint64_t v145 = v138 + v139;
            unsigned int v146 = &v213.i8[v138 + v139];
            if (v144) {
              BOOL v147 = (v144 - 1) >> 32 == 0;
            }
            else {
              BOOL v147 = 0;
            }
            uint64_t v148 = v144 & 0x1FFFFFFE0;
            uint64_t v149 = v144 & 0x1FFFFFFF8;
            char v151 = !v147 || v144 < 8;
            char v152 = &v214.i8[v145];
            int v153 = (long long *)(v204 + 16);
            uint64_t v154 = v140;
            unint64_t v155 = v204;
            do
            {
              unsigned int v156 = (char *)(v141 + v142 * v137);
              uint64_t v157 = &v140[32 * v137];
              if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                char v158 = 1;
              }
              else {
                char v158 = v151;
              }
              if (v158)
              {
                int v159 = 0;
                goto LABEL_213;
              }
              if (v144 >= 0x20)
              {
                int v161 = v153;
                float64_t v162 = v152;
                uint64_t v163 = v144 & 0x1FFFFFFE0;
                do
                {
                  long long v164 = *v161;
                  *((_OWORD *)v162 - 1) = *(v161 - 1);
                  *(_OWORD *)float64_t v162 = v164;
                  v162 += 32;
                  v161 += 2;
                  v163 -= 32;
                }
                while (v163);
                if (v144 == v148) {
                  goto LABEL_196;
                }
                uint64_t v160 = v144 & 0x1FFFFFFE0;
                if ((v144 & 0x18) == 0)
                {
                  v156 += v148;
                  v157 += v148;
                  int v159 = v144 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v160 = 0;
              }
              v157 += v149;
              uint64_t v165 = v160 - v149;
              uint64_t v166 = (uint64_t *)(v155 + v160);
              unsigned int v167 = &v154[v160];
              do
              {
                uint64_t v168 = *v166++;
                *(void *)unsigned int v167 = v168;
                v167 += 8;
                v165 += 8;
              }
              while (v165);
              if (v144 == v149) {
                goto LABEL_196;
              }
              v156 += v149;
              int v159 = v144 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v169 = v159 + 1;
              do
              {
                char v170 = *v156++;
                *v157++ = v170;
              }
              while (v143 > v169++);
LABEL_196:
              ++v137;
              v152 += 32;
              int v153 = (long long *)((char *)v153 + v142);
              v155 += v142;
              v154 += 32;
            }
            while (v137 != v131);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v213, 32, v202, v203, v210, v211);
LABEL_217:
          if (v199) {
            memcpy(v198, v83, 0x200uLL);
          }
          BOOL v21 = v40++ == v188 >> 4;
          uint64_t result = v195;
        }
        while (!v21);
        BOOL v21 = v20++ == v177;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v245 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v194 = a8;
  unsigned int v178 = a8 + a10 - 1;
  uint64_t v195 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v177 = v178 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v199 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v189 = 0;
LABEL_32:
      unsigned int v186 = v27 - 4;
      unsigned int v182 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v175 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v189 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v189 = 0;
  unsigned int v175 = 0;
  unsigned int v182 = 0;
  unsigned int v186 = 0;
LABEL_33:
  if (v20 <= v177)
  {
    unsigned int v188 = a7 + a9 - 1;
    unsigned int v174 = a7 >> 4;
    if (a7 >> 4 <= v188 >> 4)
    {
      unsigned int v197 = v18 >> 4;
      unsigned int v173 = v19 >> 4;
      int v196 = (v18 & 0xF) + 1;
      int v172 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v35.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL)));
      *(int32x2_t *)v36.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v35.i8))));
      *(int8x8_t *)v37.i8 = vbic_s8(*(int8x8_t *)v36.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v184 = v37.i32[0] | v37.i32[1];
      BOOL v180 = v37.i32[1] != 0;
      uint64_t v181 = v37.i64[0];
      BOOL v179 = v37.i32[0] != 0;
      unsigned int v187 = a7;
      do
      {
        unsigned int v38 = (16 * v20) | 0xF;
        if (16 * v20 <= v194) {
          int v39 = v194;
        }
        else {
          int v39 = 16 * v20;
        }
        if (v178 < v38) {
          unsigned int v38 = v178;
        }
        int v185 = v39 - 16 * v20;
        int v193 = v38 - v39 + 1;
        unsigned int v40 = v174;
        int v41 = v172;
        if (v20 != v173) {
          int v41 = 16;
        }
        unsigned int v200 = v41;
        uint64_t v42 = v20 & ~(-1 << v182);
        uint64_t v192 = a3 + (v39 - v194) * a11;
        do
        {
          unsigned int v43 = 16 * v40;
          unsigned int v44 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= a7) {
            int v45 = a7;
          }
          else {
            int v45 = 16 * v40;
          }
          if (v188 < v44) {
            unsigned int v44 = v188;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v197) {
            unsigned int v47 = v196;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (16 * v20 >= v194 && v43 >= a7)
          {
            int v49 = v196;
            if (v40 != v197) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v193 != v200;
          }
          if (v189)
          {
            if (v186 | v182)
            {
              int v51 = 0;
              uint64_t v52 = 0;
              int v53 = 1;
              BOOL v54 = v186 != 0;
              BOOL v55 = v182 != 0;
              unsigned int v56 = v186;
              unsigned int v57 = v182;
              do
              {
                --v56;
                if (v54) {
                  v52 |= (unint64_t)(v40 & ~(-1 << v186) & v53) << v51++;
                }
                else {
                  unsigned int v56 = 0;
                }
                --v57;
                if (v55) {
                  v52 |= (unint64_t)(v42 & v53) << v51++;
                }
                else {
                  unsigned int v57 = 0;
                }
                v53 *= 2;
                --v51;
                BOOL v55 = v57 != 0;
                BOOL v54 = v56 != 0;
              }
              while (v57 | v56);
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v65 = *(void *)(result + 320) * ((v40 >> v186) + (v20 >> v182) * v175) + (v52 << 9);
          }
          else
          {
            if (v184)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              int v60 = 1;
              BOOL v61 = v180;
              BOOL v62 = v179;
              int v63 = HIDWORD(v181);
              int v64 = v181;
              do
              {
                --v63;
                if (v61) {
                  v59 |= (unint64_t)(v60 & v40) << v58++;
                }
                else {
                  int v63 = 0;
                }
                --v64;
                if (v62) {
                  v59 |= (unint64_t)(v60 & v20) << v58++;
                }
                else {
                  int v64 = 0;
                }
                v60 *= 2;
                --v58;
                BOOL v62 = v64 != 0;
                BOOL v61 = v63 != 0;
              }
              while (v64 | v63);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v65 = v59 << 9;
          }
          unsigned int v66 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 15;
          if (v67 < 0x20) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 4) - 1)));
          }
          unsigned int v69 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v69 <= 1) {
            unsigned int v69 = 1;
          }
          unsigned int v70 = v69 + 15;
          if (v70 < 0x20)
          {
            unsigned int v71 = 0;
            if (!v68)
            {
LABEL_109:
              uint64_t v73 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v71 = 32 - __clz(~(-1 << -(char)__clz((v70 >> 4) - 1)));
            if (!(v71 | v68)) {
              goto LABEL_109;
            }
          }
          int v72 = 0;
          uint64_t v73 = 0;
          BOOL v74 = v68 != 0;
          BOOL v75 = v71 != 0;
          int v76 = 1;
          do
          {
            --v68;
            if (v74) {
              v73 |= (unint64_t)(v76 & v40) << v72++;
            }
            else {
              unsigned int v68 = 0;
            }
            --v71;
            if (v75) {
              v73 |= (unint64_t)(v76 & v20) << v72++;
            }
            else {
              unsigned int v71 = 0;
            }
            v76 *= 2;
            --v72;
            BOOL v75 = v71 != 0;
            BOOL v74 = v68 != 0;
          }
          while (v71 | v68);
LABEL_110:
          unsigned int v77 = v45 - a7;
          int v78 = v47 < 0x10 || v48;
          int v79 = (char *)(a4 + 8 * v73);
          unint64_t v80 = (float32x2x2_t *)(v192 + 2 * v77);
          int v81 = (int32x4_t *)(a2 + v65);
          if (v200 < 0x10) {
            int v82 = 1;
          }
          else {
            int v82 = v78;
          }
          uint64_t v198 = v81;
          if (v199)
          {
            int v83 = (int32x4_t *)__dst;
            if (!v82) {
              goto LABEL_122;
            }
            float64x2_t v183 = (char *)(a4 + 8 * v73);
            int v84 = v46;
            char v85 = v47;
            uint64_t v86 = v42;
            BOOL v87 = v48;
            memcpy(__dst, v81, sizeof(__dst));
            BOOL v48 = v87;
            uint64_t v42 = v86;
            LOBYTE(v47) = v85;
            int v46 = v84;
            int v79 = v183;
            uint64_t result = v195;
          }
          else
          {
            int v83 = v81;
            if (!v82)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v80, a11, (uint64_t)v83, v79, v47, v200);
              a7 = v187;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int v202 = v83;
          unsigned __int8 v210 = v47;
          unsigned __int8 v211 = v200;
          unsigned int v206 = v185;
          unsigned int v207 = v45 - v43;
          unint64_t v203 = v79;
          unint64_t v204 = v80;
          uint64_t v205 = a11;
          unsigned int v208 = v193;
          unsigned int v209 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v187;
            goto LABEL_217;
          }
          unsigned int v88 = *v79;
          if (v88 == 63)
          {
            int32x4_t v90 = v83[1];
            int32x4_t v35 = v83[2];
            int32x4_t v91 = v83[3];
            int32x4_t v92 = vuzp2q_s32(*v83, v35);
            unsigned long long v213 = (unsigned __int128)vuzp1q_s32(*v83, v35);
            int32x4_t v215 = v92;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v90, v91);
            int32x4_t v36 = vuzp2q_s32(v90, v91);
            int16x8_t v217 = v37;
            int32x4_t v219 = v36;
            uint64_t v89 = 64;
          }
          else if (v88 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16(v83->i16);
            unsigned long long v213 = (unsigned __int128)v37;
            int32x4_t v215 = (int32x4_t)v37;
            int16x8_t v217 = v37;
            int32x4_t v219 = (int32x4_t)v37;
            uint64_t v89 = 2;
          }
          else if (*v79)
          {
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v213, 32, (uint64_t)v83, v88, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v89 = 0;
            unsigned long long v213 = 0uLL;
            int32x4_t v215 = 0uLL;
            int16x8_t v217 = 0uLL;
            int32x4_t v219 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v83->i64 + v89;
          unsigned int v94 = v79[1];
          if (v94 == 63)
          {
            int32x4_t v96 = *(int32x4_t *)(v93 + 16);
            int32x4_t v35 = *(int32x4_t *)(v93 + 32);
            int32x4_t v97 = *(int32x4_t *)(v93 + 48);
            int32x4_t v98 = vuzp2q_s32(*(int32x4_t *)v93, v35);
            int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v93, v35);
            int32x4_t v223 = v98;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v96, v97);
            int32x4_t v36 = vuzp2q_s32(v96, v97);
            int16x8_t v225 = v37;
            int32x4_t v227 = v36;
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v221 = (int32x4_t)v37;
            int32x4_t v223 = (int32x4_t)v37;
            int16x8_t v225 = v37;
            int32x4_t v227 = (int32x4_t)v37;
            uint64_t v95 = 2;
          }
          else if (v79[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v93, v94, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v221 = 0uLL;
            int32x4_t v223 = 0uLL;
            int16x8_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
          }
          uint64_t v99 = v93 + v95;
          unsigned int v100 = v79[2];
          if (v100 == 63)
          {
            int32x4_t v102 = *(int32x4_t *)(v99 + 16);
            int32x4_t v35 = *(int32x4_t *)(v99 + 32);
            int32x4_t v103 = *(int32x4_t *)(v99 + 48);
            int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v99, v35);
            int32x4_t v214 = vuzp1q_s32(*(int32x4_t *)v99, v35);
            int32x4_t v216 = v104;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v102, v103);
            int32x4_t v36 = vuzp2q_s32(v102, v103);
            int16x8_t v218 = v37;
            int32x4_t v220 = v36;
            uint64_t v101 = 64;
          }
          else if (v100 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v99);
            int32x4_t v214 = (int32x4_t)v37;
            int32x4_t v216 = (int32x4_t)v37;
            int16x8_t v218 = v37;
            int32x4_t v220 = (int32x4_t)v37;
            uint64_t v101 = 2;
          }
          else if (v79[2])
          {
            uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v214, 32, v99, v100, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v101 = 0;
            int32x4_t v214 = 0uLL;
            int32x4_t v216 = 0uLL;
            int16x8_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
          }
          uint64_t v105 = v99 + v101;
          unsigned int v106 = v79[3];
          if (v106 == 63)
          {
            int32x4_t v108 = *(int32x4_t *)(v105 + 16);
            int32x4_t v35 = *(int32x4_t *)(v105 + 32);
            int32x4_t v109 = *(int32x4_t *)(v105 + 48);
            int32x4_t v110 = vuzp2q_s32(*(int32x4_t *)v105, v35);
            int32x4_t v222 = vuzp1q_s32(*(int32x4_t *)v105, v35);
            int32x4_t v224 = v110;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v108, v109);
            int32x4_t v36 = vuzp2q_s32(v108, v109);
            int16x8_t v226 = v37;
            int32x4_t v228 = v36;
            uint64_t v107 = 64;
          }
          else if (v106 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v105);
            int32x4_t v222 = (int32x4_t)v37;
            int32x4_t v224 = (int32x4_t)v37;
            int16x8_t v226 = v37;
            int32x4_t v228 = (int32x4_t)v37;
            uint64_t v107 = 2;
          }
          else if (v79[3])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v222, 32, v105, v106, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v107 = 0;
            int32x4_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
            int16x8_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
          }
          uint64_t v111 = v105 + v107;
          unsigned int v112 = v79[4];
          if (v112 == 63)
          {
            int32x4_t v114 = *(int32x4_t *)(v111 + 16);
            int32x4_t v35 = *(int32x4_t *)(v111 + 32);
            int32x4_t v115 = *(int32x4_t *)(v111 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v111, v35);
            int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v111, v35);
            int32x4_t v231 = v116;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v114, v115);
            int32x4_t v36 = vuzp2q_s32(v114, v115);
            int16x8_t v233 = v37;
            int32x4_t v235 = v36;
            uint64_t v113 = 64;
          }
          else if (v112 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v111);
            int32x4_t v229 = (int32x4_t)v37;
            int32x4_t v231 = (int32x4_t)v37;
            int16x8_t v233 = v37;
            int32x4_t v235 = (int32x4_t)v37;
            uint64_t v113 = 2;
          }
          else if (v79[4])
          {
            uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v111, v112, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v113 = 0;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
            int16x8_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
          }
          uint64_t v117 = v111 + v113;
          unsigned int v118 = v79[5];
          if (v118 == 63)
          {
            int32x4_t v120 = *(int32x4_t *)(v117 + 16);
            int32x4_t v35 = *(int32x4_t *)(v117 + 32);
            int32x4_t v121 = *(int32x4_t *)(v117 + 48);
            int32x4_t v122 = vuzp2q_s32(*(int32x4_t *)v117, v35);
            int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v117, v35);
            int32x4_t v239 = v122;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v120, v121);
            int32x4_t v36 = vuzp2q_s32(v120, v121);
            int16x8_t v241 = v37;
            int32x4_t v243 = v36;
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v237 = (int32x4_t)v37;
            int32x4_t v239 = (int32x4_t)v37;
            int16x8_t v241 = v37;
            int32x4_t v243 = (int32x4_t)v37;
            uint64_t v119 = 2;
          }
          else if (v79[5])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v117, v118, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
            int16x8_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
          }
          uint64_t v123 = v117 + v119;
          unsigned int v124 = v79[6];
          if (v124 == 63)
          {
            int32x4_t v126 = *(int32x4_t *)(v123 + 16);
            int32x4_t v35 = *(int32x4_t *)(v123 + 32);
            int32x4_t v127 = *(int32x4_t *)(v123 + 48);
            int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v123, v35);
            int32x4_t v230 = vuzp1q_s32(*(int32x4_t *)v123, v35);
            int32x4_t v232 = v128;
            int16x8_t v37 = (int16x8_t)vuzp1q_s32(v126, v127);
            int32x4_t v36 = vuzp2q_s32(v126, v127);
            int16x8_t v234 = v37;
            int32x4_t v236 = v36;
            uint64_t v125 = 64;
          }
          else if (v124 == 1)
          {
            int16x8_t v37 = vld1q_dup_s16((const __int16 *)v123);
            int32x4_t v230 = (int32x4_t)v37;
            int32x4_t v232 = (int32x4_t)v37;
            int16x8_t v234 = v37;
            int32x4_t v236 = (int32x4_t)v37;
            uint64_t v125 = 2;
          }
          else if (v79[6])
          {
            uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v230, 32, v123, v124, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
          }
          else
          {
            uint64_t v125 = 0;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
            int16x8_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
          }
          uint64_t v129 = v123 + v125;
          unsigned int v130 = v79[7];
          if (v130 == 63)
          {
            int32x4_t v133 = *(int32x4_t *)(v129 + 16);
            int32x4_t v134 = *(int32x4_t *)(v129 + 32);
            int32x4_t v135 = *(int32x4_t *)(v129 + 48);
            int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
            int32x4_t v238 = vuzp1q_s32(*(int32x4_t *)v129, v134);
            int32x4_t v240 = v136;
            int32x4_t v242 = vuzp1q_s32(v133, v135);
            int32x4_t v244 = vuzp2q_s32(v133, v135);
            a7 = v187;
            uint64_t v131 = v208;
            if (!v208) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v187;
            if (v130 == 1)
            {
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v238 = (int32x4_t)v132;
              int32x4_t v240 = (int32x4_t)v132;
              int32x4_t v242 = (int32x4_t)v132;
              int32x4_t v244 = (int32x4_t)v132;
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
            else if (v130)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v238, 32, v129, v130, *(int8x8_t *)v37.i8, *(double *)v36.i64, *(int8x8_t *)v35.i8);
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
              int32x4_t v244 = 0uLL;
              uint64_t v131 = v208;
              if (!v208) {
                goto LABEL_216;
              }
            }
          }
          if (v209)
          {
            uint64_t v137 = 0;
            uint64_t v138 = 32 * v206;
            uint64_t v139 = 2 * v207;
            unint64_t v140 = (char *)&v213 + v138 + v139;
            unint64_t v141 = v204;
            uint64_t v142 = v205;
            unint64_t v143 = 2 * v209;
            if (v143 <= 1) {
              unint64_t v144 = 1;
            }
            else {
              unint64_t v144 = 2 * v209;
            }
            uint64_t v145 = v138 + v139;
            unsigned int v146 = (char *)&v213 + v138 + v139;
            if (v144) {
              BOOL v147 = (v144 - 1) >> 32 == 0;
            }
            else {
              BOOL v147 = 0;
            }
            uint64_t v148 = v144 & 0x1FFFFFFE0;
            uint64_t v149 = v144 & 0x1FFFFFFF8;
            char v151 = !v147 || v144 < 8;
            char v152 = &v214.i8[v145];
            int v153 = v204 + 1;
            uint64_t v154 = v140;
            unint64_t v155 = v204;
            do
            {
              unsigned int v156 = (char *)v141 + v142 * v137;
              uint64_t v157 = &v140[32 * v137];
              if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                char v158 = 1;
              }
              else {
                char v158 = v151;
              }
              if (v158)
              {
                int v159 = 0;
                goto LABEL_213;
              }
              if (v144 >= 0x20)
              {
                int v161 = v153;
                float64_t v162 = v152;
                uint64_t v163 = v144 & 0x1FFFFFFE0;
                do
                {
                  float32x2x2_t v164 = *v161;
                  *((float32x2x2_t *)v162 - 1) = v161[-1];
                  *(float32x2x2_t *)float64_t v162 = v164;
                  v162 += 32;
                  v161 += 2;
                  v163 -= 32;
                }
                while (v163);
                if (v144 == v148) {
                  goto LABEL_196;
                }
                uint64_t v160 = v144 & 0x1FFFFFFE0;
                if ((v144 & 0x18) == 0)
                {
                  v156 += v148;
                  v157 += v148;
                  int v159 = v144 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v160 = 0;
              }
              v157 += v149;
              uint64_t v165 = v160 - v149;
              uint64_t v166 = (uint64_t *)((char *)v155 + v160);
              unsigned int v167 = &v154[v160];
              do
              {
                uint64_t v168 = *v166++;
                *(void *)unsigned int v167 = v168;
                v167 += 8;
                v165 += 8;
              }
              while (v165);
              if (v144 == v149) {
                goto LABEL_196;
              }
              v156 += v149;
              int v159 = v144 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v169 = v159 + 1;
              do
              {
                char v170 = *v156++;
                *v157++ = v170;
              }
              while (v143 > v169++);
LABEL_196:
              ++v137;
              v152 += 32;
              int v153 = (float32x2x2_t *)((char *)v153 + v142);
              unint64_t v155 = (float32x2x2_t *)((char *)v155 + v142);
              v154 += 32;
            }
            while (v137 != v131);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((float32x2x2_t *)&v213, 32, (uint64_t)v202, v203, v210, v211);
LABEL_217:
          if (v199) {
            memcpy(v198, v83, 0x200uLL);
          }
          BOOL v21 = v40++ == v188 >> 4;
          uint64_t result = v195;
        }
        while (!v21);
        BOOL v21 = v20++ == v177;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v240 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v189 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v174 = a8 + a10 - 1;
  unsigned int v176 = v174 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v190 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v190;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v194 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v190;
  BOOL v183 = isLevelTiled;
  if (v18 <= v176)
  {
    unsigned int v182 = a7 + a9 - 1;
    unsigned int v173 = a7 >> 4;
    if (a7 >> 4 <= v182 >> 4)
    {
      unsigned int v170 = a5 - 1;
      unsigned int v192 = (a5 - 1) >> 4;
      int v191 = ((a5 - 1) & 0xF) + 1;
      int v171 = ((a6 - 1) & 0xF) + 1;
      unsigned int v172 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL)));
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v30.i8))));
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v181 = v32.i32[0] | v32.i32[1];
      BOOL v179 = v32.i32[1] != 0;
      uint64_t v180 = v32.i64[0];
      BOOL v178 = v32.i32[0] != 0;
      unint64_t v169 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (16 * v18) | 0xF;
        if (16 * v18 <= v189) {
          int v34 = v189;
        }
        else {
          int v34 = 16 * v18;
        }
        unsigned int v35 = v173;
        if (v174 < v33) {
          unsigned int v33 = v174;
        }
        unsigned int v188 = 16 * v18;
        int v177 = v34 - 16 * v18;
        int v187 = v33 - v34 + 1;
        int v36 = v171;
        if (v18 != v172) {
          int v36 = 16;
        }
        unsigned int v195 = v36;
        uint64_t v186 = a3 + (v34 - v189) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v182 < v38) {
            unsigned int v38 = v182;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v192) {
            unsigned int v41 = v191;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v188 >= v189 && v37 >= a7)
          {
            int v43 = v191;
            if (v35 != v192) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v187 != v195;
          }
          if (v183)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v169 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v160 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v161 = 0;
              if (v67) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v162 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v162 | v161) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v164 = 0;
            }
            else
            {
              unsigned int v161 = 32 - __clz(~(-1 << -(char)__clz(v160)));
              if ((v67 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v162 = 0;
              if (!v161) {
                goto LABEL_220;
              }
LABEL_209:
              int v163 = 0;
              uint64_t v164 = 0;
              int v165 = v35 & v160;
              BOOL v166 = v161 != 0;
              BOOL v167 = v162 != 0;
              int v168 = 1;
              do
              {
                --v161;
                if (v166) {
                  v164 |= (unint64_t)(v168 & v165) << v163++;
                }
                else {
                  unsigned int v161 = 0;
                }
                --v162;
                if (v167) {
                  v164 |= (unint64_t)(v168 & v18 & ((v68 >> 4) - 1)) << v163++;
                }
                else {
                  unsigned int v162 = 0;
                }
                v168 *= 2;
                --v163;
                BOOL v167 = v162 != 0;
                BOOL v166 = v161 != 0;
              }
              while (v162 | v161);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v188 / v68 * ((v64 + v170) / v64)) << 14) + (v164 << 9);
            goto LABEL_58;
          }
          if (v181)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v179;
            BOOL v49 = v178;
            int v50 = HIDWORD(v180);
            int v51 = v180;
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 0x10 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          unint64_t v72 = v186 + 2 * (v39 - a7);
          uint64_t v73 = (int8x16_t *)(a2 + v52);
          if (v195 < 0x10) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          __src = v73;
          if (v194)
          {
            if (!v74)
            {
              uint64_t v73 = (int8x16_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, v73, v71, v41, v195);
              goto LABEL_95;
            }
            int v75 = v40;
            memcpy(__dst, __src, sizeof(__dst));
            int v40 = v75;
            uint64_t v73 = (int8x16_t *)__dst;
            uint64_t v28 = v190;
          }
          else if (!v74)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v197 = v73;
          unsigned __int8 v205 = v41;
          unsigned __int8 v206 = v195;
          unsigned int v201 = v177;
          unsigned int v202 = v39 - v37;
          uint64_t v198 = v71;
          unint64_t v199 = v72;
          uint64_t v200 = a11;
          unsigned int v203 = v187;
          unsigned int v204 = v40;
          if (!v42)
          {
            unsigned int v76 = *v71;
            a7 = v69;
            if (v76 == 63)
            {
              int32x4_t v78 = (int32x4_t)v73[1];
              int32x4_t v30 = (int32x4_t)v73[2];
              int32x4_t v79 = (int32x4_t)v73[3];
              int32x4_t v80 = vuzp2q_s32(*(int32x4_t *)v73, v30);
              int32x4_t v208 = vuzp1q_s32(*(int32x4_t *)v73, v30);
              int32x4_t v210 = v80;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v78, v79);
              int32x4_t v31 = vuzp2q_s32(v78, v79);
              int16x8_t v212 = v32;
              int32x4_t v214 = v31;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16(v73->i16);
              int32x4_t v208 = (int32x4_t)v32;
              int32x4_t v210 = (int32x4_t)v32;
              int16x8_t v212 = v32;
              int32x4_t v214 = (int32x4_t)v32;
              uint64_t v77 = 2;
            }
            else if (*v71)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v208, 32, (uint64_t)v73, v76, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v77 = 0;
              int32x4_t v208 = 0uLL;
              int32x4_t v210 = 0uLL;
              int16x8_t v212 = 0uLL;
              int32x4_t v214 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v73->i64 + v77;
            unsigned int v82 = v71[1];
            if (v82 == 63)
            {
              int32x4_t v84 = *(int32x4_t *)(v81 + 16);
              int32x4_t v30 = *(int32x4_t *)(v81 + 32);
              int32x4_t v85 = *(int32x4_t *)(v81 + 48);
              int32x4_t v86 = vuzp2q_s32(*(int32x4_t *)v81, v30);
              int32x4_t v216 = vuzp1q_s32(*(int32x4_t *)v81, v30);
              int32x4_t v218 = v86;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v84, v85);
              int32x4_t v31 = vuzp2q_s32(v84, v85);
              int16x8_t v220 = v32;
              int32x4_t v222 = v31;
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v216 = (int32x4_t)v32;
              int32x4_t v218 = (int32x4_t)v32;
              int16x8_t v220 = v32;
              int32x4_t v222 = (int32x4_t)v32;
              uint64_t v83 = 2;
            }
            else if (v71[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 32, v81, v82, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v216 = 0uLL;
              int32x4_t v218 = 0uLL;
              int16x8_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
            }
            uint64_t v87 = v81 + v83;
            unsigned int v88 = v71[2];
            if (v88 == 63)
            {
              int32x4_t v90 = *(int32x4_t *)(v87 + 16);
              int32x4_t v30 = *(int32x4_t *)(v87 + 32);
              int32x4_t v91 = *(int32x4_t *)(v87 + 48);
              int32x4_t v92 = vuzp2q_s32(*(int32x4_t *)v87, v30);
              int32x4_t v209 = vuzp1q_s32(*(int32x4_t *)v87, v30);
              int32x4_t v211 = v92;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v90, v91);
              int32x4_t v31 = vuzp2q_s32(v90, v91);
              int16x8_t v213 = v32;
              int32x4_t v215 = v31;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v87);
              int32x4_t v209 = (int32x4_t)v32;
              int32x4_t v211 = (int32x4_t)v32;
              int16x8_t v213 = v32;
              int32x4_t v215 = (int32x4_t)v32;
              uint64_t v89 = 2;
            }
            else if (v71[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v209, 32, v87, v88, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v89 = 0;
              int32x4_t v209 = 0uLL;
              int32x4_t v211 = 0uLL;
              int16x8_t v213 = 0uLL;
              int32x4_t v215 = 0uLL;
            }
            uint64_t v93 = v87 + v89;
            unsigned int v94 = v71[3];
            if (v94 == 63)
            {
              int32x4_t v96 = *(int32x4_t *)(v93 + 16);
              int32x4_t v30 = *(int32x4_t *)(v93 + 32);
              int32x4_t v97 = *(int32x4_t *)(v93 + 48);
              int32x4_t v98 = vuzp2q_s32(*(int32x4_t *)v93, v30);
              int32x4_t v217 = vuzp1q_s32(*(int32x4_t *)v93, v30);
              int32x4_t v219 = v98;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v96, v97);
              int32x4_t v31 = vuzp2q_s32(v96, v97);
              int16x8_t v221 = v32;
              int32x4_t v223 = v31;
              uint64_t v95 = 64;
            }
            else if (v94 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v93);
              int32x4_t v217 = (int32x4_t)v32;
              int32x4_t v219 = (int32x4_t)v32;
              int16x8_t v221 = v32;
              int32x4_t v223 = (int32x4_t)v32;
              uint64_t v95 = 2;
            }
            else if (v71[3])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 32, v93, v94, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v95 = 0;
              int32x4_t v217 = 0uLL;
              int32x4_t v219 = 0uLL;
              int16x8_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
            }
            uint64_t v99 = v93 + v95;
            unsigned int v100 = v71[4];
            if (v100 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)(v99 + 16);
              int32x4_t v30 = *(int32x4_t *)(v99 + 32);
              int32x4_t v103 = *(int32x4_t *)(v99 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v99, v30);
              int32x4_t v224 = vuzp1q_s32(*(int32x4_t *)v99, v30);
              int32x4_t v226 = v104;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v102, v103);
              int32x4_t v31 = vuzp2q_s32(v102, v103);
              int16x8_t v228 = v32;
              int32x4_t v230 = v31;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v99);
              int32x4_t v224 = (int32x4_t)v32;
              int32x4_t v226 = (int32x4_t)v32;
              int16x8_t v228 = v32;
              int32x4_t v230 = (int32x4_t)v32;
              uint64_t v101 = 2;
            }
            else if (v71[4])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 32, v99, v100, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v101 = 0;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
              int16x8_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
            }
            uint64_t v105 = v99 + v101;
            unsigned int v106 = v71[5];
            if (v106 == 63)
            {
              int32x4_t v108 = *(int32x4_t *)(v105 + 16);
              int32x4_t v30 = *(int32x4_t *)(v105 + 32);
              int32x4_t v109 = *(int32x4_t *)(v105 + 48);
              int32x4_t v110 = vuzp2q_s32(*(int32x4_t *)v105, v30);
              int32x4_t v232 = vuzp1q_s32(*(int32x4_t *)v105, v30);
              int32x4_t v234 = v110;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v108, v109);
              int32x4_t v31 = vuzp2q_s32(v108, v109);
              int16x8_t v236 = v32;
              int32x4_t v238 = v31;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v232 = (int32x4_t)v32;
              int32x4_t v234 = (int32x4_t)v32;
              int16x8_t v236 = v32;
              int32x4_t v238 = (int32x4_t)v32;
              uint64_t v107 = 2;
            }
            else if (v71[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 32, v105, v106, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
              int16x8_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
            }
            uint64_t v111 = v105 + v107;
            unsigned int v112 = v71[6];
            if (v112 == 63)
            {
              int32x4_t v114 = *(int32x4_t *)(v111 + 16);
              int32x4_t v30 = *(int32x4_t *)(v111 + 32);
              int32x4_t v115 = *(int32x4_t *)(v111 + 48);
              int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v111, v30);
              int32x4_t v225 = vuzp1q_s32(*(int32x4_t *)v111, v30);
              int32x4_t v227 = v116;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v114, v115);
              int32x4_t v31 = vuzp2q_s32(v114, v115);
              int16x8_t v229 = v32;
              int32x4_t v231 = v31;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v111);
              int32x4_t v225 = (int32x4_t)v32;
              int32x4_t v227 = (int32x4_t)v32;
              int16x8_t v229 = v32;
              int32x4_t v231 = (int32x4_t)v32;
              uint64_t v113 = 2;
            }
            else if (v71[6])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, v111, v112, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v113 = 0;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
              int16x8_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
            }
            uint64_t v117 = v111 + v113;
            unsigned int v118 = v71[7];
            if (v118 == 63)
            {
              int32x4_t v121 = *(int32x4_t *)(v117 + 16);
              int32x4_t v122 = *(int32x4_t *)(v117 + 32);
              int32x4_t v123 = *(int32x4_t *)(v117 + 48);
              int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
              int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v117, v122);
              int32x4_t v235 = v124;
              int32x4_t v237 = vuzp1q_s32(v121, v123);
              int32x4_t v239 = vuzp2q_s32(v121, v123);
              uint64_t v119 = v203;
              if (v203) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v118 != 1)
              {
                if (v71[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v117, v118, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
                  uint64_t v119 = v203;
                  if (!v203) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v233 = 0uLL;
                  int32x4_t v235 = 0uLL;
                  int32x4_t v237 = 0uLL;
                  int32x4_t v239 = 0uLL;
                  uint64_t v119 = v203;
                  if (!v203) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v204) {
                  goto LABEL_190;
                }
                uint64_t v125 = 0;
                uint64_t v126 = 32 * v201;
                uint64_t v127 = 2 * v202;
                int32x4_t v128 = &v208.i8[v126 + v127];
                unint64_t v129 = v199;
                uint64_t v130 = v200;
                unint64_t v131 = 2 * v204;
                if (v131 <= 1) {
                  unint64_t v132 = 1;
                }
                else {
                  unint64_t v132 = 2 * v204;
                }
                uint64_t v133 = v126 + v127;
                int32x4_t v134 = &v208.i8[v126 + v127];
                if (v132) {
                  BOOL v135 = (v132 - 1) >> 32 == 0;
                }
                else {
                  BOOL v135 = 0;
                }
                uint64_t v136 = v132 & 0x1FFFFFFE0;
                uint64_t v137 = v132 & 0x1FFFFFFF8;
                char v139 = !v135 || v132 < 8;
                unint64_t v140 = &v209.i8[v133];
                unint64_t v141 = (long long *)(v199 + 16);
                uint64_t v142 = v128;
                unint64_t v143 = v199;
                while (2)
                {
                  unint64_t v144 = (char *)(v129 + v130 * v125);
                  uint64_t v145 = &v128[32 * v125];
                  if ((unint64_t)(&v134[32 * v125] - v144) < 0x20) {
                    char v146 = 1;
                  }
                  else {
                    char v146 = v139;
                  }
                  if (v146)
                  {
                    int v147 = 0;
LABEL_187:
                    unsigned int v157 = v147 + 1;
                    do
                    {
                      char v158 = *v144++;
                      *v145++ = v158;
                    }
                    while (v131 > v157++);
                  }
                  else
                  {
                    if (v132 >= 0x20)
                    {
                      uint64_t v149 = v141;
                      int v150 = v140;
                      uint64_t v151 = v132 & 0x1FFFFFFE0;
                      do
                      {
                        long long v152 = *v149;
                        *((_OWORD *)v150 - 1) = *(v149 - 1);
                        *(_OWORD *)int v150 = v152;
                        v150 += 32;
                        v149 += 2;
                        v151 -= 32;
                      }
                      while (v151);
                      if (v132 == v136) {
                        goto LABEL_170;
                      }
                      uint64_t v148 = v132 & 0x1FFFFFFE0;
                      if ((v132 & 0x18) == 0)
                      {
                        v144 += v136;
                        v145 += v136;
                        int v147 = v132 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v148 = 0;
                    }
                    v145 += v137;
                    uint64_t v153 = v148 - v137;
                    uint64_t v154 = (uint64_t *)(v143 + v148);
                    unint64_t v155 = &v142[v148];
                    do
                    {
                      uint64_t v156 = *v154++;
                      *(void *)unint64_t v155 = v156;
                      v155 += 8;
                      v153 += 8;
                    }
                    while (v153);
                    if (v132 != v137)
                    {
                      v144 += v137;
                      int v147 = v132 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v125;
                  v140 += 32;
                  unint64_t v141 = (long long *)((char *)v141 + v130);
                  v143 += v130;
                  v142 += 32;
                  if (v125 == v119) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
              int32x4_t v233 = (int32x4_t)v120;
              int32x4_t v235 = (int32x4_t)v120;
              int32x4_t v237 = (int32x4_t)v120;
              int32x4_t v239 = (int32x4_t)v120;
              uint64_t v119 = v203;
              if (v203) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v208, 32, v197, v198, v205, v206);
            if (!v194) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v69;
          if (!v194) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v73, 0x200uLL);
LABEL_26:
          BOOL v23 = v35++ == v182 >> 4;
          uint64_t v28 = v190;
        }
        while (!v23);
        BOOL v23 = v18++ == v176;
      }
      while (!v23);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v240 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v189 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v174 = a8 + a10 - 1;
  unsigned int v176 = v174 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v190 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v190;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v194 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v190;
  BOOL v183 = isLevelTiled;
  if (v18 <= v176)
  {
    unsigned int v182 = a7 + a9 - 1;
    unsigned int v173 = a7 >> 4;
    if (a7 >> 4 <= v182 >> 4)
    {
      unsigned int v170 = a5 - 1;
      unsigned int v192 = (a5 - 1) >> 4;
      int v191 = ((a5 - 1) & 0xF) + 1;
      int v171 = ((a6 - 1) & 0xF) + 1;
      unsigned int v172 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL)));
      *(int32x2_t *)v31.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, *(uint32x2_t *)v30.i8))));
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v31.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v181 = v32.i32[0] | v32.i32[1];
      BOOL v179 = v32.i32[1] != 0;
      uint64_t v180 = v32.i64[0];
      BOOL v178 = v32.i32[0] != 0;
      unint64_t v169 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v33 = (16 * v18) | 0xF;
        if (16 * v18 <= v189) {
          int v34 = v189;
        }
        else {
          int v34 = 16 * v18;
        }
        unsigned int v35 = v173;
        if (v174 < v33) {
          unsigned int v33 = v174;
        }
        unsigned int v188 = 16 * v18;
        int v177 = v34 - 16 * v18;
        int v187 = v33 - v34 + 1;
        int v36 = v171;
        if (v18 != v172) {
          int v36 = 16;
        }
        unsigned int v195 = v36;
        uint64_t v186 = a3 + (v34 - v189) * a11;
        do
        {
          unsigned int v37 = 16 * v35;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * v35 <= a7) {
            int v39 = a7;
          }
          else {
            int v39 = 16 * v35;
          }
          if (v182 < v38) {
            unsigned int v38 = v182;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v192) {
            unsigned int v41 = v191;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v188 >= v189 && v37 >= a7)
          {
            int v43 = v191;
            if (v35 != v192) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v187 != v195;
          }
          if (v183)
          {
            unsigned int v64 = 0;
            uint64_t v65 = v169 >> (*(unsigned char *)(v28 + 57) != 0);
            char v66 = 1;
            if (v65 > 127)
            {
              if (v65 > 511)
              {
                if (v65 == 512)
                {
                  unsigned int v64 = 16;
                  char v67 = 1;
                  unsigned int v68 = 16;
                }
                else
                {
                  char v67 = 1;
                  unsigned int v68 = 0;
                  if (v65 == 1024)
                  {
                    unsigned int v68 = 8;
                    unsigned int v64 = 16;
                  }
                }
              }
              else if (v65 == 128)
              {
                char v66 = 0;
                char v67 = 0;
                unsigned int v64 = 32;
                unsigned int v68 = 32;
              }
              else
              {
                char v67 = 1;
                unsigned int v68 = 0;
                if (v65 == 256)
                {
                  char v66 = 0;
                  unsigned int v68 = 16;
                  unsigned int v64 = 32;
                }
              }
            }
            else
            {
              char v67 = 1;
              unsigned int v68 = 0;
              switch(v65)
              {
                case 4:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 128;
                  unsigned int v64 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 128;
                  unsigned int v68 = 128;
                  break;
                case 16:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v68 = 64;
                  unsigned int v64 = 128;
                  break;
                case 32:
                  char v66 = 0;
                  char v67 = 0;
                  unsigned int v64 = 64;
                  unsigned int v68 = 64;
                  break;
                default:
                  if (v65 == 64)
                  {
                    char v66 = 0;
                    char v67 = 0;
                    unsigned int v68 = 32;
                    unsigned int v64 = 64;
                  }
                  break;
              }
            }
            unsigned int v160 = (v64 >> 4) - 1;
            if (v66)
            {
              unsigned int v161 = 0;
              if (v67) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v162 = 32 - __clz(~(-1 << -(char)__clz(((v68 + 15) >> 4) - 1)));
              if (v162 | v161) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v164 = 0;
            }
            else
            {
              unsigned int v161 = 32 - __clz(~(-1 << -(char)__clz(v160)));
              if ((v67 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v162 = 0;
              if (!v161) {
                goto LABEL_220;
              }
LABEL_209:
              int v163 = 0;
              uint64_t v164 = 0;
              int v165 = v35 & v160;
              BOOL v166 = v161 != 0;
              BOOL v167 = v162 != 0;
              int v168 = 1;
              do
              {
                --v161;
                if (v166) {
                  v164 |= (unint64_t)(v168 & v165) << v163++;
                }
                else {
                  unsigned int v161 = 0;
                }
                --v162;
                if (v167) {
                  v164 |= (unint64_t)(v168 & v18 & ((v68 >> 4) - 1)) << v163++;
                }
                else {
                  unsigned int v162 = 0;
                }
                v168 *= 2;
                --v163;
                BOOL v167 = v162 != 0;
                BOOL v166 = v161 != 0;
              }
              while (v162 | v161);
            }
            unint64_t v52 = ((unint64_t)(v37 / v64 + v188 / v68 * ((v64 + v170) / v64)) << 14) + (v164 << 9);
            goto LABEL_58;
          }
          if (v181)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v179;
            BOOL v49 = v178;
            int v50 = HIDWORD(v180);
            int v51 = v180;
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v35) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v18) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_58:
          unsigned int v53 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 15;
          if (v57 < 0x20)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_80:
              uint64_t v60 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 4) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_80;
            }
          }
          int v59 = 0;
          uint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            if (v61) {
              v60 |= (unint64_t)(v63 & v35) << v59++;
            }
            else {
              unsigned int v55 = 0;
            }
            --v58;
            if (v62) {
              v60 |= (unint64_t)(v63 & v18) << v59++;
            }
            else {
              unsigned int v58 = 0;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_81:
          uint64_t v69 = a7;
          int v70 = v41 < 0x10 || v42;
          unsigned int v71 = (char *)(a4 + 8 * v60);
          unint64_t v72 = (float32x2x2_t *)(v186 + 2 * (v39 - a7));
          uint64_t v73 = (int32x4_t *)(a2 + v52);
          if (v195 < 0x10) {
            int v74 = 1;
          }
          else {
            int v74 = v70;
          }
          __src = v73;
          if (v194)
          {
            if (!v74)
            {
              uint64_t v73 = (int32x4_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v72, a11, (uint64_t)v73, v71, v41, v195);
              goto LABEL_95;
            }
            int v75 = v40;
            memcpy(__dst, __src, sizeof(__dst));
            int v40 = v75;
            uint64_t v73 = (int32x4_t *)__dst;
            uint64_t v28 = v190;
          }
          else if (!v74)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          unsigned int v197 = v73;
          unsigned __int8 v205 = v41;
          unsigned __int8 v206 = v195;
          unsigned int v201 = v177;
          unsigned int v202 = v39 - v37;
          uint64_t v198 = v71;
          unint64_t v199 = v72;
          uint64_t v200 = a11;
          unsigned int v203 = v187;
          unsigned int v204 = v40;
          if (!v42)
          {
            unsigned int v76 = *v71;
            a7 = v69;
            if (v76 == 63)
            {
              int32x4_t v78 = v73[1];
              int32x4_t v30 = v73[2];
              int32x4_t v79 = v73[3];
              int32x4_t v80 = vuzp2q_s32(*v73, v30);
              unsigned long long v208 = (unsigned __int128)vuzp1q_s32(*v73, v30);
              int32x4_t v210 = v80;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v78, v79);
              int32x4_t v31 = vuzp2q_s32(v78, v79);
              int16x8_t v212 = v32;
              int32x4_t v214 = v31;
              uint64_t v77 = 64;
            }
            else if (v76 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16(v73->i16);
              unsigned long long v208 = (unsigned __int128)v32;
              int32x4_t v210 = (int32x4_t)v32;
              int16x8_t v212 = v32;
              int32x4_t v214 = (int32x4_t)v32;
              uint64_t v77 = 2;
            }
            else if (*v71)
            {
              uint64_t v77 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)&v208, 32, (uint64_t)v73, v76, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v77 = 0;
              unsigned long long v208 = 0uLL;
              int32x4_t v210 = 0uLL;
              int16x8_t v212 = 0uLL;
              int32x4_t v214 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v73->i64 + v77;
            unsigned int v82 = v71[1];
            if (v82 == 63)
            {
              int32x4_t v84 = *(int32x4_t *)(v81 + 16);
              int32x4_t v30 = *(int32x4_t *)(v81 + 32);
              int32x4_t v85 = *(int32x4_t *)(v81 + 48);
              int32x4_t v86 = vuzp2q_s32(*(int32x4_t *)v81, v30);
              int32x4_t v216 = vuzp1q_s32(*(int32x4_t *)v81, v30);
              int32x4_t v218 = v86;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v84, v85);
              int32x4_t v31 = vuzp2q_s32(v84, v85);
              int16x8_t v220 = v32;
              int32x4_t v222 = v31;
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v216 = (int32x4_t)v32;
              int32x4_t v218 = (int32x4_t)v32;
              int16x8_t v220 = v32;
              int32x4_t v222 = (int32x4_t)v32;
              uint64_t v83 = 2;
            }
            else if (v71[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v216, 32, v81, v82, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v216 = 0uLL;
              int32x4_t v218 = 0uLL;
              int16x8_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
            }
            uint64_t v87 = v81 + v83;
            unsigned int v88 = v71[2];
            if (v88 == 63)
            {
              int32x4_t v90 = *(int32x4_t *)(v87 + 16);
              int32x4_t v30 = *(int32x4_t *)(v87 + 32);
              int32x4_t v91 = *(int32x4_t *)(v87 + 48);
              int32x4_t v92 = vuzp2q_s32(*(int32x4_t *)v87, v30);
              int32x4_t v209 = vuzp1q_s32(*(int32x4_t *)v87, v30);
              int32x4_t v211 = v92;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v90, v91);
              int32x4_t v31 = vuzp2q_s32(v90, v91);
              int16x8_t v213 = v32;
              int32x4_t v215 = v31;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v87);
              int32x4_t v209 = (int32x4_t)v32;
              int32x4_t v211 = (int32x4_t)v32;
              int16x8_t v213 = v32;
              int32x4_t v215 = (int32x4_t)v32;
              uint64_t v89 = 2;
            }
            else if (v71[2])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v209, 32, v87, v88, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v89 = 0;
              int32x4_t v209 = 0uLL;
              int32x4_t v211 = 0uLL;
              int16x8_t v213 = 0uLL;
              int32x4_t v215 = 0uLL;
            }
            uint64_t v93 = v87 + v89;
            unsigned int v94 = v71[3];
            if (v94 == 63)
            {
              int32x4_t v96 = *(int32x4_t *)(v93 + 16);
              int32x4_t v30 = *(int32x4_t *)(v93 + 32);
              int32x4_t v97 = *(int32x4_t *)(v93 + 48);
              int32x4_t v98 = vuzp2q_s32(*(int32x4_t *)v93, v30);
              int32x4_t v217 = vuzp1q_s32(*(int32x4_t *)v93, v30);
              int32x4_t v219 = v98;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v96, v97);
              int32x4_t v31 = vuzp2q_s32(v96, v97);
              int16x8_t v221 = v32;
              int32x4_t v223 = v31;
              uint64_t v95 = 64;
            }
            else if (v94 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v93);
              int32x4_t v217 = (int32x4_t)v32;
              int32x4_t v219 = (int32x4_t)v32;
              int16x8_t v221 = v32;
              int32x4_t v223 = (int32x4_t)v32;
              uint64_t v95 = 2;
            }
            else if (v71[3])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v217, 32, v93, v94, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v95 = 0;
              int32x4_t v217 = 0uLL;
              int32x4_t v219 = 0uLL;
              int16x8_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
            }
            uint64_t v99 = v93 + v95;
            unsigned int v100 = v71[4];
            if (v100 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)(v99 + 16);
              int32x4_t v30 = *(int32x4_t *)(v99 + 32);
              int32x4_t v103 = *(int32x4_t *)(v99 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v99, v30);
              int32x4_t v224 = vuzp1q_s32(*(int32x4_t *)v99, v30);
              int32x4_t v226 = v104;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v102, v103);
              int32x4_t v31 = vuzp2q_s32(v102, v103);
              int16x8_t v228 = v32;
              int32x4_t v230 = v31;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v99);
              int32x4_t v224 = (int32x4_t)v32;
              int32x4_t v226 = (int32x4_t)v32;
              int16x8_t v228 = v32;
              int32x4_t v230 = (int32x4_t)v32;
              uint64_t v101 = 2;
            }
            else if (v71[4])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v224, 32, v99, v100, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v101 = 0;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
              int16x8_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
            }
            uint64_t v105 = v99 + v101;
            unsigned int v106 = v71[5];
            if (v106 == 63)
            {
              int32x4_t v108 = *(int32x4_t *)(v105 + 16);
              int32x4_t v30 = *(int32x4_t *)(v105 + 32);
              int32x4_t v109 = *(int32x4_t *)(v105 + 48);
              int32x4_t v110 = vuzp2q_s32(*(int32x4_t *)v105, v30);
              int32x4_t v232 = vuzp1q_s32(*(int32x4_t *)v105, v30);
              int32x4_t v234 = v110;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v108, v109);
              int32x4_t v31 = vuzp2q_s32(v108, v109);
              int16x8_t v236 = v32;
              int32x4_t v238 = v31;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v232 = (int32x4_t)v32;
              int32x4_t v234 = (int32x4_t)v32;
              int16x8_t v236 = v32;
              int32x4_t v238 = (int32x4_t)v32;
              uint64_t v107 = 2;
            }
            else if (v71[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v232, 32, v105, v106, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
              int16x8_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
            }
            uint64_t v111 = v105 + v107;
            unsigned int v112 = v71[6];
            if (v112 == 63)
            {
              int32x4_t v114 = *(int32x4_t *)(v111 + 16);
              int32x4_t v30 = *(int32x4_t *)(v111 + 32);
              int32x4_t v115 = *(int32x4_t *)(v111 + 48);
              int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v111, v30);
              int32x4_t v225 = vuzp1q_s32(*(int32x4_t *)v111, v30);
              int32x4_t v227 = v116;
              int16x8_t v32 = (int16x8_t)vuzp1q_s32(v114, v115);
              int32x4_t v31 = vuzp2q_s32(v114, v115);
              int16x8_t v229 = v32;
              int32x4_t v231 = v31;
              uint64_t v113 = 64;
            }
            else if (v112 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v111);
              int32x4_t v225 = (int32x4_t)v32;
              int32x4_t v227 = (int32x4_t)v32;
              int16x8_t v229 = v32;
              int32x4_t v231 = (int32x4_t)v32;
              uint64_t v113 = 2;
            }
            else if (v71[6])
            {
              uint64_t v113 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, v111, v112, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
            }
            else
            {
              uint64_t v113 = 0;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
              int16x8_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
            }
            uint64_t v117 = v111 + v113;
            unsigned int v118 = v71[7];
            if (v118 == 63)
            {
              int32x4_t v121 = *(int32x4_t *)(v117 + 16);
              int32x4_t v122 = *(int32x4_t *)(v117 + 32);
              int32x4_t v123 = *(int32x4_t *)(v117 + 48);
              int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
              int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v117, v122);
              int32x4_t v235 = v124;
              int32x4_t v237 = vuzp1q_s32(v121, v123);
              int32x4_t v239 = vuzp2q_s32(v121, v123);
              uint64_t v119 = v203;
              if (v203) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v118 != 1)
              {
                if (v71[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v117, v118, *(int8x8_t *)v32.i8, *(double *)v31.i64, *(int8x8_t *)v30.i8);
                  uint64_t v119 = v203;
                  if (!v203) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v233 = 0uLL;
                  int32x4_t v235 = 0uLL;
                  int32x4_t v237 = 0uLL;
                  int32x4_t v239 = 0uLL;
                  uint64_t v119 = v203;
                  if (!v203) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v204) {
                  goto LABEL_190;
                }
                uint64_t v125 = 0;
                uint64_t v126 = 32 * v201;
                uint64_t v127 = 2 * v202;
                int32x4_t v128 = (char *)&v208 + v126 + v127;
                unint64_t v129 = v199;
                uint64_t v130 = v200;
                unint64_t v131 = 2 * v204;
                if (v131 <= 1) {
                  unint64_t v132 = 1;
                }
                else {
                  unint64_t v132 = 2 * v204;
                }
                uint64_t v133 = v126 + v127;
                int32x4_t v134 = (char *)&v208 + v126 + v127;
                if (v132) {
                  BOOL v135 = (v132 - 1) >> 32 == 0;
                }
                else {
                  BOOL v135 = 0;
                }
                uint64_t v136 = v132 & 0x1FFFFFFE0;
                uint64_t v137 = v132 & 0x1FFFFFFF8;
                char v139 = !v135 || v132 < 8;
                unint64_t v140 = &v209.i8[v133];
                unint64_t v141 = v199 + 1;
                uint64_t v142 = v128;
                unint64_t v143 = v199;
                while (2)
                {
                  unint64_t v144 = (char *)v129 + v130 * v125;
                  uint64_t v145 = &v128[32 * v125];
                  if ((unint64_t)(&v134[32 * v125] - v144) < 0x20) {
                    char v146 = 1;
                  }
                  else {
                    char v146 = v139;
                  }
                  if (v146)
                  {
                    int v147 = 0;
LABEL_187:
                    unsigned int v157 = v147 + 1;
                    do
                    {
                      char v158 = *v144++;
                      *v145++ = v158;
                    }
                    while (v131 > v157++);
                  }
                  else
                  {
                    if (v132 >= 0x20)
                    {
                      uint64_t v149 = v141;
                      int v150 = v140;
                      uint64_t v151 = v132 & 0x1FFFFFFE0;
                      do
                      {
                        float32x2x2_t v152 = *v149;
                        *((float32x2x2_t *)v150 - 1) = v149[-1];
                        *(float32x2x2_t *)int v150 = v152;
                        v150 += 32;
                        v149 += 2;
                        v151 -= 32;
                      }
                      while (v151);
                      if (v132 == v136) {
                        goto LABEL_170;
                      }
                      uint64_t v148 = v132 & 0x1FFFFFFE0;
                      if ((v132 & 0x18) == 0)
                      {
                        v144 += v136;
                        v145 += v136;
                        int v147 = v132 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v148 = 0;
                    }
                    v145 += v137;
                    uint64_t v153 = v148 - v137;
                    uint64_t v154 = (uint64_t *)((char *)v143 + v148);
                    unint64_t v155 = &v142[v148];
                    do
                    {
                      uint64_t v156 = *v154++;
                      *(void *)unint64_t v155 = v156;
                      v155 += 8;
                      v153 += 8;
                    }
                    while (v153);
                    if (v132 != v137)
                    {
                      v144 += v137;
                      int v147 = v132 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v125;
                  v140 += 32;
                  unint64_t v141 = (float32x2x2_t *)((char *)v141 + v130);
                  unint64_t v143 = (float32x2x2_t *)((char *)v143 + v130);
                  v142 += 32;
                  if (v125 == v119) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
              int32x4_t v233 = (int32x4_t)v120;
              int32x4_t v235 = (int32x4_t)v120;
              int32x4_t v237 = (int32x4_t)v120;
              int32x4_t v239 = (int32x4_t)v120;
              uint64_t v119 = v203;
              if (v203) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((float32x2x2_t *)&v208, 32, (uint64_t)v197, v198, v205, v206);
            if (!v194) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v69;
          if (!v194) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v73, 0x200uLL);
LABEL_26:
          BOOL v23 = v35++ == v182 >> 4;
          uint64_t v28 = v190;
        }
        while (!v23);
        BOOL v23 = v18++ == v176;
      }
      while (!v23);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v299 = v21;
  uint64_t v300 = v22;
  uint64_t v286 = v23;
  uint64_t v24 = v12;
  uint64_t v450 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v302 = v14;
  unsigned int v288 = v14 + a10 - 1;
  uint64_t v304 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v287 = v288 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v308 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v298 = 0;
LABEL_32:
      unsigned int v295 = v35 - 4;
      unsigned int v292 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v285 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v298 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v298 = 0;
  unsigned int v285 = 0;
  unsigned int v292 = 0;
  unsigned int v295 = 0;
LABEL_33:
  if (v28 <= v287)
  {
    unsigned int v297 = v16 + a9 - 1;
    unsigned int v284 = v16 >> 4;
    if (v16 >> 4 <= v297 >> 4)
    {
      unsigned int v306 = v26 >> 4;
      unsigned int v283 = v27 >> 4;
      int v305 = (v26 & 0xF) + 1;
      int v282 = (v27 & 0xF) + 1;
      int v281 = ~(-1 << v292);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v293 = v43.i32[0] | v43.i32[1];
      BOOL v290 = v43.i32[1] != 0;
      int8x8_t v291 = v43;
      BOOL v289 = v43.i32[0] != 0;
      unsigned int v296 = v16;
      do
      {
        unsigned int v44 = (16 * v28) | 0xF;
        if (16 * v28 <= v302) {
          int v45 = v302;
        }
        else {
          int v45 = 16 * v28;
        }
        if (v288 < v44) {
          unsigned int v44 = v288;
        }
        int v294 = v45 - 16 * v28;
        int v303 = v44 - v45 + 1;
        unsigned int v46 = v284;
        int v47 = v282;
        if (v28 != v283) {
          int v47 = 16;
        }
        unsigned int v309 = v47;
        int v48 = v28 & v281;
        uint64_t v301 = v286 + (v45 - v302) * a11;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v297 < v50) {
            unsigned int v50 = v297;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v306) {
            unsigned int v53 = v305;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (16 * v28 >= v302 && v49 >= v16)
          {
            int v55 = v305;
            if (v46 != v306) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v303 != v309;
          }
          if (v298)
          {
            if (v295 | v292)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v295 != 0;
              BOOL v61 = v292 != 0;
              unsigned int v62 = v295;
              unsigned int v63 = v292;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v295) & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v295) + (v28 >> v292) * v285) + (v58 << 11);
          }
          else
          {
            if (v293)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v290;
              BOOL v68 = v289;
              __int32 v69 = v291.i32[1];
              __int32 v70 = v291.i32[0];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20)
          {
            unsigned int v77 = 0;
            if (!v74)
            {
LABEL_109:
              uint64_t v79 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
            if (!(v77 | v74)) {
              goto LABEL_109;
            }
          }
          int v78 = 0;
          uint64_t v79 = 0;
          BOOL v80 = v74 != 0;
          BOOL v81 = v77 != 0;
          int v82 = 1;
          do
          {
            --v74;
            if (v80) {
              v79 |= (unint64_t)(v82 & v46) << v78++;
            }
            else {
              unsigned int v74 = 0;
            }
            --v77;
            if (v81) {
              v79 |= (unint64_t)(v82 & v28) << v78++;
            }
            else {
              unsigned int v77 = 0;
            }
            v82 *= 2;
            --v78;
            BOOL v81 = v77 != 0;
            BOOL v80 = v74 != 0;
          }
          while (v77 | v74);
LABEL_110:
          unsigned int v83 = v51 - v16;
          int v84 = v53 < 0x10 || v54;
          int32x4_t v85 = (char *)(v300 + 8 * v79);
          uint64_t v86 = v301 + 8 * v83;
          uint64_t v87 = (void *)(v299 + v71);
          if (v309 < 0x10) {
            int v88 = 1;
          }
          else {
            int v88 = v84;
          }
          int64x2_t v307 = v87;
          if (v308)
          {
            uint64_t v89 = __dst;
            if (!v88) {
              goto LABEL_122;
            }
            int32x4_t v90 = (char *)(v300 + 8 * v79);
            int v91 = v52;
            char v92 = v53;
            memcpy(__dst, v87, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            LOBYTE(v53) = v92;
            int v52 = v91;
            int32x4_t v85 = v90;
            int v48 = v28 & v281;
            uint64_t result = v304;
          }
          else
          {
            uint64_t v89 = v87;
            if (!v88)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v86, a11, (unint64_t)v89, v85, v53, v309);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v93 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v311 = v89;
          unsigned __int8 v319 = v53;
          unsigned __int8 v320 = v309;
          int v315 = v294;
          unsigned int v316 = v93;
          int32x4_t v312 = v85;
          uint64_t v313 = v86;
          uint64_t v314 = a11;
          int v317 = v303;
          unsigned int v318 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            unsigned int v16 = v296;
            unsigned int v94 = v46 + 1;
            goto LABEL_215;
          }
          unsigned int v95 = *v85;
          if (v95 == 255)
          {
            float64x2_t v98 = *((float64x2_t *)v89 + 1);
            float64x2_t v99 = *((float64x2_t *)v89 + 3);
            float64x2_t v100 = *((float64x2_t *)v89 + 9);
            float64x2_t v101 = *((float64x2_t *)v89 + 11);
            float64x2_t v102 = *((float64x2_t *)v89 + 2);
            float64x2_t v103 = *((float64x2_t *)v89 + 8);
            float64x2_t v104 = *((float64x2_t *)v89 + 4);
            float64x2_t v105 = *((float64x2_t *)v89 + 6);
            float64x2_t v106 = *((float64x2_t *)v89 + 10);
            float64x2_t v107 = *((float64x2_t *)v89 + 12);
            float64x2_t v108 = *((float64x2_t *)v89 + 13);
            float64x2_t v109 = *((float64x2_t *)v89 + 14);
            float64x2_t v110 = *((float64x2_t *)v89 + 15);
            float64x2_t v111 = *((float64x2_t *)v89 + 5);
            float64x2_t v112 = *((float64x2_t *)v89 + 7);
            float64x2_t v322 = *(float64x2_t *)v89;
            float64x2_t v323 = v102;
            float64x2_t v324 = v103;
            float64x2_t v325 = v106;
            float64x2_t v330 = v98;
            float64x2_t v331 = v99;
            float64x2_t v332 = v100;
            float64x2_t v333 = v101;
            float64x2_t v338 = v104;
            float64x2_t v339 = v105;
            float64x2_t v340 = v107;
            float64x2_t v341 = v109;
            uint64_t v96 = 256;
            float64x2_t v346 = v111;
            float64x2_t v347 = v112;
            float64x2_t v348 = v108;
            float64x2_t v349 = v110;
          }
          else if (v95 == 7)
          {
            float64x2_t v97 = vld1q_dup_f64((const double *)v89);
            float64x2_t v322 = v97;
            float64x2_t v323 = v97;
            float64x2_t v324 = v97;
            float64x2_t v325 = v97;
            float64x2_t v330 = v97;
            float64x2_t v331 = v97;
            float64x2_t v332 = v97;
            float64x2_t v333 = v97;
            float64x2_t v338 = v97;
            float64x2_t v339 = v97;
            float64x2_t v340 = v97;
            float64x2_t v341 = v97;
            float64x2_t v346 = v97;
            float64x2_t v347 = v97;
            uint64_t v96 = 8;
            float64x2_t v348 = v97;
            float64x2_t v349 = v97;
          }
          else if (*v85)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, (uint64_t)v89, v95);
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v325 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
          }
          uint64_t v113 = (uint64_t)&v89[v96];
          unsigned int v114 = v85[1];
          if (v114 == 255)
          {
            float64x2_t v117 = *(float64x2_t *)(v113 + 16);
            float64x2_t v118 = *(float64x2_t *)(v113 + 48);
            float64x2_t v119 = *(float64x2_t *)(v113 + 144);
            float64x2_t v120 = *(float64x2_t *)(v113 + 176);
            float64x2_t v121 = *(float64x2_t *)(v113 + 32);
            float64x2_t v122 = *(float64x2_t *)(v113 + 128);
            float64x2_t v123 = *(float64x2_t *)(v113 + 64);
            float64x2_t v124 = *(float64x2_t *)(v113 + 96);
            float64x2_t v125 = *(float64x2_t *)(v113 + 160);
            float64x2_t v126 = *(float64x2_t *)(v113 + 192);
            float64x2_t v127 = *(float64x2_t *)(v113 + 208);
            float64x2_t v128 = *(float64x2_t *)(v113 + 224);
            float64x2_t v129 = *(float64x2_t *)(v113 + 240);
            float64x2_t v130 = *(float64x2_t *)(v113 + 80);
            float64x2_t v131 = *(float64x2_t *)(v113 + 112);
            float64x2_t v354 = *(float64x2_t *)v113;
            float64x2_t v355 = v121;
            float64x2_t v356 = v122;
            float64x2_t v357 = v125;
            float64x2_t v362 = v117;
            float64x2_t v363 = v118;
            float64x2_t v364 = v119;
            float64x2_t v365 = v120;
            float64x2_t v370 = v123;
            float64x2_t v371 = v124;
            float64x2_t v372 = v126;
            float64x2_t v373 = v128;
            uint64_t v115 = 256;
            float64x2_t v378 = v130;
            float64x2_t v379 = v131;
            float64x2_t v380 = v127;
            float64x2_t v381 = v129;
            unsigned int v94 = v46 + 1;
          }
          else
          {
            unsigned int v94 = v46 + 1;
            if (v114 == 7)
            {
              float64x2_t v116 = vld1q_dup_f64((const double *)v113);
              float64x2_t v354 = v116;
              float64x2_t v355 = v116;
              float64x2_t v356 = v116;
              float64x2_t v357 = v116;
              float64x2_t v362 = v116;
              float64x2_t v363 = v116;
              float64x2_t v364 = v116;
              float64x2_t v365 = v116;
              float64x2_t v370 = v116;
              float64x2_t v371 = v116;
              float64x2_t v372 = v116;
              float64x2_t v373 = v116;
              float64x2_t v378 = v116;
              float64x2_t v379 = v116;
              uint64_t v115 = 8;
              float64x2_t v380 = v116;
              float64x2_t v381 = v116;
            }
            else if (v85[1])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v354, 128, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              float64x2_t v356 = 0u;
              float64x2_t v357 = 0u;
              float64x2_t v354 = 0u;
              float64x2_t v355 = 0u;
              float64x2_t v362 = 0u;
              float64x2_t v363 = 0u;
              float64x2_t v364 = 0u;
              float64x2_t v365 = 0u;
              float64x2_t v370 = 0u;
              float64x2_t v371 = 0u;
              float64x2_t v372 = 0u;
              float64x2_t v373 = 0u;
              float64x2_t v378 = 0u;
              float64x2_t v379 = 0u;
              float64x2_t v380 = 0u;
              float64x2_t v381 = 0u;
            }
          }
          uint64_t v132 = v113 + v115;
          unsigned int v133 = v85[2];
          if (v133 == 255)
          {
            float64x2_t v136 = *(float64x2_t *)(v132 + 16);
            float64x2_t v137 = *(float64x2_t *)(v132 + 48);
            float64x2_t v138 = *(float64x2_t *)(v132 + 144);
            float64x2_t v139 = *(float64x2_t *)(v132 + 176);
            float64x2_t v140 = *(float64x2_t *)(v132 + 32);
            float64x2_t v141 = *(float64x2_t *)(v132 + 128);
            float64x2_t v142 = *(float64x2_t *)(v132 + 64);
            float64x2_t v143 = *(float64x2_t *)(v132 + 96);
            float64x2_t v144 = *(float64x2_t *)(v132 + 160);
            float64x2_t v145 = *(float64x2_t *)(v132 + 192);
            float64x2_t v146 = *(float64x2_t *)(v132 + 208);
            float64x2_t v147 = *(float64x2_t *)(v132 + 224);
            float64x2_t v148 = *(float64x2_t *)(v132 + 240);
            float64x2_t v149 = *(float64x2_t *)(v132 + 80);
            float64x2_t v150 = *(float64x2_t *)(v132 + 112);
            float64x2_t v326 = *(float64x2_t *)v132;
            float64x2_t v327 = v140;
            float64x2_t v328 = v141;
            float64x2_t v329 = v144;
            float64x2_t v334 = v136;
            float64x2_t v335 = v137;
            float64x2_t v336 = v138;
            float64x2_t v337 = v139;
            float64x2_t v342 = v142;
            float64x2_t v343 = v143;
            float64x2_t v344 = v145;
            float64x2_t v345 = v147;
            uint64_t v134 = 256;
            float64x2_t v350 = v149;
            float64x2_t v351 = v150;
            float64x2_t v352 = v146;
            float64x2_t v353 = v148;
          }
          else if (v133 == 7)
          {
            float64x2_t v135 = vld1q_dup_f64((const double *)v132);
            float64x2_t v326 = v135;
            float64x2_t v327 = v135;
            float64x2_t v328 = v135;
            float64x2_t v329 = v135;
            float64x2_t v334 = v135;
            float64x2_t v335 = v135;
            float64x2_t v336 = v135;
            float64x2_t v337 = v135;
            float64x2_t v342 = v135;
            float64x2_t v343 = v135;
            float64x2_t v344 = v135;
            float64x2_t v345 = v135;
            float64x2_t v350 = v135;
            float64x2_t v351 = v135;
            uint64_t v134 = 8;
            float64x2_t v352 = v135;
            float64x2_t v353 = v135;
          }
          else if (v85[2])
          {
            uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v132, v133);
          }
          else
          {
            uint64_t v134 = 0;
            float64x2_t v328 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
          }
          uint64_t v151 = v132 + v134;
          unsigned int v152 = v85[3];
          if (v152 == 255)
          {
            float64x2_t v155 = *(float64x2_t *)(v151 + 16);
            float64x2_t v156 = *(float64x2_t *)(v151 + 48);
            float64x2_t v157 = *(float64x2_t *)(v151 + 144);
            float64x2_t v158 = *(float64x2_t *)(v151 + 176);
            float64x2_t v159 = *(float64x2_t *)(v151 + 32);
            float64x2_t v160 = *(float64x2_t *)(v151 + 128);
            float64x2_t v161 = *(float64x2_t *)(v151 + 64);
            float64x2_t v162 = *(float64x2_t *)(v151 + 96);
            float64x2_t v163 = *(float64x2_t *)(v151 + 160);
            float64x2_t v164 = *(float64x2_t *)(v151 + 192);
            float64x2_t v165 = *(float64x2_t *)(v151 + 208);
            float64x2_t v166 = *(float64x2_t *)(v151 + 224);
            float64x2_t v167 = *(float64x2_t *)(v151 + 240);
            float64x2_t v168 = *(float64x2_t *)(v151 + 80);
            float64x2_t v169 = *(float64x2_t *)(v151 + 112);
            float64x2_t v358 = *(float64x2_t *)v151;
            float64x2_t v359 = v159;
            float64x2_t v360 = v160;
            float64x2_t v361 = v163;
            float64x2_t v366 = v155;
            float64x2_t v367 = v156;
            float64x2_t v368 = v157;
            float64x2_t v369 = v158;
            float64x2_t v374 = v161;
            float64x2_t v375 = v162;
            float64x2_t v376 = v164;
            float64x2_t v377 = v166;
            uint64_t v153 = 256;
            float64x2_t v382 = v168;
            float64x2_t v383 = v169;
            float64x2_t v384 = v165;
            float64x2_t v385 = v167;
          }
          else if (v152 == 7)
          {
            float64x2_t v154 = vld1q_dup_f64((const double *)v151);
            float64x2_t v358 = v154;
            float64x2_t v359 = v154;
            float64x2_t v360 = v154;
            float64x2_t v361 = v154;
            float64x2_t v366 = v154;
            float64x2_t v367 = v154;
            float64x2_t v368 = v154;
            float64x2_t v369 = v154;
            float64x2_t v374 = v154;
            float64x2_t v375 = v154;
            float64x2_t v376 = v154;
            float64x2_t v377 = v154;
            float64x2_t v382 = v154;
            float64x2_t v383 = v154;
            uint64_t v153 = 8;
            float64x2_t v384 = v154;
            float64x2_t v385 = v154;
          }
          else if (v85[3])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v358, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
          }
          uint64_t v170 = v151 + v153;
          unsigned int v171 = v85[4];
          if (v171 == 255)
          {
            float64x2_t v174 = *(float64x2_t *)(v170 + 16);
            float64x2_t v175 = *(float64x2_t *)(v170 + 48);
            float64x2_t v176 = *(float64x2_t *)(v170 + 144);
            float64x2_t v177 = *(float64x2_t *)(v170 + 176);
            float64x2_t v178 = *(float64x2_t *)(v170 + 32);
            float64x2_t v179 = *(float64x2_t *)(v170 + 128);
            float64x2_t v180 = *(float64x2_t *)(v170 + 64);
            float64x2_t v181 = *(float64x2_t *)(v170 + 96);
            float64x2_t v182 = *(float64x2_t *)(v170 + 160);
            float64x2_t v183 = *(float64x2_t *)(v170 + 192);
            float64x2_t v184 = *(float64x2_t *)(v170 + 208);
            float64x2_t v185 = *(float64x2_t *)(v170 + 224);
            float64x2_t v186 = *(float64x2_t *)(v170 + 240);
            float64x2_t v187 = *(float64x2_t *)(v170 + 80);
            float64x2_t v188 = *(float64x2_t *)(v170 + 112);
            float64x2_t v386 = *(float64x2_t *)v170;
            float64x2_t v387 = v178;
            float64x2_t v388 = v179;
            float64x2_t v389 = v182;
            float64x2_t v394 = v174;
            float64x2_t v395 = v175;
            float64x2_t v396 = v176;
            float64x2_t v397 = v177;
            float64x2_t v402 = v180;
            float64x2_t v403 = v181;
            float64x2_t v404 = v183;
            float64x2_t v405 = v185;
            uint64_t v172 = 256;
            float64x2_t v410 = v187;
            float64x2_t v411 = v188;
            float64x2_t v412 = v184;
            float64x2_t v413 = v186;
          }
          else if (v171 == 7)
          {
            float64x2_t v173 = vld1q_dup_f64((const double *)v170);
            float64x2_t v386 = v173;
            float64x2_t v387 = v173;
            float64x2_t v388 = v173;
            float64x2_t v389 = v173;
            float64x2_t v394 = v173;
            float64x2_t v395 = v173;
            float64x2_t v396 = v173;
            float64x2_t v397 = v173;
            float64x2_t v402 = v173;
            float64x2_t v403 = v173;
            float64x2_t v404 = v173;
            float64x2_t v405 = v173;
            float64x2_t v410 = v173;
            float64x2_t v411 = v173;
            float64x2_t v412 = v173;
            uint64_t v172 = 8;
            float64x2_t v413 = v173;
          }
          else if (v85[4])
          {
            uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v386, 128, v170, v171);
          }
          else
          {
            uint64_t v172 = 0;
            float64x2_t v388 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
          }
          uint64_t v189 = v170 + v172;
          unsigned int v190 = v85[5];
          if (v190 == 255)
          {
            float64x2_t v193 = *(float64x2_t *)(v189 + 16);
            float64x2_t v194 = *(float64x2_t *)(v189 + 48);
            float64x2_t v195 = *(float64x2_t *)(v189 + 144);
            float64x2_t v196 = *(float64x2_t *)(v189 + 176);
            float64x2_t v197 = *(float64x2_t *)(v189 + 32);
            float64x2_t v198 = *(float64x2_t *)(v189 + 128);
            float64x2_t v199 = *(float64x2_t *)(v189 + 64);
            float64x2_t v200 = *(float64x2_t *)(v189 + 96);
            float64x2_t v201 = *(float64x2_t *)(v189 + 160);
            float64x2_t v202 = *(float64x2_t *)(v189 + 192);
            float64x2_t v203 = *(float64x2_t *)(v189 + 208);
            float64x2_t v204 = *(float64x2_t *)(v189 + 224);
            float64x2_t v205 = *(float64x2_t *)(v189 + 240);
            float64x2_t v206 = *(float64x2_t *)(v189 + 80);
            float64x2_t v207 = *(float64x2_t *)(v189 + 112);
            float64x2_t v418 = *(float64x2_t *)v189;
            float64x2_t v419 = v197;
            float64x2_t v420 = v198;
            float64x2_t v421 = v201;
            float64x2_t v426 = v193;
            float64x2_t v427 = v194;
            float64x2_t v428 = v195;
            float64x2_t v429 = v196;
            float64x2_t v434 = v199;
            float64x2_t v435 = v200;
            float64x2_t v436 = v202;
            float64x2_t v437 = v204;
            uint64_t v191 = 256;
            float64x2_t v442 = v206;
            float64x2_t v443 = v207;
            float64x2_t v444 = v203;
            float64x2_t v445 = v205;
          }
          else if (v190 == 7)
          {
            float64x2_t v192 = vld1q_dup_f64((const double *)v189);
            float64x2_t v418 = v192;
            float64x2_t v419 = v192;
            float64x2_t v420 = v192;
            float64x2_t v421 = v192;
            float64x2_t v426 = v192;
            float64x2_t v427 = v192;
            float64x2_t v428 = v192;
            float64x2_t v429 = v192;
            float64x2_t v434 = v192;
            float64x2_t v435 = v192;
            float64x2_t v436 = v192;
            float64x2_t v437 = v192;
            float64x2_t v442 = v192;
            float64x2_t v443 = v192;
            float64x2_t v444 = v192;
            uint64_t v191 = 8;
            float64x2_t v445 = v192;
          }
          else if (v85[5])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v418, 128, v189, v190);
          }
          else
          {
            uint64_t v191 = 0;
            float64x2_t v420 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
            float64x2_t v445 = 0u;
          }
          uint64_t v208 = v189 + v191;
          unsigned int v209 = v85[6];
          if (v209 == 255)
          {
            float64x2_t v212 = *(float64x2_t *)(v208 + 16);
            float64x2_t v213 = *(float64x2_t *)(v208 + 48);
            float64x2_t v214 = *(float64x2_t *)(v208 + 144);
            float64x2_t v215 = *(float64x2_t *)(v208 + 176);
            float64x2_t v216 = *(float64x2_t *)(v208 + 32);
            float64x2_t v217 = *(float64x2_t *)(v208 + 128);
            float64x2_t v218 = *(float64x2_t *)(v208 + 64);
            float64x2_t v219 = *(float64x2_t *)(v208 + 96);
            float64x2_t v220 = *(float64x2_t *)(v208 + 160);
            float64x2_t v221 = *(float64x2_t *)(v208 + 192);
            float64x2_t v222 = *(float64x2_t *)(v208 + 208);
            float64x2_t v223 = *(float64x2_t *)(v208 + 224);
            float64x2_t v224 = *(float64x2_t *)(v208 + 240);
            float64x2_t v225 = *(float64x2_t *)(v208 + 80);
            float64x2_t v226 = *(float64x2_t *)(v208 + 112);
            float64x2_t v390 = *(float64x2_t *)v208;
            float64x2_t v391 = v216;
            float64x2_t v392 = v217;
            float64x2_t v393 = v220;
            float64x2_t v398 = v212;
            float64x2_t v399 = v213;
            float64x2_t v400 = v214;
            float64x2_t v401 = v215;
            float64x2_t v406 = v218;
            float64x2_t v407 = v219;
            float64x2_t v408 = v221;
            float64x2_t v409 = v223;
            uint64_t v210 = 256;
            float64x2_t v414 = v225;
            float64x2_t v415 = v226;
            float64x2_t v416 = v222;
            float64x2_t v417 = v224;
          }
          else if (v209 == 7)
          {
            float64x2_t v211 = vld1q_dup_f64((const double *)v208);
            float64x2_t v390 = v211;
            float64x2_t v391 = v211;
            float64x2_t v392 = v211;
            float64x2_t v393 = v211;
            float64x2_t v398 = v211;
            float64x2_t v399 = v211;
            float64x2_t v400 = v211;
            float64x2_t v401 = v211;
            float64x2_t v406 = v211;
            float64x2_t v407 = v211;
            float64x2_t v408 = v211;
            float64x2_t v409 = v211;
            float64x2_t v414 = v211;
            float64x2_t v415 = v211;
            float64x2_t v416 = v211;
            uint64_t v210 = 8;
            float64x2_t v417 = v211;
          }
          else if (v85[6])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v390, 128, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            float64x2_t v392 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v417 = 0u;
          }
          uint64_t v227 = v208 + v210;
          unsigned int v228 = v85[7];
          if (v228 == 255)
          {
            float64x2_t v232 = *(float64x2_t *)(v227 + 16);
            float64x2_t v233 = *(float64x2_t *)(v227 + 48);
            float64x2_t v234 = *(float64x2_t *)(v227 + 144);
            float64x2_t v235 = *(float64x2_t *)(v227 + 176);
            float64x2_t v236 = *(float64x2_t *)(v227 + 32);
            float64x2_t v237 = *(float64x2_t *)(v227 + 128);
            float64x2_t v238 = *(float64x2_t *)(v227 + 160);
            float64x2_t v239 = *(float64x2_t *)(v227 + 64);
            float64x2_t v240 = *(float64x2_t *)(v227 + 96);
            float64x2_t v241 = *(float64x2_t *)(v227 + 192);
            float64x2_t v242 = *(float64x2_t *)(v227 + 224);
            float64x2_t v243 = *(float64x2_t *)(v227 + 240);
            float64x2_t v244 = *(float64x2_t *)(v227 + 80);
            float64x2_t v245 = *(float64x2_t *)(v227 + 112);
            float64x2_t v246 = *(float64x2_t *)(v227 + 208);
            float64x2_t v422 = *(float64x2_t *)v227;
            float64x2_t v423 = v236;
            float64x2_t v424 = v237;
            float64x2_t v425 = v238;
            float64x2_t v430 = v232;
            float64x2_t v431 = v233;
            float64x2_t v432 = v234;
            float64x2_t v433 = v235;
            float64x2_t v438 = v239;
            float64x2_t v439 = v240;
            float64x2_t v440 = v241;
            float64x2_t v441 = v242;
            int v229 = v303;
            unsigned int v230 = v294;
            float64x2_t v446 = v244;
            float64x2_t v447 = v245;
            float64x2_t v448 = v246;
            float64x2_t v449 = v243;
            unsigned int v16 = v296;
            if (!v303) {
              goto LABEL_214;
            }
          }
          else
          {
            unsigned int v16 = v296;
            if (v228 == 7)
            {
              float64x2_t v231 = vld1q_dup_f64((const double *)v227);
              float64x2_t v422 = v231;
              float64x2_t v423 = v231;
              float64x2_t v424 = v231;
              float64x2_t v425 = v231;
              float64x2_t v430 = v231;
              float64x2_t v431 = v231;
              float64x2_t v432 = v231;
              float64x2_t v433 = v231;
              float64x2_t v438 = v231;
              float64x2_t v439 = v231;
              float64x2_t v440 = v231;
              float64x2_t v441 = v231;
              float64x2_t v446 = v231;
              float64x2_t v447 = v231;
              float64x2_t v448 = v231;
              int v229 = v303;
              unsigned int v230 = v294;
              float64x2_t v449 = v231;
              if (!v303) {
                goto LABEL_214;
              }
            }
            else if (v228)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v422, 128, v227, v228);
              unsigned int v230 = v315;
              unsigned int v93 = v316;
              int v229 = v317;
              if (!v317) {
                goto LABEL_214;
              }
            }
            else
            {
              float64x2_t v424 = 0u;
              float64x2_t v425 = 0u;
              float64x2_t v422 = 0u;
              float64x2_t v423 = 0u;
              float64x2_t v430 = 0u;
              float64x2_t v431 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v433 = 0u;
              float64x2_t v438 = 0u;
              float64x2_t v439 = 0u;
              float64x2_t v440 = 0u;
              float64x2_t v441 = 0u;
              float64x2_t v446 = 0u;
              float64x2_t v447 = 0u;
              int v229 = v303;
              unsigned int v230 = v294;
              float64x2_t v448 = 0u;
              float64x2_t v449 = 0u;
              if (!v303) {
                goto LABEL_214;
              }
            }
          }
          if (v318)
          {
            uint64_t v247 = 0;
            unint64_t v248 = (unint64_t)v230 << 7;
            uint64_t v249 = 8 * v93;
            BOOL v250 = (char *)&v322 + v248 + v249;
            uint64_t v251 = v313;
            uint64_t v252 = v314;
            unint64_t v253 = 8 * v318;
            if (v253 <= 1) {
              unint64_t v254 = 1;
            }
            else {
              unint64_t v254 = 8 * v318;
            }
            unint64_t v255 = v248 + v249;
            int v256 = (char *)&v322 + v248 + v249;
            if (v254) {
              BOOL v257 = (v254 - 1) >> 32 == 0;
            }
            else {
              BOOL v257 = 0;
            }
            char v258 = !v257;
            uint64_t v259 = v254 & 0x7FFFFFFE0;
            uint64_t v260 = v254 & 0x7FFFFFFF8;
            unsigned int v261 = (char *)&v323 + v255;
            int v262 = (long long *)(v313 + 16);
            unsigned int v263 = v250;
            uint64_t v264 = v313;
            do
            {
              unsigned int v265 = (char *)(v251 + v252 * v247);
              int64x2_t v266 = &v250[128 * v247];
              if ((unint64_t)(&v256[128 * v247] - v265) < 0x20) {
                char v267 = 1;
              }
              else {
                char v267 = v258;
              }
              if (v267)
              {
                int v268 = 0;
                goto LABEL_211;
              }
              if (v254 >= 0x20)
              {
                BOOL v270 = v262;
                BOOL v271 = v261;
                uint64_t v272 = v254 & 0x7FFFFFFE0;
                do
                {
                  long long v273 = *v270;
                  *(v271 - 1) = *(v270 - 1);
                  *BOOL v271 = v273;
                  v271 += 2;
                  v270 += 2;
                  v272 -= 32;
                }
                while (v272);
                if (v254 == v259) {
                  goto LABEL_194;
                }
                uint64_t v269 = v254 & 0x7FFFFFFE0;
                if ((v254 & 0x18) == 0)
                {
                  v265 += v259;
                  v266 += v259;
                  int v268 = v254 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v269 = 0;
              }
              v266 += v260;
              unint64_t v274 = v269 - (v254 & 0x7FFFFFFF8);
              unsigned int v275 = (uint64_t *)(v264 + v269);
              unsigned int v276 = &v263[v269];
              do
              {
                uint64_t v277 = *v275++;
                *(void *)unsigned int v276 = v277;
                v276 += 8;
                v274 += 8;
              }
              while (v274);
              if (v254 == v260) {
                goto LABEL_194;
              }
              v265 += v260;
              int v268 = v254 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v278 = v268 + 1;
              do
              {
                char v279 = *v265++;
                *v266++ = v279;
              }
              while (v253 > v278++);
LABEL_194:
              ++v247;
              v261 += 128;
              int v262 = (long long *)((char *)v262 + v252);
              v264 += v252;
              v263 += 128;
            }
            while (v247 != v229);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v322, 128, (unint64_t)v311, v312, v319, v320);
LABEL_215:
          if (v308) {
            memcpy(v307, v89, 0x800uLL);
          }
          BOOL v29 = v46 == v297 >> 4;
          unsigned int v46 = v94;
          uint64_t result = v304;
        }
        while (!v29);
        BOOL v29 = v28++ == v287;
      }
      while (!v29);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v299 = v21;
  uint64_t v300 = v22;
  uint64_t v286 = v23;
  uint64_t v24 = v12;
  uint64_t v450 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v302 = v14;
  unsigned int v288 = v14 + a10 - 1;
  uint64_t v304 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v287 = v288 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v308 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v298 = 0;
LABEL_32:
      unsigned int v295 = v35 - 4;
      unsigned int v292 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v285 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v298 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v298 = 0;
  unsigned int v285 = 0;
  unsigned int v292 = 0;
  unsigned int v295 = 0;
LABEL_33:
  if (v28 <= v287)
  {
    unsigned int v297 = v16 + a9 - 1;
    unsigned int v284 = v16 >> 4;
    if (v16 >> 4 <= v297 >> 4)
    {
      unsigned int v306 = v26 >> 4;
      unsigned int v283 = v27 >> 4;
      int v305 = (v26 & 0xF) + 1;
      int v282 = (v27 & 0xF) + 1;
      int v281 = ~(-1 << v292);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v293 = v43.i32[0] | v43.i32[1];
      BOOL v290 = v43.i32[1] != 0;
      int8x8_t v291 = v43;
      BOOL v289 = v43.i32[0] != 0;
      unsigned int v296 = v16;
      do
      {
        unsigned int v44 = (16 * v28) | 0xF;
        if (16 * v28 <= v302) {
          int v45 = v302;
        }
        else {
          int v45 = 16 * v28;
        }
        if (v288 < v44) {
          unsigned int v44 = v288;
        }
        int v294 = v45 - 16 * v28;
        int v303 = v44 - v45 + 1;
        unsigned int v46 = v284;
        int v47 = v282;
        if (v28 != v283) {
          int v47 = 16;
        }
        unsigned int v309 = v47;
        int v48 = v28 & v281;
        uint64_t v301 = v286 + (v45 - v302) * a11;
        do
        {
          unsigned int v49 = 16 * v46;
          unsigned int v50 = 16 * (v46 + 1) - 1;
          if (16 * v46 <= v16) {
            int v51 = v16;
          }
          else {
            int v51 = 16 * v46;
          }
          if (v297 < v50) {
            unsigned int v50 = v297;
          }
          int v52 = v50 - v51 + 1;
          if (v46 == v306) {
            unsigned int v53 = v305;
          }
          else {
            unsigned int v53 = 16;
          }
          BOOL v54 = 1;
          if (16 * v28 >= v302 && v49 >= v16)
          {
            int v55 = v305;
            if (v46 != v306) {
              int v55 = 16;
            }
            BOOL v54 = v52 != v55 || v303 != v309;
          }
          if (v298)
          {
            if (v295 | v292)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v295 != 0;
              BOOL v61 = v292 != 0;
              unsigned int v62 = v295;
              unsigned int v63 = v292;
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v46 & ~(-1 << v295) & v59) << v57++;
                }
                else {
                  unsigned int v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v48 & v59) << v57++;
                }
                else {
                  unsigned int v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v71 = *(void *)(result + 320) * ((v46 >> v295) + (v28 >> v292) * v285) + (v58 << 11);
          }
          else
          {
            if (v293)
            {
              int v64 = 0;
              uint64_t v65 = 0;
              int v66 = 1;
              BOOL v67 = v290;
              BOOL v68 = v289;
              __int32 v69 = v291.i32[1];
              __int32 v70 = v291.i32[0];
              do
              {
                --v69;
                if (v67) {
                  v65 |= (unint64_t)(v66 & v46) << v64++;
                }
                else {
                  __int32 v69 = 0;
                }
                --v70;
                if (v68) {
                  v65 |= (unint64_t)(v66 & v28) << v64++;
                }
                else {
                  __int32 v70 = 0;
                }
                v66 *= 2;
                --v64;
                BOOL v68 = v70 != 0;
                BOOL v67 = v69 != 0;
              }
              while (v70 | v69);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v71 = v65 << 11;
          }
          unsigned int v72 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v72 <= 1) {
            unsigned int v72 = 1;
          }
          unsigned int v73 = v72 + 15;
          if (v73 < 0x20) {
            unsigned int v74 = 0;
          }
          else {
            unsigned int v74 = 32 - __clz(~(-1 << -(char)__clz((v73 >> 4) - 1)));
          }
          unsigned int v75 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20)
          {
            unsigned int v77 = 0;
            if (!v74)
            {
LABEL_109:
              uint64_t v79 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
            if (!(v77 | v74)) {
              goto LABEL_109;
            }
          }
          int v78 = 0;
          uint64_t v79 = 0;
          BOOL v80 = v74 != 0;
          BOOL v81 = v77 != 0;
          int v82 = 1;
          do
          {
            --v74;
            if (v80) {
              v79 |= (unint64_t)(v82 & v46) << v78++;
            }
            else {
              unsigned int v74 = 0;
            }
            --v77;
            if (v81) {
              v79 |= (unint64_t)(v82 & v28) << v78++;
            }
            else {
              unsigned int v77 = 0;
            }
            v82 *= 2;
            --v78;
            BOOL v81 = v77 != 0;
            BOOL v80 = v74 != 0;
          }
          while (v77 | v74);
LABEL_110:
          unsigned int v83 = v51 - v16;
          int v84 = v53 < 0x10 || v54;
          int32x4_t v85 = (char *)(v300 + 8 * v79);
          uint64_t v86 = (_OWORD *)(v301 + 8 * v83);
          uint64_t v87 = (void *)(v299 + v71);
          if (v309 < 0x10) {
            int v88 = 1;
          }
          else {
            int v88 = v84;
          }
          int64x2_t v307 = v87;
          if (v308)
          {
            uint64_t v89 = __dst;
            if (!v88) {
              goto LABEL_122;
            }
            int32x4_t v90 = (char *)(v300 + 8 * v79);
            int v91 = v52;
            char v92 = v53;
            memcpy(__dst, v87, sizeof(__dst));
            unsigned int v49 = 16 * v46;
            LOBYTE(v53) = v92;
            int v52 = v91;
            int32x4_t v85 = v90;
            int v48 = v28 & v281;
            uint64_t result = v304;
          }
          else
          {
            uint64_t v89 = v87;
            if (!v88)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v86, a11, v89, v85, v53, v309);
              goto LABEL_123;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v93 = v51 - v49;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          int64x2_t v311 = v89;
          unsigned __int8 v319 = v53;
          unsigned __int8 v320 = v309;
          int v315 = v294;
          unsigned int v316 = v93;
          int32x4_t v312 = v85;
          uint64_t v313 = v86;
          uint64_t v314 = a11;
          int v317 = v303;
          unsigned int v318 = v52;
          if (v54)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
LABEL_123:
            unsigned int v16 = v296;
            unsigned int v94 = v46 + 1;
            goto LABEL_215;
          }
          unsigned int v95 = *v85;
          if (v95 == 255)
          {
            float64x2_t v98 = *((float64x2_t *)v89 + 1);
            float64x2_t v99 = *((float64x2_t *)v89 + 3);
            float64x2_t v100 = *((float64x2_t *)v89 + 9);
            float64x2_t v101 = *((float64x2_t *)v89 + 11);
            float64x2_t v102 = *((float64x2_t *)v89 + 2);
            float64x2_t v103 = *((float64x2_t *)v89 + 8);
            float64x2_t v104 = *((float64x2_t *)v89 + 4);
            float64x2_t v105 = *((float64x2_t *)v89 + 6);
            float64x2_t v106 = *((float64x2_t *)v89 + 10);
            float64x2_t v107 = *((float64x2_t *)v89 + 12);
            float64x2_t v108 = *((float64x2_t *)v89 + 13);
            float64x2_t v109 = *((float64x2_t *)v89 + 14);
            float64x2_t v110 = *((float64x2_t *)v89 + 15);
            float64x2_t v111 = *((float64x2_t *)v89 + 5);
            float64x2_t v112 = *((float64x2_t *)v89 + 7);
            float64x2_t v322 = *(float64x2_t *)v89;
            float64x2_t v323 = v102;
            float64x2_t v324 = v103;
            float64x2_t v325 = v106;
            float64x2_t v330 = v98;
            float64x2_t v331 = v99;
            float64x2_t v332 = v100;
            float64x2_t v333 = v101;
            float64x2_t v338 = v104;
            float64x2_t v339 = v105;
            float64x2_t v340 = v107;
            float64x2_t v341 = v109;
            uint64_t v96 = 256;
            float64x2_t v346 = v111;
            float64x2_t v347 = v112;
            float64x2_t v348 = v108;
            float64x2_t v349 = v110;
          }
          else if (v95 == 7)
          {
            float64x2_t v97 = vld1q_dup_f64((const double *)v89);
            float64x2_t v322 = v97;
            float64x2_t v323 = v97;
            float64x2_t v324 = v97;
            float64x2_t v325 = v97;
            float64x2_t v330 = v97;
            float64x2_t v331 = v97;
            float64x2_t v332 = v97;
            float64x2_t v333 = v97;
            float64x2_t v338 = v97;
            float64x2_t v339 = v97;
            float64x2_t v340 = v97;
            float64x2_t v341 = v97;
            float64x2_t v346 = v97;
            float64x2_t v347 = v97;
            uint64_t v96 = 8;
            float64x2_t v348 = v97;
            float64x2_t v349 = v97;
          }
          else if (*v85)
          {
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v322, 128, (uint64_t)v89, v95);
          }
          else
          {
            uint64_t v96 = 0;
            float64x2_t v325 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
          }
          uint64_t v113 = (uint64_t)v89 + v96;
          unsigned int v114 = v85[1];
          if (v114 == 255)
          {
            float64x2_t v117 = *(float64x2_t *)(v113 + 16);
            float64x2_t v118 = *(float64x2_t *)(v113 + 48);
            float64x2_t v119 = *(float64x2_t *)(v113 + 144);
            float64x2_t v120 = *(float64x2_t *)(v113 + 176);
            float64x2_t v121 = *(float64x2_t *)(v113 + 32);
            float64x2_t v122 = *(float64x2_t *)(v113 + 128);
            float64x2_t v123 = *(float64x2_t *)(v113 + 64);
            float64x2_t v124 = *(float64x2_t *)(v113 + 96);
            float64x2_t v125 = *(float64x2_t *)(v113 + 160);
            float64x2_t v126 = *(float64x2_t *)(v113 + 192);
            float64x2_t v127 = *(float64x2_t *)(v113 + 208);
            float64x2_t v128 = *(float64x2_t *)(v113 + 224);
            float64x2_t v129 = *(float64x2_t *)(v113 + 240);
            float64x2_t v130 = *(float64x2_t *)(v113 + 80);
            float64x2_t v131 = *(float64x2_t *)(v113 + 112);
            float64x2_t v354 = *(float64x2_t *)v113;
            float64x2_t v355 = v121;
            float64x2_t v356 = v122;
            float64x2_t v357 = v125;
            float64x2_t v362 = v117;
            float64x2_t v363 = v118;
            float64x2_t v364 = v119;
            float64x2_t v365 = v120;
            float64x2_t v370 = v123;
            float64x2_t v371 = v124;
            float64x2_t v372 = v126;
            float64x2_t v373 = v128;
            uint64_t v115 = 256;
            float64x2_t v378 = v130;
            float64x2_t v379 = v131;
            float64x2_t v380 = v127;
            float64x2_t v381 = v129;
            unsigned int v94 = v46 + 1;
          }
          else
          {
            unsigned int v94 = v46 + 1;
            if (v114 == 7)
            {
              float64x2_t v116 = vld1q_dup_f64((const double *)v113);
              float64x2_t v354 = v116;
              float64x2_t v355 = v116;
              float64x2_t v356 = v116;
              float64x2_t v357 = v116;
              float64x2_t v362 = v116;
              float64x2_t v363 = v116;
              float64x2_t v364 = v116;
              float64x2_t v365 = v116;
              float64x2_t v370 = v116;
              float64x2_t v371 = v116;
              float64x2_t v372 = v116;
              float64x2_t v373 = v116;
              float64x2_t v378 = v116;
              float64x2_t v379 = v116;
              uint64_t v115 = 8;
              float64x2_t v380 = v116;
              float64x2_t v381 = v116;
            }
            else if (v85[1])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v354, 128, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              float64x2_t v356 = 0u;
              float64x2_t v357 = 0u;
              float64x2_t v354 = 0u;
              float64x2_t v355 = 0u;
              float64x2_t v362 = 0u;
              float64x2_t v363 = 0u;
              float64x2_t v364 = 0u;
              float64x2_t v365 = 0u;
              float64x2_t v370 = 0u;
              float64x2_t v371 = 0u;
              float64x2_t v372 = 0u;
              float64x2_t v373 = 0u;
              float64x2_t v378 = 0u;
              float64x2_t v379 = 0u;
              float64x2_t v380 = 0u;
              float64x2_t v381 = 0u;
            }
          }
          uint64_t v132 = v113 + v115;
          unsigned int v133 = v85[2];
          if (v133 == 255)
          {
            float64x2_t v136 = *(float64x2_t *)(v132 + 16);
            float64x2_t v137 = *(float64x2_t *)(v132 + 48);
            float64x2_t v138 = *(float64x2_t *)(v132 + 144);
            float64x2_t v139 = *(float64x2_t *)(v132 + 176);
            float64x2_t v140 = *(float64x2_t *)(v132 + 32);
            float64x2_t v141 = *(float64x2_t *)(v132 + 128);
            float64x2_t v142 = *(float64x2_t *)(v132 + 64);
            float64x2_t v143 = *(float64x2_t *)(v132 + 96);
            float64x2_t v144 = *(float64x2_t *)(v132 + 160);
            float64x2_t v145 = *(float64x2_t *)(v132 + 192);
            float64x2_t v146 = *(float64x2_t *)(v132 + 208);
            float64x2_t v147 = *(float64x2_t *)(v132 + 224);
            float64x2_t v148 = *(float64x2_t *)(v132 + 240);
            float64x2_t v149 = *(float64x2_t *)(v132 + 80);
            float64x2_t v150 = *(float64x2_t *)(v132 + 112);
            float64x2_t v326 = *(float64x2_t *)v132;
            float64x2_t v327 = v140;
            float64x2_t v328 = v141;
            float64x2_t v329 = v144;
            float64x2_t v334 = v136;
            float64x2_t v335 = v137;
            float64x2_t v336 = v138;
            float64x2_t v337 = v139;
            float64x2_t v342 = v142;
            float64x2_t v343 = v143;
            float64x2_t v344 = v145;
            float64x2_t v345 = v147;
            uint64_t v134 = 256;
            float64x2_t v350 = v149;
            float64x2_t v351 = v150;
            float64x2_t v352 = v146;
            float64x2_t v353 = v148;
          }
          else if (v133 == 7)
          {
            float64x2_t v135 = vld1q_dup_f64((const double *)v132);
            float64x2_t v326 = v135;
            float64x2_t v327 = v135;
            float64x2_t v328 = v135;
            float64x2_t v329 = v135;
            float64x2_t v334 = v135;
            float64x2_t v335 = v135;
            float64x2_t v336 = v135;
            float64x2_t v337 = v135;
            float64x2_t v342 = v135;
            float64x2_t v343 = v135;
            float64x2_t v344 = v135;
            float64x2_t v345 = v135;
            float64x2_t v350 = v135;
            float64x2_t v351 = v135;
            uint64_t v134 = 8;
            float64x2_t v352 = v135;
            float64x2_t v353 = v135;
          }
          else if (v85[2])
          {
            uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v326, 128, v132, v133);
          }
          else
          {
            uint64_t v134 = 0;
            float64x2_t v328 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
            float64x2_t v353 = 0u;
          }
          uint64_t v151 = v132 + v134;
          unsigned int v152 = v85[3];
          if (v152 == 255)
          {
            float64x2_t v155 = *(float64x2_t *)(v151 + 16);
            float64x2_t v156 = *(float64x2_t *)(v151 + 48);
            float64x2_t v157 = *(float64x2_t *)(v151 + 144);
            float64x2_t v158 = *(float64x2_t *)(v151 + 176);
            float64x2_t v159 = *(float64x2_t *)(v151 + 32);
            float64x2_t v160 = *(float64x2_t *)(v151 + 128);
            float64x2_t v161 = *(float64x2_t *)(v151 + 64);
            float64x2_t v162 = *(float64x2_t *)(v151 + 96);
            float64x2_t v163 = *(float64x2_t *)(v151 + 160);
            float64x2_t v164 = *(float64x2_t *)(v151 + 192);
            float64x2_t v165 = *(float64x2_t *)(v151 + 208);
            float64x2_t v166 = *(float64x2_t *)(v151 + 224);
            float64x2_t v167 = *(float64x2_t *)(v151 + 240);
            float64x2_t v168 = *(float64x2_t *)(v151 + 80);
            float64x2_t v169 = *(float64x2_t *)(v151 + 112);
            float64x2_t v358 = *(float64x2_t *)v151;
            float64x2_t v359 = v159;
            float64x2_t v360 = v160;
            float64x2_t v361 = v163;
            float64x2_t v366 = v155;
            float64x2_t v367 = v156;
            float64x2_t v368 = v157;
            float64x2_t v369 = v158;
            float64x2_t v374 = v161;
            float64x2_t v375 = v162;
            float64x2_t v376 = v164;
            float64x2_t v377 = v166;
            uint64_t v153 = 256;
            float64x2_t v382 = v168;
            float64x2_t v383 = v169;
            float64x2_t v384 = v165;
            float64x2_t v385 = v167;
          }
          else if (v152 == 7)
          {
            float64x2_t v154 = vld1q_dup_f64((const double *)v151);
            float64x2_t v358 = v154;
            float64x2_t v359 = v154;
            float64x2_t v360 = v154;
            float64x2_t v361 = v154;
            float64x2_t v366 = v154;
            float64x2_t v367 = v154;
            float64x2_t v368 = v154;
            float64x2_t v369 = v154;
            float64x2_t v374 = v154;
            float64x2_t v375 = v154;
            float64x2_t v376 = v154;
            float64x2_t v377 = v154;
            float64x2_t v382 = v154;
            float64x2_t v383 = v154;
            uint64_t v153 = 8;
            float64x2_t v384 = v154;
            float64x2_t v385 = v154;
          }
          else if (v85[3])
          {
            uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v358, 128, v151, v152);
          }
          else
          {
            uint64_t v153 = 0;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
            float64x2_t v385 = 0u;
          }
          uint64_t v170 = v151 + v153;
          unsigned int v171 = v85[4];
          if (v171 == 255)
          {
            float64x2_t v174 = *(float64x2_t *)(v170 + 16);
            float64x2_t v175 = *(float64x2_t *)(v170 + 48);
            float64x2_t v176 = *(float64x2_t *)(v170 + 144);
            float64x2_t v177 = *(float64x2_t *)(v170 + 176);
            float64x2_t v178 = *(float64x2_t *)(v170 + 32);
            float64x2_t v179 = *(float64x2_t *)(v170 + 128);
            float64x2_t v180 = *(float64x2_t *)(v170 + 64);
            float64x2_t v181 = *(float64x2_t *)(v170 + 96);
            float64x2_t v182 = *(float64x2_t *)(v170 + 160);
            float64x2_t v183 = *(float64x2_t *)(v170 + 192);
            float64x2_t v184 = *(float64x2_t *)(v170 + 208);
            float64x2_t v185 = *(float64x2_t *)(v170 + 224);
            float64x2_t v186 = *(float64x2_t *)(v170 + 240);
            float64x2_t v187 = *(float64x2_t *)(v170 + 80);
            float64x2_t v188 = *(float64x2_t *)(v170 + 112);
            float64x2_t v386 = *(float64x2_t *)v170;
            float64x2_t v387 = v178;
            float64x2_t v388 = v179;
            float64x2_t v389 = v182;
            float64x2_t v394 = v174;
            float64x2_t v395 = v175;
            float64x2_t v396 = v176;
            float64x2_t v397 = v177;
            float64x2_t v402 = v180;
            float64x2_t v403 = v181;
            float64x2_t v404 = v183;
            float64x2_t v405 = v185;
            uint64_t v172 = 256;
            float64x2_t v410 = v187;
            float64x2_t v411 = v188;
            float64x2_t v412 = v184;
            float64x2_t v413 = v186;
          }
          else if (v171 == 7)
          {
            float64x2_t v173 = vld1q_dup_f64((const double *)v170);
            float64x2_t v386 = v173;
            float64x2_t v387 = v173;
            float64x2_t v388 = v173;
            float64x2_t v389 = v173;
            float64x2_t v394 = v173;
            float64x2_t v395 = v173;
            float64x2_t v396 = v173;
            float64x2_t v397 = v173;
            float64x2_t v402 = v173;
            float64x2_t v403 = v173;
            float64x2_t v404 = v173;
            float64x2_t v405 = v173;
            float64x2_t v410 = v173;
            float64x2_t v411 = v173;
            float64x2_t v412 = v173;
            uint64_t v172 = 8;
            float64x2_t v413 = v173;
          }
          else if (v85[4])
          {
            uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v386, 128, v170, v171);
          }
          else
          {
            uint64_t v172 = 0;
            float64x2_t v388 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v387 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
            float64x2_t v413 = 0u;
          }
          uint64_t v189 = v170 + v172;
          unsigned int v190 = v85[5];
          if (v190 == 255)
          {
            float64x2_t v193 = *(float64x2_t *)(v189 + 16);
            float64x2_t v194 = *(float64x2_t *)(v189 + 48);
            float64x2_t v195 = *(float64x2_t *)(v189 + 144);
            float64x2_t v196 = *(float64x2_t *)(v189 + 176);
            float64x2_t v197 = *(float64x2_t *)(v189 + 32);
            float64x2_t v198 = *(float64x2_t *)(v189 + 128);
            float64x2_t v199 = *(float64x2_t *)(v189 + 64);
            float64x2_t v200 = *(float64x2_t *)(v189 + 96);
            float64x2_t v201 = *(float64x2_t *)(v189 + 160);
            float64x2_t v202 = *(float64x2_t *)(v189 + 192);
            float64x2_t v203 = *(float64x2_t *)(v189 + 208);
            float64x2_t v204 = *(float64x2_t *)(v189 + 224);
            float64x2_t v205 = *(float64x2_t *)(v189 + 240);
            float64x2_t v206 = *(float64x2_t *)(v189 + 80);
            float64x2_t v207 = *(float64x2_t *)(v189 + 112);
            float64x2_t v418 = *(float64x2_t *)v189;
            float64x2_t v419 = v197;
            float64x2_t v420 = v198;
            float64x2_t v421 = v201;
            float64x2_t v426 = v193;
            float64x2_t v427 = v194;
            float64x2_t v428 = v195;
            float64x2_t v429 = v196;
            float64x2_t v434 = v199;
            float64x2_t v435 = v200;
            float64x2_t v436 = v202;
            float64x2_t v437 = v204;
            uint64_t v191 = 256;
            float64x2_t v442 = v206;
            float64x2_t v443 = v207;
            float64x2_t v444 = v203;
            float64x2_t v445 = v205;
          }
          else if (v190 == 7)
          {
            float64x2_t v192 = vld1q_dup_f64((const double *)v189);
            float64x2_t v418 = v192;
            float64x2_t v419 = v192;
            float64x2_t v420 = v192;
            float64x2_t v421 = v192;
            float64x2_t v426 = v192;
            float64x2_t v427 = v192;
            float64x2_t v428 = v192;
            float64x2_t v429 = v192;
            float64x2_t v434 = v192;
            float64x2_t v435 = v192;
            float64x2_t v436 = v192;
            float64x2_t v437 = v192;
            float64x2_t v442 = v192;
            float64x2_t v443 = v192;
            float64x2_t v444 = v192;
            uint64_t v191 = 8;
            float64x2_t v445 = v192;
          }
          else if (v85[5])
          {
            uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v418, 128, v189, v190);
          }
          else
          {
            uint64_t v191 = 0;
            float64x2_t v420 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v419 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
            float64x2_t v445 = 0u;
          }
          uint64_t v208 = v189 + v191;
          unsigned int v209 = v85[6];
          if (v209 == 255)
          {
            float64x2_t v212 = *(float64x2_t *)(v208 + 16);
            float64x2_t v213 = *(float64x2_t *)(v208 + 48);
            float64x2_t v214 = *(float64x2_t *)(v208 + 144);
            float64x2_t v215 = *(float64x2_t *)(v208 + 176);
            float64x2_t v216 = *(float64x2_t *)(v208 + 32);
            float64x2_t v217 = *(float64x2_t *)(v208 + 128);
            float64x2_t v218 = *(float64x2_t *)(v208 + 64);
            float64x2_t v219 = *(float64x2_t *)(v208 + 96);
            float64x2_t v220 = *(float64x2_t *)(v208 + 160);
            float64x2_t v221 = *(float64x2_t *)(v208 + 192);
            float64x2_t v222 = *(float64x2_t *)(v208 + 208);
            float64x2_t v223 = *(float64x2_t *)(v208 + 224);
            float64x2_t v224 = *(float64x2_t *)(v208 + 240);
            float64x2_t v225 = *(float64x2_t *)(v208 + 80);
            float64x2_t v226 = *(float64x2_t *)(v208 + 112);
            float64x2_t v390 = *(float64x2_t *)v208;
            float64x2_t v391 = v216;
            float64x2_t v392 = v217;
            float64x2_t v393 = v220;
            float64x2_t v398 = v212;
            float64x2_t v399 = v213;
            float64x2_t v400 = v214;
            float64x2_t v401 = v215;
            float64x2_t v406 = v218;
            float64x2_t v407 = v219;
            float64x2_t v408 = v221;
            float64x2_t v409 = v223;
            uint64_t v210 = 256;
            float64x2_t v414 = v225;
            float64x2_t v415 = v226;
            float64x2_t v416 = v222;
            float64x2_t v417 = v224;
          }
          else if (v209 == 7)
          {
            float64x2_t v211 = vld1q_dup_f64((const double *)v208);
            float64x2_t v390 = v211;
            float64x2_t v391 = v211;
            float64x2_t v392 = v211;
            float64x2_t v393 = v211;
            float64x2_t v398 = v211;
            float64x2_t v399 = v211;
            float64x2_t v400 = v211;
            float64x2_t v401 = v211;
            float64x2_t v406 = v211;
            float64x2_t v407 = v211;
            float64x2_t v408 = v211;
            float64x2_t v409 = v211;
            float64x2_t v414 = v211;
            float64x2_t v415 = v211;
            float64x2_t v416 = v211;
            uint64_t v210 = 8;
            float64x2_t v417 = v211;
          }
          else if (v85[6])
          {
            uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v390, 128, v208, v209);
          }
          else
          {
            uint64_t v210 = 0;
            float64x2_t v392 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v391 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
            float64x2_t v417 = 0u;
          }
          uint64_t v227 = v208 + v210;
          unsigned int v228 = v85[7];
          if (v228 == 255)
          {
            float64x2_t v232 = *(float64x2_t *)(v227 + 16);
            float64x2_t v233 = *(float64x2_t *)(v227 + 48);
            float64x2_t v234 = *(float64x2_t *)(v227 + 144);
            float64x2_t v235 = *(float64x2_t *)(v227 + 176);
            float64x2_t v236 = *(float64x2_t *)(v227 + 32);
            float64x2_t v237 = *(float64x2_t *)(v227 + 128);
            float64x2_t v238 = *(float64x2_t *)(v227 + 160);
            float64x2_t v239 = *(float64x2_t *)(v227 + 64);
            float64x2_t v240 = *(float64x2_t *)(v227 + 96);
            float64x2_t v241 = *(float64x2_t *)(v227 + 192);
            float64x2_t v242 = *(float64x2_t *)(v227 + 224);
            float64x2_t v243 = *(float64x2_t *)(v227 + 240);
            float64x2_t v244 = *(float64x2_t *)(v227 + 80);
            float64x2_t v245 = *(float64x2_t *)(v227 + 112);
            float64x2_t v246 = *(float64x2_t *)(v227 + 208);
            float64x2_t v422 = *(float64x2_t *)v227;
            float64x2_t v423 = v236;
            float64x2_t v424 = v237;
            float64x2_t v425 = v238;
            float64x2_t v430 = v232;
            float64x2_t v431 = v233;
            float64x2_t v432 = v234;
            float64x2_t v433 = v235;
            float64x2_t v438 = v239;
            float64x2_t v439 = v240;
            float64x2_t v440 = v241;
            float64x2_t v441 = v242;
            int v229 = v303;
            unsigned int v230 = v294;
            float64x2_t v446 = v244;
            float64x2_t v447 = v245;
            float64x2_t v448 = v246;
            float64x2_t v449 = v243;
            unsigned int v16 = v296;
            if (!v303) {
              goto LABEL_214;
            }
          }
          else
          {
            unsigned int v16 = v296;
            if (v228 == 7)
            {
              float64x2_t v231 = vld1q_dup_f64((const double *)v227);
              float64x2_t v422 = v231;
              float64x2_t v423 = v231;
              float64x2_t v424 = v231;
              float64x2_t v425 = v231;
              float64x2_t v430 = v231;
              float64x2_t v431 = v231;
              float64x2_t v432 = v231;
              float64x2_t v433 = v231;
              float64x2_t v438 = v231;
              float64x2_t v439 = v231;
              float64x2_t v440 = v231;
              float64x2_t v441 = v231;
              float64x2_t v446 = v231;
              float64x2_t v447 = v231;
              float64x2_t v448 = v231;
              int v229 = v303;
              unsigned int v230 = v294;
              float64x2_t v449 = v231;
              if (!v303) {
                goto LABEL_214;
              }
            }
            else if (v228)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v422, 128, v227, v228);
              unsigned int v230 = v315;
              unsigned int v93 = v316;
              int v229 = v317;
              if (!v317) {
                goto LABEL_214;
              }
            }
            else
            {
              float64x2_t v424 = 0u;
              float64x2_t v425 = 0u;
              float64x2_t v422 = 0u;
              float64x2_t v423 = 0u;
              float64x2_t v430 = 0u;
              float64x2_t v431 = 0u;
              float64x2_t v432 = 0u;
              float64x2_t v433 = 0u;
              float64x2_t v438 = 0u;
              float64x2_t v439 = 0u;
              float64x2_t v440 = 0u;
              float64x2_t v441 = 0u;
              float64x2_t v446 = 0u;
              float64x2_t v447 = 0u;
              int v229 = v303;
              unsigned int v230 = v294;
              float64x2_t v448 = 0u;
              float64x2_t v449 = 0u;
              if (!v303) {
                goto LABEL_214;
              }
            }
          }
          if (v318)
          {
            uint64_t v247 = 0;
            unint64_t v248 = (unint64_t)v230 << 7;
            uint64_t v249 = 8 * v93;
            BOOL v250 = (char *)&v322 + v248 + v249;
            uint64_t v251 = v313;
            uint64_t v252 = v314;
            unint64_t v253 = 8 * v318;
            if (v253 <= 1) {
              unint64_t v254 = 1;
            }
            else {
              unint64_t v254 = 8 * v318;
            }
            unint64_t v255 = v248 + v249;
            int v256 = (char *)&v322 + v248 + v249;
            if (v254) {
              BOOL v257 = (v254 - 1) >> 32 == 0;
            }
            else {
              BOOL v257 = 0;
            }
            char v258 = !v257;
            uint64_t v259 = v254 & 0x7FFFFFFE0;
            uint64_t v260 = v254 & 0x7FFFFFFF8;
            unsigned int v261 = (char *)&v323 + v255;
            int v262 = v313 + 1;
            unsigned int v263 = v250;
            uint64_t v264 = v313;
            do
            {
              unsigned int v265 = (char *)v251 + v252 * v247;
              int64x2_t v266 = &v250[128 * v247];
              if ((unint64_t)(&v256[128 * v247] - v265) < 0x20) {
                char v267 = 1;
              }
              else {
                char v267 = v258;
              }
              if (v267)
              {
                int v268 = 0;
                goto LABEL_211;
              }
              if (v254 >= 0x20)
              {
                BOOL v270 = v262;
                BOOL v271 = v261;
                uint64_t v272 = v254 & 0x7FFFFFFE0;
                do
                {
                  long long v273 = *v270;
                  *(v271 - 1) = *(v270 - 1);
                  *BOOL v271 = v273;
                  v271 += 2;
                  v270 += 2;
                  v272 -= 32;
                }
                while (v272);
                if (v254 == v259) {
                  goto LABEL_194;
                }
                uint64_t v269 = v254 & 0x7FFFFFFE0;
                if ((v254 & 0x18) == 0)
                {
                  v265 += v259;
                  v266 += v259;
                  int v268 = v254 & 0xFFFFFFE0;
                  goto LABEL_211;
                }
              }
              else
              {
                uint64_t v269 = 0;
              }
              v266 += v260;
              unint64_t v274 = v269 - (v254 & 0x7FFFFFFF8);
              unsigned int v275 = (uint64_t *)((char *)v264 + v269);
              unsigned int v276 = &v263[v269];
              do
              {
                uint64_t v277 = *v275++;
                *(void *)unsigned int v276 = v277;
                v276 += 8;
                v274 += 8;
              }
              while (v274);
              if (v254 == v260) {
                goto LABEL_194;
              }
              v265 += v260;
              int v268 = v254 & 0xFFFFFFF8;
LABEL_211:
              unsigned int v278 = v268 + 1;
              do
              {
                char v279 = *v265++;
                *v266++ = v279;
              }
              while (v253 > v278++);
LABEL_194:
              ++v247;
              v261 += 128;
              int v262 = (long long *)((char *)v262 + v252);
              uint64_t v264 = (_OWORD *)((char *)v264 + v252);
              v263 += 128;
            }
            while (v247 != v229);
          }
LABEL_214:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v322, 128, v311, v312, v319, v320);
LABEL_215:
          if (v308) {
            memcpy(v307, v89, 0x800uLL);
          }
          BOOL v29 = v46 == v297 >> 4;
          unsigned int v46 = v94;
          uint64_t result = v304;
        }
        while (!v29);
        BOOL v29 = v28++ == v287;
      }
      while (!v29);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v297 = v21;
  uint64_t v298 = v22;
  uint64_t v288 = v23;
  uint64_t v24 = v12;
  uint64_t v449 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v301 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v287 = v14 + a10 - 1;
  unsigned int v289 = v287 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v303 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v303;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v307 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v303;
  int v296 = (int)result;
  if (v26 <= v289)
  {
    unsigned int v295 = v16 + a9 - 1;
    unsigned int v286 = v16 >> 4;
    if (v16 >> 4 <= v295 >> 4)
    {
      unsigned int v283 = v20 - 1;
      unsigned int v305 = (v20 - 1) >> 4;
      int v304 = ((v20 - 1) & 0xF) + 1;
      int v284 = ((v18 - 1) & 0xF) + 1;
      unsigned int v285 = (v18 - 1) >> 4;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v294 = v38.i32[0] | v38.i32[1];
      BOOL v291 = v38.i32[1] != 0;
      int8x8_t v292 = v38;
      BOOL v290 = v38.i32[0] != 0;
      unint64_t v282 = 8 * v28 * (unint64_t)v27;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v301) {
          int v40 = v301;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v286;
        if (v287 < v39) {
          unsigned int v39 = v287;
        }
        unsigned int v300 = 16 * v26;
        int v293 = v40 - 16 * v26;
        int v302 = v39 - v40 + 1;
        int v42 = v284;
        if (v26 != v285) {
          int v42 = 16;
        }
        unsigned int v308 = v42;
        uint64_t v299 = v288 + (v40 - v301) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v295 < v44) {
            unsigned int v44 = v295;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v305) {
            unsigned int v47 = v304;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v300 >= v301 && v43 >= v16)
          {
            int v49 = v304;
            if (v41 != v305) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v302 != v308;
          }
          if (v296)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v282 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v273 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v274 = 0;
              if (v73) {
                goto LABEL_215;
              }
LABEL_204:
              unsigned int v275 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v275 | v274) {
                goto LABEL_205;
              }
LABEL_216:
              uint64_t v277 = 0;
            }
            else
            {
              unsigned int v274 = 32 - __clz(~(-1 << -(char)__clz(v273)));
              if ((v73 & 1) == 0) {
                goto LABEL_204;
              }
LABEL_215:
              unsigned int v275 = 0;
              if (!v274) {
                goto LABEL_216;
              }
LABEL_205:
              int v276 = 0;
              uint64_t v277 = 0;
              int v278 = v41 & v273;
              BOOL v279 = v274 != 0;
              BOOL v280 = v275 != 0;
              int v281 = 1;
              do
              {
                --v274;
                if (v279) {
                  v277 |= (unint64_t)(v281 & v278) << v276++;
                }
                else {
                  unsigned int v274 = 0;
                }
                --v275;
                if (v280) {
                  v277 |= (unint64_t)(v281 & v26 & ((v74 >> 4) - 1)) << v276++;
                }
                else {
                  unsigned int v275 = 0;
                }
                v281 *= 2;
                --v276;
                BOOL v280 = v275 != 0;
                BOOL v279 = v274 != 0;
              }
              while (v275 | v274);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v300 / v74 * ((v70 + v283) / v70)) << 14) + (v277 << 11);
            goto LABEL_58;
          }
          if (v294)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v291;
            BOOL v55 = v290;
            __int32 v56 = v292.i32[1];
            __int32 v57 = v292.i32[0];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          uint64_t v75 = v16;
          int v76 = v47 < 0x10 || v48;
          unsigned int v77 = (char *)(v298 + 8 * v66);
          uint64_t v78 = v299 + 8 * (v45 - v16);
          uint64_t v79 = (void *)(v297 + v58);
          if (v308 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v306 = v79;
          if (v307)
          {
            BOOL v81 = __dst;
            if (!v80) {
              goto LABEL_93;
            }
            int v82 = (char *)(v298 + 8 * v66);
            int v83 = v46;
            char v84 = v47;
            BOOL v85 = v48;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v48 = v85;
            LOBYTE(v47) = v84;
            unsigned int v43 = 16 * v41;
            int v46 = v83;
            unsigned int v77 = v82;
            uint64_t v36 = v303;
          }
          else
          {
            BOOL v81 = v79;
            if (!v80)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v47, v308);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v86 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int64x2_t v310 = v81;
          unsigned __int8 v318 = v47;
          unsigned __int8 v319 = v308;
          int v314 = v293;
          unsigned int v315 = v45 - v43;
          int64x2_t v311 = v77;
          uint64_t v312 = v78;
          uint64_t v313 = a11;
          int v316 = v302;
          unsigned int v317 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            uint64_t v16 = v75;
            goto LABEL_186;
          }
          unsigned int v87 = *v77;
          uint64_t v16 = v75;
          if (v87 == 255)
          {
            float64x2_t v90 = *((float64x2_t *)v81 + 1);
            float64x2_t v91 = *((float64x2_t *)v81 + 3);
            float64x2_t v92 = *((float64x2_t *)v81 + 9);
            float64x2_t v93 = *((float64x2_t *)v81 + 11);
            float64x2_t v94 = *((float64x2_t *)v81 + 2);
            float64x2_t v95 = *((float64x2_t *)v81 + 8);
            float64x2_t v96 = *((float64x2_t *)v81 + 4);
            float64x2_t v97 = *((float64x2_t *)v81 + 6);
            float64x2_t v98 = *((float64x2_t *)v81 + 10);
            float64x2_t v99 = *((float64x2_t *)v81 + 12);
            float64x2_t v100 = *((float64x2_t *)v81 + 13);
            float64x2_t v101 = *((float64x2_t *)v81 + 14);
            float64x2_t v102 = *((float64x2_t *)v81 + 15);
            float64x2_t v103 = *((float64x2_t *)v81 + 5);
            float64x2_t v104 = *((float64x2_t *)v81 + 7);
            float64x2_t v321 = *(float64x2_t *)v81;
            float64x2_t v322 = v94;
            float64x2_t v323 = v95;
            float64x2_t v324 = v98;
            float64x2_t v329 = v90;
            float64x2_t v330 = v91;
            float64x2_t v331 = v92;
            float64x2_t v332 = v93;
            float64x2_t v337 = v96;
            float64x2_t v338 = v97;
            float64x2_t v339 = v99;
            float64x2_t v340 = v101;
            uint64_t v88 = 256;
            float64x2_t v345 = v103;
            float64x2_t v346 = v104;
            float64x2_t v347 = v100;
            float64x2_t v348 = v102;
          }
          else if (v87 == 7)
          {
            float64x2_t v89 = vld1q_dup_f64((const double *)v81);
            float64x2_t v321 = v89;
            float64x2_t v322 = v89;
            float64x2_t v323 = v89;
            float64x2_t v324 = v89;
            float64x2_t v329 = v89;
            float64x2_t v330 = v89;
            float64x2_t v331 = v89;
            float64x2_t v332 = v89;
            float64x2_t v337 = v89;
            float64x2_t v338 = v89;
            float64x2_t v339 = v89;
            float64x2_t v340 = v89;
            float64x2_t v345 = v89;
            float64x2_t v346 = v89;
            uint64_t v88 = 8;
            float64x2_t v347 = v89;
            float64x2_t v348 = v89;
          }
          else if (*v77)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 128, (uint64_t)v81, v87);
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
          }
          uint64_t v105 = (uint64_t)&v81[v88];
          unsigned int v106 = v77[1];
          if (v106 == 255)
          {
            float64x2_t v109 = *(float64x2_t *)(v105 + 16);
            float64x2_t v110 = *(float64x2_t *)(v105 + 48);
            float64x2_t v111 = *(float64x2_t *)(v105 + 144);
            float64x2_t v112 = *(float64x2_t *)(v105 + 176);
            float64x2_t v113 = *(float64x2_t *)(v105 + 32);
            float64x2_t v114 = *(float64x2_t *)(v105 + 128);
            float64x2_t v115 = *(float64x2_t *)(v105 + 64);
            float64x2_t v116 = *(float64x2_t *)(v105 + 96);
            float64x2_t v117 = *(float64x2_t *)(v105 + 160);
            float64x2_t v118 = *(float64x2_t *)(v105 + 192);
            float64x2_t v119 = *(float64x2_t *)(v105 + 208);
            float64x2_t v120 = *(float64x2_t *)(v105 + 224);
            float64x2_t v121 = *(float64x2_t *)(v105 + 240);
            float64x2_t v122 = *(float64x2_t *)(v105 + 80);
            float64x2_t v123 = *(float64x2_t *)(v105 + 112);
            float64x2_t v353 = *(float64x2_t *)v105;
            float64x2_t v354 = v113;
            float64x2_t v355 = v114;
            float64x2_t v356 = v117;
            float64x2_t v361 = v109;
            float64x2_t v362 = v110;
            float64x2_t v363 = v111;
            float64x2_t v364 = v112;
            float64x2_t v369 = v115;
            float64x2_t v370 = v116;
            float64x2_t v371 = v118;
            float64x2_t v372 = v120;
            uint64_t v107 = 256;
            float64x2_t v377 = v122;
            float64x2_t v378 = v123;
            float64x2_t v379 = v119;
            float64x2_t v380 = v121;
          }
          else if (v106 == 7)
          {
            float64x2_t v108 = vld1q_dup_f64((const double *)v105);
            float64x2_t v353 = v108;
            float64x2_t v354 = v108;
            float64x2_t v355 = v108;
            float64x2_t v356 = v108;
            float64x2_t v361 = v108;
            float64x2_t v362 = v108;
            float64x2_t v363 = v108;
            float64x2_t v364 = v108;
            float64x2_t v369 = v108;
            float64x2_t v370 = v108;
            float64x2_t v371 = v108;
            float64x2_t v372 = v108;
            float64x2_t v377 = v108;
            float64x2_t v378 = v108;
            uint64_t v107 = 8;
            float64x2_t v379 = v108;
            float64x2_t v380 = v108;
          }
          else if (v77[1])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v353, 128, v105, v106);
          }
          else
          {
            uint64_t v107 = 0;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
          }
          uint64_t v124 = v105 + v107;
          unsigned int v125 = v77[2];
          if (v125 == 255)
          {
            float64x2_t v128 = *(float64x2_t *)(v124 + 16);
            float64x2_t v129 = *(float64x2_t *)(v124 + 48);
            float64x2_t v130 = *(float64x2_t *)(v124 + 144);
            float64x2_t v131 = *(float64x2_t *)(v124 + 176);
            float64x2_t v132 = *(float64x2_t *)(v124 + 32);
            float64x2_t v133 = *(float64x2_t *)(v124 + 128);
            float64x2_t v134 = *(float64x2_t *)(v124 + 64);
            float64x2_t v135 = *(float64x2_t *)(v124 + 96);
            float64x2_t v136 = *(float64x2_t *)(v124 + 160);
            float64x2_t v137 = *(float64x2_t *)(v124 + 192);
            float64x2_t v138 = *(float64x2_t *)(v124 + 208);
            float64x2_t v139 = *(float64x2_t *)(v124 + 224);
            float64x2_t v140 = *(float64x2_t *)(v124 + 240);
            float64x2_t v141 = *(float64x2_t *)(v124 + 80);
            float64x2_t v142 = *(float64x2_t *)(v124 + 112);
            float64x2_t v325 = *(float64x2_t *)v124;
            float64x2_t v326 = v132;
            float64x2_t v327 = v133;
            float64x2_t v328 = v136;
            float64x2_t v333 = v128;
            float64x2_t v334 = v129;
            float64x2_t v335 = v130;
            float64x2_t v336 = v131;
            float64x2_t v341 = v134;
            float64x2_t v342 = v135;
            float64x2_t v343 = v137;
            float64x2_t v344 = v139;
            uint64_t v126 = 256;
            float64x2_t v349 = v141;
            float64x2_t v350 = v142;
            float64x2_t v351 = v138;
            float64x2_t v352 = v140;
          }
          else if (v125 == 7)
          {
            float64x2_t v127 = vld1q_dup_f64((const double *)v124);
            float64x2_t v325 = v127;
            float64x2_t v326 = v127;
            float64x2_t v327 = v127;
            float64x2_t v328 = v127;
            float64x2_t v333 = v127;
            float64x2_t v334 = v127;
            float64x2_t v335 = v127;
            float64x2_t v336 = v127;
            float64x2_t v341 = v127;
            float64x2_t v342 = v127;
            float64x2_t v343 = v127;
            float64x2_t v344 = v127;
            float64x2_t v349 = v127;
            float64x2_t v350 = v127;
            uint64_t v126 = 8;
            float64x2_t v351 = v127;
            float64x2_t v352 = v127;
          }
          else if (v77[2])
          {
            uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v325, 128, v124, v125);
          }
          else
          {
            uint64_t v126 = 0;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
          }
          uint64_t v143 = v124 + v126;
          unsigned int v144 = v77[3];
          if (v144 == 255)
          {
            float64x2_t v147 = *(float64x2_t *)(v143 + 16);
            float64x2_t v148 = *(float64x2_t *)(v143 + 48);
            float64x2_t v149 = *(float64x2_t *)(v143 + 144);
            float64x2_t v150 = *(float64x2_t *)(v143 + 176);
            float64x2_t v151 = *(float64x2_t *)(v143 + 32);
            float64x2_t v152 = *(float64x2_t *)(v143 + 128);
            float64x2_t v153 = *(float64x2_t *)(v143 + 64);
            float64x2_t v154 = *(float64x2_t *)(v143 + 96);
            float64x2_t v155 = *(float64x2_t *)(v143 + 160);
            float64x2_t v156 = *(float64x2_t *)(v143 + 192);
            float64x2_t v157 = *(float64x2_t *)(v143 + 208);
            float64x2_t v158 = *(float64x2_t *)(v143 + 224);
            float64x2_t v159 = *(float64x2_t *)(v143 + 240);
            float64x2_t v160 = *(float64x2_t *)(v143 + 80);
            float64x2_t v161 = *(float64x2_t *)(v143 + 112);
            float64x2_t v357 = *(float64x2_t *)v143;
            float64x2_t v358 = v151;
            float64x2_t v359 = v152;
            float64x2_t v360 = v155;
            float64x2_t v365 = v147;
            float64x2_t v366 = v148;
            float64x2_t v367 = v149;
            float64x2_t v368 = v150;
            float64x2_t v373 = v153;
            float64x2_t v374 = v154;
            float64x2_t v375 = v156;
            float64x2_t v376 = v158;
            uint64_t v145 = 256;
            float64x2_t v381 = v160;
            float64x2_t v382 = v161;
            float64x2_t v383 = v157;
            float64x2_t v384 = v159;
          }
          else if (v144 == 7)
          {
            float64x2_t v146 = vld1q_dup_f64((const double *)v143);
            float64x2_t v357 = v146;
            float64x2_t v358 = v146;
            float64x2_t v359 = v146;
            float64x2_t v360 = v146;
            float64x2_t v365 = v146;
            float64x2_t v366 = v146;
            float64x2_t v367 = v146;
            float64x2_t v368 = v146;
            float64x2_t v373 = v146;
            float64x2_t v374 = v146;
            float64x2_t v375 = v146;
            float64x2_t v376 = v146;
            float64x2_t v381 = v146;
            float64x2_t v382 = v146;
            uint64_t v145 = 8;
            float64x2_t v383 = v146;
            float64x2_t v384 = v146;
          }
          else if (v77[3])
          {
            uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v357, 128, v143, v144);
          }
          else
          {
            uint64_t v145 = 0;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
          }
          uint64_t v162 = v143 + v145;
          unsigned int v163 = v77[4];
          if (v163 == 255)
          {
            float64x2_t v166 = *(float64x2_t *)(v162 + 16);
            float64x2_t v167 = *(float64x2_t *)(v162 + 48);
            float64x2_t v168 = *(float64x2_t *)(v162 + 144);
            float64x2_t v169 = *(float64x2_t *)(v162 + 176);
            float64x2_t v170 = *(float64x2_t *)(v162 + 32);
            float64x2_t v171 = *(float64x2_t *)(v162 + 128);
            float64x2_t v172 = *(float64x2_t *)(v162 + 64);
            float64x2_t v173 = *(float64x2_t *)(v162 + 96);
            float64x2_t v174 = *(float64x2_t *)(v162 + 160);
            float64x2_t v175 = *(float64x2_t *)(v162 + 192);
            float64x2_t v176 = *(float64x2_t *)(v162 + 208);
            float64x2_t v177 = *(float64x2_t *)(v162 + 224);
            float64x2_t v178 = *(float64x2_t *)(v162 + 240);
            float64x2_t v179 = *(float64x2_t *)(v162 + 80);
            float64x2_t v180 = *(float64x2_t *)(v162 + 112);
            float64x2_t v385 = *(float64x2_t *)v162;
            float64x2_t v386 = v170;
            float64x2_t v387 = v171;
            float64x2_t v388 = v174;
            float64x2_t v393 = v166;
            float64x2_t v394 = v167;
            float64x2_t v395 = v168;
            float64x2_t v396 = v169;
            float64x2_t v401 = v172;
            float64x2_t v402 = v173;
            float64x2_t v403 = v175;
            float64x2_t v404 = v177;
            uint64_t v164 = 256;
            float64x2_t v409 = v179;
            float64x2_t v410 = v180;
            float64x2_t v411 = v176;
            float64x2_t v412 = v178;
          }
          else if (v163 == 7)
          {
            float64x2_t v165 = vld1q_dup_f64((const double *)v162);
            float64x2_t v385 = v165;
            float64x2_t v386 = v165;
            float64x2_t v387 = v165;
            float64x2_t v388 = v165;
            float64x2_t v393 = v165;
            float64x2_t v394 = v165;
            float64x2_t v395 = v165;
            float64x2_t v396 = v165;
            float64x2_t v401 = v165;
            float64x2_t v402 = v165;
            float64x2_t v403 = v165;
            float64x2_t v404 = v165;
            float64x2_t v409 = v165;
            float64x2_t v410 = v165;
            float64x2_t v411 = v165;
            uint64_t v164 = 8;
            float64x2_t v412 = v165;
          }
          else if (v77[4])
          {
            uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v162, v163);
          }
          else
          {
            uint64_t v164 = 0;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
          }
          uint64_t v181 = v162 + v164;
          unsigned int v182 = v77[5];
          if (v182 == 255)
          {
            float64x2_t v185 = *(float64x2_t *)(v181 + 16);
            float64x2_t v186 = *(float64x2_t *)(v181 + 48);
            float64x2_t v187 = *(float64x2_t *)(v181 + 144);
            float64x2_t v188 = *(float64x2_t *)(v181 + 176);
            float64x2_t v189 = *(float64x2_t *)(v181 + 32);
            float64x2_t v190 = *(float64x2_t *)(v181 + 128);
            float64x2_t v191 = *(float64x2_t *)(v181 + 64);
            float64x2_t v192 = *(float64x2_t *)(v181 + 96);
            float64x2_t v193 = *(float64x2_t *)(v181 + 160);
            float64x2_t v194 = *(float64x2_t *)(v181 + 192);
            float64x2_t v195 = *(float64x2_t *)(v181 + 208);
            float64x2_t v196 = *(float64x2_t *)(v181 + 224);
            float64x2_t v197 = *(float64x2_t *)(v181 + 240);
            float64x2_t v198 = *(float64x2_t *)(v181 + 80);
            float64x2_t v199 = *(float64x2_t *)(v181 + 112);
            float64x2_t v417 = *(float64x2_t *)v181;
            float64x2_t v418 = v189;
            float64x2_t v419 = v190;
            float64x2_t v420 = v193;
            float64x2_t v425 = v185;
            float64x2_t v426 = v186;
            float64x2_t v427 = v187;
            float64x2_t v428 = v188;
            float64x2_t v433 = v191;
            float64x2_t v434 = v192;
            float64x2_t v435 = v194;
            float64x2_t v436 = v196;
            uint64_t v183 = 256;
            float64x2_t v441 = v198;
            float64x2_t v442 = v199;
            float64x2_t v443 = v195;
            float64x2_t v444 = v197;
          }
          else if (v182 == 7)
          {
            float64x2_t v184 = vld1q_dup_f64((const double *)v181);
            float64x2_t v417 = v184;
            float64x2_t v418 = v184;
            float64x2_t v419 = v184;
            float64x2_t v420 = v184;
            float64x2_t v425 = v184;
            float64x2_t v426 = v184;
            float64x2_t v427 = v184;
            float64x2_t v428 = v184;
            float64x2_t v433 = v184;
            float64x2_t v434 = v184;
            float64x2_t v435 = v184;
            float64x2_t v436 = v184;
            float64x2_t v441 = v184;
            float64x2_t v442 = v184;
            float64x2_t v443 = v184;
            uint64_t v183 = 8;
            float64x2_t v444 = v184;
          }
          else if (v77[5])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
          }
          uint64_t v200 = v181 + v183;
          unsigned int v201 = v77[6];
          if (v201 == 255)
          {
            float64x2_t v204 = *(float64x2_t *)(v200 + 16);
            float64x2_t v205 = *(float64x2_t *)(v200 + 48);
            float64x2_t v206 = *(float64x2_t *)(v200 + 144);
            float64x2_t v207 = *(float64x2_t *)(v200 + 176);
            float64x2_t v208 = *(float64x2_t *)(v200 + 32);
            float64x2_t v209 = *(float64x2_t *)(v200 + 128);
            float64x2_t v210 = *(float64x2_t *)(v200 + 64);
            float64x2_t v211 = *(float64x2_t *)(v200 + 96);
            float64x2_t v212 = *(float64x2_t *)(v200 + 160);
            float64x2_t v213 = *(float64x2_t *)(v200 + 192);
            float64x2_t v214 = *(float64x2_t *)(v200 + 208);
            float64x2_t v215 = *(float64x2_t *)(v200 + 224);
            float64x2_t v216 = *(float64x2_t *)(v200 + 240);
            float64x2_t v217 = *(float64x2_t *)(v200 + 80);
            float64x2_t v218 = *(float64x2_t *)(v200 + 112);
            float64x2_t v389 = *(float64x2_t *)v200;
            float64x2_t v390 = v208;
            float64x2_t v391 = v209;
            float64x2_t v392 = v212;
            float64x2_t v397 = v204;
            float64x2_t v398 = v205;
            float64x2_t v399 = v206;
            float64x2_t v400 = v207;
            float64x2_t v405 = v210;
            float64x2_t v406 = v211;
            float64x2_t v407 = v213;
            float64x2_t v408 = v215;
            uint64_t v202 = 256;
            float64x2_t v413 = v217;
            float64x2_t v414 = v218;
            float64x2_t v415 = v214;
            float64x2_t v416 = v216;
          }
          else if (v201 == 7)
          {
            float64x2_t v203 = vld1q_dup_f64((const double *)v200);
            float64x2_t v389 = v203;
            float64x2_t v390 = v203;
            float64x2_t v391 = v203;
            float64x2_t v392 = v203;
            float64x2_t v397 = v203;
            float64x2_t v398 = v203;
            float64x2_t v399 = v203;
            float64x2_t v400 = v203;
            float64x2_t v405 = v203;
            float64x2_t v406 = v203;
            float64x2_t v407 = v203;
            float64x2_t v408 = v203;
            float64x2_t v413 = v203;
            float64x2_t v414 = v203;
            float64x2_t v415 = v203;
            uint64_t v202 = 8;
            float64x2_t v416 = v203;
          }
          else if (v77[6])
          {
            uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v389, 128, v200, v201);
          }
          else
          {
            uint64_t v202 = 0;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
          }
          uint64_t v219 = v200 + v202;
          unsigned int v220 = v77[7];
          if (v220 == 255)
          {
            float64x2_t v224 = *(float64x2_t *)(v219 + 16);
            float64x2_t v225 = *(float64x2_t *)(v219 + 48);
            float64x2_t v226 = *(float64x2_t *)(v219 + 144);
            float64x2_t v227 = *(float64x2_t *)(v219 + 176);
            float64x2_t v228 = *(float64x2_t *)(v219 + 32);
            float64x2_t v229 = *(float64x2_t *)(v219 + 128);
            float64x2_t v230 = *(float64x2_t *)(v219 + 160);
            float64x2_t v231 = *(float64x2_t *)(v219 + 64);
            float64x2_t v232 = *(float64x2_t *)(v219 + 96);
            float64x2_t v233 = *(float64x2_t *)(v219 + 192);
            float64x2_t v234 = *(float64x2_t *)(v219 + 224);
            float64x2_t v235 = *(float64x2_t *)(v219 + 240);
            float64x2_t v236 = *(float64x2_t *)(v219 + 80);
            float64x2_t v237 = *(float64x2_t *)(v219 + 112);
            float64x2_t v238 = *(float64x2_t *)(v219 + 208);
            float64x2_t v421 = *(float64x2_t *)v219;
            float64x2_t v422 = v228;
            float64x2_t v423 = v229;
            float64x2_t v424 = v230;
            float64x2_t v429 = v224;
            float64x2_t v430 = v225;
            float64x2_t v431 = v226;
            float64x2_t v432 = v227;
            float64x2_t v437 = v231;
            float64x2_t v438 = v232;
            float64x2_t v439 = v233;
            float64x2_t v440 = v234;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v445 = v236;
            float64x2_t v446 = v237;
            float64x2_t v447 = v238;
            float64x2_t v448 = v235;
            if (!v302) {
              goto LABEL_185;
            }
          }
          else if (v220 == 7)
          {
            float64x2_t v223 = vld1q_dup_f64((const double *)v219);
            float64x2_t v421 = v223;
            float64x2_t v422 = v223;
            float64x2_t v423 = v223;
            float64x2_t v424 = v223;
            float64x2_t v429 = v223;
            float64x2_t v430 = v223;
            float64x2_t v431 = v223;
            float64x2_t v432 = v223;
            float64x2_t v437 = v223;
            float64x2_t v438 = v223;
            float64x2_t v439 = v223;
            float64x2_t v440 = v223;
            float64x2_t v445 = v223;
            float64x2_t v446 = v223;
            float64x2_t v447 = v223;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v448 = v223;
            if (!v302) {
              goto LABEL_185;
            }
          }
          else if (v77[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v421, 128, v219, v220);
            unsigned int v222 = v314;
            unsigned int v86 = v315;
            int v221 = v316;
            if (!v316) {
              goto LABEL_185;
            }
          }
          else
          {
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            float64x2_t v445 = 0u;
            float64x2_t v446 = 0u;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v447 = 0u;
            float64x2_t v448 = 0u;
            if (!v302) {
              goto LABEL_185;
            }
          }
          if (v317)
          {
            uint64_t v239 = 0;
            unint64_t v240 = (unint64_t)v222 << 7;
            uint64_t v241 = 8 * v86;
            float64x2_t v242 = (char *)&v321 + v240 + v241;
            uint64_t v243 = v312;
            uint64_t v244 = v313;
            unint64_t v245 = 8 * v317;
            if (v245 <= 1) {
              unint64_t v246 = 1;
            }
            else {
              unint64_t v246 = 8 * v317;
            }
            unint64_t v247 = v240 + v241;
            unint64_t v248 = (char *)&v321 + v240 + v241;
            if (v246) {
              BOOL v249 = (v246 - 1) >> 32 == 0;
            }
            else {
              BOOL v249 = 0;
            }
            char v250 = !v249;
            uint64_t v251 = v246 & 0x7FFFFFFE0;
            uint64_t v252 = v246 & 0x7FFFFFFF8;
            unint64_t v253 = (char *)&v322 + v247;
            unint64_t v254 = (long long *)(v312 + 16);
            unint64_t v255 = v242;
            uint64_t v256 = v312;
            do
            {
              BOOL v257 = (char *)(v243 + v244 * v239);
              char v258 = &v242[128 * v239];
              if ((unint64_t)(&v248[128 * v239] - v257) < 0x20) {
                char v259 = 1;
              }
              else {
                char v259 = v250;
              }
              if (v259)
              {
                int v260 = 0;
                goto LABEL_182;
              }
              if (v246 >= 0x20)
              {
                int v262 = v254;
                unsigned int v263 = v253;
                uint64_t v264 = v246 & 0x7FFFFFFE0;
                do
                {
                  long long v265 = *v262;
                  *(v263 - 1) = *(v262 - 1);
                  *unsigned int v263 = v265;
                  v263 += 2;
                  v262 += 2;
                  v264 -= 32;
                }
                while (v264);
                if (v246 == v251) {
                  goto LABEL_165;
                }
                uint64_t v261 = v246 & 0x7FFFFFFE0;
                if ((v246 & 0x18) == 0)
                {
                  v257 += v251;
                  v258 += v251;
                  int v260 = v246 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v261 = 0;
              }
              v258 += v252;
              unint64_t v266 = v261 - (v246 & 0x7FFFFFFF8);
              char v267 = (uint64_t *)(v256 + v261);
              int v268 = &v255[v261];
              do
              {
                uint64_t v269 = *v267++;
                *(void *)int v268 = v269;
                v268 += 8;
                v266 += 8;
              }
              while (v266);
              if (v246 == v252) {
                goto LABEL_165;
              }
              v257 += v252;
              int v260 = v246 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v270 = v260 + 1;
              do
              {
                char v271 = *v257++;
                *v258++ = v271;
              }
              while (v245 > v270++);
LABEL_165:
              ++v239;
              v253 += 128;
              unint64_t v254 = (long long *)((char *)v254 + v244);
              v256 += v244;
              v255 += 128;
            }
            while (v239 != v221);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((uint64_t)&v321, 128, (unint64_t)v310, v311, v318, v319);
LABEL_186:
          uint64_t result = v306;
          if (v307) {
            uint64_t result = memcpy(v306, v81, 0x800uLL);
          }
          BOOL v31 = v41++ == v295 >> 4;
          uint64_t v36 = v303;
        }
        while (!v31);
        BOOL v31 = v26++ == v289;
      }
      while (!v31);
    }
  }
  return result;
}

void *AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v297 = v21;
  uint64_t v298 = v22;
  uint64_t v288 = v23;
  uint64_t v24 = v12;
  uint64_t v449 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v301 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v287 = v14 + a10 - 1;
  unsigned int v289 = v287 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v303 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v303;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v307 = v34;
  uint64_t result = (void *)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v36 = v303;
  int v296 = (int)result;
  if (v26 <= v289)
  {
    unsigned int v295 = v16 + a9 - 1;
    unsigned int v286 = v16 >> 4;
    if (v16 >> 4 <= v295 >> 4)
    {
      unsigned int v283 = v20 - 1;
      unsigned int v305 = (v20 - 1) >> 4;
      int v304 = ((v20 - 1) & 0xF) + 1;
      int v284 = ((v18 - 1) & 0xF) + 1;
      unsigned int v285 = (v18 - 1) >> 4;
      uint32x2_t v37 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v38 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v37, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v37));
      __int32 v294 = v38.i32[0] | v38.i32[1];
      BOOL v291 = v38.i32[1] != 0;
      int8x8_t v292 = v38;
      BOOL v290 = v38.i32[0] != 0;
      unint64_t v282 = 8 * v28 * (unint64_t)v27;
      do
      {
        unsigned int v39 = (16 * v26) | 0xF;
        if (16 * v26 <= v301) {
          int v40 = v301;
        }
        else {
          int v40 = 16 * v26;
        }
        unsigned int v41 = v286;
        if (v287 < v39) {
          unsigned int v39 = v287;
        }
        unsigned int v300 = 16 * v26;
        int v293 = v40 - 16 * v26;
        int v302 = v39 - v40 + 1;
        int v42 = v284;
        if (v26 != v285) {
          int v42 = 16;
        }
        unsigned int v308 = v42;
        uint64_t v299 = v288 + (v40 - v301) * a11;
        do
        {
          unsigned int v43 = 16 * v41;
          unsigned int v44 = 16 * (v41 + 1) - 1;
          if (16 * v41 <= v16) {
            int v45 = v16;
          }
          else {
            int v45 = 16 * v41;
          }
          if (v295 < v44) {
            unsigned int v44 = v295;
          }
          int v46 = v44 - v45 + 1;
          if (v41 == v305) {
            unsigned int v47 = v304;
          }
          else {
            unsigned int v47 = 16;
          }
          BOOL v48 = 1;
          if (v300 >= v301 && v43 >= v16)
          {
            int v49 = v304;
            if (v41 != v305) {
              int v49 = 16;
            }
            BOOL v48 = v46 != v49 || v302 != v308;
          }
          if (v296)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v282 >> (*(unsigned char *)(v36 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  unsigned int v70 = 16;
                  char v73 = 1;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v273 = (v70 >> 4) - 1;
            if (v72)
            {
              unsigned int v274 = 0;
              if (v73) {
                goto LABEL_215;
              }
LABEL_204:
              unsigned int v275 = 32 - __clz(~(-1 << -(char)__clz(((v74 + 15) >> 4) - 1)));
              if (v275 | v274) {
                goto LABEL_205;
              }
LABEL_216:
              uint64_t v277 = 0;
            }
            else
            {
              unsigned int v274 = 32 - __clz(~(-1 << -(char)__clz(v273)));
              if ((v73 & 1) == 0) {
                goto LABEL_204;
              }
LABEL_215:
              unsigned int v275 = 0;
              if (!v274) {
                goto LABEL_216;
              }
LABEL_205:
              int v276 = 0;
              uint64_t v277 = 0;
              int v278 = v41 & v273;
              BOOL v279 = v274 != 0;
              BOOL v280 = v275 != 0;
              int v281 = 1;
              do
              {
                --v274;
                if (v279) {
                  v277 |= (unint64_t)(v281 & v278) << v276++;
                }
                else {
                  unsigned int v274 = 0;
                }
                --v275;
                if (v280) {
                  v277 |= (unint64_t)(v281 & v26 & ((v74 >> 4) - 1)) << v276++;
                }
                else {
                  unsigned int v275 = 0;
                }
                v281 *= 2;
                --v276;
                BOOL v280 = v275 != 0;
                BOOL v279 = v274 != 0;
              }
              while (v275 | v274);
            }
            unint64_t v58 = ((unint64_t)(v43 / v70 + v300 / v74 * ((v70 + v283) / v70)) << 14) + (v277 << 11);
            goto LABEL_58;
          }
          if (v294)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v291;
            BOOL v55 = v290;
            __int32 v56 = v292.i32[1];
            __int32 v57 = v292.i32[0];
            do
            {
              --v56;
              if (v54) {
                v52 |= (unint64_t)(v53 & v41) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v55) {
                v52 |= (unint64_t)(v53 & v26) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v55 = v57 != 0;
              BOOL v54 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 11;
LABEL_58:
          unsigned int v59 = *(_DWORD *)(v36 + 128) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 15;
          if (v60 < 0x20) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 4) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v36 + 132) >> (*(unsigned char *)(v36 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_80:
              uint64_t v66 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_80;
            }
          }
          int v65 = 0;
          uint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            if (v67) {
              v66 |= (unint64_t)(v69 & v41) << v65++;
            }
            else {
              unsigned int v61 = 0;
            }
            --v64;
            if (v68) {
              v66 |= (unint64_t)(v69 & v26) << v65++;
            }
            else {
              unsigned int v64 = 0;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_81:
          uint64_t v75 = v16;
          int v76 = v47 < 0x10 || v48;
          unsigned int v77 = (char *)(v298 + 8 * v66);
          uint64_t v78 = (_OWORD *)(v299 + 8 * (v45 - v16));
          uint64_t v79 = (void *)(v297 + v58);
          if (v308 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          unsigned int v306 = v79;
          if (v307)
          {
            BOOL v81 = __dst;
            if (!v80) {
              goto LABEL_93;
            }
            int v82 = (char *)(v298 + 8 * v66);
            int v83 = v46;
            char v84 = v47;
            BOOL v85 = v48;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v48 = v85;
            LOBYTE(v47) = v84;
            unsigned int v43 = 16 * v41;
            int v46 = v83;
            unsigned int v77 = v82;
            uint64_t v36 = v303;
          }
          else
          {
            BOOL v81 = v79;
            if (!v80)
            {
LABEL_93:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, v81, v77, v47, v308);
              goto LABEL_94;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          unsigned int v86 = v45 - v43;
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v36;
          int64x2_t v310 = v81;
          unsigned __int8 v318 = v47;
          unsigned __int8 v319 = v308;
          int v314 = v293;
          unsigned int v315 = v45 - v43;
          int64x2_t v311 = v77;
          uint64_t v312 = v78;
          uint64_t v313 = a11;
          int v316 = v302;
          unsigned int v317 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v36 + 8) + 7384), block);
LABEL_94:
            uint64_t v16 = v75;
            goto LABEL_186;
          }
          unsigned int v87 = *v77;
          uint64_t v16 = v75;
          if (v87 == 255)
          {
            float64x2_t v90 = *((float64x2_t *)v81 + 1);
            float64x2_t v91 = *((float64x2_t *)v81 + 3);
            float64x2_t v92 = *((float64x2_t *)v81 + 9);
            float64x2_t v93 = *((float64x2_t *)v81 + 11);
            float64x2_t v94 = *((float64x2_t *)v81 + 2);
            float64x2_t v95 = *((float64x2_t *)v81 + 8);
            float64x2_t v96 = *((float64x2_t *)v81 + 4);
            float64x2_t v97 = *((float64x2_t *)v81 + 6);
            float64x2_t v98 = *((float64x2_t *)v81 + 10);
            float64x2_t v99 = *((float64x2_t *)v81 + 12);
            float64x2_t v100 = *((float64x2_t *)v81 + 13);
            float64x2_t v101 = *((float64x2_t *)v81 + 14);
            float64x2_t v102 = *((float64x2_t *)v81 + 15);
            float64x2_t v103 = *((float64x2_t *)v81 + 5);
            float64x2_t v104 = *((float64x2_t *)v81 + 7);
            float64x2_t v321 = *(float64x2_t *)v81;
            float64x2_t v322 = v94;
            float64x2_t v323 = v95;
            float64x2_t v324 = v98;
            float64x2_t v329 = v90;
            float64x2_t v330 = v91;
            float64x2_t v331 = v92;
            float64x2_t v332 = v93;
            float64x2_t v337 = v96;
            float64x2_t v338 = v97;
            float64x2_t v339 = v99;
            float64x2_t v340 = v101;
            uint64_t v88 = 256;
            float64x2_t v345 = v103;
            float64x2_t v346 = v104;
            float64x2_t v347 = v100;
            float64x2_t v348 = v102;
          }
          else if (v87 == 7)
          {
            float64x2_t v89 = vld1q_dup_f64((const double *)v81);
            float64x2_t v321 = v89;
            float64x2_t v322 = v89;
            float64x2_t v323 = v89;
            float64x2_t v324 = v89;
            float64x2_t v329 = v89;
            float64x2_t v330 = v89;
            float64x2_t v331 = v89;
            float64x2_t v332 = v89;
            float64x2_t v337 = v89;
            float64x2_t v338 = v89;
            float64x2_t v339 = v89;
            float64x2_t v340 = v89;
            float64x2_t v345 = v89;
            float64x2_t v346 = v89;
            uint64_t v88 = 8;
            float64x2_t v347 = v89;
            float64x2_t v348 = v89;
          }
          else if (*v77)
          {
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v321, 128, (uint64_t)v81, v87);
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v324 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v332 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
          }
          uint64_t v105 = (uint64_t)v81 + v88;
          unsigned int v106 = v77[1];
          if (v106 == 255)
          {
            float64x2_t v109 = *(float64x2_t *)(v105 + 16);
            float64x2_t v110 = *(float64x2_t *)(v105 + 48);
            float64x2_t v111 = *(float64x2_t *)(v105 + 144);
            float64x2_t v112 = *(float64x2_t *)(v105 + 176);
            float64x2_t v113 = *(float64x2_t *)(v105 + 32);
            float64x2_t v114 = *(float64x2_t *)(v105 + 128);
            float64x2_t v115 = *(float64x2_t *)(v105 + 64);
            float64x2_t v116 = *(float64x2_t *)(v105 + 96);
            float64x2_t v117 = *(float64x2_t *)(v105 + 160);
            float64x2_t v118 = *(float64x2_t *)(v105 + 192);
            float64x2_t v119 = *(float64x2_t *)(v105 + 208);
            float64x2_t v120 = *(float64x2_t *)(v105 + 224);
            float64x2_t v121 = *(float64x2_t *)(v105 + 240);
            float64x2_t v122 = *(float64x2_t *)(v105 + 80);
            float64x2_t v123 = *(float64x2_t *)(v105 + 112);
            float64x2_t v353 = *(float64x2_t *)v105;
            float64x2_t v354 = v113;
            float64x2_t v355 = v114;
            float64x2_t v356 = v117;
            float64x2_t v361 = v109;
            float64x2_t v362 = v110;
            float64x2_t v363 = v111;
            float64x2_t v364 = v112;
            float64x2_t v369 = v115;
            float64x2_t v370 = v116;
            float64x2_t v371 = v118;
            float64x2_t v372 = v120;
            uint64_t v107 = 256;
            float64x2_t v377 = v122;
            float64x2_t v378 = v123;
            float64x2_t v379 = v119;
            float64x2_t v380 = v121;
          }
          else if (v106 == 7)
          {
            float64x2_t v108 = vld1q_dup_f64((const double *)v105);
            float64x2_t v353 = v108;
            float64x2_t v354 = v108;
            float64x2_t v355 = v108;
            float64x2_t v356 = v108;
            float64x2_t v361 = v108;
            float64x2_t v362 = v108;
            float64x2_t v363 = v108;
            float64x2_t v364 = v108;
            float64x2_t v369 = v108;
            float64x2_t v370 = v108;
            float64x2_t v371 = v108;
            float64x2_t v372 = v108;
            float64x2_t v377 = v108;
            float64x2_t v378 = v108;
            uint64_t v107 = 8;
            float64x2_t v379 = v108;
            float64x2_t v380 = v108;
          }
          else if (v77[1])
          {
            uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v353, 128, v105, v106);
          }
          else
          {
            uint64_t v107 = 0;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v353 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v369 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v377 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
          }
          uint64_t v124 = v105 + v107;
          unsigned int v125 = v77[2];
          if (v125 == 255)
          {
            float64x2_t v128 = *(float64x2_t *)(v124 + 16);
            float64x2_t v129 = *(float64x2_t *)(v124 + 48);
            float64x2_t v130 = *(float64x2_t *)(v124 + 144);
            float64x2_t v131 = *(float64x2_t *)(v124 + 176);
            float64x2_t v132 = *(float64x2_t *)(v124 + 32);
            float64x2_t v133 = *(float64x2_t *)(v124 + 128);
            float64x2_t v134 = *(float64x2_t *)(v124 + 64);
            float64x2_t v135 = *(float64x2_t *)(v124 + 96);
            float64x2_t v136 = *(float64x2_t *)(v124 + 160);
            float64x2_t v137 = *(float64x2_t *)(v124 + 192);
            float64x2_t v138 = *(float64x2_t *)(v124 + 208);
            float64x2_t v139 = *(float64x2_t *)(v124 + 224);
            float64x2_t v140 = *(float64x2_t *)(v124 + 240);
            float64x2_t v141 = *(float64x2_t *)(v124 + 80);
            float64x2_t v142 = *(float64x2_t *)(v124 + 112);
            float64x2_t v325 = *(float64x2_t *)v124;
            float64x2_t v326 = v132;
            float64x2_t v327 = v133;
            float64x2_t v328 = v136;
            float64x2_t v333 = v128;
            float64x2_t v334 = v129;
            float64x2_t v335 = v130;
            float64x2_t v336 = v131;
            float64x2_t v341 = v134;
            float64x2_t v342 = v135;
            float64x2_t v343 = v137;
            float64x2_t v344 = v139;
            uint64_t v126 = 256;
            float64x2_t v349 = v141;
            float64x2_t v350 = v142;
            float64x2_t v351 = v138;
            float64x2_t v352 = v140;
          }
          else if (v125 == 7)
          {
            float64x2_t v127 = vld1q_dup_f64((const double *)v124);
            float64x2_t v325 = v127;
            float64x2_t v326 = v127;
            float64x2_t v327 = v127;
            float64x2_t v328 = v127;
            float64x2_t v333 = v127;
            float64x2_t v334 = v127;
            float64x2_t v335 = v127;
            float64x2_t v336 = v127;
            float64x2_t v341 = v127;
            float64x2_t v342 = v127;
            float64x2_t v343 = v127;
            float64x2_t v344 = v127;
            float64x2_t v349 = v127;
            float64x2_t v350 = v127;
            uint64_t v126 = 8;
            float64x2_t v351 = v127;
            float64x2_t v352 = v127;
          }
          else if (v77[2])
          {
            uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v325, 128, v124, v125);
          }
          else
          {
            uint64_t v126 = 0;
            float64x2_t v327 = 0u;
            float64x2_t v328 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v334 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v350 = 0u;
            float64x2_t v351 = 0u;
            float64x2_t v352 = 0u;
          }
          uint64_t v143 = v124 + v126;
          unsigned int v144 = v77[3];
          if (v144 == 255)
          {
            float64x2_t v147 = *(float64x2_t *)(v143 + 16);
            float64x2_t v148 = *(float64x2_t *)(v143 + 48);
            float64x2_t v149 = *(float64x2_t *)(v143 + 144);
            float64x2_t v150 = *(float64x2_t *)(v143 + 176);
            float64x2_t v151 = *(float64x2_t *)(v143 + 32);
            float64x2_t v152 = *(float64x2_t *)(v143 + 128);
            float64x2_t v153 = *(float64x2_t *)(v143 + 64);
            float64x2_t v154 = *(float64x2_t *)(v143 + 96);
            float64x2_t v155 = *(float64x2_t *)(v143 + 160);
            float64x2_t v156 = *(float64x2_t *)(v143 + 192);
            float64x2_t v157 = *(float64x2_t *)(v143 + 208);
            float64x2_t v158 = *(float64x2_t *)(v143 + 224);
            float64x2_t v159 = *(float64x2_t *)(v143 + 240);
            float64x2_t v160 = *(float64x2_t *)(v143 + 80);
            float64x2_t v161 = *(float64x2_t *)(v143 + 112);
            float64x2_t v357 = *(float64x2_t *)v143;
            float64x2_t v358 = v151;
            float64x2_t v359 = v152;
            float64x2_t v360 = v155;
            float64x2_t v365 = v147;
            float64x2_t v366 = v148;
            float64x2_t v367 = v149;
            float64x2_t v368 = v150;
            float64x2_t v373 = v153;
            float64x2_t v374 = v154;
            float64x2_t v375 = v156;
            float64x2_t v376 = v158;
            uint64_t v145 = 256;
            float64x2_t v381 = v160;
            float64x2_t v382 = v161;
            float64x2_t v383 = v157;
            float64x2_t v384 = v159;
          }
          else if (v144 == 7)
          {
            float64x2_t v146 = vld1q_dup_f64((const double *)v143);
            float64x2_t v357 = v146;
            float64x2_t v358 = v146;
            float64x2_t v359 = v146;
            float64x2_t v360 = v146;
            float64x2_t v365 = v146;
            float64x2_t v366 = v146;
            float64x2_t v367 = v146;
            float64x2_t v368 = v146;
            float64x2_t v373 = v146;
            float64x2_t v374 = v146;
            float64x2_t v375 = v146;
            float64x2_t v376 = v146;
            float64x2_t v381 = v146;
            float64x2_t v382 = v146;
            uint64_t v145 = 8;
            float64x2_t v383 = v146;
            float64x2_t v384 = v146;
          }
          else if (v77[3])
          {
            uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v357, 128, v143, v144);
          }
          else
          {
            uint64_t v145 = 0;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v366 = 0u;
            float64x2_t v367 = 0u;
            float64x2_t v368 = 0u;
            float64x2_t v373 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v381 = 0u;
            float64x2_t v382 = 0u;
            float64x2_t v383 = 0u;
            float64x2_t v384 = 0u;
          }
          uint64_t v162 = v143 + v145;
          unsigned int v163 = v77[4];
          if (v163 == 255)
          {
            float64x2_t v166 = *(float64x2_t *)(v162 + 16);
            float64x2_t v167 = *(float64x2_t *)(v162 + 48);
            float64x2_t v168 = *(float64x2_t *)(v162 + 144);
            float64x2_t v169 = *(float64x2_t *)(v162 + 176);
            float64x2_t v170 = *(float64x2_t *)(v162 + 32);
            float64x2_t v171 = *(float64x2_t *)(v162 + 128);
            float64x2_t v172 = *(float64x2_t *)(v162 + 64);
            float64x2_t v173 = *(float64x2_t *)(v162 + 96);
            float64x2_t v174 = *(float64x2_t *)(v162 + 160);
            float64x2_t v175 = *(float64x2_t *)(v162 + 192);
            float64x2_t v176 = *(float64x2_t *)(v162 + 208);
            float64x2_t v177 = *(float64x2_t *)(v162 + 224);
            float64x2_t v178 = *(float64x2_t *)(v162 + 240);
            float64x2_t v179 = *(float64x2_t *)(v162 + 80);
            float64x2_t v180 = *(float64x2_t *)(v162 + 112);
            float64x2_t v385 = *(float64x2_t *)v162;
            float64x2_t v386 = v170;
            float64x2_t v387 = v171;
            float64x2_t v388 = v174;
            float64x2_t v393 = v166;
            float64x2_t v394 = v167;
            float64x2_t v395 = v168;
            float64x2_t v396 = v169;
            float64x2_t v401 = v172;
            float64x2_t v402 = v173;
            float64x2_t v403 = v175;
            float64x2_t v404 = v177;
            uint64_t v164 = 256;
            float64x2_t v409 = v179;
            float64x2_t v410 = v180;
            float64x2_t v411 = v176;
            float64x2_t v412 = v178;
          }
          else if (v163 == 7)
          {
            float64x2_t v165 = vld1q_dup_f64((const double *)v162);
            float64x2_t v385 = v165;
            float64x2_t v386 = v165;
            float64x2_t v387 = v165;
            float64x2_t v388 = v165;
            float64x2_t v393 = v165;
            float64x2_t v394 = v165;
            float64x2_t v395 = v165;
            float64x2_t v396 = v165;
            float64x2_t v401 = v165;
            float64x2_t v402 = v165;
            float64x2_t v403 = v165;
            float64x2_t v404 = v165;
            float64x2_t v409 = v165;
            float64x2_t v410 = v165;
            float64x2_t v411 = v165;
            uint64_t v164 = 8;
            float64x2_t v412 = v165;
          }
          else if (v77[4])
          {
            uint64_t v164 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v162, v163);
          }
          else
          {
            uint64_t v164 = 0;
            float64x2_t v387 = 0u;
            float64x2_t v388 = 0u;
            float64x2_t v385 = 0u;
            float64x2_t v386 = 0u;
            float64x2_t v393 = 0u;
            float64x2_t v394 = 0u;
            float64x2_t v395 = 0u;
            float64x2_t v396 = 0u;
            float64x2_t v401 = 0u;
            float64x2_t v402 = 0u;
            float64x2_t v403 = 0u;
            float64x2_t v404 = 0u;
            float64x2_t v409 = 0u;
            float64x2_t v410 = 0u;
            float64x2_t v411 = 0u;
            float64x2_t v412 = 0u;
          }
          uint64_t v181 = v162 + v164;
          unsigned int v182 = v77[5];
          if (v182 == 255)
          {
            float64x2_t v185 = *(float64x2_t *)(v181 + 16);
            float64x2_t v186 = *(float64x2_t *)(v181 + 48);
            float64x2_t v187 = *(float64x2_t *)(v181 + 144);
            float64x2_t v188 = *(float64x2_t *)(v181 + 176);
            float64x2_t v189 = *(float64x2_t *)(v181 + 32);
            float64x2_t v190 = *(float64x2_t *)(v181 + 128);
            float64x2_t v191 = *(float64x2_t *)(v181 + 64);
            float64x2_t v192 = *(float64x2_t *)(v181 + 96);
            float64x2_t v193 = *(float64x2_t *)(v181 + 160);
            float64x2_t v194 = *(float64x2_t *)(v181 + 192);
            float64x2_t v195 = *(float64x2_t *)(v181 + 208);
            float64x2_t v196 = *(float64x2_t *)(v181 + 224);
            float64x2_t v197 = *(float64x2_t *)(v181 + 240);
            float64x2_t v198 = *(float64x2_t *)(v181 + 80);
            float64x2_t v199 = *(float64x2_t *)(v181 + 112);
            float64x2_t v417 = *(float64x2_t *)v181;
            float64x2_t v418 = v189;
            float64x2_t v419 = v190;
            float64x2_t v420 = v193;
            float64x2_t v425 = v185;
            float64x2_t v426 = v186;
            float64x2_t v427 = v187;
            float64x2_t v428 = v188;
            float64x2_t v433 = v191;
            float64x2_t v434 = v192;
            float64x2_t v435 = v194;
            float64x2_t v436 = v196;
            uint64_t v183 = 256;
            float64x2_t v441 = v198;
            float64x2_t v442 = v199;
            float64x2_t v443 = v195;
            float64x2_t v444 = v197;
          }
          else if (v182 == 7)
          {
            float64x2_t v184 = vld1q_dup_f64((const double *)v181);
            float64x2_t v417 = v184;
            float64x2_t v418 = v184;
            float64x2_t v419 = v184;
            float64x2_t v420 = v184;
            float64x2_t v425 = v184;
            float64x2_t v426 = v184;
            float64x2_t v427 = v184;
            float64x2_t v428 = v184;
            float64x2_t v433 = v184;
            float64x2_t v434 = v184;
            float64x2_t v435 = v184;
            float64x2_t v436 = v184;
            float64x2_t v441 = v184;
            float64x2_t v442 = v184;
            float64x2_t v443 = v184;
            uint64_t v183 = 8;
            float64x2_t v444 = v184;
          }
          else if (v77[5])
          {
            uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v181, v182);
          }
          else
          {
            uint64_t v183 = 0;
            float64x2_t v419 = 0u;
            float64x2_t v420 = 0u;
            float64x2_t v417 = 0u;
            float64x2_t v418 = 0u;
            float64x2_t v425 = 0u;
            float64x2_t v426 = 0u;
            float64x2_t v427 = 0u;
            float64x2_t v428 = 0u;
            float64x2_t v433 = 0u;
            float64x2_t v434 = 0u;
            float64x2_t v435 = 0u;
            float64x2_t v436 = 0u;
            float64x2_t v441 = 0u;
            float64x2_t v442 = 0u;
            float64x2_t v443 = 0u;
            float64x2_t v444 = 0u;
          }
          uint64_t v200 = v181 + v183;
          unsigned int v201 = v77[6];
          if (v201 == 255)
          {
            float64x2_t v204 = *(float64x2_t *)(v200 + 16);
            float64x2_t v205 = *(float64x2_t *)(v200 + 48);
            float64x2_t v206 = *(float64x2_t *)(v200 + 144);
            float64x2_t v207 = *(float64x2_t *)(v200 + 176);
            float64x2_t v208 = *(float64x2_t *)(v200 + 32);
            float64x2_t v209 = *(float64x2_t *)(v200 + 128);
            float64x2_t v210 = *(float64x2_t *)(v200 + 64);
            float64x2_t v211 = *(float64x2_t *)(v200 + 96);
            float64x2_t v212 = *(float64x2_t *)(v200 + 160);
            float64x2_t v213 = *(float64x2_t *)(v200 + 192);
            float64x2_t v214 = *(float64x2_t *)(v200 + 208);
            float64x2_t v215 = *(float64x2_t *)(v200 + 224);
            float64x2_t v216 = *(float64x2_t *)(v200 + 240);
            float64x2_t v217 = *(float64x2_t *)(v200 + 80);
            float64x2_t v218 = *(float64x2_t *)(v200 + 112);
            float64x2_t v389 = *(float64x2_t *)v200;
            float64x2_t v390 = v208;
            float64x2_t v391 = v209;
            float64x2_t v392 = v212;
            float64x2_t v397 = v204;
            float64x2_t v398 = v205;
            float64x2_t v399 = v206;
            float64x2_t v400 = v207;
            float64x2_t v405 = v210;
            float64x2_t v406 = v211;
            float64x2_t v407 = v213;
            float64x2_t v408 = v215;
            uint64_t v202 = 256;
            float64x2_t v413 = v217;
            float64x2_t v414 = v218;
            float64x2_t v415 = v214;
            float64x2_t v416 = v216;
          }
          else if (v201 == 7)
          {
            float64x2_t v203 = vld1q_dup_f64((const double *)v200);
            float64x2_t v389 = v203;
            float64x2_t v390 = v203;
            float64x2_t v391 = v203;
            float64x2_t v392 = v203;
            float64x2_t v397 = v203;
            float64x2_t v398 = v203;
            float64x2_t v399 = v203;
            float64x2_t v400 = v203;
            float64x2_t v405 = v203;
            float64x2_t v406 = v203;
            float64x2_t v407 = v203;
            float64x2_t v408 = v203;
            float64x2_t v413 = v203;
            float64x2_t v414 = v203;
            float64x2_t v415 = v203;
            uint64_t v202 = 8;
            float64x2_t v416 = v203;
          }
          else if (v77[6])
          {
            uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v389, 128, v200, v201);
          }
          else
          {
            uint64_t v202 = 0;
            float64x2_t v391 = 0u;
            float64x2_t v392 = 0u;
            float64x2_t v389 = 0u;
            float64x2_t v390 = 0u;
            float64x2_t v397 = 0u;
            float64x2_t v398 = 0u;
            float64x2_t v399 = 0u;
            float64x2_t v400 = 0u;
            float64x2_t v405 = 0u;
            float64x2_t v406 = 0u;
            float64x2_t v407 = 0u;
            float64x2_t v408 = 0u;
            float64x2_t v413 = 0u;
            float64x2_t v414 = 0u;
            float64x2_t v415 = 0u;
            float64x2_t v416 = 0u;
          }
          uint64_t v219 = v200 + v202;
          unsigned int v220 = v77[7];
          if (v220 == 255)
          {
            float64x2_t v224 = *(float64x2_t *)(v219 + 16);
            float64x2_t v225 = *(float64x2_t *)(v219 + 48);
            float64x2_t v226 = *(float64x2_t *)(v219 + 144);
            float64x2_t v227 = *(float64x2_t *)(v219 + 176);
            float64x2_t v228 = *(float64x2_t *)(v219 + 32);
            float64x2_t v229 = *(float64x2_t *)(v219 + 128);
            float64x2_t v230 = *(float64x2_t *)(v219 + 160);
            float64x2_t v231 = *(float64x2_t *)(v219 + 64);
            float64x2_t v232 = *(float64x2_t *)(v219 + 96);
            float64x2_t v233 = *(float64x2_t *)(v219 + 192);
            float64x2_t v234 = *(float64x2_t *)(v219 + 224);
            float64x2_t v235 = *(float64x2_t *)(v219 + 240);
            float64x2_t v236 = *(float64x2_t *)(v219 + 80);
            float64x2_t v237 = *(float64x2_t *)(v219 + 112);
            float64x2_t v238 = *(float64x2_t *)(v219 + 208);
            float64x2_t v421 = *(float64x2_t *)v219;
            float64x2_t v422 = v228;
            float64x2_t v423 = v229;
            float64x2_t v424 = v230;
            float64x2_t v429 = v224;
            float64x2_t v430 = v225;
            float64x2_t v431 = v226;
            float64x2_t v432 = v227;
            float64x2_t v437 = v231;
            float64x2_t v438 = v232;
            float64x2_t v439 = v233;
            float64x2_t v440 = v234;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v445 = v236;
            float64x2_t v446 = v237;
            float64x2_t v447 = v238;
            float64x2_t v448 = v235;
            if (!v302) {
              goto LABEL_185;
            }
          }
          else if (v220 == 7)
          {
            float64x2_t v223 = vld1q_dup_f64((const double *)v219);
            float64x2_t v421 = v223;
            float64x2_t v422 = v223;
            float64x2_t v423 = v223;
            float64x2_t v424 = v223;
            float64x2_t v429 = v223;
            float64x2_t v430 = v223;
            float64x2_t v431 = v223;
            float64x2_t v432 = v223;
            float64x2_t v437 = v223;
            float64x2_t v438 = v223;
            float64x2_t v439 = v223;
            float64x2_t v440 = v223;
            float64x2_t v445 = v223;
            float64x2_t v446 = v223;
            float64x2_t v447 = v223;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v448 = v223;
            if (!v302) {
              goto LABEL_185;
            }
          }
          else if (v77[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v421, 128, v219, v220);
            unsigned int v222 = v314;
            unsigned int v86 = v315;
            int v221 = v316;
            if (!v316) {
              goto LABEL_185;
            }
          }
          else
          {
            float64x2_t v423 = 0u;
            float64x2_t v424 = 0u;
            float64x2_t v421 = 0u;
            float64x2_t v422 = 0u;
            float64x2_t v429 = 0u;
            float64x2_t v430 = 0u;
            float64x2_t v431 = 0u;
            float64x2_t v432 = 0u;
            float64x2_t v437 = 0u;
            float64x2_t v438 = 0u;
            float64x2_t v439 = 0u;
            float64x2_t v440 = 0u;
            float64x2_t v445 = 0u;
            float64x2_t v446 = 0u;
            int v221 = v302;
            unsigned int v222 = v293;
            float64x2_t v447 = 0u;
            float64x2_t v448 = 0u;
            if (!v302) {
              goto LABEL_185;
            }
          }
          if (v317)
          {
            uint64_t v239 = 0;
            unint64_t v240 = (unint64_t)v222 << 7;
            uint64_t v241 = 8 * v86;
            float64x2_t v242 = (char *)&v321 + v240 + v241;
            uint64_t v243 = v312;
            uint64_t v244 = v313;
            unint64_t v245 = 8 * v317;
            if (v245 <= 1) {
              unint64_t v246 = 1;
            }
            else {
              unint64_t v246 = 8 * v317;
            }
            unint64_t v247 = v240 + v241;
            unint64_t v248 = (char *)&v321 + v240 + v241;
            if (v246) {
              BOOL v249 = (v246 - 1) >> 32 == 0;
            }
            else {
              BOOL v249 = 0;
            }
            char v250 = !v249;
            uint64_t v251 = v246 & 0x7FFFFFFE0;
            uint64_t v252 = v246 & 0x7FFFFFFF8;
            unint64_t v253 = (char *)&v322 + v247;
            unint64_t v254 = v312 + 1;
            unint64_t v255 = v242;
            uint64_t v256 = v312;
            do
            {
              BOOL v257 = (char *)v243 + v244 * v239;
              char v258 = &v242[128 * v239];
              if ((unint64_t)(&v248[128 * v239] - v257) < 0x20) {
                char v259 = 1;
              }
              else {
                char v259 = v250;
              }
              if (v259)
              {
                int v260 = 0;
                goto LABEL_182;
              }
              if (v246 >= 0x20)
              {
                int v262 = v254;
                unsigned int v263 = v253;
                uint64_t v264 = v246 & 0x7FFFFFFE0;
                do
                {
                  long long v265 = *v262;
                  *(v263 - 1) = *(v262 - 1);
                  *unsigned int v263 = v265;
                  v263 += 2;
                  v262 += 2;
                  v264 -= 32;
                }
                while (v264);
                if (v246 == v251) {
                  goto LABEL_165;
                }
                uint64_t v261 = v246 & 0x7FFFFFFE0;
                if ((v246 & 0x18) == 0)
                {
                  v257 += v251;
                  v258 += v251;
                  int v260 = v246 & 0xFFFFFFE0;
                  goto LABEL_182;
                }
              }
              else
              {
                uint64_t v261 = 0;
              }
              v258 += v252;
              unint64_t v266 = v261 - (v246 & 0x7FFFFFFF8);
              char v267 = (uint64_t *)((char *)v256 + v261);
              int v268 = &v255[v261];
              do
              {
                uint64_t v269 = *v267++;
                *(void *)int v268 = v269;
                v268 += 8;
                v266 += 8;
              }
              while (v266);
              if (v246 == v252) {
                goto LABEL_165;
              }
              v257 += v252;
              int v260 = v246 & 0xFFFFFFF8;
LABEL_182:
              unsigned int v270 = v260 + 1;
              do
              {
                char v271 = *v257++;
                *v258++ = v271;
              }
              while (v245 > v270++);
LABEL_165:
              ++v239;
              v253 += 128;
              unint64_t v254 = (long long *)((char *)v254 + v244);
              uint64_t v256 = (_OWORD *)((char *)v256 + v244);
              v255 += 128;
            }
            while (v239 != v221);
          }
LABEL_185:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(&v321, 128, v310, v311, v318, v319);
LABEL_186:
          uint64_t result = v306;
          if (v307) {
            uint64_t result = memcpy(v306, v81, 0x800uLL);
          }
          BOOL v31 = v41++ == v295 >> 4;
          uint64_t v36 = v303;
        }
        while (!v31);
        BOOL v31 = v26++ == v289;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v139 = v23;
  uint64_t v24 = v12;
  uint64_t v183 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v156 = v14;
  unsigned int v141 = v14 + a10 - 1;
  uint64_t v157 = v24;
  if (*(void *)(v24 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  unsigned int v28 = v20 - 1;
  unsigned int v29 = v18 - 1;
  unsigned int v30 = v14 >> 4;
  unsigned int v140 = v141 >> 4;
  BOOL v31 = (v27 & 0xD00) == 0 || v27 == 768;
  int v32 = v27 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v162 = v34;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v36 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v37 = *(unsigned __int8 *)(v24 + 254);
    char v38 = __clz(v28);
    if (1 << v36 >= v18 || v20 >> v37)
    {
      if (!(v18 >> v36) && 1 << v37 < v20)
      {
        if (v18 < 2) {
          unsigned int v41 = 0;
        }
        else {
          unsigned int v41 = __clz(~(-1 << -(char)__clz(v29))) - 32;
        }
        v37 += v36 + v41;
        unsigned int v36 = -v41;
      }
    }
    else
    {
      unsigned int v39 = 32 - __clz(~(-1 << -v38));
      unsigned int v40 = v37 + v36;
      if (v20 < 2) {
        unsigned int v39 = 0;
      }
      unsigned int v36 = v40 - v39;
      unsigned int v37 = v39;
    }
    if (v20 < 2)
    {
      if (v37) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v38)) < v37)
    {
LABEL_27:
      BOOL v151 = 0;
LABEL_32:
      unsigned int v148 = v37 - 4;
      unsigned int v145 = v36 - 4;
      int v43 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v138 = (((~v43 + v20) & v43) + ~(-1 << v37)) >> v37;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v42 = 0;
    }
    else {
      unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz(v29)));
    }
    BOOL v151 = v42 >= v36;
    goto LABEL_32;
  }
  BOOL v151 = 0;
  unsigned int v138 = 0;
  unsigned int v145 = 0;
  unsigned int v148 = 0;
LABEL_33:
  if (v30 <= v140)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v137 = v16 >> 4;
    if (v16 >> 4 <= v150 >> 4)
    {
      unsigned int v160 = v28 >> 4;
      unsigned int v136 = v29 >> 4;
      int v159 = (v28 & 0xF) + 1;
      int v135 = (v29 & 0xF) + 1;
      uint32x2_t v44 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v45 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v44, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v44));
      __int32 v146 = v45.i32[0] | v45.i32[1];
      int8x8_t v144 = v45;
      BOOL v142 = v45.i32[0] != 0;
      BOOL v143 = v45.i32[1] != 0;
      unsigned int v149 = v16;
      do
      {
        unsigned int v46 = (16 * v30) | 0xF;
        if (16 * v30 <= v156) {
          int v47 = v156;
        }
        else {
          int v47 = 16 * v30;
        }
        if (v141 < v46) {
          unsigned int v46 = v141;
        }
        int v147 = v47 - 16 * v30;
        int v155 = v46 - v47 + 1;
        unsigned int v48 = v137;
        if (v30 == v136) {
          unsigned int v49 = v135;
        }
        else {
          unsigned int v49 = 16;
        }
        uint64_t v154 = v139 + (v47 - v156) * a11;
        unsigned int v158 = v49;
        do
        {
          unsigned int v50 = 16 * v48;
          unsigned int v51 = 16 * (v48 + 1) - 1;
          if (16 * v48 <= v16) {
            int v52 = v16;
          }
          else {
            int v52 = 16 * v48;
          }
          if (v150 < v51) {
            unsigned int v51 = v150;
          }
          int v53 = v51 - v52 + 1;
          if (v48 == v160) {
            unsigned int v54 = v159;
          }
          else {
            unsigned int v54 = 16;
          }
          BOOL v55 = 1;
          if (16 * v30 >= v156 && v50 >= v16)
          {
            int v56 = v159;
            if (v48 != v160) {
              int v56 = 16;
            }
            BOOL v55 = v53 != v56 || v155 != v49;
          }
          if (v151)
          {
            if (v148 | v145)
            {
              int v58 = 0;
              uint64_t v59 = 0;
              BOOL v60 = v145 != 0;
              int v61 = 1;
              BOOL v63 = v148 != 0;
              unsigned int v62 = v145;
              unsigned int v64 = v148;
              do
              {
                --v64;
                if (v63) {
                  v59 |= (unint64_t)(v48 & ~(-1 << v148) & v61) << v58++;
                }
                else {
                  unsigned int v64 = 0;
                }
                --v62;
                if (v60) {
                  v59 |= (unint64_t)(v30 & ~(-1 << v145) & v61) << v58++;
                }
                else {
                  unsigned int v62 = 0;
                }
                v61 *= 2;
                --v58;
                BOOL v60 = v62 != 0;
                BOOL v63 = v64 != 0;
              }
              while (v62 | v64);
            }
            else
            {
              uint64_t v59 = 0;
            }
            uint64_t v72 = *(void *)(result + 320) * ((v48 >> v148) + (v30 >> v145) * v138) + (v59 << 11);
          }
          else
          {
            if (v146)
            {
              int v65 = 0;
              uint64_t v66 = 0;
              int v67 = 1;
              BOOL v68 = v142;
              BOOL v69 = v143;
              __int32 v71 = v144.i32[0];
              __int32 v70 = v144.i32[1];
              do
              {
                --v70;
                if (v69) {
                  v66 |= (unint64_t)(v67 & v48) << v65++;
                }
                else {
                  __int32 v70 = 0;
                }
                --v71;
                if (v68) {
                  v66 |= (unint64_t)(v67 & v30) << v65++;
                }
                else {
                  __int32 v71 = 0;
                }
                v67 *= 2;
                --v65;
                BOOL v68 = v71 != 0;
                BOOL v69 = v70 != 0;
              }
              while (v71 | v70);
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v72 = v66 << 11;
          }
          unsigned int v73 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20) {
            unsigned int v75 = 0;
          }
          else {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
          }
          unsigned int v76 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v76 <= 1) {
            unsigned int v76 = 1;
          }
          unsigned int v77 = v76 + 15;
          if (v77 < 0x20) {
            unsigned int v78 = 0;
          }
          else {
            unsigned int v78 = 32 - __clz(~(-1 << -(char)__clz((v77 >> 4) - 1)));
          }
          if (v78 | v75)
          {
            int v79 = 0;
            uint64_t v80 = 0;
            BOOL v81 = v75 != 0;
            BOOL v82 = v78 != 0;
            int v83 = 1;
            do
            {
              --v75;
              if (v81) {
                v80 |= (unint64_t)(v83 & v48) << v79++;
              }
              else {
                unsigned int v75 = 0;
              }
              --v78;
              if (v82) {
                v80 |= (unint64_t)(v83 & v30) << v79++;
              }
              else {
                unsigned int v78 = 0;
              }
              v83 *= 2;
              --v79;
              BOOL v82 = v78 != 0;
              BOOL v81 = v75 != 0;
            }
            while (v78 | v75);
          }
          else
          {
            uint64_t v80 = 0;
          }
          int v85 = v54 < 0x10 || v55;
          unsigned int v86 = (unsigned __int8 *)(v153 + 8 * v80);
          unsigned int v84 = v52 - v16;
          uint64_t v87 = v154 + 8 * (v52 - v16);
          uint64_t v88 = (unsigned char *)(v152 + v72);
          if (v49 < 0x10) {
            int v89 = 1;
          }
          else {
            int v89 = v85;
          }
          __src = v88;
          if (v162)
          {
            if (!v89)
            {
              uint64_t v88 = __dst;
LABEL_123:
              float64x2_t v91 = (_OWORD *)(v154 + 8 * v84);
              uint64_t v92 = a11;
              uint64_t v93 = (uint64_t)v88;
              float64x2_t v94 = (unsigned __int8 *)(v153 + 8 * v80);
              goto LABEL_157;
            }
            char v90 = v54;
            memcpy(__dst, __src, sizeof(__dst));
            LOBYTE(v54) = v90;
            uint64_t v88 = __dst;
            LOBYTE(v49) = v158;
            uint64_t result = v157;
          }
          else if (!v89)
          {
            goto LABEL_123;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          uint64_t v164 = v88;
          unsigned __int8 v172 = v54;
          unsigned __int8 v173 = v49;
          unsigned int v168 = v147;
          unsigned int v169 = v52 - v50;
          float64x2_t v165 = v86;
          uint64_t v166 = v87;
          uint64_t v167 = a11;
          unsigned int v170 = v155;
          unsigned int v171 = v53;
          if (v55)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            goto LABEL_158;
          }
          uint64_t v95 = (uint64_t)&v88[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 128, (uint64_t)v88, *v86)];
          uint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 128, v95, v86[1]);
          uint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 128, v96, v86[2]);
          uint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 128, v97, v86[3]);
          uint64_t v99 = v98
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 128, v98, v86[4]);
          uint64_t v100 = v99
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 128, v99, v86[5]);
          uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 128, v100, v86[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 128, v100 + v101, v86[7]);
          uint64_t v102 = v170;
          if (v170 && v171)
          {
            uint64_t v103 = 0;
            unint64_t v104 = (unint64_t)v168 << 7;
            uint64_t v105 = 8 * v169;
            unsigned int v106 = (char *)v175 + v104 + v105;
            uint64_t v107 = v166;
            uint64_t v108 = v167;
            unint64_t v109 = 8 * v171;
            if (v109 <= 1) {
              unint64_t v110 = 1;
            }
            else {
              unint64_t v110 = 8 * v171;
            }
            unint64_t v111 = v104 + v105;
            float64x2_t v112 = (char *)v175 + v104 + v105;
            if (v110) {
              BOOL v113 = (v110 - 1) >> 32 == 0;
            }
            else {
              BOOL v113 = 0;
            }
            char v114 = !v113;
            uint64_t v115 = v110 & 0x7FFFFFFE0;
            uint64_t v116 = v110 & 0x7FFFFFFF8;
            float64x2_t v117 = (char *)&v175[1] + v111;
            float64x2_t v118 = (long long *)(v166 + 16);
            float64x2_t v119 = v106;
            uint64_t v25 = v166;
            do
            {
              unsigned int v26 = (char *)(v107 + v108 * v103);
              float64x2_t v120 = &v106[128 * v103];
              if ((unint64_t)(&v112[128 * v103] - v26) < 0x20) {
                char v121 = 1;
              }
              else {
                char v121 = v114;
              }
              if (v121)
              {
                int v122 = 0;
                goto LABEL_153;
              }
              if (v110 >= 0x20)
              {
                uint64_t v124 = v118;
                unsigned int v125 = v117;
                uint64_t v126 = v110 & 0x7FFFFFFE0;
                do
                {
                  long long v127 = *v124;
                  *(v125 - 1) = *(v124 - 1);
                  *unsigned int v125 = v127;
                  v125 += 2;
                  v124 += 2;
                  v126 -= 32;
                }
                while (v126);
                if (v110 == v115) {
                  goto LABEL_136;
                }
                uint64_t v123 = v110 & 0x7FFFFFFE0;
                if ((v110 & 0x18) == 0)
                {
                  v26 += v115;
                  v120 += v115;
                  int v122 = v110 & 0xFFFFFFE0;
                  goto LABEL_153;
                }
              }
              else
              {
                uint64_t v123 = 0;
              }
              v120 += v116;
              unint64_t v128 = v123 - (v110 & 0x7FFFFFFF8);
              float64x2_t v129 = (uint64_t *)(v25 + v123);
              float64x2_t v130 = &v119[v123];
              do
              {
                uint64_t v131 = *v129++;
                *(void *)float64x2_t v130 = v131;
                v130 += 8;
                v128 += 8;
              }
              while (v128);
              if (v110 == v116) {
                goto LABEL_136;
              }
              v26 += v116;
              int v122 = v110 & 0xFFFFFFF8;
LABEL_153:
              unsigned int v132 = v122 + 1;
              do
              {
                char v133 = *v26++;
                *v120++ = v133;
              }
              while (v109 > v132++);
LABEL_136:
              ++v103;
              v117 += 128;
              float64x2_t v118 = (long long *)((char *)v118 + v108);
              v25 += v108;
              v119 += 128;
            }
            while (v103 != v102);
          }
          uint64_t v93 = (uint64_t)v164;
          float64x2_t v94 = v165;
          unsigned int v54 = v172;
          unsigned int v49 = v173;
          float64x2_t v91 = v175;
          uint64_t v92 = 128;
LABEL_157:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v91, v92, v93, v94, v54, v49, v25, (uint64_t)v26);
LABEL_158:
          unsigned int v16 = v149;
          if (v162) {
            memcpy(__src, v88, 0x800uLL);
          }
          BOOL v31 = v48++ == v150 >> 4;
          uint64_t result = v157;
          unsigned int v49 = v158;
        }
        while (!v31);
        BOOL v31 = v30++ == v140;
      }
      while (!v31);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v218 = v21;
  uint64_t v219 = v22;
  uint64_t v202 = v23;
  uint64_t v24 = v12;
  uint64_t v247 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v222 = v14;
  unsigned int v204 = v14 + a10 - 1;
  uint64_t v223 = v24;
  if (*(void *)(v24 + 168)) {
    int v25 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v20 - 1;
  unsigned int v27 = v18 - 1;
  unsigned int v28 = v14 >> 4;
  unsigned int v203 = v204 >> 4;
  BOOL v29 = (v25 & 0xD00) == 0 || v25 == 768;
  int v30 = v25 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v226 = v32;
  uint64_t result = v24;
  if (*(unsigned char *)(v24 + 232))
  {
    unsigned int v34 = *(unsigned __int8 *)(v24 + 255);
    unsigned int v35 = *(unsigned __int8 *)(v24 + 254);
    char v36 = __clz(v26);
    if (1 << v34 >= v18 || v20 >> v35)
    {
      if (!(v18 >> v34) && 1 << v35 < v20)
      {
        if (v18 < 2) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = __clz(~(-1 << -(char)__clz(v27))) - 32;
        }
        v35 += v34 + v39;
        unsigned int v34 = -v39;
      }
    }
    else
    {
      unsigned int v37 = 32 - __clz(~(-1 << -v36));
      unsigned int v38 = v35 + v34;
      if (v20 < 2) {
        unsigned int v37 = 0;
      }
      unsigned int v34 = v38 - v37;
      unsigned int v35 = v37;
    }
    if (v20 < 2)
    {
      if (v35) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v36)) < v35)
    {
LABEL_27:
      BOOL v217 = 0;
LABEL_32:
      unsigned int v213 = v35 - 4;
      unsigned int v208 = v34 - 4;
      int v41 = -1 << *(unsigned char *)(*(void *)(v24 + 208) + 48);
      unsigned int v201 = (((~v41 + v20) & v41) + ~(-1 << v35)) >> v35;
      goto LABEL_33;
    }
    if (v18 < 2) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz(v27)));
    }
    BOOL v217 = v40 >= v34;
    goto LABEL_32;
  }
  BOOL v217 = 0;
  unsigned int v201 = 0;
  unsigned int v208 = 0;
  unsigned int v213 = 0;
LABEL_33:
  if (v28 <= v203)
  {
    unsigned int v216 = v16 + a9 - 1;
    unsigned int v200 = v16 >> 4;
    if (v16 >> 4 <= v216 >> 4)
    {
      unsigned int v225 = v26 >> 4;
      unsigned int v199 = v27 >> 4;
      int v224 = (v26 & 0xF) + 1;
      int v198 = (v27 & 0xF) + 1;
      int v197 = ~(-1 << v208);
      uint32x2_t v42 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v43 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v42, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v42));
      __int32 v211 = v43.i32[0] | v43.i32[1];
      int8x8_t v207 = v43;
      BOOL v205 = v43.i32[0] != 0;
      BOOL v206 = v43.i32[1] != 0;
      uint64_t v44 = a11;
      uint64_t v45 = 4 * a11;
      uint64_t v46 = 2 * a11;
      unsigned int v215 = v16;
      do
      {
        unsigned int v47 = (16 * v28) | 0xF;
        if (16 * v28 <= v222) {
          int v48 = v222;
        }
        else {
          int v48 = 16 * v28;
        }
        if (v204 < v47) {
          unsigned int v47 = v204;
        }
        int v212 = v48 - 16 * v28;
        int v221 = v47 - v48 + 1;
        unsigned int v49 = v200;
        if (v28 == v199) {
          unsigned int v50 = v198;
        }
        else {
          unsigned int v50 = 16;
        }
        int v51 = v28 & v197;
        uint64_t v220 = v202 + (v48 - v222) * v44;
        do
        {
          unsigned int v52 = 16 * v49;
          unsigned int v53 = 16 * (v49 + 1) - 1;
          if (16 * v49 <= v16) {
            int v54 = v16;
          }
          else {
            int v54 = 16 * v49;
          }
          if (v216 < v53) {
            unsigned int v53 = v216;
          }
          int v55 = v53 - v54 + 1;
          if (v49 == v225) {
            unsigned int v56 = v224;
          }
          else {
            unsigned int v56 = 16;
          }
          BOOL v57 = 1;
          if (16 * v28 >= v222 && v52 >= v16)
          {
            int v58 = v224;
            if (v49 != v225) {
              int v58 = 16;
            }
            BOOL v57 = v55 != v58 || v221 != v50;
          }
          if (v217)
          {
            if (v213 | v208)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              BOOL v62 = v208 != 0;
              int v63 = 1;
              BOOL v65 = v213 != 0;
              unsigned int v64 = v208;
              unsigned int v66 = v213;
              do
              {
                --v66;
                if (v65) {
                  v61 |= (unint64_t)(v49 & ~(-1 << v213) & v63) << v60++;
                }
                else {
                  unsigned int v66 = 0;
                }
                --v64;
                if (v62) {
                  v61 |= (unint64_t)(v51 & v63) << v60++;
                }
                else {
                  unsigned int v64 = 0;
                }
                v63 *= 2;
                --v60;
                BOOL v62 = v64 != 0;
                BOOL v65 = v66 != 0;
              }
              while (v64 | v66);
            }
            else
            {
              uint64_t v61 = 0;
            }
            uint64_t v74 = *(void *)(result + 320) * ((v49 >> v213) + (v28 >> v208) * v201) + (v61 << 11);
          }
          else
          {
            if (v211)
            {
              int v67 = 0;
              uint64_t v68 = 0;
              int v69 = 1;
              BOOL v70 = v205;
              BOOL v71 = v206;
              __int32 v73 = v207.i32[0];
              __int32 v72 = v207.i32[1];
              do
              {
                --v72;
                if (v71) {
                  v68 |= (unint64_t)(v69 & v49) << v67++;
                }
                else {
                  __int32 v72 = 0;
                }
                --v73;
                if (v70) {
                  v68 |= (unint64_t)(v69 & v28) << v67++;
                }
                else {
                  __int32 v73 = 0;
                }
                v69 *= 2;
                --v67;
                BOOL v70 = v73 != 0;
                BOOL v71 = v72 != 0;
              }
              while (v73 | v72);
            }
            else
            {
              uint64_t v68 = 0;
            }
            uint64_t v74 = v68 << 11;
          }
          unsigned int v75 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v75 <= 1) {
            unsigned int v75 = 1;
          }
          unsigned int v76 = v75 + 15;
          if (v76 < 0x20) {
            unsigned int v77 = 0;
          }
          else {
            unsigned int v77 = 32 - __clz(~(-1 << -(char)__clz((v76 >> 4) - 1)));
          }
          unsigned int v78 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v78 <= 1) {
            unsigned int v78 = 1;
          }
          unsigned int v79 = v78 + 15;
          if (v79 < 0x20)
          {
            unsigned int v80 = 0;
            if (!v77)
            {
LABEL_111:
              uint64_t v82 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v80 = 32 - __clz(~(-1 << -(char)__clz((v79 >> 4) - 1)));
            if (!(v80 | v77)) {
              goto LABEL_111;
            }
          }
          int v81 = 0;
          uint64_t v82 = 0;
          BOOL v83 = v77 != 0;
          BOOL v84 = v80 != 0;
          int v85 = 1;
          do
          {
            --v77;
            if (v83) {
              v82 |= (unint64_t)(v85 & v49) << v81++;
            }
            else {
              unsigned int v77 = 0;
            }
            --v80;
            if (v84) {
              v82 |= (unint64_t)(v85 & v28) << v81++;
            }
            else {
              unsigned int v80 = 0;
            }
            v85 *= 2;
            --v81;
            BOOL v84 = v80 != 0;
            BOOL v83 = v77 != 0;
          }
          while (v80 | v77);
LABEL_112:
          int v86 = v56 < 0x10 || v57;
          uint64_t v87 = (unsigned __int8 *)(v219 + 8 * v82);
          uint64_t v88 = v220 + 8 * (v54 - v16);
          int v89 = (void *)(v218 + v74);
          if (v50 < 0x10) {
            int v90 = 1;
          }
          else {
            int v90 = v86;
          }
          if (v226)
          {
            if (v90)
            {
              float64x2_t v91 = v89;
              int v92 = v55;
              BOOL v93 = v57;
              int v209 = v54;
              memcpy(__dst, v89, sizeof(__dst));
              int v54 = v209;
              BOOL v57 = v93;
              unsigned int v52 = 16 * v49;
              uint64_t v44 = a11;
              int v55 = v92;
              float64x2_t v94 = __dst;
              int v89 = v91;
              uint64_t result = v223;
LABEL_122:
              float64x2_t v214 = v89;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              float64x2_t v228 = v94;
              unsigned __int8 v236 = v56;
              unsigned __int8 v237 = v50;
              unsigned int v232 = v212;
              unsigned int v233 = v54 - v52;
              float64x2_t v229 = v87;
              uint64_t v230 = v88;
              uint64_t v231 = v44;
              unsigned int v234 = v221;
              unsigned int v235 = v55;
              if (v57)
              {
                uint64_t v95 = v94;
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                float64x2_t v94 = v95;
                uint64_t result = v223;
                unsigned int v16 = v215;
                uint64_t v46 = 2 * a11;
                uint64_t v45 = 4 * a11;
                int v51 = v28 & v197;
                unsigned int v96 = v49 + 1;
                goto LABEL_184;
              }
              float64x2_t v210 = v94;
              uint64_t v126 = (uint64_t)&v94[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v239, 128, (uint64_t)v94, *v87)];
              uint64_t v127 = v126
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v241, 128, v126, v87[1]);
              uint64_t v128 = v127
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v240, 128, v127, v87[2]);
              uint64_t v129 = v128
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v242, 128, v128, v87[3]);
              uint64_t v130 = v129
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v243, 128, v129, v87[4]);
              uint64_t v131 = v130
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v245, 128, v130, v87[5]);
              uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 128, v131, v87[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v246, 128, v131 + v132, v87[7]);
              uint64_t v133 = v234;
              if (!v234 || !v235)
              {
LABEL_171:
                uint64_t v168 = 0;
                unsigned int v169 = v228;
                unsigned int v170 = (char *)v229;
                int v171 = v236;
                int v172 = v237;
                unsigned int v16 = v215;
                uint64_t result = v223;
                uint64_t v46 = 2 * a11;
                int v51 = v28 & v197;
                unsigned int v96 = v49 + 1;
                float64x2_t v94 = v210;
                do
                {
                  uint64_t v192 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v168 + 1];
                  uint64_t v193 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v168];
                  unsigned int v194 = (v171 - 8 * v193) & ~((v171 - 8 * (int)v193) >> 31);
                  if (v194 >= 8) {
                    unsigned int v194 = 8;
                  }
                  unsigned int v195 = (v172 - 4 * v192) & ~((v172 - 4 * (int)v192) >> 31);
                  if (v195 >= 4) {
                    unsigned int v195 = 4;
                  }
                  if (v194) {
                    BOOL v196 = v195 == 0;
                  }
                  else {
                    BOOL v196 = 1;
                  }
                  if (v196)
                  {
                    char v191 = 0;
                  }
                  else
                  {
                    unsigned __int8 v173 = &v239[32 * v192 + 4 * v193];
                    long long v174 = v173[2];
                    long long v175 = v173[10];
                    long long v176 = v173[3];
                    long long v177 = v173[11];
                    long long v178 = *v173;
                    long long v179 = v173[8];
                    long long v180 = v173[1];
                    long long v181 = v173[16];
                    long long v182 = v173[17];
                    long long v183 = v173[18];
                    long long v184 = v173[19];
                    long long v185 = v173[9];
                    v173 += 24;
                    long long v186 = v173[1];
                    long long v187 = v173[2];
                    long long v188 = v173[3];
                    long long v189 = *v173;
                    *unsigned int v169 = v178;
                    v169[1] = v179;
                    int64x2_t v169[2] = v180;
                    v169[3] = v185;
                    v169[4] = v181;
                    v169[5] = v189;
                    v169[6] = v182;
                    v169[7] = v186;
                    v169[8] = v174;
                    v169[9] = v175;
                    v169[10] = v176;
                    v169[11] = v177;
                    float64x2_t v190 = v169 + 12;
                    v169 += 16;
                    char v191 = -1;
                    *float64x2_t v190 = v183;
                    v190[1] = v187;
                    v190[2] = v184;
                    v190[3] = v188;
                  }
                  *v170++ = v191;
                  v168 += 2;
                }
                while (v168 != 16);
                uint64_t v45 = 4 * a11;
LABEL_184:
                int v89 = v214;
                if (v226) {
                  goto LABEL_47;
                }
                goto LABEL_48;
              }
              uint64_t v134 = 0;
              unint64_t v135 = (unint64_t)v232 << 7;
              uint64_t v136 = 8 * v233;
              unsigned int v137 = (char *)v239 + v135 + v136;
              uint64_t v138 = v230;
              uint64_t v139 = v231;
              unint64_t v140 = 8 * v235;
              if (v140 <= 1) {
                unint64_t v141 = 1;
              }
              else {
                unint64_t v141 = 8 * v235;
              }
              unint64_t v142 = v135 + v136;
              BOOL v143 = (char *)v239 + v135 + v136;
              if (v141) {
                BOOL v144 = (v141 - 1) >> 32 == 0;
              }
              else {
                BOOL v144 = 0;
              }
              char v145 = !v144;
              uint64_t v146 = v141 & 0x7FFFFFFE0;
              uint64_t v147 = v141 & 0x7FFFFFFF8;
              unsigned int v148 = (char *)&v239[1] + v142;
              unsigned int v149 = (long long *)(v230 + 16);
              unsigned int v150 = v137;
              uint64_t v151 = v230;
              while (2)
              {
                uint64_t v152 = (char *)(v138 + v139 * v134);
                uint64_t v153 = &v137[128 * v134];
                if ((unint64_t)(&v143[128 * v134] - v152) < 0x20) {
                  char v154 = 1;
                }
                else {
                  char v154 = v145;
                }
                if (v154)
                {
                  int v155 = 0;
LABEL_168:
                  unsigned int v165 = v155 + 1;
                  do
                  {
                    char v166 = *v152++;
                    *v153++ = v166;
                  }
                  while (v140 > v165++);
                }
                else
                {
                  if (v141 >= 0x20)
                  {
                    uint64_t v157 = v149;
                    unsigned int v158 = v148;
                    uint64_t v159 = v141 & 0x7FFFFFFE0;
                    do
                    {
                      long long v160 = *v157;
                      *(v158 - 1) = *(v157 - 1);
                      *unsigned int v158 = v160;
                      v158 += 2;
                      v157 += 2;
                      v159 -= 32;
                    }
                    while (v159);
                    if (v141 == v146) {
                      goto LABEL_151;
                    }
                    uint64_t v156 = v141 & 0x7FFFFFFE0;
                    if ((v141 & 0x18) == 0)
                    {
                      v152 += v146;
                      v153 += v146;
                      int v155 = v141 & 0xFFFFFFE0;
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    uint64_t v156 = 0;
                  }
                  v153 += v147;
                  unint64_t v161 = v156 - (v141 & 0x7FFFFFFF8);
                  int v162 = (uint64_t *)(v151 + v156);
                  unsigned int v163 = &v150[v156];
                  do
                  {
                    uint64_t v164 = *v162++;
                    *(void *)unsigned int v163 = v164;
                    v163 += 8;
                    v161 += 8;
                  }
                  while (v161);
                  if (v141 != v147)
                  {
                    v152 += v147;
                    int v155 = v141 & 0xFFFFFFF8;
                    goto LABEL_168;
                  }
                }
LABEL_151:
                ++v134;
                v148 += 128;
                unsigned int v149 = (long long *)((char *)v149 + v139);
                v151 += v139;
                v150 += 128;
                if (v134 == v133) {
                  goto LABEL_171;
                }
                continue;
              }
            }
            float64x2_t v94 = __dst;
          }
          else
          {
            float64x2_t v94 = v89;
            if (v90) {
              goto LABEL_122;
            }
          }
          uint64_t v97 = 0;
          uint64_t v98 = v94;
          do
          {
            uint64_t v121 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v97 + 1];
            uint64_t v122 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v97];
            unsigned int v123 = (v56 - 8 * v122) & ~((int)(v56 - 8 * v122) >> 31);
            if (v123 >= 8) {
              unsigned int v123 = 8;
            }
            unsigned int v124 = (v50 - 4 * v121) & ~((int)(v50 - 4 * v121) >> 31);
            if (v124 >= 4) {
              unsigned int v124 = 4;
            }
            if (v123) {
              BOOL v125 = v124 == 0;
            }
            else {
              BOOL v125 = 1;
            }
            if (v125)
            {
              char v120 = 0;
            }
            else
            {
              uint64_t v99 = (long long *)(v88 + v45 * v121 + (v122 << 6));
              uint64_t v100 = (long long *)((char *)v99 + v44);
              long long v102 = *v99;
              long long v103 = v99[1];
              long long v104 = v99[2];
              long long v105 = v99[3];
              uint64_t v101 = (long long *)((char *)v99 + v46);
              long long v106 = v100[2];
              long long v107 = v100[3];
              long long v108 = *v100;
              long long v110 = *v101;
              long long v111 = v101[1];
              long long v112 = v101[2];
              long long v113 = v101[3];
              unint64_t v109 = (long long *)((char *)v101 + v44);
              long long v114 = v103;
              long long v115 = v100[1];
              long long v116 = v109[1];
              long long v117 = v109[2];
              long long v118 = v109[3];
              long long v119 = *v109;
              *uint64_t v98 = v102;
              v98[1] = v108;
              v98[2] = v114;
              v98[3] = v115;
              v98[4] = v110;
              v98[5] = v119;
              v98[6] = v111;
              v98[7] = v116;
              v98[8] = v104;
              v98[9] = v106;
              v98[10] = v105;
              v98[11] = v107;
              v98[12] = v112;
              v98[13] = v117;
              v98[14] = v113;
              v98[15] = v118;
              v98 += 16;
              char v120 = -1;
            }
            *v87++ = v120;
            v97 += 2;
          }
          while (v97 != 16);
          unsigned int v16 = v215;
          int v51 = v28 & v197;
          unsigned int v96 = v49 + 1;
          if (v226)
          {
LABEL_47:
            memcpy(v89, v94, 0x800uLL);
            uint64_t v46 = 2 * a11;
            uint64_t v45 = 4 * a11;
            uint64_t result = v223;
          }
LABEL_48:
          BOOL v29 = v49 == v216 >> 4;
          unsigned int v49 = v96;
        }
        while (!v29);
        BOOL v29 = v28++ == v203;
      }
      while (!v29);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v152 = v21;
  uint64_t v153 = v22;
  uint64_t v142 = v23;
  uint64_t v24 = v12;
  uint64_t v183 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  uint64_t v25 = v24;
  unsigned int v157 = v14;
  unsigned int v26 = v14 >> 4;
  unsigned int v141 = v14 + a10 - 1;
  unsigned int v143 = v141 >> 4;
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v28 = *(_DWORD *)(v24 + 112);
  uint64_t v158 = v25;
  if (*(void *)(v25 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v25 = v158;
    int v30 = CacheMode & 0xF00;
  }
  else
  {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v162 = v34;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v25, *(_DWORD *)(v25 + 144) + a12);
  uint64_t v37 = v158;
  BOOL v151 = isLevelTiled;
  if (v26 <= v143)
  {
    unsigned int v150 = v16 + a9 - 1;
    unsigned int v140 = v16 >> 4;
    if (v16 >> 4 <= v150 >> 4)
    {
      unsigned int v137 = v20 - 1;
      unsigned int v139 = (v18 - 1) >> 4;
      int v160 = ((v20 - 1) & 0xF) + 1;
      unsigned int v161 = (v20 - 1) >> 4;
      int v138 = ((v18 - 1) & 0xF) + 1;
      uint32x2_t v38 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v39 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v38, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v38));
      __int32 v148 = v39.i32[0] | v39.i32[1];
      int8x8_t v147 = v39;
      BOOL v145 = v39.i32[0] != 0;
      BOOL v146 = v39.i32[1] != 0;
      unint64_t v136 = 8 * v28 * (unint64_t)v27;
      unsigned int v149 = v16;
      do
      {
        unsigned int v40 = (16 * v26) | 0xF;
        if (16 * v26 <= v157) {
          int v41 = v157;
        }
        else {
          int v41 = 16 * v26;
        }
        unsigned int v42 = v140;
        if (v141 < v40) {
          unsigned int v40 = v141;
        }
        int v144 = v41 - 16 * v26;
        int v155 = v40 - v41 + 1;
        unsigned int v156 = 16 * v26;
        if (v26 == v139) {
          unsigned int v43 = v138;
        }
        else {
          unsigned int v43 = 16;
        }
        uint64_t v154 = v142 + (v41 - v157) * a11;
        unsigned int v159 = v43;
        do
        {
          unsigned int v44 = 16 * v42;
          unsigned int v45 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v16) {
            uint64_t v46 = v16;
          }
          else {
            uint64_t v46 = v44;
          }
          if (v150 < v45) {
            unsigned int v45 = v150;
          }
          unsigned int v47 = v45 - v46 + 1;
          if (v42 == v161) {
            unsigned int v48 = v160;
          }
          else {
            unsigned int v48 = 16;
          }
          BOOL v49 = 1;
          if (v156 >= v157 && v44 >= v16)
          {
            int v50 = v160;
            if (v42 != v161) {
              int v50 = 16;
            }
            BOOL v49 = v47 != v50 || v155 != v43;
          }
          if (v151)
          {
            unsigned int v71 = 0;
            uint64_t v72 = v136 >> (*(unsigned char *)(v37 + 57) != 0);
            char v73 = 1;
            if (v72 > 127)
            {
              if (v72 > 511)
              {
                if (v72 == 512)
                {
                  unsigned int v71 = 16;
                  char v74 = 1;
                  unsigned int v75 = 16;
                }
                else
                {
                  char v74 = 1;
                  unsigned int v75 = 0;
                  if (v72 == 1024)
                  {
                    unsigned int v75 = 8;
                    unsigned int v71 = 16;
                  }
                }
              }
              else if (v72 == 128)
              {
                char v73 = 0;
                char v74 = 0;
                unsigned int v71 = 32;
                unsigned int v75 = 32;
              }
              else
              {
                char v74 = 1;
                unsigned int v75 = 0;
                if (v72 == 256)
                {
                  char v73 = 0;
                  unsigned int v75 = 16;
                  unsigned int v71 = 32;
                }
              }
            }
            else
            {
              char v74 = 1;
              unsigned int v75 = 0;
              switch(v72)
              {
                case 4:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 128;
                  unsigned int v71 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 128;
                  unsigned int v75 = 128;
                  break;
                case 16:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v75 = 64;
                  unsigned int v71 = 128;
                  break;
                case 32:
                  char v73 = 0;
                  char v74 = 0;
                  unsigned int v71 = 64;
                  unsigned int v75 = 64;
                  break;
                default:
                  if (v72 == 64)
                  {
                    char v73 = 0;
                    char v74 = 0;
                    unsigned int v75 = 32;
                    unsigned int v71 = 64;
                  }
                  break;
              }
            }
            unsigned int v127 = (v71 >> 4) - 1;
            if (v73)
            {
              unsigned int v128 = 0;
              if (v74) {
                goto LABEL_158;
              }
LABEL_147:
              unsigned int v129 = 32 - __clz(~(-1 << -(char)__clz(((v75 + 15) >> 4) - 1)));
              if (v129 | v128) {
                goto LABEL_148;
              }
LABEL_159:
              uint64_t v131 = 0;
            }
            else
            {
              unsigned int v128 = 32 - __clz(~(-1 << -(char)__clz(v127)));
              if ((v74 & 1) == 0) {
                goto LABEL_147;
              }
LABEL_158:
              unsigned int v129 = 0;
              if (!v128) {
                goto LABEL_159;
              }
LABEL_148:
              int v130 = 0;
              uint64_t v131 = 0;
              int v132 = v42 & v127;
              BOOL v133 = v128 != 0;
              BOOL v134 = v129 != 0;
              int v135 = 1;
              do
              {
                --v128;
                if (v133) {
                  v131 |= (unint64_t)(v135 & v132) << v130++;
                }
                else {
                  unsigned int v128 = 0;
                }
                --v129;
                if (v134) {
                  v131 |= (unint64_t)(v135 & v26 & ((v75 >> 4) - 1)) << v130++;
                }
                else {
                  unsigned int v129 = 0;
                }
                v135 *= 2;
                --v130;
                BOOL v134 = v129 != 0;
                BOOL v133 = v128 != 0;
              }
              while (v129 | v128);
            }
            unint64_t v59 = ((unint64_t)(v44 / v71 + v156 / v75 * ((v71 + v137) / v71)) << 14) + (v131 << 11);
            goto LABEL_59;
          }
          if (v148)
          {
            int v52 = 0;
            uint64_t v53 = 0;
            int v54 = 1;
            BOOL v55 = v145;
            BOOL v56 = v146;
            __int32 v58 = v147.i32[0];
            __int32 v57 = v147.i32[1];
            do
            {
              --v57;
              if (v56) {
                v53 |= (unint64_t)(v54 & v42) << v52++;
              }
              else {
                __int32 v57 = 0;
              }
              --v58;
              if (v55) {
                v53 |= (unint64_t)(v54 & v26) << v52++;
              }
              else {
                __int32 v58 = 0;
              }
              v54 *= 2;
              --v52;
              BOOL v55 = v58 != 0;
              BOOL v56 = v57 != 0;
            }
            while (v58 | v57);
          }
          else
          {
            uint64_t v53 = 0;
          }
          unint64_t v59 = v53 << 11;
LABEL_59:
          unsigned int v60 = *(_DWORD *)(v37 + 128) >> (*(unsigned char *)(v37 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 15;
          if (v61 < 0x20) {
            unsigned int v62 = 0;
          }
          else {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 4) - 1)));
          }
          unsigned int v63 = *(_DWORD *)(v37 + 132) >> (*(unsigned char *)(v37 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20)
          {
            unsigned int v65 = 0;
            if (!v62)
            {
LABEL_81:
              uint64_t v67 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
            if (!(v65 | v62)) {
              goto LABEL_81;
            }
          }
          int v66 = 0;
          uint64_t v67 = 0;
          BOOL v68 = v62 != 0;
          BOOL v69 = v65 != 0;
          int v70 = 1;
          do
          {
            --v62;
            if (v68) {
              v67 |= (unint64_t)(v70 & v42) << v66++;
            }
            else {
              unsigned int v62 = 0;
            }
            --v65;
            if (v69) {
              v67 |= (unint64_t)(v70 & v26) << v66++;
            }
            else {
              unsigned int v65 = 0;
            }
            v70 *= 2;
            --v66;
            BOOL v69 = v65 != 0;
            BOOL v68 = v62 != 0;
          }
          while (v65 | v62);
LABEL_82:
          int v76 = v48 < 0x10 || v49;
          unsigned int v77 = (unsigned __int8 *)(v153 + 8 * v67);
          unint64_t v78 = v154 + 8 * (v46 - v16);
          unsigned int v79 = (void *)(v152 + v59);
          if (v43 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v162)
          {
            if (!v80)
            {
              BOOL v84 = __dst;
LABEL_95:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (uint64_t)v84, v77, v48, v43, v36, v46);
              unsigned int v16 = v149;
              goto LABEL_129;
            }
            char v81 = v48;
            unsigned int v82 = v47;
            int v83 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            LODWORD(v46) = v83;
            BOOL v84 = __dst;
            unsigned int v47 = v82;
            unsigned int v44 = 16 * v42;
            LOBYTE(v48) = v81;
            LOBYTE(v43) = v159;
            uint64_t v37 = v158;
          }
          else
          {
            BOOL v84 = v79;
            if (!v80) {
              goto LABEL_95;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v37;
          uint64_t v164 = v84;
          unsigned __int8 v172 = v48;
          unsigned __int8 v173 = v43;
          unsigned int v168 = v144;
          unsigned int v169 = v46 - v44;
          unsigned int v165 = v77;
          unint64_t v166 = v78;
          uint64_t v167 = a11;
          unsigned int v170 = v155;
          unsigned int v171 = v47;
          if (v49)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v37 + 8) + 7384), block);
            unsigned int v16 = v149;
            goto LABEL_129;
          }
          uint64_t v85 = (uint64_t)&v84[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v175, 128, (uint64_t)v84, *v77)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v177, 128, v85, v77[1]);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v176, 128, v86, v77[2]);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v178, 128, v87, v77[3]);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v179, 128, v88, v77[4]);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v181, 128, v89, v77[5]);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v180, 128, v90, v77[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v182, 128, v90 + v91, v77[7]);
          uint64_t v94 = v170;
          unsigned int v16 = v149;
          if (v170 && v171)
          {
            uint64_t v95 = 0;
            unint64_t v96 = (unint64_t)v168 << 7;
            uint64_t v97 = 8 * v169;
            uint64_t v98 = (char *)v175 + v96 + v97;
            unint64_t v99 = v166;
            uint64_t v100 = v167;
            unint64_t v101 = 8 * v171;
            if (v101 <= 1) {
              unint64_t v102 = 1;
            }
            else {
              unint64_t v102 = 8 * v171;
            }
            unint64_t v103 = v96 + v97;
            long long v104 = (char *)v175 + v96 + v97;
            if (v102) {
              BOOL v105 = (v102 - 1) >> 32 == 0;
            }
            else {
              BOOL v105 = 0;
            }
            char v106 = !v105;
            uint64_t v107 = v102 & 0x7FFFFFFE0;
            uint64_t v108 = v102 & 0x7FFFFFFF8;
            unint64_t v109 = (char *)&v175[1] + v103;
            long long v110 = (long long *)(v166 + 16);
            long long v111 = v98;
            uint64_t v92 = v166;
            do
            {
              BOOL v93 = (char *)(v99 + v100 * v95);
              long long v112 = &v98[128 * v95];
              if ((unint64_t)(&v104[128 * v95] - v93) < 0x20) {
                char v113 = 1;
              }
              else {
                char v113 = v106;
              }
              if (v113)
              {
                int v114 = 0;
                goto LABEL_125;
              }
              if (v102 >= 0x20)
              {
                long long v116 = v110;
                long long v117 = v109;
                uint64_t v118 = v102 & 0x7FFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *(v117 - 1) = *(v116 - 1);
                  *long long v117 = v119;
                  v117 += 2;
                  v116 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v102 == v107) {
                  goto LABEL_108;
                }
                uint64_t v115 = v102 & 0x7FFFFFFE0;
                if ((v102 & 0x18) == 0)
                {
                  v93 += v107;
                  v112 += v107;
                  int v114 = v102 & 0xFFFFFFE0;
                  goto LABEL_125;
                }
              }
              else
              {
                uint64_t v115 = 0;
              }
              v112 += v108;
              unint64_t v120 = v115 - (v102 & 0x7FFFFFFF8);
              uint64_t v121 = (uint64_t *)(v92 + v115);
              uint64_t v122 = &v111[v115];
              do
              {
                uint64_t v123 = *v121++;
                *(void *)uint64_t v122 = v123;
                v122 += 8;
                v120 += 8;
              }
              while (v120);
              if (v102 == v108) {
                goto LABEL_108;
              }
              v93 += v108;
              int v114 = v102 & 0xFFFFFFF8;
LABEL_125:
              unsigned int v124 = v114 + 1;
              do
              {
                char v125 = *v93++;
                *v112++ = v125;
              }
              while (v101 > v124++);
LABEL_108:
              ++v95;
              v109 += 128;
              long long v110 = (long long *)((char *)v110 + v100);
              v92 += v100;
              v111 += 128;
            }
            while (v95 != v94);
          }
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)v175, 128, (uint64_t)v164, v165, v172, v173, v92, (uint64_t)v93);
LABEL_129:
          if (v162) {
            memcpy(v79, v84, 0x800uLL);
          }
          BOOL v31 = v42++ == v150 >> 4;
          uint64_t v37 = v158;
          unsigned int v43 = v159;
        }
        while (!v31);
        BOOL v31 = v26++ == v143;
      }
      while (!v31);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v215 = v21;
  uint64_t v216 = v22;
  uint64_t v202 = v23;
  uint64_t v24 = v12;
  uint64_t v245 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v220 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v201 = v14 + a10 - 1;
  unsigned int v203 = v201 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v221 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v224 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v214 = isLevelTiled;
  if (v25 <= v203)
  {
    unsigned int v213 = v16 + a9 - 1;
    unsigned int v200 = v16 >> 4;
    if (v16 >> 4 <= v213 >> 4)
    {
      unsigned int v197 = v20 - 1;
      unsigned int v223 = (v20 - 1) >> 4;
      int v222 = ((v20 - 1) & 0xF) + 1;
      int v198 = ((v18 - 1) & 0xF) + 1;
      unsigned int v199 = (v18 - 1) >> 4;
      unint64_t v35 = v27 * (unint64_t)v26;
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v37 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v36, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v36));
      __int32 v211 = v37.i32[0] | v37.i32[1];
      int8x8_t v209 = v37;
      BOOL v207 = v37.i32[0] != 0;
      BOOL v208 = v37.i32[1] != 0;
      uint64_t v38 = a11;
      unint64_t v196 = 8 * v35;
      uint64_t v39 = 4 * a11;
      uint64_t v40 = 2 * a11;
      unsigned int v212 = v16;
      do
      {
        unsigned int v41 = (16 * v25) | 0xF;
        if (16 * v25 <= v220) {
          int v42 = v220;
        }
        else {
          int v42 = 16 * v25;
        }
        unsigned int v43 = v200;
        if (v201 < v41) {
          unsigned int v41 = v201;
        }
        int v206 = v42 - 16 * v25;
        int v218 = v41 - v42 + 1;
        unsigned int v219 = 16 * v25;
        if (v25 == v199) {
          unsigned int v44 = v198;
        }
        else {
          unsigned int v44 = 16;
        }
        uint64_t v217 = v202 + (v42 - v220) * v38;
        unsigned int v204 = v44;
        do
        {
          unsigned int v45 = 16 * v43;
          unsigned int v46 = 16 * (v43 + 1) - 1;
          if (16 * v43 <= v16) {
            int v47 = v16;
          }
          else {
            int v47 = 16 * v43;
          }
          if (v213 < v46) {
            unsigned int v46 = v213;
          }
          int v48 = v46 - v47 + 1;
          if (v43 == v223) {
            unsigned int v49 = v222;
          }
          else {
            unsigned int v49 = 16;
          }
          BOOL v50 = 1;
          if (v219 >= v220 && v45 >= v16)
          {
            int v51 = v222;
            if (v43 != v223) {
              int v51 = 16;
            }
            BOOL v50 = v48 != v51 || v218 != v44;
          }
          if (v214)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v196 >> (*(unsigned char *)(v34 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  unsigned int v72 = 16;
                  char v75 = 1;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v187 = (v72 >> 4) - 1;
            if (v74)
            {
              unsigned int v188 = 0;
              if (v75) {
                goto LABEL_183;
              }
LABEL_172:
              unsigned int v189 = 32 - __clz(~(-1 << -(char)__clz(((v76 + 15) >> 4) - 1)));
              if (v189 | v188) {
                goto LABEL_173;
              }
LABEL_184:
              uint64_t v191 = 0;
            }
            else
            {
              unsigned int v188 = 32 - __clz(~(-1 << -(char)__clz(v187)));
              if ((v75 & 1) == 0) {
                goto LABEL_172;
              }
LABEL_183:
              unsigned int v189 = 0;
              if (!v188) {
                goto LABEL_184;
              }
LABEL_173:
              int v190 = 0;
              uint64_t v191 = 0;
              int v192 = v43 & v187;
              BOOL v193 = v188 != 0;
              BOOL v194 = v189 != 0;
              int v195 = 1;
              do
              {
                --v188;
                if (v193) {
                  v191 |= (unint64_t)(v195 & v192) << v190++;
                }
                else {
                  unsigned int v188 = 0;
                }
                --v189;
                if (v194) {
                  v191 |= (unint64_t)(v195 & v25 & ((v76 >> 4) - 1)) << v190++;
                }
                else {
                  unsigned int v189 = 0;
                }
                v195 *= 2;
                --v190;
                BOOL v194 = v189 != 0;
                BOOL v193 = v188 != 0;
              }
              while (v189 | v188);
            }
            unint64_t v60 = ((unint64_t)(v45 / v72 + v219 / v76 * ((v72 + v197) / v72)) << 14) + (v191 << 11);
            goto LABEL_59;
          }
          if (v211)
          {
            int v53 = 0;
            uint64_t v54 = 0;
            int v55 = 1;
            BOOL v56 = v207;
            BOOL v57 = v208;
            __int32 v59 = v209.i32[0];
            __int32 v58 = v209.i32[1];
            do
            {
              --v58;
              if (v57) {
                v54 |= (unint64_t)(v55 & v43) << v53++;
              }
              else {
                __int32 v58 = 0;
              }
              --v59;
              if (v56) {
                v54 |= (unint64_t)(v55 & v25) << v53++;
              }
              else {
                __int32 v59 = 0;
              }
              v55 *= 2;
              --v53;
              BOOL v56 = v59 != 0;
              BOOL v57 = v58 != 0;
            }
            while (v59 | v58);
          }
          else
          {
            uint64_t v54 = 0;
          }
          unint64_t v60 = v54 << 11;
LABEL_59:
          unsigned int v61 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v61 <= 1) {
            unsigned int v61 = 1;
          }
          unsigned int v62 = v61 + 15;
          if (v62 < 0x20) {
            unsigned int v63 = 0;
          }
          else {
            unsigned int v63 = 32 - __clz(~(-1 << -(char)__clz((v62 >> 4) - 1)));
          }
          unsigned int v64 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20)
          {
            unsigned int v66 = 0;
            if (!v63)
            {
LABEL_81:
              uint64_t v68 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
            if (!(v66 | v63)) {
              goto LABEL_81;
            }
          }
          int v67 = 0;
          uint64_t v68 = 0;
          BOOL v69 = v63 != 0;
          BOOL v70 = v66 != 0;
          int v71 = 1;
          do
          {
            --v63;
            if (v69) {
              v68 |= (unint64_t)(v71 & v43) << v67++;
            }
            else {
              unsigned int v63 = 0;
            }
            --v66;
            if (v70) {
              v68 |= (unint64_t)(v71 & v25) << v67++;
            }
            else {
              unsigned int v66 = 0;
            }
            v71 *= 2;
            --v67;
            BOOL v70 = v66 != 0;
            BOOL v69 = v63 != 0;
          }
          while (v66 | v63);
LABEL_82:
          int v77 = v49 < 0x10 || v50;
          unint64_t v78 = (unsigned __int8 *)(v216 + 8 * v68);
          uint64_t v79 = v217 + 8 * (v47 - v16);
          int v80 = (void *)(v215 + v60);
          if (v44 < 0x10) {
            int v81 = 1;
          }
          else {
            int v81 = v77;
          }
          if (v224)
          {
            if (!v81)
            {
              uint64_t v85 = __dst;
LABEL_96:
              uint64_t v87 = 0;
              uint64_t v88 = v85;
              do
              {
                uint64_t v111 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87 + 1];
                uint64_t v112 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v87];
                unsigned int v113 = (v49 - 8 * v112) & ~((int)(v49 - 8 * v112) >> 31);
                if (v113 >= 8) {
                  unsigned int v113 = 8;
                }
                unsigned int v114 = (v44 - 4 * v111) & ~((int)(v44 - 4 * v111) >> 31);
                if (v114 >= 4) {
                  unsigned int v114 = 4;
                }
                if (v113) {
                  BOOL v115 = v114 == 0;
                }
                else {
                  BOOL v115 = 1;
                }
                if (v115)
                {
                  char v110 = 0;
                }
                else
                {
                  uint64_t v89 = (long long *)(v79 + v39 * v111 + (v112 << 6));
                  uint64_t v90 = (long long *)((char *)v89 + v38);
                  long long v92 = *v89;
                  long long v93 = v89[1];
                  long long v94 = v89[2];
                  long long v95 = v89[3];
                  uint64_t v91 = (long long *)((char *)v89 + v40);
                  long long v96 = v90[2];
                  long long v97 = v90[3];
                  long long v98 = *v90;
                  long long v100 = *v91;
                  long long v101 = v91[1];
                  long long v102 = v91[2];
                  long long v103 = v91[3];
                  unint64_t v99 = (long long *)((char *)v91 + v38);
                  long long v104 = v93;
                  long long v105 = v90[1];
                  long long v106 = v99[1];
                  long long v107 = v99[2];
                  long long v108 = v99[3];
                  long long v109 = *v99;
                  *uint64_t v88 = v92;
                  v88[1] = v98;
                  v88[2] = v104;
                  v88[3] = v105;
                  v88[4] = v100;
                  v88[5] = v109;
                  v88[6] = v101;
                  v88[7] = v106;
                  v88[8] = v94;
                  v88[9] = v96;
                  v88[10] = v95;
                  v88[11] = v97;
                  v88[12] = v102;
                  v88[13] = v107;
                  v88[14] = v103;
                  v88[15] = v108;
                  v88 += 16;
                  char v110 = -1;
                }
                *v78++ = v110;
                v87 += 2;
              }
              while (v87 != 16);
              unsigned int v16 = v212;
              if (v224) {
                goto LABEL_155;
              }
              goto LABEL_27;
            }
            unsigned int v82 = v80;
            int v83 = v48;
            BOOL v84 = v50;
            memcpy(__dst, v80, sizeof(__dst));
            uint64_t v85 = __dst;
            int v80 = v82;
            BOOL v50 = v84;
            uint64_t v38 = a11;
            unsigned int v44 = v204;
            unsigned int v45 = 16 * v43;
            int v48 = v83;
            uint64_t v34 = v221;
          }
          else
          {
            uint64_t v85 = v80;
            if (!v81) {
              goto LABEL_96;
            }
          }
          float64x2_t v210 = v80;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          int v226 = v85;
          unsigned __int8 v234 = v49;
          unsigned __int8 v235 = v44;
          unsigned int v230 = v206;
          unsigned int v231 = v47 - v45;
          float64x2_t v227 = v78;
          uint64_t v228 = v79;
          uint64_t v229 = v38;
          unsigned int v232 = v218;
          unsigned int v233 = v48;
          if (v50)
          {
            uint64_t v86 = v85;
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
            uint64_t v85 = v86;
            uint64_t v34 = v221;
            unsigned int v16 = v212;
            uint64_t v40 = 2 * a11;
            uint64_t v39 = 4 * a11;
            int v80 = v210;
            if (!v224) {
              goto LABEL_27;
            }
LABEL_155:
            memcpy(v80, v85, 0x800uLL);
            uint64_t v40 = 2 * a11;
            uint64_t v39 = 4 * a11;
            uint64_t v34 = v221;
            goto LABEL_27;
          }
          BOOL v205 = v85;
          uint64_t v116 = (uint64_t)&v85[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v237, 128, (uint64_t)v85, *v78)];
          uint64_t v117 = v116
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v239, 128, v116, v78[1]);
          uint64_t v118 = v117
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v238, 128, v117, v78[2]);
          uint64_t v119 = v118
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v240, 128, v118, v78[3]);
          uint64_t v120 = v119
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v241, 128, v119, v78[4]);
          uint64_t v121 = v120
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v243, 128, v120, v78[5]);
          uint64_t v122 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v242, 128, v121, v78[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v244, 128, v121 + v122, v78[7]);
          uint64_t v123 = v232;
          if (v232 && v233)
          {
            uint64_t v124 = 0;
            unint64_t v125 = (unint64_t)v230 << 7;
            uint64_t v126 = 8 * v231;
            unsigned int v127 = (char *)v237 + v125 + v126;
            uint64_t v128 = v228;
            uint64_t v129 = v229;
            unint64_t v130 = 8 * v233;
            if (v130 <= 1) {
              unint64_t v131 = 1;
            }
            else {
              unint64_t v131 = 8 * v233;
            }
            unint64_t v132 = v125 + v126;
            BOOL v133 = (char *)v237 + v125 + v126;
            if (v131) {
              BOOL v134 = (v131 - 1) >> 32 == 0;
            }
            else {
              BOOL v134 = 0;
            }
            char v135 = !v134;
            uint64_t v136 = v131 & 0x7FFFFFFE0;
            uint64_t v137 = v131 & 0x7FFFFFFF8;
            int v138 = (char *)&v237[1] + v132;
            unsigned int v139 = (long long *)(v228 + 16);
            unsigned int v140 = v127;
            uint64_t v141 = v228;
            do
            {
              uint64_t v142 = (char *)(v128 + v129 * v124);
              unsigned int v143 = &v127[128 * v124];
              if ((unint64_t)(&v133[128 * v124] - v142) < 0x20) {
                char v144 = 1;
              }
              else {
                char v144 = v135;
              }
              if (v144)
              {
                int v145 = 0;
                goto LABEL_139;
              }
              if (v131 >= 0x20)
              {
                int8x8_t v147 = v139;
                __int32 v148 = v138;
                uint64_t v149 = v131 & 0x7FFFFFFE0;
                do
                {
                  long long v150 = *v147;
                  *(v148 - 1) = *(v147 - 1);
                  *__int32 v148 = v150;
                  v148 += 2;
                  v147 += 2;
                  v149 -= 32;
                }
                while (v149);
                if (v131 == v136) {
                  goto LABEL_122;
                }
                uint64_t v146 = v131 & 0x7FFFFFFE0;
                if ((v131 & 0x18) == 0)
                {
                  v142 += v136;
                  v143 += v136;
                  int v145 = v131 & 0xFFFFFFE0;
                  goto LABEL_139;
                }
              }
              else
              {
                uint64_t v146 = 0;
              }
              v143 += v137;
              unint64_t v151 = v146 - (v131 & 0x7FFFFFFF8);
              uint64_t v152 = (uint64_t *)(v141 + v146);
              uint64_t v153 = &v140[v146];
              do
              {
                uint64_t v154 = *v152++;
                *(void *)uint64_t v153 = v154;
                v153 += 8;
                v151 += 8;
              }
              while (v151);
              if (v131 == v137) {
                goto LABEL_122;
              }
              v142 += v137;
              int v145 = v131 & 0xFFFFFFF8;
LABEL_139:
              unsigned int v155 = v145 + 1;
              do
              {
                char v156 = *v142++;
                *v143++ = v156;
              }
              while (v130 > v155++);
LABEL_122:
              ++v124;
              v138 += 128;
              unsigned int v139 = (long long *)((char *)v139 + v129);
              v141 += v129;
              v140 += 128;
            }
            while (v124 != v123);
          }
          uint64_t v158 = 0;
          unsigned int v159 = v226;
          int v160 = (char *)v227;
          int v161 = v234;
          int v162 = v235;
          unsigned int v16 = v212;
          uint64_t v34 = v221;
          uint64_t v40 = 2 * a11;
          uint64_t v39 = 4 * a11;
          int v80 = v210;
          do
          {
            uint64_t v182 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v158 + 1];
            uint64_t v183 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v158];
            unsigned int v184 = (v161 - 8 * v183) & ~((v161 - 8 * (int)v183) >> 31);
            if (v184 >= 8) {
              unsigned int v184 = 8;
            }
            unsigned int v185 = (v162 - 4 * v182) & ~((v162 - 4 * (int)v182) >> 31);
            if (v185 >= 4) {
              unsigned int v185 = 4;
            }
            if (v184) {
              BOOL v186 = v185 == 0;
            }
            else {
              BOOL v186 = 1;
            }
            if (v186)
            {
              char v181 = 0;
            }
            else
            {
              unsigned int v163 = &v237[32 * v182 + 4 * v183];
              long long v164 = v163[2];
              long long v165 = v163[10];
              long long v166 = v163[3];
              long long v167 = v163[11];
              long long v168 = *v163;
              long long v169 = v163[8];
              long long v170 = v163[1];
              long long v171 = v163[16];
              long long v172 = v163[17];
              long long v173 = v163[18];
              long long v174 = v163[19];
              long long v175 = v163[9];
              v163 += 24;
              long long v176 = v163[1];
              long long v177 = v163[2];
              long long v178 = v163[3];
              long long v179 = *v163;
              *unsigned int v159 = v168;
              v159[1] = v169;
              v159[2] = v170;
              v159[3] = v175;
              v159[4] = v171;
              v159[5] = v179;
              v159[6] = v172;
              v159[7] = v176;
              v159[8] = v164;
              v159[9] = v165;
              v159[10] = v166;
              v159[11] = v167;
              long long v180 = v159 + 12;
              v159 += 16;
              char v181 = -1;
              *long long v180 = v173;
              v180[1] = v177;
              v180[2] = v174;
              v180[3] = v178;
            }
            *v160++ = v181;
            v158 += 2;
          }
          while (v158 != 16);
          uint64_t v85 = v205;
          if (v224) {
            goto LABEL_155;
          }
LABEL_27:
          BOOL v29 = v43++ == v213 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v203;
      }
      while (!v29);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v257 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v206 = a8;
  unsigned int v190 = a8 + a10 - 1;
  uint64_t v207 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v189 = v190 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v211 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v201 = 0;
LABEL_32:
      unsigned int v198 = v27 - 4;
      unsigned int v194 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v187 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v201 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v201 = 0;
  unsigned int v187 = 0;
  unsigned int v194 = 0;
  unsigned int v198 = 0;
LABEL_33:
  if (v20 <= v189)
  {
    unsigned int v200 = a7 + a9 - 1;
    unsigned int v186 = a7 >> 4;
    if (a7 >> 4 <= v200 >> 4)
    {
      unsigned int v209 = v18 >> 4;
      unsigned int v185 = v19 >> 4;
      int v208 = (v18 & 0xF) + 1;
      int v184 = (v19 & 0xF) + 1;
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v196 = v35.i32[0] | v35.i32[1];
      BOOL v192 = v35.i32[1] != 0;
      int8x8_t v193 = v35;
      BOOL v191 = v35.i32[0] != 0;
      unsigned int v199 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v206) {
          int v37 = v206;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v190 < v36) {
          unsigned int v36 = v190;
        }
        int v197 = v37 - 16 * v20;
        int v205 = v36 - v37 + 1;
        unsigned int v38 = v186;
        int v39 = v184;
        if (v20 != v185) {
          int v39 = 16;
        }
        unsigned int v212 = v39;
        uint64_t v40 = v20 & ~(-1 << v194);
        uint64_t v204 = a3 + (v37 - v206) * a11;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v200 < v42) {
            unsigned int v42 = v200;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v209) {
            unsigned int v45 = v208;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v206 && v41 >= a7)
          {
            int v47 = v208;
            if (v38 != v209) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v205 != v212;
          }
          if (v201)
          {
            if (v198 | v194)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v198 != 0;
              BOOL v53 = v194 != 0;
              unsigned int v54 = v198;
              unsigned int v55 = v194;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v198) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v198) + (v20 >> v194) * v187) + (v50 << 9);
          }
          else
          {
            if (v196)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v192;
              BOOL v60 = v191;
              __int32 v61 = v193.i32[1];
              __int32 v62 = v193.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_109:
              uint64_t v71 = 0;
              goto LABEL_110;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_109;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_110:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int v77 = (char *)(a4 + 8 * v71);
          unint64_t v78 = v204 + 2 * v75;
          uint64_t v79 = (int32x4_t *)(a2 + v63);
          if (v212 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          float64x2_t v210 = v79;
          if (v211)
          {
            int v81 = (int32x4_t *)__dst;
            if (!v80) {
              goto LABEL_122;
            }
            int v195 = (char *)(a4 + 8 * v71);
            int v82 = v44;
            char v83 = v45;
            uint64_t v84 = v40;
            BOOL v85 = v46;
            memcpy(__dst, v79, sizeof(__dst));
            BOOL v46 = v85;
            uint64_t v40 = v84;
            LOBYTE(v45) = v83;
            int v44 = v82;
            int v77 = v195;
            uint64_t result = v207;
          }
          else
          {
            int v81 = v79;
            if (!v80)
            {
LABEL_122:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v78, a11, (unint64_t)v81, v77, v45, v212);
              a7 = v199;
              goto LABEL_217;
            }
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = result;
          BOOL v214 = v81;
          unsigned __int8 v222 = v45;
          unsigned __int8 v223 = v212;
          unsigned int v218 = v197;
          unsigned int v219 = v43 - v41;
          uint64_t v215 = v77;
          unint64_t v216 = v78;
          uint64_t v217 = a11;
          unsigned int v220 = v205;
          unsigned int v221 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            a7 = v199;
            goto LABEL_217;
          }
          unsigned int v86 = *v77;
          if (v86 == 63)
          {
            int32x4_t v89 = v81[1];
            int32x4_t v90 = v81[2];
            int32x4_t v91 = v81[3];
            int32x4_t v92 = vuzp2q_s32(*v81, v90);
            int32x4_t v225 = vuzp1q_s32(*v81, v90);
            int32x4_t v227 = v92;
            int32x4_t v229 = vuzp1q_s32(v89, v91);
            int32x4_t v231 = vuzp2q_s32(v89, v91);
            uint64_t v87 = 64;
          }
          else if (v86 == 1)
          {
            int16x8_t v88 = vld1q_dup_s16(v81->i16);
            int32x4_t v225 = (int32x4_t)v88;
            int32x4_t v227 = (int32x4_t)v88;
            int32x4_t v229 = (int32x4_t)v88;
            int32x4_t v231 = (int32x4_t)v88;
            uint64_t v87 = 2;
          }
          else if (*v77)
          {
            uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v225, 32, (uint64_t)v81, v86);
          }
          else
          {
            uint64_t v87 = 0;
            int32x4_t v225 = 0uLL;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int32x4_t v231 = 0uLL;
          }
          uint64_t v93 = (uint64_t)v81->i64 + v87;
          unsigned int v94 = v77[1];
          if (v94 == 63)
          {
            int32x4_t v97 = *(int32x4_t *)(v93 + 16);
            int32x4_t v98 = *(int32x4_t *)(v93 + 32);
            int32x4_t v99 = *(int32x4_t *)(v93 + 48);
            int32x4_t v100 = vuzp2q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v233 = vuzp1q_s32(*(int32x4_t *)v93, v98);
            int32x4_t v235 = v100;
            int32x4_t v237 = vuzp1q_s32(v97, v99);
            int32x4_t v239 = vuzp2q_s32(v97, v99);
            uint64_t v95 = 64;
          }
          else if (v94 == 1)
          {
            int16x8_t v96 = vld1q_dup_s16((const __int16 *)v93);
            int32x4_t v233 = (int32x4_t)v96;
            int32x4_t v235 = (int32x4_t)v96;
            int32x4_t v237 = (int32x4_t)v96;
            int32x4_t v239 = (int32x4_t)v96;
            uint64_t v95 = 2;
          }
          else if (v77[1])
          {
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v233, 32, v93, v94);
          }
          else
          {
            uint64_t v95 = 0;
            int32x4_t v233 = 0uLL;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int32x4_t v239 = 0uLL;
          }
          uint64_t v101 = v93 + v95;
          unsigned int v102 = v77[2];
          if (v102 == 63)
          {
            int32x4_t v105 = *(int32x4_t *)(v101 + 16);
            int32x4_t v106 = *(int32x4_t *)(v101 + 32);
            int32x4_t v107 = *(int32x4_t *)(v101 + 48);
            int32x4_t v108 = vuzp2q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v101, v106);
            int32x4_t v228 = v108;
            int32x4_t v230 = vuzp1q_s32(v105, v107);
            int32x4_t v232 = vuzp2q_s32(v105, v107);
            uint64_t v103 = 64;
          }
          else if (v102 == 1)
          {
            int16x8_t v104 = vld1q_dup_s16((const __int16 *)v101);
            int32x4_t v226 = (int32x4_t)v104;
            int32x4_t v228 = (int32x4_t)v104;
            int32x4_t v230 = (int32x4_t)v104;
            int32x4_t v232 = (int32x4_t)v104;
            uint64_t v103 = 2;
          }
          else if (v77[2])
          {
            uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v101, v102);
          }
          else
          {
            uint64_t v103 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v109 = v101 + v103;
          unsigned int v110 = v77[3];
          if (v110 == 63)
          {
            int32x4_t v113 = *(int32x4_t *)(v109 + 16);
            int32x4_t v114 = *(int32x4_t *)(v109 + 32);
            int32x4_t v115 = *(int32x4_t *)(v109 + 48);
            int32x4_t v116 = vuzp2q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v109, v114);
            int32x4_t v236 = v116;
            int32x4_t v238 = vuzp1q_s32(v113, v115);
            int32x4_t v240 = vuzp2q_s32(v113, v115);
            uint64_t v111 = 64;
          }
          else if (v110 == 1)
          {
            int16x8_t v112 = vld1q_dup_s16((const __int16 *)v109);
            int32x4_t v234 = (int32x4_t)v112;
            int32x4_t v236 = (int32x4_t)v112;
            int32x4_t v238 = (int32x4_t)v112;
            int32x4_t v240 = (int32x4_t)v112;
            uint64_t v111 = 2;
          }
          else if (v77[3])
          {
            uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v109, v110);
          }
          else
          {
            uint64_t v111 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int32x4_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v117 = v109 + v111;
          unsigned int v118 = v77[4];
          if (v118 == 63)
          {
            int32x4_t v121 = *(int32x4_t *)(v117 + 16);
            int32x4_t v122 = *(int32x4_t *)(v117 + 32);
            int32x4_t v123 = *(int32x4_t *)(v117 + 48);
            int32x4_t v124 = vuzp2q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v241 = vuzp1q_s32(*(int32x4_t *)v117, v122);
            int32x4_t v243 = v124;
            int32x4_t v245 = vuzp1q_s32(v121, v123);
            int32x4_t v247 = vuzp2q_s32(v121, v123);
            uint64_t v119 = 64;
          }
          else if (v118 == 1)
          {
            int16x8_t v120 = vld1q_dup_s16((const __int16 *)v117);
            int32x4_t v241 = (int32x4_t)v120;
            int32x4_t v243 = (int32x4_t)v120;
            int32x4_t v245 = (int32x4_t)v120;
            int32x4_t v247 = (int32x4_t)v120;
            uint64_t v119 = 2;
          }
          else if (v77[4])
          {
            uint64_t v119 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v241, 32, v117, v118);
          }
          else
          {
            uint64_t v119 = 0;
            int32x4_t v241 = 0uLL;
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int32x4_t v247 = 0uLL;
          }
          uint64_t v125 = v117 + v119;
          unsigned int v126 = v77[5];
          if (v126 == 63)
          {
            int32x4_t v129 = *(int32x4_t *)(v125 + 16);
            int32x4_t v130 = *(int32x4_t *)(v125 + 32);
            int32x4_t v131 = *(int32x4_t *)(v125 + 48);
            int32x4_t v132 = vuzp2q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v249 = vuzp1q_s32(*(int32x4_t *)v125, v130);
            int32x4_t v251 = v132;
            int32x4_t v253 = vuzp1q_s32(v129, v131);
            int32x4_t v255 = vuzp2q_s32(v129, v131);
            uint64_t v127 = 64;
          }
          else if (v126 == 1)
          {
            int16x8_t v128 = vld1q_dup_s16((const __int16 *)v125);
            int32x4_t v249 = (int32x4_t)v128;
            int32x4_t v251 = (int32x4_t)v128;
            int32x4_t v253 = (int32x4_t)v128;
            int32x4_t v255 = (int32x4_t)v128;
            uint64_t v127 = 2;
          }
          else if (v77[5])
          {
            uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v249, 32, v125, v126);
          }
          else
          {
            uint64_t v127 = 0;
            int32x4_t v249 = 0uLL;
            int32x4_t v251 = 0uLL;
            int32x4_t v253 = 0uLL;
            int32x4_t v255 = 0uLL;
          }
          uint64_t v133 = v125 + v127;
          unsigned int v134 = v77[6];
          if (v134 == 63)
          {
            int32x4_t v137 = *(int32x4_t *)(v133 + 16);
            int32x4_t v138 = *(int32x4_t *)(v133 + 32);
            int32x4_t v139 = *(int32x4_t *)(v133 + 48);
            int32x4_t v140 = vuzp2q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v133, v138);
            int32x4_t v244 = v140;
            int32x4_t v246 = vuzp1q_s32(v137, v139);
            int32x4_t v248 = vuzp2q_s32(v137, v139);
            uint64_t v135 = 64;
          }
          else if (v134 == 1)
          {
            int16x8_t v136 = vld1q_dup_s16((const __int16 *)v133);
            int32x4_t v242 = (int32x4_t)v136;
            int32x4_t v244 = (int32x4_t)v136;
            int32x4_t v246 = (int32x4_t)v136;
            int32x4_t v248 = (int32x4_t)v136;
            uint64_t v135 = 2;
          }
          else if (v77[6])
          {
            uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v133, v134);
          }
          else
          {
            uint64_t v135 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int32x4_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v141 = v133 + v135;
          unsigned int v142 = v77[7];
          if (v142 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v141 + 16);
            int32x4_t v146 = *(int32x4_t *)(v141 + 32);
            int32x4_t v147 = *(int32x4_t *)(v141 + 48);
            int32x4_t v148 = vuzp2q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v250 = vuzp1q_s32(*(int32x4_t *)v141, v146);
            int32x4_t v252 = v148;
            int32x4_t v254 = vuzp1q_s32(v145, v147);
            int32x4_t v256 = vuzp2q_s32(v145, v147);
            a7 = v199;
            uint64_t v143 = v220;
            if (!v220) {
              goto LABEL_216;
            }
          }
          else
          {
            a7 = v199;
            if (v142 == 1)
            {
              int16x8_t v144 = vld1q_dup_s16((const __int16 *)v141);
              int32x4_t v250 = (int32x4_t)v144;
              int32x4_t v252 = (int32x4_t)v144;
              int32x4_t v254 = (int32x4_t)v144;
              int32x4_t v256 = (int32x4_t)v144;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else if (v142)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 32, v141, v142);
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
            else
            {
              int32x4_t v250 = 0uLL;
              int32x4_t v252 = 0uLL;
              int32x4_t v254 = 0uLL;
              int32x4_t v256 = 0uLL;
              uint64_t v143 = v220;
              if (!v220) {
                goto LABEL_216;
              }
            }
          }
          if (v221)
          {
            uint64_t v149 = 0;
            uint64_t v150 = 32 * v218;
            uint64_t v151 = 2 * v219;
            uint64_t v152 = &v225.i8[v150 + v151];
            unint64_t v153 = v216;
            uint64_t v154 = v217;
            unint64_t v155 = 2 * v221;
            if (v155 <= 1) {
              unint64_t v156 = 1;
            }
            else {
              unint64_t v156 = 2 * v221;
            }
            uint64_t v157 = v150 + v151;
            uint64_t v158 = &v225.i8[v150 + v151];
            if (v156) {
              BOOL v159 = (v156 - 1) >> 32 == 0;
            }
            else {
              BOOL v159 = 0;
            }
            uint64_t v160 = v156 & 0x1FFFFFFE0;
            uint64_t v161 = v156 & 0x1FFFFFFF8;
            char v163 = !v159 || v156 < 8;
            long long v164 = &v226.i8[v157];
            long long v165 = (long long *)(v216 + 16);
            long long v166 = v152;
            unint64_t v167 = v216;
            do
            {
              long long v168 = (char *)(v153 + v154 * v149);
              long long v169 = &v152[32 * v149];
              if ((unint64_t)(&v158[32 * v149] - v168) < 0x20) {
                char v170 = 1;
              }
              else {
                char v170 = v163;
              }
              if (v170)
              {
                int v171 = 0;
                goto LABEL_213;
              }
              if (v156 >= 0x20)
              {
                long long v173 = v165;
                long long v174 = v164;
                uint64_t v175 = v156 & 0x1FFFFFFE0;
                do
                {
                  long long v176 = *v173;
                  *((_OWORD *)v174 - 1) = *(v173 - 1);
                  *(_OWORD *)long long v174 = v176;
                  v174 += 32;
                  v173 += 2;
                  v175 -= 32;
                }
                while (v175);
                if (v156 == v160) {
                  goto LABEL_196;
                }
                uint64_t v172 = v156 & 0x1FFFFFFE0;
                if ((v156 & 0x18) == 0)
                {
                  v168 += v160;
                  v169 += v160;
                  int v171 = v156 & 0xFFFFFFE0;
                  goto LABEL_213;
                }
              }
              else
              {
                uint64_t v172 = 0;
              }
              v169 += v161;
              uint64_t v177 = v172 - v161;
              long long v178 = (uint64_t *)(v167 + v172);
              long long v179 = &v166[v172];
              do
              {
                uint64_t v180 = *v178++;
                *(void *)long long v179 = v180;
                v179 += 8;
                v177 += 8;
              }
              while (v177);
              if (v156 == v161) {
                goto LABEL_196;
              }
              v168 += v161;
              int v171 = v156 & 0xFFFFFFF8;
LABEL_213:
              unsigned int v181 = v171 + 1;
              do
              {
                char v182 = *v168++;
                *v169++ = v182;
              }
              while (v155 > v181++);
LABEL_196:
              ++v149;
              v164 += 32;
              long long v165 = (long long *)((char *)v165 + v154);
              v167 += v154;
              v166 += 32;
            }
            while (v149 != v143);
          }
LABEL_216:
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v225, 32, (unint64_t)v214, v215, v222, v223);
LABEL_217:
          if (v211) {
            memcpy(v210, v81, 0x200uLL);
          }
          BOOL v21 = v38++ == v200 >> 4;
          uint64_t result = v207;
        }
        while (!v21);
        BOOL v21 = v20++ == v189;
      }
      while (!v21);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v289 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v240 = a8;
  unsigned int v222 = a8 + a10 - 1;
  uint64_t v241 = a1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 4;
  unsigned int v221 = v222 >> 4;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v244 = v24;
  uint64_t result = a1;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v18);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v235 = 0;
LABEL_32:
      unsigned int v231 = v27 - 4;
      unsigned int v227 = v26 - 4;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v219 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v235 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v235 = 0;
  unsigned int v219 = 0;
  unsigned int v227 = 0;
  unsigned int v231 = 0;
LABEL_33:
  if (v20 <= v221)
  {
    unsigned int v234 = a7 + a9 - 1;
    unsigned int v218 = a7 >> 4;
    if (a7 >> 4 <= v234 >> 4)
    {
      unsigned int v243 = v18 >> 4;
      unsigned int v217 = v19 >> 4;
      int v242 = (v18 & 0xF) + 1;
      int v216 = (v19 & 0xF) + 1;
      int v215 = ~(-1 << v227);
      uint32x2_t v34 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v35 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v34, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v34));
      __int32 v229 = v35.i32[0] | v35.i32[1];
      BOOL v225 = v35.i32[1] != 0;
      int8x8_t v226 = v35;
      BOOL v224 = v35.i32[0] != 0;
      unsigned int v233 = a7;
      do
      {
        unsigned int v36 = (16 * v20) | 0xF;
        if (16 * v20 <= v240) {
          int v37 = v240;
        }
        else {
          int v37 = 16 * v20;
        }
        if (v222 < v36) {
          unsigned int v36 = v222;
        }
        int v230 = v37 - 16 * v20;
        int v239 = v36 - v37 + 1;
        unsigned int v38 = v218;
        if (v20 == v217) {
          unsigned int v39 = v216;
        }
        else {
          unsigned int v39 = 16;
        }
        int v40 = v20 & v215;
        uint64_t v238 = a3 + (v37 - v240) * a11;
        unsigned int v223 = v39;
        do
        {
          unsigned int v41 = 16 * v38;
          unsigned int v42 = 16 * (v38 + 1) - 1;
          if (16 * v38 <= a7) {
            int v43 = a7;
          }
          else {
            int v43 = 16 * v38;
          }
          if (v234 < v42) {
            unsigned int v42 = v234;
          }
          int v44 = v42 - v43 + 1;
          if (v38 == v243) {
            unsigned int v45 = v242;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (16 * v20 >= v240 && v41 >= a7)
          {
            int v47 = v242;
            if (v38 != v243) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v239 != v39;
          }
          if (v235)
          {
            if (v231 | v227)
            {
              int v49 = 0;
              uint64_t v50 = 0;
              int v51 = 1;
              BOOL v52 = v231 != 0;
              BOOL v53 = v227 != 0;
              unsigned int v54 = v231;
              unsigned int v55 = v227;
              do
              {
                --v54;
                if (v52) {
                  v50 |= (unint64_t)(v38 & ~(-1 << v231) & v51) << v49++;
                }
                else {
                  unsigned int v54 = 0;
                }
                --v55;
                if (v53) {
                  v50 |= (unint64_t)(v40 & v51) << v49++;
                }
                else {
                  unsigned int v55 = 0;
                }
                v51 *= 2;
                --v49;
                BOOL v53 = v55 != 0;
                BOOL v52 = v54 != 0;
              }
              while (v55 | v54);
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v63 = *(void *)(result + 320) * ((v38 >> v231) + (v20 >> v227) * v219) + (v50 << 9);
          }
          else
          {
            if (v229)
            {
              int v56 = 0;
              uint64_t v57 = 0;
              int v58 = 1;
              BOOL v59 = v225;
              BOOL v60 = v224;
              __int32 v61 = v226.i32[1];
              __int32 v62 = v226.i32[0];
              do
              {
                --v61;
                if (v59) {
                  v57 |= (unint64_t)(v58 & v38) << v56++;
                }
                else {
                  __int32 v61 = 0;
                }
                --v62;
                if (v60) {
                  v57 |= (unint64_t)(v58 & v20) << v56++;
                }
                else {
                  __int32 v62 = 0;
                }
                v58 *= 2;
                --v56;
                BOOL v60 = v62 != 0;
                BOOL v59 = v61 != 0;
              }
              while (v62 | v61);
            }
            else
            {
              uint64_t v57 = 0;
            }
            uint64_t v63 = v57 << 9;
          }
          unsigned int v64 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v64 <= 1) {
            unsigned int v64 = 1;
          }
          unsigned int v65 = v64 + 15;
          if (v65 < 0x20) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = 32 - __clz(~(-1 << -(char)__clz((v65 >> 4) - 1)));
          }
          unsigned int v67 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v67 <= 1) {
            unsigned int v67 = 1;
          }
          unsigned int v68 = v67 + 15;
          if (v68 < 0x20)
          {
            unsigned int v69 = 0;
            if (!v66)
            {
LABEL_111:
              uint64_t v71 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v69 = 32 - __clz(~(-1 << -(char)__clz((v68 >> 4) - 1)));
            if (!(v69 | v66)) {
              goto LABEL_111;
            }
          }
          int v70 = 0;
          uint64_t v71 = 0;
          BOOL v72 = v66 != 0;
          BOOL v73 = v69 != 0;
          int v74 = 1;
          do
          {
            --v66;
            if (v72) {
              v71 |= (unint64_t)(v74 & v38) << v70++;
            }
            else {
              unsigned int v66 = 0;
            }
            --v69;
            if (v73) {
              v71 |= (unint64_t)(v74 & v20) << v70++;
            }
            else {
              unsigned int v69 = 0;
            }
            v74 *= 2;
            --v70;
            BOOL v73 = v69 != 0;
            BOOL v72 = v66 != 0;
          }
          while (v69 | v66);
LABEL_112:
          unsigned int v75 = v43 - a7;
          int v76 = v45 < 0x10 || v46;
          int v77 = (char *)(a4 + 8 * v71);
          uint64_t v78 = v238 + 2 * v75;
          uint64_t v79 = (int32x4_t *)(a2 + v63);
          if (v39 < 0x10) {
            int v80 = 1;
          }
          else {
            int v80 = v76;
          }
          if (v244)
          {
            if (v80)
            {
              int v228 = v44;
              int v81 = v79;
              memcpy(v256, v79, sizeof(v256));
              unsigned int v41 = 16 * v38;
              unsigned int v39 = v223;
              int v44 = v228;
              int v82 = (int32x4_t *)v256;
              uint64_t v79 = v81;
              uint64_t result = v241;
LABEL_122:
              __dst = v79;
              block[0] = MEMORY[0x263EF8330];
              block[1] = 3221225472;
              block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
              block[3] = &__block_descriptor_90_e5_v8__0l;
              block[4] = result;
              int32x4_t v246 = v82;
              unsigned __int8 v254 = v45;
              unsigned __int8 v255 = v39;
              unsigned int v250 = v230;
              unsigned int v251 = v43 - v41;
              int32x4_t v247 = v77;
              uint64_t v248 = v78;
              uint64_t v249 = a11;
              unsigned int v252 = v239;
              unsigned int v253 = v44;
              if (v46)
              {
                dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
                uint64_t result = v241;
                a7 = v233;
                int v40 = v20 & v215;
                goto LABEL_124;
              }
              unsigned int v99 = *v77;
              if (v99 == 63)
              {
                int32x4_t v102 = v82[1];
                int32x4_t v103 = v82[2];
                int32x4_t v104 = v82[3];
                int32x4_t v105 = vuzp2q_s32(*v82, v103);
                int32x4_t v257 = vuzp1q_s32(*v82, v103);
                int32x4_t v259 = v105;
                int32x4_t v261 = vuzp1q_s32(v102, v104);
                int32x4_t v263 = vuzp2q_s32(v102, v104);
                uint64_t v100 = 64;
              }
              else if (v99 == 1)
              {
                int16x8_t v101 = vld1q_dup_s16(v82->i16);
                int32x4_t v257 = (int32x4_t)v101;
                int32x4_t v259 = (int32x4_t)v101;
                int32x4_t v261 = (int32x4_t)v101;
                int32x4_t v263 = (int32x4_t)v101;
                uint64_t v100 = 2;
              }
              else if (*v77)
              {
                uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v257, 32, (uint64_t)v82, v99);
              }
              else
              {
                uint64_t v100 = 0;
                int32x4_t v257 = 0uLL;
                int32x4_t v259 = 0uLL;
                int32x4_t v261 = 0uLL;
                int32x4_t v263 = 0uLL;
              }
              uint64_t v106 = (uint64_t)v82->i64 + v100;
              unsigned int v107 = v77[1];
              if (v107 == 63)
              {
                int32x4_t v110 = *(int32x4_t *)(v106 + 16);
                int32x4_t v111 = *(int32x4_t *)(v106 + 32);
                int32x4_t v112 = *(int32x4_t *)(v106 + 48);
                int32x4_t v113 = vuzp2q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v265 = vuzp1q_s32(*(int32x4_t *)v106, v111);
                int32x4_t v267 = v113;
                int32x4_t v269 = vuzp1q_s32(v110, v112);
                int32x4_t v271 = vuzp2q_s32(v110, v112);
                uint64_t v108 = 64;
              }
              else if (v107 == 1)
              {
                int16x8_t v109 = vld1q_dup_s16((const __int16 *)v106);
                int32x4_t v265 = (int32x4_t)v109;
                int32x4_t v267 = (int32x4_t)v109;
                int32x4_t v269 = (int32x4_t)v109;
                int32x4_t v271 = (int32x4_t)v109;
                uint64_t v108 = 2;
              }
              else if (v77[1])
              {
                uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, v106, v107);
              }
              else
              {
                uint64_t v108 = 0;
                int32x4_t v265 = 0uLL;
                int32x4_t v267 = 0uLL;
                int32x4_t v269 = 0uLL;
                int32x4_t v271 = 0uLL;
              }
              uint64_t v114 = v106 + v108;
              unsigned int v115 = v77[2];
              if (v115 == 63)
              {
                int32x4_t v118 = *(int32x4_t *)(v114 + 16);
                int32x4_t v119 = *(int32x4_t *)(v114 + 32);
                int32x4_t v120 = *(int32x4_t *)(v114 + 48);
                int32x4_t v121 = vuzp2q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v258 = vuzp1q_s32(*(int32x4_t *)v114, v119);
                int32x4_t v260 = v121;
                int32x4_t v262 = vuzp1q_s32(v118, v120);
                int32x4_t v264 = vuzp2q_s32(v118, v120);
                uint64_t v116 = 64;
              }
              else if (v115 == 1)
              {
                int16x8_t v117 = vld1q_dup_s16((const __int16 *)v114);
                int32x4_t v258 = (int32x4_t)v117;
                int32x4_t v260 = (int32x4_t)v117;
                int32x4_t v262 = (int32x4_t)v117;
                int32x4_t v264 = (int32x4_t)v117;
                uint64_t v116 = 2;
              }
              else if (v77[2])
              {
                uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v258, 32, v114, v115);
              }
              else
              {
                uint64_t v116 = 0;
                int32x4_t v258 = 0uLL;
                int32x4_t v260 = 0uLL;
                int32x4_t v262 = 0uLL;
                int32x4_t v264 = 0uLL;
              }
              uint64_t v122 = v114 + v116;
              unsigned int v123 = v77[3];
              if (v123 == 63)
              {
                int32x4_t v126 = *(int32x4_t *)(v122 + 16);
                int32x4_t v127 = *(int32x4_t *)(v122 + 32);
                int32x4_t v128 = *(int32x4_t *)(v122 + 48);
                int32x4_t v129 = vuzp2q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v266 = vuzp1q_s32(*(int32x4_t *)v122, v127);
                int32x4_t v268 = v129;
                int32x4_t v270 = vuzp1q_s32(v126, v128);
                int32x4_t v272 = vuzp2q_s32(v126, v128);
                uint64_t v124 = 64;
              }
              else if (v123 == 1)
              {
                int16x8_t v125 = vld1q_dup_s16((const __int16 *)v122);
                int32x4_t v266 = (int32x4_t)v125;
                int32x4_t v268 = (int32x4_t)v125;
                int32x4_t v270 = (int32x4_t)v125;
                int32x4_t v272 = (int32x4_t)v125;
                uint64_t v124 = 2;
              }
              else if (v77[3])
              {
                uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, v122, v123);
              }
              else
              {
                uint64_t v124 = 0;
                int32x4_t v266 = 0uLL;
                int32x4_t v268 = 0uLL;
                int32x4_t v270 = 0uLL;
                int32x4_t v272 = 0uLL;
              }
              uint64_t v130 = v122 + v124;
              unsigned int v131 = v77[4];
              if (v131 == 63)
              {
                int32x4_t v134 = *(int32x4_t *)(v130 + 16);
                int32x4_t v135 = *(int32x4_t *)(v130 + 32);
                int32x4_t v136 = *(int32x4_t *)(v130 + 48);
                int32x4_t v137 = vuzp2q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v273 = vuzp1q_s32(*(int32x4_t *)v130, v135);
                int32x4_t v275 = v137;
                int32x4_t v277 = vuzp1q_s32(v134, v136);
                int32x4_t v279 = vuzp2q_s32(v134, v136);
                uint64_t v132 = 64;
              }
              else if (v131 == 1)
              {
                int16x8_t v133 = vld1q_dup_s16((const __int16 *)v130);
                int32x4_t v273 = (int32x4_t)v133;
                int32x4_t v275 = (int32x4_t)v133;
                int32x4_t v277 = (int32x4_t)v133;
                int32x4_t v279 = (int32x4_t)v133;
                uint64_t v132 = 2;
              }
              else if (v77[4])
              {
                uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v273, 32, v130, v131);
              }
              else
              {
                uint64_t v132 = 0;
                int32x4_t v273 = 0uLL;
                int32x4_t v275 = 0uLL;
                int32x4_t v277 = 0uLL;
                int32x4_t v279 = 0uLL;
              }
              uint64_t v138 = v130 + v132;
              unsigned int v139 = v77[5];
              if (v139 == 63)
              {
                int32x4_t v142 = *(int32x4_t *)(v138 + 16);
                int32x4_t v143 = *(int32x4_t *)(v138 + 32);
                int32x4_t v144 = *(int32x4_t *)(v138 + 48);
                int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v281 = vuzp1q_s32(*(int32x4_t *)v138, v143);
                int32x4_t v283 = v145;
                int32x4_t v285 = vuzp1q_s32(v142, v144);
                int32x4_t v287 = vuzp2q_s32(v142, v144);
                uint64_t v140 = 64;
              }
              else if (v139 == 1)
              {
                int16x8_t v141 = vld1q_dup_s16((const __int16 *)v138);
                int32x4_t v281 = (int32x4_t)v141;
                int32x4_t v283 = (int32x4_t)v141;
                int32x4_t v285 = (int32x4_t)v141;
                int32x4_t v287 = (int32x4_t)v141;
                uint64_t v140 = 2;
              }
              else if (v77[5])
              {
                uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, v138, v139);
              }
              else
              {
                uint64_t v140 = 0;
                int32x4_t v281 = 0uLL;
                int32x4_t v283 = 0uLL;
                int32x4_t v285 = 0uLL;
                int32x4_t v287 = 0uLL;
              }
              uint64_t v146 = v138 + v140;
              unsigned int v147 = v77[6];
              if (v147 == 63)
              {
                int32x4_t v150 = *(int32x4_t *)(v146 + 16);
                int32x4_t v151 = *(int32x4_t *)(v146 + 32);
                int32x4_t v152 = *(int32x4_t *)(v146 + 48);
                int32x4_t v153 = vuzp2q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v274 = vuzp1q_s32(*(int32x4_t *)v146, v151);
                int32x4_t v276 = v153;
                int32x4_t v278 = vuzp1q_s32(v150, v152);
                int32x4_t v280 = vuzp2q_s32(v150, v152);
                uint64_t v148 = 64;
              }
              else if (v147 == 1)
              {
                int16x8_t v149 = vld1q_dup_s16((const __int16 *)v146);
                int32x4_t v274 = (int32x4_t)v149;
                int32x4_t v276 = (int32x4_t)v149;
                int32x4_t v278 = (int32x4_t)v149;
                int32x4_t v280 = (int32x4_t)v149;
                uint64_t v148 = 2;
              }
              else if (v77[6])
              {
                uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v274, 32, v146, v147);
              }
              else
              {
                uint64_t v148 = 0;
                int32x4_t v274 = 0uLL;
                int32x4_t v276 = 0uLL;
                int32x4_t v278 = 0uLL;
                int32x4_t v280 = 0uLL;
              }
              uint64_t v154 = v146 + v148;
              unsigned int v155 = v77[7];
              if (v155 == 63)
              {
                int32x4_t v158 = *(int32x4_t *)(v154 + 16);
                int32x4_t v159 = *(int32x4_t *)(v154 + 32);
                int32x4_t v160 = *(int32x4_t *)(v154 + 48);
                int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v282 = vuzp1q_s32(*(int32x4_t *)v154, v159);
                int32x4_t v284 = v161;
                int32x4_t v286 = vuzp1q_s32(v158, v160);
                int32x4_t v288 = vuzp2q_s32(v158, v160);
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
              else
              {
                if (v155 != 1)
                {
                  if (v77[7])
                  {
                    AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, v154, v155);
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
                  else
                  {
                    int32x4_t v282 = 0uLL;
                    int32x4_t v284 = 0uLL;
                    int32x4_t v286 = 0uLL;
                    int32x4_t v288 = 0uLL;
                    uint64_t v156 = v252;
                    if (!v252) {
                      goto LABEL_234;
                    }
                  }
LABEL_200:
                  if (!v253) {
                    goto LABEL_234;
                  }
                  uint64_t v162 = 0;
                  uint64_t v163 = 32 * v250;
                  uint64_t v164 = 2 * v251;
                  long long v165 = &v257.i8[v163 + v164];
                  uint64_t v166 = v248;
                  uint64_t v167 = v249;
                  unint64_t v168 = 2 * v253;
                  if (v168 <= 1) {
                    unint64_t v169 = 1;
                  }
                  else {
                    unint64_t v169 = 2 * v253;
                  }
                  uint64_t v170 = v163 + v164;
                  int v171 = &v257.i8[v163 + v164];
                  if (v169) {
                    BOOL v172 = (v169 - 1) >> 32 == 0;
                  }
                  else {
                    BOOL v172 = 0;
                  }
                  uint64_t v173 = v169 & 0x1FFFFFFE0;
                  uint64_t v174 = v169 & 0x1FFFFFFF8;
                  char v176 = !v172 || v169 < 8;
                  uint64_t v177 = &v258.i8[v170];
                  long long v178 = (long long *)(v248 + 16);
                  long long v179 = v165;
                  uint64_t v180 = v248;
                  while (2)
                  {
                    unsigned int v181 = (char *)(v166 + v167 * v162);
                    char v182 = &v165[32 * v162];
                    if ((unint64_t)(&v171[32 * v162] - v181) < 0x20) {
                      char v183 = 1;
                    }
                    else {
                      char v183 = v176;
                    }
                    if (v183)
                    {
                      int v184 = 0;
LABEL_231:
                      unsigned int v194 = v184 + 1;
                      do
                      {
                        char v195 = *v181++;
                        *v182++ = v195;
                      }
                      while (v168 > v194++);
                    }
                    else
                    {
                      if (v169 >= 0x20)
                      {
                        unsigned int v186 = v178;
                        unsigned int v187 = v177;
                        uint64_t v188 = v169 & 0x1FFFFFFE0;
                        do
                        {
                          long long v189 = *v186;
                          *((_OWORD *)v187 - 1) = *(v186 - 1);
                          *(_OWORD *)unsigned int v187 = v189;
                          v187 += 32;
                          v186 += 2;
                          v188 -= 32;
                        }
                        while (v188);
                        if (v169 == v173) {
                          goto LABEL_214;
                        }
                        uint64_t v185 = v169 & 0x1FFFFFFE0;
                        if ((v169 & 0x18) == 0)
                        {
                          v181 += v173;
                          v182 += v173;
                          int v184 = v169 & 0xFFFFFFE0;
                          goto LABEL_231;
                        }
                      }
                      else
                      {
                        uint64_t v185 = 0;
                      }
                      v182 += v174;
                      uint64_t v190 = v185 - v174;
                      BOOL v191 = (uint64_t *)(v180 + v185);
                      BOOL v192 = &v179[v185];
                      do
                      {
                        uint64_t v193 = *v191++;
                        *(void *)BOOL v192 = v193;
                        v192 += 8;
                        v190 += 8;
                      }
                      while (v190);
                      if (v169 != v174)
                      {
                        v181 += v174;
                        int v184 = v169 & 0xFFFFFFF8;
                        goto LABEL_231;
                      }
                    }
LABEL_214:
                    ++v162;
                    v177 += 32;
                    long long v178 = (long long *)((char *)v178 + v167);
                    v180 += v167;
                    v179 += 32;
                    if (v162 == v156) {
                      goto LABEL_234;
                    }
                    continue;
                  }
                }
                int16x8_t v157 = vld1q_dup_s16((const __int16 *)v154);
                int32x4_t v282 = (int32x4_t)v157;
                int32x4_t v284 = (int32x4_t)v157;
                int32x4_t v286 = (int32x4_t)v157;
                int32x4_t v288 = (int32x4_t)v157;
                uint64_t v156 = v252;
                if (v252) {
                  goto LABEL_200;
                }
              }
LABEL_234:
              uint64_t v197 = 0;
              unsigned int v198 = v246;
              unsigned int v199 = v247;
              int v200 = v254;
              int v201 = v255;
              a7 = v233;
              uint64_t result = v241;
              int v40 = v20 & v215;
              do
              {
                uint64_t v210 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197 + 1];
                uint64_t v211 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v197];
                unsigned int v212 = (v200 - 8 * v211) & ~((v200 - 8 * (int)v211) >> 31);
                if (v212 >= 8) {
                  unsigned int v212 = 8;
                }
                unsigned int v213 = (v201 - 4 * v210) & ~((v201 - 4 * (int)v210) >> 31);
                if (v213 >= 4) {
                  unsigned int v213 = 4;
                }
                if (v212) {
                  BOOL v214 = v213 == 0;
                }
                else {
                  BOOL v214 = 1;
                }
                if (v214)
                {
                  char v209 = 0;
                }
                else
                {
                  uint64_t v202 = &v257 + 8 * v210 + v211;
                  float32x2x2_t v203 = (float32x2x2_t)*v202;
                  int32x4_t v204 = v202[2];
                  int32x4_t v205 = vzip2q_s32(*v202, v204);
                  float32x2x2_t v206 = (float32x2x2_t)v202[4];
                  int32x4_t v207 = v202[6];
                  int v208 = (float *)v198;
                  vst2_f32(v208, v203);
                  v208 += 4;
                  vst2_f32(v208, v206);
                  v198[2] = v205;
                  v198[3] = vzip2q_s32((int32x4_t)v206, v207);
                  v198 += 4;
                  char v209 = 63;
                }
                *v199++ = v209;
                v197 += 2;
              }
              while (v197 != 16);
LABEL_124:
              uint64_t v79 = __dst;
              if (v244) {
                goto LABEL_47;
              }
              goto LABEL_48;
            }
            int v82 = (int32x4_t *)v256;
          }
          else
          {
            int v82 = v79;
            if (v80) {
              goto LABEL_122;
            }
          }
          uint64_t v83 = 0;
          uint64_t v84 = (float *)v82;
          do
          {
            uint64_t v94 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83 + 1];
            uint64_t v95 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v83];
            unsigned int v96 = (v45 - 8 * v95) & ~((int)(v45 - 8 * v95) >> 31);
            if (v96 >= 8) {
              unsigned int v96 = 8;
            }
            unsigned int v97 = (v39 - 4 * v94) & ~((int)(v39 - 4 * v94) >> 31);
            if (v97 >= 4) {
              unsigned int v97 = 4;
            }
            if (v96) {
              BOOL v98 = v97 == 0;
            }
            else {
              BOOL v98 = 1;
            }
            if (v98)
            {
              char v93 = 0;
            }
            else
            {
              BOOL v85 = (float32x2x2_t *)(v78 + 4 * a11 * v94 + 16 * v95);
              float32x2x2_t v86 = *v85;
              int32x4_t v87 = *(int32x4_t *)((char *)v85 + a11);
              int16x8_t v88 = (int32x4_t *)((char *)v85 + 2 * a11);
              float32x2x2_t v89 = (float32x2x2_t)*v88;
              int32x4_t v90 = *(int32x4_t *)((char *)v88 + a11);
              int32x4_t v91 = vzip2q_s32(*v88, v90);
              int32x4_t v92 = v84;
              vst2_f32(v92, v86);
              v92 += 4;
              vst2_f32(v92, v89);
              *((int32x4_t *)v84 + 2) = vzip2q_s32((int32x4_t)v86, v87);
              *((int32x4_t *)v84 + 3) = v91;
              v84 += 16;
              char v93 = 63;
            }
            *v77++ = v93;
            v83 += 2;
          }
          while (v83 != 16);
          a7 = v233;
          int v40 = v20 & v215;
          if (v244)
          {
LABEL_47:
            memcpy(v79, v82, 0x200uLL);
            uint64_t result = v241;
          }
LABEL_48:
          BOOL v21 = v38++ == v234 >> 4;
        }
        while (!v21);
        BOOL v21 = v20++ == v221;
      }
      while (!v21);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,false,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v252 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a1;
  unsigned int v201 = a8;
  unsigned int v18 = a8 >> 4;
  unsigned int v186 = a8 + a10 - 1;
  unsigned int v188 = v186 >> 4;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  uint64_t v202 = v17;
  if (*(void *)(v17 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v17 = v202;
    int v22 = CacheMode & 0xF00;
  }
  else
  {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v206 = v26;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v17, *(_DWORD *)(v17 + 144) + a12);
  uint64_t v28 = v202;
  BOOL v195 = isLevelTiled;
  if (v18 <= v188)
  {
    unsigned int v194 = a7 + a9 - 1;
    unsigned int v185 = a7 >> 4;
    if (a7 >> 4 <= v194 >> 4)
    {
      unsigned int v182 = a5 - 1;
      unsigned int v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      int v183 = ((a6 - 1) & 0xF) + 1;
      unsigned int v184 = (a6 - 1) >> 4;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF0000000FLL);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v29, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v29));
      __int32 v193 = v30.i32[0] | v30.i32[1];
      BOOL v191 = v30.i32[1] != 0;
      int8x8_t v192 = v30;
      BOOL v190 = v30.i32[0] != 0;
      unint64_t v181 = 8 * v20 * (unint64_t)v19;
      do
      {
        unsigned int v31 = (16 * v18) | 0xF;
        if (16 * v18 <= v201) {
          int v32 = v201;
        }
        else {
          int v32 = 16 * v18;
        }
        unsigned int v33 = v185;
        if (v186 < v31) {
          unsigned int v31 = v186;
        }
        unsigned int v200 = 16 * v18;
        int v189 = v32 - 16 * v18;
        int v199 = v31 - v32 + 1;
        int v34 = v183;
        if (v18 != v184) {
          int v34 = 16;
        }
        unsigned int v207 = v34;
        uint64_t v198 = a3 + (v32 - v201) * a11;
        do
        {
          unsigned int v35 = 16 * v33;
          unsigned int v36 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= a7) {
            int v37 = a7;
          }
          else {
            int v37 = 16 * v33;
          }
          if (v194 < v36) {
            unsigned int v36 = v194;
          }
          int v38 = v36 - v37 + 1;
          if (v33 == v204) {
            unsigned int v39 = v203;
          }
          else {
            unsigned int v39 = 16;
          }
          BOOL v40 = 1;
          if (v200 >= v201 && v35 >= a7)
          {
            int v41 = v203;
            if (v33 != v204) {
              int v41 = 16;
            }
            BOOL v40 = v38 != v41 || v199 != v207;
          }
          if (v195)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v181 >> (*(unsigned char *)(v28 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  unsigned int v62 = 16;
                  char v65 = 1;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v172 = (v62 >> 4) - 1;
            if (v64)
            {
              unsigned int v173 = 0;
              if (v65) {
                goto LABEL_219;
              }
LABEL_208:
              unsigned int v174 = 32 - __clz(~(-1 << -(char)__clz(((v66 + 15) >> 4) - 1)));
              if (v174 | v173) {
                goto LABEL_209;
              }
LABEL_220:
              uint64_t v176 = 0;
            }
            else
            {
              unsigned int v173 = 32 - __clz(~(-1 << -(char)__clz(v172)));
              if ((v65 & 1) == 0) {
                goto LABEL_208;
              }
LABEL_219:
              unsigned int v174 = 0;
              if (!v173) {
                goto LABEL_220;
              }
LABEL_209:
              int v175 = 0;
              uint64_t v176 = 0;
              int v177 = v33 & v172;
              BOOL v178 = v173 != 0;
              BOOL v179 = v174 != 0;
              int v180 = 1;
              do
              {
                --v173;
                if (v178) {
                  v176 |= (unint64_t)(v180 & v177) << v175++;
                }
                else {
                  unsigned int v173 = 0;
                }
                --v174;
                if (v179) {
                  v176 |= (unint64_t)(v180 & v18 & ((v66 >> 4) - 1)) << v175++;
                }
                else {
                  unsigned int v174 = 0;
                }
                v180 *= 2;
                --v175;
                BOOL v179 = v174 != 0;
                BOOL v178 = v173 != 0;
              }
              while (v174 | v173);
            }
            unint64_t v50 = ((unint64_t)(v35 / v62 + v200 / v66 * ((v62 + v182) / v62)) << 14) + (v176 << 9);
            goto LABEL_58;
          }
          if (v193)
          {
            int v43 = 0;
            uint64_t v44 = 0;
            int v45 = 1;
            BOOL v46 = v191;
            BOOL v47 = v190;
            __int32 v48 = v192.i32[1];
            __int32 v49 = v192.i32[0];
            do
            {
              --v48;
              if (v46) {
                v44 |= (unint64_t)(v45 & v33) << v43++;
              }
              else {
                __int32 v48 = 0;
              }
              --v49;
              if (v47) {
                v44 |= (unint64_t)(v45 & v18) << v43++;
              }
              else {
                __int32 v49 = 0;
              }
              v45 *= 2;
              --v43;
              BOOL v47 = v49 != 0;
              BOOL v46 = v48 != 0;
            }
            while (v49 | v48);
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v50 = v44 << 9;
LABEL_58:
          unsigned int v51 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 15;
          if (v52 < 0x20) {
            unsigned int v53 = 0;
          }
          else {
            unsigned int v53 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 4) - 1)));
          }
          unsigned int v54 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20)
          {
            unsigned int v56 = 0;
            if (!v53)
            {
LABEL_80:
              uint64_t v58 = 0;
              goto LABEL_81;
            }
          }
          else
          {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
            if (!(v56 | v53)) {
              goto LABEL_80;
            }
          }
          int v57 = 0;
          uint64_t v58 = 0;
          BOOL v59 = v53 != 0;
          BOOL v60 = v56 != 0;
          int v61 = 1;
          do
          {
            --v53;
            if (v59) {
              v58 |= (unint64_t)(v61 & v33) << v57++;
            }
            else {
              unsigned int v53 = 0;
            }
            --v56;
            if (v60) {
              v58 |= (unint64_t)(v61 & v18) << v57++;
            }
            else {
              unsigned int v56 = 0;
            }
            v61 *= 2;
            --v57;
            BOOL v60 = v56 != 0;
            BOOL v59 = v53 != 0;
          }
          while (v56 | v53);
LABEL_81:
          uint64_t v67 = a7;
          int v68 = v39 < 0x10 || v40;
          unsigned int v69 = (char *)(a4 + 8 * v58);
          unint64_t v70 = v198 + 2 * (v37 - a7);
          uint64_t v71 = (int32x4_t *)(a2 + v50);
          if (v207 < 0x10) {
            int v72 = 1;
          }
          else {
            int v72 = v68;
          }
          __src = v71;
          if (v206)
          {
            if (!v72)
            {
              uint64_t v71 = (int32x4_t *)__dst;
LABEL_94:
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock(v70, a11, (unint64_t)v71, v69, v39, v207);
              goto LABEL_95;
            }
            int v73 = v38;
            memcpy(__dst, __src, sizeof(__dst));
            int v38 = v73;
            uint64_t v71 = (int32x4_t *)__dst;
            uint64_t v28 = v202;
          }
          else if (!v72)
          {
            goto LABEL_94;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb0EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          char v209 = v71;
          unsigned __int8 v217 = v39;
          unsigned __int8 v218 = v207;
          unsigned int v213 = v189;
          unsigned int v214 = v37 - v35;
          uint64_t v210 = v69;
          unint64_t v211 = v70;
          uint64_t v212 = a11;
          unsigned int v215 = v199;
          unsigned int v216 = v38;
          if (!v40)
          {
            unsigned int v74 = *v69;
            a7 = v67;
            if (v74 == 63)
            {
              int32x4_t v77 = v71[1];
              int32x4_t v78 = v71[2];
              int32x4_t v79 = v71[3];
              int32x4_t v80 = vuzp2q_s32(*v71, v78);
              int32x4_t v220 = vuzp1q_s32(*v71, v78);
              int32x4_t v222 = v80;
              int32x4_t v224 = vuzp1q_s32(v77, v79);
              int32x4_t v226 = vuzp2q_s32(v77, v79);
              uint64_t v75 = 64;
            }
            else if (v74 == 1)
            {
              int16x8_t v76 = vld1q_dup_s16(v71->i16);
              int32x4_t v220 = (int32x4_t)v76;
              int32x4_t v222 = (int32x4_t)v76;
              int32x4_t v224 = (int32x4_t)v76;
              int32x4_t v226 = (int32x4_t)v76;
              uint64_t v75 = 2;
            }
            else if (*v69)
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, (uint64_t)v71, v74);
            }
            else
            {
              uint64_t v75 = 0;
              int32x4_t v220 = 0uLL;
              int32x4_t v222 = 0uLL;
              int32x4_t v224 = 0uLL;
              int32x4_t v226 = 0uLL;
            }
            uint64_t v81 = (uint64_t)v71->i64 + v75;
            unsigned int v82 = v69[1];
            if (v82 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)(v81 + 16);
              int32x4_t v86 = *(int32x4_t *)(v81 + 32);
              int32x4_t v87 = *(int32x4_t *)(v81 + 48);
              int32x4_t v88 = vuzp2q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v81, v86);
              int32x4_t v230 = v88;
              int32x4_t v232 = vuzp1q_s32(v85, v87);
              int32x4_t v234 = vuzp2q_s32(v85, v87);
              uint64_t v83 = 64;
            }
            else if (v82 == 1)
            {
              int16x8_t v84 = vld1q_dup_s16((const __int16 *)v81);
              int32x4_t v228 = (int32x4_t)v84;
              int32x4_t v230 = (int32x4_t)v84;
              int32x4_t v232 = (int32x4_t)v84;
              int32x4_t v234 = (int32x4_t)v84;
              uint64_t v83 = 2;
            }
            else if (v69[1])
            {
              uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v81, v82);
            }
            else
            {
              uint64_t v83 = 0;
              int32x4_t v228 = 0uLL;
              int32x4_t v230 = 0uLL;
              int32x4_t v232 = 0uLL;
              int32x4_t v234 = 0uLL;
            }
            uint64_t v89 = v81 + v83;
            unsigned int v90 = v69[2];
            if (v90 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)(v89 + 16);
              int32x4_t v94 = *(int32x4_t *)(v89 + 32);
              int32x4_t v95 = *(int32x4_t *)(v89 + 48);
              int32x4_t v96 = vuzp2q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v221 = vuzp1q_s32(*(int32x4_t *)v89, v94);
              int32x4_t v223 = v96;
              int32x4_t v225 = vuzp1q_s32(v93, v95);
              int32x4_t v227 = vuzp2q_s32(v93, v95);
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
              int32x4_t v221 = (int32x4_t)v92;
              int32x4_t v223 = (int32x4_t)v92;
              int32x4_t v225 = (int32x4_t)v92;
              int32x4_t v227 = (int32x4_t)v92;
              uint64_t v91 = 2;
            }
            else if (v69[2])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v221, 32, v89, v90);
            }
            else
            {
              uint64_t v91 = 0;
              int32x4_t v221 = 0uLL;
              int32x4_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
              int32x4_t v227 = 0uLL;
            }
            uint64_t v97 = v89 + v91;
            unsigned int v98 = v69[3];
            if (v98 == 63)
            {
              int32x4_t v101 = *(int32x4_t *)(v97 + 16);
              int32x4_t v102 = *(int32x4_t *)(v97 + 32);
              int32x4_t v103 = *(int32x4_t *)(v97 + 48);
              int32x4_t v104 = vuzp2q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v229 = vuzp1q_s32(*(int32x4_t *)v97, v102);
              int32x4_t v231 = v104;
              int32x4_t v233 = vuzp1q_s32(v101, v103);
              int32x4_t v235 = vuzp2q_s32(v101, v103);
              uint64_t v99 = 64;
            }
            else if (v98 == 1)
            {
              int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
              int32x4_t v229 = (int32x4_t)v100;
              int32x4_t v231 = (int32x4_t)v100;
              int32x4_t v233 = (int32x4_t)v100;
              int32x4_t v235 = (int32x4_t)v100;
              uint64_t v99 = 2;
            }
            else if (v69[3])
            {
              uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v229, 32, v97, v98);
            }
            else
            {
              uint64_t v99 = 0;
              int32x4_t v229 = 0uLL;
              int32x4_t v231 = 0uLL;
              int32x4_t v233 = 0uLL;
              int32x4_t v235 = 0uLL;
            }
            uint64_t v105 = v97 + v99;
            unsigned int v106 = v69[4];
            if (v106 == 63)
            {
              int32x4_t v109 = *(int32x4_t *)(v105 + 16);
              int32x4_t v110 = *(int32x4_t *)(v105 + 32);
              int32x4_t v111 = *(int32x4_t *)(v105 + 48);
              int32x4_t v112 = vuzp2q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v236 = vuzp1q_s32(*(int32x4_t *)v105, v110);
              int32x4_t v238 = v112;
              int32x4_t v240 = vuzp1q_s32(v109, v111);
              int32x4_t v242 = vuzp2q_s32(v109, v111);
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
              int32x4_t v236 = (int32x4_t)v108;
              int32x4_t v238 = (int32x4_t)v108;
              int32x4_t v240 = (int32x4_t)v108;
              int32x4_t v242 = (int32x4_t)v108;
              uint64_t v107 = 2;
            }
            else if (v69[4])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v236, 32, v105, v106);
            }
            else
            {
              uint64_t v107 = 0;
              int32x4_t v236 = 0uLL;
              int32x4_t v238 = 0uLL;
              int32x4_t v240 = 0uLL;
              int32x4_t v242 = 0uLL;
            }
            uint64_t v113 = v105 + v107;
            unsigned int v114 = v69[5];
            if (v114 == 63)
            {
              int32x4_t v117 = *(int32x4_t *)(v113 + 16);
              int32x4_t v118 = *(int32x4_t *)(v113 + 32);
              int32x4_t v119 = *(int32x4_t *)(v113 + 48);
              int32x4_t v120 = vuzp2q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v244 = vuzp1q_s32(*(int32x4_t *)v113, v118);
              int32x4_t v246 = v120;
              int32x4_t v248 = vuzp1q_s32(v117, v119);
              int32x4_t v250 = vuzp2q_s32(v117, v119);
              uint64_t v115 = 64;
            }
            else if (v114 == 1)
            {
              int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
              int32x4_t v244 = (int32x4_t)v116;
              int32x4_t v246 = (int32x4_t)v116;
              int32x4_t v248 = (int32x4_t)v116;
              int32x4_t v250 = (int32x4_t)v116;
              uint64_t v115 = 2;
            }
            else if (v69[5])
            {
              uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 32, v113, v114);
            }
            else
            {
              uint64_t v115 = 0;
              int32x4_t v244 = 0uLL;
              int32x4_t v246 = 0uLL;
              int32x4_t v248 = 0uLL;
              int32x4_t v250 = 0uLL;
            }
            uint64_t v121 = v113 + v115;
            unsigned int v122 = v69[6];
            if (v122 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)(v121 + 16);
              int32x4_t v126 = *(int32x4_t *)(v121 + 32);
              int32x4_t v127 = *(int32x4_t *)(v121 + 48);
              int32x4_t v128 = vuzp2q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v237 = vuzp1q_s32(*(int32x4_t *)v121, v126);
              int32x4_t v239 = v128;
              int32x4_t v241 = vuzp1q_s32(v125, v127);
              int32x4_t v243 = vuzp2q_s32(v125, v127);
              uint64_t v123 = 64;
            }
            else if (v122 == 1)
            {
              int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
              int32x4_t v237 = (int32x4_t)v124;
              int32x4_t v239 = (int32x4_t)v124;
              int32x4_t v241 = (int32x4_t)v124;
              int32x4_t v243 = (int32x4_t)v124;
              uint64_t v123 = 2;
            }
            else if (v69[6])
            {
              uint64_t v123 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v237, 32, v121, v122);
            }
            else
            {
              uint64_t v123 = 0;
              int32x4_t v237 = 0uLL;
              int32x4_t v239 = 0uLL;
              int32x4_t v241 = 0uLL;
              int32x4_t v243 = 0uLL;
            }
            uint64_t v129 = v121 + v123;
            unsigned int v130 = v69[7];
            if (v130 == 63)
            {
              int32x4_t v133 = *(int32x4_t *)(v129 + 16);
              int32x4_t v134 = *(int32x4_t *)(v129 + 32);
              int32x4_t v135 = *(int32x4_t *)(v129 + 48);
              int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v245 = vuzp1q_s32(*(int32x4_t *)v129, v134);
              int32x4_t v247 = v136;
              int32x4_t v249 = vuzp1q_s32(v133, v135);
              int32x4_t v251 = vuzp2q_s32(v133, v135);
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v130 != 1)
              {
                if (v69[7])
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 32, v129, v130);
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
                else
                {
                  int32x4_t v245 = 0uLL;
                  int32x4_t v247 = 0uLL;
                  int32x4_t v249 = 0uLL;
                  int32x4_t v251 = 0uLL;
                  uint64_t v131 = v215;
                  if (!v215) {
                    goto LABEL_190;
                  }
                }
LABEL_156:
                if (!v216) {
                  goto LABEL_190;
                }
                uint64_t v137 = 0;
                uint64_t v138 = 32 * v213;
                uint64_t v139 = 2 * v214;
                uint64_t v140 = &v220.i8[v138 + v139];
                unint64_t v141 = v211;
                uint64_t v142 = v212;
                unint64_t v143 = 2 * v216;
                if (v143 <= 1) {
                  unint64_t v144 = 1;
                }
                else {
                  unint64_t v144 = 2 * v216;
                }
                uint64_t v145 = v138 + v139;
                uint64_t v146 = &v220.i8[v138 + v139];
                if (v144) {
                  BOOL v147 = (v144 - 1) >> 32 == 0;
                }
                else {
                  BOOL v147 = 0;
                }
                uint64_t v148 = v144 & 0x1FFFFFFE0;
                uint64_t v149 = v144 & 0x1FFFFFFF8;
                char v151 = !v147 || v144 < 8;
                int32x4_t v152 = &v221.i8[v145];
                int32x4_t v153 = (long long *)(v211 + 16);
                uint64_t v154 = v140;
                unint64_t v155 = v211;
                while (2)
                {
                  uint64_t v156 = (char *)(v141 + v142 * v137);
                  int16x8_t v157 = &v140[32 * v137];
                  if ((unint64_t)(&v146[32 * v137] - v156) < 0x20) {
                    char v158 = 1;
                  }
                  else {
                    char v158 = v151;
                  }
                  if (v158)
                  {
                    int v159 = 0;
LABEL_187:
                    unsigned int v169 = v159 + 1;
                    do
                    {
                      char v170 = *v156++;
                      *v157++ = v170;
                    }
                    while (v143 > v169++);
                  }
                  else
                  {
                    if (v144 >= 0x20)
                    {
                      int32x4_t v161 = v153;
                      uint64_t v162 = v152;
                      uint64_t v163 = v144 & 0x1FFFFFFE0;
                      do
                      {
                        long long v164 = *v161;
                        *((_OWORD *)v162 - 1) = *(v161 - 1);
                        *(_OWORD *)uint64_t v162 = v164;
                        v162 += 32;
                        v161 += 2;
                        v163 -= 32;
                      }
                      while (v163);
                      if (v144 == v148) {
                        goto LABEL_170;
                      }
                      uint64_t v160 = v144 & 0x1FFFFFFE0;
                      if ((v144 & 0x18) == 0)
                      {
                        v156 += v148;
                        v157 += v148;
                        int v159 = v144 & 0xFFFFFFE0;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      uint64_t v160 = 0;
                    }
                    v157 += v149;
                    uint64_t v165 = v160 - v149;
                    uint64_t v166 = (uint64_t *)(v155 + v160);
                    uint64_t v167 = &v154[v160];
                    do
                    {
                      uint64_t v168 = *v166++;
                      *(void *)uint64_t v167 = v168;
                      v167 += 8;
                      v165 += 8;
                    }
                    while (v165);
                    if (v144 != v149)
                    {
                      v156 += v149;
                      int v159 = v144 & 0xFFFFFFF8;
                      goto LABEL_187;
                    }
                  }
LABEL_170:
                  ++v137;
                  v152 += 32;
                  int32x4_t v153 = (long long *)((char *)v153 + v142);
                  v155 += v142;
                  v154 += 32;
                  if (v137 == v131) {
                    goto LABEL_190;
                  }
                  continue;
                }
              }
              int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
              int32x4_t v245 = (int32x4_t)v132;
              int32x4_t v247 = (int32x4_t)v132;
              int32x4_t v249 = (int32x4_t)v132;
              int32x4_t v251 = (int32x4_t)v132;
              uint64_t v131 = v215;
              if (v215) {
                goto LABEL_156;
              }
            }
LABEL_190:
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::compressMacroblock((unint64_t)&v220, 32, (unint64_t)v209, v210, v217, v218);
            if (!v206) {
              goto LABEL_26;
            }
            goto LABEL_191;
          }
          dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
LABEL_95:
          a7 = v67;
          if (!v206) {
            goto LABEL_26;
          }
LABEL_191:
          memcpy(__src, v71, 0x200uLL);
LABEL_26:
          BOOL v23 = v33++ == v194 >> 4;
          uint64_t v28 = v202;
        }
        while (!v23);
        BOOL v23 = v18++ == v188;
      }
      while (!v23);
    }
  }
}